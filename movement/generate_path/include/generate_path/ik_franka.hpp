/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2021-07-28 15:41:26.511911
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION == 0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b)                                                                                                                     \
    {                                                                                                                                        \
        if (!(b))                                                                                                                            \
        {                                                                                                                                    \
            std::stringstream ss;                                                                                                            \
            ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " << __PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; \
            throw std::runtime_error(ss.str());                                                                                              \
        }                                                                                                                                    \
    }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI ((IkReal)6.28318530717959)
#define IKPI ((IkReal)3.14159265358979)
#define IKPI_2 ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C"
{
    void dgetrf_(const int *m, const int *n, double *a, const int *lda, int *ipiv, int *info);
    void zgetrf_(const int *m, const int *n, std::complex<double> *a, const int *lda, int *ipiv, int *info);
    void dgetri_(const int *n, const double *a, const int *lda, int *ipiv, double *work, const int *lwork, int *info);
    void dgesv_(const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi, double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

    inline float IKabs(float f)
    {
        return fabsf(f);
    }
    inline double IKabs(double f) { return fabs(f); }

    inline float IKsqr(float f) { return f * f; }
    inline double IKsqr(double f) { return f * f; }

    inline float IKlog(float f) { return logf(f); }
    inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif

    inline float IKasin(float f)
    {
        IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH); // any more error implies something is wrong with the solver
        if (f <= -1)
            return float(-IKPI_2);
        else if (f >= 1)
            return float(IKPI_2);
        return asinf(f);
    }
    inline double IKasin(double f)
    {
        IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH); // any more error implies something is wrong with the solver
        if (f <= -1)
            return -IKPI_2;
        else if (f >= 1)
            return IKPI_2;
        return asin(f);
    }

    // return positive value in [0,y)
    inline float IKfmod(float x, float y)
    {
        while (x < 0)
        {
            x += y;
        }
        return fmodf(x, y);
    }

    // return positive value in [0,y)
    inline double IKfmod(double x, double y)
    {
        while (x < 0)
        {
            x += y;
        }
        return fmod(x, y);
    }

    inline float IKacos(float f)
    {
        IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH); // any more error implies something is wrong with the solver
        if (f <= -1)
            return float(IKPI);
        else if (f >= 1)
            return float(0);
        return acosf(f);
    }
    inline double IKacos(double f)
    {
        IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH); // any more error implies something is wrong with the solver
        if (f <= -1)
            return IKPI;
        else if (f >= 1)
            return 0;
        return acos(f);
    }
    inline float IKsin(float f) { return sinf(f); }
    inline double IKsin(double f) { return sin(f); }
    inline float IKcos(float f) { return cosf(f); }
    inline double IKcos(double f) { return cos(f); }
    inline float IKtan(float f) { return tanf(f); }
    inline double IKtan(double f) { return tan(f); }
    inline float IKsqrt(float f)
    {
        if (f <= 0.0f)
            return 0.0f;
        return sqrtf(f);
    }
    inline double IKsqrt(double f)
    {
        if (f <= 0.0)
            return 0.0;
        return sqrt(f);
    }
    inline float IKatan2Simple(float fy, float fx)
    {
        return atan2f(fy, fx);
    }
    inline float IKatan2(float fy, float fx)
    {
        if (isnan(fy))
        {
            IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
            return float(IKPI_2);
        }
        else if (isnan(fx))
        {
            return 0;
        }
        return atan2f(fy, fx);
    }
    inline double IKatan2Simple(double fy, double fx)
    {
        return atan2(fy, fx);
    }
    inline double IKatan2(double fy, double fx)
    {
        if (isnan(fy))
        {
            IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
            return IKPI_2;
        }
        else if (isnan(fx))
        {
            return 0;
        }
        return atan2(fy, fx);
    }

    template <typename T>
    struct CheckValue
    {
        T value;
        bool valid;
    };

    template <typename T>
    inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
    {
        CheckValue<T> ret;
        ret.valid = false;
        ret.value = 0;
        if (!isnan(fy) && !isnan(fx))
        {
            if (IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH)
            {
                ret.value = IKatan2Simple(fy, fx);
                ret.valid = true;
            }
        }
        return ret;
    }

    inline float IKsign(float f)
    {
        if (f > 0)
        {
            return float(1);
        }
        else if (f < 0)
        {
            return float(-1);
        }
        return 0;
    }

    inline double IKsign(double f)
    {
        if (f > 0)
        {
            return 1.0;
        }
        else if (f < 0)
        {
            return -1.0;
        }
        return 0;
    }

    template <typename T>
    inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
    {
        CheckValue<T> ret;
        ret.valid = true;
        if (n == 0)
        {
            ret.value = 1.0;
            return ret;
        }
        else if (n == 1)
        {
            ret.value = f;
            return ret;
        }
        else if (n < 0)
        {
            if (f == 0)
            {
                ret.valid = false;
                ret.value = (T)1.0e30;
                return ret;
            }
            if (n == -1)
            {
                ret.value = T(1.0) / f;
                return ret;
            }
        }

        int num = n > 0 ? n : -n;
        if (num == 2)
        {
            ret.value = f * f;
        }
        else if (num == 3)
        {
            ret.value = f * f * f;
        }
        else
        {
            ret.value = 1.0;
            while (num > 0)
            {
                if (num & 1)
                {
                    ret.value *= f;
                }
                num >>= 1;
                f *= f;
            }
        }

        if (n < 0)
        {
            ret.value = T(1.0) / ret.value;
        }
        return ret;
    }

    template <typename T>
    struct ComplexLess
    {
        bool operator()(const complex<T> &lhs, const complex<T> &rhs) const
        {
            if (real(lhs) < real(rhs))
            {
                return true;
            }
            if (real(lhs) > real(rhs))
            {
                return false;
            }
            return imag(lhs) < imag(rhs);
        }
    };

    /// solves the forward kinematics equations.
    /// \param pfree is an array specifying the free joints of the chain.
    IKFAST_API void ComputeFk(const IkReal *j, IkReal *eetrans, IkReal *eerot)
    {
        IkReal x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82, x83, x84;
        x0 = IKcos(j[0]);
        x1 = IKcos(j[1]);
        x2 = IKsin(j[2]);
        x3 = IKcos(j[2]);
        x4 = IKsin(j[0]);
        x5 = IKcos(j[3]);
        x6 = IKsin(j[1]);
        x7 = IKsin(j[3]);
        x8 = IKsin(j[4]);
        x9 = IKcos(j[4]);
        x10 = IKcos(j[6]);
        x11 = IKsin(j[5]);
        x12 = IKcos(j[5]);
        x13 = IKsin(j[6]);
        x14 = ((0.088) * x8);
        x15 = ((0.0825) * x3);
        x16 = ((0.384) * x4);
        x17 = ((1.0) * x7);
        x18 = ((1.0) * x4);
        x19 = ((0.707113562373094) * x13);
        x20 = ((0.707113562373094) * x10);
        x21 = ((0.0825) * x4);
        x22 = ((0.107) * x7);
        x23 = ((0.707099999934968) * x10);
        x24 = ((0.384) * x3);
        x25 = ((0.707099999934968) * x13);
        x26 = ((0.088) * x7);
        x27 = ((1.0) * x3);
        x28 = ((0.088) * x9);
        x29 = ((0.316) * x6);
        x30 = ((0.107) * x9);
        x31 = ((0.107) * x8);
        x32 = (x5 * x6);
        x33 = (x6 * x7);
        x34 = (x0 * x1);
        x35 = (x0 * x2);
        x36 = (x1 * x5);
        x37 = (x1 * x3);
        x38 = (x0 * x3);
        x39 = (x1 * x7);
        x40 = ((-1.0) * x12);
        x41 = ((-1.0) * x11);
        x42 = (x2 * x6);
        x43 = (x18 * x2);
        x44 = (x2 * x21);
        x45 = ((0.0825) * x35);
        x46 = (x42 * x8);
        x47 = (x15 * x34);
        x48 = (x1 * x43);
        x49 = (x1 * x15 * x4);
        x50 = ((((-1.0) * x48)) + x38);
        x51 = (((x3 * x33)) + x36);
        x52 = ((((-1.0) * x27 * x32)) + x39);
        x53 = ((((-1.0) * x27 * x34)) + x43);
        x54 = (((x18 * x3)) + (((1.0) * x2 * x34)));
        x55 = ((-1.0) * x54);
        x56 = ((((-1.0) * x35)) + (((-1.0) * x18 * x37)));
        x57 = (x49 + x45);
        x58 = (x11 * x51);
        x59 = (x50 * x8);
        x60 = (x56 * x7);
        x61 = (x55 * x8);
        x62 = (((x5 * (((((-1.0) * x43)) + ((x3 * x34)))))) + ((x0 * x33)));
        x63 = (((x33 * x4)) + ((x5 * ((x35 + ((x37 * x4)))))));
        x64 = (x46 + ((x52 * x9)));
        x65 = (((x53 * x7)) + ((x0 * x32)));
        x66 = ((((-1.0) * x42 * x9)) + ((x52 * x8)));
        x67 = (((x32 * x4)) + x60);
        x68 = (x62 * x9);
        x69 = ((((0.707099999934968) * x52 * x8)) + (((-0.707099999934968) * x42 * x9)));
        x70 = (x63 * x9);
        x71 = (x12 * x64);
        x72 = (x11 * x65);
        x73 = (x11 * x67);
        x74 = (x70 + x59);
        x75 = (x71 + x58);
        x76 = (((x9 * (((((-1.0) * x0 * x27)) + x48)))) + ((x63 * x8)));
        x77 = (x61 + x68);
        x78 = (((x54 * x9)) + ((x62 * x8)));
        x79 = (x12 * x74);
        x80 = (((x40 * x64)) + ((x41 * x51)));
        x81 = (x12 * x77);
        x82 = (x73 + x79);
        x83 = (x72 + x81);
        x84 = (((x40 * x77)) + ((x41 * x65)));
        eerot[0] = (((x12 * (((((-1.0) * x0 * x32)) + (((-1.0) * x17 * x53)))))) + ((x11 * x77)));
        IkReal x85 = ((1.0) * x78);
        eerot[1] = ((((-1.0) * x20 * x85)) + (((-1.0) * x25 * x85)) + (((-1.0) * x23 * x83)) + (((-1.0) * x19 * x84)));
        eerot[2] = (((x19 * x78)) + (((-1.0) * x23 * x78)) + ((x20 * x83)) + (((-1.0) * x25 * x84)));
        IkReal x86 = (x0 * x32);
        eetrans[0] = ((((-1.0) * x44)) + ((x0 * x29)) + ((x11 * ((((x26 * x53)) + (((0.088) * x86)))))) + ((x12 * (((((-0.107) * x86)) + (((-1.0) * x22 * x53)))))) + ((x12 * ((((x14 * x55)) + ((x28 * x62)))))) + ((x7 * (((((-1.0) * x24 * x34)) + ((x16 * x2)))))) + (((-0.0825) * x0 * x33)) + x47 + ((x5 * (((((-1.0) * x47)) + x44)))) + ((x11 * ((((x31 * x55)) + ((x30 * x62)))))) + (((0.384) * x86)));
        eerot[3] = (((x12 * (((((-1.0) * x18 * x32)) + (((-1.0) * x17 * x56)))))) + ((x11 * x74)));
        IkReal x87 = ((1.0) * x76);
        eerot[4] = ((((-1.0) * x20 * x87)) + (((-1.0) * x25 * x87)) + (((-1.0) * x23 * x82)) + (((-1.0) * x19 * ((((x40 * x74)) + ((x41 * x67)))))));
        eerot[5] = ((((-1.0) * x25 * (((((-1.0) * x79)) + (((-1.0) * x73)))))) + ((x19 * x76)) + (((-1.0) * x23 * x76)) + ((x20 * x82)));
        IkReal x88 = (x32 * x4);
        eetrans[1] = (((x29 * x4)) + (((-1.0) * x5 * x57)) + ((x16 * x32)) + ((x11 * ((((x26 * x56)) + (((0.088) * x88)))))) + ((x7 * (((((-0.384) * x35)) + (((-1.0) * x16 * x37)))))) + ((x11 * ((((x31 * x50)) + ((x30 * x63)))))) + ((x12 * (((((-0.107) * x88)) + (((-1.0) * x22 * x56)))))) + x57 + (((-1.0) * x21 * x33)) + ((x12 * ((((x14 * x50)) + ((x28 * x63)))))));
        eerot[6] = (((x12 * (((((-1.0) * x36)) + (((-1.0) * x17 * x3 * x6)))))) + ((x11 * x64)));
        IkReal x89 = ((1.0) * x66);
        eerot[7] = ((((-1.0) * x20 * x89)) + (((-1.0) * x23 * x75)) + (((-1.0) * x25 * x89)) + (((-1.0) * x19 * x80)));
        eerot[8] = (((x19 * x66)) + ((x20 * x75)) + (((-1.0) * x23 * x66)) + (((-1.0) * x25 * x80)));
        IkReal x90 = ((1.0) * x6);
        eetrans[2] = ((0.333) + ((x11 * (((((0.088) * x36)) + ((x26 * x3 * x6)))))) + ((x15 * x32)) + (((0.384) * x36)) + ((x12 * (((((-0.107) * x36)) + (((-1.0) * x22 * x3 * x90)))))) + (((-0.0825) * x39)) + ((x24 * x33)) + (((0.316) * x1)) + ((x12 * ((((x14 * x42)) + ((x28 * x52)))))) + (((-1.0) * x15 * x90)) + ((x11 * ((((x30 * x52)) + ((x31 * x42)))))));
    }

    IKFAST_API int GetNumFreeParameters() { return 1; }
    IKFAST_API const int *GetFreeIndices()
    {
        static const int freeindices[] = {6};
        return freeindices;
    }
    IKFAST_API int GetNumJoints() { return 7; }

    IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

    IKFAST_API int GetIkType() { return 0x67000001; }

    class IKSolver
    {
    public:
        IkReal j0, cj0, sj0, htj0, j0mul, j1, cj1, sj1, htj1, j1mul, j2, cj2, sj2, htj2, j2mul, j3, cj3, sj3, htj3, j3mul, j4, cj4, sj4, htj4, j4mul, j5, cj5, sj5, htj5, j5mul, j6, cj6, sj6, htj6, new_r00, r00, rxp0_0, new_r01, r01, rxp0_1, new_r02, r02, rxp0_2, new_r10, r10, rxp1_0, new_r11, r11, rxp1_1, new_r12, r12, rxp1_2, new_r20, r20, rxp2_0, new_r21, r21, rxp2_1, new_r22, r22, rxp2_2, new_px, px, npx, new_py, py, npy, new_pz, pz, npz, pp;
        unsigned char _ij0[2], _nj0, _ij1[2], _nj1, _ij2[2], _nj2, _ij3[2], _nj3, _ij4[2], _nj4, _ij5[2], _nj5, _ij6[2], _nj6;

        IkReal j100, cj100, sj100;
        unsigned char _ij100[2], _nj100;
        bool ComputeIk(const IkReal *eetrans, const IkReal *eerot, const IkReal *pfree, IkSolutionListBase<IkReal> &solutions)
        {
            j0 = numeric_limits<IkReal>::quiet_NaN();
            _ij0[0] = -1;
            _ij0[1] = -1;
            _nj0 = -1;
            j1 = numeric_limits<IkReal>::quiet_NaN();
            _ij1[0] = -1;
            _ij1[1] = -1;
            _nj1 = -1;
            j2 = numeric_limits<IkReal>::quiet_NaN();
            _ij2[0] = -1;
            _ij2[1] = -1;
            _nj2 = -1;
            j3 = numeric_limits<IkReal>::quiet_NaN();
            _ij3[0] = -1;
            _ij3[1] = -1;
            _nj3 = -1;
            j4 = numeric_limits<IkReal>::quiet_NaN();
            _ij4[0] = -1;
            _ij4[1] = -1;
            _nj4 = -1;
            j5 = numeric_limits<IkReal>::quiet_NaN();
            _ij5[0] = -1;
            _ij5[1] = -1;
            _nj5 = -1;
            _ij6[0] = -1;
            _ij6[1] = -1;
            _nj6 = 0;
            for (int dummyiter = 0; dummyiter < 1; ++dummyiter)
            {
                solutions.Clear();
                j6 = pfree[0];
                cj6 = cos(pfree[0]);
                sj6 = sin(pfree[0]), htj6 = tan(pfree[0] * 0.5);
                r00 = eerot[0 * 3 + 0];
                r01 = eerot[0 * 3 + 1];
                r02 = eerot[0 * 3 + 2];
                r10 = eerot[1 * 3 + 0];
                r11 = eerot[1 * 3 + 1];
                r12 = eerot[1 * 3 + 2];
                r20 = eerot[2 * 3 + 0];
                r21 = eerot[2 * 3 + 1];
                r22 = eerot[2 * 3 + 2];
                px = eetrans[0];
                py = eetrans[1];
                pz = eetrans[2];

                new_r00 = ((((0.707113562373095) * r02)) + (((-0.707099999934968) * r01)));
                new_r01 = ((((-0.707113562373095) * r01)) + (((-0.707099999934968) * r02)));
                new_r02 = r00;
                new_px = (px + (((-0.107) * r00)));
                new_r10 = ((((0.707113562373095) * r12)) + (((-0.707099999934968) * r11)));
                new_r11 = ((((-0.707113562373095) * r11)) + (((-0.707099999934968) * r12)));
                new_r12 = r10;
                new_py = ((((-0.107) * r10)) + py);
                new_r20 = ((((0.707113562373095) * r22)) + (((-0.707099999934968) * r21)));
                new_r21 = ((((-0.707113562373095) * r21)) + (((-0.707099999934968) * r22)));
                new_r22 = r20;
                new_pz = ((-0.333) + pz + (((-0.107) * r20)));
                r00 = new_r00;
                r01 = new_r01;
                r02 = new_r02;
                r10 = new_r10;
                r11 = new_r11;
                r12 = new_r12;
                r20 = new_r20;
                r21 = new_r21;
                r22 = new_r22;
                px = new_px;
                py = new_py;
                pz = new_pz;
                IkReal x91 = ((1.0) * px);
                IkReal x92 = ((1.0) * pz);
                IkReal x93 = ((1.0) * py);
                pp = ((px * px) + (py * py) + (pz * pz));
                npx = (((px * r00)) + ((py * r10)) + ((pz * r20)));
                npy = (((px * r01)) + ((py * r11)) + ((pz * r21)));
                npz = (((px * r02)) + ((py * r12)) + ((pz * r22)));
                rxp0_0 = ((((-1.0) * r20 * x93)) + ((pz * r10)));
                rxp0_1 = (((px * r20)) + (((-1.0) * r00 * x92)));
                rxp0_2 = ((((-1.0) * r10 * x91)) + ((py * r00)));
                rxp1_0 = ((((-1.0) * r21 * x93)) + ((pz * r11)));
                rxp1_1 = (((px * r21)) + (((-1.0) * r01 * x92)));
                rxp1_2 = ((((-1.0) * r11 * x91)) + ((py * r01)));
                rxp2_0 = ((((-1.0) * r22 * x93)) + ((pz * r12)));
                rxp2_1 = (((px * r22)) + (((-1.0) * r02 * x92)));
                rxp2_2 = ((((-1.0) * r12 * x91)) + ((py * r02)));
                {
                    IkReal j3array[2], cj3array[2], sj3array[2];
                    bool j3valid[2] = {false};
                    _nj3 = 2;
                    if ((((0.986881610513004) + (((-3.89793688895078) * pp)) + (((0.686036892455338) * cj6 * npx)) + (((-0.686036892455338) * npy * sj6)))) < -1 - IKFAST_SINCOS_THRESH || (((0.986881610513004) + (((-3.89793688895078) * pp)) + (((0.686036892455338) * cj6 * npx)) + (((-0.686036892455338) * npy * sj6)))) > 1 + IKFAST_SINCOS_THRESH)
                        continue;
                    IkReal x94 = IKasin(((0.986881610513004) + (((-3.89793688895078) * pp)) + (((0.686036892455338) * cj6 * npx)) + (((-0.686036892455338) * npy * sj6))));
                    j3array[0] = ((1.10379390314189) + (((1.0) * x94)));
                    sj3array[0] = IKsin(j3array[0]);
                    cj3array[0] = IKcos(j3array[0]);
                    j3array[1] = ((4.24538655673168) + (((-1.0) * x94)));
                    sj3array[1] = IKsin(j3array[1]);
                    cj3array[1] = IKcos(j3array[1]);
                    if (j3array[0] > IKPI)
                    {
                        j3array[0] -= IK2PI;
                    }
                    else if (j3array[0] < -IKPI)
                    {
                        j3array[0] += IK2PI;
                    }
                    j3valid[0] = true;
                    if (j3array[1] > IKPI)
                    {
                        j3array[1] -= IK2PI;
                    }
                    else if (j3array[1] < -IKPI)
                    {
                        j3array[1] += IK2PI;
                    }
                    j3valid[1] = true;
                    for (int ij3 = 0; ij3 < 2; ++ij3)
                    {
                        if (!j3valid[ij3])
                        {
                            continue;
                        }
                        _ij3[0] = ij3;
                        _ij3[1] = -1;
                        for (int iij3 = ij3 + 1; iij3 < 2; ++iij3)
                        {
                            if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                            {
                                j3valid[iij3] = false;
                                _ij3[1] = iij3;
                                break;
                            }
                        }
                        j3 = j3array[ij3];
                        cj3 = cj3array[ij3];
                        sj3 = sj3array[ij3];

                        {
                            IkReal j5eval[2];
                            IkReal x95 = (cj6 * npx);
                            IkReal x96 = (npy * sj6);
                            j5eval[0] = ((1.0) + (((22.7272727272727) * x96)) + (((-258.264462809917) * x95 * x96)) + (((129.132231404959) * (x96 * x96))) + (((129.132231404959) * (npz * npz))) + (((129.132231404959) * (x95 * x95))) + (((-22.7272727272727) * x95)));
                            j5eval[1] = ((IKabs(((0.088) + x96 + (((-1.0) * x95))))) + (IKabs(npz)));
                            if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                            {
                                {
                                    IkReal j4eval[1];
                                    j4eval[0] = ((-1.0) + cj3 + (((3.83030303030303) * sj3)));
                                    if (IKabs(j4eval[0]) < 0.0000010000000000)
                                    {
                                        {
                                            IkReal evalcond[1];
                                            bool bgotonextstatement = true;
                                            do
                                            {
                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-2.63084142381503) + j3)))), 6.28318530717959)));
                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                {
                                                    bgotonextstatement = false;
                                                    {
                                                        IkReal j4array[2], cj4array[2], sj4array[2];
                                                        bool j4valid[2] = {false};
                                                        _nj4 = 2;
                                                        sj4array[0] = ((((-2597402597.4026) * npx * sj6)) + (((-2597402597.4026) * cj6 * npy)));
                                                        if (sj4array[0] >= -1 - IKFAST_SINCOS_THRESH && sj4array[0] <= 1 + IKFAST_SINCOS_THRESH)
                                                        {
                                                            j4valid[0] = j4valid[1] = true;
                                                            j4array[0] = IKasin(sj4array[0]);
                                                            cj4array[0] = IKcos(j4array[0]);
                                                            sj4array[1] = sj4array[0];
                                                            j4array[1] = j4array[0] > 0 ? (IKPI - j4array[0]) : (-IKPI - j4array[0]);
                                                            cj4array[1] = -cj4array[0];
                                                        }
                                                        else if (isnan(sj4array[0]))
                                                        {
                                                            // probably any value will work
                                                            j4valid[0] = true;
                                                            cj4array[0] = 1;
                                                            sj4array[0] = 0;
                                                            j4array[0] = 0;
                                                        }
                                                        for (int ij4 = 0; ij4 < 2; ++ij4)
                                                        {
                                                            if (!j4valid[ij4])
                                                            {
                                                                continue;
                                                            }
                                                            _ij4[0] = ij4;
                                                            _ij4[1] = -1;
                                                            for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                            {
                                                                if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                                {
                                                                    j4valid[iij4] = false;
                                                                    _ij4[1] = iij4;
                                                                    break;
                                                                }
                                                            }
                                                            j4 = j4array[ij4];
                                                            cj4 = cj4array[ij4];
                                                            sj4 = sj4array[ij4];

                                                            {
                                                                IkReal j5eval[3];
                                                                sj3 = 0.48883274;
                                                                cj3 = -0.87237753;
                                                                j3 = 2.63084416569479;
                                                                IkReal x97 = npz * npz;
                                                                IkReal x98 = pp * pp;
                                                                j5eval[0] = ((-1.0) + (((161.707637091607) * pp)) + (((-202.500643017207) * x97)) + (((-6537.33997343774) * x98)));
                                                                j5eval[1] = IKsign(((-987651184.806386) + (((-6456611570247.93) * x98)) + (((-200000000000.0) * x97)) + (((159710739365.767) * pp))));
                                                                j5eval[2] = ((IKabs(((955709056.915841) + (((-77272726670.4545) * pp)) + (((77.0) * cj4 * npz))))) + (IKabs(((((437.5) * cj4 * pp)) + (((13599999894.0) * npz)) + (((-5.41099984971219) * cj4))))));
                                                                if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 || IKabs(j5eval[2]) < 0.0000010000000000)
                                                                {
                                                                    {
                                                                        IkReal j5eval[3];
                                                                        sj3 = 0.48883274;
                                                                        cj3 = -0.87237753;
                                                                        j3 = 2.63084416569479;
                                                                        IkReal x99 = npz * npz;
                                                                        IkReal x100 = (npx * sj6);
                                                                        IkReal x101 = (cj6 * npy);
                                                                        IkReal x102 = (pp * sj4);
                                                                        IkReal x103 = ((7027272532.09375) * cj4);
                                                                        IkReal x104 = ((568181818181.818) * cj4 * pp);
                                                                        IkReal x105 = (cj6 * npx * sj4);
                                                                        IkReal x106 = (npy * sj4 * sj6);
                                                                        IkReal x107 = (sj4 * x99);
                                                                        IkReal x108 = ((100000000000.0) * cj4 * npz);
                                                                        IkReal x109 = (npy * sj6 * x102);
                                                                        j5eval[0] = ((((-11.3636363636364) * x105)) + sj4 + (((-80.8538185458036) * x102)) + (((918.793392565951) * cj6 * npx * x102)) + (((-918.793392565951) * x109)) + (((161.707637091607) * x107)) + (((11.3636363636364) * x106)));
                                                                        j5eval[1] = IKsign(((((-568181818181.818) * x109)) + (((7027272532.09375) * x106)) + (((618399982.82425) * sj4)) + (((-7027272532.09375) * x105)) + (((-50000000000.0) * x102)) + (((100000000000.0) * x107)) + (((568181818181.818) * cj6 * npx * x102))));
                                                                        j5eval[2] = ((IKabs(((((-1.0) * x101 * x103)) + (((-1.0) * x100 * x103)) + (((-6799999947.0) * npz * sj4)) + ((x101 * x104)) + ((x100 * x104))))) + (IKabs(((((-6799999947.0) * x106)) + (((6799999947.0) * x105)) + (((-598399995.336) * sj4)) + ((x101 * x108)) + ((x100 * x108))))));
                                                                        if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 || IKabs(j5eval[2]) < 0.0000010000000000)
                                                                        {
                                                                            {
                                                                                IkReal j5eval[2];
                                                                                sj3 = 0.48883274;
                                                                                cj3 = -0.87237753;
                                                                                j3 = 2.63084416569479;
                                                                                IkReal x110 = npz * npz;
                                                                                IkReal x111 = ((568181818181.818) * pp);
                                                                                IkReal x112 = (cj4 * pp);
                                                                                IkReal x113 = ((918.793392565951) * pp);
                                                                                IkReal x114 = (cj4 * npy * sj6);
                                                                                IkReal x115 = (cj4 * cj6 * npx);
                                                                                IkReal x116 = (cj4 * x110);
                                                                                j5eval[0] = (cj4 + (((-11.3636363636364) * x115)) + (((-80.8538185458036) * x112)) + (((918.793392565951) * cj6 * npx * x112)) + (((161.707637091607) * x116)) + (((11.3636363636364) * x114)) + (((-918.793392565951) * npy * sj6 * x112)));
                                                                                j5eval[1] = IKsign(((((-1.0) * x111 * x114)) + ((x111 * x115)) + (((7027272532.09375) * x114)) + (((618399982.82425) * cj4)) + (((-50000000000.0) * x112)) + (((-7027272532.09375) * x115)) + (((100000000000.0) * x116))));
                                                                                if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                                                {
                                                                                    {
                                                                                        IkReal evalcond[1];
                                                                                        bool bgotonextstatement = true;
                                                                                        do
                                                                                        {
                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j4)))), 6.28318530717959)));
                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                            {
                                                                                                bgotonextstatement = false;
                                                                                                {
                                                                                                    IkReal j5eval[3];
                                                                                                    sj3 = 0.48883274;
                                                                                                    cj3 = -0.87237753;
                                                                                                    j3 = 2.63084416569479;
                                                                                                    sj4 = 1.0;
                                                                                                    cj4 = 0;
                                                                                                    j4 = 1.5707963267949;
                                                                                                    IkReal x117 = npz * npz;
                                                                                                    IkReal x118 = pp * pp;
                                                                                                    j5eval[0] = ((-1.0) + (((161.707637091607) * pp)) + (((-202.500643017207) * x117)) + (((-6537.33997343774) * x118)));
                                                                                                    j5eval[1] = IKsign(((-493825592.403193) + (((-100000000000.0) * x117)) + (((79855369682.8835) * pp)) + (((-3228305785123.97) * x118))));
                                                                                                    j5eval[2] = ((IKabs(npz)) + (((1.47058824675606e-10) * (IKabs(((477854528.457921) + (((-38636363335.2273) * pp))))))));
                                                                                                    if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 || IKabs(j5eval[2]) < 0.0000010000000000)
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal j5eval[3];
                                                                                                            sj3 = 0.48883274;
                                                                                                            cj3 = -0.87237753;
                                                                                                            j3 = 2.63084416569479;
                                                                                                            sj4 = 1.0;
                                                                                                            cj4 = 0;
                                                                                                            j4 = 1.5707963267949;
                                                                                                            IkReal x119 = npz * npz;
                                                                                                            IkReal x120 = (cj6 * npx);
                                                                                                            IkReal x121 = (npy * sj6);
                                                                                                            IkReal x122 = (pp * x121);
                                                                                                            j5eval[0] = ((-1.0) + (((918.793392565951) * x122)) + (((-918.793392565951) * pp * x120)) + (((11.3636363636364) * x120)) + (((-161.707637091607) * x119)) + (((80.8538185458036) * pp)) + (((-11.3636363636364) * x121)));
                                                                                                            j5eval[1] = IKsign(((-618399982.82425) + (((568181818181.818) * x122)) + (((-100000000000.0) * x119)) + (((50000000000.0) * pp)) + (((-7027272532.09375) * x121)) + (((7027272532.09375) * x120)) + (((-568181818181.818) * pp * x120))));
                                                                                                            j5eval[2] = ((IKabs(npz)) + (((1.47058824675606e-10) * (IKabs(((598399995.336) + (((6799999947.0) * x121)) + (((-6799999947.0) * x120))))))));
                                                                                                            if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 || IKabs(j5eval[2]) < 0.0000010000000000)
                                                                                                            {
                                                                                                                continue; // no branches [j5]
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                                    bool j5valid[1] = {false};
                                                                                                                    _nj5 = 1;
                                                                                                                    IkReal x123 = (cj6 * npx);
                                                                                                                    IkReal x124 = (npy * sj6);
                                                                                                                    IkReal x125 = ((568181818181.818) * pp);
                                                                                                                    CheckValue<IkReal> x126 = IKPowWithIntegerCheck(IKsign(((-618399982.82425) + (((-1.0) * x123 * x125)) + (((50000000000.0) * pp)) + (((-7027272532.09375) * x124)) + (((7027272532.09375) * x123)) + ((x124 * x125)) + (((-100000000000.0) * (npz * npz))))), -1);
                                                                                                                    if (!x126.valid)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    CheckValue<IkReal> x127 = IKatan2WithCheck(IkReal(((598399995.336) + (((6799999947.0) * x124)) + (((-6799999947.0) * x123)))), IkReal(((6799999947.0) * npz)), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                    if (!x127.valid)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x126.value))) + (x127.value));
                                                                                                                    sj5array[0] = IKsin(j5array[0]);
                                                                                                                    cj5array[0] = IKcos(j5array[0]);
                                                                                                                    if (j5array[0] > IKPI)
                                                                                                                    {
                                                                                                                        j5array[0] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if (j5array[0] < -IKPI)
                                                                                                                    {
                                                                                                                        j5array[0] += IK2PI;
                                                                                                                    }
                                                                                                                    j5valid[0] = true;
                                                                                                                    for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                                    {
                                                                                                                        if (!j5valid[ij5])
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        _ij5[0] = ij5;
                                                                                                                        _ij5[1] = -1;
                                                                                                                        for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                                        {
                                                                                                                            if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                                            {
                                                                                                                                j5valid[iij5] = false;
                                                                                                                                _ij5[1] = iij5;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        j5 = j5array[ij5];
                                                                                                                        cj5 = cj5array[ij5];
                                                                                                                        sj5 = sj5array[ij5];
                                                                                                                        {
                                                                                                                            IkReal evalcond[3];
                                                                                                                            IkReal x128 = IKsin(j5);
                                                                                                                            IkReal x129 = IKcos(j5);
                                                                                                                            IkReal x130 = ((5.68181818181818) * pp);
                                                                                                                            IkReal x131 = ((1.0) * npz * x128);
                                                                                                                            evalcond[0] = ((0.06799999947) + (((-1.0) * x128 * x130)) + (((0.0702727253209375) * x128)) + ((npz * x129)));
                                                                                                                            evalcond[1] = ((((-1.0) * x131)) + (((-1.0) * x129 * x130)) + (((0.0702727253209375) * x129)));
                                                                                                                            evalcond[2] = ((((-1.0) * x131)) + (((0.088) * x129)) + ((npy * sj6 * x129)) + (((-1.0) * cj6 * npx * x129)));
                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        rotationfunction0(solutions);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                            bool j5valid[1] = {false};
                                                                                                            _nj5 = 1;
                                                                                                            CheckValue<IkReal> x671 = IKatan2WithCheck(IkReal(((477854528.457921) + (((-38636363335.2273) * pp)))), IkReal(((6799999947.0) * npz)), IKFAST_ATAN2_MAGTHRESH);
                                                                                                            if (!x671.valid)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            CheckValue<IkReal> x672 = IKPowWithIntegerCheck(IKsign(((-493825592.403193) + (((79855369682.8835) * pp)) + (((-3228305785123.97) * (pp * pp))) + (((-100000000000.0) * (npz * npz))))), -1);
                                                                                                            if (!x672.valid)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            j5array[0] = ((-1.5707963267949) + (x671.value) + (((1.5707963267949) * (x672.value))));
                                                                                                            sj5array[0] = IKsin(j5array[0]);
                                                                                                            cj5array[0] = IKcos(j5array[0]);
                                                                                                            if (j5array[0] > IKPI)
                                                                                                            {
                                                                                                                j5array[0] -= IK2PI;
                                                                                                            }
                                                                                                            else if (j5array[0] < -IKPI)
                                                                                                            {
                                                                                                                j5array[0] += IK2PI;
                                                                                                            }
                                                                                                            j5valid[0] = true;
                                                                                                            for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                            {
                                                                                                                if (!j5valid[ij5])
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij5[0] = ij5;
                                                                                                                _ij5[1] = -1;
                                                                                                                for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                                {
                                                                                                                    if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                                    {
                                                                                                                        j5valid[iij5] = false;
                                                                                                                        _ij5[1] = iij5;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j5 = j5array[ij5];
                                                                                                                cj5 = cj5array[ij5];
                                                                                                                sj5 = sj5array[ij5];
                                                                                                                {
                                                                                                                    IkReal evalcond[3];
                                                                                                                    IkReal x673 = IKsin(j5);
                                                                                                                    IkReal x674 = IKcos(j5);
                                                                                                                    IkReal x675 = ((5.68181818181818) * pp);
                                                                                                                    IkReal x676 = ((1.0) * npz * x673);
                                                                                                                    evalcond[0] = ((0.06799999947) + (((0.0702727253209375) * x673)) + ((npz * x674)) + (((-1.0) * x673 * x675)));
                                                                                                                    evalcond[1] = ((((0.0702727253209375) * x674)) + (((-1.0) * x674 * x675)) + (((-1.0) * x676)));
                                                                                                                    evalcond[2] = (((npy * sj6 * x674)) + (((0.088) * x674)) + (((-1.0) * cj6 * npx * x674)) + (((-1.0) * x676)));
                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                }

                                                                                                                rotationfunction0(solutions);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } while (0);
                                                                                        if (bgotonextstatement)
                                                                                        {
                                                                                            bool bgotonextstatement = true;
                                                                                            do
                                                                                            {
                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j4)))), 6.28318530717959)));
                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                {
                                                                                                    bgotonextstatement = false;
                                                                                                    {
                                                                                                        IkReal j5eval[3];
                                                                                                        sj3 = 0.48883274;
                                                                                                        cj3 = -0.87237753;
                                                                                                        j3 = 2.63084416569479;
                                                                                                        sj4 = -1.0;
                                                                                                        cj4 = 0;
                                                                                                        j4 = -1.5707963267949;
                                                                                                        IkReal x677 = npz * npz;
                                                                                                        IkReal x678 = pp * pp;
                                                                                                        j5eval[0] = ((-1.0) + (((161.707637091607) * pp)) + (((-6537.33997343774) * x678)) + (((-202.500643017207) * x677)));
                                                                                                        j5eval[1] = IKsign(((-493825592.403193) + (((-100000000000.0) * x677)) + (((-3228305785123.97) * x678)) + (((79855369682.8835) * pp))));
                                                                                                        j5eval[2] = ((IKabs(npz)) + (((1.47058824675606e-10) * (IKabs(((477854528.457921) + (((-38636363335.2273) * pp))))))));
                                                                                                        if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 || IKabs(j5eval[2]) < 0.0000010000000000)
                                                                                                        {
                                                                                                            {
                                                                                                                IkReal j5eval[3];
                                                                                                                sj3 = 0.48883274;
                                                                                                                cj3 = -0.87237753;
                                                                                                                j3 = 2.63084416569479;
                                                                                                                sj4 = -1.0;
                                                                                                                cj4 = 0;
                                                                                                                j4 = -1.5707963267949;
                                                                                                                IkReal x679 = npz * npz;
                                                                                                                IkReal x680 = (cj6 * npx);
                                                                                                                IkReal x681 = (npy * sj6);
                                                                                                                IkReal x682 = (pp * x681);
                                                                                                                j5eval[0] = ((1.0) + (((11.3636363636364) * x681)) + (((-11.3636363636364) * x680)) + (((161.707637091607) * x679)) + (((-80.8538185458036) * pp)) + (((-918.793392565951) * x682)) + (((918.793392565951) * pp * x680)));
                                                                                                                j5eval[1] = IKsign(((618399982.82425) + (((-568181818181.818) * x682)) + (((7027272532.09375) * x681)) + (((-50000000000.0) * pp)) + (((-7027272532.09375) * x680)) + (((568181818181.818) * pp * x680)) + (((100000000000.0) * x679))));
                                                                                                                j5eval[2] = ((((1.47058824675606e-10) * (IKabs(((-598399995.336) + (((-6799999947.0) * x681)) + (((6799999947.0) * x680))))))) + (IKabs(npz)));
                                                                                                                if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 || IKabs(j5eval[2]) < 0.0000010000000000)
                                                                                                                {
                                                                                                                    continue; // no branches [j5]
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    {
                                                                                                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                                        bool j5valid[1] = {false};
                                                                                                                        _nj5 = 1;
                                                                                                                        IkReal x683 = (npy * sj6);
                                                                                                                        IkReal x684 = (cj6 * npx);
                                                                                                                        IkReal x685 = ((568181818181.818) * pp);
                                                                                                                        CheckValue<IkReal> x686 = IKatan2WithCheck(IkReal(((-598399995.336) + (((-6799999947.0) * x683)) + (((6799999947.0) * x684)))), IkReal(((-6799999947.0) * npz)), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                        if (!x686.valid)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        CheckValue<IkReal> x687 = IKPowWithIntegerCheck(IKsign(((618399982.82425) + (((7027272532.09375) * x683)) + (((-50000000000.0) * pp)) + (((100000000000.0) * (npz * npz))) + (((-7027272532.09375) * x684)) + (((-1.0) * x683 * x685)) + ((x684 * x685)))), -1);
                                                                                                                        if (!x687.valid)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        j5array[0] = ((-1.5707963267949) + (x686.value) + (((1.5707963267949) * (x687.value))));
                                                                                                                        sj5array[0] = IKsin(j5array[0]);
                                                                                                                        cj5array[0] = IKcos(j5array[0]);
                                                                                                                        if (j5array[0] > IKPI)
                                                                                                                        {
                                                                                                                            j5array[0] -= IK2PI;
                                                                                                                        }
                                                                                                                        else if (j5array[0] < -IKPI)
                                                                                                                        {
                                                                                                                            j5array[0] += IK2PI;
                                                                                                                        }
                                                                                                                        j5valid[0] = true;
                                                                                                                        for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                                        {
                                                                                                                            if (!j5valid[ij5])
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            _ij5[0] = ij5;
                                                                                                                            _ij5[1] = -1;
                                                                                                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                                            {
                                                                                                                                if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                {
                                                                                                                                    j5valid[iij5] = false;
                                                                                                                                    _ij5[1] = iij5;
                                                                                                                                    break;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            j5 = j5array[ij5];
                                                                                                                            cj5 = cj5array[ij5];
                                                                                                                            sj5 = sj5array[ij5];
                                                                                                                            {
                                                                                                                                IkReal evalcond[3];
                                                                                                                                IkReal x688 = IKsin(j5);
                                                                                                                                IkReal x689 = IKcos(j5);
                                                                                                                                IkReal x690 = ((5.68181818181818) * pp);
                                                                                                                                IkReal x691 = (npz * x688);
                                                                                                                                evalcond[0] = ((0.06799999947) + (((0.0702727253209375) * x688)) + ((npz * x689)) + (((-1.0) * x688 * x690)));
                                                                                                                                evalcond[1] = ((((0.0702727253209375) * x689)) + (((-1.0) * x689 * x690)) + (((-1.0) * x691)));
                                                                                                                                evalcond[2] = ((((-1.0) * npy * sj6 * x689)) + (((-0.088) * x689)) + x691 + ((cj6 * npx * x689)));
                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                            }

                                                                                                                            rotationfunction0(solutions);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            {
                                                                                                                IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                                bool j5valid[1] = {false};
                                                                                                                _nj5 = 1;
                                                                                                                CheckValue<IkReal> x692 = IKatan2WithCheck(IkReal(((477854528.457921) + (((-38636363335.2273) * pp)))), IkReal(((6799999947.0) * npz)), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                if (!x692.valid)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                CheckValue<IkReal> x693 = IKPowWithIntegerCheck(IKsign(((-493825592.403193) + (((79855369682.8835) * pp)) + (((-3228305785123.97) * (pp * pp))) + (((-100000000000.0) * (npz * npz))))), -1);
                                                                                                                if (!x693.valid)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                j5array[0] = ((-1.5707963267949) + (x692.value) + (((1.5707963267949) * (x693.value))));
                                                                                                                sj5array[0] = IKsin(j5array[0]);
                                                                                                                cj5array[0] = IKcos(j5array[0]);
                                                                                                                if (j5array[0] > IKPI)
                                                                                                                {
                                                                                                                    j5array[0] -= IK2PI;
                                                                                                                }
                                                                                                                else if (j5array[0] < -IKPI)
                                                                                                                {
                                                                                                                    j5array[0] += IK2PI;
                                                                                                                }
                                                                                                                j5valid[0] = true;
                                                                                                                for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                                {
                                                                                                                    if (!j5valid[ij5])
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    _ij5[0] = ij5;
                                                                                                                    _ij5[1] = -1;
                                                                                                                    for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                                    {
                                                                                                                        if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                                        {
                                                                                                                            j5valid[iij5] = false;
                                                                                                                            _ij5[1] = iij5;
                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    j5 = j5array[ij5];
                                                                                                                    cj5 = cj5array[ij5];
                                                                                                                    sj5 = sj5array[ij5];
                                                                                                                    {
                                                                                                                        IkReal evalcond[3];
                                                                                                                        IkReal x694 = IKsin(j5);
                                                                                                                        IkReal x695 = IKcos(j5);
                                                                                                                        IkReal x696 = ((5.68181818181818) * pp);
                                                                                                                        IkReal x697 = (npz * x694);
                                                                                                                        evalcond[0] = ((0.06799999947) + ((npz * x695)) + (((-1.0) * x694 * x696)) + (((0.0702727253209375) * x694)));
                                                                                                                        evalcond[1] = ((((-1.0) * x695 * x696)) + (((0.0702727253209375) * x695)) + (((-1.0) * x697)));
                                                                                                                        evalcond[2] = ((((-1.0) * npy * sj6 * x695)) + (((-0.088) * x695)) + x697 + ((cj6 * npx * x695)));
                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }

                                                                                                                    rotationfunction0(solutions);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } while (0);
                                                                                            if (bgotonextstatement)
                                                                                            {
                                                                                                bool bgotonextstatement = true;
                                                                                                do
                                                                                                {
                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j4))), 6.28318530717959)));
                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                    {
                                                                                                        bgotonextstatement = false;
                                                                                                        {
                                                                                                            IkReal j5eval[2];
                                                                                                            sj3 = 0.48883274;
                                                                                                            cj3 = -0.87237753;
                                                                                                            j3 = 2.63084416569479;
                                                                                                            sj4 = 0;
                                                                                                            cj4 = 1.0;
                                                                                                            j4 = 0;
                                                                                                            IkReal x698 = npz * npz;
                                                                                                            IkReal x699 = pp * pp;
                                                                                                            j5eval[0] = ((-1.0) + (((161.707637091607) * pp)) + (((-202.500643017207) * x698)) + (((-6537.33997343774) * x699)));
                                                                                                            j5eval[1] = IKsign(((-987651184.806386) + (((-6456611570247.93) * x699)) + (((-200000000000.0) * x698)) + (((159710739365.767) * pp))));
                                                                                                            if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j5eval[3];
                                                                                                                    sj3 = 0.48883274;
                                                                                                                    cj3 = -0.87237753;
                                                                                                                    j3 = 2.63084416569479;
                                                                                                                    sj4 = 0;
                                                                                                                    cj4 = 1.0;
                                                                                                                    j4 = 0;
                                                                                                                    IkReal x700 = npz * npz;
                                                                                                                    IkReal x701 = (npy * sj6);
                                                                                                                    IkReal x702 = (cj6 * npx);
                                                                                                                    IkReal x703 = ((918.793392565951) * pp);
                                                                                                                    IkReal x704 = ((1136363636363.64) * pp);
                                                                                                                    j5eval[0] = ((-1.0) + (((-11.3636363636364) * x701)) + (((11.3636363636364) * x702)) + ((x701 * x703)) + (((-1.0) * x702 * x703)) + (((-161.707637091607) * x700)) + (((80.8538185458036) * pp)));
                                                                                                                    j5eval[1] = IKsign(((-1236799965.6485) + (((-14054545064.1875) * x701)) + ((x701 * x704)) + (((-1.0) * x702 * x704)) + (((100000000000.0) * pp)) + (((-200000000000.0) * x700)) + (((14054545064.1875) * x702))));
                                                                                                                    j5eval[2] = ((IKabs(((-5.41099984971219) + (((13599999894.0) * npz)) + (((437.5) * pp))))) + (IKabs(((1196799990.672) + (((77.0) * npz)) + (((-13599999894.0) * x702)) + (((13599999894.0) * x701))))));
                                                                                                                    if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 || IKabs(j5eval[2]) < 0.0000010000000000)
                                                                                                                    {
                                                                                                                        continue; // no branches [j5]
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        {
                                                                                                                            IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                                            bool j5valid[1] = {false};
                                                                                                                            _nj5 = 1;
                                                                                                                            IkReal x705 = (npy * sj6);
                                                                                                                            IkReal x706 = ((1136363636363.64) * pp);
                                                                                                                            IkReal x707 = (cj6 * npx);
                                                                                                                            CheckValue<IkReal> x708 = IKPowWithIntegerCheck(IKsign(((-1236799965.6485) + (((-14054545064.1875) * x705)) + (((-1.0) * x706 * x707)) + (((100000000000.0) * pp)) + (((-200000000000.0) * (npz * npz))) + (((14054545064.1875) * x707)) + ((x705 * x706)))), -1);
                                                                                                                            if (!x708.valid)
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            CheckValue<IkReal> x709 = IKatan2WithCheck(IkReal(((1196799990.672) + (((77.0) * npz)) + (((-13599999894.0) * x707)) + (((13599999894.0) * x705)))), IkReal(((-5.41099984971219) + (((13599999894.0) * npz)) + (((437.5) * pp)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                            if (!x709.valid)
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x708.value))) + (x709.value));
                                                                                                                            sj5array[0] = IKsin(j5array[0]);
                                                                                                                            cj5array[0] = IKcos(j5array[0]);
                                                                                                                            if (j5array[0] > IKPI)
                                                                                                                            {
                                                                                                                                j5array[0] -= IK2PI;
                                                                                                                            }
                                                                                                                            else if (j5array[0] < -IKPI)
                                                                                                                            {
                                                                                                                                j5array[0] += IK2PI;
                                                                                                                            }
                                                                                                                            j5valid[0] = true;
                                                                                                                            for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                                            {
                                                                                                                                if (!j5valid[ij5])
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                _ij5[0] = ij5;
                                                                                                                                _ij5[1] = -1;
                                                                                                                                for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                                                {
                                                                                                                                    if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                    {
                                                                                                                                        j5valid[iij5] = false;
                                                                                                                                        _ij5[1] = iij5;
                                                                                                                                        break;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                j5 = j5array[ij5];
                                                                                                                                cj5 = cj5array[ij5];
                                                                                                                                sj5 = sj5array[ij5];
                                                                                                                                {
                                                                                                                                    IkReal evalcond[3];
                                                                                                                                    IkReal x710 = IKsin(j5);
                                                                                                                                    IkReal x711 = IKcos(j5);
                                                                                                                                    IkReal x712 = ((5.68181818181818) * pp);
                                                                                                                                    IkReal x713 = ((1.0) * npz * x710);
                                                                                                                                    evalcond[0] = ((0.06799999947) + (((-1.0) * x710 * x712)) + ((npz * x711)) + (((0.0702727253209375) * x710)));
                                                                                                                                    evalcond[1] = ((-3.85e-10) + (((-1.0) * x711 * x712)) + (((-1.0) * x713)) + (((0.0702727253209375) * x711)));
                                                                                                                                    evalcond[2] = ((-3.85e-10) + ((npy * sj6 * x711)) + (((-1.0) * cj6 * npx * x711)) + (((-1.0) * x713)) + (((0.088) * x711)));
                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                }

                                                                                                                                rotationfunction0(solutions);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                                    bool j5valid[1] = {false};
                                                                                                                    _nj5 = 1;
                                                                                                                    CheckValue<IkReal> x714 = IKatan2WithCheck(IkReal(((955709056.915841) + (((77.0) * npz)) + (((-77272726670.4545) * pp)))), IkReal(((-5.41099984971219) + (((13599999894.0) * npz)) + (((437.5) * pp)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                    if (!x714.valid)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    CheckValue<IkReal> x715 = IKPowWithIntegerCheck(IKsign(((-987651184.806386) + (((-6456611570247.93) * (pp * pp))) + (((-200000000000.0) * (npz * npz))) + (((159710739365.767) * pp)))), -1);
                                                                                                                    if (!x715.valid)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    j5array[0] = ((-1.5707963267949) + (x714.value) + (((1.5707963267949) * (x715.value))));
                                                                                                                    sj5array[0] = IKsin(j5array[0]);
                                                                                                                    cj5array[0] = IKcos(j5array[0]);
                                                                                                                    if (j5array[0] > IKPI)
                                                                                                                    {
                                                                                                                        j5array[0] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if (j5array[0] < -IKPI)
                                                                                                                    {
                                                                                                                        j5array[0] += IK2PI;
                                                                                                                    }
                                                                                                                    j5valid[0] = true;
                                                                                                                    for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                                    {
                                                                                                                        if (!j5valid[ij5])
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        _ij5[0] = ij5;
                                                                                                                        _ij5[1] = -1;
                                                                                                                        for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                                        {
                                                                                                                            if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                                            {
                                                                                                                                j5valid[iij5] = false;
                                                                                                                                _ij5[1] = iij5;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        j5 = j5array[ij5];
                                                                                                                        cj5 = cj5array[ij5];
                                                                                                                        sj5 = sj5array[ij5];
                                                                                                                        {
                                                                                                                            IkReal evalcond[3];
                                                                                                                            IkReal x716 = IKsin(j5);
                                                                                                                            IkReal x717 = IKcos(j5);
                                                                                                                            IkReal x718 = ((5.68181818181818) * pp);
                                                                                                                            IkReal x719 = ((1.0) * npz * x716);
                                                                                                                            evalcond[0] = ((0.06799999947) + ((npz * x717)) + (((-1.0) * x716 * x718)) + (((0.0702727253209375) * x716)));
                                                                                                                            evalcond[1] = ((-3.85e-10) + (((-1.0) * x717 * x718)) + (((-1.0) * x719)) + (((0.0702727253209375) * x717)));
                                                                                                                            evalcond[2] = ((-3.85e-10) + ((npy * sj6 * x717)) + (((-1.0) * cj6 * npx * x717)) + (((-1.0) * x719)) + (((0.088) * x717)));
                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        rotationfunction0(solutions);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } while (0);
                                                                                                if (bgotonextstatement)
                                                                                                {
                                                                                                    bool bgotonextstatement = true;
                                                                                                    do
                                                                                                    {
                                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j4)))), 6.28318530717959)));
                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                        {
                                                                                                            bgotonextstatement = false;
                                                                                                            {
                                                                                                                IkReal j5eval[2];
                                                                                                                sj3 = 0.48883274;
                                                                                                                cj3 = -0.87237753;
                                                                                                                j3 = 2.63084416569479;
                                                                                                                sj4 = 0;
                                                                                                                cj4 = -1.0;
                                                                                                                j4 = 3.14159265358979;
                                                                                                                IkReal x720 = npz * npz;
                                                                                                                IkReal x721 = pp * pp;
                                                                                                                j5eval[0] = ((1.0) + (((6537.33997343774) * x721)) + (((202.500643017207) * x720)) + (((-161.707637091607) * pp)));
                                                                                                                j5eval[1] = IKsign(((987651184.806386) + (((6456611570247.93) * x721)) + (((200000000000.0) * x720)) + (((-159710739365.767) * pp))));
                                                                                                                if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                                                                                {
                                                                                                                    {
                                                                                                                        IkReal j5eval[3];
                                                                                                                        sj3 = 0.48883274;
                                                                                                                        cj3 = -0.87237753;
                                                                                                                        j3 = 2.63084416569479;
                                                                                                                        sj4 = 0;
                                                                                                                        cj4 = -1.0;
                                                                                                                        j4 = 3.14159265358979;
                                                                                                                        IkReal x722 = npz * npz;
                                                                                                                        IkReal x723 = (cj6 * npx);
                                                                                                                        IkReal x724 = (npy * sj6);
                                                                                                                        IkReal x725 = ((918.793392565951) * pp);
                                                                                                                        IkReal x726 = ((1136363636363.64) * pp);
                                                                                                                        j5eval[0] = ((1.0) + (((-1.0) * x724 * x725)) + (((11.3636363636364) * x724)) + (((-11.3636363636364) * x723)) + ((x723 * x725)) + (((161.707637091607) * x722)) + (((-80.8538185458036) * pp)));
                                                                                                                        j5eval[1] = ((IKabs(((-5.41099984971219) + (((-13599999894.0) * npz)) + (((437.5) * pp))))) + (IKabs(((-1196799990.672) + (((-13599999894.0) * x724)) + (((77.0) * npz)) + (((13599999894.0) * x723))))));
                                                                                                                        j5eval[2] = IKsign(((1236799965.6485) + (((-14054545064.1875) * x723)) + (((-1.0) * x724 * x726)) + ((x723 * x726)) + (((200000000000.0) * x722)) + (((-100000000000.0) * pp)) + (((14054545064.1875) * x724))));
                                                                                                                        if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000 || IKabs(j5eval[2]) < 0.0000010000000000)
                                                                                                                        {
                                                                                                                            continue; // no branches [j5]
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            {
                                                                                                                                IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                                                bool j5valid[1] = {false};
                                                                                                                                _nj5 = 1;
                                                                                                                                IkReal x727 = (npy * sj6);
                                                                                                                                IkReal x728 = ((1136363636363.64) * pp);
                                                                                                                                IkReal x729 = (cj6 * npx);
                                                                                                                                CheckValue<IkReal> x730 = IKatan2WithCheck(IkReal(((-1196799990.672) + (((-13599999894.0) * x727)) + (((77.0) * npz)) + (((13599999894.0) * x729)))), IkReal(((-5.41099984971219) + (((-13599999894.0) * npz)) + (((437.5) * pp)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                                if (!x730.valid)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                CheckValue<IkReal> x731 = IKPowWithIntegerCheck(IKsign(((1236799965.6485) + (((200000000000.0) * (npz * npz))) + (((-1.0) * x727 * x728)) + ((x728 * x729)) + (((-14054545064.1875) * x729)) + (((-100000000000.0) * pp)) + (((14054545064.1875) * x727)))), -1);
                                                                                                                                if (!x731.valid)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                j5array[0] = ((-1.5707963267949) + (x730.value) + (((1.5707963267949) * (x731.value))));
                                                                                                                                sj5array[0] = IKsin(j5array[0]);
                                                                                                                                cj5array[0] = IKcos(j5array[0]);
                                                                                                                                if (j5array[0] > IKPI)
                                                                                                                                {
                                                                                                                                    j5array[0] -= IK2PI;
                                                                                                                                }
                                                                                                                                else if (j5array[0] < -IKPI)
                                                                                                                                {
                                                                                                                                    j5array[0] += IK2PI;
                                                                                                                                }
                                                                                                                                j5valid[0] = true;
                                                                                                                                for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                                                {
                                                                                                                                    if (!j5valid[ij5])
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    _ij5[0] = ij5;
                                                                                                                                    _ij5[1] = -1;
                                                                                                                                    for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                                                    {
                                                                                                                                        if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                        {
                                                                                                                                            j5valid[iij5] = false;
                                                                                                                                            _ij5[1] = iij5;
                                                                                                                                            break;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    j5 = j5array[ij5];
                                                                                                                                    cj5 = cj5array[ij5];
                                                                                                                                    sj5 = sj5array[ij5];
                                                                                                                                    {
                                                                                                                                        IkReal evalcond[3];
                                                                                                                                        IkReal x732 = IKsin(j5);
                                                                                                                                        IkReal x733 = IKcos(j5);
                                                                                                                                        IkReal x734 = ((5.68181818181818) * pp);
                                                                                                                                        IkReal x735 = (npz * x732);
                                                                                                                                        evalcond[0] = ((0.06799999947) + ((npz * x733)) + (((-1.0) * x732 * x734)) + (((0.0702727253209375) * x732)));
                                                                                                                                        evalcond[1] = ((3.85e-10) + (((-1.0) * x733 * x734)) + (((-1.0) * x735)) + (((0.0702727253209375) * x733)));
                                                                                                                                        evalcond[2] = ((-3.85e-10) + ((cj6 * npx * x733)) + (((-1.0) * npy * sj6 * x733)) + x735 + (((-0.088) * x733)));
                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                    }

                                                                                                                                    rotationfunction0(solutions);
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    {
                                                                                                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                                        bool j5valid[1] = {false};
                                                                                                                        _nj5 = 1;
                                                                                                                        CheckValue<IkReal> x736 = IKPowWithIntegerCheck(IKsign(((987651184.806386) + (((200000000000.0) * (npz * npz))) + (((6456611570247.93) * (pp * pp))) + (((-159710739365.767) * pp)))), -1);
                                                                                                                        if (!x736.valid)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        CheckValue<IkReal> x737 = IKatan2WithCheck(IkReal(((-955709056.915841) + (((77272726670.4545) * pp)) + (((77.0) * npz)))), IkReal(((-5.41099984971219) + (((-13599999894.0) * npz)) + (((437.5) * pp)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                        if (!x737.valid)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x736.value))) + (x737.value));
                                                                                                                        sj5array[0] = IKsin(j5array[0]);
                                                                                                                        cj5array[0] = IKcos(j5array[0]);
                                                                                                                        if (j5array[0] > IKPI)
                                                                                                                        {
                                                                                                                            j5array[0] -= IK2PI;
                                                                                                                        }
                                                                                                                        else if (j5array[0] < -IKPI)
                                                                                                                        {
                                                                                                                            j5array[0] += IK2PI;
                                                                                                                        }
                                                                                                                        j5valid[0] = true;
                                                                                                                        for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                                        {
                                                                                                                            if (!j5valid[ij5])
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            _ij5[0] = ij5;
                                                                                                                            _ij5[1] = -1;
                                                                                                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                                            {
                                                                                                                                if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                {
                                                                                                                                    j5valid[iij5] = false;
                                                                                                                                    _ij5[1] = iij5;
                                                                                                                                    break;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            j5 = j5array[ij5];
                                                                                                                            cj5 = cj5array[ij5];
                                                                                                                            sj5 = sj5array[ij5];
                                                                                                                            {
                                                                                                                                IkReal evalcond[3];
                                                                                                                                IkReal x738 = IKsin(j5);
                                                                                                                                IkReal x739 = IKcos(j5);
                                                                                                                                IkReal x740 = ((5.68181818181818) * pp);
                                                                                                                                IkReal x741 = (npz * x738);
                                                                                                                                evalcond[0] = ((0.06799999947) + ((npz * x739)) + (((-1.0) * x738 * x740)) + (((0.0702727253209375) * x738)));
                                                                                                                                evalcond[1] = ((3.85e-10) + (((-1.0) * x741)) + (((-1.0) * x739 * x740)) + (((0.0702727253209375) * x739)));
                                                                                                                                evalcond[2] = ((-3.85e-10) + ((cj6 * npx * x739)) + (((-1.0) * npy * sj6 * x739)) + x741 + (((-0.088) * x739)));
                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                            }

                                                                                                                            rotationfunction0(solutions);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    } while (0);
                                                                                                    if (bgotonextstatement)
                                                                                                    {
                                                                                                        bool bgotonextstatement = true;
                                                                                                        do
                                                                                                        {
                                                                                                            if (1)
                                                                                                            {
                                                                                                                bgotonextstatement = false;
                                                                                                                continue; // branch miss [j5]
                                                                                                            }
                                                                                                        } while (0);
                                                                                                        if (bgotonextstatement)
                                                                                                        {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    {
                                                                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                        bool j5valid[1] = {false};
                                                                                        _nj5 = 1;
                                                                                        IkReal x742 = ((568181818181.818) * pp);
                                                                                        IkReal x743 = ((6799999947.0) * cj4);
                                                                                        IkReal x744 = ((100000000000.0) * npz);
                                                                                        IkReal x745 = (cj6 * npy * sj4);
                                                                                        IkReal x746 = (cj4 * cj6 * npx);
                                                                                        IkReal x747 = (npx * sj4 * sj6);
                                                                                        IkReal x748 = (cj4 * npy * sj6);
                                                                                        CheckValue<IkReal> x749 = IKatan2WithCheck(IkReal(((((-1.0) * npy * sj6 * x743)) + ((cj6 * npx * x743)) + (((-1.0) * x744 * x745)) + (((-1.0) * x744 * x747)) + (((-598399995.336) * cj4)) + (((-38.5) * npz)))), IkReal(((2.70549992485609) + (((-1.0) * x742 * x745)) + (((-1.0) * x742 * x747)) + (((-218.75) * pp)) + (((7027272532.09375) * x745)) + (((7027272532.09375) * x747)) + (((-1.0) * npz * x743)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (!x749.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        CheckValue<IkReal> x750 = IKPowWithIntegerCheck(IKsign((((x742 * x746)) + (((-50000000000.0) * cj4 * pp)) + (((-7027272532.09375) * x746)) + (((618399982.82425) * cj4)) + (((-1.0) * x742 * x748)) + ((cj4 * npz * x744)) + (((7027272532.09375) * x748)))), -1);
                                                                                        if (!x750.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        j5array[0] = ((-1.5707963267949) + (x749.value) + (((1.5707963267949) * (x750.value))));
                                                                                        sj5array[0] = IKsin(j5array[0]);
                                                                                        cj5array[0] = IKcos(j5array[0]);
                                                                                        if (j5array[0] > IKPI)
                                                                                        {
                                                                                            j5array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j5array[0] < -IKPI)
                                                                                        {
                                                                                            j5array[0] += IK2PI;
                                                                                        }
                                                                                        j5valid[0] = true;
                                                                                        for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                        {
                                                                                            if (!j5valid[ij5])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij5[0] = ij5;
                                                                                            _ij5[1] = -1;
                                                                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                            {
                                                                                                if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j5valid[iij5] = false;
                                                                                                    _ij5[1] = iij5;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j5 = j5array[ij5];
                                                                                            cj5 = cj5array[ij5];
                                                                                            sj5 = sj5array[ij5];
                                                                                            {
                                                                                                IkReal evalcond[4];
                                                                                                IkReal x751 = IKsin(j5);
                                                                                                IkReal x752 = IKcos(j5);
                                                                                                IkReal x753 = (npy * sj4);
                                                                                                IkReal x754 = ((1.0) * cj6);
                                                                                                IkReal x755 = ((5.68181818181818) * pp);
                                                                                                IkReal x756 = (cj4 * npy);
                                                                                                IkReal x757 = (npx * sj6);
                                                                                                IkReal x758 = (sj6 * x752);
                                                                                                IkReal x759 = (cj4 * x752);
                                                                                                IkReal x760 = (sj4 * x752);
                                                                                                IkReal x761 = ((1.0) * npz * x751);
                                                                                                evalcond[0] = ((0.06799999947) + ((npz * x752)) + (((0.0702727253209375) * x751)) + (((-1.0) * x751 * x755)));
                                                                                                evalcond[1] = ((((-1.0) * x761)) + (((0.0702727253209375) * x752)) + (((-1.0) * x752 * x755)) + (((-3.85e-10) * cj4)));
                                                                                                evalcond[2] = ((((-1.0) * npx * x754 * x760)) + ((cj6 * x756)) + (((0.088) * x760)) + ((x753 * x758)) + (((-1.0) * sj4 * x761)) + ((cj4 * x757)));
                                                                                                evalcond[3] = ((-3.85e-10) + ((x756 * x758)) + (((-1.0) * npx * x754 * x759)) + (((0.088) * x759)) + (((-1.0) * x753 * x754)) + (((-1.0) * sj4 * x757)) + (((-1.0) * cj4 * x761)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            rotationfunction0(solutions);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            {
                                                                                IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                bool j5valid[1] = {false};
                                                                                _nj5 = 1;
                                                                                IkReal x762 = ((6799999947.0) * sj4);
                                                                                IkReal x763 = (cj6 * npx);
                                                                                IkReal x764 = (cj4 * npx);
                                                                                IkReal x765 = (npy * sj4);
                                                                                IkReal x766 = ((7027272532.09375) * sj6);
                                                                                IkReal x767 = ((568181818181.818) * pp);
                                                                                IkReal x768 = ((100000000000.0) * npz);
                                                                                IkReal x769 = (sj6 * x767);
                                                                                IkReal x770 = (cj4 * cj6 * npy);
                                                                                CheckValue<IkReal> x771 = IKPowWithIntegerCheck(IKsign(((((-7027272532.09375) * sj4 * x763)) + ((npz * sj4 * x768)) + (((-50000000000.0) * pp * sj4)) + (((-1.0) * x765 * x769)) + ((sj4 * x763 * x767)) + (((618399982.82425) * sj4)) + ((x765 * x766)))), -1);
                                                                                if (!x771.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                CheckValue<IkReal> x772 = IKatan2WithCheck(IkReal((((sj6 * x764 * x768)) + ((x762 * x763)) + (((-598399995.336) * sj4)) + (((-1.0) * npy * sj6 * x762)) + ((x768 * x770)))), IkReal(((((-7027272532.09375) * x770)) + ((x767 * x770)) + (((-1.0) * x764 * x766)) + (((-1.0) * npz * x762)) + ((x764 * x769)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                if (!x772.valid)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x771.value))) + (x772.value));
                                                                                sj5array[0] = IKsin(j5array[0]);
                                                                                cj5array[0] = IKcos(j5array[0]);
                                                                                if (j5array[0] > IKPI)
                                                                                {
                                                                                    j5array[0] -= IK2PI;
                                                                                }
                                                                                else if (j5array[0] < -IKPI)
                                                                                {
                                                                                    j5array[0] += IK2PI;
                                                                                }
                                                                                j5valid[0] = true;
                                                                                for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                {
                                                                                    if (!j5valid[ij5])
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    _ij5[0] = ij5;
                                                                                    _ij5[1] = -1;
                                                                                    for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                    {
                                                                                        if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                            j5valid[iij5] = false;
                                                                                            _ij5[1] = iij5;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    j5 = j5array[ij5];
                                                                                    cj5 = cj5array[ij5];
                                                                                    sj5 = sj5array[ij5];
                                                                                    {
                                                                                        IkReal evalcond[4];
                                                                                        IkReal x773 = IKsin(j5);
                                                                                        IkReal x774 = IKcos(j5);
                                                                                        IkReal x775 = (npy * sj4);
                                                                                        IkReal x776 = ((1.0) * cj6);
                                                                                        IkReal x777 = ((5.68181818181818) * pp);
                                                                                        IkReal x778 = (cj4 * npy);
                                                                                        IkReal x779 = (npx * sj6);
                                                                                        IkReal x780 = (sj6 * x774);
                                                                                        IkReal x781 = (cj4 * x774);
                                                                                        IkReal x782 = (sj4 * x774);
                                                                                        IkReal x783 = ((1.0) * npz * x773);
                                                                                        evalcond[0] = ((0.06799999947) + (((0.0702727253209375) * x773)) + (((-1.0) * x773 * x777)) + ((npz * x774)));
                                                                                        evalcond[1] = ((((-1.0) * x774 * x777)) + (((-1.0) * x783)) + (((0.0702727253209375) * x774)) + (((-3.85e-10) * cj4)));
                                                                                        evalcond[2] = (((x775 * x780)) + ((cj6 * x778)) + (((-1.0) * npx * x776 * x782)) + (((0.088) * x782)) + (((-1.0) * sj4 * x783)) + ((cj4 * x779)));
                                                                                        evalcond[3] = ((-3.85e-10) + (((-1.0) * sj4 * x779)) + ((x778 * x780)) + (((-1.0) * npx * x776 * x781)) + (((0.088) * x781)) + (((-1.0) * x775 * x776)) + (((-1.0) * cj4 * x783)));
                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                    }

                                                                                    rotationfunction0(solutions);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    {
                                                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                                                        bool j5valid[1] = {false};
                                                                        _nj5 = 1;
                                                                        CheckValue<IkReal> x784 = IKatan2WithCheck(IkReal(((955709056.915841) + (((-77272726670.4545) * pp)) + (((77.0) * cj4 * npz)))), IkReal(((((437.5) * cj4 * pp)) + (((13599999894.0) * npz)) + (((-5.41099984971219) * cj4)))), IKFAST_ATAN2_MAGTHRESH);
                                                                        if (!x784.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        CheckValue<IkReal> x785 = IKPowWithIntegerCheck(IKsign(((-987651184.806386) + (((-6456611570247.93) * (pp * pp))) + (((-200000000000.0) * (npz * npz))) + (((159710739365.767) * pp)))), -1);
                                                                        if (!x785.valid)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        j5array[0] = ((-1.5707963267949) + (x784.value) + (((1.5707963267949) * (x785.value))));
                                                                        sj5array[0] = IKsin(j5array[0]);
                                                                        cj5array[0] = IKcos(j5array[0]);
                                                                        if (j5array[0] > IKPI)
                                                                        {
                                                                            j5array[0] -= IK2PI;
                                                                        }
                                                                        else if (j5array[0] < -IKPI)
                                                                        {
                                                                            j5array[0] += IK2PI;
                                                                        }
                                                                        j5valid[0] = true;
                                                                        for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                        {
                                                                            if (!j5valid[ij5])
                                                                            {
                                                                                continue;
                                                                            }
                                                                            _ij5[0] = ij5;
                                                                            _ij5[1] = -1;
                                                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                            {
                                                                                if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                    j5valid[iij5] = false;
                                                                                    _ij5[1] = iij5;
                                                                                    break;
                                                                                }
                                                                            }
                                                                            j5 = j5array[ij5];
                                                                            cj5 = cj5array[ij5];
                                                                            sj5 = sj5array[ij5];
                                                                            {
                                                                                IkReal evalcond[4];
                                                                                IkReal x786 = IKsin(j5);
                                                                                IkReal x787 = IKcos(j5);
                                                                                IkReal x788 = (npy * sj4);
                                                                                IkReal x789 = ((1.0) * cj6);
                                                                                IkReal x790 = ((5.68181818181818) * pp);
                                                                                IkReal x791 = (cj4 * npy);
                                                                                IkReal x792 = (npx * sj6);
                                                                                IkReal x793 = (sj6 * x787);
                                                                                IkReal x794 = (cj4 * x787);
                                                                                IkReal x795 = (sj4 * x787);
                                                                                IkReal x796 = ((1.0) * npz * x786);
                                                                                evalcond[0] = ((0.06799999947) + (((0.0702727253209375) * x786)) + (((-1.0) * x786 * x790)) + ((npz * x787)));
                                                                                evalcond[1] = ((((-1.0) * x796)) + (((0.0702727253209375) * x787)) + (((-1.0) * x787 * x790)) + (((-3.85e-10) * cj4)));
                                                                                evalcond[2] = (((cj6 * x791)) + (((-1.0) * npx * x789 * x795)) + ((x788 * x793)) + ((cj4 * x792)) + (((0.088) * x795)) + (((-1.0) * sj4 * x796)));
                                                                                evalcond[3] = ((-3.85e-10) + (((-1.0) * x788 * x789)) + (((-1.0) * npx * x789 * x794)) + (((0.088) * x794)) + (((-1.0) * cj4 * x796)) + (((-1.0) * sj4 * x792)) + ((x791 * x793)));
                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                            }

                                                                            rotationfunction0(solutions);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } while (0);
                                            if (bgotonextstatement)
                                            {
                                                bool bgotonextstatement = true;
                                                do
                                                {
                                                    if (1)
                                                    {
                                                        bgotonextstatement = false;
                                                        continue; // branch miss [j4, j5]
                                                    }
                                                } while (0);
                                                if (bgotonextstatement)
                                                {
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        {
                                            IkReal j4array[2], cj4array[2], sj4array[2];
                                            bool j4valid[2] = {false};
                                            _nj4 = 2;
                                            CheckValue<IkReal> x797 = IKPowWithIntegerCheck(((-0.0825) + (((0.0825) * cj3)) + (((0.316) * sj3))), -1);
                                            if (!x797.valid)
                                            {
                                                continue;
                                            }
                                            sj4array[0] = ((-1.0) * (x797.value) * (((((-1.0) * cj6 * npy)) + (((-1.0) * npx * sj6)))));
                                            if (sj4array[0] >= -1 - IKFAST_SINCOS_THRESH && sj4array[0] <= 1 + IKFAST_SINCOS_THRESH)
                                            {
                                                j4valid[0] = j4valid[1] = true;
                                                j4array[0] = IKasin(sj4array[0]);
                                                cj4array[0] = IKcos(j4array[0]);
                                                sj4array[1] = sj4array[0];
                                                j4array[1] = j4array[0] > 0 ? (IKPI - j4array[0]) : (-IKPI - j4array[0]);
                                                cj4array[1] = -cj4array[0];
                                            }
                                            else if (isnan(sj4array[0]))
                                            {
                                                // probably any value will work
                                                j4valid[0] = true;
                                                cj4array[0] = 1;
                                                sj4array[0] = 0;
                                                j4array[0] = 0;
                                            }
                                            for (int ij4 = 0; ij4 < 2; ++ij4)
                                            {
                                                if (!j4valid[ij4])
                                                {
                                                    continue;
                                                }
                                                _ij4[0] = ij4;
                                                _ij4[1] = -1;
                                                for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                {
                                                    if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                    {
                                                        j4valid[iij4] = false;
                                                        _ij4[1] = iij4;
                                                        break;
                                                    }
                                                }
                                                j4 = j4array[ij4];
                                                cj4 = cj4array[ij4];
                                                sj4 = sj4array[ij4];

                                                {
                                                    IkReal j5eval[2];
                                                    IkReal x798 = cj6 * cj6;
                                                    IkReal x799 = npy * npy;
                                                    IkReal x800 = npx * npx;
                                                    IkReal x801 = npz * npz;
                                                    IkReal x802 = (npy * sj6);
                                                    IkReal x803 = (cj6 * npx);
                                                    IkReal x804 = ((129.132231404959) * x799);
                                                    IkReal x805 = (x798 * x800);
                                                    j5eval[0] = ((1.0) + (((22.7272727272727) * x802)) + (((-258.264462809917) * x802 * x803)) + (((-22.7272727272727) * x803)) + (((-1.0) * x798 * x804)) + (((129.132231404959) * x805)) + (((129.132231404959) * x801)) + x804);
                                                    j5eval[1] = IKsign(((0.007744) + (((0.176) * x802)) + (((-2.0) * x802 * x803)) + (((-1.0) * x798 * x799)) + x799 + x805 + x801 + (((-0.176) * x803))));
                                                    if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                    {
                                                        {
                                                            IkReal j5eval[2];
                                                            IkReal x806 = cj6 * cj6;
                                                            IkReal x807 = npy * npy;
                                                            IkReal x808 = npz * npz;
                                                            IkReal x809 = npx * npx;
                                                            IkReal x810 = ((129.132231404959) * sj4);
                                                            IkReal x811 = (npy * sj6);
                                                            IkReal x812 = (sj4 * x806);
                                                            IkReal x813 = (cj6 * npx * sj4);
                                                            j5eval[0] = ((((22.7272727272727) * sj4 * x811)) + sj4 + (((-258.264462809917) * x811 * x813)) + ((x806 * x809 * x810)) + ((x808 * x810)) + ((x807 * x810)) + (((-1.0) * x806 * x807 * x810)) + (((-22.7272727272727) * x813)));
                                                            j5eval[1] = IKsign((((x809 * x812)) + (((-1.0) * x807 * x812)) + (((0.007744) * sj4)) + (((-0.176) * x813)) + (((0.176) * sj4 * x811)) + ((sj4 * x808)) + ((sj4 * x807)) + (((-2.0) * x811 * x813))));
                                                            if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                            {
                                                                {
                                                                    IkReal j5eval[2];
                                                                    IkReal x814 = cj6 * cj6;
                                                                    IkReal x815 = npy * npy;
                                                                    IkReal x816 = npz * npz;
                                                                    IkReal x817 = npx * npx;
                                                                    IkReal x818 = (cj6 * npx);
                                                                    IkReal x819 = (cj4 * x815);
                                                                    IkReal x820 = ((129.132231404959) * x814);
                                                                    IkReal x821 = (cj4 * x816);
                                                                    IkReal x822 = (cj4 * x817);
                                                                    IkReal x823 = (cj4 * npy * sj6);
                                                                    j5eval[0] = (((x820 * x822)) + (((129.132231404959) * x819)) + cj4 + (((-22.7272727272727) * cj4 * x818)) + (((129.132231404959) * x821)) + (((-1.0) * x819 * x820)) + (((-258.264462809917) * x818 * x823)) + (((22.7272727272727) * x823)));
                                                                    j5eval[1] = IKsign(((((-0.176) * cj4 * x818)) + ((x814 * x822)) + (((-2.0) * x818 * x823)) + (((0.176) * x823)) + x819 + x821 + (((0.007744) * cj4)) + (((-1.0) * x814 * x819))));
                                                                    if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                                    {
                                                                        {
                                                                            IkReal evalcond[1];
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j4)))), 6.28318530717959)));
                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                {
                                                                                    bgotonextstatement = false;
                                                                                    {
                                                                                        IkReal j5eval[2];
                                                                                        sj4 = 1.0;
                                                                                        cj4 = 0;
                                                                                        j4 = 1.5707963267949;
                                                                                        IkReal x824 = cj6 * cj6;
                                                                                        IkReal x825 = npy * npy;
                                                                                        IkReal x826 = npz * npz;
                                                                                        IkReal x827 = npx * npx;
                                                                                        IkReal x828 = (npy * sj6);
                                                                                        IkReal x829 = (cj6 * npx);
                                                                                        IkReal x830 = ((129.132231404959) * x825);
                                                                                        IkReal x831 = (x824 * x827);
                                                                                        j5eval[0] = ((-1.0) + (((258.264462809917) * x828 * x829)) + ((x824 * x830)) + (((-129.132231404959) * x826)) + (((-129.132231404959) * x831)) + (((-1.0) * x830)) + (((22.7272727272727) * x829)) + (((-22.7272727272727) * x828)));
                                                                                        j5eval[1] = IKsign(((-0.007744) + ((x824 * x825)) + (((-0.176) * x828)) + (((-1.0) * x825)) + (((-1.0) * x826)) + (((2.0) * x828 * x829)) + (((-1.0) * x831)) + (((0.176) * x829))));
                                                                                        if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                                                        {
                                                                                            continue; // no branches [j5]
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            {
                                                                                                IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                bool j5valid[1] = {false};
                                                                                                _nj5 = 1;
                                                                                                IkReal x832 = cj6 * cj6;
                                                                                                IkReal x833 = npy * npy;
                                                                                                IkReal x834 = (npy * sj6);
                                                                                                IkReal x835 = (cj6 * npx);
                                                                                                IkReal x836 = ((0.316) * cj3);
                                                                                                IkReal x837 = ((0.0825) * sj3);
                                                                                                CheckValue<IkReal> x838 = IKatan2WithCheck(IkReal(((0.033792) + (((0.027808) * cj3)) + (((-1.0) * x835 * x836)) + ((x835 * x837)) + (((0.384) * x834)) + (((-0.384) * x835)) + (((-1.0) * x834 * x837)) + ((x834 * x836)) + (((-0.00726) * sj3)))), IkReal(((((-1.0) * npz * x837)) + ((npz * x836)) + (((0.384) * npz)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                                if (!x838.valid)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                CheckValue<IkReal> x839 = IKPowWithIntegerCheck(IKsign(((-0.007744) + (((-1.0) * x832 * (npx * npx))) + (((2.0) * x834 * x835)) + ((x832 * x833)) + (((-1.0) * (npz * npz))) + (((0.176) * x835)) + (((-1.0) * x833)) + (((-0.176) * x834)))), -1);
                                                                                                if (!x839.valid)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                j5array[0] = ((-1.5707963267949) + (x838.value) + (((1.5707963267949) * (x839.value))));
                                                                                                sj5array[0] = IKsin(j5array[0]);
                                                                                                cj5array[0] = IKcos(j5array[0]);
                                                                                                if (j5array[0] > IKPI)
                                                                                                {
                                                                                                    j5array[0] -= IK2PI;
                                                                                                }
                                                                                                else if (j5array[0] < -IKPI)
                                                                                                {
                                                                                                    j5array[0] += IK2PI;
                                                                                                }
                                                                                                j5valid[0] = true;
                                                                                                for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                {
                                                                                                    if (!j5valid[ij5])
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij5[0] = ij5;
                                                                                                    _ij5[1] = -1;
                                                                                                    for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                    {
                                                                                                        if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                        {
                                                                                                            j5valid[iij5] = false;
                                                                                                            _ij5[1] = iij5;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j5 = j5array[ij5];
                                                                                                    cj5 = cj5array[ij5];
                                                                                                    sj5 = sj5array[ij5];
                                                                                                    {
                                                                                                        IkReal evalcond[2];
                                                                                                        IkReal x840 = IKcos(j5);
                                                                                                        IkReal x841 = IKsin(j5);
                                                                                                        IkReal x842 = (npy * sj6);
                                                                                                        IkReal x843 = (cj6 * npx);
                                                                                                        IkReal x844 = ((1.0) * x841);
                                                                                                        evalcond[0] = (((x840 * x842)) + (((0.088) * x840)) + (((-1.0) * npz * x844)) + (((-1.0) * x840 * x843)));
                                                                                                        evalcond[1] = ((0.384) + (((-0.0825) * sj3)) + (((0.088) * x841)) + (((0.316) * cj3)) + (((-1.0) * x843 * x844)) + ((npz * x840)) + ((x841 * x842)));
                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    rotationfunction0(solutions);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } while (0);
                                                                            if (bgotonextstatement)
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j4)))), 6.28318530717959)));
                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                    {
                                                                                        bgotonextstatement = false;
                                                                                        {
                                                                                            IkReal j5eval[2];
                                                                                            sj4 = -1.0;
                                                                                            cj4 = 0;
                                                                                            j4 = -1.5707963267949;
                                                                                            IkReal x845 = cj6 * cj6;
                                                                                            IkReal x846 = npy * npy;
                                                                                            IkReal x847 = npz * npz;
                                                                                            IkReal x848 = npx * npx;
                                                                                            IkReal x849 = (npy * sj6);
                                                                                            IkReal x850 = (cj6 * npx);
                                                                                            IkReal x851 = ((129.132231404959) * x846);
                                                                                            IkReal x852 = (x845 * x848);
                                                                                            j5eval[0] = ((-1.0) + (((-1.0) * x851)) + (((-129.132231404959) * x847)) + ((x845 * x851)) + (((-129.132231404959) * x852)) + (((258.264462809917) * x849 * x850)) + (((-22.7272727272727) * x849)) + (((22.7272727272727) * x850)));
                                                                                            j5eval[1] = IKsign(((-0.007744) + (((-0.176) * x849)) + (((-1.0) * x852)) + (((2.0) * x849 * x850)) + ((x845 * x846)) + (((-1.0) * x846)) + (((-1.0) * x847)) + (((0.176) * x850))));
                                                                                            if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                                                            {
                                                                                                continue; // no branches [j5]
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                {
                                                                                                    IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                    bool j5valid[1] = {false};
                                                                                                    _nj5 = 1;
                                                                                                    IkReal x853 = cj6 * cj6;
                                                                                                    IkReal x854 = npy * npy;
                                                                                                    IkReal x855 = (npy * sj6);
                                                                                                    IkReal x856 = (cj6 * npx);
                                                                                                    IkReal x857 = ((0.316) * cj3);
                                                                                                    IkReal x858 = ((0.0825) * sj3);
                                                                                                    CheckValue<IkReal> x859 = IKatan2WithCheck(IkReal(((0.033792) + (((0.384) * x855)) + (((0.027808) * cj3)) + ((x855 * x857)) + ((x856 * x858)) + (((-0.00726) * sj3)) + (((-1.0) * x856 * x857)) + (((-1.0) * x855 * x858)) + (((-0.384) * x856)))), IkReal(((((-1.0) * npz * x858)) + (((0.384) * npz)) + ((npz * x857)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                                    if (!x859.valid)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    CheckValue<IkReal> x860 = IKPowWithIntegerCheck(IKsign(((-0.007744) + (((-1.0) * x854)) + (((2.0) * x855 * x856)) + (((-1.0) * (npz * npz))) + (((-1.0) * x853 * (npx * npx))) + (((-0.176) * x855)) + (((0.176) * x856)) + ((x853 * x854)))), -1);
                                                                                                    if (!x860.valid)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    j5array[0] = ((-1.5707963267949) + (x859.value) + (((1.5707963267949) * (x860.value))));
                                                                                                    sj5array[0] = IKsin(j5array[0]);
                                                                                                    cj5array[0] = IKcos(j5array[0]);
                                                                                                    if (j5array[0] > IKPI)
                                                                                                    {
                                                                                                        j5array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j5array[0] < -IKPI)
                                                                                                    {
                                                                                                        j5array[0] += IK2PI;
                                                                                                    }
                                                                                                    j5valid[0] = true;
                                                                                                    for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                    {
                                                                                                        if (!j5valid[ij5])
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij5[0] = ij5;
                                                                                                        _ij5[1] = -1;
                                                                                                        for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                        {
                                                                                                            if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                            {
                                                                                                                j5valid[iij5] = false;
                                                                                                                _ij5[1] = iij5;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j5 = j5array[ij5];
                                                                                                        cj5 = cj5array[ij5];
                                                                                                        sj5 = sj5array[ij5];
                                                                                                        {
                                                                                                            IkReal evalcond[2];
                                                                                                            IkReal x861 = IKcos(j5);
                                                                                                            IkReal x862 = IKsin(j5);
                                                                                                            IkReal x863 = (npy * sj6);
                                                                                                            IkReal x864 = (cj6 * npx);
                                                                                                            IkReal x865 = ((1.0) * x862);
                                                                                                            evalcond[0] = ((((-1.0) * npz * x865)) + (((-1.0) * x861 * x864)) + ((x861 * x863)) + (((0.088) * x861)));
                                                                                                            evalcond[1] = ((0.384) + (((-0.0825) * sj3)) + (((0.316) * cj3)) + (((-1.0) * x864 * x865)) + ((x862 * x863)) + ((npz * x861)) + (((0.088) * x862)));
                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        rotationfunction0(solutions);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } while (0);
                                                                                if (bgotonextstatement)
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j4))), 6.28318530717959)));
                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                        {
                                                                                            bgotonextstatement = false;
                                                                                            {
                                                                                                IkReal j5eval[2];
                                                                                                sj4 = 0;
                                                                                                cj4 = 1.0;
                                                                                                j4 = 0;
                                                                                                IkReal x866 = cj6 * cj6;
                                                                                                IkReal x867 = npy * npy;
                                                                                                IkReal x868 = npx * npx;
                                                                                                IkReal x869 = npz * npz;
                                                                                                IkReal x870 = (npy * sj6);
                                                                                                IkReal x871 = (cj6 * npx);
                                                                                                IkReal x872 = ((129.132231404959) * x867);
                                                                                                IkReal x873 = (x866 * x868);
                                                                                                j5eval[0] = ((1.0) + (((22.7272727272727) * x870)) + (((-1.0) * x866 * x872)) + (((129.132231404959) * x869)) + (((129.132231404959) * x873)) + (((-22.7272727272727) * x871)) + x872 + (((-258.264462809917) * x870 * x871)));
                                                                                                j5eval[1] = IKsign(((0.007744) + (((-2.0) * x870 * x871)) + (((-0.176) * x871)) + x869 + x867 + x873 + (((-1.0) * x866 * x867)) + (((0.176) * x870))));
                                                                                                if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                                                                {
                                                                                                    continue; // no branches [j5]
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    {
                                                                                                        IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                        bool j5valid[1] = {false};
                                                                                                        _nj5 = 1;
                                                                                                        IkReal x874 = cj6 * cj6;
                                                                                                        IkReal x875 = npy * npy;
                                                                                                        IkReal x876 = (cj6 * npx);
                                                                                                        IkReal x877 = ((0.316) * cj3);
                                                                                                        IkReal x878 = (npy * sj6);
                                                                                                        IkReal x879 = ((0.0825) * npz);
                                                                                                        IkReal x880 = ((0.316) * sj3);
                                                                                                        IkReal x881 = ((0.0825) * sj3);
                                                                                                        IkReal x882 = ((0.0825) * cj3);
                                                                                                        CheckValue<IkReal> x883 = IKPowWithIntegerCheck(IKsign(((0.007744) + (((-2.0) * x876 * x878)) + (((-1.0) * x874 * x875)) + ((x874 * (npx * npx))) + (((-0.176) * x876)) + x875 + (npz * npz) + (((0.176) * x878)))), -1);
                                                                                                        if (!x883.valid)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        CheckValue<IkReal> x884 = IKatan2WithCheck(IkReal(((-0.033792) + (((-1.0) * x877 * x878)) + ((x876 * x877)) + (((-0.384) * x878)) + (((0.384) * x876)) + ((cj3 * x879)) + (((-1.0) * x876 * x881)) + (((-0.027808) * cj3)) + (((0.00726) * sj3)) + ((x878 * x881)) + ((npz * x880)) + (((-1.0) * x879)))), IkReal(((0.00726) + ((sj3 * x879)) + (((-0.027808) * sj3)) + ((x876 * x882)) + ((x876 * x880)) + (((0.0825) * x878)) + (((-1.0) * npz * x877)) + (((-0.384) * npz)) + (((-0.00726) * cj3)) + (((-0.0825) * x876)) + (((-1.0) * x878 * x880)) + (((-1.0) * x878 * x882)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                                        if (!x884.valid)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x883.value))) + (x884.value));
                                                                                                        sj5array[0] = IKsin(j5array[0]);
                                                                                                        cj5array[0] = IKcos(j5array[0]);
                                                                                                        if (j5array[0] > IKPI)
                                                                                                        {
                                                                                                            j5array[0] -= IK2PI;
                                                                                                        }
                                                                                                        else if (j5array[0] < -IKPI)
                                                                                                        {
                                                                                                            j5array[0] += IK2PI;
                                                                                                        }
                                                                                                        j5valid[0] = true;
                                                                                                        for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                        {
                                                                                                            if (!j5valid[ij5])
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij5[0] = ij5;
                                                                                                            _ij5[1] = -1;
                                                                                                            for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                            {
                                                                                                                if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                                {
                                                                                                                    j5valid[iij5] = false;
                                                                                                                    _ij5[1] = iij5;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j5 = j5array[ij5];
                                                                                                            cj5 = cj5array[ij5];
                                                                                                            sj5 = sj5array[ij5];
                                                                                                            {
                                                                                                                IkReal evalcond[2];
                                                                                                                IkReal x885 = IKsin(j5);
                                                                                                                IkReal x886 = IKcos(j5);
                                                                                                                IkReal x887 = (npy * sj6);
                                                                                                                IkReal x888 = (cj6 * npx);
                                                                                                                IkReal x889 = ((1.0) * x885);
                                                                                                                evalcond[0] = ((0.384) + (((-0.0825) * sj3)) + (((0.316) * cj3)) + ((npz * x886)) + (((-1.0) * x888 * x889)) + ((x885 * x887)) + (((0.088) * x885)));
                                                                                                                evalcond[1] = ((-0.0825) + ((x886 * x887)) + (((-1.0) * x886 * x888)) + (((-1.0) * npz * x889)) + (((0.0825) * cj3)) + (((0.316) * sj3)) + (((0.088) * x886)));
                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                            }

                                                                                                            rotationfunction0(solutions);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } while (0);
                                                                                    if (bgotonextstatement)
                                                                                    {
                                                                                        bool bgotonextstatement = true;
                                                                                        do
                                                                                        {
                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j4)))), 6.28318530717959)));
                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                            {
                                                                                                bgotonextstatement = false;
                                                                                                {
                                                                                                    IkReal j5eval[2];
                                                                                                    sj4 = 0;
                                                                                                    cj4 = -1.0;
                                                                                                    j4 = 3.14159265358979;
                                                                                                    IkReal x890 = cj6 * cj6;
                                                                                                    IkReal x891 = npy * npy;
                                                                                                    IkReal x892 = npx * npx;
                                                                                                    IkReal x893 = npz * npz;
                                                                                                    IkReal x894 = (npy * sj6);
                                                                                                    IkReal x895 = (cj6 * npx);
                                                                                                    IkReal x896 = ((129.132231404959) * x891);
                                                                                                    IkReal x897 = (x890 * x892);
                                                                                                    j5eval[0] = ((1.0) + (((-258.264462809917) * x894 * x895)) + (((129.132231404959) * x893)) + (((129.132231404959) * x897)) + (((22.7272727272727) * x894)) + (((-22.7272727272727) * x895)) + x896 + (((-1.0) * x890 * x896)));
                                                                                                    j5eval[1] = IKsign(((0.007744) + (((-0.176) * x895)) + (((0.176) * x894)) + x897 + x893 + x891 + (((-1.0) * x890 * x891)) + (((-2.0) * x894 * x895))));
                                                                                                    if (IKabs(j5eval[0]) < 0.0000010000000000 || IKabs(j5eval[1]) < 0.0000010000000000)
                                                                                                    {
                                                                                                        continue; // no branches [j5]
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal j5array[1], cj5array[1], sj5array[1];
                                                                                                            bool j5valid[1] = {false};
                                                                                                            _nj5 = 1;
                                                                                                            IkReal x898 = cj6 * cj6;
                                                                                                            IkReal x899 = npy * npy;
                                                                                                            IkReal x900 = (cj6 * npx);
                                                                                                            IkReal x901 = ((0.316) * cj3);
                                                                                                            IkReal x902 = (npy * sj6);
                                                                                                            IkReal x903 = ((0.0825) * npz);
                                                                                                            IkReal x904 = ((0.316) * sj3);
                                                                                                            IkReal x905 = ((0.0825) * sj3);
                                                                                                            IkReal x906 = ((0.0825) * cj3);
                                                                                                            CheckValue<IkReal> x907 = IKatan2WithCheck(IkReal(((-0.033792) + (((-1.0) * x900 * x905)) + (((-0.384) * x902)) + (((0.384) * x900)) + ((x902 * x905)) + ((x900 * x901)) + (((-0.027808) * cj3)) + (((0.00726) * sj3)) + (((-1.0) * npz * x904)) + (((-1.0) * x901 * x902)) + (((-1.0) * cj3 * x903)) + x903)), IkReal(((-0.00726) + (((-1.0) * x900 * x906)) + (((-1.0) * x900 * x904)) + ((sj3 * x903)) + ((x902 * x904)) + ((x902 * x906)) + (((0.027808) * sj3)) + (((0.0825) * x900)) + (((-1.0) * npz * x901)) + (((-0.384) * npz)) + (((0.00726) * cj3)) + (((-0.0825) * x902)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                                            if (!x907.valid)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            CheckValue<IkReal> x908 = IKPowWithIntegerCheck(IKsign(((0.007744) + (((0.176) * x902)) + ((x898 * (npx * npx))) + (((-1.0) * x898 * x899)) + (((-2.0) * x900 * x902)) + x899 + (npz * npz) + (((-0.176) * x900)))), -1);
                                                                                                            if (!x908.valid)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            j5array[0] = ((-1.5707963267949) + (x907.value) + (((1.5707963267949) * (x908.value))));
                                                                                                            sj5array[0] = IKsin(j5array[0]);
                                                                                                            cj5array[0] = IKcos(j5array[0]);
                                                                                                            if (j5array[0] > IKPI)
                                                                                                            {
                                                                                                                j5array[0] -= IK2PI;
                                                                                                            }
                                                                                                            else if (j5array[0] < -IKPI)
                                                                                                            {
                                                                                                                j5array[0] += IK2PI;
                                                                                                            }
                                                                                                            j5valid[0] = true;
                                                                                                            for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                                                            {
                                                                                                                if (!j5valid[ij5])
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij5[0] = ij5;
                                                                                                                _ij5[1] = -1;
                                                                                                                for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                                                {
                                                                                                                    if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                                                    {
                                                                                                                        j5valid[iij5] = false;
                                                                                                                        _ij5[1] = iij5;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j5 = j5array[ij5];
                                                                                                                cj5 = cj5array[ij5];
                                                                                                                sj5 = sj5array[ij5];
                                                                                                                {
                                                                                                                    IkReal evalcond[2];
                                                                                                                    IkReal x909 = IKsin(j5);
                                                                                                                    IkReal x910 = IKcos(j5);
                                                                                                                    IkReal x911 = (npy * sj6);
                                                                                                                    IkReal x912 = (cj6 * npx);
                                                                                                                    IkReal x913 = ((1.0) * x909);
                                                                                                                    evalcond[0] = ((0.384) + ((x909 * x911)) + (((-0.0825) * sj3)) + (((0.088) * x909)) + (((0.316) * cj3)) + (((-1.0) * x912 * x913)) + ((npz * x910)));
                                                                                                                    evalcond[1] = ((0.0825) + ((x910 * x911)) + (((-1.0) * x910 * x912)) + (((0.088) * x910)) + (((-0.0825) * cj3)) + (((-1.0) * npz * x913)) + (((-0.316) * sj3)));
                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                }

                                                                                                                rotationfunction0(solutions);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } while (0);
                                                                                        if (bgotonextstatement)
                                                                                        {
                                                                                            bool bgotonextstatement = true;
                                                                                            do
                                                                                            {
                                                                                                if (1)
                                                                                                {
                                                                                                    bgotonextstatement = false;
                                                                                                    continue; // branch miss [j5]
                                                                                                }
                                                                                            } while (0);
                                                                                            if (bgotonextstatement)
                                                                                            {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        {
                                                                            IkReal j5array[1], cj5array[1], sj5array[1];
                                                                            bool j5valid[1] = {false};
                                                                            _nj5 = 1;
                                                                            IkReal x914 = cj6 * cj6;
                                                                            IkReal x915 = npy * npy;
                                                                            IkReal x916 = npx * npx;
                                                                            IkReal x917 = ((1.0) * npz);
                                                                            IkReal x918 = (cj6 * npx);
                                                                            IkReal x919 = (cj4 * sj3);
                                                                            IkReal x920 = ((0.0825) * cj3);
                                                                            IkReal x921 = (npy * sj6);
                                                                            IkReal x922 = (cj6 * sj4);
                                                                            IkReal x923 = ((0.0825) * npz);
                                                                            IkReal x924 = ((0.384) * cj4);
                                                                            IkReal x925 = ((0.316) * sj3);
                                                                            IkReal x926 = ((0.176) * cj4);
                                                                            IkReal x927 = (npx * sj4 * sj6);
                                                                            IkReal x928 = ((0.316) * cj3 * cj4);
                                                                            IkReal x929 = (cj4 * x914);
                                                                            IkReal x930 = (npx * npy * sj4);
                                                                            CheckValue<IkReal> x931 = IKatan2WithCheck(IkReal((((x918 * x924)) + ((x918 * x928)) + (((-1.0) * x923)) + ((npz * x925)) + ((npz * x920)) + (((-0.0825) * x918 * x919)) + (((0.00726) * x919)) + (((-1.0) * npy * x917 * x922)) + (((0.0825) * x919 * x921)) + (((-1.0) * x921 * x928)) + (((-1.0) * x921 * x924)) + (((-0.033792) * cj4)) + (((-0.027808) * cj3 * cj4)) + (((-1.0) * x917 * x927)))), IkReal(((0.00726) + ((x918 * x925)) + ((x918 * x920)) + ((x919 * x923)) + ((sj6 * x915 * x922)) + (((0.088) * x927)) + (((-0.027808) * sj3)) + (((-1.0) * sj6 * x916 * x922)) + (((-1.0) * x920 * x921)) + (((-2.0) * x914 * x930)) + (((0.088) * npy * x922)) + (((-0.00726) * cj3)) + (((-1.0) * x921 * x925)) + (((0.0825) * x921)) + x930 + (((-1.0) * npz * x928)) + (((-1.0) * npz * x924)) + (((-0.0825) * x918)))), IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x931.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            CheckValue<IkReal> x932 = IKPowWithIntegerCheck(IKsign((((x916 * x929)) + ((x921 * x926)) + ((cj4 * (npz * npz))) + (((-2.0) * cj4 * x918 * x921)) + (((-1.0) * x915 * x929)) + (((-1.0) * x918 * x926)) + ((cj4 * x915)) + (((0.007744) * cj4)))), -1);
                                                                            if (!x932.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            j5array[0] = ((-1.5707963267949) + (x931.value) + (((1.5707963267949) * (x932.value))));
                                                                            sj5array[0] = IKsin(j5array[0]);
                                                                            cj5array[0] = IKcos(j5array[0]);
                                                                            if (j5array[0] > IKPI)
                                                                            {
                                                                                j5array[0] -= IK2PI;
                                                                            }
                                                                            else if (j5array[0] < -IKPI)
                                                                            {
                                                                                j5array[0] += IK2PI;
                                                                            }
                                                                            j5valid[0] = true;
                                                                            for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                            {
                                                                                if (!j5valid[ij5])
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij5[0] = ij5;
                                                                                _ij5[1] = -1;
                                                                                for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                                {
                                                                                    if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                        j5valid[iij5] = false;
                                                                                        _ij5[1] = iij5;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                j5 = j5array[ij5];
                                                                                cj5 = cj5array[ij5];
                                                                                sj5 = sj5array[ij5];
                                                                                {
                                                                                    IkReal evalcond[4];
                                                                                    IkReal x933 = IKsin(j5);
                                                                                    IkReal x934 = IKcos(j5);
                                                                                    IkReal x935 = (cj6 * npy);
                                                                                    IkReal x936 = ((1.0) * sj4);
                                                                                    IkReal x937 = ((0.0825) * cj4);
                                                                                    IkReal x938 = ((0.316) * sj3);
                                                                                    IkReal x939 = (npx * sj6);
                                                                                    IkReal x940 = ((0.088) * x934);
                                                                                    IkReal x941 = (npy * sj6 * x934);
                                                                                    IkReal x942 = ((1.0) * npz * x933);
                                                                                    IkReal x943 = (cj6 * npx * x934);
                                                                                    evalcond[0] = ((0.384) + ((npz * x934)) + ((npy * sj6 * x933)) + (((0.088) * x933)) + (((-0.0825) * sj3)) + (((0.316) * cj3)) + (((-1.0) * cj6 * npx * x933)));
                                                                                    evalcond[1] = ((((-1.0) * x942)) + (((-1.0) * x943)) + ((cj3 * x937)) + ((cj4 * x938)) + x940 + x941 + (((-1.0) * x937)));
                                                                                    evalcond[2] = ((((-1.0) * npz * x933 * x936)) + ((sj4 * x941)) + ((sj4 * x940)) + (((-1.0) * x936 * x943)) + ((cj4 * x935)) + ((cj4 * x939)));
                                                                                    evalcond[3] = ((-0.0825) + (((-1.0) * x935 * x936)) + (((-1.0) * cj4 * x943)) + (((-1.0) * cj4 * x942)) + (((0.0825) * cj3)) + (((-1.0) * x936 * x939)) + x938 + ((cj4 * x941)) + ((cj4 * x940)));
                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                }

                                                                                rotationfunction0(solutions);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j5array[1], cj5array[1], sj5array[1];
                                                                    bool j5valid[1] = {false};
                                                                    _nj5 = 1;
                                                                    IkReal x944 = cj6 * cj6;
                                                                    IkReal x945 = npy * npy;
                                                                    IkReal x946 = npx * npx;
                                                                    IkReal x947 = ((0.0825) * sj3);
                                                                    IkReal x948 = (npz * sj4);
                                                                    IkReal x949 = (cj4 * npx);
                                                                    IkReal x950 = ((0.316) * cj3);
                                                                    IkReal x951 = ((2.0) * npy);
                                                                    IkReal x952 = (cj4 * cj6);
                                                                    IkReal x953 = (cj6 * npx * sj4);
                                                                    IkReal x954 = (sj4 * x945);
                                                                    IkReal x955 = (npy * sj4 * sj6);
                                                                    CheckValue<IkReal> x956 = IKPowWithIntegerCheck(IKsign((((npz * x948)) + (((0.176) * x955)) + (((-1.0) * sj6 * x951 * x953)) + (((0.007744) * sj4)) + ((sj4 * x944 * x946)) + (((-0.176) * x953)) + (((-1.0) * x944 * x954)) + x954)), -1);
                                                                    if (!x956.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    CheckValue<IkReal> x957 = IKatan2WithCheck(IkReal(((((-0.027808) * cj3 * sj4)) + ((npy * npz * x952)) + (((-0.384) * x955)) + (((-1.0) * x947 * x953)) + (((-0.033792) * sj4)) + ((x947 * x955)) + (((-1.0) * x950 * x955)) + ((npz * sj6 * x949)) + (((0.384) * x953)) + (((0.00726) * sj3 * sj4)) + ((x950 * x953)))), IkReal(((((-0.384) * x948)) + ((x944 * x949 * x951)) + (((-1.0) * npy * x949)) + (((-0.088) * npy * x952)) + ((x947 * x948)) + (((-1.0) * sj6 * x945 * x952)) + ((sj6 * x946 * x952)) + (((-0.088) * sj6 * x949)) + (((-1.0) * x948 * x950)))), IKFAST_ATAN2_MAGTHRESH);
                                                                    if (!x957.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x956.value))) + (x957.value));
                                                                    sj5array[0] = IKsin(j5array[0]);
                                                                    cj5array[0] = IKcos(j5array[0]);
                                                                    if (j5array[0] > IKPI)
                                                                    {
                                                                        j5array[0] -= IK2PI;
                                                                    }
                                                                    else if (j5array[0] < -IKPI)
                                                                    {
                                                                        j5array[0] += IK2PI;
                                                                    }
                                                                    j5valid[0] = true;
                                                                    for (int ij5 = 0; ij5 < 1; ++ij5)
                                                                    {
                                                                        if (!j5valid[ij5])
                                                                        {
                                                                            continue;
                                                                        }
                                                                        _ij5[0] = ij5;
                                                                        _ij5[1] = -1;
                                                                        for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                        {
                                                                            if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                            {
                                                                                j5valid[iij5] = false;
                                                                                _ij5[1] = iij5;
                                                                                break;
                                                                            }
                                                                        }
                                                                        j5 = j5array[ij5];
                                                                        cj5 = cj5array[ij5];
                                                                        sj5 = sj5array[ij5];
                                                                        {
                                                                            IkReal evalcond[4];
                                                                            IkReal x958 = IKsin(j5);
                                                                            IkReal x959 = IKcos(j5);
                                                                            IkReal x960 = (cj6 * npy);
                                                                            IkReal x961 = ((1.0) * sj4);
                                                                            IkReal x962 = ((0.0825) * cj4);
                                                                            IkReal x963 = ((0.316) * sj3);
                                                                            IkReal x964 = (npx * sj6);
                                                                            IkReal x965 = ((0.088) * x959);
                                                                            IkReal x966 = (npy * sj6 * x959);
                                                                            IkReal x967 = ((1.0) * npz * x958);
                                                                            IkReal x968 = (cj6 * npx * x959);
                                                                            evalcond[0] = ((0.384) + ((npz * x959)) + (((-0.0825) * sj3)) + (((0.316) * cj3)) + ((npy * sj6 * x958)) + (((0.088) * x958)) + (((-1.0) * cj6 * npx * x958)));
                                                                            evalcond[1] = ((((-1.0) * x968)) + ((cj3 * x962)) + x966 + x965 + (((-1.0) * x962)) + (((-1.0) * x967)) + ((cj4 * x963)));
                                                                            evalcond[2] = ((((-1.0) * x961 * x968)) + ((sj4 * x965)) + ((sj4 * x966)) + (((-1.0) * npz * x958 * x961)) + ((cj4 * x960)) + ((cj4 * x964)));
                                                                            evalcond[3] = ((-0.0825) + (((-1.0) * x960 * x961)) + (((-1.0) * x961 * x964)) + (((-1.0) * cj4 * x968)) + (((0.0825) * cj3)) + (((-1.0) * cj4 * x967)) + x963 + ((cj4 * x965)) + ((cj4 * x966)));
                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                            {
                                                                                continue;
                                                                            }
                                                                        }

                                                                        rotationfunction0(solutions);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        {
                                                            IkReal j5array[1], cj5array[1], sj5array[1];
                                                            bool j5valid[1] = {false};
                                                            _nj5 = 1;
                                                            IkReal x969 = cj6 * cj6;
                                                            IkReal x970 = npy * npy;
                                                            IkReal x971 = ((0.0825) * cj4);
                                                            IkReal x972 = (npy * sj6);
                                                            IkReal x973 = (cj4 * sj3);
                                                            IkReal x974 = (cj3 * npz);
                                                            IkReal x975 = (cj6 * npx);
                                                            IkReal x976 = ((0.00726) * cj4);
                                                            IkReal x977 = ((0.0825) * sj3);
                                                            IkReal x978 = ((0.316) * cj3);
                                                            CheckValue<IkReal> x979 = IKPowWithIntegerCheck(IKsign(((0.007744) + (((-2.0) * x972 * x975)) + (((-0.176) * x975)) + (((-1.0) * x969 * x970)) + (npz * npz) + x970 + ((x969 * (npx * npx))) + (((0.176) * x972)))), -1);
                                                            if (!x979.valid)
                                                            {
                                                                continue;
                                                            }
                                                            CheckValue<IkReal> x980 = IKatan2WithCheck(IkReal(((-0.033792) + ((x975 * x978)) + (((0.316) * npz * x973)) + (((-0.384) * x972)) + (((-0.027808) * cj3)) + (((0.00726) * sj3)) + (((-1.0) * npz * x971)) + ((x971 * x974)) + (((-1.0) * x972 * x978)) + (((0.384) * x975)) + (((-1.0) * x975 * x977)) + ((x972 * x977)))), IkReal(((((-1.0) * cj3 * x971 * x972)) + (((-0.027808) * x973)) + ((npz * x977)) + (((-1.0) * cj3 * x976)) + (((-1.0) * x971 * x975)) + (((-0.384) * npz)) + (((0.316) * x973 * x975)) + ((x971 * x972)) + ((cj3 * x971 * x975)) + (((-0.316) * x974)) + (((-0.316) * x972 * x973)) + x976)), IKFAST_ATAN2_MAGTHRESH);
                                                            if (!x980.valid)
                                                            {
                                                                continue;
                                                            }
                                                            j5array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x979.value))) + (x980.value));
                                                            sj5array[0] = IKsin(j5array[0]);
                                                            cj5array[0] = IKcos(j5array[0]);
                                                            if (j5array[0] > IKPI)
                                                            {
                                                                j5array[0] -= IK2PI;
                                                            }
                                                            else if (j5array[0] < -IKPI)
                                                            {
                                                                j5array[0] += IK2PI;
                                                            }
                                                            j5valid[0] = true;
                                                            for (int ij5 = 0; ij5 < 1; ++ij5)
                                                            {
                                                                if (!j5valid[ij5])
                                                                {
                                                                    continue;
                                                                }
                                                                _ij5[0] = ij5;
                                                                _ij5[1] = -1;
                                                                for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
                                                                {
                                                                    if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                                                    {
                                                                        j5valid[iij5] = false;
                                                                        _ij5[1] = iij5;
                                                                        break;
                                                                    }
                                                                }
                                                                j5 = j5array[ij5];
                                                                cj5 = cj5array[ij5];
                                                                sj5 = sj5array[ij5];
                                                                {
                                                                    IkReal evalcond[4];
                                                                    IkReal x981 = IKsin(j5);
                                                                    IkReal x982 = IKcos(j5);
                                                                    IkReal x983 = (cj6 * npy);
                                                                    IkReal x984 = ((1.0) * sj4);
                                                                    IkReal x985 = ((0.0825) * cj4);
                                                                    IkReal x986 = ((0.316) * sj3);
                                                                    IkReal x987 = (npx * sj6);
                                                                    IkReal x988 = ((0.088) * x982);
                                                                    IkReal x989 = (npy * sj6 * x982);
                                                                    IkReal x990 = ((1.0) * npz * x981);
                                                                    IkReal x991 = (cj6 * npx * x982);
                                                                    evalcond[0] = ((0.384) + ((npz * x982)) + (((-0.0825) * sj3)) + (((0.316) * cj3)) + ((npy * sj6 * x981)) + (((0.088) * x981)) + (((-1.0) * cj6 * npx * x981)));
                                                                    evalcond[1] = ((((-1.0) * x985)) + (((-1.0) * x991)) + ((cj4 * x986)) + (((-1.0) * x990)) + ((cj3 * x985)) + x988 + x989);
                                                                    evalcond[2] = (((cj4 * x987)) + ((cj4 * x983)) + ((sj4 * x989)) + ((sj4 * x988)) + (((-1.0) * npz * x981 * x984)) + (((-1.0) * x984 * x991)));
                                                                    evalcond[3] = ((-0.0825) + (((-1.0) * cj4 * x990)) + ((cj4 * x989)) + ((cj4 * x988)) + (((0.0825) * cj3)) + (((-1.0) * x984 * x987)) + (((-1.0) * cj4 * x991)) + x986 + (((-1.0) * x983 * x984)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                    {
                                                                        continue;
                                                                    }
                                                                }

                                                                rotationfunction0(solutions);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                {
                                    IkReal j5array[2], cj5array[2], sj5array[2];
                                    bool j5valid[2] = {false};
                                    _nj5 = 2;
                                    IkReal x992 = ((0.088) + (((-1.0) * cj6 * npx)) + ((npy * sj6)));
                                    CheckValue<IkReal> x995 = IKatan2WithCheck(IkReal(npz), IkReal(x992), IKFAST_ATAN2_MAGTHRESH);
                                    if (!x995.valid)
                                    {
                                        continue;
                                    }
                                    IkReal x993 = ((1.0) * (x995.value));
                                    if ((((npz * npz) + (x992 * x992))) < -0.00001)
                                        continue;
                                    CheckValue<IkReal> x996 = IKPowWithIntegerCheck(IKabs(IKsqrt(((npz * npz) + (x992 * x992)))), -1);
                                    if (!x996.valid)
                                    {
                                        continue;
                                    }
                                    if ((((x996.value) * (((0.384) + (((-0.0825) * sj3)) + (((0.316) * cj3)))))) < -1 - IKFAST_SINCOS_THRESH || (((x996.value) * (((0.384) + (((-0.0825) * sj3)) + (((0.316) * cj3)))))) > 1 + IKFAST_SINCOS_THRESH)
                                        continue;
                                    IkReal x994 = IKasin(((x996.value) * (((0.384) + (((-0.0825) * sj3)) + (((0.316) * cj3))))));
                                    j5array[0] = ((((-1.0) * x994)) + (((-1.0) * x993)));
                                    sj5array[0] = IKsin(j5array[0]);
                                    cj5array[0] = IKcos(j5array[0]);
                                    j5array[1] = ((3.14159265358979) + (((-1.0) * x993)) + x994);
                                    sj5array[1] = IKsin(j5array[1]);
                                    cj5array[1] = IKcos(j5array[1]);
                                    if (j5array[0] > IKPI)
                                    {
                                        j5array[0] -= IK2PI;
                                    }
                                    else if (j5array[0] < -IKPI)
                                    {
                                        j5array[0] += IK2PI;
                                    }
                                    j5valid[0] = true;
                                    if (j5array[1] > IKPI)
                                    {
                                        j5array[1] -= IK2PI;
                                    }
                                    else if (j5array[1] < -IKPI)
                                    {
                                        j5array[1] += IK2PI;
                                    }
                                    j5valid[1] = true;
                                    for (int ij5 = 0; ij5 < 2; ++ij5)
                                    {
                                        if (!j5valid[ij5])
                                        {
                                            continue;
                                        }
                                        _ij5[0] = ij5;
                                        _ij5[1] = -1;
                                        for (int iij5 = ij5 + 1; iij5 < 2; ++iij5)
                                        {
                                            if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
                                            {
                                                j5valid[iij5] = false;
                                                _ij5[1] = iij5;
                                                break;
                                            }
                                        }
                                        j5 = j5array[ij5];
                                        cj5 = cj5array[ij5];
                                        sj5 = sj5array[ij5];

                                        {
                                            IkReal j4eval[3];
                                            j4eval[0] = ((-1.0) + cj3 + (((3.83030303030303) * sj3)));
                                            j4eval[1] = ((IKabs((((cj6 * npy)) + ((npx * sj6))))) + (IKabs(((((-0.088) * cj5)) + (((-1.0) * cj5 * npy * sj6)) + ((npz * sj5)) + ((cj5 * cj6 * npx))))));
                                            j4eval[2] = IKsign(((-0.0825) + (((0.0825) * cj3)) + (((0.316) * sj3))));
                                            if (IKabs(j4eval[0]) < 0.0000010000000000 || IKabs(j4eval[1]) < 0.0000010000000000 || IKabs(j4eval[2]) < 0.0000010000000000)
                                            {
                                                {
                                                    IkReal j4eval[2];
                                                    IkReal x997 = (cj6 * npy);
                                                    IkReal x998 = (npx * sj6);
                                                    IkReal x999 = ((3.83030303030303) * sj3);
                                                    j4eval[0] = ((-1.0) + cj3 + x999);
                                                    j4eval[1] = ((((-1.0) * x998)) + (((-1.0) * x997)) + ((x998 * x999)) + ((x997 * x999)) + ((cj3 * x997)) + ((cj3 * x998)));
                                                    if (IKabs(j4eval[0]) < 0.0000010000000000 || IKabs(j4eval[1]) < 0.0000010000000000)
                                                    {
                                                        {
                                                            IkReal j4eval[2];
                                                            IkReal x1000 = ((43.5261707988981) * sj3);
                                                            IkReal x1001 = (cj3 * cj5);
                                                            IkReal x1002 = ((3.83030303030303) * sj3);
                                                            IkReal x1003 = (cj5 * cj6 * npx);
                                                            IkReal x1004 = ((11.3636363636364) * npz * sj5);
                                                            IkReal x1005 = (cj5 * npy * sj6);
                                                            j4eval[0] = ((-1.0) + x1002 + cj3);
                                                            j4eval[1] = (x1004 + x1001 + (((-11.3636363636364) * x1005)) + ((x1000 * x1005)) + (((-11.3636363636364) * cj6 * npx * x1001)) + ((cj5 * x1002)) + (((-1.0) * cj3 * x1004)) + (((11.3636363636364) * npy * sj6 * x1001)) + (((-1.0) * npz * sj5 * x1000)) + (((-1.0) * x1000 * x1003)) + (((-1.0) * cj5)) + (((11.3636363636364) * x1003)));
                                                            if (IKabs(j4eval[0]) < 0.0000010000000000 || IKabs(j4eval[1]) < 0.0000010000000000)
                                                            {
                                                                {
                                                                    IkReal evalcond[1];
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j3))), 6.28318530717959)));
                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                        {
                                                                            bgotonextstatement = false;
                                                                            {
                                                                                IkReal j4eval[1];
                                                                                sj3 = 0;
                                                                                cj3 = 1.0;
                                                                                j3 = 0;
                                                                                j4eval[0] = ((IKabs((((cj6 * npy)) + ((npx * sj6))))) + (IKabs(((((-1.0) * npz * sj5)) + ((cj5 * npy * sj6)) + (((0.088) * cj5)) + (((-1.0) * cj5 * cj6 * npx))))));
                                                                                if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                                                {
                                                                                    {
                                                                                        IkReal j4eval[1];
                                                                                        sj3 = 0;
                                                                                        cj3 = 1.0;
                                                                                        j3 = 0;
                                                                                        IkReal x1006 = ((1.0) * cj6);
                                                                                        j4eval[0] = ((IKabs(((((-1.0) * npx * sj6)) + (((-1.0) * npy * x1006))))) + (IKabs(((((-1.0) * npz * sj5)) + ((cj5 * npy * sj6)) + (((-1.0) * cj5 * npx * x1006)) + (((0.088) * cj5))))));
                                                                                        if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                                                        {
                                                                                            continue; // no branches [j4]
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            {
                                                                                                IkReal j4array[2], cj4array[2], sj4array[2];
                                                                                                bool j4valid[2] = {false};
                                                                                                _nj4 = 2;
                                                                                                IkReal x1007 = ((1.0) * cj6);
                                                                                                CheckValue<IkReal> x1009 = IKatan2WithCheck(IkReal(((((-1.0) * npz * sj5)) + ((cj5 * npy * sj6)) + (((-1.0) * cj5 * npx * x1007)) + (((0.088) * cj5)))), IkReal(((((-1.0) * npx * sj6)) + (((-1.0) * npy * x1007)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                                if (!x1009.valid)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                IkReal x1008 = x1009.value;
                                                                                                j4array[0] = ((-1.0) * x1008);
                                                                                                sj4array[0] = IKsin(j4array[0]);
                                                                                                cj4array[0] = IKcos(j4array[0]);
                                                                                                j4array[1] = ((3.14159265358979) + (((-1.0) * x1008)));
                                                                                                sj4array[1] = IKsin(j4array[1]);
                                                                                                cj4array[1] = IKcos(j4array[1]);
                                                                                                if (j4array[0] > IKPI)
                                                                                                {
                                                                                                    j4array[0] -= IK2PI;
                                                                                                }
                                                                                                else if (j4array[0] < -IKPI)
                                                                                                {
                                                                                                    j4array[0] += IK2PI;
                                                                                                }
                                                                                                j4valid[0] = true;
                                                                                                if (j4array[1] > IKPI)
                                                                                                {
                                                                                                    j4array[1] -= IK2PI;
                                                                                                }
                                                                                                else if (j4array[1] < -IKPI)
                                                                                                {
                                                                                                    j4array[1] += IK2PI;
                                                                                                }
                                                                                                j4valid[1] = true;
                                                                                                for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                                                {
                                                                                                    if (!j4valid[ij4])
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij4[0] = ij4;
                                                                                                    _ij4[1] = -1;
                                                                                                    for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                                                                    {
                                                                                                        if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                                                                        {
                                                                                                            j4valid[iij4] = false;
                                                                                                            _ij4[1] = iij4;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j4 = j4array[ij4];
                                                                                                    cj4 = cj4array[ij4];
                                                                                                    sj4 = sj4array[ij4];
                                                                                                    {
                                                                                                        IkReal evalcond[1];
                                                                                                        IkReal x1010 = IKcos(j4);
                                                                                                        IkReal x1011 = IKsin(j4);
                                                                                                        IkReal x1012 = ((1.0) * x1011);
                                                                                                        IkReal x1013 = (cj5 * x1011);
                                                                                                        evalcond[0] = (((npx * sj6 * x1010)) + ((npy * sj6 * x1013)) + (((0.088) * x1013)) + (((-1.0) * npz * sj5 * x1012)) + ((cj6 * npy * x1010)) + (((-1.0) * cj5 * cj6 * npx * x1012)));
                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    rotationfunction0(solutions);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    {
                                                                                        IkReal j4array[2], cj4array[2], sj4array[2];
                                                                                        bool j4valid[2] = {false};
                                                                                        _nj4 = 2;
                                                                                        CheckValue<IkReal> x1015 = IKatan2WithCheck(IkReal((((cj6 * npy)) + ((npx * sj6)))), IkReal(((((-1.0) * npz * sj5)) + ((cj5 * npy * sj6)) + (((0.088) * cj5)) + (((-1.0) * cj5 * cj6 * npx)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (!x1015.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        IkReal x1014 = x1015.value;
                                                                                        j4array[0] = ((-1.0) * x1014);
                                                                                        sj4array[0] = IKsin(j4array[0]);
                                                                                        cj4array[0] = IKcos(j4array[0]);
                                                                                        j4array[1] = ((3.14159265358979) + (((-1.0) * x1014)));
                                                                                        sj4array[1] = IKsin(j4array[1]);
                                                                                        cj4array[1] = IKcos(j4array[1]);
                                                                                        if (j4array[0] > IKPI)
                                                                                        {
                                                                                            j4array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j4array[0] < -IKPI)
                                                                                        {
                                                                                            j4array[0] += IK2PI;
                                                                                        }
                                                                                        j4valid[0] = true;
                                                                                        if (j4array[1] > IKPI)
                                                                                        {
                                                                                            j4array[1] -= IK2PI;
                                                                                        }
                                                                                        else if (j4array[1] < -IKPI)
                                                                                        {
                                                                                            j4array[1] += IK2PI;
                                                                                        }
                                                                                        j4valid[1] = true;
                                                                                        for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                                        {
                                                                                            if (!j4valid[ij4])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij4[0] = ij4;
                                                                                            _ij4[1] = -1;
                                                                                            for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                                                            {
                                                                                                if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j4valid[iij4] = false;
                                                                                                    _ij4[1] = iij4;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j4 = j4array[ij4];
                                                                                            cj4 = cj4array[ij4];
                                                                                            sj4 = sj4array[ij4];
                                                                                            {
                                                                                                IkReal evalcond[1];
                                                                                                IkReal x1016 = IKcos(j4);
                                                                                                IkReal x1017 = IKsin(j4);
                                                                                                IkReal x1018 = ((1.0) * cj6);
                                                                                                IkReal x1019 = (cj5 * x1016);
                                                                                                evalcond[0] = ((((-1.0) * npy * x1017 * x1018)) + ((npy * sj6 * x1019)) + (((0.088) * x1019)) + (((-1.0) * npz * sj5 * x1016)) + (((-1.0) * npx * x1018 * x1019)) + (((-1.0) * npx * sj6 * x1017)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            rotationfunction0(solutions);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } while (0);
                                                                    if (bgotonextstatement)
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((7.39491075446515e-18) + j3)))), 6.28318530717959)));
                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                            {
                                                                                bgotonextstatement = false;
                                                                                {
                                                                                    IkReal j4eval[1];
                                                                                    sj3 = 0;
                                                                                    cj3 = 1.0;
                                                                                    j3 = -2.7408962440214e-6;
                                                                                    j4eval[0] = ((IKabs((((cj6 * npy)) + ((npx * sj6))))) + (IKabs(((((-1.0) * npz * sj5)) + ((cj5 * npy * sj6)) + (((0.088) * cj5)) + (((-1.0) * cj5 * cj6 * npx))))));
                                                                                    if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                                                    {
                                                                                        {
                                                                                            IkReal j4eval[1];
                                                                                            sj3 = 0;
                                                                                            cj3 = 1.0;
                                                                                            j3 = -2.7408962440214e-6;
                                                                                            IkReal x1020 = ((1.0) * cj6);
                                                                                            j4eval[0] = ((IKabs(((((-1.0) * npx * sj6)) + (((-1.0) * npy * x1020))))) + (IKabs(((((-1.0) * cj5 * npx * x1020)) + (((-1.0) * npz * sj5)) + ((cj5 * npy * sj6)) + (((0.088) * cj5))))));
                                                                                            if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                                                            {
                                                                                                continue; // no branches [j4]
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                {
                                                                                                    IkReal j4array[2], cj4array[2], sj4array[2];
                                                                                                    bool j4valid[2] = {false};
                                                                                                    _nj4 = 2;
                                                                                                    IkReal x1021 = ((1.0) * cj6);
                                                                                                    CheckValue<IkReal> x1023 = IKatan2WithCheck(IkReal(((((-1.0) * cj5 * npx * x1021)) + (((-1.0) * npz * sj5)) + ((cj5 * npy * sj6)) + (((0.088) * cj5)))), IkReal(((((-1.0) * npx * sj6)) + (((-1.0) * npy * x1021)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                                    if (!x1023.valid)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    IkReal x1022 = x1023.value;
                                                                                                    j4array[0] = ((-1.0) * x1022);
                                                                                                    sj4array[0] = IKsin(j4array[0]);
                                                                                                    cj4array[0] = IKcos(j4array[0]);
                                                                                                    j4array[1] = ((3.14159265358979) + (((-1.0) * x1022)));
                                                                                                    sj4array[1] = IKsin(j4array[1]);
                                                                                                    cj4array[1] = IKcos(j4array[1]);
                                                                                                    if (j4array[0] > IKPI)
                                                                                                    {
                                                                                                        j4array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j4array[0] < -IKPI)
                                                                                                    {
                                                                                                        j4array[0] += IK2PI;
                                                                                                    }
                                                                                                    j4valid[0] = true;
                                                                                                    if (j4array[1] > IKPI)
                                                                                                    {
                                                                                                        j4array[1] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j4array[1] < -IKPI)
                                                                                                    {
                                                                                                        j4array[1] += IK2PI;
                                                                                                    }
                                                                                                    j4valid[1] = true;
                                                                                                    for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                                                    {
                                                                                                        if (!j4valid[ij4])
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij4[0] = ij4;
                                                                                                        _ij4[1] = -1;
                                                                                                        for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                                                                        {
                                                                                                            if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                                                                            {
                                                                                                                j4valid[iij4] = false;
                                                                                                                _ij4[1] = iij4;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j4 = j4array[ij4];
                                                                                                        cj4 = cj4array[ij4];
                                                                                                        sj4 = sj4array[ij4];
                                                                                                        {
                                                                                                            IkReal evalcond[1];
                                                                                                            IkReal x1024 = IKcos(j4);
                                                                                                            IkReal x1025 = IKsin(j4);
                                                                                                            IkReal x1026 = ((1.0) * x1025);
                                                                                                            IkReal x1027 = (cj5 * x1025);
                                                                                                            evalcond[0] = (((npy * sj6 * x1027)) + (((-1.0) * npz * sj5 * x1026)) + ((cj6 * npy * x1024)) + (((-1.0) * cj5 * cj6 * npx * x1026)) + ((npx * sj6 * x1024)) + (((0.088) * x1027)));
                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        rotationfunction0(solutions);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        {
                                                                                            IkReal j4array[2], cj4array[2], sj4array[2];
                                                                                            bool j4valid[2] = {false};
                                                                                            _nj4 = 2;
                                                                                            CheckValue<IkReal> x1029 = IKatan2WithCheck(IkReal((((cj6 * npy)) + ((npx * sj6)))), IkReal(((((-1.0) * npz * sj5)) + ((cj5 * npy * sj6)) + (((0.088) * cj5)) + (((-1.0) * cj5 * cj6 * npx)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (!x1029.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            IkReal x1028 = x1029.value;
                                                                                            j4array[0] = ((-1.0) * x1028);
                                                                                            sj4array[0] = IKsin(j4array[0]);
                                                                                            cj4array[0] = IKcos(j4array[0]);
                                                                                            j4array[1] = ((3.14159265358979) + (((-1.0) * x1028)));
                                                                                            sj4array[1] = IKsin(j4array[1]);
                                                                                            cj4array[1] = IKcos(j4array[1]);
                                                                                            if (j4array[0] > IKPI)
                                                                                            {
                                                                                                j4array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j4array[0] < -IKPI)
                                                                                            {
                                                                                                j4array[0] += IK2PI;
                                                                                            }
                                                                                            j4valid[0] = true;
                                                                                            if (j4array[1] > IKPI)
                                                                                            {
                                                                                                j4array[1] -= IK2PI;
                                                                                            }
                                                                                            else if (j4array[1] < -IKPI)
                                                                                            {
                                                                                                j4array[1] += IK2PI;
                                                                                            }
                                                                                            j4valid[1] = true;
                                                                                            for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                                            {
                                                                                                if (!j4valid[ij4])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij4[0] = ij4;
                                                                                                _ij4[1] = -1;
                                                                                                for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                                                                {
                                                                                                    if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j4valid[iij4] = false;
                                                                                                        _ij4[1] = iij4;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j4 = j4array[ij4];
                                                                                                cj4 = cj4array[ij4];
                                                                                                sj4 = sj4array[ij4];
                                                                                                {
                                                                                                    IkReal evalcond[1];
                                                                                                    IkReal x1030 = IKcos(j4);
                                                                                                    IkReal x1031 = IKsin(j4);
                                                                                                    IkReal x1032 = ((1.0) * cj6);
                                                                                                    IkReal x1033 = (cj5 * x1030);
                                                                                                    evalcond[0] = ((((-1.0) * npy * x1031 * x1032)) + ((npy * sj6 * x1033)) + (((0.088) * x1033)) + (((-1.0) * npx * sj6 * x1031)) + (((-1.0) * npz * sj5 * x1030)) + (((-1.0) * npx * x1032 * x1033)));
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                rotationfunction0(solutions);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } while (0);
                                                                        if (bgotonextstatement)
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-2.63084142381503) + j3)))), 6.28318530717959)));
                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                {
                                                                                    bgotonextstatement = false;
                                                                                    {
                                                                                        IkReal j4array[1], cj4array[1], sj4array[1];
                                                                                        bool j4valid[1] = {false};
                                                                                        _nj4 = 1;
                                                                                        IkReal x1034 = ((2597402597.4026) * sj6);
                                                                                        IkReal x1035 = ((2597402597.4026) * cj6);
                                                                                        if (IKabs(((((-1.0) * npy * x1035)) + (((-1.0) * npx * x1034)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5 * npy * x1034)) + (((228571428.571429) * cj5)) + (((-1.0) * cj5 * npx * x1035)) + (((-2597402597.4026) * npz * sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * npy * x1035)) + (((-1.0) * npx * x1034)))) + IKsqr((((cj5 * npy * x1034)) + (((228571428.571429) * cj5)) + (((-1.0) * cj5 * npx * x1035)) + (((-2597402597.4026) * npz * sj5)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                        j4array[0] = IKatan2(((((-1.0) * npy * x1035)) + (((-1.0) * npx * x1034))), (((cj5 * npy * x1034)) + (((228571428.571429) * cj5)) + (((-1.0) * cj5 * npx * x1035)) + (((-2597402597.4026) * npz * sj5))));
                                                                                        sj4array[0] = IKsin(j4array[0]);
                                                                                        cj4array[0] = IKcos(j4array[0]);
                                                                                        if (j4array[0] > IKPI)
                                                                                        {
                                                                                            j4array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j4array[0] < -IKPI)
                                                                                        {
                                                                                            j4array[0] += IK2PI;
                                                                                        }
                                                                                        j4valid[0] = true;
                                                                                        for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                                        {
                                                                                            if (!j4valid[ij4])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij4[0] = ij4;
                                                                                            _ij4[1] = -1;
                                                                                            for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                                                            {
                                                                                                if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j4valid[iij4] = false;
                                                                                                    _ij4[1] = iij4;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j4 = j4array[ij4];
                                                                                            cj4 = cj4array[ij4];
                                                                                            sj4 = sj4array[ij4];
                                                                                            {
                                                                                                IkReal evalcond[4];
                                                                                                IkReal x1036 = IKcos(j4);
                                                                                                IkReal x1037 = IKsin(j4);
                                                                                                IkReal x1038 = ((1.0) * cj6);
                                                                                                IkReal x1039 = (npx * sj6);
                                                                                                IkReal x1040 = (cj5 * sj6);
                                                                                                IkReal x1041 = ((0.088) * cj5);
                                                                                                IkReal x1042 = ((1.0) * npz * sj5);
                                                                                                IkReal x1043 = (npx * x1037);
                                                                                                IkReal x1044 = (npy * x1036);
                                                                                                IkReal x1045 = (cj5 * x1036);
                                                                                                IkReal x1046 = (npy * x1037);
                                                                                                evalcond[0] = ((((-1.0) * x1039)) + (((-3.85e-10) * x1037)) + (((-1.0) * npy * x1038)));
                                                                                                evalcond[1] = (x1041 + (((-3.85e-10) * x1036)) + ((npy * x1040)) + (((-1.0) * cj5 * npx * x1038)) + (((-1.0) * x1042)));
                                                                                                evalcond[2] = (((x1036 * x1039)) + ((x1037 * x1041)) + ((x1040 * x1046)) + ((cj6 * x1044)) + (((-1.0) * x1037 * x1042)) + (((-1.0) * cj5 * x1038 * x1043)));
                                                                                                evalcond[3] = ((-3.85e-10) + (((-1.0) * x1038 * x1046)) + (((-1.0) * x1037 * x1039)) + ((x1040 * x1044)) + (((-1.0) * npx * x1038 * x1045)) + ((x1036 * x1041)) + (((-1.0) * x1036 * x1042)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            rotationfunction0(solutions);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } while (0);
                                                                            if (bgotonextstatement)
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
                                                                                    if (1)
                                                                                    {
                                                                                        bgotonextstatement = false;
                                                                                        continue; // branch miss [j4]
                                                                                    }
                                                                                } while (0);
                                                                                if (bgotonextstatement)
                                                                                {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j4array[1], cj4array[1], sj4array[1];
                                                                    bool j4valid[1] = {false};
                                                                    _nj4 = 1;
                                                                    IkReal x1047 = cj6 * cj6;
                                                                    IkReal x1048 = npx * npx;
                                                                    IkReal x1049 = ((0.0825) * cj3);
                                                                    IkReal x1050 = ((0.05214) * sj3);
                                                                    IkReal x1051 = ((0.00726) * cj5);
                                                                    IkReal x1052 = (npx * sj6);
                                                                    IkReal x1053 = ((0.316) * sj3);
                                                                    IkReal x1054 = (npz * sj5);
                                                                    IkReal x1055 = (cj6 * npy);
                                                                    IkReal x1056 = (cj5 * npy * sj6);
                                                                    IkReal x1057 = (cj5 * cj6 * npx);
                                                                    CheckValue<IkReal> x1058 = IKPowWithIntegerCheck(((-0.0825) + x1053 + x1049), -1);
                                                                    if (!x1058.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    CheckValue<IkReal> x1059 = IKPowWithIntegerCheck(((((-1.0) * x1051)) + ((x1053 * x1056)) + ((cj3 * x1051)) + ((x1049 * x1056)) + (((-0.0825) * x1056)) + (((0.027808) * cj5 * sj3)) + (((-1.0) * x1053 * x1057)) + (((-1.0) * x1053 * x1054)) + (((-1.0) * x1049 * x1054)) + (((-1.0) * x1049 * x1057)) + (((0.0825) * x1057)) + (((0.0825) * x1054))), -1);
                                                                    if (!x1059.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    if (IKabs(((x1058.value) * ((x1052 + x1055)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1059.value) * (((-0.10666225) + x1050 + x1048 + ((x1047 * (npy * npy))) + (((0.0136125) * cj3)) + (((-1.0) * x1047 * x1048)) + (((2.0) * x1052 * x1055)) + (((0.09304975) * (cj3 * cj3))) + (((-1.0) * cj3 * x1050)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1058.value) * ((x1052 + x1055)))) + IKsqr(((x1059.value) * (((-0.10666225) + x1050 + x1048 + ((x1047 * (npy * npy))) + (((0.0136125) * cj3)) + (((-1.0) * x1047 * x1048)) + (((2.0) * x1052 * x1055)) + (((0.09304975) * (cj3 * cj3))) + (((-1.0) * cj3 * x1050)))))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                    j4array[0] = IKatan2(((x1058.value) * ((x1052 + x1055))), ((x1059.value) * (((-0.10666225) + x1050 + x1048 + ((x1047 * (npy * npy))) + (((0.0136125) * cj3)) + (((-1.0) * x1047 * x1048)) + (((2.0) * x1052 * x1055)) + (((0.09304975) * (cj3 * cj3))) + (((-1.0) * cj3 * x1050))))));
                                                                    sj4array[0] = IKsin(j4array[0]);
                                                                    cj4array[0] = IKcos(j4array[0]);
                                                                    if (j4array[0] > IKPI)
                                                                    {
                                                                        j4array[0] -= IK2PI;
                                                                    }
                                                                    else if (j4array[0] < -IKPI)
                                                                    {
                                                                        j4array[0] += IK2PI;
                                                                    }
                                                                    j4valid[0] = true;
                                                                    for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                    {
                                                                        if (!j4valid[ij4])
                                                                        {
                                                                            continue;
                                                                        }
                                                                        _ij4[0] = ij4;
                                                                        _ij4[1] = -1;
                                                                        for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                                        {
                                                                            if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                                            {
                                                                                j4valid[iij4] = false;
                                                                                _ij4[1] = iij4;
                                                                                break;
                                                                            }
                                                                        }
                                                                        j4 = j4array[ij4];
                                                                        cj4 = cj4array[ij4];
                                                                        sj4 = sj4array[ij4];
                                                                        {
                                                                            IkReal evalcond[4];
                                                                            IkReal x1060 = IKsin(j4);
                                                                            IkReal x1061 = IKcos(j4);
                                                                            IkReal x1062 = (npx * sj6);
                                                                            IkReal x1063 = ((0.316) * sj3);
                                                                            IkReal x1064 = ((0.0825) * cj3);
                                                                            IkReal x1065 = (npy * sj6);
                                                                            IkReal x1066 = ((0.088) * cj5);
                                                                            IkReal x1067 = ((1.0) * npy);
                                                                            IkReal x1068 = ((0.0825) * x1060);
                                                                            IkReal x1069 = (cj6 * x1061);
                                                                            IkReal x1070 = ((1.0) * npz * sj5);
                                                                            IkReal x1071 = ((1.0) * cj5 * npx);
                                                                            IkReal x1072 = (cj5 * x1060);
                                                                            IkReal x1073 = (cj6 * x1060);
                                                                            evalcond[0] = ((((-1.0) * cj6 * x1067)) + ((x1060 * x1063)) + ((x1060 * x1064)) + (((-1.0) * x1068)) + (((-1.0) * x1062)));
                                                                            evalcond[1] = ((((-1.0) * cj6 * x1071)) + ((x1061 * x1063)) + ((x1061 * x1064)) + x1066 + (((-0.0825) * x1061)) + ((cj5 * x1065)) + (((-1.0) * x1070)));
                                                                            evalcond[2] = (((x1061 * x1062)) + ((x1060 * x1066)) + (((-1.0) * x1071 * x1073)) + ((npy * x1069)) + ((x1065 * x1072)) + (((-1.0) * x1060 * x1070)));
                                                                            evalcond[3] = ((-0.0825) + ((x1061 * x1066)) + x1063 + x1064 + (((-1.0) * x1060 * x1062)) + (((-1.0) * x1061 * x1070)) + (((-1.0) * x1067 * x1073)) + ((cj5 * x1061 * x1065)) + (((-1.0) * x1069 * x1071)));
                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                            {
                                                                                continue;
                                                                            }
                                                                        }

                                                                        rotationfunction0(solutions);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        {
                                                            IkReal j4array[1], cj4array[1], sj4array[1];
                                                            bool j4valid[1] = {false};
                                                            _nj4 = 1;
                                                            IkReal x1074 = (cj5 * npx);
                                                            IkReal x1075 = (cj6 * npy);
                                                            IkReal x1076 = ((0.316) * sj3);
                                                            IkReal x1077 = ((0.0825) * cj3);
                                                            IkReal x1078 = (npx * sj6);
                                                            IkReal x1079 = (npz * sj5);
                                                            IkReal x1080 = (cj5 * cj6 * sj6);
                                                            CheckValue<IkReal> x1081 = IKPowWithIntegerCheck(((-0.0825) + x1076 + x1077), -1);
                                                            if (!x1081.valid)
                                                            {
                                                                continue;
                                                            }
                                                            CheckValue<IkReal> x1082 = IKPowWithIntegerCheck((((x1077 * x1078)) + ((x1075 * x1077)) + ((x1075 * x1076)) + (((-0.0825) * x1075)) + (((-0.0825) * x1078)) + ((x1076 * x1078))), -1);
                                                            if (!x1082.valid)
                                                            {
                                                                continue;
                                                            }
                                                            if (IKabs(((x1081.value) * ((x1078 + x1075)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1082.value) * (((((-0.088) * cj5 * x1075)) + ((x1078 * x1079)) + ((x1075 * x1079)) + (((-1.0) * npy * x1074)) + ((cj6 * x1074 * x1078)) + (((-0.088) * sj6 * x1074)) + (((-1.0) * cj5 * npy * sj6 * x1075)) + (((2.0) * cj6 * x1074 * x1075)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1081.value) * ((x1078 + x1075)))) + IKsqr(((x1082.value) * (((((-0.088) * cj5 * x1075)) + ((x1078 * x1079)) + ((x1075 * x1079)) + (((-1.0) * npy * x1074)) + ((cj6 * x1074 * x1078)) + (((-0.088) * sj6 * x1074)) + (((-1.0) * cj5 * npy * sj6 * x1075)) + (((2.0) * cj6 * x1074 * x1075)))))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                continue;
                                                            j4array[0] = IKatan2(((x1081.value) * ((x1078 + x1075))), ((x1082.value) * (((((-0.088) * cj5 * x1075)) + ((x1078 * x1079)) + ((x1075 * x1079)) + (((-1.0) * npy * x1074)) + ((cj6 * x1074 * x1078)) + (((-0.088) * sj6 * x1074)) + (((-1.0) * cj5 * npy * sj6 * x1075)) + (((2.0) * cj6 * x1074 * x1075))))));
                                                            sj4array[0] = IKsin(j4array[0]);
                                                            cj4array[0] = IKcos(j4array[0]);
                                                            if (j4array[0] > IKPI)
                                                            {
                                                                j4array[0] -= IK2PI;
                                                            }
                                                            else if (j4array[0] < -IKPI)
                                                            {
                                                                j4array[0] += IK2PI;
                                                            }
                                                            j4valid[0] = true;
                                                            for (int ij4 = 0; ij4 < 1; ++ij4)
                                                            {
                                                                if (!j4valid[ij4])
                                                                {
                                                                    continue;
                                                                }
                                                                _ij4[0] = ij4;
                                                                _ij4[1] = -1;
                                                                for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                                {
                                                                    if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                                    {
                                                                        j4valid[iij4] = false;
                                                                        _ij4[1] = iij4;
                                                                        break;
                                                                    }
                                                                }
                                                                j4 = j4array[ij4];
                                                                cj4 = cj4array[ij4];
                                                                sj4 = sj4array[ij4];
                                                                {
                                                                    IkReal evalcond[4];
                                                                    IkReal x1083 = IKsin(j4);
                                                                    IkReal x1084 = IKcos(j4);
                                                                    IkReal x1085 = (npx * sj6);
                                                                    IkReal x1086 = ((0.316) * sj3);
                                                                    IkReal x1087 = ((0.0825) * cj3);
                                                                    IkReal x1088 = (npy * sj6);
                                                                    IkReal x1089 = ((0.088) * cj5);
                                                                    IkReal x1090 = ((1.0) * npy);
                                                                    IkReal x1091 = ((0.0825) * x1083);
                                                                    IkReal x1092 = (cj6 * x1084);
                                                                    IkReal x1093 = ((1.0) * npz * sj5);
                                                                    IkReal x1094 = ((1.0) * cj5 * npx);
                                                                    IkReal x1095 = (cj5 * x1083);
                                                                    IkReal x1096 = (cj6 * x1083);
                                                                    evalcond[0] = ((((-1.0) * cj6 * x1090)) + (((-1.0) * x1091)) + (((-1.0) * x1085)) + ((x1083 * x1086)) + ((x1083 * x1087)));
                                                                    evalcond[1] = (((cj5 * x1088)) + x1089 + (((-1.0) * cj6 * x1094)) + (((-1.0) * x1093)) + (((-0.0825) * x1084)) + ((x1084 * x1086)) + ((x1084 * x1087)));
                                                                    evalcond[2] = ((((-1.0) * x1083 * x1093)) + ((x1088 * x1095)) + ((npy * x1092)) + (((-1.0) * x1094 * x1096)) + ((x1084 * x1085)) + ((x1083 * x1089)));
                                                                    evalcond[3] = ((-0.0825) + ((cj5 * x1084 * x1088)) + x1087 + x1086 + (((-1.0) * x1090 * x1096)) + (((-1.0) * x1084 * x1093)) + (((-1.0) * x1092 * x1094)) + (((-1.0) * x1083 * x1085)) + ((x1084 * x1089)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                    {
                                                                        continue;
                                                                    }
                                                                }

                                                                rotationfunction0(solutions);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                {
                                                    IkReal j4array[1], cj4array[1], sj4array[1];
                                                    bool j4valid[1] = {false};
                                                    _nj4 = 1;
                                                    CheckValue<IkReal> x1097 = IKatan2WithCheck(IkReal((((cj6 * npy)) + ((npx * sj6)))), IkReal(((((-0.088) * cj5)) + (((-1.0) * cj5 * npy * sj6)) + ((npz * sj5)) + ((cj5 * cj6 * npx)))), IKFAST_ATAN2_MAGTHRESH);
                                                    if (!x1097.valid)
                                                    {
                                                        continue;
                                                    }
                                                    CheckValue<IkReal> x1098 = IKPowWithIntegerCheck(IKsign(((-0.0825) + (((0.0825) * cj3)) + (((0.316) * sj3)))), -1);
                                                    if (!x1098.valid)
                                                    {
                                                        continue;
                                                    }
                                                    j4array[0] = ((-1.5707963267949) + (x1097.value) + (((1.5707963267949) * (x1098.value))));
                                                    sj4array[0] = IKsin(j4array[0]);
                                                    cj4array[0] = IKcos(j4array[0]);
                                                    if (j4array[0] > IKPI)
                                                    {
                                                        j4array[0] -= IK2PI;
                                                    }
                                                    else if (j4array[0] < -IKPI)
                                                    {
                                                        j4array[0] += IK2PI;
                                                    }
                                                    j4valid[0] = true;
                                                    for (int ij4 = 0; ij4 < 1; ++ij4)
                                                    {
                                                        if (!j4valid[ij4])
                                                        {
                                                            continue;
                                                        }
                                                        _ij4[0] = ij4;
                                                        _ij4[1] = -1;
                                                        for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                        {
                                                            if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                            {
                                                                j4valid[iij4] = false;
                                                                _ij4[1] = iij4;
                                                                break;
                                                            }
                                                        }
                                                        j4 = j4array[ij4];
                                                        cj4 = cj4array[ij4];
                                                        sj4 = sj4array[ij4];
                                                        {
                                                            IkReal evalcond[4];
                                                            IkReal x1099 = IKsin(j4);
                                                            IkReal x1100 = IKcos(j4);
                                                            IkReal x1101 = (npx * sj6);
                                                            IkReal x1102 = ((0.316) * sj3);
                                                            IkReal x1103 = ((0.0825) * cj3);
                                                            IkReal x1104 = (npy * sj6);
                                                            IkReal x1105 = ((0.088) * cj5);
                                                            IkReal x1106 = ((1.0) * npy);
                                                            IkReal x1107 = ((0.0825) * x1099);
                                                            IkReal x1108 = (cj6 * x1100);
                                                            IkReal x1109 = ((1.0) * npz * sj5);
                                                            IkReal x1110 = ((1.0) * cj5 * npx);
                                                            IkReal x1111 = (cj5 * x1099);
                                                            IkReal x1112 = (cj6 * x1099);
                                                            evalcond[0] = ((((-1.0) * x1101)) + ((x1099 * x1103)) + ((x1099 * x1102)) + (((-1.0) * cj6 * x1106)) + (((-1.0) * x1107)));
                                                            evalcond[1] = (x1105 + ((cj5 * x1104)) + (((-1.0) * cj6 * x1110)) + ((x1100 * x1102)) + ((x1100 * x1103)) + (((-0.0825) * x1100)) + (((-1.0) * x1109)));
                                                            evalcond[2] = (((x1104 * x1111)) + ((x1099 * x1105)) + (((-1.0) * x1099 * x1109)) + ((npy * x1108)) + ((x1100 * x1101)) + (((-1.0) * x1110 * x1112)));
                                                            evalcond[3] = ((-0.0825) + x1102 + x1103 + (((-1.0) * x1108 * x1110)) + (((-1.0) * x1100 * x1109)) + (((-1.0) * x1106 * x1112)) + ((cj5 * x1100 * x1104)) + ((x1100 * x1105)) + (((-1.0) * x1099 * x1101)));
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                            {
                                                                continue;
                                                            }
                                                        }

                                                        rotationfunction0(solutions);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return solutions.GetNumSolutions() > 0;
        }
        inline void rotationfunction0(IkSolutionListBase<IkReal> &solutions)
        {
            for (int rotationiter = 0; rotationiter < 1; ++rotationiter)
            {
                IkReal x132 = ((1.0) * sj6);
                IkReal x133 = ((1.0) * sj3);
                IkReal x134 = ((1.0) * cj5);
                IkReal x135 = ((1.0) * sj4);
                IkReal x136 = ((1.0) * cj6);
                IkReal x137 = ((-1.0) * sj4);
                IkReal x138 = ((-1.0) * cj5);
                IkReal x139 = ((((-1.0) * r01 * x132)) + ((cj6 * r00)));
                IkReal x140 = ((((-1.0) * r11 * x132)) + ((cj6 * r10)));
                IkReal x141 = ((((-1.0) * r21 * x132)) + ((cj6 * r20)));
                IkReal x142 = (sj5 * x139);
                IkReal x143 = ((((-1.0) * r01 * x136)) + (((-1.0) * r00 * x132)));
                IkReal x144 = ((((-1.0) * r10 * x132)) + (((-1.0) * r11 * x136)));
                IkReal x145 = ((((-1.0) * r21 * x136)) + (((-1.0) * r20 * x132)));
                IkReal x146 = (((r02 * sj5)) + ((cj5 * x139)));
                IkReal x147 = (((cj5 * x140)) + ((r12 * sj5)));
                IkReal x148 = (((cj5 * x141)) + ((r22 * sj5)));
                IkReal x149 = ((((-1.0) * r22 * x134)) + ((sj5 * x141)));
                IkReal x150 = (cj4 * x146);
                IkReal x151 = (((r12 * x138)) + ((sj5 * x140)));
                IkReal x152 = (((cj4 * x147)) + (((-1.0) * x135 * x144)));
                IkReal x153 = (((x137 * x145)) + ((cj4 * x148)));
                new_r00 = ((((-1.0) * x133 * ((x142 + (((-1.0) * r02 * x134)))))) + ((cj3 * ((((x137 * x143)) + x150)))));
                new_r01 = (((sj4 * x146)) + ((cj4 * x143)));
                new_r02 = (((sj3 * ((x150 + (((-1.0) * x135 * x143)))))) + ((cj3 * ((((r02 * x138)) + x142)))));
                new_r10 = ((((-1.0) * x133 * x151)) + ((cj3 * x152)));
                new_r11 = (((sj4 * x147)) + ((cj4 * x144)));
                new_r12 = (((cj3 * x151)) + ((sj3 * x152)));
                new_r20 = ((((-1.0) * x133 * x149)) + ((cj3 * x153)));
                new_r21 = (((sj4 * x148)) + ((cj4 * x145)));
                new_r22 = (((cj3 * x149)) + ((sj3 * x153)));
                {
                    IkReal j1array[2], cj1array[2], sj1array[2];
                    bool j1valid[2] = {false};
                    _nj1 = 2;
                    cj1array[0] = new_r22;
                    if (cj1array[0] >= -1 - IKFAST_SINCOS_THRESH && cj1array[0] <= 1 + IKFAST_SINCOS_THRESH)
                    {
                        j1valid[0] = j1valid[1] = true;
                        j1array[0] = IKacos(cj1array[0]);
                        sj1array[0] = IKsin(j1array[0]);
                        cj1array[1] = cj1array[0];
                        j1array[1] = -j1array[0];
                        sj1array[1] = -sj1array[0];
                    }
                    else if (isnan(cj1array[0]))
                    {
                        // probably any value will work
                        j1valid[0] = true;
                        cj1array[0] = 1;
                        sj1array[0] = 0;
                        j1array[0] = 0;
                    }
                    for (int ij1 = 0; ij1 < 2; ++ij1)
                    {
                        if (!j1valid[ij1])
                        {
                            continue;
                        }
                        _ij1[0] = ij1;
                        _ij1[1] = -1;
                        for (int iij1 = ij1 + 1; iij1 < 2; ++iij1)
                        {
                            if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                            {
                                j1valid[iij1] = false;
                                _ij1[1] = iij1;
                                break;
                            }
                        }
                        j1 = j1array[ij1];
                        cj1 = cj1array[ij1];
                        sj1 = sj1array[ij1];

                        {
                            IkReal j0eval[3];
                            j0eval[0] = sj1;
                            j0eval[1] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                            j0eval[2] = IKsign(sj1);
                            if (IKabs(j0eval[0]) < 0.0000010000000000 || IKabs(j0eval[1]) < 0.0000010000000000 || IKabs(j0eval[2]) < 0.0000010000000000)
                            {
                                {
                                    IkReal j2eval[3];
                                    j2eval[0] = sj1;
                                    j2eval[1] = IKsign(sj1);
                                    j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                    if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                    {
                                        {
                                            IkReal j0eval[2];
                                            j0eval[0] = new_r12;
                                            j0eval[1] = sj1;
                                            if (IKabs(j0eval[0]) < 0.0000010000000000 || IKabs(j0eval[1]) < 0.0000010000000000)
                                            {
                                                {
                                                    IkReal evalcond[5];
                                                    bool bgotonextstatement = true;
                                                    do
                                                    {
                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                                        evalcond[1] = new_r20;
                                                        evalcond[2] = new_r02;
                                                        evalcond[3] = new_r12;
                                                        evalcond[4] = new_r21;
                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 && IKabs(evalcond[4]) < 0.0000050000000000)
                                                        {
                                                            bgotonextstatement = false;
                                                            IkReal j2mul = 1;
                                                            j2 = 0;
                                                            j0mul = -1.0;
                                                            if (IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r01)) + IKsqr(new_r00) - 1) <= IKFAST_SINCOS_THRESH)
                                                                continue;
                                                            j0 = IKatan2(((-1.0) * new_r01), new_r00);
                                                            {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].fmul = j0mul;
                                                                vinfos[0].freeind = 0;
                                                                vinfos[0].maxsolutions = 0;
                                                                vinfos[1].jointtype = 1;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 1;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].fmul = j2mul;
                                                                vinfos[2].freeind = 0;
                                                                vinfos[2].maxsolutions = 0;
                                                                vinfos[3].jointtype = 1;
                                                                vinfos[3].foffset = j3;
                                                                vinfos[3].indices[0] = _ij3[0];
                                                                vinfos[3].indices[1] = _ij3[1];
                                                                vinfos[3].maxsolutions = _nj3;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j4;
                                                                vinfos[4].indices[0] = _ij4[0];
                                                                vinfos[4].indices[1] = _ij4[1];
                                                                vinfos[4].maxsolutions = _nj4;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j5;
                                                                vinfos[5].indices[0] = _ij5[0];
                                                                vinfos[5].indices[1] = _ij5[1];
                                                                vinfos[5].maxsolutions = _nj5;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j6;
                                                                vinfos[6].indices[0] = _ij6[0];
                                                                vinfos[6].indices[1] = _ij6[1];
                                                                vinfos[6].maxsolutions = _nj6;
                                                                std::vector<int> vfree(1);
                                                                vfree[0] = 2;
                                                                solutions.AddSolution(vinfos, vfree);
                                                            }
                                                        }
                                                    } while (0);
                                                    if (bgotonextstatement)
                                                    {
                                                        bool bgotonextstatement = true;
                                                        do
                                                        {
                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))), 6.28318530717959)));
                                                            evalcond[1] = new_r20;
                                                            evalcond[2] = new_r02;
                                                            evalcond[3] = new_r12;
                                                            evalcond[4] = new_r21;
                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 && IKabs(evalcond[4]) < 0.0000050000000000)
                                                            {
                                                                bgotonextstatement = false;
                                                                IkReal j2mul = 1;
                                                                j2 = 0;
                                                                j0mul = 1.0;
                                                                if (IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r01)) + IKsqr(((-1.0) * new_r00)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                    continue;
                                                                j0 = IKatan2(((-1.0) * new_r01), ((-1.0) * new_r00));
                                                                {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].fmul = j0mul;
                                                                    vinfos[0].freeind = 0;
                                                                    vinfos[0].maxsolutions = 0;
                                                                    vinfos[1].jointtype = 1;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 1;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].fmul = j2mul;
                                                                    vinfos[2].freeind = 0;
                                                                    vinfos[2].maxsolutions = 0;
                                                                    vinfos[3].jointtype = 1;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    vinfos[6].jointtype = 1;
                                                                    vinfos[6].foffset = j6;
                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                    vinfos[6].maxsolutions = _nj6;
                                                                    std::vector<int> vfree(1);
                                                                    vfree[0] = 2;
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                }
                                                            }
                                                        } while (0);
                                                        if (bgotonextstatement)
                                                        {
                                                            bool bgotonextstatement = true;
                                                            do
                                                            {
                                                                evalcond[0] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                {
                                                                    bgotonextstatement = false;
                                                                    {
                                                                        IkReal j0eval[1];
                                                                        new_r02 = 0;
                                                                        new_r12 = 0;
                                                                        new_r20 = 0;
                                                                        new_r21 = 0;
                                                                        IkReal x154 = new_r22 * new_r22;
                                                                        IkReal x155 = ((16.0) * new_r10);
                                                                        IkReal x156 = ((16.0) * new_r01);
                                                                        IkReal x157 = ((16.0) * new_r22);
                                                                        IkReal x158 = ((8.0) * new_r11);
                                                                        IkReal x159 = ((8.0) * new_r00);
                                                                        IkReal x160 = (x154 * x155);
                                                                        IkReal x161 = (x154 * x156);
                                                                        j0eval[0] = ((IKabs(((((-32.0) * new_r00 * x154)) + ((new_r11 * x157)) + (((16.0) * new_r00))))) + (IKabs(((((-1.0) * x156)) + x161))) + (IKabs(((((-1.0) * x160)) + x155))) + (IKabs(((((-1.0) * x159)) + ((new_r22 * x158))))) + (IKabs(((((-1.0) * new_r22 * x159)) + ((x154 * x158))))) + (IKabs(((((-1.0) * x155)) + x160))) + (IKabs(((((32.0) * new_r11)) + (((-1.0) * new_r00 * x157)) + (((-16.0) * new_r11 * x154))))) + (IKabs(((((-1.0) * x161)) + x156))));
                                                                        if (IKabs(j0eval[0]) < 0.0000000100000000)
                                                                        {
                                                                            continue; // no branches [j0, j2]
                                                                        }
                                                                        else
                                                                        {
                                                                            IkReal op[4 + 1], zeror[4];
                                                                            int numroots;
                                                                            IkReal j0evalpoly[1];
                                                                            IkReal x162 = new_r22 * new_r22;
                                                                            IkReal x163 = ((16.0) * new_r10);
                                                                            IkReal x164 = (new_r11 * new_r22);
                                                                            IkReal x165 = (x162 * x163);
                                                                            IkReal x166 = ((((8.0) * x164)) + (((-8.0) * new_r00)));
                                                                            op[0] = x166;
                                                                            op[1] = ((((-1.0) * x165)) + x163);
                                                                            op[2] = ((((-32.0) * new_r00 * x162)) + (((16.0) * new_r00)) + (((16.0) * x164)));
                                                                            op[3] = ((((-1.0) * x163)) + x165);
                                                                            op[4] = x166;
                                                                            polyroots4(op, zeror, numroots);
                                                                            IkReal j0array[4], cj0array[4], sj0array[4], tempj0array[1];
                                                                            int numsolutions = 0;
                                                                            for (int ij0 = 0; ij0 < numroots; ++ij0)
                                                                            {
                                                                                IkReal htj0 = zeror[ij0];
                                                                                tempj0array[0] = ((2.0) * (atan(htj0)));
                                                                                for (int kj0 = 0; kj0 < 1; ++kj0)
                                                                                {
                                                                                    j0array[numsolutions] = tempj0array[kj0];
                                                                                    if (j0array[numsolutions] > IKPI)
                                                                                    {
                                                                                        j0array[numsolutions] -= IK2PI;
                                                                                    }
                                                                                    else if (j0array[numsolutions] < -IKPI)
                                                                                    {
                                                                                        j0array[numsolutions] += IK2PI;
                                                                                    }
                                                                                    sj0array[numsolutions] = IKsin(j0array[numsolutions]);
                                                                                    cj0array[numsolutions] = IKcos(j0array[numsolutions]);
                                                                                    numsolutions++;
                                                                                }
                                                                            }
                                                                            bool j0valid[4] = {true, true, true, true};
                                                                            _nj0 = 4;
                                                                            for (int ij0 = 0; ij0 < numsolutions; ++ij0)
                                                                            {
                                                                                if (!j0valid[ij0])
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                j0 = j0array[ij0];
                                                                                cj0 = cj0array[ij0];
                                                                                sj0 = sj0array[ij0];
                                                                                htj0 = IKtan(j0 / 2);

                                                                                IkReal x167 = ((16.0) * new_r01);
                                                                                IkReal x168 = new_r22 * new_r22;
                                                                                IkReal x169 = (new_r00 * new_r22);
                                                                                IkReal x170 = ((8.0) * x169);
                                                                                IkReal x171 = (new_r11 * x168);
                                                                                IkReal x172 = (x167 * x168);
                                                                                IkReal x173 = ((8.0) * x171);
                                                                                j0evalpoly[0] = ((((-1.0) * x170)) + (((htj0 * htj0) * (((((32.0) * new_r11)) + (((-16.0) * x171)) + (((-16.0) * x169)))))) + (((htj0 * htj0 * htj0) * (((((-1.0) * x167)) + x172)))) + x173 + (((htj0 * htj0 * htj0 * htj0) * (((((-1.0) * x170)) + x173)))) + ((htj0 * (((((-1.0) * x172)) + x167)))));
                                                                                if (IKabs(j0evalpoly[0]) > 0.0000001000000000)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij0[0] = ij0;
                                                                                _ij0[1] = -1;
                                                                                for (int iij0 = ij0 + 1; iij0 < numsolutions; ++iij0)
                                                                                {
                                                                                    if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                        j0valid[iij0] = false;
                                                                                        _ij0[1] = iij0;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                {
                                                                                    IkReal j2eval[3];
                                                                                    new_r02 = 0;
                                                                                    new_r12 = 0;
                                                                                    new_r20 = 0;
                                                                                    new_r21 = 0;
                                                                                    IkReal x174 = cj0 * cj0;
                                                                                    IkReal x175 = (cj0 * new_r22);
                                                                                    IkReal x176 = ((-1.0) + (((-1.0) * x174 * (new_r22 * new_r22))) + x174);
                                                                                    j2eval[0] = x176;
                                                                                    j2eval[1] = IKsign(x176);
                                                                                    j2eval[2] = ((IKabs((((new_r01 * sj0)) + (((-1.0) * new_r00 * x175))))) + (IKabs((((new_r01 * x175)) + ((new_r00 * sj0))))));
                                                                                    if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                                                    {
                                                                                        {
                                                                                            IkReal j2eval[1];
                                                                                            new_r02 = 0;
                                                                                            new_r12 = 0;
                                                                                            new_r20 = 0;
                                                                                            new_r21 = 0;
                                                                                            j2eval[0] = new_r22;
                                                                                            if (IKabs(j2eval[0]) < 0.0000010000000000)
                                                                                            {
                                                                                                {
                                                                                                    IkReal j2eval[2];
                                                                                                    new_r02 = 0;
                                                                                                    new_r12 = 0;
                                                                                                    new_r20 = 0;
                                                                                                    new_r21 = 0;
                                                                                                    IkReal x177 = new_r22 * new_r22;
                                                                                                    j2eval[0] = (((cj0 * x177)) + (((-1.0) * cj0)));
                                                                                                    j2eval[1] = ((((-1.0) * sj0)) + ((sj0 * x177)));
                                                                                                    if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal evalcond[1];
                                                                                                            bool bgotonextstatement = true;
                                                                                                            do
                                                                                                            {
                                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                {
                                                                                                                    bgotonextstatement = false;
                                                                                                                    {
                                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                        bool j2valid[1] = {false};
                                                                                                                        _nj2 = 1;
                                                                                                                        if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r00)) + IKsqr(((-1.0) * new_r01)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                            continue;
                                                                                                                        j2array[0] = IKatan2(((-1.0) * new_r00), ((-1.0) * new_r01));
                                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                                        if (j2array[0] > IKPI)
                                                                                                                        {
                                                                                                                            j2array[0] -= IK2PI;
                                                                                                                        }
                                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                                        {
                                                                                                                            j2array[0] += IK2PI;
                                                                                                                        }
                                                                                                                        j2valid[0] = true;
                                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                        {
                                                                                                                            if (!j2valid[ij2])
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            _ij2[0] = ij2;
                                                                                                                            _ij2[1] = -1;
                                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                            {
                                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                {
                                                                                                                                    j2valid[iij2] = false;
                                                                                                                                    _ij2[1] = iij2;
                                                                                                                                    break;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            j2 = j2array[ij2];
                                                                                                                            cj2 = cj2array[ij2];
                                                                                                                            sj2 = sj2array[ij2];
                                                                                                                            {
                                                                                                                                IkReal evalcond[4];
                                                                                                                                IkReal x178 = IKsin(j2);
                                                                                                                                IkReal x179 = IKcos(j2);
                                                                                                                                evalcond[0] = x178;
                                                                                                                                evalcond[1] = ((-1.0) * x179);
                                                                                                                                evalcond[2] = ((((-1.0) * x178)) + (((-1.0) * new_r00)));
                                                                                                                                evalcond[3] = ((((-1.0) * x179)) + (((-1.0) * new_r01)));
                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                            }

                                                                                                                            {
                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                vinfos[0].foffset = j0;
                                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                vinfos[1].foffset = j1;
                                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                vinfos[2].foffset = j2;
                                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                vinfos[3].foffset = j3;
                                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                vinfos[4].foffset = j4;
                                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                vinfos[5].foffset = j5;
                                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                                vinfos[6].foffset = j6;
                                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                                std::vector<int> vfree(0);
                                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            } while (0);
                                                                                                            if (bgotonextstatement)
                                                                                                            {
                                                                                                                bool bgotonextstatement = true;
                                                                                                                do
                                                                                                                {
                                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                    {
                                                                                                                        bgotonextstatement = false;
                                                                                                                        {
                                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                            bool j2valid[1] = {false};
                                                                                                                            _nj2 = 1;
                                                                                                                            if (IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00) + IKsqr(new_r01) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                continue;
                                                                                                                            j2array[0] = IKatan2(new_r00, new_r01);
                                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                                            if (j2array[0] > IKPI)
                                                                                                                            {
                                                                                                                                j2array[0] -= IK2PI;
                                                                                                                            }
                                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                                            {
                                                                                                                                j2array[0] += IK2PI;
                                                                                                                            }
                                                                                                                            j2valid[0] = true;
                                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                            {
                                                                                                                                if (!j2valid[ij2])
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                _ij2[0] = ij2;
                                                                                                                                _ij2[1] = -1;
                                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                {
                                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                    {
                                                                                                                                        j2valid[iij2] = false;
                                                                                                                                        _ij2[1] = iij2;
                                                                                                                                        break;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                j2 = j2array[ij2];
                                                                                                                                cj2 = cj2array[ij2];
                                                                                                                                sj2 = sj2array[ij2];
                                                                                                                                {
                                                                                                                                    IkReal evalcond[4];
                                                                                                                                    IkReal x180 = IKsin(j2);
                                                                                                                                    IkReal x181 = IKcos(j2);
                                                                                                                                    evalcond[0] = x180;
                                                                                                                                    evalcond[1] = ((-1.0) * x181);
                                                                                                                                    evalcond[2] = ((((-1.0) * x180)) + new_r00);
                                                                                                                                    evalcond[3] = ((((-1.0) * x181)) + new_r01);
                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                }

                                                                                                                                {
                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                                    std::vector<int> vfree(0);
                                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } while (0);
                                                                                                                if (bgotonextstatement)
                                                                                                                {
                                                                                                                    bool bgotonextstatement = true;
                                                                                                                    do
                                                                                                                    {
                                                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j0))), 6.28318530717959)));
                                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                        {
                                                                                                                            bgotonextstatement = false;
                                                                                                                            {
                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                _nj2 = 1;
                                                                                                                                if (IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10) + IKsqr(new_r11) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                    continue;
                                                                                                                                j2array[0] = IKatan2(new_r10, new_r11);
                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                {
                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                }
                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                {
                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                }
                                                                                                                                j2valid[0] = true;
                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                {
                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                    _ij2[1] = -1;
                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                    {
                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                        {
                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                            break;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                    {
                                                                                                                                        IkReal evalcond[4];
                                                                                                                                        IkReal x182 = IKsin(j2);
                                                                                                                                        IkReal x183 = IKcos(j2);
                                                                                                                                        evalcond[0] = x182;
                                                                                                                                        evalcond[1] = ((-1.0) * x183);
                                                                                                                                        evalcond[2] = ((((-1.0) * x182)) + new_r10);
                                                                                                                                        evalcond[3] = ((((-1.0) * x183)) + new_r11);
                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                    }

                                                                                                                                    {
                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    } while (0);
                                                                                                                    if (bgotonextstatement)
                                                                                                                    {
                                                                                                                        bool bgotonextstatement = true;
                                                                                                                        do
                                                                                                                        {
                                                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j0)))), 6.28318530717959)));
                                                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                            {
                                                                                                                                bgotonextstatement = false;
                                                                                                                                {
                                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                    bool j2valid[1] = {false};
                                                                                                                                    _nj2 = 1;
                                                                                                                                    if (IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r10)) + IKsqr(((-1.0) * new_r11)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                        continue;
                                                                                                                                    j2array[0] = IKatan2(((-1.0) * new_r10), ((-1.0) * new_r11));
                                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                                    {
                                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                                    }
                                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                                    {
                                                                                                                                        j2array[0] += IK2PI;
                                                                                                                                    }
                                                                                                                                    j2valid[0] = true;
                                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                    {
                                                                                                                                        if (!j2valid[ij2])
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        _ij2[0] = ij2;
                                                                                                                                        _ij2[1] = -1;
                                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                        {
                                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                            {
                                                                                                                                                j2valid[iij2] = false;
                                                                                                                                                _ij2[1] = iij2;
                                                                                                                                                break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        j2 = j2array[ij2];
                                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                                        {
                                                                                                                                            IkReal evalcond[4];
                                                                                                                                            IkReal x184 = IKsin(j2);
                                                                                                                                            IkReal x185 = IKcos(j2);
                                                                                                                                            evalcond[0] = x184;
                                                                                                                                            evalcond[1] = ((-1.0) * x185);
                                                                                                                                            evalcond[2] = ((((-1.0) * x184)) + (((-1.0) * new_r10)));
                                                                                                                                            evalcond[3] = ((((-1.0) * x185)) + (((-1.0) * new_r11)));
                                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                        }

                                                                                                                                        {
                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                                            std::vector<int> vfree(0);
                                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } while (0);
                                                                                                                        if (bgotonextstatement)
                                                                                                                        {
                                                                                                                            bool bgotonextstatement = true;
                                                                                                                            do
                                                                                                                            {
                                                                                                                                CheckValue<IkReal> x186 = IKPowWithIntegerCheck(((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                                                                                if (!x186.valid)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if ((x186.value) < -0.00001)
                                                                                                                                    continue;
                                                                                                                                IkReal gconst0 = ((-1.0) * (IKsqrt(x186.value)));
                                                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs((cj0 + (((-1.0) * gconst0))))) + (IKabs(((-1.0) + (IKsign(sj0)))))), 6.28318530717959)));
                                                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                                {
                                                                                                                                    bgotonextstatement = false;
                                                                                                                                    {
                                                                                                                                        IkReal j2eval[1];
                                                                                                                                        new_r02 = 0;
                                                                                                                                        new_r12 = 0;
                                                                                                                                        new_r20 = 0;
                                                                                                                                        new_r21 = 0;
                                                                                                                                        if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) < -0.00001)
                                                                                                                                            continue;
                                                                                                                                        sj0 = IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))));
                                                                                                                                        cj0 = gconst0;
                                                                                                                                        if ((gconst0) < -1 - IKFAST_SINCOS_THRESH || (gconst0) > 1 + IKFAST_SINCOS_THRESH)
                                                                                                                                            continue;
                                                                                                                                        j0 = IKacos(gconst0);
                                                                                                                                        CheckValue<IkReal> x187 = IKPowWithIntegerCheck(((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                                                                                        if (!x187.valid)
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if ((x187.value) < -0.00001)
                                                                                                                                            continue;
                                                                                                                                        IkReal gconst0 = ((-1.0) * (IKsqrt(x187.value)));
                                                                                                                                        j2eval[0] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                                                                                        if (IKabs(j2eval[0]) < 0.0000010000000000)
                                                                                                                                        {
                                                                                                                                            {
                                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                                _nj2 = 1;
                                                                                                                                                if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) < -0.00001)
                                                                                                                                                    continue;
                                                                                                                                                CheckValue<IkReal> x188 = IKPowWithIntegerCheck(gconst0, -1);
                                                                                                                                                if (!x188.valid)
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if (IKabs(((((-1.0) * new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))))))) + ((gconst0 * new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11 * (x188.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))))))) + ((gconst0 * new_r10)))) + IKsqr((new_r11 * (x188.value))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                    continue;
                                                                                                                                                j2array[0] = IKatan2(((((-1.0) * new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))))))) + ((gconst0 * new_r10))), (new_r11 * (x188.value)));
                                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                                {
                                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                                }
                                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                                {
                                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                                }
                                                                                                                                                j2valid[0] = true;
                                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                {
                                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                                    _ij2[1] = -1;
                                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                    {
                                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                        {
                                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                                            break;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                                    {
                                                                                                                                                        IkReal evalcond[8];
                                                                                                                                                        IkReal x189 = IKcos(j2);
                                                                                                                                                        IkReal x190 = IKsin(j2);
                                                                                                                                                        IkReal x191 = ((1.0) * gconst0);
                                                                                                                                                        if ((((1.0) + (((-1.0) * gconst0 * x191)))) < -0.00001)
                                                                                                                                                            continue;
                                                                                                                                                        IkReal x192 = IKsqrt(((1.0) + (((-1.0) * gconst0 * x191))));
                                                                                                                                                        IkReal x193 = ((1.0) * x192);
                                                                                                                                                        evalcond[0] = x190;
                                                                                                                                                        evalcond[1] = ((-1.0) * x189);
                                                                                                                                                        evalcond[2] = ((((-1.0) * x189 * x191)) + new_r11);
                                                                                                                                                        evalcond[3] = ((((-1.0) * x190 * x191)) + new_r10);
                                                                                                                                                        evalcond[4] = (((x189 * x192)) + new_r01);
                                                                                                                                                        evalcond[5] = (((x190 * x192)) + new_r00);
                                                                                                                                                        evalcond[6] = ((((-1.0) * x190)) + ((gconst0 * new_r10)) + (((-1.0) * new_r00 * x193)));
                                                                                                                                                        evalcond[7] = ((((-1.0) * x189)) + (((-1.0) * new_r01 * x193)) + ((gconst0 * new_r11)));
                                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                    }

                                                                                                                                                    {
                                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            {
                                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                                _nj2 = 1;
                                                                                                                                                CheckValue<IkReal> x194 = IKPowWithIntegerCheck(IKsign(gconst0), -1);
                                                                                                                                                if (!x194.valid)
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                CheckValue<IkReal> x195 = IKatan2WithCheck(IkReal(new_r10), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                                                if (!x195.valid)
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x194.value))) + (x195.value));
                                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                                {
                                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                                }
                                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                                {
                                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                                }
                                                                                                                                                j2valid[0] = true;
                                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                {
                                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                                    _ij2[1] = -1;
                                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                    {
                                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                        {
                                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                                            break;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                                    {
                                                                                                                                                        IkReal evalcond[8];
                                                                                                                                                        IkReal x196 = IKcos(j2);
                                                                                                                                                        IkReal x197 = IKsin(j2);
                                                                                                                                                        IkReal x198 = ((1.0) * gconst0);
                                                                                                                                                        if ((((1.0) + (((-1.0) * gconst0 * x198)))) < -0.00001)
                                                                                                                                                            continue;
                                                                                                                                                        IkReal x199 = IKsqrt(((1.0) + (((-1.0) * gconst0 * x198))));
                                                                                                                                                        IkReal x200 = ((1.0) * x199);
                                                                                                                                                        evalcond[0] = x197;
                                                                                                                                                        evalcond[1] = ((-1.0) * x196);
                                                                                                                                                        evalcond[2] = ((((-1.0) * x196 * x198)) + new_r11);
                                                                                                                                                        evalcond[3] = ((((-1.0) * x197 * x198)) + new_r10);
                                                                                                                                                        evalcond[4] = (((x196 * x199)) + new_r01);
                                                                                                                                                        evalcond[5] = (new_r00 + ((x197 * x199)));
                                                                                                                                                        evalcond[6] = ((((-1.0) * new_r00 * x200)) + (((-1.0) * x197)) + ((gconst0 * new_r10)));
                                                                                                                                                        evalcond[7] = ((((-1.0) * x196)) + ((gconst0 * new_r11)) + (((-1.0) * new_r01 * x200)));
                                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                    }

                                                                                                                                                    {
                                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } while (0);
                                                                                                                            if (bgotonextstatement)
                                                                                                                            {
                                                                                                                                bool bgotonextstatement = true;
                                                                                                                                do
                                                                                                                                {
                                                                                                                                    CheckValue<IkReal> x201 = IKPowWithIntegerCheck(((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                                                                                    if (!x201.valid)
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    if ((x201.value) < -0.00001)
                                                                                                                                        continue;
                                                                                                                                    IkReal gconst0 = ((-1.0) * (IKsqrt(x201.value)));
                                                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.0) + (IKsign(sj0))))) + (IKabs((cj0 + (((-1.0) * gconst0)))))), 6.28318530717959)));
                                                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                                    {
                                                                                                                                        bgotonextstatement = false;
                                                                                                                                        {
                                                                                                                                            IkReal j2eval[1];
                                                                                                                                            new_r02 = 0;
                                                                                                                                            new_r12 = 0;
                                                                                                                                            new_r20 = 0;
                                                                                                                                            new_r21 = 0;
                                                                                                                                            if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) < -0.00001)
                                                                                                                                                continue;
                                                                                                                                            sj0 = ((-1.0) * (IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))))));
                                                                                                                                            cj0 = gconst0;
                                                                                                                                            if ((gconst0) < -1 - IKFAST_SINCOS_THRESH || (gconst0) > 1 + IKFAST_SINCOS_THRESH)
                                                                                                                                                continue;
                                                                                                                                            j0 = ((-1.0) * (IKacos(gconst0)));
                                                                                                                                            CheckValue<IkReal> x202 = IKPowWithIntegerCheck(((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                                                                                            if (!x202.valid)
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                            if ((x202.value) < -0.00001)
                                                                                                                                                continue;
                                                                                                                                            IkReal gconst0 = ((-1.0) * (IKsqrt(x202.value)));
                                                                                                                                            j2eval[0] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                                                                                            if (IKabs(j2eval[0]) < 0.0000010000000000)
                                                                                                                                            {
                                                                                                                                                {
                                                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                    bool j2valid[1] = {false};
                                                                                                                                                    _nj2 = 1;
                                                                                                                                                    if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) < -0.00001)
                                                                                                                                                        continue;
                                                                                                                                                    CheckValue<IkReal> x203 = IKPowWithIntegerCheck(gconst0, -1);
                                                                                                                                                    if (!x203.valid)
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    if (IKabs((((new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))))))) + ((gconst0 * new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11 * (x203.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))))))) + ((gconst0 * new_r10)))) + IKsqr((new_r11 * (x203.value))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                        continue;
                                                                                                                                                    j2array[0] = IKatan2((((new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))))))) + ((gconst0 * new_r10))), (new_r11 * (x203.value)));
                                                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                                                    {
                                                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                                                    }
                                                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                                                    {
                                                                                                                                                        j2array[0] += IK2PI;
                                                                                                                                                    }
                                                                                                                                                    j2valid[0] = true;
                                                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                    {
                                                                                                                                                        if (!j2valid[ij2])
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        _ij2[0] = ij2;
                                                                                                                                                        _ij2[1] = -1;
                                                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                        {
                                                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                            {
                                                                                                                                                                j2valid[iij2] = false;
                                                                                                                                                                _ij2[1] = iij2;
                                                                                                                                                                break;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        j2 = j2array[ij2];
                                                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                                                        {
                                                                                                                                                            IkReal evalcond[8];
                                                                                                                                                            IkReal x204 = IKcos(j2);
                                                                                                                                                            IkReal x205 = IKsin(j2);
                                                                                                                                                            IkReal x206 = ((1.0) * x205);
                                                                                                                                                            IkReal x207 = ((1.0) * x204);
                                                                                                                                                            if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) < -0.00001)
                                                                                                                                                                continue;
                                                                                                                                                            IkReal x208 = IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))));
                                                                                                                                                            evalcond[0] = x205;
                                                                                                                                                            evalcond[1] = ((-1.0) * x204);
                                                                                                                                                            evalcond[2] = ((((-1.0) * gconst0 * x207)) + new_r11);
                                                                                                                                                            evalcond[3] = ((((-1.0) * gconst0 * x206)) + new_r10);
                                                                                                                                                            evalcond[4] = ((((-1.0) * x207 * x208)) + new_r01);
                                                                                                                                                            evalcond[5] = ((((-1.0) * x206 * x208)) + new_r00);
                                                                                                                                                            evalcond[6] = (((new_r00 * x208)) + (((-1.0) * x206)) + ((gconst0 * new_r10)));
                                                                                                                                                            evalcond[7] = (((new_r01 * x208)) + (((-1.0) * x207)) + ((gconst0 * new_r11)));
                                                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                        }

                                                                                                                                                        {
                                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                                                            std::vector<int> vfree(0);
                                                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                {
                                                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                    bool j2valid[1] = {false};
                                                                                                                                                    _nj2 = 1;
                                                                                                                                                    CheckValue<IkReal> x209 = IKPowWithIntegerCheck(IKsign(gconst0), -1);
                                                                                                                                                    if (!x209.valid)
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    CheckValue<IkReal> x210 = IKatan2WithCheck(IkReal(new_r10), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                                                    if (!x210.valid)
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x209.value))) + (x210.value));
                                                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                                                    {
                                                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                                                    }
                                                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                                                    {
                                                                                                                                                        j2array[0] += IK2PI;
                                                                                                                                                    }
                                                                                                                                                    j2valid[0] = true;
                                                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                    {
                                                                                                                                                        if (!j2valid[ij2])
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        _ij2[0] = ij2;
                                                                                                                                                        _ij2[1] = -1;
                                                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                        {
                                                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                            {
                                                                                                                                                                j2valid[iij2] = false;
                                                                                                                                                                _ij2[1] = iij2;
                                                                                                                                                                break;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        j2 = j2array[ij2];
                                                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                                                        {
                                                                                                                                                            IkReal evalcond[8];
                                                                                                                                                            IkReal x211 = IKcos(j2);
                                                                                                                                                            IkReal x212 = IKsin(j2);
                                                                                                                                                            IkReal x213 = ((1.0) * x212);
                                                                                                                                                            IkReal x214 = ((1.0) * x211);
                                                                                                                                                            if ((((1.0) + (((-1.0) * (gconst0 * gconst0))))) < -0.00001)
                                                                                                                                                                continue;
                                                                                                                                                            IkReal x215 = IKsqrt(((1.0) + (((-1.0) * (gconst0 * gconst0)))));
                                                                                                                                                            evalcond[0] = x212;
                                                                                                                                                            evalcond[1] = ((-1.0) * x211);
                                                                                                                                                            evalcond[2] = ((((-1.0) * gconst0 * x214)) + new_r11);
                                                                                                                                                            evalcond[3] = ((((-1.0) * gconst0 * x213)) + new_r10);
                                                                                                                                                            evalcond[4] = ((((-1.0) * x214 * x215)) + new_r01);
                                                                                                                                                            evalcond[5] = ((((-1.0) * x213 * x215)) + new_r00);
                                                                                                                                                            evalcond[6] = (((new_r00 * x215)) + ((gconst0 * new_r10)) + (((-1.0) * x213)));
                                                                                                                                                            evalcond[7] = (((new_r01 * x215)) + ((gconst0 * new_r11)) + (((-1.0) * x214)));
                                                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                        }

                                                                                                                                                        {
                                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                                                            std::vector<int> vfree(0);
                                                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                } while (0);
                                                                                                                                if (bgotonextstatement)
                                                                                                                                {
                                                                                                                                    bool bgotonextstatement = true;
                                                                                                                                    do
                                                                                                                                    {
                                                                                                                                        CheckValue<IkReal> x216 = IKPowWithIntegerCheck(((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                                                                                        if (!x216.valid)
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if ((x216.value) < -0.00001)
                                                                                                                                            continue;
                                                                                                                                        IkReal gconst1 = IKsqrt(x216.value);
                                                                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs((cj0 + (((-1.0) * gconst1))))) + (IKabs(((-1.0) + (IKsign(sj0)))))), 6.28318530717959)));
                                                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                                        {
                                                                                                                                            bgotonextstatement = false;
                                                                                                                                            {
                                                                                                                                                IkReal j2eval[1];
                                                                                                                                                new_r02 = 0;
                                                                                                                                                new_r12 = 0;
                                                                                                                                                new_r20 = 0;
                                                                                                                                                new_r21 = 0;
                                                                                                                                                if ((((1.0) + (((-1.0) * (gconst1 * gconst1))))) < -0.00001)
                                                                                                                                                    continue;
                                                                                                                                                sj0 = IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1)))));
                                                                                                                                                cj0 = gconst1;
                                                                                                                                                if ((gconst1) < -1 - IKFAST_SINCOS_THRESH || (gconst1) > 1 + IKFAST_SINCOS_THRESH)
                                                                                                                                                    continue;
                                                                                                                                                j0 = IKacos(gconst1);
                                                                                                                                                CheckValue<IkReal> x217 = IKPowWithIntegerCheck(((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                                                                                                if (!x217.valid)
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if ((x217.value) < -0.00001)
                                                                                                                                                    continue;
                                                                                                                                                IkReal gconst1 = IKsqrt(x217.value);
                                                                                                                                                j2eval[0] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                                                                                                if (IKabs(j2eval[0]) < 0.0000010000000000)
                                                                                                                                                {
                                                                                                                                                    {
                                                                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                        bool j2valid[1] = {false};
                                                                                                                                                        _nj2 = 1;
                                                                                                                                                        if ((((1.0) + (((-1.0) * (gconst1 * gconst1))))) < -0.00001)
                                                                                                                                                            continue;
                                                                                                                                                        CheckValue<IkReal> x218 = IKPowWithIntegerCheck(gconst1, -1);
                                                                                                                                                        if (!x218.valid)
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if (IKabs((((gconst1 * new_r10)) + (((-1.0) * new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11 * (x218.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst1 * new_r10)) + (((-1.0) * new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1)))))))))) + IKsqr((new_r11 * (x218.value))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                            continue;
                                                                                                                                                        j2array[0] = IKatan2((((gconst1 * new_r10)) + (((-1.0) * new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1))))))))), (new_r11 * (x218.value)));
                                                                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                        if (j2array[0] > IKPI)
                                                                                                                                                        {
                                                                                                                                                            j2array[0] -= IK2PI;
                                                                                                                                                        }
                                                                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                                                                        {
                                                                                                                                                            j2array[0] += IK2PI;
                                                                                                                                                        }
                                                                                                                                                        j2valid[0] = true;
                                                                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                        {
                                                                                                                                                            if (!j2valid[ij2])
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                            _ij2[0] = ij2;
                                                                                                                                                            _ij2[1] = -1;
                                                                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                            {
                                                                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                {
                                                                                                                                                                    j2valid[iij2] = false;
                                                                                                                                                                    _ij2[1] = iij2;
                                                                                                                                                                    break;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            j2 = j2array[ij2];
                                                                                                                                                            cj2 = cj2array[ij2];
                                                                                                                                                            sj2 = sj2array[ij2];
                                                                                                                                                            {
                                                                                                                                                                IkReal evalcond[8];
                                                                                                                                                                IkReal x219 = IKcos(j2);
                                                                                                                                                                IkReal x220 = IKsin(j2);
                                                                                                                                                                IkReal x221 = ((1.0) * gconst1);
                                                                                                                                                                if ((((1.0) + (((-1.0) * gconst1 * x221)))) < -0.00001)
                                                                                                                                                                    continue;
                                                                                                                                                                IkReal x222 = IKsqrt(((1.0) + (((-1.0) * gconst1 * x221))));
                                                                                                                                                                IkReal x223 = ((1.0) * x222);
                                                                                                                                                                evalcond[0] = x220;
                                                                                                                                                                evalcond[1] = ((-1.0) * x219);
                                                                                                                                                                evalcond[2] = ((((-1.0) * x219 * x221)) + new_r11);
                                                                                                                                                                evalcond[3] = ((((-1.0) * x220 * x221)) + new_r10);
                                                                                                                                                                evalcond[4] = (((x219 * x222)) + new_r01);
                                                                                                                                                                evalcond[5] = (((x220 * x222)) + new_r00);
                                                                                                                                                                evalcond[6] = (((gconst1 * new_r10)) + (((-1.0) * new_r00 * x223)) + (((-1.0) * x220)));
                                                                                                                                                                evalcond[7] = ((((-1.0) * new_r01 * x223)) + ((gconst1 * new_r11)) + (((-1.0) * x219)));
                                                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                            }

                                                                                                                                                            {
                                                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                                                vinfos[0].foffset = j0;
                                                                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                                                vinfos[1].foffset = j1;
                                                                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                                                vinfos[2].foffset = j2;
                                                                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                                                vinfos[3].foffset = j3;
                                                                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                                                vinfos[4].foffset = j4;
                                                                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                                                vinfos[5].foffset = j5;
                                                                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                                                                vinfos[6].foffset = j6;
                                                                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                std::vector<int> vfree(0);
                                                                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    {
                                                                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                        bool j2valid[1] = {false};
                                                                                                                                                        _nj2 = 1;
                                                                                                                                                        CheckValue<IkReal> x224 = IKPowWithIntegerCheck(IKsign(gconst1), -1);
                                                                                                                                                        if (!x224.valid)
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        CheckValue<IkReal> x225 = IKatan2WithCheck(IkReal(new_r10), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                                                        if (!x225.valid)
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x224.value))) + (x225.value));
                                                                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                        if (j2array[0] > IKPI)
                                                                                                                                                        {
                                                                                                                                                            j2array[0] -= IK2PI;
                                                                                                                                                        }
                                                                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                                                                        {
                                                                                                                                                            j2array[0] += IK2PI;
                                                                                                                                                        }
                                                                                                                                                        j2valid[0] = true;
                                                                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                        {
                                                                                                                                                            if (!j2valid[ij2])
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                            _ij2[0] = ij2;
                                                                                                                                                            _ij2[1] = -1;
                                                                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                            {
                                                                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                {
                                                                                                                                                                    j2valid[iij2] = false;
                                                                                                                                                                    _ij2[1] = iij2;
                                                                                                                                                                    break;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            j2 = j2array[ij2];
                                                                                                                                                            cj2 = cj2array[ij2];
                                                                                                                                                            sj2 = sj2array[ij2];
                                                                                                                                                            {
                                                                                                                                                                IkReal evalcond[8];
                                                                                                                                                                IkReal x226 = IKcos(j2);
                                                                                                                                                                IkReal x227 = IKsin(j2);
                                                                                                                                                                IkReal x228 = ((1.0) * gconst1);
                                                                                                                                                                if ((((1.0) + (((-1.0) * gconst1 * x228)))) < -0.00001)
                                                                                                                                                                    continue;
                                                                                                                                                                IkReal x229 = IKsqrt(((1.0) + (((-1.0) * gconst1 * x228))));
                                                                                                                                                                IkReal x230 = ((1.0) * x229);
                                                                                                                                                                evalcond[0] = x227;
                                                                                                                                                                evalcond[1] = ((-1.0) * x226);
                                                                                                                                                                evalcond[2] = (new_r11 + (((-1.0) * x226 * x228)));
                                                                                                                                                                evalcond[3] = ((((-1.0) * x227 * x228)) + new_r10);
                                                                                                                                                                evalcond[4] = (((x226 * x229)) + new_r01);
                                                                                                                                                                evalcond[5] = (((x227 * x229)) + new_r00);
                                                                                                                                                                evalcond[6] = (((gconst1 * new_r10)) + (((-1.0) * new_r00 * x230)) + (((-1.0) * x227)));
                                                                                                                                                                evalcond[7] = (((gconst1 * new_r11)) + (((-1.0) * new_r01 * x230)) + (((-1.0) * x226)));
                                                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                            }

                                                                                                                                                            {
                                                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                                                vinfos[0].foffset = j0;
                                                                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                                                vinfos[1].foffset = j1;
                                                                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                                                vinfos[2].foffset = j2;
                                                                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                                                vinfos[3].foffset = j3;
                                                                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                                                vinfos[4].foffset = j4;
                                                                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                                                vinfos[5].foffset = j5;
                                                                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                                                                vinfos[6].foffset = j6;
                                                                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                std::vector<int> vfree(0);
                                                                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    } while (0);
                                                                                                                                    if (bgotonextstatement)
                                                                                                                                    {
                                                                                                                                        bool bgotonextstatement = true;
                                                                                                                                        do
                                                                                                                                        {
                                                                                                                                            CheckValue<IkReal> x231 = IKPowWithIntegerCheck(((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                                                                                            if (!x231.valid)
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                            if ((x231.value) < -0.00001)
                                                                                                                                                continue;
                                                                                                                                            IkReal gconst1 = IKsqrt(x231.value);
                                                                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.0) + (IKsign(sj0))))) + (IKabs((cj0 + (((-1.0) * gconst1)))))), 6.28318530717959)));
                                                                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                                            {
                                                                                                                                                bgotonextstatement = false;
                                                                                                                                                {
                                                                                                                                                    IkReal j2eval[1];
                                                                                                                                                    new_r02 = 0;
                                                                                                                                                    new_r12 = 0;
                                                                                                                                                    new_r20 = 0;
                                                                                                                                                    new_r21 = 0;
                                                                                                                                                    if ((((1.0) + (((-1.0) * (gconst1 * gconst1))))) < -0.00001)
                                                                                                                                                        continue;
                                                                                                                                                    sj0 = ((-1.0) * (IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1)))))));
                                                                                                                                                    cj0 = gconst1;
                                                                                                                                                    if ((gconst1) < -1 - IKFAST_SINCOS_THRESH || (gconst1) > 1 + IKFAST_SINCOS_THRESH)
                                                                                                                                                        continue;
                                                                                                                                                    j0 = ((-1.0) * (IKacos(gconst1)));
                                                                                                                                                    CheckValue<IkReal> x232 = IKPowWithIntegerCheck(((1.0) + (((-1.0) * (new_r22 * new_r22)))), -1);
                                                                                                                                                    if (!x232.valid)
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    if ((x232.value) < -0.00001)
                                                                                                                                                        continue;
                                                                                                                                                    IkReal gconst1 = IKsqrt(x232.value);
                                                                                                                                                    j2eval[0] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                                                                                                    if (IKabs(j2eval[0]) < 0.0000010000000000)
                                                                                                                                                    {
                                                                                                                                                        {
                                                                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                            bool j2valid[1] = {false};
                                                                                                                                                            _nj2 = 1;
                                                                                                                                                            if ((((1.0) + (((-1.0) * (gconst1 * gconst1))))) < -0.00001)
                                                                                                                                                                continue;
                                                                                                                                                            CheckValue<IkReal> x233 = IKPowWithIntegerCheck(gconst1, -1);
                                                                                                                                                            if (!x233.valid)
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                            if (IKabs((((gconst1 * new_r10)) + ((new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11 * (x233.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst1 * new_r10)) + ((new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1)))))))))) + IKsqr((new_r11 * (x233.value))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                                continue;
                                                                                                                                                            j2array[0] = IKatan2((((gconst1 * new_r10)) + ((new_r00 * (IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1))))))))), (new_r11 * (x233.value)));
                                                                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                            if (j2array[0] > IKPI)
                                                                                                                                                            {
                                                                                                                                                                j2array[0] -= IK2PI;
                                                                                                                                                            }
                                                                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                                                                            {
                                                                                                                                                                j2array[0] += IK2PI;
                                                                                                                                                            }
                                                                                                                                                            j2valid[0] = true;
                                                                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                            {
                                                                                                                                                                if (!j2valid[ij2])
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                _ij2[0] = ij2;
                                                                                                                                                                _ij2[1] = -1;
                                                                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                                {
                                                                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                    {
                                                                                                                                                                        j2valid[iij2] = false;
                                                                                                                                                                        _ij2[1] = iij2;
                                                                                                                                                                        break;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                j2 = j2array[ij2];
                                                                                                                                                                cj2 = cj2array[ij2];
                                                                                                                                                                sj2 = sj2array[ij2];
                                                                                                                                                                {
                                                                                                                                                                    IkReal evalcond[8];
                                                                                                                                                                    IkReal x234 = IKcos(j2);
                                                                                                                                                                    IkReal x235 = IKsin(j2);
                                                                                                                                                                    IkReal x236 = ((1.0) * x234);
                                                                                                                                                                    IkReal x237 = ((1.0) * x235);
                                                                                                                                                                    if ((((1.0) + (((-1.0) * (gconst1 * gconst1))))) < -0.00001)
                                                                                                                                                                        continue;
                                                                                                                                                                    IkReal x238 = IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1)))));
                                                                                                                                                                    evalcond[0] = x235;
                                                                                                                                                                    evalcond[1] = ((-1.0) * x234);
                                                                                                                                                                    evalcond[2] = ((((-1.0) * gconst1 * x236)) + new_r11);
                                                                                                                                                                    evalcond[3] = ((((-1.0) * gconst1 * x237)) + new_r10);
                                                                                                                                                                    evalcond[4] = ((((-1.0) * x236 * x238)) + new_r01);
                                                                                                                                                                    evalcond[5] = (new_r00 + (((-1.0) * x237 * x238)));
                                                                                                                                                                    evalcond[6] = (((gconst1 * new_r10)) + ((new_r00 * x238)) + (((-1.0) * x237)));
                                                                                                                                                                    evalcond[7] = (((gconst1 * new_r11)) + ((new_r01 * x238)) + (((-1.0) * x236)));
                                                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                    {
                                                                                                                                                                        continue;
                                                                                                                                                                    }
                                                                                                                                                                }

                                                                                                                                                                {
                                                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                    std::vector<int> vfree(0);
                                                                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                        {
                                                                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                            bool j2valid[1] = {false};
                                                                                                                                                            _nj2 = 1;
                                                                                                                                                            CheckValue<IkReal> x239 = IKPowWithIntegerCheck(IKsign(gconst1), -1);
                                                                                                                                                            if (!x239.valid)
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                            CheckValue<IkReal> x240 = IKatan2WithCheck(IkReal(new_r10), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                                                            if (!x240.valid)
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                            j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x239.value))) + (x240.value));
                                                                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                            if (j2array[0] > IKPI)
                                                                                                                                                            {
                                                                                                                                                                j2array[0] -= IK2PI;
                                                                                                                                                            }
                                                                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                                                                            {
                                                                                                                                                                j2array[0] += IK2PI;
                                                                                                                                                            }
                                                                                                                                                            j2valid[0] = true;
                                                                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                            {
                                                                                                                                                                if (!j2valid[ij2])
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                _ij2[0] = ij2;
                                                                                                                                                                _ij2[1] = -1;
                                                                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                                {
                                                                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                    {
                                                                                                                                                                        j2valid[iij2] = false;
                                                                                                                                                                        _ij2[1] = iij2;
                                                                                                                                                                        break;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                j2 = j2array[ij2];
                                                                                                                                                                cj2 = cj2array[ij2];
                                                                                                                                                                sj2 = sj2array[ij2];
                                                                                                                                                                {
                                                                                                                                                                    IkReal evalcond[8];
                                                                                                                                                                    IkReal x241 = IKcos(j2);
                                                                                                                                                                    IkReal x242 = IKsin(j2);
                                                                                                                                                                    IkReal x243 = ((1.0) * x241);
                                                                                                                                                                    IkReal x244 = ((1.0) * x242);
                                                                                                                                                                    if ((((1.0) + (((-1.0) * (gconst1 * gconst1))))) < -0.00001)
                                                                                                                                                                        continue;
                                                                                                                                                                    IkReal x245 = IKsqrt(((1.0) + (((-1.0) * (gconst1 * gconst1)))));
                                                                                                                                                                    evalcond[0] = x242;
                                                                                                                                                                    evalcond[1] = ((-1.0) * x241);
                                                                                                                                                                    evalcond[2] = ((((-1.0) * gconst1 * x243)) + new_r11);
                                                                                                                                                                    evalcond[3] = ((((-1.0) * gconst1 * x244)) + new_r10);
                                                                                                                                                                    evalcond[4] = ((((-1.0) * x243 * x245)) + new_r01);
                                                                                                                                                                    evalcond[5] = (new_r00 + (((-1.0) * x244 * x245)));
                                                                                                                                                                    evalcond[6] = (((gconst1 * new_r10)) + ((new_r00 * x245)) + (((-1.0) * x244)));
                                                                                                                                                                    evalcond[7] = (((gconst1 * new_r11)) + ((new_r01 * x245)) + (((-1.0) * x243)));
                                                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                    {
                                                                                                                                                                        continue;
                                                                                                                                                                    }
                                                                                                                                                                }

                                                                                                                                                                {
                                                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                    std::vector<int> vfree(0);
                                                                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } while (0);
                                                                                                                                        if (bgotonextstatement)
                                                                                                                                        {
                                                                                                                                            bool bgotonextstatement = true;
                                                                                                                                            do
                                                                                                                                            {
                                                                                                                                                if (1)
                                                                                                                                                {
                                                                                                                                                    bgotonextstatement = false;
                                                                                                                                                    continue; // branch miss [j2]
                                                                                                                                                }
                                                                                                                                            } while (0);
                                                                                                                                            if (bgotonextstatement)
                                                                                                                                            {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                            bool j2valid[1] = {false};
                                                                                                            _nj2 = 1;
                                                                                                            IkReal x246 = new_r22 * new_r22;
                                                                                                            CheckValue<IkReal> x247 = IKPowWithIntegerCheck((((cj0 * x246)) + (((-1.0) * cj0))), -1);
                                                                                                            if (!x247.valid)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            CheckValue<IkReal> x248 = IKPowWithIntegerCheck(((((-1.0) * sj0)) + ((sj0 * x246))), -1);
                                                                                                            if (!x248.valid)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            if (IKabs(((x247.value) * (((((-1.0) * new_r01 * new_r22)) + (((-1.0) * new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x248.value) * ((((new_r10 * new_r22)) + new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x247.value) * (((((-1.0) * new_r01 * new_r22)) + (((-1.0) * new_r10)))))) + IKsqr(((x248.value) * ((((new_r10 * new_r22)) + new_r01)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                continue;
                                                                                                            j2array[0] = IKatan2(((x247.value) * (((((-1.0) * new_r01 * new_r22)) + (((-1.0) * new_r10))))), ((x248.value) * ((((new_r10 * new_r22)) + new_r01))));
                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                            if (j2array[0] > IKPI)
                                                                                                            {
                                                                                                                j2array[0] -= IK2PI;
                                                                                                            }
                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                            {
                                                                                                                j2array[0] += IK2PI;
                                                                                                            }
                                                                                                            j2valid[0] = true;
                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                            {
                                                                                                                if (!j2valid[ij2])
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij2[0] = ij2;
                                                                                                                _ij2[1] = -1;
                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                {
                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                    {
                                                                                                                        j2valid[iij2] = false;
                                                                                                                        _ij2[1] = iij2;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j2 = j2array[ij2];
                                                                                                                cj2 = cj2array[ij2];
                                                                                                                sj2 = sj2array[ij2];
                                                                                                                {
                                                                                                                    IkReal evalcond[10];
                                                                                                                    IkReal x249 = IKsin(j2);
                                                                                                                    IkReal x250 = IKcos(j2);
                                                                                                                    IkReal x251 = (cj0 * new_r22);
                                                                                                                    IkReal x252 = (new_r22 * sj0);
                                                                                                                    IkReal x253 = ((1.0) * sj0);
                                                                                                                    IkReal x254 = ((1.0) * x250);
                                                                                                                    IkReal x255 = ((1.0) * x249);
                                                                                                                    evalcond[0] = (((new_r11 * sj0)) + ((new_r22 * x249)) + ((cj0 * new_r01)));
                                                                                                                    evalcond[1] = (((new_r01 * x251)) + x249 + ((new_r11 * x252)));
                                                                                                                    evalcond[2] = (((cj0 * new_r10)) + (((-1.0) * new_r00 * x253)) + (((-1.0) * x255)));
                                                                                                                    evalcond[3] = ((((-1.0) * new_r01 * x253)) + ((cj0 * new_r11)) + (((-1.0) * x254)));
                                                                                                                    evalcond[4] = (((x249 * x251)) + ((sj0 * x250)) + new_r01);
                                                                                                                    evalcond[5] = (((new_r10 * sj0)) + ((cj0 * new_r00)) + (((-1.0) * new_r22 * x254)));
                                                                                                                    evalcond[6] = ((((-1.0) * x251 * x254)) + new_r00 + ((sj0 * x249)));
                                                                                                                    evalcond[7] = (((x249 * x252)) + (((-1.0) * cj0 * x254)) + new_r11);
                                                                                                                    evalcond[8] = (((new_r00 * x251)) + ((new_r10 * x252)) + (((-1.0) * x254)));
                                                                                                                    evalcond[9] = ((((-1.0) * x252 * x254)) + (((-1.0) * cj0 * x255)) + new_r10);
                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                }

                                                                                                                {
                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                    std::vector<int> vfree(0);
                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                {
                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                    bool j2valid[1] = {false};
                                                                                                    _nj2 = 1;
                                                                                                    IkReal x256 = ((1.0) * new_r01);
                                                                                                    CheckValue<IkReal> x257 = IKPowWithIntegerCheck(new_r22, -1);
                                                                                                    if (!x257.valid)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    if (IKabs(((x257.value) * (((((-1.0) * cj0 * x256)) + (((-1.0) * new_r11 * sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * sj0 * x256)) + ((cj0 * new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x257.value) * (((((-1.0) * cj0 * x256)) + (((-1.0) * new_r11 * sj0)))))) + IKsqr(((((-1.0) * sj0 * x256)) + ((cj0 * new_r11)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                        continue;
                                                                                                    j2array[0] = IKatan2(((x257.value) * (((((-1.0) * cj0 * x256)) + (((-1.0) * new_r11 * sj0))))), ((((-1.0) * sj0 * x256)) + ((cj0 * new_r11))));
                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                    if (j2array[0] > IKPI)
                                                                                                    {
                                                                                                        j2array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                    {
                                                                                                        j2array[0] += IK2PI;
                                                                                                    }
                                                                                                    j2valid[0] = true;
                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                    {
                                                                                                        if (!j2valid[ij2])
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij2[0] = ij2;
                                                                                                        _ij2[1] = -1;
                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                        {
                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                            {
                                                                                                                j2valid[iij2] = false;
                                                                                                                _ij2[1] = iij2;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j2 = j2array[ij2];
                                                                                                        cj2 = cj2array[ij2];
                                                                                                        sj2 = sj2array[ij2];
                                                                                                        {
                                                                                                            IkReal evalcond[10];
                                                                                                            IkReal x258 = IKsin(j2);
                                                                                                            IkReal x259 = IKcos(j2);
                                                                                                            IkReal x260 = (cj0 * new_r22);
                                                                                                            IkReal x261 = (new_r22 * sj0);
                                                                                                            IkReal x262 = ((1.0) * sj0);
                                                                                                            IkReal x263 = ((1.0) * x259);
                                                                                                            IkReal x264 = ((1.0) * x258);
                                                                                                            evalcond[0] = (((new_r11 * sj0)) + ((new_r22 * x258)) + ((cj0 * new_r01)));
                                                                                                            evalcond[1] = (x258 + ((new_r01 * x260)) + ((new_r11 * x261)));
                                                                                                            evalcond[2] = ((((-1.0) * new_r00 * x262)) + (((-1.0) * x264)) + ((cj0 * new_r10)));
                                                                                                            evalcond[3] = ((((-1.0) * new_r01 * x262)) + (((-1.0) * x263)) + ((cj0 * new_r11)));
                                                                                                            evalcond[4] = (((x258 * x260)) + ((sj0 * x259)) + new_r01);
                                                                                                            evalcond[5] = (((new_r10 * sj0)) + (((-1.0) * new_r22 * x263)) + ((cj0 * new_r00)));
                                                                                                            evalcond[6] = (((sj0 * x258)) + new_r00 + (((-1.0) * x260 * x263)));
                                                                                                            evalcond[7] = (((x258 * x261)) + (((-1.0) * cj0 * x263)) + new_r11);
                                                                                                            evalcond[8] = (((new_r00 * x260)) + (((-1.0) * x263)) + ((new_r10 * x261)));
                                                                                                            evalcond[9] = ((((-1.0) * x261 * x263)) + (((-1.0) * cj0 * x264)) + new_r10);
                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j0;
                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j1;
                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j2;
                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                            vinfos[3].jointtype = 1;
                                                                                                            vinfos[3].foffset = j3;
                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                            vinfos[4].jointtype = 1;
                                                                                                            vinfos[4].foffset = j4;
                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                            vinfos[5].jointtype = 1;
                                                                                                            vinfos[5].foffset = j5;
                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                            vinfos[6].jointtype = 1;
                                                                                                            vinfos[6].foffset = j6;
                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                            std::vector<int> vfree(0);
                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        {
                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                            bool j2valid[1] = {false};
                                                                                            _nj2 = 1;
                                                                                            IkReal x265 = cj0 * cj0;
                                                                                            IkReal x266 = (cj0 * new_r22);
                                                                                            CheckValue<IkReal> x267 = IKatan2WithCheck(IkReal((((new_r00 * sj0)) + ((new_r01 * x266)))), IkReal((((new_r01 * sj0)) + (((-1.0) * new_r00 * x266)))), IKFAST_ATAN2_MAGTHRESH);
                                                                                            if (!x267.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            CheckValue<IkReal> x268 = IKPowWithIntegerCheck(IKsign(((-1.0) + x265 + (((-1.0) * x265 * (new_r22 * new_r22))))), -1);
                                                                                            if (!x268.valid)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            j2array[0] = ((-1.5707963267949) + (x267.value) + (((1.5707963267949) * (x268.value))));
                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                            if (j2array[0] > IKPI)
                                                                                            {
                                                                                                j2array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j2array[0] < -IKPI)
                                                                                            {
                                                                                                j2array[0] += IK2PI;
                                                                                            }
                                                                                            j2valid[0] = true;
                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                            {
                                                                                                if (!j2valid[ij2])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij2[0] = ij2;
                                                                                                _ij2[1] = -1;
                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                {
                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j2valid[iij2] = false;
                                                                                                        _ij2[1] = iij2;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j2 = j2array[ij2];
                                                                                                cj2 = cj2array[ij2];
                                                                                                sj2 = sj2array[ij2];
                                                                                                {
                                                                                                    IkReal evalcond[10];
                                                                                                    IkReal x269 = IKsin(j2);
                                                                                                    IkReal x270 = IKcos(j2);
                                                                                                    IkReal x271 = (cj0 * new_r22);
                                                                                                    IkReal x272 = (new_r22 * sj0);
                                                                                                    IkReal x273 = ((1.0) * sj0);
                                                                                                    IkReal x274 = ((1.0) * x270);
                                                                                                    IkReal x275 = ((1.0) * x269);
                                                                                                    evalcond[0] = (((new_r22 * x269)) + ((new_r11 * sj0)) + ((cj0 * new_r01)));
                                                                                                    evalcond[1] = (x269 + ((new_r01 * x271)) + ((new_r11 * x272)));
                                                                                                    evalcond[2] = ((((-1.0) * new_r00 * x273)) + (((-1.0) * x275)) + ((cj0 * new_r10)));
                                                                                                    evalcond[3] = ((((-1.0) * new_r01 * x273)) + (((-1.0) * x274)) + ((cj0 * new_r11)));
                                                                                                    evalcond[4] = (new_r01 + ((x269 * x271)) + ((sj0 * x270)));
                                                                                                    evalcond[5] = (((new_r10 * sj0)) + (((-1.0) * new_r22 * x274)) + ((cj0 * new_r00)));
                                                                                                    evalcond[6] = ((((-1.0) * x271 * x274)) + new_r00 + ((sj0 * x269)));
                                                                                                    evalcond[7] = ((((-1.0) * cj0 * x274)) + new_r11 + ((x269 * x272)));
                                                                                                    evalcond[8] = (((new_r00 * x271)) + (((-1.0) * x274)) + ((new_r10 * x272)));
                                                                                                    evalcond[9] = ((((-1.0) * x272 * x274)) + (((-1.0) * cj0 * x275)) + new_r10);
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                    vinfos[0].jointtype = 1;
                                                                                                    vinfos[0].foffset = j0;
                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                    vinfos[1].jointtype = 1;
                                                                                                    vinfos[1].foffset = j1;
                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                    vinfos[2].jointtype = 1;
                                                                                                    vinfos[2].foffset = j2;
                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                    vinfos[3].jointtype = 1;
                                                                                                    vinfos[3].foffset = j3;
                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                    vinfos[4].jointtype = 1;
                                                                                                    vinfos[4].foffset = j4;
                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                    vinfos[5].jointtype = 1;
                                                                                                    vinfos[5].foffset = j5;
                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                    vinfos[6].jointtype = 1;
                                                                                                    vinfos[6].foffset = j6;
                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                    std::vector<int> vfree(0);
                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            } while (0);
                                                            if (bgotonextstatement)
                                                            {
                                                                bool bgotonextstatement = true;
                                                                do
                                                                {
                                                                    if (1)
                                                                    {
                                                                        bgotonextstatement = false;
                                                                        continue; // branch miss [j0, j2]
                                                                    }
                                                                } while (0);
                                                                if (bgotonextstatement)
                                                                {
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                {
                                                    IkReal j0array[1], cj0array[1], sj0array[1];
                                                    bool j0valid[1] = {false};
                                                    _nj0 = 1;
                                                    CheckValue<IkReal> x277 = IKPowWithIntegerCheck(sj1, -1);
                                                    if (!x277.valid)
                                                    {
                                                        continue;
                                                    }
                                                    IkReal x276 = x277.value;
                                                    CheckValue<IkReal> x278 = IKPowWithIntegerCheck(new_r12, -1);
                                                    if (!x278.valid)
                                                    {
                                                        continue;
                                                    }
                                                    if (IKabs((x276 * (x278.value) * (((1.0) + (((-1.0) * (new_r02 * new_r02))) + (((-1.0) * (cj1 * cj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02 * x276)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x276 * (x278.value) * (((1.0) + (((-1.0) * (new_r02 * new_r02))) + (((-1.0) * (cj1 * cj1))))))) + IKsqr((new_r02 * x276)) - 1) <= IKFAST_SINCOS_THRESH)
                                                        continue;
                                                    j0array[0] = IKatan2((x276 * (x278.value) * (((1.0) + (((-1.0) * (new_r02 * new_r02))) + (((-1.0) * (cj1 * cj1)))))), (new_r02 * x276));
                                                    sj0array[0] = IKsin(j0array[0]);
                                                    cj0array[0] = IKcos(j0array[0]);
                                                    if (j0array[0] > IKPI)
                                                    {
                                                        j0array[0] -= IK2PI;
                                                    }
                                                    else if (j0array[0] < -IKPI)
                                                    {
                                                        j0array[0] += IK2PI;
                                                    }
                                                    j0valid[0] = true;
                                                    for (int ij0 = 0; ij0 < 1; ++ij0)
                                                    {
                                                        if (!j0valid[ij0])
                                                        {
                                                            continue;
                                                        }
                                                        _ij0[0] = ij0;
                                                        _ij0[1] = -1;
                                                        for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
                                                        {
                                                            if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                            {
                                                                j0valid[iij0] = false;
                                                                _ij0[1] = iij0;
                                                                break;
                                                            }
                                                        }
                                                        j0 = j0array[ij0];
                                                        cj0 = cj0array[ij0];
                                                        sj0 = sj0array[ij0];
                                                        {
                                                            IkReal evalcond[8];
                                                            IkReal x279 = IKcos(j0);
                                                            IkReal x280 = IKsin(j0);
                                                            IkReal x281 = ((1.0) * cj1);
                                                            IkReal x282 = ((1.0) * sj1);
                                                            IkReal x283 = (new_r12 * x280);
                                                            IkReal x284 = (new_r02 * x279);
                                                            evalcond[0] = (new_r02 + (((-1.0) * x279 * x282)));
                                                            evalcond[1] = ((((-1.0) * x280 * x282)) + new_r12);
                                                            evalcond[2] = ((((-1.0) * new_r02 * x280)) + ((new_r12 * x279)));
                                                            evalcond[3] = (x284 + x283 + (((-1.0) * x282)));
                                                            evalcond[4] = ((((-1.0) * new_r22 * x282)) + ((cj1 * x284)) + ((cj1 * x283)));
                                                            evalcond[5] = ((((-1.0) * new_r00 * x279 * x282)) + (((-1.0) * new_r10 * x280 * x282)) + (((-1.0) * new_r20 * x281)));
                                                            evalcond[6] = ((((-1.0) * new_r01 * x279 * x282)) + (((-1.0) * new_r11 * x280 * x282)) + (((-1.0) * new_r21 * x281)));
                                                            evalcond[7] = ((1.0) + (((-1.0) * new_r22 * x281)) + (((-1.0) * x282 * x283)) + (((-1.0) * x282 * x284)));
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                            {
                                                                continue;
                                                            }
                                                        }

                                                        {
                                                            IkReal j2eval[3];
                                                            j2eval[0] = sj1;
                                                            j2eval[1] = IKsign(sj1);
                                                            j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                            if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                            {
                                                                {
                                                                    IkReal j2eval[2];
                                                                    j2eval[0] = sj0;
                                                                    j2eval[1] = sj1;
                                                                    if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                                    {
                                                                        {
                                                                            IkReal j2eval[3];
                                                                            j2eval[0] = cj0;
                                                                            j2eval[1] = cj1;
                                                                            j2eval[2] = sj1;
                                                                            if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                                            {
                                                                                {
                                                                                    IkReal evalcond[5];
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                        evalcond[1] = new_r02;
                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                                        {
                                                                                            bgotonextstatement = false;
                                                                                            {
                                                                                                IkReal j2eval[3];
                                                                                                sj0 = 1.0;
                                                                                                cj0 = 0;
                                                                                                j0 = 1.5707963267949;
                                                                                                j2eval[0] = sj1;
                                                                                                j2eval[1] = IKsign(sj1);
                                                                                                j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                                                if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                                                                {
                                                                                                    {
                                                                                                        IkReal j2eval[3];
                                                                                                        sj0 = 1.0;
                                                                                                        cj0 = 0;
                                                                                                        j0 = 1.5707963267949;
                                                                                                        j2eval[0] = cj1;
                                                                                                        j2eval[1] = IKsign(cj1);
                                                                                                        j2eval[2] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                                                        if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                                                                        {
                                                                                                            {
                                                                                                                IkReal j2eval[1];
                                                                                                                sj0 = 1.0;
                                                                                                                cj0 = 0;
                                                                                                                j0 = 1.5707963267949;
                                                                                                                j2eval[0] = sj1;
                                                                                                                if (IKabs(j2eval[0]) < 0.0000010000000000)
                                                                                                                {
                                                                                                                    {
                                                                                                                        IkReal evalcond[4];
                                                                                                                        bool bgotonextstatement = true;
                                                                                                                        do
                                                                                                                        {
                                                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                                                                                                            evalcond[1] = new_r20;
                                                                                                                            evalcond[2] = new_r12;
                                                                                                                            evalcond[3] = new_r21;
                                                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                            {
                                                                                                                                bgotonextstatement = false;
                                                                                                                                {
                                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                    bool j2valid[1] = {false};
                                                                                                                                    _nj2 = 1;
                                                                                                                                    if (IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r11)) + IKsqr(new_r10) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                        continue;
                                                                                                                                    j2array[0] = IKatan2(((-1.0) * new_r11), new_r10);
                                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                                    {
                                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                                    }
                                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                                    {
                                                                                                                                        j2array[0] += IK2PI;
                                                                                                                                    }
                                                                                                                                    j2valid[0] = true;
                                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                    {
                                                                                                                                        if (!j2valid[ij2])
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        _ij2[0] = ij2;
                                                                                                                                        _ij2[1] = -1;
                                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                        {
                                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                            {
                                                                                                                                                j2valid[iij2] = false;
                                                                                                                                                _ij2[1] = iij2;
                                                                                                                                                break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        j2 = j2array[ij2];
                                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                                        {
                                                                                                                                            IkReal evalcond[4];
                                                                                                                                            IkReal x285 = IKsin(j2);
                                                                                                                                            IkReal x286 = ((1.0) * (IKcos(j2)));
                                                                                                                                            evalcond[0] = (x285 + new_r11);
                                                                                                                                            evalcond[1] = ((((-1.0) * x286)) + new_r10);
                                                                                                                                            evalcond[2] = ((((-1.0) * x285)) + (((-1.0) * new_r00)));
                                                                                                                                            evalcond[3] = ((((-1.0) * x286)) + (((-1.0) * new_r01)));
                                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                        }

                                                                                                                                        {
                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                                            std::vector<int> vfree(0);
                                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } while (0);
                                                                                                                        if (bgotonextstatement)
                                                                                                                        {
                                                                                                                            bool bgotonextstatement = true;
                                                                                                                            do
                                                                                                                            {
                                                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))), 6.28318530717959)));
                                                                                                                                evalcond[1] = new_r20;
                                                                                                                                evalcond[2] = new_r12;
                                                                                                                                evalcond[3] = new_r21;
                                                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                {
                                                                                                                                    bgotonextstatement = false;
                                                                                                                                    {
                                                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                        bool j2valid[1] = {false};
                                                                                                                                        _nj2 = 1;
                                                                                                                                        if (IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11) + IKsqr(((-1.0) * new_r10)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                            continue;
                                                                                                                                        j2array[0] = IKatan2(new_r11, ((-1.0) * new_r10));
                                                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                                                        if (j2array[0] > IKPI)
                                                                                                                                        {
                                                                                                                                            j2array[0] -= IK2PI;
                                                                                                                                        }
                                                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                                                        {
                                                                                                                                            j2array[0] += IK2PI;
                                                                                                                                        }
                                                                                                                                        j2valid[0] = true;
                                                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                        {
                                                                                                                                            if (!j2valid[ij2])
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                            _ij2[0] = ij2;
                                                                                                                                            _ij2[1] = -1;
                                                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                            {
                                                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                {
                                                                                                                                                    j2valid[iij2] = false;
                                                                                                                                                    _ij2[1] = iij2;
                                                                                                                                                    break;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            j2 = j2array[ij2];
                                                                                                                                            cj2 = cj2array[ij2];
                                                                                                                                            sj2 = sj2array[ij2];
                                                                                                                                            {
                                                                                                                                                IkReal evalcond[4];
                                                                                                                                                IkReal x287 = IKcos(j2);
                                                                                                                                                IkReal x288 = ((1.0) * (IKsin(j2)));
                                                                                                                                                evalcond[0] = (x287 + new_r10);
                                                                                                                                                evalcond[1] = ((((-1.0) * x288)) + new_r11);
                                                                                                                                                evalcond[2] = ((((-1.0) * x288)) + (((-1.0) * new_r00)));
                                                                                                                                                evalcond[3] = ((((-1.0) * x287)) + (((-1.0) * new_r01)));
                                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                            }

                                                                                                                                            {
                                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                                vinfos[0].foffset = j0;
                                                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                                vinfos[1].foffset = j1;
                                                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                                vinfos[2].foffset = j2;
                                                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                                vinfos[3].foffset = j3;
                                                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                                vinfos[4].foffset = j4;
                                                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                                vinfos[5].foffset = j5;
                                                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                                                vinfos[6].foffset = j6;
                                                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                                                std::vector<int> vfree(0);
                                                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            } while (0);
                                                                                                                            if (bgotonextstatement)
                                                                                                                            {
                                                                                                                                bool bgotonextstatement = true;
                                                                                                                                do
                                                                                                                                {
                                                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                                                                    evalcond[1] = new_r22;
                                                                                                                                    evalcond[2] = new_r11;
                                                                                                                                    evalcond[3] = new_r10;
                                                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                    {
                                                                                                                                        bgotonextstatement = false;
                                                                                                                                        {
                                                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                            bool j2valid[1] = {false};
                                                                                                                                            _nj2 = 1;
                                                                                                                                            if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21) + IKsqr(((-1.0) * new_r20)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                continue;
                                                                                                                                            j2array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                                                            if (j2array[0] > IKPI)
                                                                                                                                            {
                                                                                                                                                j2array[0] -= IK2PI;
                                                                                                                                            }
                                                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                                                            {
                                                                                                                                                j2array[0] += IK2PI;
                                                                                                                                            }
                                                                                                                                            j2valid[0] = true;
                                                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                            {
                                                                                                                                                if (!j2valid[ij2])
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                _ij2[0] = ij2;
                                                                                                                                                _ij2[1] = -1;
                                                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                {
                                                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                    {
                                                                                                                                                        j2valid[iij2] = false;
                                                                                                                                                        _ij2[1] = iij2;
                                                                                                                                                        break;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                j2 = j2array[ij2];
                                                                                                                                                cj2 = cj2array[ij2];
                                                                                                                                                sj2 = sj2array[ij2];
                                                                                                                                                {
                                                                                                                                                    IkReal evalcond[4];
                                                                                                                                                    IkReal x289 = IKcos(j2);
                                                                                                                                                    IkReal x290 = ((1.0) * (IKsin(j2)));
                                                                                                                                                    evalcond[0] = (x289 + new_r20);
                                                                                                                                                    evalcond[1] = ((((-1.0) * x290)) + new_r21);
                                                                                                                                                    evalcond[2] = ((((-1.0) * x290)) + (((-1.0) * new_r00)));
                                                                                                                                                    evalcond[3] = ((((-1.0) * x289)) + (((-1.0) * new_r01)));
                                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                }

                                                                                                                                                {
                                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                                                    std::vector<int> vfree(0);
                                                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                } while (0);
                                                                                                                                if (bgotonextstatement)
                                                                                                                                {
                                                                                                                                    bool bgotonextstatement = true;
                                                                                                                                    do
                                                                                                                                    {
                                                                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                                                                        evalcond[1] = new_r22;
                                                                                                                                        evalcond[2] = new_r11;
                                                                                                                                        evalcond[3] = new_r10;
                                                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                        {
                                                                                                                                            bgotonextstatement = false;
                                                                                                                                            {
                                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                                _nj2 = 1;
                                                                                                                                                if (IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r21)) + IKsqr(new_r20) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                    continue;
                                                                                                                                                j2array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                                {
                                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                                }
                                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                                {
                                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                                }
                                                                                                                                                j2valid[0] = true;
                                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                {
                                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                                    _ij2[1] = -1;
                                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                    {
                                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                        {
                                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                                            break;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                                    {
                                                                                                                                                        IkReal evalcond[4];
                                                                                                                                                        IkReal x291 = IKsin(j2);
                                                                                                                                                        IkReal x292 = ((1.0) * (IKcos(j2)));
                                                                                                                                                        evalcond[0] = (x291 + new_r21);
                                                                                                                                                        evalcond[1] = ((((-1.0) * x292)) + new_r20);
                                                                                                                                                        evalcond[2] = ((((-1.0) * x291)) + (((-1.0) * new_r00)));
                                                                                                                                                        evalcond[3] = ((((-1.0) * x292)) + (((-1.0) * new_r01)));
                                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                    }

                                                                                                                                                    {
                                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    } while (0);
                                                                                                                                    if (bgotonextstatement)
                                                                                                                                    {
                                                                                                                                        bool bgotonextstatement = true;
                                                                                                                                        do
                                                                                                                                        {
                                                                                                                                            evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                                            {
                                                                                                                                                bgotonextstatement = false;
                                                                                                                                                {
                                                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                    bool j2valid[1] = {false};
                                                                                                                                                    _nj2 = 1;
                                                                                                                                                    if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r00)) + IKsqr(((-1.0) * new_r01)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                        continue;
                                                                                                                                                    j2array[0] = IKatan2(((-1.0) * new_r00), ((-1.0) * new_r01));
                                                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                                                    {
                                                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                                                    }
                                                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                                                    {
                                                                                                                                                        j2array[0] += IK2PI;
                                                                                                                                                    }
                                                                                                                                                    j2valid[0] = true;
                                                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                    {
                                                                                                                                                        if (!j2valid[ij2])
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        _ij2[0] = ij2;
                                                                                                                                                        _ij2[1] = -1;
                                                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                        {
                                                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                            {
                                                                                                                                                                j2valid[iij2] = false;
                                                                                                                                                                _ij2[1] = iij2;
                                                                                                                                                                break;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        j2 = j2array[ij2];
                                                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                                                        {
                                                                                                                                                            IkReal evalcond[6];
                                                                                                                                                            IkReal x293 = IKsin(j2);
                                                                                                                                                            IkReal x294 = IKcos(j2);
                                                                                                                                                            IkReal x295 = ((-1.0) * x294);
                                                                                                                                                            evalcond[0] = x293;
                                                                                                                                                            evalcond[1] = (new_r22 * x293);
                                                                                                                                                            evalcond[2] = x295;
                                                                                                                                                            evalcond[3] = (new_r22 * x295);
                                                                                                                                                            evalcond[4] = ((((-1.0) * x293)) + (((-1.0) * new_r00)));
                                                                                                                                                            evalcond[5] = ((((-1.0) * x294)) + (((-1.0) * new_r01)));
                                                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                        }

                                                                                                                                                        {
                                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                                                            std::vector<int> vfree(0);
                                                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } while (0);
                                                                                                                                        if (bgotonextstatement)
                                                                                                                                        {
                                                                                                                                            bool bgotonextstatement = true;
                                                                                                                                            do
                                                                                                                                            {
                                                                                                                                                if (1)
                                                                                                                                                {
                                                                                                                                                    bgotonextstatement = false;
                                                                                                                                                    continue; // branch miss [j2]
                                                                                                                                                }
                                                                                                                                            } while (0);
                                                                                                                                            if (bgotonextstatement)
                                                                                                                                            {
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    {
                                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                        bool j2valid[1] = {false};
                                                                                                                        _nj2 = 1;
                                                                                                                        CheckValue<IkReal> x296 = IKPowWithIntegerCheck(sj1, -1);
                                                                                                                        if (!x296.valid)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20 * (x296.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r00)) + IKsqr(((-1.0) * new_r20 * (x296.value))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                            continue;
                                                                                                                        j2array[0] = IKatan2(((-1.0) * new_r00), ((-1.0) * new_r20 * (x296.value)));
                                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                                        if (j2array[0] > IKPI)
                                                                                                                        {
                                                                                                                            j2array[0] -= IK2PI;
                                                                                                                        }
                                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                                        {
                                                                                                                            j2array[0] += IK2PI;
                                                                                                                        }
                                                                                                                        j2valid[0] = true;
                                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                        {
                                                                                                                            if (!j2valid[ij2])
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            _ij2[0] = ij2;
                                                                                                                            _ij2[1] = -1;
                                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                            {
                                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                {
                                                                                                                                    j2valid[iij2] = false;
                                                                                                                                    _ij2[1] = iij2;
                                                                                                                                    break;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            j2 = j2array[ij2];
                                                                                                                            cj2 = cj2array[ij2];
                                                                                                                            sj2 = sj2array[ij2];
                                                                                                                            {
                                                                                                                                IkReal evalcond[8];
                                                                                                                                IkReal x297 = IKsin(j2);
                                                                                                                                IkReal x298 = IKcos(j2);
                                                                                                                                IkReal x299 = ((1.0) * sj1);
                                                                                                                                IkReal x300 = ((1.0) * x298);
                                                                                                                                evalcond[0] = (((sj1 * x298)) + new_r20);
                                                                                                                                evalcond[1] = (((cj1 * x297)) + new_r11);
                                                                                                                                evalcond[2] = ((((-1.0) * x297 * x299)) + new_r21);
                                                                                                                                evalcond[3] = ((((-1.0) * cj1 * x300)) + new_r10);
                                                                                                                                evalcond[4] = ((((-1.0) * x297)) + (((-1.0) * new_r00)));
                                                                                                                                evalcond[5] = ((((-1.0) * new_r01)) + (((-1.0) * x300)));
                                                                                                                                evalcond[6] = ((((-1.0) * new_r21 * x299)) + ((cj1 * new_r11)) + x297);
                                                                                                                                evalcond[7] = ((((-1.0) * new_r20 * x299)) + ((cj1 * new_r10)) + (((-1.0) * x300)));
                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                            }

                                                                                                                            {
                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                vinfos[0].foffset = j0;
                                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                vinfos[1].foffset = j1;
                                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                vinfos[2].foffset = j2;
                                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                vinfos[3].foffset = j3;
                                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                vinfos[4].foffset = j4;
                                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                vinfos[5].foffset = j5;
                                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                                vinfos[6].foffset = j6;
                                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                                std::vector<int> vfree(0);
                                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            {
                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                bool j2valid[1] = {false};
                                                                                                                _nj2 = 1;
                                                                                                                CheckValue<IkReal> x301 = IKPowWithIntegerCheck(IKsign(cj1), -1);
                                                                                                                if (!x301.valid)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                CheckValue<IkReal> x302 = IKatan2WithCheck(IkReal(((-1.0) * new_r11)), IkReal(new_r10), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                if (!x302.valid)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x301.value))) + (x302.value));
                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                if (j2array[0] > IKPI)
                                                                                                                {
                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                }
                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                {
                                                                                                                    j2array[0] += IK2PI;
                                                                                                                }
                                                                                                                j2valid[0] = true;
                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                {
                                                                                                                    if (!j2valid[ij2])
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    _ij2[0] = ij2;
                                                                                                                    _ij2[1] = -1;
                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                    {
                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                        {
                                                                                                                            j2valid[iij2] = false;
                                                                                                                            _ij2[1] = iij2;
                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    j2 = j2array[ij2];
                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                    {
                                                                                                                        IkReal evalcond[8];
                                                                                                                        IkReal x303 = IKsin(j2);
                                                                                                                        IkReal x304 = IKcos(j2);
                                                                                                                        IkReal x305 = ((1.0) * sj1);
                                                                                                                        IkReal x306 = ((1.0) * x304);
                                                                                                                        evalcond[0] = (new_r20 + ((sj1 * x304)));
                                                                                                                        evalcond[1] = (((cj1 * x303)) + new_r11);
                                                                                                                        evalcond[2] = ((((-1.0) * x303 * x305)) + new_r21);
                                                                                                                        evalcond[3] = ((((-1.0) * cj1 * x306)) + new_r10);
                                                                                                                        evalcond[4] = ((((-1.0) * x303)) + (((-1.0) * new_r00)));
                                                                                                                        evalcond[5] = ((((-1.0) * new_r01)) + (((-1.0) * x306)));
                                                                                                                        evalcond[6] = ((((-1.0) * new_r21 * x305)) + ((cj1 * new_r11)) + x303);
                                                                                                                        evalcond[7] = (((cj1 * new_r10)) + (((-1.0) * new_r20 * x305)) + (((-1.0) * x306)));
                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }

                                                                                                                    {
                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                        std::vector<int> vfree(0);
                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    {
                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                        bool j2valid[1] = {false};
                                                                                                        _nj2 = 1;
                                                                                                        CheckValue<IkReal> x307 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                                                                                        if (!x307.valid)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        CheckValue<IkReal> x308 = IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                                                                                                        if (!x308.valid)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x307.value))) + (x308.value));
                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                        if (j2array[0] > IKPI)
                                                                                                        {
                                                                                                            j2array[0] -= IK2PI;
                                                                                                        }
                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                        {
                                                                                                            j2array[0] += IK2PI;
                                                                                                        }
                                                                                                        j2valid[0] = true;
                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                        {
                                                                                                            if (!j2valid[ij2])
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij2[0] = ij2;
                                                                                                            _ij2[1] = -1;
                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                            {
                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                {
                                                                                                                    j2valid[iij2] = false;
                                                                                                                    _ij2[1] = iij2;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j2 = j2array[ij2];
                                                                                                            cj2 = cj2array[ij2];
                                                                                                            sj2 = sj2array[ij2];
                                                                                                            {
                                                                                                                IkReal evalcond[8];
                                                                                                                IkReal x309 = IKsin(j2);
                                                                                                                IkReal x310 = IKcos(j2);
                                                                                                                IkReal x311 = ((1.0) * sj1);
                                                                                                                IkReal x312 = ((1.0) * x310);
                                                                                                                evalcond[0] = (((sj1 * x310)) + new_r20);
                                                                                                                evalcond[1] = (((cj1 * x309)) + new_r11);
                                                                                                                evalcond[2] = (new_r21 + (((-1.0) * x309 * x311)));
                                                                                                                evalcond[3] = ((((-1.0) * cj1 * x312)) + new_r10);
                                                                                                                evalcond[4] = ((((-1.0) * x309)) + (((-1.0) * new_r00)));
                                                                                                                evalcond[5] = ((((-1.0) * x312)) + (((-1.0) * new_r01)));
                                                                                                                evalcond[6] = ((((-1.0) * new_r21 * x311)) + ((cj1 * new_r11)) + x309);
                                                                                                                evalcond[7] = ((((-1.0) * new_r20 * x311)) + ((cj1 * new_r10)) + (((-1.0) * x312)));
                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                            }

                                                                                                            {
                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                vinfos[0].foffset = j0;
                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                vinfos[1].foffset = j1;
                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                vinfos[2].foffset = j2;
                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                vinfos[3].foffset = j3;
                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                vinfos[4].foffset = j4;
                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                vinfos[5].foffset = j5;
                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                vinfos[6].foffset = j6;
                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                std::vector<int> vfree(0);
                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } while (0);
                                                                                    if (bgotonextstatement)
                                                                                    {
                                                                                        bool bgotonextstatement = true;
                                                                                        do
                                                                                        {
                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j0)))), 6.28318530717959)));
                                                                                            evalcond[1] = new_r02;
                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                                            {
                                                                                                bgotonextstatement = false;
                                                                                                {
                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                    bool j2valid[1] = {false};
                                                                                                    _nj2 = 1;
                                                                                                    if (IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00) + IKsqr(new_r01) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                        continue;
                                                                                                    j2array[0] = IKatan2(new_r00, new_r01);
                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                    if (j2array[0] > IKPI)
                                                                                                    {
                                                                                                        j2array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                    {
                                                                                                        j2array[0] += IK2PI;
                                                                                                    }
                                                                                                    j2valid[0] = true;
                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                    {
                                                                                                        if (!j2valid[ij2])
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij2[0] = ij2;
                                                                                                        _ij2[1] = -1;
                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                        {
                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                            {
                                                                                                                j2valid[iij2] = false;
                                                                                                                _ij2[1] = iij2;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j2 = j2array[ij2];
                                                                                                        cj2 = cj2array[ij2];
                                                                                                        sj2 = sj2array[ij2];
                                                                                                        {
                                                                                                            IkReal evalcond[8];
                                                                                                            IkReal x313 = IKcos(j2);
                                                                                                            IkReal x314 = IKsin(j2);
                                                                                                            IkReal x315 = ((1.0) * sj1);
                                                                                                            IkReal x316 = ((1.0) * new_r11);
                                                                                                            IkReal x317 = ((1.0) * new_r10);
                                                                                                            IkReal x318 = ((1.0) * x313);
                                                                                                            evalcond[0] = (((sj1 * x313)) + new_r20);
                                                                                                            evalcond[1] = ((((-1.0) * x314)) + new_r00);
                                                                                                            evalcond[2] = ((((-1.0) * x318)) + new_r01);
                                                                                                            evalcond[3] = ((((-1.0) * x314 * x315)) + new_r21);
                                                                                                            evalcond[4] = (((cj1 * x314)) + (((-1.0) * x316)));
                                                                                                            evalcond[5] = ((((-1.0) * x317)) + (((-1.0) * cj1 * x318)));
                                                                                                            evalcond[6] = ((((-1.0) * new_r21 * x315)) + x314 + (((-1.0) * cj1 * x316)));
                                                                                                            evalcond[7] = ((((-1.0) * new_r20 * x315)) + (((-1.0) * x318)) + (((-1.0) * cj1 * x317)));
                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j0;
                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j1;
                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j2;
                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                            vinfos[3].jointtype = 1;
                                                                                                            vinfos[3].foffset = j3;
                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                            vinfos[4].jointtype = 1;
                                                                                                            vinfos[4].foffset = j4;
                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                            vinfos[5].jointtype = 1;
                                                                                                            vinfos[5].foffset = j5;
                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                            vinfos[6].jointtype = 1;
                                                                                                            vinfos[6].foffset = j6;
                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                            std::vector<int> vfree(0);
                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } while (0);
                                                                                        if (bgotonextstatement)
                                                                                        {
                                                                                            bool bgotonextstatement = true;
                                                                                            do
                                                                                            {
                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                                evalcond[1] = new_r22;
                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                                                {
                                                                                                    bgotonextstatement = false;
                                                                                                    {
                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                        bool j2valid[1] = {false};
                                                                                                        _nj2 = 1;
                                                                                                        if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21) + IKsqr(((-1.0) * new_r20)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                            continue;
                                                                                                        j2array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                        if (j2array[0] > IKPI)
                                                                                                        {
                                                                                                            j2array[0] -= IK2PI;
                                                                                                        }
                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                        {
                                                                                                            j2array[0] += IK2PI;
                                                                                                        }
                                                                                                        j2valid[0] = true;
                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                        {
                                                                                                            if (!j2valid[ij2])
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij2[0] = ij2;
                                                                                                            _ij2[1] = -1;
                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                            {
                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                {
                                                                                                                    j2valid[iij2] = false;
                                                                                                                    _ij2[1] = iij2;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j2 = j2array[ij2];
                                                                                                            cj2 = cj2array[ij2];
                                                                                                            sj2 = sj2array[ij2];
                                                                                                            {
                                                                                                                IkReal evalcond[8];
                                                                                                                IkReal x319 = IKcos(j2);
                                                                                                                IkReal x320 = IKsin(j2);
                                                                                                                IkReal x321 = ((1.0) * sj0);
                                                                                                                IkReal x322 = ((1.0) * x320);
                                                                                                                IkReal x323 = ((1.0) * x319);
                                                                                                                evalcond[0] = (x319 + new_r20);
                                                                                                                evalcond[1] = ((((-1.0) * x322)) + new_r21);
                                                                                                                evalcond[2] = (((sj0 * x319)) + new_r01);
                                                                                                                evalcond[3] = (((sj0 * x320)) + new_r00);
                                                                                                                evalcond[4] = ((((-1.0) * cj0 * x323)) + new_r11);
                                                                                                                evalcond[5] = ((((-1.0) * new_r02 * x322)) + new_r10);
                                                                                                                evalcond[6] = ((((-1.0) * x322)) + (((-1.0) * new_r00 * x321)) + ((cj0 * new_r10)));
                                                                                                                evalcond[7] = ((((-1.0) * x323)) + (((-1.0) * new_r01 * x321)) + ((cj0 * new_r11)));
                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                            }

                                                                                                            {
                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                vinfos[0].foffset = j0;
                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                vinfos[1].foffset = j1;
                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                vinfos[2].foffset = j2;
                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                vinfos[3].foffset = j3;
                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                vinfos[4].foffset = j4;
                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                vinfos[5].foffset = j5;
                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                vinfos[6].foffset = j6;
                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                std::vector<int> vfree(0);
                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } while (0);
                                                                                            if (bgotonextstatement)
                                                                                            {
                                                                                                bool bgotonextstatement = true;
                                                                                                do
                                                                                                {
                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                                    evalcond[1] = new_r22;
                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                                                    {
                                                                                                        bgotonextstatement = false;
                                                                                                        {
                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                            bool j2valid[1] = {false};
                                                                                                            _nj2 = 1;
                                                                                                            if (IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r21)) + IKsqr(new_r20) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                continue;
                                                                                                            j2array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                            if (j2array[0] > IKPI)
                                                                                                            {
                                                                                                                j2array[0] -= IK2PI;
                                                                                                            }
                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                            {
                                                                                                                j2array[0] += IK2PI;
                                                                                                            }
                                                                                                            j2valid[0] = true;
                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                            {
                                                                                                                if (!j2valid[ij2])
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij2[0] = ij2;
                                                                                                                _ij2[1] = -1;
                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                {
                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                    {
                                                                                                                        j2valid[iij2] = false;
                                                                                                                        _ij2[1] = iij2;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j2 = j2array[ij2];
                                                                                                                cj2 = cj2array[ij2];
                                                                                                                sj2 = sj2array[ij2];
                                                                                                                {
                                                                                                                    IkReal evalcond[8];
                                                                                                                    IkReal x324 = IKcos(j2);
                                                                                                                    IkReal x325 = IKsin(j2);
                                                                                                                    IkReal x326 = ((1.0) * sj0);
                                                                                                                    IkReal x327 = ((1.0) * x324);
                                                                                                                    evalcond[0] = (x325 + new_r21);
                                                                                                                    evalcond[1] = ((((-1.0) * x327)) + new_r20);
                                                                                                                    evalcond[2] = (((sj0 * x324)) + new_r01);
                                                                                                                    evalcond[3] = (((sj0 * x325)) + new_r00);
                                                                                                                    evalcond[4] = (new_r10 + ((new_r02 * x325)));
                                                                                                                    evalcond[5] = ((((-1.0) * cj0 * x327)) + new_r11);
                                                                                                                    evalcond[6] = ((((-1.0) * x325)) + (((-1.0) * new_r00 * x326)) + ((cj0 * new_r10)));
                                                                                                                    evalcond[7] = ((((-1.0) * x327)) + (((-1.0) * new_r01 * x326)) + ((cj0 * new_r11)));
                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                }

                                                                                                                {
                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                    std::vector<int> vfree(0);
                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } while (0);
                                                                                                if (bgotonextstatement)
                                                                                                {
                                                                                                    bool bgotonextstatement = true;
                                                                                                    do
                                                                                                    {
                                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                                                                                        evalcond[1] = new_r20;
                                                                                                        evalcond[2] = new_r02;
                                                                                                        evalcond[3] = new_r12;
                                                                                                        evalcond[4] = new_r21;
                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 && IKabs(evalcond[4]) < 0.0000050000000000)
                                                                                                        {
                                                                                                            bgotonextstatement = false;
                                                                                                            {
                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                bool j2valid[1] = {false};
                                                                                                                _nj2 = 1;
                                                                                                                IkReal x328 = ((1.0) * new_r01);
                                                                                                                if (IKabs(((((-1.0) * cj0 * x328)) + (((-1.0) * new_r00 * sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * sj0 * x328)) + ((cj0 * new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * cj0 * x328)) + (((-1.0) * new_r00 * sj0)))) + IKsqr(((((-1.0) * sj0 * x328)) + ((cj0 * new_r00)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                    continue;
                                                                                                                j2array[0] = IKatan2(((((-1.0) * cj0 * x328)) + (((-1.0) * new_r00 * sj0))), ((((-1.0) * sj0 * x328)) + ((cj0 * new_r00))));
                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                if (j2array[0] > IKPI)
                                                                                                                {
                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                }
                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                {
                                                                                                                    j2array[0] += IK2PI;
                                                                                                                }
                                                                                                                j2valid[0] = true;
                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                {
                                                                                                                    if (!j2valid[ij2])
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    _ij2[0] = ij2;
                                                                                                                    _ij2[1] = -1;
                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                    {
                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                        {
                                                                                                                            j2valid[iij2] = false;
                                                                                                                            _ij2[1] = iij2;
                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    j2 = j2array[ij2];
                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                    {
                                                                                                                        IkReal evalcond[8];
                                                                                                                        IkReal x329 = IKsin(j2);
                                                                                                                        IkReal x330 = IKcos(j2);
                                                                                                                        IkReal x331 = ((1.0) * sj0);
                                                                                                                        IkReal x332 = ((1.0) * x330);
                                                                                                                        IkReal x333 = (sj0 * x329);
                                                                                                                        IkReal x334 = (cj0 * x329);
                                                                                                                        IkReal x335 = (cj0 * x332);
                                                                                                                        evalcond[0] = (((new_r11 * sj0)) + x329 + ((cj0 * new_r01)));
                                                                                                                        evalcond[1] = (x334 + new_r01 + ((sj0 * x330)));
                                                                                                                        evalcond[2] = (((new_r10 * sj0)) + (((-1.0) * x332)) + ((cj0 * new_r00)));
                                                                                                                        evalcond[3] = ((((-1.0) * x329)) + (((-1.0) * new_r00 * x331)) + ((cj0 * new_r10)));
                                                                                                                        evalcond[4] = ((((-1.0) * x332)) + ((cj0 * new_r11)) + (((-1.0) * new_r01 * x331)));
                                                                                                                        evalcond[5] = (x333 + (((-1.0) * x335)) + new_r00);
                                                                                                                        evalcond[6] = (x333 + (((-1.0) * x335)) + new_r11);
                                                                                                                        evalcond[7] = ((((-1.0) * x334)) + (((-1.0) * x330 * x331)) + new_r10);
                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }

                                                                                                                    {
                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                        std::vector<int> vfree(0);
                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    } while (0);
                                                                                                    if (bgotonextstatement)
                                                                                                    {
                                                                                                        bool bgotonextstatement = true;
                                                                                                        do
                                                                                                        {
                                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))), 6.28318530717959)));
                                                                                                            evalcond[1] = new_r20;
                                                                                                            evalcond[2] = new_r02;
                                                                                                            evalcond[3] = new_r12;
                                                                                                            evalcond[4] = new_r21;
                                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 && IKabs(evalcond[4]) < 0.0000050000000000)
                                                                                                            {
                                                                                                                bgotonextstatement = false;
                                                                                                                {
                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                    bool j2valid[1] = {false};
                                                                                                                    _nj2 = 1;
                                                                                                                    IkReal x336 = ((1.0) * sj0);
                                                                                                                    if (IKabs(((((-1.0) * new_r00 * x336)) + ((cj0 * new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * cj0 * new_r00)) + (((-1.0) * new_r01 * x336)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * new_r00 * x336)) + ((cj0 * new_r01)))) + IKsqr(((((-1.0) * cj0 * new_r00)) + (((-1.0) * new_r01 * x336)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                        continue;
                                                                                                                    j2array[0] = IKatan2(((((-1.0) * new_r00 * x336)) + ((cj0 * new_r01))), ((((-1.0) * cj0 * new_r00)) + (((-1.0) * new_r01 * x336))));
                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                    {
                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                    {
                                                                                                                        j2array[0] += IK2PI;
                                                                                                                    }
                                                                                                                    j2valid[0] = true;
                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                    {
                                                                                                                        if (!j2valid[ij2])
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        _ij2[0] = ij2;
                                                                                                                        _ij2[1] = -1;
                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                        {
                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                            {
                                                                                                                                j2valid[iij2] = false;
                                                                                                                                _ij2[1] = iij2;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        j2 = j2array[ij2];
                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                        {
                                                                                                                            IkReal evalcond[8];
                                                                                                                            IkReal x337 = IKsin(j2);
                                                                                                                            IkReal x338 = IKcos(j2);
                                                                                                                            IkReal x339 = ((1.0) * sj0);
                                                                                                                            IkReal x340 = ((1.0) * x337);
                                                                                                                            IkReal x341 = (sj0 * x338);
                                                                                                                            IkReal x342 = ((1.0) * x338);
                                                                                                                            IkReal x343 = (cj0 * x340);
                                                                                                                            evalcond[0] = (((new_r10 * sj0)) + x338 + ((cj0 * new_r00)));
                                                                                                                            evalcond[1] = (((new_r11 * sj0)) + ((cj0 * new_r01)) + (((-1.0) * x340)));
                                                                                                                            evalcond[2] = (((cj0 * x338)) + new_r00 + ((sj0 * x337)));
                                                                                                                            evalcond[3] = ((((-1.0) * new_r00 * x339)) + (((-1.0) * x340)) + ((cj0 * new_r10)));
                                                                                                                            evalcond[4] = ((((-1.0) * x342)) + ((cj0 * new_r11)) + (((-1.0) * new_r01 * x339)));
                                                                                                                            evalcond[5] = (x341 + new_r01 + (((-1.0) * x343)));
                                                                                                                            evalcond[6] = (x341 + new_r10 + (((-1.0) * x343)));
                                                                                                                            evalcond[7] = ((((-1.0) * x337 * x339)) + (((-1.0) * cj0 * x342)) + new_r11);
                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        {
                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                            std::vector<int> vfree(0);
                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } while (0);
                                                                                                        if (bgotonextstatement)
                                                                                                        {
                                                                                                            bool bgotonextstatement = true;
                                                                                                            do
                                                                                                            {
                                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j0))), 6.28318530717959)));
                                                                                                                evalcond[1] = new_r12;
                                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                                                                {
                                                                                                                    bgotonextstatement = false;
                                                                                                                    {
                                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                        bool j2valid[1] = {false};
                                                                                                                        _nj2 = 1;
                                                                                                                        if (IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10) + IKsqr(new_r11) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                            continue;
                                                                                                                        j2array[0] = IKatan2(new_r10, new_r11);
                                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                                        if (j2array[0] > IKPI)
                                                                                                                        {
                                                                                                                            j2array[0] -= IK2PI;
                                                                                                                        }
                                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                                        {
                                                                                                                            j2array[0] += IK2PI;
                                                                                                                        }
                                                                                                                        j2valid[0] = true;
                                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                        {
                                                                                                                            if (!j2valid[ij2])
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            _ij2[0] = ij2;
                                                                                                                            _ij2[1] = -1;
                                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                            {
                                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                {
                                                                                                                                    j2valid[iij2] = false;
                                                                                                                                    _ij2[1] = iij2;
                                                                                                                                    break;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            j2 = j2array[ij2];
                                                                                                                            cj2 = cj2array[ij2];
                                                                                                                            sj2 = sj2array[ij2];
                                                                                                                            {
                                                                                                                                IkReal evalcond[8];
                                                                                                                                IkReal x344 = IKcos(j2);
                                                                                                                                IkReal x345 = IKsin(j2);
                                                                                                                                IkReal x346 = ((1.0) * sj1);
                                                                                                                                IkReal x347 = ((1.0) * x344);
                                                                                                                                evalcond[0] = (((sj1 * x344)) + new_r20);
                                                                                                                                evalcond[1] = (new_r10 + (((-1.0) * x345)));
                                                                                                                                evalcond[2] = (new_r11 + (((-1.0) * x347)));
                                                                                                                                evalcond[3] = (((cj1 * x345)) + new_r01);
                                                                                                                                evalcond[4] = ((((-1.0) * x345 * x346)) + new_r21);
                                                                                                                                evalcond[5] = ((((-1.0) * cj1 * x347)) + new_r00);
                                                                                                                                evalcond[6] = (((cj1 * new_r01)) + x345 + (((-1.0) * new_r21 * x346)));
                                                                                                                                evalcond[7] = (((cj1 * new_r00)) + (((-1.0) * new_r20 * x346)) + (((-1.0) * x347)));
                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                            }

                                                                                                                            {
                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                vinfos[0].foffset = j0;
                                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                vinfos[1].foffset = j1;
                                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                vinfos[2].foffset = j2;
                                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                vinfos[3].foffset = j3;
                                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                vinfos[4].foffset = j4;
                                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                vinfos[5].foffset = j5;
                                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                                vinfos[6].foffset = j6;
                                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                                std::vector<int> vfree(0);
                                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            } while (0);
                                                                                                            if (bgotonextstatement)
                                                                                                            {
                                                                                                                bool bgotonextstatement = true;
                                                                                                                do
                                                                                                                {
                                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j0)))), 6.28318530717959)));
                                                                                                                    evalcond[1] = new_r12;
                                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                                                                    {
                                                                                                                        bgotonextstatement = false;
                                                                                                                        {
                                                                                                                            IkReal j2eval[3];
                                                                                                                            sj0 = 0;
                                                                                                                            cj0 = -1.0;
                                                                                                                            j0 = 3.14159265358979;
                                                                                                                            j2eval[0] = sj1;
                                                                                                                            j2eval[1] = IKsign(sj1);
                                                                                                                            j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                                                                            if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    IkReal j2eval[1];
                                                                                                                                    sj0 = 0;
                                                                                                                                    cj0 = -1.0;
                                                                                                                                    j0 = 3.14159265358979;
                                                                                                                                    j2eval[0] = sj1;
                                                                                                                                    if (IKabs(j2eval[0]) < 0.0000010000000000)
                                                                                                                                    {
                                                                                                                                        {
                                                                                                                                            IkReal j2eval[2];
                                                                                                                                            sj0 = 0;
                                                                                                                                            cj0 = -1.0;
                                                                                                                                            j0 = 3.14159265358979;
                                                                                                                                            j2eval[0] = cj1;
                                                                                                                                            j2eval[1] = sj1;
                                                                                                                                            if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                                                                                                            {
                                                                                                                                                {
                                                                                                                                                    IkReal evalcond[4];
                                                                                                                                                    bool bgotonextstatement = true;
                                                                                                                                                    do
                                                                                                                                                    {
                                                                                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                                                                                        evalcond[1] = new_r22;
                                                                                                                                                        evalcond[2] = new_r01;
                                                                                                                                                        evalcond[3] = new_r00;
                                                                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                                        {
                                                                                                                                                            bgotonextstatement = false;
                                                                                                                                                            {
                                                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                                                _nj2 = 1;
                                                                                                                                                                if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21) + IKsqr(((-1.0) * new_r20)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                                    continue;
                                                                                                                                                                j2array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                                                {
                                                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                                                }
                                                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                                                {
                                                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                                                }
                                                                                                                                                                j2valid[0] = true;
                                                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                                {
                                                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                                                    {
                                                                                                                                                                        continue;
                                                                                                                                                                    }
                                                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                                                    _ij2[1] = -1;
                                                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                                    {
                                                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                        {
                                                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                                                            break;
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                                                    {
                                                                                                                                                                        IkReal evalcond[4];
                                                                                                                                                                        IkReal x348 = IKcos(j2);
                                                                                                                                                                        IkReal x349 = ((1.0) * (IKsin(j2)));
                                                                                                                                                                        evalcond[0] = (x348 + new_r20);
                                                                                                                                                                        evalcond[1] = (new_r21 + (((-1.0) * x349)));
                                                                                                                                                                        evalcond[2] = ((((-1.0) * new_r10)) + (((-1.0) * x349)));
                                                                                                                                                                        evalcond[3] = ((((-1.0) * new_r11)) + (((-1.0) * x348)));
                                                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                        {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                    }

                                                                                                                                                                    {
                                                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    } while (0);
                                                                                                                                                    if (bgotonextstatement)
                                                                                                                                                    {
                                                                                                                                                        bool bgotonextstatement = true;
                                                                                                                                                        do
                                                                                                                                                        {
                                                                                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                                                                                            evalcond[1] = new_r22;
                                                                                                                                                            evalcond[2] = new_r01;
                                                                                                                                                            evalcond[3] = new_r00;
                                                                                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                                            {
                                                                                                                                                                bgotonextstatement = false;
                                                                                                                                                                {
                                                                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                                    bool j2valid[1] = {false};
                                                                                                                                                                    _nj2 = 1;
                                                                                                                                                                    if (IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r21)) + IKsqr(new_r20) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                                        continue;
                                                                                                                                                                    j2array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                                                                    {
                                                                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                                                                    }
                                                                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                                                                    {
                                                                                                                                                                        j2array[0] += IK2PI;
                                                                                                                                                                    }
                                                                                                                                                                    j2valid[0] = true;
                                                                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                                    {
                                                                                                                                                                        if (!j2valid[ij2])
                                                                                                                                                                        {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        _ij2[0] = ij2;
                                                                                                                                                                        _ij2[1] = -1;
                                                                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                                        {
                                                                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                            {
                                                                                                                                                                                j2valid[iij2] = false;
                                                                                                                                                                                _ij2[1] = iij2;
                                                                                                                                                                                break;
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        j2 = j2array[ij2];
                                                                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                                                                        {
                                                                                                                                                                            IkReal evalcond[4];
                                                                                                                                                                            IkReal x350 = IKsin(j2);
                                                                                                                                                                            IkReal x351 = ((1.0) * (IKcos(j2)));
                                                                                                                                                                            evalcond[0] = (x350 + new_r21);
                                                                                                                                                                            evalcond[1] = ((((-1.0) * x351)) + new_r20);
                                                                                                                                                                            evalcond[2] = ((((-1.0) * x350)) + (((-1.0) * new_r10)));
                                                                                                                                                                            evalcond[3] = ((((-1.0) * x351)) + (((-1.0) * new_r11)));
                                                                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                            {
                                                                                                                                                                                continue;
                                                                                                                                                                            }
                                                                                                                                                                        }

                                                                                                                                                                        {
                                                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                            std::vector<int> vfree(0);
                                                                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        } while (0);
                                                                                                                                                        if (bgotonextstatement)
                                                                                                                                                        {
                                                                                                                                                            bool bgotonextstatement = true;
                                                                                                                                                            do
                                                                                                                                                            {
                                                                                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                                                                                                                                                evalcond[1] = new_r20;
                                                                                                                                                                evalcond[2] = new_r02;
                                                                                                                                                                evalcond[3] = new_r21;
                                                                                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                                                {
                                                                                                                                                                    bgotonextstatement = false;
                                                                                                                                                                    {
                                                                                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                                        bool j2valid[1] = {false};
                                                                                                                                                                        _nj2 = 1;
                                                                                                                                                                        if (IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01) + IKsqr(((-1.0) * new_r11)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                                            continue;
                                                                                                                                                                        j2array[0] = IKatan2(new_r01, ((-1.0) * new_r11));
                                                                                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                                        if (j2array[0] > IKPI)
                                                                                                                                                                        {
                                                                                                                                                                            j2array[0] -= IK2PI;
                                                                                                                                                                        }
                                                                                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                                                                                        {
                                                                                                                                                                            j2array[0] += IK2PI;
                                                                                                                                                                        }
                                                                                                                                                                        j2valid[0] = true;
                                                                                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                                        {
                                                                                                                                                                            if (!j2valid[ij2])
                                                                                                                                                                            {
                                                                                                                                                                                continue;
                                                                                                                                                                            }
                                                                                                                                                                            _ij2[0] = ij2;
                                                                                                                                                                            _ij2[1] = -1;
                                                                                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                                            {
                                                                                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                                {
                                                                                                                                                                                    j2valid[iij2] = false;
                                                                                                                                                                                    _ij2[1] = iij2;
                                                                                                                                                                                    break;
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            j2 = j2array[ij2];
                                                                                                                                                                            cj2 = cj2array[ij2];
                                                                                                                                                                            sj2 = sj2array[ij2];
                                                                                                                                                                            {
                                                                                                                                                                                IkReal evalcond[4];
                                                                                                                                                                                IkReal x352 = IKsin(j2);
                                                                                                                                                                                IkReal x353 = ((1.0) * (IKcos(j2)));
                                                                                                                                                                                evalcond[0] = (x352 + (((-1.0) * new_r01)));
                                                                                                                                                                                evalcond[1] = ((((-1.0) * x352)) + (((-1.0) * new_r10)));
                                                                                                                                                                                evalcond[2] = ((((-1.0) * x353)) + (((-1.0) * new_r11)));
                                                                                                                                                                                evalcond[3] = ((((-1.0) * x353)) + (((-1.0) * new_r00)));
                                                                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                                {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                            }

                                                                                                                                                                            {
                                                                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                                                                vinfos[0].foffset = j0;
                                                                                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                                                                vinfos[1].foffset = j1;
                                                                                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                                                                vinfos[2].foffset = j2;
                                                                                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                                                                vinfos[3].foffset = j3;
                                                                                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                                                                vinfos[4].foffset = j4;
                                                                                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                                                                vinfos[5].foffset = j5;
                                                                                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                                                                                vinfos[6].foffset = j6;
                                                                                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                                std::vector<int> vfree(0);
                                                                                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            } while (0);
                                                                                                                                                            if (bgotonextstatement)
                                                                                                                                                            {
                                                                                                                                                                bool bgotonextstatement = true;
                                                                                                                                                                do
                                                                                                                                                                {
                                                                                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))), 6.28318530717959)));
                                                                                                                                                                    evalcond[1] = new_r20;
                                                                                                                                                                    evalcond[2] = new_r02;
                                                                                                                                                                    evalcond[3] = new_r21;
                                                                                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                                                    {
                                                                                                                                                                        bgotonextstatement = false;
                                                                                                                                                                        {
                                                                                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                                            bool j2valid[1] = {false};
                                                                                                                                                                            _nj2 = 1;
                                                                                                                                                                            if (IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r10)) + IKsqr(new_r00) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                                                continue;
                                                                                                                                                                            j2array[0] = IKatan2(((-1.0) * new_r10), new_r00);
                                                                                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                                            if (j2array[0] > IKPI)
                                                                                                                                                                            {
                                                                                                                                                                                j2array[0] -= IK2PI;
                                                                                                                                                                            }
                                                                                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                                                                                            {
                                                                                                                                                                                j2array[0] += IK2PI;
                                                                                                                                                                            }
                                                                                                                                                                            j2valid[0] = true;
                                                                                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                                            {
                                                                                                                                                                                if (!j2valid[ij2])
                                                                                                                                                                                {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                _ij2[0] = ij2;
                                                                                                                                                                                _ij2[1] = -1;
                                                                                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                                                {
                                                                                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                                    {
                                                                                                                                                                                        j2valid[iij2] = false;
                                                                                                                                                                                        _ij2[1] = iij2;
                                                                                                                                                                                        break;
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                                j2 = j2array[ij2];
                                                                                                                                                                                cj2 = cj2array[ij2];
                                                                                                                                                                                sj2 = sj2array[ij2];
                                                                                                                                                                                {
                                                                                                                                                                                    IkReal evalcond[4];
                                                                                                                                                                                    IkReal x354 = IKcos(j2);
                                                                                                                                                                                    IkReal x355 = ((1.0) * (IKsin(j2)));
                                                                                                                                                                                    evalcond[0] = (x354 + (((-1.0) * new_r00)));
                                                                                                                                                                                    evalcond[1] = ((((-1.0) * x355)) + (((-1.0) * new_r10)));
                                                                                                                                                                                    evalcond[2] = ((((-1.0) * x354)) + (((-1.0) * new_r11)));
                                                                                                                                                                                    evalcond[3] = ((((-1.0) * x355)) + (((-1.0) * new_r01)));
                                                                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                                    {
                                                                                                                                                                                        continue;
                                                                                                                                                                                    }
                                                                                                                                                                                }

                                                                                                                                                                                {
                                                                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                                    std::vector<int> vfree(0);
                                                                                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                } while (0);
                                                                                                                                                                if (bgotonextstatement)
                                                                                                                                                                {
                                                                                                                                                                    bool bgotonextstatement = true;
                                                                                                                                                                    do
                                                                                                                                                                    {
                                                                                                                                                                        evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                                                                        {
                                                                                                                                                                            bgotonextstatement = false;
                                                                                                                                                                            {
                                                                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                                                                _nj2 = 1;
                                                                                                                                                                                if (IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r10)) + IKsqr(((-1.0) * new_r11)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                                                    continue;
                                                                                                                                                                                j2array[0] = IKatan2(((-1.0) * new_r10), ((-1.0) * new_r11));
                                                                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                                                                {
                                                                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                                                                }
                                                                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                                                                {
                                                                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                                                                }
                                                                                                                                                                                j2valid[0] = true;
                                                                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                                                {
                                                                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                                                                    {
                                                                                                                                                                                        continue;
                                                                                                                                                                                    }
                                                                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                                                                    _ij2[1] = -1;
                                                                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                                                    {
                                                                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                                        {
                                                                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                                                                            break;
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                                                                    {
                                                                                                                                                                                        IkReal evalcond[6];
                                                                                                                                                                                        IkReal x356 = IKsin(j2);
                                                                                                                                                                                        IkReal x357 = IKcos(j2);
                                                                                                                                                                                        IkReal x358 = ((-1.0) * x357);
                                                                                                                                                                                        evalcond[0] = x356;
                                                                                                                                                                                        evalcond[1] = (new_r22 * x356);
                                                                                                                                                                                        evalcond[2] = x358;
                                                                                                                                                                                        evalcond[3] = (new_r22 * x358);
                                                                                                                                                                                        evalcond[4] = ((((-1.0) * x356)) + (((-1.0) * new_r10)));
                                                                                                                                                                                        evalcond[5] = ((((-1.0) * x357)) + (((-1.0) * new_r11)));
                                                                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                                        {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                    }

                                                                                                                                                                                    {
                                                                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    } while (0);
                                                                                                                                                                    if (bgotonextstatement)
                                                                                                                                                                    {
                                                                                                                                                                        bool bgotonextstatement = true;
                                                                                                                                                                        do
                                                                                                                                                                        {
                                                                                                                                                                            if (1)
                                                                                                                                                                            {
                                                                                                                                                                                bgotonextstatement = false;
                                                                                                                                                                                continue; // branch miss [j2]
                                                                                                                                                                            }
                                                                                                                                                                        } while (0);
                                                                                                                                                                        if (bgotonextstatement)
                                                                                                                                                                        {
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                {
                                                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                    bool j2valid[1] = {false};
                                                                                                                                                    _nj2 = 1;
                                                                                                                                                    CheckValue<IkReal> x359 = IKPowWithIntegerCheck(cj1, -1);
                                                                                                                                                    if (!x359.valid)
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    CheckValue<IkReal> x360 = IKPowWithIntegerCheck(sj1, -1);
                                                                                                                                                    if (!x360.valid)
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    if (IKabs((new_r01 * (x359.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20 * (x360.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r01 * (x359.value))) + IKsqr(((-1.0) * new_r20 * (x360.value))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                        continue;
                                                                                                                                                    j2array[0] = IKatan2((new_r01 * (x359.value)), ((-1.0) * new_r20 * (x360.value)));
                                                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                                                    {
                                                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                                                    }
                                                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                                                    {
                                                                                                                                                        j2array[0] += IK2PI;
                                                                                                                                                    }
                                                                                                                                                    j2valid[0] = true;
                                                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                    {
                                                                                                                                                        if (!j2valid[ij2])
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        _ij2[0] = ij2;
                                                                                                                                                        _ij2[1] = -1;
                                                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                        {
                                                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                            {
                                                                                                                                                                j2valid[iij2] = false;
                                                                                                                                                                _ij2[1] = iij2;
                                                                                                                                                                break;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        j2 = j2array[ij2];
                                                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                                                        {
                                                                                                                                                            IkReal evalcond[8];
                                                                                                                                                            IkReal x361 = IKsin(j2);
                                                                                                                                                            IkReal x362 = IKcos(j2);
                                                                                                                                                            IkReal x363 = ((1.0) * new_r00);
                                                                                                                                                            IkReal x364 = ((1.0) * sj1);
                                                                                                                                                            IkReal x365 = ((1.0) * new_r01);
                                                                                                                                                            IkReal x366 = ((1.0) * x362);
                                                                                                                                                            evalcond[0] = (((sj1 * x362)) + new_r20);
                                                                                                                                                            evalcond[1] = ((((-1.0) * x361 * x364)) + new_r21);
                                                                                                                                                            evalcond[2] = ((((-1.0) * x361)) + (((-1.0) * new_r10)));
                                                                                                                                                            evalcond[3] = ((((-1.0) * x366)) + (((-1.0) * new_r11)));
                                                                                                                                                            evalcond[4] = ((((-1.0) * x365)) + ((cj1 * x361)));
                                                                                                                                                            evalcond[5] = ((((-1.0) * x363)) + (((-1.0) * cj1 * x366)));
                                                                                                                                                            evalcond[6] = ((((-1.0) * cj1 * x365)) + x361 + (((-1.0) * new_r21 * x364)));
                                                                                                                                                            evalcond[7] = ((((-1.0) * new_r20 * x364)) + (((-1.0) * x366)) + (((-1.0) * cj1 * x363)));
                                                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                        }

                                                                                                                                                        {
                                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                                                            std::vector<int> vfree(0);
                                                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        {
                                                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                            bool j2valid[1] = {false};
                                                                                                                                            _nj2 = 1;
                                                                                                                                            CheckValue<IkReal> x367 = IKPowWithIntegerCheck(sj1, -1);
                                                                                                                                            if (!x367.valid)
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                            if (IKabs((new_r21 * (x367.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r21 * (x367.value))) + IKsqr(((-1.0) * new_r11)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                continue;
                                                                                                                                            j2array[0] = IKatan2((new_r21 * (x367.value)), ((-1.0) * new_r11));
                                                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                                                            if (j2array[0] > IKPI)
                                                                                                                                            {
                                                                                                                                                j2array[0] -= IK2PI;
                                                                                                                                            }
                                                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                                                            {
                                                                                                                                                j2array[0] += IK2PI;
                                                                                                                                            }
                                                                                                                                            j2valid[0] = true;
                                                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                            {
                                                                                                                                                if (!j2valid[ij2])
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                _ij2[0] = ij2;
                                                                                                                                                _ij2[1] = -1;
                                                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                {
                                                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                    {
                                                                                                                                                        j2valid[iij2] = false;
                                                                                                                                                        _ij2[1] = iij2;
                                                                                                                                                        break;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                j2 = j2array[ij2];
                                                                                                                                                cj2 = cj2array[ij2];
                                                                                                                                                sj2 = sj2array[ij2];
                                                                                                                                                {
                                                                                                                                                    IkReal evalcond[8];
                                                                                                                                                    IkReal x368 = IKsin(j2);
                                                                                                                                                    IkReal x369 = IKcos(j2);
                                                                                                                                                    IkReal x370 = ((1.0) * new_r00);
                                                                                                                                                    IkReal x371 = ((1.0) * sj1);
                                                                                                                                                    IkReal x372 = ((1.0) * new_r01);
                                                                                                                                                    IkReal x373 = ((1.0) * x369);
                                                                                                                                                    evalcond[0] = (((sj1 * x369)) + new_r20);
                                                                                                                                                    evalcond[1] = ((((-1.0) * x368 * x371)) + new_r21);
                                                                                                                                                    evalcond[2] = ((((-1.0) * x368)) + (((-1.0) * new_r10)));
                                                                                                                                                    evalcond[3] = ((((-1.0) * x373)) + (((-1.0) * new_r11)));
                                                                                                                                                    evalcond[4] = ((((-1.0) * x372)) + ((cj1 * x368)));
                                                                                                                                                    evalcond[5] = ((((-1.0) * cj1 * x373)) + (((-1.0) * x370)));
                                                                                                                                                    evalcond[6] = ((((-1.0) * new_r21 * x371)) + (((-1.0) * cj1 * x372)) + x368);
                                                                                                                                                    evalcond[7] = ((((-1.0) * new_r20 * x371)) + (((-1.0) * cj1 * x370)) + (((-1.0) * x373)));
                                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                }

                                                                                                                                                {
                                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                                                    std::vector<int> vfree(0);
                                                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                    bool j2valid[1] = {false};
                                                                                                                                    _nj2 = 1;
                                                                                                                                    CheckValue<IkReal> x374 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                                                                                                                    if (!x374.valid)
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    CheckValue<IkReal> x375 = IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                                    if (!x375.valid)
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x374.value))) + (x375.value));
                                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                                    {
                                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                                    }
                                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                                    {
                                                                                                                                        j2array[0] += IK2PI;
                                                                                                                                    }
                                                                                                                                    j2valid[0] = true;
                                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                    {
                                                                                                                                        if (!j2valid[ij2])
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        _ij2[0] = ij2;
                                                                                                                                        _ij2[1] = -1;
                                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                        {
                                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                            {
                                                                                                                                                j2valid[iij2] = false;
                                                                                                                                                _ij2[1] = iij2;
                                                                                                                                                break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        j2 = j2array[ij2];
                                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                                        {
                                                                                                                                            IkReal evalcond[8];
                                                                                                                                            IkReal x376 = IKsin(j2);
                                                                                                                                            IkReal x377 = IKcos(j2);
                                                                                                                                            IkReal x378 = ((1.0) * new_r00);
                                                                                                                                            IkReal x379 = ((1.0) * sj1);
                                                                                                                                            IkReal x380 = ((1.0) * new_r01);
                                                                                                                                            IkReal x381 = ((1.0) * x377);
                                                                                                                                            evalcond[0] = (((sj1 * x377)) + new_r20);
                                                                                                                                            evalcond[1] = ((((-1.0) * x376 * x379)) + new_r21);
                                                                                                                                            evalcond[2] = ((((-1.0) * x376)) + (((-1.0) * new_r10)));
                                                                                                                                            evalcond[3] = ((((-1.0) * x381)) + (((-1.0) * new_r11)));
                                                                                                                                            evalcond[4] = (((cj1 * x376)) + (((-1.0) * x380)));
                                                                                                                                            evalcond[5] = ((((-1.0) * cj1 * x381)) + (((-1.0) * x378)));
                                                                                                                                            evalcond[6] = ((((-1.0) * new_r21 * x379)) + (((-1.0) * cj1 * x380)) + x376);
                                                                                                                                            evalcond[7] = ((((-1.0) * new_r20 * x379)) + (((-1.0) * cj1 * x378)) + (((-1.0) * x381)));
                                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                        }

                                                                                                                                        {
                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                                            std::vector<int> vfree(0);
                                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } while (0);
                                                                                                                if (bgotonextstatement)
                                                                                                                {
                                                                                                                    bool bgotonextstatement = true;
                                                                                                                    do
                                                                                                                    {
                                                                                                                        evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                        {
                                                                                                                            bgotonextstatement = false;
                                                                                                                            {
                                                                                                                                IkReal j2eval[1];
                                                                                                                                new_r21 = 0;
                                                                                                                                new_r20 = 0;
                                                                                                                                new_r02 = 0;
                                                                                                                                new_r12 = 0;
                                                                                                                                j2eval[0] = IKabs(new_r22);
                                                                                                                                if (IKabs(j2eval[0]) < 0.0000000100000000)
                                                                                                                                {
                                                                                                                                    continue; // no branches [j2]
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    IkReal op[2 + 1], zeror[2];
                                                                                                                                    int numroots;
                                                                                                                                    op[0] = new_r22;
                                                                                                                                    op[1] = 0;
                                                                                                                                    op[2] = ((-1.0) * new_r22);
                                                                                                                                    polyroots2(op, zeror, numroots);
                                                                                                                                    IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
                                                                                                                                    int numsolutions = 0;
                                                                                                                                    for (int ij2 = 0; ij2 < numroots; ++ij2)
                                                                                                                                    {
                                                                                                                                        IkReal htj2 = zeror[ij2];
                                                                                                                                        tempj2array[0] = ((2.0) * (atan(htj2)));
                                                                                                                                        for (int kj2 = 0; kj2 < 1; ++kj2)
                                                                                                                                        {
                                                                                                                                            j2array[numsolutions] = tempj2array[kj2];
                                                                                                                                            if (j2array[numsolutions] > IKPI)
                                                                                                                                            {
                                                                                                                                                j2array[numsolutions] -= IK2PI;
                                                                                                                                            }
                                                                                                                                            else if (j2array[numsolutions] < -IKPI)
                                                                                                                                            {
                                                                                                                                                j2array[numsolutions] += IK2PI;
                                                                                                                                            }
                                                                                                                                            sj2array[numsolutions] = IKsin(j2array[numsolutions]);
                                                                                                                                            cj2array[numsolutions] = IKcos(j2array[numsolutions]);
                                                                                                                                            numsolutions++;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    bool j2valid[2] = {true, true};
                                                                                                                                    _nj2 = 2;
                                                                                                                                    for (int ij2 = 0; ij2 < numsolutions; ++ij2)
                                                                                                                                    {
                                                                                                                                        if (!j2valid[ij2])
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        j2 = j2array[ij2];
                                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                                        htj2 = IKtan(j2 / 2);

                                                                                                                                        _ij2[0] = ij2;
                                                                                                                                        _ij2[1] = -1;
                                                                                                                                        for (int iij2 = ij2 + 1; iij2 < numsolutions; ++iij2)
                                                                                                                                        {
                                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                            {
                                                                                                                                                j2valid[iij2] = false;
                                                                                                                                                _ij2[1] = iij2;
                                                                                                                                                break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        {
                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                                            std::vector<int> vfree(0);
                                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    } while (0);
                                                                                                                    if (bgotonextstatement)
                                                                                                                    {
                                                                                                                        bool bgotonextstatement = true;
                                                                                                                        do
                                                                                                                        {
                                                                                                                            if (1)
                                                                                                                            {
                                                                                                                                bgotonextstatement = false;
                                                                                                                                continue; // branch miss [j2]
                                                                                                                            }
                                                                                                                        } while (0);
                                                                                                                        if (bgotonextstatement)
                                                                                                                        {
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                {
                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                    bool j2valid[1] = {false};
                                                                                    _nj2 = 1;
                                                                                    CheckValue<IkReal> x383 = IKPowWithIntegerCheck(sj1, -1);
                                                                                    if (!x383.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    IkReal x382 = x383.value;
                                                                                    CheckValue<IkReal> x384 = IKPowWithIntegerCheck(cj0, -1);
                                                                                    if (!x384.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    CheckValue<IkReal> x385 = IKPowWithIntegerCheck(cj1, -1);
                                                                                    if (!x385.valid)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    if (IKabs((x382 * (x384.value) * (x385.value) * ((((new_r20 * sj0)) + (((-1.0) * new_r01 * sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20 * x382)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x382 * (x384.value) * (x385.value) * ((((new_r20 * sj0)) + (((-1.0) * new_r01 * sj1)))))) + IKsqr(((-1.0) * new_r20 * x382)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                        continue;
                                                                                    j2array[0] = IKatan2((x382 * (x384.value) * (x385.value) * ((((new_r20 * sj0)) + (((-1.0) * new_r01 * sj1))))), ((-1.0) * new_r20 * x382));
                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                    if (j2array[0] > IKPI)
                                                                                    {
                                                                                        j2array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j2array[0] < -IKPI)
                                                                                    {
                                                                                        j2array[0] += IK2PI;
                                                                                    }
                                                                                    j2valid[0] = true;
                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                    {
                                                                                        if (!j2valid[ij2])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij2[0] = ij2;
                                                                                        _ij2[1] = -1;
                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                        {
                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j2valid[iij2] = false;
                                                                                                _ij2[1] = iij2;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j2 = j2array[ij2];
                                                                                        cj2 = cj2array[ij2];
                                                                                        sj2 = sj2array[ij2];
                                                                                        {
                                                                                            IkReal evalcond[12];
                                                                                            IkReal x386 = IKsin(j2);
                                                                                            IkReal x387 = IKcos(j2);
                                                                                            IkReal x388 = ((1.0) * sj1);
                                                                                            IkReal x389 = ((1.0) * sj0);
                                                                                            IkReal x390 = (cj0 * new_r00);
                                                                                            IkReal x391 = (cj0 * cj1);
                                                                                            IkReal x392 = (new_r11 * sj0);
                                                                                            IkReal x393 = (new_r10 * sj0);
                                                                                            IkReal x394 = ((1.0) * x387);
                                                                                            IkReal x395 = (cj1 * x386);
                                                                                            IkReal x396 = ((1.0) * x386);
                                                                                            evalcond[0] = (new_r20 + ((sj1 * x387)));
                                                                                            evalcond[1] = ((((-1.0) * x386 * x388)) + new_r21);
                                                                                            evalcond[2] = (x395 + x392 + ((cj0 * new_r01)));
                                                                                            evalcond[3] = ((((-1.0) * x396)) + (((-1.0) * new_r00 * x389)) + ((cj0 * new_r10)));
                                                                                            evalcond[4] = ((((-1.0) * x394)) + (((-1.0) * new_r01 * x389)) + ((cj0 * new_r11)));
                                                                                            evalcond[5] = (new_r01 + ((sj0 * x387)) + ((x386 * x391)));
                                                                                            evalcond[6] = ((((-1.0) * cj1 * x394)) + x390 + x393);
                                                                                            evalcond[7] = ((((-1.0) * x391 * x394)) + new_r00 + ((sj0 * x386)));
                                                                                            evalcond[8] = ((((-1.0) * cj0 * x394)) + ((sj0 * x395)) + new_r11);
                                                                                            evalcond[9] = ((((-1.0) * cj0 * x396)) + (((-1.0) * cj1 * x387 * x389)) + new_r10);
                                                                                            evalcond[10] = (x386 + (((-1.0) * new_r21 * x388)) + ((new_r01 * x391)) + ((cj1 * x392)));
                                                                                            evalcond[11] = ((((-1.0) * x394)) + (((-1.0) * new_r20 * x388)) + ((cj1 * x390)) + ((cj1 * x393)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                            vinfos[0].jointtype = 1;
                                                                                            vinfos[0].foffset = j0;
                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                            vinfos[1].jointtype = 1;
                                                                                            vinfos[1].foffset = j1;
                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                            vinfos[2].jointtype = 1;
                                                                                            vinfos[2].foffset = j2;
                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                            vinfos[3].jointtype = 1;
                                                                                            vinfos[3].foffset = j3;
                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j4;
                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j5;
                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                            vinfos[6].jointtype = 1;
                                                                                            vinfos[6].foffset = j6;
                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        {
                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                            bool j2valid[1] = {false};
                                                                            _nj2 = 1;
                                                                            CheckValue<IkReal> x398 = IKPowWithIntegerCheck(sj1, -1);
                                                                            if (!x398.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            IkReal x397 = x398.value;
                                                                            CheckValue<IkReal> x399 = IKPowWithIntegerCheck(sj0, -1);
                                                                            if (!x399.valid)
                                                                            {
                                                                                continue;
                                                                            }
                                                                            if (IKabs((x397 * (x399.value) * (((((-1.0) * cj0 * cj1 * new_r20)) + (((-1.0) * new_r00 * sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20 * x397)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x397 * (x399.value) * (((((-1.0) * cj0 * cj1 * new_r20)) + (((-1.0) * new_r00 * sj1)))))) + IKsqr(((-1.0) * new_r20 * x397)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                continue;
                                                                            j2array[0] = IKatan2((x397 * (x399.value) * (((((-1.0) * cj0 * cj1 * new_r20)) + (((-1.0) * new_r00 * sj1))))), ((-1.0) * new_r20 * x397));
                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                            if (j2array[0] > IKPI)
                                                                            {
                                                                                j2array[0] -= IK2PI;
                                                                            }
                                                                            else if (j2array[0] < -IKPI)
                                                                            {
                                                                                j2array[0] += IK2PI;
                                                                            }
                                                                            j2valid[0] = true;
                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                            {
                                                                                if (!j2valid[ij2])
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij2[0] = ij2;
                                                                                _ij2[1] = -1;
                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                {
                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                        j2valid[iij2] = false;
                                                                                        _ij2[1] = iij2;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                j2 = j2array[ij2];
                                                                                cj2 = cj2array[ij2];
                                                                                sj2 = sj2array[ij2];
                                                                                {
                                                                                    IkReal evalcond[12];
                                                                                    IkReal x400 = IKsin(j2);
                                                                                    IkReal x401 = IKcos(j2);
                                                                                    IkReal x402 = ((1.0) * sj1);
                                                                                    IkReal x403 = ((1.0) * sj0);
                                                                                    IkReal x404 = (cj0 * new_r00);
                                                                                    IkReal x405 = (cj0 * cj1);
                                                                                    IkReal x406 = (new_r11 * sj0);
                                                                                    IkReal x407 = (new_r10 * sj0);
                                                                                    IkReal x408 = ((1.0) * x401);
                                                                                    IkReal x409 = (cj1 * x400);
                                                                                    IkReal x410 = ((1.0) * x400);
                                                                                    evalcond[0] = (((sj1 * x401)) + new_r20);
                                                                                    evalcond[1] = ((((-1.0) * x400 * x402)) + new_r21);
                                                                                    evalcond[2] = (x406 + x409 + ((cj0 * new_r01)));
                                                                                    evalcond[3] = ((((-1.0) * new_r00 * x403)) + ((cj0 * new_r10)) + (((-1.0) * x410)));
                                                                                    evalcond[4] = (((cj0 * new_r11)) + (((-1.0) * new_r01 * x403)) + (((-1.0) * x408)));
                                                                                    evalcond[5] = (((sj0 * x401)) + new_r01 + ((x400 * x405)));
                                                                                    evalcond[6] = ((((-1.0) * cj1 * x408)) + x404 + x407);
                                                                                    evalcond[7] = (((sj0 * x400)) + new_r00 + (((-1.0) * x405 * x408)));
                                                                                    evalcond[8] = (((sj0 * x409)) + (((-1.0) * cj0 * x408)) + new_r11);
                                                                                    evalcond[9] = ((((-1.0) * cj1 * x401 * x403)) + (((-1.0) * cj0 * x410)) + new_r10);
                                                                                    evalcond[10] = (x400 + (((-1.0) * new_r21 * x402)) + ((cj1 * x406)) + ((new_r01 * x405)));
                                                                                    evalcond[11] = ((((-1.0) * new_r20 * x402)) + ((cj1 * x404)) + ((cj1 * x407)) + (((-1.0) * x408)));
                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                }

                                                                                {
                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                    vinfos[0].jointtype = 1;
                                                                                    vinfos[0].foffset = j0;
                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                    vinfos[1].jointtype = 1;
                                                                                    vinfos[1].foffset = j1;
                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                    vinfos[2].jointtype = 1;
                                                                                    vinfos[2].foffset = j2;
                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                    vinfos[3].jointtype = 1;
                                                                                    vinfos[3].foffset = j3;
                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j4;
                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j5;
                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                    vinfos[6].jointtype = 1;
                                                                                    vinfos[6].foffset = j6;
                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                    bool j2valid[1] = {false};
                                                                    _nj2 = 1;
                                                                    CheckValue<IkReal> x411 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                                                    if (!x411.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    CheckValue<IkReal> x412 = IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                                                                    if (!x412.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x411.value))) + (x412.value));
                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                    if (j2array[0] > IKPI)
                                                                    {
                                                                        j2array[0] -= IK2PI;
                                                                    }
                                                                    else if (j2array[0] < -IKPI)
                                                                    {
                                                                        j2array[0] += IK2PI;
                                                                    }
                                                                    j2valid[0] = true;
                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                    {
                                                                        if (!j2valid[ij2])
                                                                        {
                                                                            continue;
                                                                        }
                                                                        _ij2[0] = ij2;
                                                                        _ij2[1] = -1;
                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                        {
                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                            {
                                                                                j2valid[iij2] = false;
                                                                                _ij2[1] = iij2;
                                                                                break;
                                                                            }
                                                                        }
                                                                        j2 = j2array[ij2];
                                                                        cj2 = cj2array[ij2];
                                                                        sj2 = sj2array[ij2];
                                                                        {
                                                                            IkReal evalcond[12];
                                                                            IkReal x413 = IKsin(j2);
                                                                            IkReal x414 = IKcos(j2);
                                                                            IkReal x415 = ((1.0) * sj1);
                                                                            IkReal x416 = ((1.0) * sj0);
                                                                            IkReal x417 = (cj0 * new_r00);
                                                                            IkReal x418 = (cj0 * cj1);
                                                                            IkReal x419 = (new_r11 * sj0);
                                                                            IkReal x420 = (new_r10 * sj0);
                                                                            IkReal x421 = ((1.0) * x414);
                                                                            IkReal x422 = (cj1 * x413);
                                                                            IkReal x423 = ((1.0) * x413);
                                                                            evalcond[0] = (((sj1 * x414)) + new_r20);
                                                                            evalcond[1] = ((((-1.0) * x413 * x415)) + new_r21);
                                                                            evalcond[2] = (x419 + x422 + ((cj0 * new_r01)));
                                                                            evalcond[3] = ((((-1.0) * x423)) + (((-1.0) * new_r00 * x416)) + ((cj0 * new_r10)));
                                                                            evalcond[4] = ((((-1.0) * x421)) + ((cj0 * new_r11)) + (((-1.0) * new_r01 * x416)));
                                                                            evalcond[5] = (((sj0 * x414)) + ((x413 * x418)) + new_r01);
                                                                            evalcond[6] = ((((-1.0) * cj1 * x421)) + x417 + x420);
                                                                            evalcond[7] = (((sj0 * x413)) + (((-1.0) * x418 * x421)) + new_r00);
                                                                            evalcond[8] = (new_r11 + (((-1.0) * cj0 * x421)) + ((sj0 * x422)));
                                                                            evalcond[9] = ((((-1.0) * cj1 * x414 * x416)) + new_r10 + (((-1.0) * cj0 * x423)));
                                                                            evalcond[10] = (x413 + (((-1.0) * new_r21 * x415)) + ((cj1 * x419)) + ((new_r01 * x418)));
                                                                            evalcond[11] = ((((-1.0) * x421)) + (((-1.0) * new_r20 * x415)) + ((cj1 * x417)) + ((cj1 * x420)));
                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                                                            {
                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 1;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 1;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 1;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            vinfos[6].jointtype = 1;
                                                                            vinfos[6].foffset = j6;
                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                            vinfos[6].maxsolutions = _nj6;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        {
                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                            bool j2valid[1] = {false};
                                            _nj2 = 1;
                                            CheckValue<IkReal> x424 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                            if (!x424.valid)
                                            {
                                                continue;
                                            }
                                            CheckValue<IkReal> x425 = IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                                            if (!x425.valid)
                                            {
                                                continue;
                                            }
                                            j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x424.value))) + (x425.value));
                                            sj2array[0] = IKsin(j2array[0]);
                                            cj2array[0] = IKcos(j2array[0]);
                                            if (j2array[0] > IKPI)
                                            {
                                                j2array[0] -= IK2PI;
                                            }
                                            else if (j2array[0] < -IKPI)
                                            {
                                                j2array[0] += IK2PI;
                                            }
                                            j2valid[0] = true;
                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                            {
                                                if (!j2valid[ij2])
                                                {
                                                    continue;
                                                }
                                                _ij2[0] = ij2;
                                                _ij2[1] = -1;
                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                {
                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                    {
                                                        j2valid[iij2] = false;
                                                        _ij2[1] = iij2;
                                                        break;
                                                    }
                                                }
                                                j2 = j2array[ij2];
                                                cj2 = cj2array[ij2];
                                                sj2 = sj2array[ij2];
                                                {
                                                    IkReal evalcond[2];
                                                    evalcond[0] = (((sj1 * (IKcos(j2)))) + new_r20);
                                                    evalcond[1] = ((((-1.0) * sj1 * (IKsin(j2)))) + new_r21);
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                                                    {
                                                        continue;
                                                    }
                                                }

                                                {
                                                    IkReal j0eval[3];
                                                    j0eval[0] = sj1;
                                                    j0eval[1] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                                                    j0eval[2] = IKsign(sj1);
                                                    if (IKabs(j0eval[0]) < 0.0000010000000000 || IKabs(j0eval[1]) < 0.0000010000000000 || IKabs(j0eval[2]) < 0.0000010000000000)
                                                    {
                                                        {
                                                            IkReal j0eval[2];
                                                            j0eval[0] = cj2;
                                                            j0eval[1] = sj1;
                                                            if (IKabs(j0eval[0]) < 0.0000010000000000 || IKabs(j0eval[1]) < 0.0000010000000000)
                                                            {
                                                                {
                                                                    IkReal evalcond[5];
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j2)))), 6.28318530717959)));
                                                                        evalcond[1] = new_r20;
                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                        {
                                                                            bgotonextstatement = false;
                                                                            {
                                                                                IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                bool j0valid[1] = {false};
                                                                                _nj0 = 1;
                                                                                if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r00)) + IKsqr(new_r10) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                    continue;
                                                                                j0array[0] = IKatan2(((-1.0) * new_r00), new_r10);
                                                                                sj0array[0] = IKsin(j0array[0]);
                                                                                cj0array[0] = IKcos(j0array[0]);
                                                                                if (j0array[0] > IKPI)
                                                                                {
                                                                                    j0array[0] -= IK2PI;
                                                                                }
                                                                                else if (j0array[0] < -IKPI)
                                                                                {
                                                                                    j0array[0] += IK2PI;
                                                                                }
                                                                                j0valid[0] = true;
                                                                                for (int ij0 = 0; ij0 < 1; ++ij0)
                                                                                {
                                                                                    if (!j0valid[ij0])
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    _ij0[0] = ij0;
                                                                                    _ij0[1] = -1;
                                                                                    for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
                                                                                    {
                                                                                        if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                            j0valid[iij0] = false;
                                                                                            _ij0[1] = iij0;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    j0 = j0array[ij0];
                                                                                    cj0 = cj0array[ij0];
                                                                                    sj0 = sj0array[ij0];
                                                                                    {
                                                                                        IkReal evalcond[18];
                                                                                        IkReal x426 = IKsin(j0);
                                                                                        IkReal x427 = IKcos(j0);
                                                                                        IkReal x428 = ((1.0) * sj1);
                                                                                        IkReal x429 = ((1.0) * cj1);
                                                                                        IkReal x430 = (new_r10 * x426);
                                                                                        IkReal x431 = (new_r01 * x427);
                                                                                        IkReal x432 = (new_r00 * x427);
                                                                                        IkReal x433 = ((1.0) * x426);
                                                                                        IkReal x434 = (new_r11 * x426);
                                                                                        IkReal x435 = (new_r12 * x426);
                                                                                        IkReal x436 = (cj1 * x427);
                                                                                        IkReal x437 = (new_r02 * x427);
                                                                                        evalcond[0] = (x426 + new_r00);
                                                                                        evalcond[1] = (x436 + new_r01);
                                                                                        evalcond[2] = (new_r11 + ((cj1 * x426)));
                                                                                        evalcond[3] = ((((-1.0) * x427)) + new_r10);
                                                                                        evalcond[4] = ((((-1.0) * x427 * x428)) + new_r02);
                                                                                        evalcond[5] = ((((-1.0) * x426 * x428)) + new_r12);
                                                                                        evalcond[6] = (x430 + x432);
                                                                                        evalcond[7] = (((new_r12 * x427)) + (((-1.0) * new_r02 * x433)));
                                                                                        evalcond[8] = ((((-1.0) * new_r01 * x433)) + ((new_r11 * x427)));
                                                                                        evalcond[9] = (cj1 + x431 + x434);
                                                                                        evalcond[10] = ((-1.0) + (((-1.0) * new_r00 * x433)) + ((new_r10 * x427)));
                                                                                        evalcond[11] = (((cj1 * x430)) + ((cj1 * x432)));
                                                                                        evalcond[12] = ((((-1.0) * x428)) + x435 + x437);
                                                                                        evalcond[13] = ((((-1.0) * x428 * x432)) + (((-1.0) * x428 * x430)));
                                                                                        evalcond[14] = (((cj1 * x435)) + (((-1.0) * new_r22 * x428)) + ((new_r02 * x436)));
                                                                                        evalcond[15] = ((1.0) + ((cj1 * x431)) + ((cj1 * x434)) + (((-1.0) * new_r21 * x428)));
                                                                                        evalcond[16] = ((((-1.0) * x428 * x434)) + (((-1.0) * x428 * x431)) + (((-1.0) * new_r21 * x429)));
                                                                                        evalcond[17] = ((1.0) + (((-1.0) * new_r22 * x429)) + (((-1.0) * x428 * x435)) + (((-1.0) * x428 * x437)));
                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                    }

                                                                                    {
                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                        vinfos[0].jointtype = 1;
                                                                                        vinfos[0].foffset = j0;
                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                        vinfos[1].jointtype = 1;
                                                                                        vinfos[1].foffset = j1;
                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                        vinfos[2].jointtype = 1;
                                                                                        vinfos[2].foffset = j2;
                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                        vinfos[3].jointtype = 1;
                                                                                        vinfos[3].foffset = j3;
                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                        vinfos[4].jointtype = 1;
                                                                                        vinfos[4].foffset = j4;
                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                        vinfos[5].jointtype = 1;
                                                                                        vinfos[5].foffset = j5;
                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                        vinfos[6].jointtype = 1;
                                                                                        vinfos[6].foffset = j6;
                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                        std::vector<int> vfree(0);
                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } while (0);
                                                                    if (bgotonextstatement)
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j2)))), 6.28318530717959)));
                                                                            evalcond[1] = new_r20;
                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                            {
                                                                                bgotonextstatement = false;
                                                                                {
                                                                                    IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                    bool j0valid[1] = {false};
                                                                                    _nj0 = 1;
                                                                                    if (IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00) + IKsqr(((-1.0) * new_r10)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                        continue;
                                                                                    j0array[0] = IKatan2(new_r00, ((-1.0) * new_r10));
                                                                                    sj0array[0] = IKsin(j0array[0]);
                                                                                    cj0array[0] = IKcos(j0array[0]);
                                                                                    if (j0array[0] > IKPI)
                                                                                    {
                                                                                        j0array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j0array[0] < -IKPI)
                                                                                    {
                                                                                        j0array[0] += IK2PI;
                                                                                    }
                                                                                    j0valid[0] = true;
                                                                                    for (int ij0 = 0; ij0 < 1; ++ij0)
                                                                                    {
                                                                                        if (!j0valid[ij0])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij0[0] = ij0;
                                                                                        _ij0[1] = -1;
                                                                                        for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
                                                                                        {
                                                                                            if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j0valid[iij0] = false;
                                                                                                _ij0[1] = iij0;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j0 = j0array[ij0];
                                                                                        cj0 = cj0array[ij0];
                                                                                        sj0 = sj0array[ij0];
                                                                                        {
                                                                                            IkReal evalcond[18];
                                                                                            IkReal x438 = IKcos(j0);
                                                                                            IkReal x439 = IKsin(j0);
                                                                                            IkReal x440 = ((1.0) * sj1);
                                                                                            IkReal x441 = ((1.0) * cj1);
                                                                                            IkReal x442 = (new_r10 * x439);
                                                                                            IkReal x443 = (new_r01 * x438);
                                                                                            IkReal x444 = (new_r00 * x438);
                                                                                            IkReal x445 = ((1.0) * x439);
                                                                                            IkReal x446 = (new_r11 * x439);
                                                                                            IkReal x447 = (new_r12 * x439);
                                                                                            IkReal x448 = (new_r02 * x438);
                                                                                            evalcond[0] = (x438 + new_r10);
                                                                                            evalcond[1] = ((((-1.0) * x445)) + new_r00);
                                                                                            evalcond[2] = ((((-1.0) * x438 * x440)) + new_r02);
                                                                                            evalcond[3] = ((((-1.0) * x439 * x440)) + new_r12);
                                                                                            evalcond[4] = ((((-1.0) * x438 * x441)) + new_r01);
                                                                                            evalcond[5] = ((((-1.0) * x439 * x441)) + new_r11);
                                                                                            evalcond[6] = (x444 + x442);
                                                                                            evalcond[7] = (((new_r12 * x438)) + (((-1.0) * new_r02 * x445)));
                                                                                            evalcond[8] = ((((-1.0) * new_r01 * x445)) + ((new_r11 * x438)));
                                                                                            evalcond[9] = ((1.0) + (((-1.0) * new_r00 * x445)) + ((new_r10 * x438)));
                                                                                            evalcond[10] = (((cj1 * x444)) + ((cj1 * x442)));
                                                                                            evalcond[11] = ((((-1.0) * x440)) + x448 + x447);
                                                                                            evalcond[12] = ((((-1.0) * x441)) + x446 + x443);
                                                                                            evalcond[13] = ((((-1.0) * x440 * x444)) + (((-1.0) * x440 * x442)));
                                                                                            evalcond[14] = (((cj1 * x447)) + ((cj1 * x448)) + (((-1.0) * new_r22 * x440)));
                                                                                            evalcond[15] = ((-1.0) + ((cj1 * x446)) + ((cj1 * x443)) + (sj1 * sj1));
                                                                                            evalcond[16] = ((((-1.0) * x440 * x446)) + (((-1.0) * x440 * x443)) + (((-1.0) * new_r21 * x441)));
                                                                                            evalcond[17] = ((1.0) + (((-1.0) * x440 * x447)) + (((-1.0) * x440 * x448)) + (((-1.0) * new_r22 * x441)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                            vinfos[0].jointtype = 1;
                                                                                            vinfos[0].foffset = j0;
                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                            vinfos[1].jointtype = 1;
                                                                                            vinfos[1].foffset = j1;
                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                            vinfos[2].jointtype = 1;
                                                                                            vinfos[2].foffset = j2;
                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                            vinfos[3].jointtype = 1;
                                                                                            vinfos[3].foffset = j3;
                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j4;
                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j5;
                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                            vinfos[6].jointtype = 1;
                                                                                            vinfos[6].foffset = j6;
                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } while (0);
                                                                        if (bgotonextstatement)
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                                                                evalcond[1] = new_r20;
                                                                                evalcond[2] = new_r02;
                                                                                evalcond[3] = new_r12;
                                                                                evalcond[4] = new_r21;
                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 && IKabs(evalcond[4]) < 0.0000050000000000)
                                                                                {
                                                                                    bgotonextstatement = false;
                                                                                    {
                                                                                        IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                        bool j0valid[1] = {false};
                                                                                        _nj0 = 1;
                                                                                        IkReal x449 = ((1.0) * sj2);
                                                                                        if (IKabs(((((-1.0) * new_r00 * x449)) + (((-1.0) * cj2 * new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * new_r01 * x449)) + ((cj2 * new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * new_r00 * x449)) + (((-1.0) * cj2 * new_r01)))) + IKsqr(((((-1.0) * new_r01 * x449)) + ((cj2 * new_r00)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                        j0array[0] = IKatan2(((((-1.0) * new_r00 * x449)) + (((-1.0) * cj2 * new_r01))), ((((-1.0) * new_r01 * x449)) + ((cj2 * new_r00))));
                                                                                        sj0array[0] = IKsin(j0array[0]);
                                                                                        cj0array[0] = IKcos(j0array[0]);
                                                                                        if (j0array[0] > IKPI)
                                                                                        {
                                                                                            j0array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j0array[0] < -IKPI)
                                                                                        {
                                                                                            j0array[0] += IK2PI;
                                                                                        }
                                                                                        j0valid[0] = true;
                                                                                        for (int ij0 = 0; ij0 < 1; ++ij0)
                                                                                        {
                                                                                            if (!j0valid[ij0])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij0[0] = ij0;
                                                                                            _ij0[1] = -1;
                                                                                            for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
                                                                                            {
                                                                                                if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j0valid[iij0] = false;
                                                                                                    _ij0[1] = iij0;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j0 = j0array[ij0];
                                                                                            cj0 = cj0array[ij0];
                                                                                            sj0 = sj0array[ij0];
                                                                                            {
                                                                                                IkReal evalcond[8];
                                                                                                IkReal x450 = IKcos(j0);
                                                                                                IkReal x451 = IKsin(j0);
                                                                                                IkReal x452 = ((1.0) * cj2);
                                                                                                IkReal x453 = ((1.0) * sj2);
                                                                                                IkReal x454 = (sj2 * x451);
                                                                                                IkReal x455 = ((1.0) * x451);
                                                                                                IkReal x456 = (x450 * x452);
                                                                                                evalcond[0] = (sj2 + ((new_r11 * x451)) + ((new_r01 * x450)));
                                                                                                evalcond[1] = (((sj2 * x450)) + ((cj2 * x451)) + new_r01);
                                                                                                evalcond[2] = ((((-1.0) * x456)) + x454 + new_r00);
                                                                                                evalcond[3] = ((((-1.0) * x456)) + x454 + new_r11);
                                                                                                evalcond[4] = (((new_r10 * x451)) + ((new_r00 * x450)) + (((-1.0) * x452)));
                                                                                                evalcond[5] = ((((-1.0) * x450 * x453)) + (((-1.0) * x451 * x452)) + new_r10);
                                                                                                evalcond[6] = (((new_r10 * x450)) + (((-1.0) * new_r00 * x455)) + (((-1.0) * x453)));
                                                                                                evalcond[7] = (((new_r11 * x450)) + (((-1.0) * new_r01 * x455)) + (((-1.0) * x452)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                vinfos[0].jointtype = 1;
                                                                                                vinfos[0].foffset = j0;
                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                vinfos[1].jointtype = 1;
                                                                                                vinfos[1].foffset = j1;
                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                vinfos[2].jointtype = 1;
                                                                                                vinfos[2].foffset = j2;
                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                vinfos[3].jointtype = 1;
                                                                                                vinfos[3].foffset = j3;
                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                vinfos[4].jointtype = 1;
                                                                                                vinfos[4].foffset = j4;
                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                vinfos[5].jointtype = 1;
                                                                                                vinfos[5].foffset = j5;
                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                vinfos[6].jointtype = 1;
                                                                                                vinfos[6].foffset = j6;
                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                std::vector<int> vfree(0);
                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } while (0);
                                                                            if (bgotonextstatement)
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))), 6.28318530717959)));
                                                                                    evalcond[1] = new_r20;
                                                                                    evalcond[2] = new_r02;
                                                                                    evalcond[3] = new_r12;
                                                                                    evalcond[4] = new_r21;
                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 && IKabs(evalcond[4]) < 0.0000050000000000)
                                                                                    {
                                                                                        bgotonextstatement = false;
                                                                                        {
                                                                                            IkReal j0array[1], cj0array[1], sj0array[1];
                                                                                            bool j0valid[1] = {false};
                                                                                            _nj0 = 1;
                                                                                            IkReal x457 = ((1.0) * new_r00);
                                                                                            if (IKabs(((((-1.0) * sj2 * x457)) + (((-1.0) * cj2 * new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01 * sj2)) + (((-1.0) * cj2 * x457)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * sj2 * x457)) + (((-1.0) * cj2 * new_r01)))) + IKsqr((((new_r01 * sj2)) + (((-1.0) * cj2 * x457)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                continue;
                                                                                            j0array[0] = IKatan2(((((-1.0) * sj2 * x457)) + (((-1.0) * cj2 * new_r01))), (((new_r01 * sj2)) + (((-1.0) * cj2 * x457))));
                                                                                            sj0array[0] = IKsin(j0array[0]);
                                                                                            cj0array[0] = IKcos(j0array[0]);
                                                                                            if (j0array[0] > IKPI)
                                                                                            {
                                                                                                j0array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j0array[0] < -IKPI)
                                                                                            {
                                                                                                j0array[0] += IK2PI;
                                                                                            }
                                                                                            j0valid[0] = true;
                                                                                            for (int ij0 = 0; ij0 < 1; ++ij0)
                                                                                            {
                                                                                                if (!j0valid[ij0])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij0[0] = ij0;
                                                                                                _ij0[1] = -1;
                                                                                                for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
                                                                                                {
                                                                                                    if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j0valid[iij0] = false;
                                                                                                        _ij0[1] = iij0;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j0 = j0array[ij0];
                                                                                                cj0 = cj0array[ij0];
                                                                                                sj0 = sj0array[ij0];
                                                                                                {
                                                                                                    IkReal evalcond[8];
                                                                                                    IkReal x458 = IKcos(j0);
                                                                                                    IkReal x459 = IKsin(j0);
                                                                                                    IkReal x460 = ((1.0) * sj2);
                                                                                                    IkReal x461 = (cj2 * x459);
                                                                                                    IkReal x462 = (sj2 * x459);
                                                                                                    IkReal x463 = ((1.0) * x458);
                                                                                                    IkReal x464 = ((1.0) * x459);
                                                                                                    IkReal x465 = (x458 * x460);
                                                                                                    evalcond[0] = (((new_r10 * x459)) + cj2 + ((new_r00 * x458)));
                                                                                                    evalcond[1] = (((cj2 * x458)) + x462 + new_r00);
                                                                                                    evalcond[2] = ((((-1.0) * x465)) + x461 + new_r01);
                                                                                                    evalcond[3] = ((((-1.0) * x465)) + x461 + new_r10);
                                                                                                    evalcond[4] = (((new_r11 * x459)) + ((new_r01 * x458)) + (((-1.0) * x460)));
                                                                                                    evalcond[5] = ((((-1.0) * x459 * x460)) + new_r11 + (((-1.0) * cj2 * x463)));
                                                                                                    evalcond[6] = (((new_r10 * x458)) + (((-1.0) * x460)) + (((-1.0) * new_r00 * x464)));
                                                                                                    evalcond[7] = (((new_r11 * x458)) + (((-1.0) * new_r01 * x464)) + (((-1.0) * cj2)));
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                    vinfos[0].jointtype = 1;
                                                                                                    vinfos[0].foffset = j0;
                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                    vinfos[1].jointtype = 1;
                                                                                                    vinfos[1].foffset = j1;
                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                    vinfos[2].jointtype = 1;
                                                                                                    vinfos[2].foffset = j2;
                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                    vinfos[3].jointtype = 1;
                                                                                                    vinfos[3].foffset = j3;
                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                    vinfos[4].jointtype = 1;
                                                                                                    vinfos[4].foffset = j4;
                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                    vinfos[5].jointtype = 1;
                                                                                                    vinfos[5].foffset = j5;
                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                    vinfos[6].jointtype = 1;
                                                                                                    vinfos[6].foffset = j6;
                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                    std::vector<int> vfree(0);
                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } while (0);
                                                                                if (bgotonextstatement)
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        evalcond[0] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                        {
                                                                                            bgotonextstatement = false;
                                                                                            {
                                                                                                IkReal j0eval[1];
                                                                                                new_r02 = 0;
                                                                                                new_r12 = 0;
                                                                                                new_r20 = 0;
                                                                                                new_r21 = 0;
                                                                                                j0eval[0] = ((IKabs(new_r11)) + (IKabs(new_r01)));
                                                                                                if (IKabs(j0eval[0]) < 0.0000010000000000)
                                                                                                {
                                                                                                    {
                                                                                                        IkReal j0eval[1];
                                                                                                        new_r02 = 0;
                                                                                                        new_r12 = 0;
                                                                                                        new_r20 = 0;
                                                                                                        new_r21 = 0;
                                                                                                        j0eval[0] = ((IKabs(new_r10)) + (IKabs(new_r00)));
                                                                                                        if (IKabs(j0eval[0]) < 0.0000010000000000)
                                                                                                        {
                                                                                                            {
                                                                                                                IkReal j0eval[1];
                                                                                                                new_r02 = 0;
                                                                                                                new_r12 = 0;
                                                                                                                new_r20 = 0;
                                                                                                                new_r21 = 0;
                                                                                                                j0eval[0] = ((IKabs((new_r11 * new_r22))) + (IKabs((new_r01 * new_r22))));
                                                                                                                if (IKabs(j0eval[0]) < 0.0000010000000000)
                                                                                                                {
                                                                                                                    continue; // no branches [j0]
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    {
                                                                                                                        IkReal j0array[2], cj0array[2], sj0array[2];
                                                                                                                        bool j0valid[2] = {false};
                                                                                                                        _nj0 = 2;
                                                                                                                        CheckValue<IkReal> x467 = IKatan2WithCheck(IkReal((new_r01 * new_r22)), IkReal((new_r11 * new_r22)), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                        if (!x467.valid)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        IkReal x466 = x467.value;
                                                                                                                        j0array[0] = ((-1.0) * x466);
                                                                                                                        sj0array[0] = IKsin(j0array[0]);
                                                                                                                        cj0array[0] = IKcos(j0array[0]);
                                                                                                                        j0array[1] = ((3.14159265358979) + (((-1.0) * x466)));
                                                                                                                        sj0array[1] = IKsin(j0array[1]);
                                                                                                                        cj0array[1] = IKcos(j0array[1]);
                                                                                                                        if (j0array[0] > IKPI)
                                                                                                                        {
                                                                                                                            j0array[0] -= IK2PI;
                                                                                                                        }
                                                                                                                        else if (j0array[0] < -IKPI)
                                                                                                                        {
                                                                                                                            j0array[0] += IK2PI;
                                                                                                                        }
                                                                                                                        j0valid[0] = true;
                                                                                                                        if (j0array[1] > IKPI)
                                                                                                                        {
                                                                                                                            j0array[1] -= IK2PI;
                                                                                                                        }
                                                                                                                        else if (j0array[1] < -IKPI)
                                                                                                                        {
                                                                                                                            j0array[1] += IK2PI;
                                                                                                                        }
                                                                                                                        j0valid[1] = true;
                                                                                                                        for (int ij0 = 0; ij0 < 2; ++ij0)
                                                                                                                        {
                                                                                                                            if (!j0valid[ij0])
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            _ij0[0] = ij0;
                                                                                                                            _ij0[1] = -1;
                                                                                                                            for (int iij0 = ij0 + 1; iij0 < 2; ++iij0)
                                                                                                                            {
                                                                                                                                if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                {
                                                                                                                                    j0valid[iij0] = false;
                                                                                                                                    _ij0[1] = iij0;
                                                                                                                                    break;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            j0 = j0array[ij0];
                                                                                                                            cj0 = cj0array[ij0];
                                                                                                                            sj0 = sj0array[ij0];
                                                                                                                            {
                                                                                                                                IkReal evalcond[5];
                                                                                                                                IkReal x468 = IKcos(j0);
                                                                                                                                IkReal x469 = IKsin(j0);
                                                                                                                                IkReal x470 = (new_r10 * x469);
                                                                                                                                IkReal x471 = ((1.0) * x469);
                                                                                                                                IkReal x472 = (new_r00 * x468);
                                                                                                                                evalcond[0] = (((new_r11 * x469)) + ((new_r01 * x468)));
                                                                                                                                evalcond[1] = (x470 + x472);
                                                                                                                                evalcond[2] = (((new_r10 * x468)) + (((-1.0) * new_r00 * x471)));
                                                                                                                                evalcond[3] = (((new_r11 * x468)) + (((-1.0) * new_r01 * x471)));
                                                                                                                                evalcond[4] = (((new_r22 * x472)) + ((new_r22 * x470)));
                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                            }

                                                                                                                            {
                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                vinfos[0].foffset = j0;
                                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                vinfos[1].foffset = j1;
                                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                vinfos[2].foffset = j2;
                                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                vinfos[3].foffset = j3;
                                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                vinfos[4].foffset = j4;
                                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                vinfos[5].foffset = j5;
                                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                                vinfos[6].foffset = j6;
                                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                                std::vector<int> vfree(0);
                                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            {
                                                                                                                IkReal j0array[2], cj0array[2], sj0array[2];
                                                                                                                bool j0valid[2] = {false};
                                                                                                                _nj0 = 2;
                                                                                                                CheckValue<IkReal> x474 = IKatan2WithCheck(IkReal(new_r00), IkReal(new_r10), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                if (!x474.valid)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                IkReal x473 = x474.value;
                                                                                                                j0array[0] = ((-1.0) * x473);
                                                                                                                sj0array[0] = IKsin(j0array[0]);
                                                                                                                cj0array[0] = IKcos(j0array[0]);
                                                                                                                j0array[1] = ((3.14159265358979) + (((-1.0) * x473)));
                                                                                                                sj0array[1] = IKsin(j0array[1]);
                                                                                                                cj0array[1] = IKcos(j0array[1]);
                                                                                                                if (j0array[0] > IKPI)
                                                                                                                {
                                                                                                                    j0array[0] -= IK2PI;
                                                                                                                }
                                                                                                                else if (j0array[0] < -IKPI)
                                                                                                                {
                                                                                                                    j0array[0] += IK2PI;
                                                                                                                }
                                                                                                                j0valid[0] = true;
                                                                                                                if (j0array[1] > IKPI)
                                                                                                                {
                                                                                                                    j0array[1] -= IK2PI;
                                                                                                                }
                                                                                                                else if (j0array[1] < -IKPI)
                                                                                                                {
                                                                                                                    j0array[1] += IK2PI;
                                                                                                                }
                                                                                                                j0valid[1] = true;
                                                                                                                for (int ij0 = 0; ij0 < 2; ++ij0)
                                                                                                                {
                                                                                                                    if (!j0valid[ij0])
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    _ij0[0] = ij0;
                                                                                                                    _ij0[1] = -1;
                                                                                                                    for (int iij0 = ij0 + 1; iij0 < 2; ++iij0)
                                                                                                                    {
                                                                                                                        if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                                                                        {
                                                                                                                            j0valid[iij0] = false;
                                                                                                                            _ij0[1] = iij0;
                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    j0 = j0array[ij0];
                                                                                                                    cj0 = cj0array[ij0];
                                                                                                                    sj0 = sj0array[ij0];
                                                                                                                    {
                                                                                                                        IkReal evalcond[5];
                                                                                                                        IkReal x475 = IKcos(j0);
                                                                                                                        IkReal x476 = IKsin(j0);
                                                                                                                        IkReal x477 = ((1.0) * x476);
                                                                                                                        IkReal x478 = (new_r11 * x476);
                                                                                                                        IkReal x479 = (new_r22 * x475);
                                                                                                                        evalcond[0] = (((new_r01 * x475)) + x478);
                                                                                                                        evalcond[1] = (((new_r10 * x475)) + (((-1.0) * new_r00 * x477)));
                                                                                                                        evalcond[2] = (((new_r11 * x475)) + (((-1.0) * new_r01 * x477)));
                                                                                                                        evalcond[3] = (((new_r01 * x479)) + ((new_r22 * x478)));
                                                                                                                        evalcond[4] = (((new_r00 * x479)) + ((new_r10 * new_r22 * x476)));
                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }

                                                                                                                    {
                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                        std::vector<int> vfree(0);
                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    {
                                                                                                        IkReal j0array[2], cj0array[2], sj0array[2];
                                                                                                        bool j0valid[2] = {false};
                                                                                                        _nj0 = 2;
                                                                                                        CheckValue<IkReal> x481 = IKatan2WithCheck(IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                                                                        if (!x481.valid)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        IkReal x480 = x481.value;
                                                                                                        j0array[0] = ((-1.0) * x480);
                                                                                                        sj0array[0] = IKsin(j0array[0]);
                                                                                                        cj0array[0] = IKcos(j0array[0]);
                                                                                                        j0array[1] = ((3.14159265358979) + (((-1.0) * x480)));
                                                                                                        sj0array[1] = IKsin(j0array[1]);
                                                                                                        cj0array[1] = IKcos(j0array[1]);
                                                                                                        if (j0array[0] > IKPI)
                                                                                                        {
                                                                                                            j0array[0] -= IK2PI;
                                                                                                        }
                                                                                                        else if (j0array[0] < -IKPI)
                                                                                                        {
                                                                                                            j0array[0] += IK2PI;
                                                                                                        }
                                                                                                        j0valid[0] = true;
                                                                                                        if (j0array[1] > IKPI)
                                                                                                        {
                                                                                                            j0array[1] -= IK2PI;
                                                                                                        }
                                                                                                        else if (j0array[1] < -IKPI)
                                                                                                        {
                                                                                                            j0array[1] += IK2PI;
                                                                                                        }
                                                                                                        j0valid[1] = true;
                                                                                                        for (int ij0 = 0; ij0 < 2; ++ij0)
                                                                                                        {
                                                                                                            if (!j0valid[ij0])
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij0[0] = ij0;
                                                                                                            _ij0[1] = -1;
                                                                                                            for (int iij0 = ij0 + 1; iij0 < 2; ++iij0)
                                                                                                            {
                                                                                                                if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                                                                {
                                                                                                                    j0valid[iij0] = false;
                                                                                                                    _ij0[1] = iij0;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j0 = j0array[ij0];
                                                                                                            cj0 = cj0array[ij0];
                                                                                                            sj0 = sj0array[ij0];
                                                                                                            {
                                                                                                                IkReal evalcond[5];
                                                                                                                IkReal x482 = IKcos(j0);
                                                                                                                IkReal x483 = IKsin(j0);
                                                                                                                IkReal x484 = (new_r10 * x483);
                                                                                                                IkReal x485 = ((1.0) * x483);
                                                                                                                IkReal x486 = (new_r00 * x482);
                                                                                                                evalcond[0] = (x484 + x486);
                                                                                                                evalcond[1] = ((((-1.0) * new_r00 * x485)) + ((new_r10 * x482)));
                                                                                                                evalcond[2] = ((((-1.0) * new_r01 * x485)) + ((new_r11 * x482)));
                                                                                                                evalcond[3] = (((new_r11 * new_r22 * x483)) + ((new_r01 * new_r22 * x482)));
                                                                                                                evalcond[4] = (((new_r22 * x484)) + ((new_r22 * x486)));
                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                            }

                                                                                                            {
                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                vinfos[0].foffset = j0;
                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                vinfos[1].foffset = j1;
                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                vinfos[2].foffset = j2;
                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                vinfos[3].foffset = j3;
                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                vinfos[4].foffset = j4;
                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                vinfos[5].foffset = j5;
                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                vinfos[6].foffset = j6;
                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                std::vector<int> vfree(0);
                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } while (0);
                                                                                    if (bgotonextstatement)
                                                                                    {
                                                                                        bool bgotonextstatement = true;
                                                                                        do
                                                                                        {
                                                                                            if (1)
                                                                                            {
                                                                                                bgotonextstatement = false;
                                                                                                continue; // branch miss [j0]
                                                                                            }
                                                                                        } while (0);
                                                                                        if (bgotonextstatement)
                                                                                        {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j0array[1], cj0array[1], sj0array[1];
                                                                    bool j0valid[1] = {false};
                                                                    _nj0 = 1;
                                                                    CheckValue<IkReal> x488 = IKPowWithIntegerCheck(sj1, -1);
                                                                    if (!x488.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    IkReal x487 = x488.value;
                                                                    CheckValue<IkReal> x489 = IKPowWithIntegerCheck(cj2, -1);
                                                                    if (!x489.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    if (IKabs((x487 * (x489.value) * (((((-1.0) * new_r01 * sj1)) + (((-1.0) * cj1 * new_r02 * sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02 * x487)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x487 * (x489.value) * (((((-1.0) * new_r01 * sj1)) + (((-1.0) * cj1 * new_r02 * sj2)))))) + IKsqr((new_r02 * x487)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                    j0array[0] = IKatan2((x487 * (x489.value) * (((((-1.0) * new_r01 * sj1)) + (((-1.0) * cj1 * new_r02 * sj2))))), (new_r02 * x487));
                                                                    sj0array[0] = IKsin(j0array[0]);
                                                                    cj0array[0] = IKcos(j0array[0]);
                                                                    if (j0array[0] > IKPI)
                                                                    {
                                                                        j0array[0] -= IK2PI;
                                                                    }
                                                                    else if (j0array[0] < -IKPI)
                                                                    {
                                                                        j0array[0] += IK2PI;
                                                                    }
                                                                    j0valid[0] = true;
                                                                    for (int ij0 = 0; ij0 < 1; ++ij0)
                                                                    {
                                                                        if (!j0valid[ij0])
                                                                        {
                                                                            continue;
                                                                        }
                                                                        _ij0[0] = ij0;
                                                                        _ij0[1] = -1;
                                                                        for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
                                                                        {
                                                                            if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                            {
                                                                                j0valid[iij0] = false;
                                                                                _ij0[1] = iij0;
                                                                                break;
                                                                            }
                                                                        }
                                                                        j0 = j0array[ij0];
                                                                        cj0 = cj0array[ij0];
                                                                        sj0 = sj0array[ij0];
                                                                        {
                                                                            IkReal evalcond[18];
                                                                            IkReal x490 = IKcos(j0);
                                                                            IkReal x491 = IKsin(j0);
                                                                            IkReal x492 = ((1.0) * cj2);
                                                                            IkReal x493 = ((1.0) * sj1);
                                                                            IkReal x494 = ((1.0) * cj1);
                                                                            IkReal x495 = ((1.0) * sj2);
                                                                            IkReal x496 = (new_r10 * x491);
                                                                            IkReal x497 = (new_r01 * x490);
                                                                            IkReal x498 = (new_r00 * x490);
                                                                            IkReal x499 = ((1.0) * x491);
                                                                            IkReal x500 = (new_r11 * x491);
                                                                            IkReal x501 = (new_r12 * x491);
                                                                            IkReal x502 = (sj2 * x491);
                                                                            IkReal x503 = (cj1 * x490);
                                                                            IkReal x504 = (cj2 * x491);
                                                                            IkReal x505 = (new_r02 * x490);
                                                                            evalcond[0] = ((((-1.0) * x490 * x493)) + new_r02);
                                                                            evalcond[1] = ((((-1.0) * x491 * x493)) + new_r12);
                                                                            evalcond[2] = ((((-1.0) * new_r02 * x499)) + ((new_r12 * x490)));
                                                                            evalcond[3] = (((sj2 * x503)) + x504 + new_r01);
                                                                            evalcond[4] = ((((-1.0) * x493)) + x501 + x505);
                                                                            evalcond[5] = (((cj1 * sj2)) + x497 + x500);
                                                                            evalcond[6] = (x502 + (((-1.0) * x492 * x503)) + new_r00);
                                                                            evalcond[7] = (((cj1 * x502)) + (((-1.0) * x490 * x492)) + new_r11);
                                                                            evalcond[8] = ((((-1.0) * new_r00 * x499)) + (((-1.0) * x495)) + ((new_r10 * x490)));
                                                                            evalcond[9] = ((((-1.0) * x492)) + (((-1.0) * new_r01 * x499)) + ((new_r11 * x490)));
                                                                            evalcond[10] = ((((-1.0) * cj1 * x492)) + x498 + x496);
                                                                            evalcond[11] = ((((-1.0) * x490 * x495)) + (((-1.0) * cj1 * x491 * x492)) + new_r10);
                                                                            evalcond[12] = (((cj1 * x501)) + ((new_r02 * x503)) + (((-1.0) * new_r22 * x493)));
                                                                            evalcond[13] = (sj2 + ((cj1 * x500)) + (((-1.0) * new_r21 * x493)) + ((cj1 * x497)));
                                                                            evalcond[14] = ((((-1.0) * new_r20 * x494)) + (((-1.0) * x493 * x498)) + (((-1.0) * x493 * x496)));
                                                                            evalcond[15] = ((((-1.0) * new_r21 * x494)) + (((-1.0) * x493 * x497)) + (((-1.0) * x493 * x500)));
                                                                            evalcond[16] = ((1.0) + (((-1.0) * x493 * x505)) + (((-1.0) * x493 * x501)) + (((-1.0) * new_r22 * x494)));
                                                                            evalcond[17] = ((((-1.0) * new_r20 * x493)) + (((-1.0) * x492)) + ((cj1 * x498)) + ((cj1 * x496)));
                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH)
                                                                            {
                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 1;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 1;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 1;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            vinfos[6].jointtype = 1;
                                                                            vinfos[6].foffset = j6;
                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                            vinfos[6].maxsolutions = _nj6;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        {
                                                            IkReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1] = {false};
                                                            _nj0 = 1;
                                                            CheckValue<IkReal> x506 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                                            if (!x506.valid)
                                                            {
                                                                continue;
                                                            }
                                                            CheckValue<IkReal> x507 = IKatan2WithCheck(IkReal(new_r12), IkReal(new_r02), IKFAST_ATAN2_MAGTHRESH);
                                                            if (!x507.valid)
                                                            {
                                                                continue;
                                                            }
                                                            j0array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x506.value))) + (x507.value));
                                                            sj0array[0] = IKsin(j0array[0]);
                                                            cj0array[0] = IKcos(j0array[0]);
                                                            if (j0array[0] > IKPI)
                                                            {
                                                                j0array[0] -= IK2PI;
                                                            }
                                                            else if (j0array[0] < -IKPI)
                                                            {
                                                                j0array[0] += IK2PI;
                                                            }
                                                            j0valid[0] = true;
                                                            for (int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                                if (!j0valid[ij0])
                                                                {
                                                                    continue;
                                                                }
                                                                _ij0[0] = ij0;
                                                                _ij0[1] = -1;
                                                                for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
                                                                {
                                                                    if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                                                    {
                                                                        j0valid[iij0] = false;
                                                                        _ij0[1] = iij0;
                                                                        break;
                                                                    }
                                                                }
                                                                j0 = j0array[ij0];
                                                                cj0 = cj0array[ij0];
                                                                sj0 = sj0array[ij0];
                                                                {
                                                                    IkReal evalcond[18];
                                                                    IkReal x508 = IKcos(j0);
                                                                    IkReal x509 = IKsin(j0);
                                                                    IkReal x510 = ((1.0) * cj2);
                                                                    IkReal x511 = ((1.0) * sj1);
                                                                    IkReal x512 = ((1.0) * cj1);
                                                                    IkReal x513 = ((1.0) * sj2);
                                                                    IkReal x514 = (new_r10 * x509);
                                                                    IkReal x515 = (new_r01 * x508);
                                                                    IkReal x516 = (new_r00 * x508);
                                                                    IkReal x517 = ((1.0) * x509);
                                                                    IkReal x518 = (new_r11 * x509);
                                                                    IkReal x519 = (new_r12 * x509);
                                                                    IkReal x520 = (sj2 * x509);
                                                                    IkReal x521 = (cj1 * x508);
                                                                    IkReal x522 = (cj2 * x509);
                                                                    IkReal x523 = (new_r02 * x508);
                                                                    evalcond[0] = (new_r02 + (((-1.0) * x508 * x511)));
                                                                    evalcond[1] = (new_r12 + (((-1.0) * x509 * x511)));
                                                                    evalcond[2] = (((new_r12 * x508)) + (((-1.0) * new_r02 * x517)));
                                                                    evalcond[3] = (((sj2 * x521)) + x522 + new_r01);
                                                                    evalcond[4] = (x523 + x519 + (((-1.0) * x511)));
                                                                    evalcond[5] = (((cj1 * sj2)) + x518 + x515);
                                                                    evalcond[6] = (x520 + new_r00 + (((-1.0) * x510 * x521)));
                                                                    evalcond[7] = (((cj1 * x520)) + new_r11 + (((-1.0) * x508 * x510)));
                                                                    evalcond[8] = (((new_r10 * x508)) + (((-1.0) * new_r00 * x517)) + (((-1.0) * x513)));
                                                                    evalcond[9] = (((new_r11 * x508)) + (((-1.0) * new_r01 * x517)) + (((-1.0) * x510)));
                                                                    evalcond[10] = ((((-1.0) * cj1 * x510)) + x516 + x514);
                                                                    evalcond[11] = ((((-1.0) * cj1 * x509 * x510)) + new_r10 + (((-1.0) * x508 * x513)));
                                                                    evalcond[12] = (((new_r02 * x521)) + (((-1.0) * new_r22 * x511)) + ((cj1 * x519)));
                                                                    evalcond[13] = (sj2 + ((cj1 * x518)) + ((cj1 * x515)) + (((-1.0) * new_r21 * x511)));
                                                                    evalcond[14] = ((((-1.0) * x511 * x516)) + (((-1.0) * x511 * x514)) + (((-1.0) * new_r20 * x512)));
                                                                    evalcond[15] = ((((-1.0) * x511 * x518)) + (((-1.0) * x511 * x515)) + (((-1.0) * new_r21 * x512)));
                                                                    evalcond[16] = ((1.0) + (((-1.0) * x511 * x519)) + (((-1.0) * x511 * x523)) + (((-1.0) * new_r22 * x512)));
                                                                    evalcond[17] = (((cj1 * x514)) + ((cj1 * x516)) + (((-1.0) * new_r20 * x511)) + (((-1.0) * x510)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH)
                                                                    {
                                                                        continue;
                                                                    }
                                                                }

                                                                {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 1;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 1;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 1;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    vinfos[6].jointtype = 1;
                                                                    vinfos[6].foffset = j6;
                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                    vinfos[6].maxsolutions = _nj6;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                {
                                    IkReal j0array[1], cj0array[1], sj0array[1];
                                    bool j0valid[1] = {false};
                                    _nj0 = 1;
                                    CheckValue<IkReal> x524 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                    if (!x524.valid)
                                    {
                                        continue;
                                    }
                                    CheckValue<IkReal> x525 = IKatan2WithCheck(IkReal(new_r12), IkReal(new_r02), IKFAST_ATAN2_MAGTHRESH);
                                    if (!x525.valid)
                                    {
                                        continue;
                                    }
                                    j0array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x524.value))) + (x525.value));
                                    sj0array[0] = IKsin(j0array[0]);
                                    cj0array[0] = IKcos(j0array[0]);
                                    if (j0array[0] > IKPI)
                                    {
                                        j0array[0] -= IK2PI;
                                    }
                                    else if (j0array[0] < -IKPI)
                                    {
                                        j0array[0] += IK2PI;
                                    }
                                    j0valid[0] = true;
                                    for (int ij0 = 0; ij0 < 1; ++ij0)
                                    {
                                        if (!j0valid[ij0])
                                        {
                                            continue;
                                        }
                                        _ij0[0] = ij0;
                                        _ij0[1] = -1;
                                        for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
                                        {
                                            if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                                            {
                                                j0valid[iij0] = false;
                                                _ij0[1] = iij0;
                                                break;
                                            }
                                        }
                                        j0 = j0array[ij0];
                                        cj0 = cj0array[ij0];
                                        sj0 = sj0array[ij0];
                                        {
                                            IkReal evalcond[8];
                                            IkReal x526 = IKcos(j0);
                                            IkReal x527 = IKsin(j0);
                                            IkReal x528 = ((1.0) * cj1);
                                            IkReal x529 = ((1.0) * sj1);
                                            IkReal x530 = (new_r12 * x527);
                                            IkReal x531 = (new_r02 * x526);
                                            evalcond[0] = ((((-1.0) * x526 * x529)) + new_r02);
                                            evalcond[1] = ((((-1.0) * x527 * x529)) + new_r12);
                                            evalcond[2] = (((new_r12 * x526)) + (((-1.0) * new_r02 * x527)));
                                            evalcond[3] = ((((-1.0) * x529)) + x531 + x530);
                                            evalcond[4] = ((((-1.0) * new_r22 * x529)) + ((cj1 * x530)) + ((cj1 * x531)));
                                            evalcond[5] = ((((-1.0) * new_r00 * x526 * x529)) + (((-1.0) * new_r20 * x528)) + (((-1.0) * new_r10 * x527 * x529)));
                                            evalcond[6] = ((((-1.0) * new_r21 * x528)) + (((-1.0) * new_r01 * x526 * x529)) + (((-1.0) * new_r11 * x527 * x529)));
                                            evalcond[7] = ((1.0) + (((-1.0) * new_r22 * x528)) + (((-1.0) * x529 * x530)) + (((-1.0) * x529 * x531)));
                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                            {
                                                continue;
                                            }
                                        }

                                        {
                                            IkReal j2eval[3];
                                            j2eval[0] = sj1;
                                            j2eval[1] = IKsign(sj1);
                                            j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                            if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                            {
                                                {
                                                    IkReal j2eval[2];
                                                    j2eval[0] = sj0;
                                                    j2eval[1] = sj1;
                                                    if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                    {
                                                        {
                                                            IkReal j2eval[3];
                                                            j2eval[0] = cj0;
                                                            j2eval[1] = cj1;
                                                            j2eval[2] = sj1;
                                                            if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                            {
                                                                {
                                                                    IkReal evalcond[5];
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j0)))), 6.28318530717959)));
                                                                        evalcond[1] = new_r02;
                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                        {
                                                                            bgotonextstatement = false;
                                                                            {
                                                                                IkReal j2eval[3];
                                                                                sj0 = 1.0;
                                                                                cj0 = 0;
                                                                                j0 = 1.5707963267949;
                                                                                j2eval[0] = sj1;
                                                                                j2eval[1] = IKsign(sj1);
                                                                                j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                                if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                                                {
                                                                                    {
                                                                                        IkReal j2eval[3];
                                                                                        sj0 = 1.0;
                                                                                        cj0 = 0;
                                                                                        j0 = 1.5707963267949;
                                                                                        j2eval[0] = cj1;
                                                                                        j2eval[1] = IKsign(cj1);
                                                                                        j2eval[2] = ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                                        if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                                                        {
                                                                                            {
                                                                                                IkReal j2eval[1];
                                                                                                sj0 = 1.0;
                                                                                                cj0 = 0;
                                                                                                j0 = 1.5707963267949;
                                                                                                j2eval[0] = sj1;
                                                                                                if (IKabs(j2eval[0]) < 0.0000010000000000)
                                                                                                {
                                                                                                    {
                                                                                                        IkReal evalcond[4];
                                                                                                        bool bgotonextstatement = true;
                                                                                                        do
                                                                                                        {
                                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                                                                                            evalcond[1] = new_r20;
                                                                                                            evalcond[2] = new_r12;
                                                                                                            evalcond[3] = new_r21;
                                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                            {
                                                                                                                bgotonextstatement = false;
                                                                                                                {
                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                    bool j2valid[1] = {false};
                                                                                                                    _nj2 = 1;
                                                                                                                    if (IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r11)) + IKsqr(new_r10) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                        continue;
                                                                                                                    j2array[0] = IKatan2(((-1.0) * new_r11), new_r10);
                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                    {
                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                    {
                                                                                                                        j2array[0] += IK2PI;
                                                                                                                    }
                                                                                                                    j2valid[0] = true;
                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                    {
                                                                                                                        if (!j2valid[ij2])
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        _ij2[0] = ij2;
                                                                                                                        _ij2[1] = -1;
                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                        {
                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                            {
                                                                                                                                j2valid[iij2] = false;
                                                                                                                                _ij2[1] = iij2;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        j2 = j2array[ij2];
                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                        {
                                                                                                                            IkReal evalcond[4];
                                                                                                                            IkReal x532 = IKsin(j2);
                                                                                                                            IkReal x533 = ((1.0) * (IKcos(j2)));
                                                                                                                            evalcond[0] = (x532 + new_r11);
                                                                                                                            evalcond[1] = ((((-1.0) * x533)) + new_r10);
                                                                                                                            evalcond[2] = ((((-1.0) * x532)) + (((-1.0) * new_r00)));
                                                                                                                            evalcond[3] = ((((-1.0) * x533)) + (((-1.0) * new_r01)));
                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        {
                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                            std::vector<int> vfree(0);
                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        } while (0);
                                                                                                        if (bgotonextstatement)
                                                                                                        {
                                                                                                            bool bgotonextstatement = true;
                                                                                                            do
                                                                                                            {
                                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))), 6.28318530717959)));
                                                                                                                evalcond[1] = new_r20;
                                                                                                                evalcond[2] = new_r12;
                                                                                                                evalcond[3] = new_r21;
                                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                {
                                                                                                                    bgotonextstatement = false;
                                                                                                                    {
                                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                        bool j2valid[1] = {false};
                                                                                                                        _nj2 = 1;
                                                                                                                        if (IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11) + IKsqr(((-1.0) * new_r10)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                            continue;
                                                                                                                        j2array[0] = IKatan2(new_r11, ((-1.0) * new_r10));
                                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                                        if (j2array[0] > IKPI)
                                                                                                                        {
                                                                                                                            j2array[0] -= IK2PI;
                                                                                                                        }
                                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                                        {
                                                                                                                            j2array[0] += IK2PI;
                                                                                                                        }
                                                                                                                        j2valid[0] = true;
                                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                        {
                                                                                                                            if (!j2valid[ij2])
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            _ij2[0] = ij2;
                                                                                                                            _ij2[1] = -1;
                                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                            {
                                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                {
                                                                                                                                    j2valid[iij2] = false;
                                                                                                                                    _ij2[1] = iij2;
                                                                                                                                    break;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            j2 = j2array[ij2];
                                                                                                                            cj2 = cj2array[ij2];
                                                                                                                            sj2 = sj2array[ij2];
                                                                                                                            {
                                                                                                                                IkReal evalcond[4];
                                                                                                                                IkReal x534 = IKcos(j2);
                                                                                                                                IkReal x535 = ((1.0) * (IKsin(j2)));
                                                                                                                                evalcond[0] = (x534 + new_r10);
                                                                                                                                evalcond[1] = ((((-1.0) * x535)) + new_r11);
                                                                                                                                evalcond[2] = ((((-1.0) * x535)) + (((-1.0) * new_r00)));
                                                                                                                                evalcond[3] = ((((-1.0) * x534)) + (((-1.0) * new_r01)));
                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                            }

                                                                                                                            {
                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                vinfos[0].foffset = j0;
                                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                vinfos[1].foffset = j1;
                                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                vinfos[2].foffset = j2;
                                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                vinfos[3].foffset = j3;
                                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                vinfos[4].foffset = j4;
                                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                vinfos[5].foffset = j5;
                                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                                vinfos[6].foffset = j6;
                                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                                std::vector<int> vfree(0);
                                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            } while (0);
                                                                                                            if (bgotonextstatement)
                                                                                                            {
                                                                                                                bool bgotonextstatement = true;
                                                                                                                do
                                                                                                                {
                                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                                                    evalcond[1] = new_r22;
                                                                                                                    evalcond[2] = new_r11;
                                                                                                                    evalcond[3] = new_r10;
                                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                    {
                                                                                                                        bgotonextstatement = false;
                                                                                                                        {
                                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                            bool j2valid[1] = {false};
                                                                                                                            _nj2 = 1;
                                                                                                                            if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21) + IKsqr(((-1.0) * new_r20)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                continue;
                                                                                                                            j2array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                                            if (j2array[0] > IKPI)
                                                                                                                            {
                                                                                                                                j2array[0] -= IK2PI;
                                                                                                                            }
                                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                                            {
                                                                                                                                j2array[0] += IK2PI;
                                                                                                                            }
                                                                                                                            j2valid[0] = true;
                                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                            {
                                                                                                                                if (!j2valid[ij2])
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                _ij2[0] = ij2;
                                                                                                                                _ij2[1] = -1;
                                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                {
                                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                    {
                                                                                                                                        j2valid[iij2] = false;
                                                                                                                                        _ij2[1] = iij2;
                                                                                                                                        break;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                j2 = j2array[ij2];
                                                                                                                                cj2 = cj2array[ij2];
                                                                                                                                sj2 = sj2array[ij2];
                                                                                                                                {
                                                                                                                                    IkReal evalcond[4];
                                                                                                                                    IkReal x536 = IKcos(j2);
                                                                                                                                    IkReal x537 = ((1.0) * (IKsin(j2)));
                                                                                                                                    evalcond[0] = (x536 + new_r20);
                                                                                                                                    evalcond[1] = ((((-1.0) * x537)) + new_r21);
                                                                                                                                    evalcond[2] = ((((-1.0) * x537)) + (((-1.0) * new_r00)));
                                                                                                                                    evalcond[3] = ((((-1.0) * x536)) + (((-1.0) * new_r01)));
                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                }

                                                                                                                                {
                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                                    std::vector<int> vfree(0);
                                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                } while (0);
                                                                                                                if (bgotonextstatement)
                                                                                                                {
                                                                                                                    bool bgotonextstatement = true;
                                                                                                                    do
                                                                                                                    {
                                                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                                                        evalcond[1] = new_r22;
                                                                                                                        evalcond[2] = new_r11;
                                                                                                                        evalcond[3] = new_r10;
                                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                        {
                                                                                                                            bgotonextstatement = false;
                                                                                                                            {
                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                _nj2 = 1;
                                                                                                                                if (IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r21)) + IKsqr(new_r20) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                    continue;
                                                                                                                                j2array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                {
                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                }
                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                {
                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                }
                                                                                                                                j2valid[0] = true;
                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                {
                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                    _ij2[1] = -1;
                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                    {
                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                        {
                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                            break;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                    {
                                                                                                                                        IkReal evalcond[4];
                                                                                                                                        IkReal x538 = IKsin(j2);
                                                                                                                                        IkReal x539 = ((1.0) * (IKcos(j2)));
                                                                                                                                        evalcond[0] = (x538 + new_r21);
                                                                                                                                        evalcond[1] = ((((-1.0) * x539)) + new_r20);
                                                                                                                                        evalcond[2] = ((((-1.0) * x538)) + (((-1.0) * new_r00)));
                                                                                                                                        evalcond[3] = ((((-1.0) * x539)) + (((-1.0) * new_r01)));
                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                    }

                                                                                                                                    {
                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    } while (0);
                                                                                                                    if (bgotonextstatement)
                                                                                                                    {
                                                                                                                        bool bgotonextstatement = true;
                                                                                                                        do
                                                                                                                        {
                                                                                                                            evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                            {
                                                                                                                                bgotonextstatement = false;
                                                                                                                                {
                                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                    bool j2valid[1] = {false};
                                                                                                                                    _nj2 = 1;
                                                                                                                                    if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r00)) + IKsqr(((-1.0) * new_r01)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                        continue;
                                                                                                                                    j2array[0] = IKatan2(((-1.0) * new_r00), ((-1.0) * new_r01));
                                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                                    {
                                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                                    }
                                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                                    {
                                                                                                                                        j2array[0] += IK2PI;
                                                                                                                                    }
                                                                                                                                    j2valid[0] = true;
                                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                    {
                                                                                                                                        if (!j2valid[ij2])
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        _ij2[0] = ij2;
                                                                                                                                        _ij2[1] = -1;
                                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                        {
                                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                            {
                                                                                                                                                j2valid[iij2] = false;
                                                                                                                                                _ij2[1] = iij2;
                                                                                                                                                break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        j2 = j2array[ij2];
                                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                                        {
                                                                                                                                            IkReal evalcond[6];
                                                                                                                                            IkReal x540 = IKsin(j2);
                                                                                                                                            IkReal x541 = IKcos(j2);
                                                                                                                                            IkReal x542 = ((-1.0) * x541);
                                                                                                                                            evalcond[0] = x540;
                                                                                                                                            evalcond[1] = (new_r22 * x540);
                                                                                                                                            evalcond[2] = x542;
                                                                                                                                            evalcond[3] = (new_r22 * x542);
                                                                                                                                            evalcond[4] = ((((-1.0) * x540)) + (((-1.0) * new_r00)));
                                                                                                                                            evalcond[5] = ((((-1.0) * x541)) + (((-1.0) * new_r01)));
                                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                        }

                                                                                                                                        {
                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                                            std::vector<int> vfree(0);
                                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } while (0);
                                                                                                                        if (bgotonextstatement)
                                                                                                                        {
                                                                                                                            bool bgotonextstatement = true;
                                                                                                                            do
                                                                                                                            {
                                                                                                                                if (1)
                                                                                                                                {
                                                                                                                                    bgotonextstatement = false;
                                                                                                                                    continue; // branch miss [j2]
                                                                                                                                }
                                                                                                                            } while (0);
                                                                                                                            if (bgotonextstatement)
                                                                                                                            {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    {
                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                        bool j2valid[1] = {false};
                                                                                                        _nj2 = 1;
                                                                                                        CheckValue<IkReal> x543 = IKPowWithIntegerCheck(sj1, -1);
                                                                                                        if (!x543.valid)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        if (IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20 * (x543.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r00)) + IKsqr(((-1.0) * new_r20 * (x543.value))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                            continue;
                                                                                                        j2array[0] = IKatan2(((-1.0) * new_r00), ((-1.0) * new_r20 * (x543.value)));
                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                        if (j2array[0] > IKPI)
                                                                                                        {
                                                                                                            j2array[0] -= IK2PI;
                                                                                                        }
                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                        {
                                                                                                            j2array[0] += IK2PI;
                                                                                                        }
                                                                                                        j2valid[0] = true;
                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                        {
                                                                                                            if (!j2valid[ij2])
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij2[0] = ij2;
                                                                                                            _ij2[1] = -1;
                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                            {
                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                {
                                                                                                                    j2valid[iij2] = false;
                                                                                                                    _ij2[1] = iij2;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j2 = j2array[ij2];
                                                                                                            cj2 = cj2array[ij2];
                                                                                                            sj2 = sj2array[ij2];
                                                                                                            {
                                                                                                                IkReal evalcond[8];
                                                                                                                IkReal x544 = IKsin(j2);
                                                                                                                IkReal x545 = IKcos(j2);
                                                                                                                IkReal x546 = ((1.0) * sj1);
                                                                                                                IkReal x547 = ((1.0) * x545);
                                                                                                                evalcond[0] = (((sj1 * x545)) + new_r20);
                                                                                                                evalcond[1] = (((cj1 * x544)) + new_r11);
                                                                                                                evalcond[2] = ((((-1.0) * x544 * x546)) + new_r21);
                                                                                                                evalcond[3] = ((((-1.0) * cj1 * x547)) + new_r10);
                                                                                                                evalcond[4] = ((((-1.0) * x544)) + (((-1.0) * new_r00)));
                                                                                                                evalcond[5] = ((((-1.0) * x547)) + (((-1.0) * new_r01)));
                                                                                                                evalcond[6] = (((cj1 * new_r11)) + (((-1.0) * new_r21 * x546)) + x544);
                                                                                                                evalcond[7] = (((cj1 * new_r10)) + (((-1.0) * new_r20 * x546)) + (((-1.0) * x547)));
                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                            }

                                                                                                            {
                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                vinfos[0].foffset = j0;
                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                vinfos[1].foffset = j1;
                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                vinfos[2].foffset = j2;
                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                vinfos[3].foffset = j3;
                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                vinfos[4].foffset = j4;
                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                vinfos[5].foffset = j5;
                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                vinfos[6].foffset = j6;
                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                std::vector<int> vfree(0);
                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            {
                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                bool j2valid[1] = {false};
                                                                                                _nj2 = 1;
                                                                                                CheckValue<IkReal> x548 = IKPowWithIntegerCheck(IKsign(cj1), -1);
                                                                                                if (!x548.valid)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                CheckValue<IkReal> x549 = IKatan2WithCheck(IkReal(((-1.0) * new_r11)), IkReal(new_r10), IKFAST_ATAN2_MAGTHRESH);
                                                                                                if (!x549.valid)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x548.value))) + (x549.value));
                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                if (j2array[0] > IKPI)
                                                                                                {
                                                                                                    j2array[0] -= IK2PI;
                                                                                                }
                                                                                                else if (j2array[0] < -IKPI)
                                                                                                {
                                                                                                    j2array[0] += IK2PI;
                                                                                                }
                                                                                                j2valid[0] = true;
                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                {
                                                                                                    if (!j2valid[ij2])
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij2[0] = ij2;
                                                                                                    _ij2[1] = -1;
                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                    {
                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                        {
                                                                                                            j2valid[iij2] = false;
                                                                                                            _ij2[1] = iij2;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j2 = j2array[ij2];
                                                                                                    cj2 = cj2array[ij2];
                                                                                                    sj2 = sj2array[ij2];
                                                                                                    {
                                                                                                        IkReal evalcond[8];
                                                                                                        IkReal x550 = IKsin(j2);
                                                                                                        IkReal x551 = IKcos(j2);
                                                                                                        IkReal x552 = ((1.0) * sj1);
                                                                                                        IkReal x553 = ((1.0) * x551);
                                                                                                        evalcond[0] = (((sj1 * x551)) + new_r20);
                                                                                                        evalcond[1] = (((cj1 * x550)) + new_r11);
                                                                                                        evalcond[2] = ((((-1.0) * x550 * x552)) + new_r21);
                                                                                                        evalcond[3] = ((((-1.0) * cj1 * x553)) + new_r10);
                                                                                                        evalcond[4] = ((((-1.0) * x550)) + (((-1.0) * new_r00)));
                                                                                                        evalcond[5] = ((((-1.0) * x553)) + (((-1.0) * new_r01)));
                                                                                                        evalcond[6] = ((((-1.0) * new_r21 * x552)) + ((cj1 * new_r11)) + x550);
                                                                                                        evalcond[7] = (((cj1 * new_r10)) + (((-1.0) * x553)) + (((-1.0) * new_r20 * x552)));
                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                        vinfos[0].jointtype = 1;
                                                                                                        vinfos[0].foffset = j0;
                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                        vinfos[1].jointtype = 1;
                                                                                                        vinfos[1].foffset = j1;
                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                        vinfos[2].jointtype = 1;
                                                                                                        vinfos[2].foffset = j2;
                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                        vinfos[3].jointtype = 1;
                                                                                                        vinfos[3].foffset = j3;
                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                        vinfos[4].jointtype = 1;
                                                                                                        vinfos[4].foffset = j4;
                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                        vinfos[5].jointtype = 1;
                                                                                                        vinfos[5].foffset = j5;
                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                        vinfos[6].jointtype = 1;
                                                                                                        vinfos[6].foffset = j6;
                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                        std::vector<int> vfree(0);
                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    {
                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                        bool j2valid[1] = {false};
                                                                                        _nj2 = 1;
                                                                                        CheckValue<IkReal> x554 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                                                                        if (!x554.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        CheckValue<IkReal> x555 = IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (!x555.valid)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x554.value))) + (x555.value));
                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                        if (j2array[0] > IKPI)
                                                                                        {
                                                                                            j2array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j2array[0] < -IKPI)
                                                                                        {
                                                                                            j2array[0] += IK2PI;
                                                                                        }
                                                                                        j2valid[0] = true;
                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                        {
                                                                                            if (!j2valid[ij2])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij2[0] = ij2;
                                                                                            _ij2[1] = -1;
                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                            {
                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j2valid[iij2] = false;
                                                                                                    _ij2[1] = iij2;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j2 = j2array[ij2];
                                                                                            cj2 = cj2array[ij2];
                                                                                            sj2 = sj2array[ij2];
                                                                                            {
                                                                                                IkReal evalcond[8];
                                                                                                IkReal x556 = IKsin(j2);
                                                                                                IkReal x557 = IKcos(j2);
                                                                                                IkReal x558 = ((1.0) * sj1);
                                                                                                IkReal x559 = ((1.0) * x557);
                                                                                                evalcond[0] = (((sj1 * x557)) + new_r20);
                                                                                                evalcond[1] = (((cj1 * x556)) + new_r11);
                                                                                                evalcond[2] = ((((-1.0) * x556 * x558)) + new_r21);
                                                                                                evalcond[3] = ((((-1.0) * cj1 * x559)) + new_r10);
                                                                                                evalcond[4] = ((((-1.0) * x556)) + (((-1.0) * new_r00)));
                                                                                                evalcond[5] = ((((-1.0) * x559)) + (((-1.0) * new_r01)));
                                                                                                evalcond[6] = ((((-1.0) * new_r21 * x558)) + ((cj1 * new_r11)) + x556);
                                                                                                evalcond[7] = (((cj1 * new_r10)) + (((-1.0) * x559)) + (((-1.0) * new_r20 * x558)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                vinfos[0].jointtype = 1;
                                                                                                vinfos[0].foffset = j0;
                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                vinfos[1].jointtype = 1;
                                                                                                vinfos[1].foffset = j1;
                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                vinfos[2].jointtype = 1;
                                                                                                vinfos[2].foffset = j2;
                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                vinfos[3].jointtype = 1;
                                                                                                vinfos[3].foffset = j3;
                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                vinfos[4].jointtype = 1;
                                                                                                vinfos[4].foffset = j4;
                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                vinfos[5].jointtype = 1;
                                                                                                vinfos[5].foffset = j5;
                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                vinfos[6].jointtype = 1;
                                                                                                vinfos[6].foffset = j6;
                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                std::vector<int> vfree(0);
                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    } while (0);
                                                                    if (bgotonextstatement)
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j0)))), 6.28318530717959)));
                                                                            evalcond[1] = new_r02;
                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                            {
                                                                                bgotonextstatement = false;
                                                                                {
                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                    bool j2valid[1] = {false};
                                                                                    _nj2 = 1;
                                                                                    if (IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00) + IKsqr(new_r01) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                        continue;
                                                                                    j2array[0] = IKatan2(new_r00, new_r01);
                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                    if (j2array[0] > IKPI)
                                                                                    {
                                                                                        j2array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j2array[0] < -IKPI)
                                                                                    {
                                                                                        j2array[0] += IK2PI;
                                                                                    }
                                                                                    j2valid[0] = true;
                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                    {
                                                                                        if (!j2valid[ij2])
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij2[0] = ij2;
                                                                                        _ij2[1] = -1;
                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                        {
                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                                j2valid[iij2] = false;
                                                                                                _ij2[1] = iij2;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j2 = j2array[ij2];
                                                                                        cj2 = cj2array[ij2];
                                                                                        sj2 = sj2array[ij2];
                                                                                        {
                                                                                            IkReal evalcond[8];
                                                                                            IkReal x560 = IKcos(j2);
                                                                                            IkReal x561 = IKsin(j2);
                                                                                            IkReal x562 = ((1.0) * sj1);
                                                                                            IkReal x563 = ((1.0) * new_r11);
                                                                                            IkReal x564 = ((1.0) * new_r10);
                                                                                            IkReal x565 = ((1.0) * x560);
                                                                                            evalcond[0] = (((sj1 * x560)) + new_r20);
                                                                                            evalcond[1] = ((((-1.0) * x561)) + new_r00);
                                                                                            evalcond[2] = (new_r01 + (((-1.0) * x565)));
                                                                                            evalcond[3] = (new_r21 + (((-1.0) * x561 * x562)));
                                                                                            evalcond[4] = (((cj1 * x561)) + (((-1.0) * x563)));
                                                                                            evalcond[5] = ((((-1.0) * cj1 * x565)) + (((-1.0) * x564)));
                                                                                            evalcond[6] = ((((-1.0) * cj1 * x563)) + x561 + (((-1.0) * new_r21 * x562)));
                                                                                            evalcond[7] = ((((-1.0) * new_r20 * x562)) + (((-1.0) * cj1 * x564)) + (((-1.0) * x565)));
                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                            vinfos[0].jointtype = 1;
                                                                                            vinfos[0].foffset = j0;
                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                            vinfos[1].jointtype = 1;
                                                                                            vinfos[1].foffset = j1;
                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                            vinfos[2].jointtype = 1;
                                                                                            vinfos[2].foffset = j2;
                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                            vinfos[3].jointtype = 1;
                                                                                            vinfos[3].foffset = j3;
                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j4;
                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j5;
                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                            vinfos[6].jointtype = 1;
                                                                                            vinfos[6].foffset = j6;
                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        } while (0);
                                                                        if (bgotonextstatement)
                                                                        {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                evalcond[1] = new_r22;
                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                                {
                                                                                    bgotonextstatement = false;
                                                                                    {
                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                        bool j2valid[1] = {false};
                                                                                        _nj2 = 1;
                                                                                        if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21) + IKsqr(((-1.0) * new_r20)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                        j2array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                        if (j2array[0] > IKPI)
                                                                                        {
                                                                                            j2array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j2array[0] < -IKPI)
                                                                                        {
                                                                                            j2array[0] += IK2PI;
                                                                                        }
                                                                                        j2valid[0] = true;
                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                        {
                                                                                            if (!j2valid[ij2])
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij2[0] = ij2;
                                                                                            _ij2[1] = -1;
                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                            {
                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                    j2valid[iij2] = false;
                                                                                                    _ij2[1] = iij2;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j2 = j2array[ij2];
                                                                                            cj2 = cj2array[ij2];
                                                                                            sj2 = sj2array[ij2];
                                                                                            {
                                                                                                IkReal evalcond[8];
                                                                                                IkReal x566 = IKcos(j2);
                                                                                                IkReal x567 = IKsin(j2);
                                                                                                IkReal x568 = ((1.0) * sj0);
                                                                                                IkReal x569 = ((1.0) * x567);
                                                                                                IkReal x570 = ((1.0) * x566);
                                                                                                evalcond[0] = (x566 + new_r20);
                                                                                                evalcond[1] = (new_r21 + (((-1.0) * x569)));
                                                                                                evalcond[2] = (((sj0 * x566)) + new_r01);
                                                                                                evalcond[3] = (((sj0 * x567)) + new_r00);
                                                                                                evalcond[4] = ((((-1.0) * cj0 * x570)) + new_r11);
                                                                                                evalcond[5] = ((((-1.0) * new_r02 * x569)) + new_r10);
                                                                                                evalcond[6] = ((((-1.0) * new_r00 * x568)) + ((cj0 * new_r10)) + (((-1.0) * x569)));
                                                                                                evalcond[7] = ((((-1.0) * x570)) + ((cj0 * new_r11)) + (((-1.0) * new_r01 * x568)));
                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                vinfos[0].jointtype = 1;
                                                                                                vinfos[0].foffset = j0;
                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                vinfos[1].jointtype = 1;
                                                                                                vinfos[1].foffset = j1;
                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                vinfos[2].jointtype = 1;
                                                                                                vinfos[2].foffset = j2;
                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                vinfos[3].jointtype = 1;
                                                                                                vinfos[3].foffset = j3;
                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                vinfos[4].jointtype = 1;
                                                                                                vinfos[4].foffset = j4;
                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                vinfos[5].jointtype = 1;
                                                                                                vinfos[5].foffset = j5;
                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                vinfos[6].jointtype = 1;
                                                                                                vinfos[6].foffset = j6;
                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                std::vector<int> vfree(0);
                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } while (0);
                                                                            if (bgotonextstatement)
                                                                            {
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                    evalcond[1] = new_r22;
                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                                    {
                                                                                        bgotonextstatement = false;
                                                                                        {
                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                            bool j2valid[1] = {false};
                                                                                            _nj2 = 1;
                                                                                            if (IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r21)) + IKsqr(new_r20) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                continue;
                                                                                            j2array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                            if (j2array[0] > IKPI)
                                                                                            {
                                                                                                j2array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j2array[0] < -IKPI)
                                                                                            {
                                                                                                j2array[0] += IK2PI;
                                                                                            }
                                                                                            j2valid[0] = true;
                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                            {
                                                                                                if (!j2valid[ij2])
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij2[0] = ij2;
                                                                                                _ij2[1] = -1;
                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                {
                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                    {
                                                                                                        j2valid[iij2] = false;
                                                                                                        _ij2[1] = iij2;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j2 = j2array[ij2];
                                                                                                cj2 = cj2array[ij2];
                                                                                                sj2 = sj2array[ij2];
                                                                                                {
                                                                                                    IkReal evalcond[8];
                                                                                                    IkReal x571 = IKcos(j2);
                                                                                                    IkReal x572 = IKsin(j2);
                                                                                                    IkReal x573 = ((1.0) * sj0);
                                                                                                    IkReal x574 = ((1.0) * x571);
                                                                                                    evalcond[0] = (x572 + new_r21);
                                                                                                    evalcond[1] = ((((-1.0) * x574)) + new_r20);
                                                                                                    evalcond[2] = (new_r01 + ((sj0 * x571)));
                                                                                                    evalcond[3] = (new_r00 + ((sj0 * x572)));
                                                                                                    evalcond[4] = (new_r10 + ((new_r02 * x572)));
                                                                                                    evalcond[5] = ((((-1.0) * cj0 * x574)) + new_r11);
                                                                                                    evalcond[6] = ((((-1.0) * x572)) + (((-1.0) * new_r00 * x573)) + ((cj0 * new_r10)));
                                                                                                    evalcond[7] = ((((-1.0) * x574)) + (((-1.0) * new_r01 * x573)) + ((cj0 * new_r11)));
                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                    vinfos[0].jointtype = 1;
                                                                                                    vinfos[0].foffset = j0;
                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                    vinfos[1].jointtype = 1;
                                                                                                    vinfos[1].foffset = j1;
                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                    vinfos[2].jointtype = 1;
                                                                                                    vinfos[2].foffset = j2;
                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                    vinfos[3].jointtype = 1;
                                                                                                    vinfos[3].foffset = j3;
                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                    vinfos[4].jointtype = 1;
                                                                                                    vinfos[4].foffset = j4;
                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                    vinfos[5].jointtype = 1;
                                                                                                    vinfos[5].foffset = j5;
                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                    vinfos[6].jointtype = 1;
                                                                                                    vinfos[6].foffset = j6;
                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                    std::vector<int> vfree(0);
                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                } while (0);
                                                                                if (bgotonextstatement)
                                                                                {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                                                                        evalcond[1] = new_r20;
                                                                                        evalcond[2] = new_r02;
                                                                                        evalcond[3] = new_r12;
                                                                                        evalcond[4] = new_r21;
                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 && IKabs(evalcond[4]) < 0.0000050000000000)
                                                                                        {
                                                                                            bgotonextstatement = false;
                                                                                            {
                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                bool j2valid[1] = {false};
                                                                                                _nj2 = 1;
                                                                                                IkReal x575 = ((1.0) * new_r01);
                                                                                                if (IKabs(((((-1.0) * cj0 * x575)) + (((-1.0) * new_r00 * sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * sj0 * x575)) + ((cj0 * new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0) * cj0 * x575)) + (((-1.0) * new_r00 * sj0)))) + IKsqr(((((-1.0) * sj0 * x575)) + ((cj0 * new_r00)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                    continue;
                                                                                                j2array[0] = IKatan2(((((-1.0) * cj0 * x575)) + (((-1.0) * new_r00 * sj0))), ((((-1.0) * sj0 * x575)) + ((cj0 * new_r00))));
                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                if (j2array[0] > IKPI)
                                                                                                {
                                                                                                    j2array[0] -= IK2PI;
                                                                                                }
                                                                                                else if (j2array[0] < -IKPI)
                                                                                                {
                                                                                                    j2array[0] += IK2PI;
                                                                                                }
                                                                                                j2valid[0] = true;
                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                {
                                                                                                    if (!j2valid[ij2])
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij2[0] = ij2;
                                                                                                    _ij2[1] = -1;
                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                    {
                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                        {
                                                                                                            j2valid[iij2] = false;
                                                                                                            _ij2[1] = iij2;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j2 = j2array[ij2];
                                                                                                    cj2 = cj2array[ij2];
                                                                                                    sj2 = sj2array[ij2];
                                                                                                    {
                                                                                                        IkReal evalcond[8];
                                                                                                        IkReal x576 = IKsin(j2);
                                                                                                        IkReal x577 = IKcos(j2);
                                                                                                        IkReal x578 = ((1.0) * sj0);
                                                                                                        IkReal x579 = ((1.0) * x577);
                                                                                                        IkReal x580 = (sj0 * x576);
                                                                                                        IkReal x581 = (cj0 * x576);
                                                                                                        IkReal x582 = (cj0 * x579);
                                                                                                        evalcond[0] = (((new_r11 * sj0)) + x576 + ((cj0 * new_r01)));
                                                                                                        evalcond[1] = (x581 + new_r01 + ((sj0 * x577)));
                                                                                                        evalcond[2] = (((new_r10 * sj0)) + (((-1.0) * x579)) + ((cj0 * new_r00)));
                                                                                                        evalcond[3] = ((((-1.0) * x576)) + (((-1.0) * new_r00 * x578)) + ((cj0 * new_r10)));
                                                                                                        evalcond[4] = ((((-1.0) * x579)) + (((-1.0) * new_r01 * x578)) + ((cj0 * new_r11)));
                                                                                                        evalcond[5] = (x580 + new_r00 + (((-1.0) * x582)));
                                                                                                        evalcond[6] = (x580 + new_r11 + (((-1.0) * x582)));
                                                                                                        evalcond[7] = ((((-1.0) * x581)) + (((-1.0) * x577 * x578)) + new_r10);
                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                        vinfos[0].jointtype = 1;
                                                                                                        vinfos[0].foffset = j0;
                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                        vinfos[1].jointtype = 1;
                                                                                                        vinfos[1].foffset = j1;
                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                        vinfos[2].jointtype = 1;
                                                                                                        vinfos[2].foffset = j2;
                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                        vinfos[3].jointtype = 1;
                                                                                                        vinfos[3].foffset = j3;
                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                        vinfos[4].jointtype = 1;
                                                                                                        vinfos[4].foffset = j4;
                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                        vinfos[5].jointtype = 1;
                                                                                                        vinfos[5].foffset = j5;
                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                        vinfos[6].jointtype = 1;
                                                                                                        vinfos[6].foffset = j6;
                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                        std::vector<int> vfree(0);
                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    } while (0);
                                                                                    if (bgotonextstatement)
                                                                                    {
                                                                                        bool bgotonextstatement = true;
                                                                                        do
                                                                                        {
                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))), 6.28318530717959)));
                                                                                            evalcond[1] = new_r20;
                                                                                            evalcond[2] = new_r02;
                                                                                            evalcond[3] = new_r12;
                                                                                            evalcond[4] = new_r21;
                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 && IKabs(evalcond[4]) < 0.0000050000000000)
                                                                                            {
                                                                                                bgotonextstatement = false;
                                                                                                {
                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                    bool j2valid[1] = {false};
                                                                                                    _nj2 = 1;
                                                                                                    IkReal x583 = ((1.0) * sj0);
                                                                                                    if (IKabs((((cj0 * new_r01)) + (((-1.0) * new_r00 * x583)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0) * new_r01 * x583)) + (((-1.0) * cj0 * new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0 * new_r01)) + (((-1.0) * new_r00 * x583)))) + IKsqr(((((-1.0) * new_r01 * x583)) + (((-1.0) * cj0 * new_r00)))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                        continue;
                                                                                                    j2array[0] = IKatan2((((cj0 * new_r01)) + (((-1.0) * new_r00 * x583))), ((((-1.0) * new_r01 * x583)) + (((-1.0) * cj0 * new_r00))));
                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                    if (j2array[0] > IKPI)
                                                                                                    {
                                                                                                        j2array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                    {
                                                                                                        j2array[0] += IK2PI;
                                                                                                    }
                                                                                                    j2valid[0] = true;
                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                    {
                                                                                                        if (!j2valid[ij2])
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij2[0] = ij2;
                                                                                                        _ij2[1] = -1;
                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                        {
                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                            {
                                                                                                                j2valid[iij2] = false;
                                                                                                                _ij2[1] = iij2;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j2 = j2array[ij2];
                                                                                                        cj2 = cj2array[ij2];
                                                                                                        sj2 = sj2array[ij2];
                                                                                                        {
                                                                                                            IkReal evalcond[8];
                                                                                                            IkReal x584 = IKsin(j2);
                                                                                                            IkReal x585 = IKcos(j2);
                                                                                                            IkReal x586 = ((1.0) * sj0);
                                                                                                            IkReal x587 = ((1.0) * x584);
                                                                                                            IkReal x588 = (sj0 * x585);
                                                                                                            IkReal x589 = ((1.0) * x585);
                                                                                                            IkReal x590 = (cj0 * x587);
                                                                                                            evalcond[0] = (((new_r10 * sj0)) + x585 + ((cj0 * new_r00)));
                                                                                                            evalcond[1] = (((new_r11 * sj0)) + ((cj0 * new_r01)) + (((-1.0) * x587)));
                                                                                                            evalcond[2] = (((sj0 * x584)) + ((cj0 * x585)) + new_r00);
                                                                                                            evalcond[3] = (((cj0 * new_r10)) + (((-1.0) * x587)) + (((-1.0) * new_r00 * x586)));
                                                                                                            evalcond[4] = ((((-1.0) * new_r01 * x586)) + ((cj0 * new_r11)) + (((-1.0) * x589)));
                                                                                                            evalcond[5] = ((((-1.0) * x590)) + x588 + new_r01);
                                                                                                            evalcond[6] = ((((-1.0) * x590)) + x588 + new_r10);
                                                                                                            evalcond[7] = ((((-1.0) * cj0 * x589)) + (((-1.0) * x584 * x586)) + new_r11);
                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j0;
                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j1;
                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j2;
                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                            vinfos[3].jointtype = 1;
                                                                                                            vinfos[3].foffset = j3;
                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                            vinfos[4].jointtype = 1;
                                                                                                            vinfos[4].foffset = j4;
                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                            vinfos[5].jointtype = 1;
                                                                                                            vinfos[5].foffset = j5;
                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                            vinfos[6].jointtype = 1;
                                                                                                            vinfos[6].foffset = j6;
                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                            std::vector<int> vfree(0);
                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        } while (0);
                                                                                        if (bgotonextstatement)
                                                                                        {
                                                                                            bool bgotonextstatement = true;
                                                                                            do
                                                                                            {
                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j0))), 6.28318530717959)));
                                                                                                evalcond[1] = new_r12;
                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                                                {
                                                                                                    bgotonextstatement = false;
                                                                                                    {
                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                        bool j2valid[1] = {false};
                                                                                                        _nj2 = 1;
                                                                                                        if (IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10) + IKsqr(new_r11) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                            continue;
                                                                                                        j2array[0] = IKatan2(new_r10, new_r11);
                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                        if (j2array[0] > IKPI)
                                                                                                        {
                                                                                                            j2array[0] -= IK2PI;
                                                                                                        }
                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                        {
                                                                                                            j2array[0] += IK2PI;
                                                                                                        }
                                                                                                        j2valid[0] = true;
                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                        {
                                                                                                            if (!j2valid[ij2])
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij2[0] = ij2;
                                                                                                            _ij2[1] = -1;
                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                            {
                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                {
                                                                                                                    j2valid[iij2] = false;
                                                                                                                    _ij2[1] = iij2;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j2 = j2array[ij2];
                                                                                                            cj2 = cj2array[ij2];
                                                                                                            sj2 = sj2array[ij2];
                                                                                                            {
                                                                                                                IkReal evalcond[8];
                                                                                                                IkReal x591 = IKcos(j2);
                                                                                                                IkReal x592 = IKsin(j2);
                                                                                                                IkReal x593 = ((1.0) * sj1);
                                                                                                                IkReal x594 = ((1.0) * x591);
                                                                                                                evalcond[0] = (((sj1 * x591)) + new_r20);
                                                                                                                evalcond[1] = ((((-1.0) * x592)) + new_r10);
                                                                                                                evalcond[2] = ((((-1.0) * x594)) + new_r11);
                                                                                                                evalcond[3] = (((cj1 * x592)) + new_r01);
                                                                                                                evalcond[4] = ((((-1.0) * x592 * x593)) + new_r21);
                                                                                                                evalcond[5] = ((((-1.0) * cj1 * x594)) + new_r00);
                                                                                                                evalcond[6] = ((((-1.0) * new_r21 * x593)) + ((cj1 * new_r01)) + x592);
                                                                                                                evalcond[7] = ((((-1.0) * new_r20 * x593)) + ((cj1 * new_r00)) + (((-1.0) * x594)));
                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                            }

                                                                                                            {
                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                vinfos[0].foffset = j0;
                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                vinfos[1].foffset = j1;
                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                vinfos[2].foffset = j2;
                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                vinfos[3].foffset = j3;
                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                vinfos[4].foffset = j4;
                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                vinfos[5].foffset = j5;
                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                vinfos[6].foffset = j6;
                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                std::vector<int> vfree(0);
                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } while (0);
                                                                                            if (bgotonextstatement)
                                                                                            {
                                                                                                bool bgotonextstatement = true;
                                                                                                do
                                                                                                {
                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j0)))), 6.28318530717959)));
                                                                                                    evalcond[1] = new_r12;
                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000)
                                                                                                    {
                                                                                                        bgotonextstatement = false;
                                                                                                        {
                                                                                                            IkReal j2eval[3];
                                                                                                            sj0 = 0;
                                                                                                            cj0 = -1.0;
                                                                                                            j0 = 3.14159265358979;
                                                                                                            j2eval[0] = sj1;
                                                                                                            j2eval[1] = IKsign(sj1);
                                                                                                            j2eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                                                            if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000 || IKabs(j2eval[2]) < 0.0000010000000000)
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j2eval[1];
                                                                                                                    sj0 = 0;
                                                                                                                    cj0 = -1.0;
                                                                                                                    j0 = 3.14159265358979;
                                                                                                                    j2eval[0] = sj1;
                                                                                                                    if (IKabs(j2eval[0]) < 0.0000010000000000)
                                                                                                                    {
                                                                                                                        {
                                                                                                                            IkReal j2eval[2];
                                                                                                                            sj0 = 0;
                                                                                                                            cj0 = -1.0;
                                                                                                                            j0 = 3.14159265358979;
                                                                                                                            j2eval[0] = cj1;
                                                                                                                            j2eval[1] = sj1;
                                                                                                                            if (IKabs(j2eval[0]) < 0.0000010000000000 || IKabs(j2eval[1]) < 0.0000010000000000)
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    IkReal evalcond[4];
                                                                                                                                    bool bgotonextstatement = true;
                                                                                                                                    do
                                                                                                                                    {
                                                                                                                                        evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                                                                        evalcond[1] = new_r22;
                                                                                                                                        evalcond[2] = new_r01;
                                                                                                                                        evalcond[3] = new_r00;
                                                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                        {
                                                                                                                                            bgotonextstatement = false;
                                                                                                                                            {
                                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                                _nj2 = 1;
                                                                                                                                                if (IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21) + IKsqr(((-1.0) * new_r20)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                    continue;
                                                                                                                                                j2array[0] = IKatan2(new_r21, ((-1.0) * new_r20));
                                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                                {
                                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                                }
                                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                                {
                                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                                }
                                                                                                                                                j2valid[0] = true;
                                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                {
                                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                                    _ij2[1] = -1;
                                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                    {
                                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                        {
                                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                                            break;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                                    {
                                                                                                                                                        IkReal evalcond[4];
                                                                                                                                                        IkReal x595 = IKcos(j2);
                                                                                                                                                        IkReal x596 = ((1.0) * (IKsin(j2)));
                                                                                                                                                        evalcond[0] = (x595 + new_r20);
                                                                                                                                                        evalcond[1] = ((((-1.0) * x596)) + new_r21);
                                                                                                                                                        evalcond[2] = ((((-1.0) * x596)) + (((-1.0) * new_r10)));
                                                                                                                                                        evalcond[3] = ((((-1.0) * x595)) + (((-1.0) * new_r11)));
                                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                    }

                                                                                                                                                    {
                                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    } while (0);
                                                                                                                                    if (bgotonextstatement)
                                                                                                                                    {
                                                                                                                                        bool bgotonextstatement = true;
                                                                                                                                        do
                                                                                                                                        {
                                                                                                                                            evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j1)))), 6.28318530717959)));
                                                                                                                                            evalcond[1] = new_r22;
                                                                                                                                            evalcond[2] = new_r01;
                                                                                                                                            evalcond[3] = new_r00;
                                                                                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                            {
                                                                                                                                                bgotonextstatement = false;
                                                                                                                                                {
                                                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                    bool j2valid[1] = {false};
                                                                                                                                                    _nj2 = 1;
                                                                                                                                                    if (IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r21)) + IKsqr(new_r20) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                        continue;
                                                                                                                                                    j2array[0] = IKatan2(((-1.0) * new_r21), new_r20);
                                                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                                                    {
                                                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                                                    }
                                                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                                                    {
                                                                                                                                                        j2array[0] += IK2PI;
                                                                                                                                                    }
                                                                                                                                                    j2valid[0] = true;
                                                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                    {
                                                                                                                                                        if (!j2valid[ij2])
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        _ij2[0] = ij2;
                                                                                                                                                        _ij2[1] = -1;
                                                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                        {
                                                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                            {
                                                                                                                                                                j2valid[iij2] = false;
                                                                                                                                                                _ij2[1] = iij2;
                                                                                                                                                                break;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        j2 = j2array[ij2];
                                                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                                                        {
                                                                                                                                                            IkReal evalcond[4];
                                                                                                                                                            IkReal x597 = IKsin(j2);
                                                                                                                                                            IkReal x598 = ((1.0) * (IKcos(j2)));
                                                                                                                                                            evalcond[0] = (x597 + new_r21);
                                                                                                                                                            evalcond[1] = ((((-1.0) * x598)) + new_r20);
                                                                                                                                                            evalcond[2] = ((((-1.0) * x597)) + (((-1.0) * new_r10)));
                                                                                                                                                            evalcond[3] = ((((-1.0) * x598)) + (((-1.0) * new_r11)));
                                                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                        }

                                                                                                                                                        {
                                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                                                            std::vector<int> vfree(0);
                                                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } while (0);
                                                                                                                                        if (bgotonextstatement)
                                                                                                                                        {
                                                                                                                                            bool bgotonextstatement = true;
                                                                                                                                            do
                                                                                                                                            {
                                                                                                                                                evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(j1))), 6.28318530717959)));
                                                                                                                                                evalcond[1] = new_r20;
                                                                                                                                                evalcond[2] = new_r02;
                                                                                                                                                evalcond[3] = new_r21;
                                                                                                                                                if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                                {
                                                                                                                                                    bgotonextstatement = false;
                                                                                                                                                    {
                                                                                                                                                        IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                        bool j2valid[1] = {false};
                                                                                                                                                        _nj2 = 1;
                                                                                                                                                        if (IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01) + IKsqr(((-1.0) * new_r11)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                            continue;
                                                                                                                                                        j2array[0] = IKatan2(new_r01, ((-1.0) * new_r11));
                                                                                                                                                        sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                        cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                        if (j2array[0] > IKPI)
                                                                                                                                                        {
                                                                                                                                                            j2array[0] -= IK2PI;
                                                                                                                                                        }
                                                                                                                                                        else if (j2array[0] < -IKPI)
                                                                                                                                                        {
                                                                                                                                                            j2array[0] += IK2PI;
                                                                                                                                                        }
                                                                                                                                                        j2valid[0] = true;
                                                                                                                                                        for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                        {
                                                                                                                                                            if (!j2valid[ij2])
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                            _ij2[0] = ij2;
                                                                                                                                                            _ij2[1] = -1;
                                                                                                                                                            for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                            {
                                                                                                                                                                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                {
                                                                                                                                                                    j2valid[iij2] = false;
                                                                                                                                                                    _ij2[1] = iij2;
                                                                                                                                                                    break;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            j2 = j2array[ij2];
                                                                                                                                                            cj2 = cj2array[ij2];
                                                                                                                                                            sj2 = sj2array[ij2];
                                                                                                                                                            {
                                                                                                                                                                IkReal evalcond[4];
                                                                                                                                                                IkReal x599 = IKsin(j2);
                                                                                                                                                                IkReal x600 = ((1.0) * (IKcos(j2)));
                                                                                                                                                                evalcond[0] = (x599 + (((-1.0) * new_r01)));
                                                                                                                                                                evalcond[1] = ((((-1.0) * x599)) + (((-1.0) * new_r10)));
                                                                                                                                                                evalcond[2] = ((((-1.0) * new_r11)) + (((-1.0) * x600)));
                                                                                                                                                                evalcond[3] = ((((-1.0) * x600)) + (((-1.0) * new_r00)));
                                                                                                                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                            }

                                                                                                                                                            {
                                                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                                                vinfos[0].foffset = j0;
                                                                                                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                                                vinfos[1].foffset = j1;
                                                                                                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                                                vinfos[2].foffset = j2;
                                                                                                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                                                vinfos[3].foffset = j3;
                                                                                                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                                                vinfos[4].foffset = j4;
                                                                                                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                                                vinfos[5].foffset = j5;
                                                                                                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                vinfos[6].jointtype = 1;
                                                                                                                                                                vinfos[6].foffset = j6;
                                                                                                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                std::vector<int> vfree(0);
                                                                                                                                                                solutions.AddSolution(vinfos, vfree);
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            } while (0);
                                                                                                                                            if (bgotonextstatement)
                                                                                                                                            {
                                                                                                                                                bool bgotonextstatement = true;
                                                                                                                                                do
                                                                                                                                                {
                                                                                                                                                    evalcond[0] = ((-3.14159265358979) + (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j1)))), 6.28318530717959)));
                                                                                                                                                    evalcond[1] = new_r20;
                                                                                                                                                    evalcond[2] = new_r02;
                                                                                                                                                    evalcond[3] = new_r21;
                                                                                                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 && IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000)
                                                                                                                                                    {
                                                                                                                                                        bgotonextstatement = false;
                                                                                                                                                        {
                                                                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                            bool j2valid[1] = {false};
                                                                                                                                                            _nj2 = 1;
                                                                                                                                                            if (IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r10)) + IKsqr(new_r00) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                                continue;
                                                                                                                                                            j2array[0] = IKatan2(((-1.0) * new_r10), new_r00);
                                                                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                            if (j2array[0] > IKPI)
                                                                                                                                                            {
                                                                                                                                                                j2array[0] -= IK2PI;
                                                                                                                                                            }
                                                                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                                                                            {
                                                                                                                                                                j2array[0] += IK2PI;
                                                                                                                                                            }
                                                                                                                                                            j2valid[0] = true;
                                                                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                            {
                                                                                                                                                                if (!j2valid[ij2])
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                _ij2[0] = ij2;
                                                                                                                                                                _ij2[1] = -1;
                                                                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                                {
                                                                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                    {
                                                                                                                                                                        j2valid[iij2] = false;
                                                                                                                                                                        _ij2[1] = iij2;
                                                                                                                                                                        break;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                j2 = j2array[ij2];
                                                                                                                                                                cj2 = cj2array[ij2];
                                                                                                                                                                sj2 = sj2array[ij2];
                                                                                                                                                                {
                                                                                                                                                                    IkReal evalcond[4];
                                                                                                                                                                    IkReal x601 = IKcos(j2);
                                                                                                                                                                    IkReal x602 = ((1.0) * (IKsin(j2)));
                                                                                                                                                                    evalcond[0] = (x601 + (((-1.0) * new_r00)));
                                                                                                                                                                    evalcond[1] = ((((-1.0) * new_r10)) + (((-1.0) * x602)));
                                                                                                                                                                    evalcond[2] = ((((-1.0) * x601)) + (((-1.0) * new_r11)));
                                                                                                                                                                    evalcond[3] = ((((-1.0) * x602)) + (((-1.0) * new_r01)));
                                                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                    {
                                                                                                                                                                        continue;
                                                                                                                                                                    }
                                                                                                                                                                }

                                                                                                                                                                {
                                                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                    std::vector<int> vfree(0);
                                                                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                } while (0);
                                                                                                                                                if (bgotonextstatement)
                                                                                                                                                {
                                                                                                                                                    bool bgotonextstatement = true;
                                                                                                                                                    do
                                                                                                                                                    {
                                                                                                                                                        evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                                                                        {
                                                                                                                                                            bgotonextstatement = false;
                                                                                                                                                            {
                                                                                                                                                                IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                                                bool j2valid[1] = {false};
                                                                                                                                                                _nj2 = 1;
                                                                                                                                                                if (IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0) * new_r10)) + IKsqr(((-1.0) * new_r11)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                                                    continue;
                                                                                                                                                                j2array[0] = IKatan2(((-1.0) * new_r10), ((-1.0) * new_r11));
                                                                                                                                                                sj2array[0] = IKsin(j2array[0]);
                                                                                                                                                                cj2array[0] = IKcos(j2array[0]);
                                                                                                                                                                if (j2array[0] > IKPI)
                                                                                                                                                                {
                                                                                                                                                                    j2array[0] -= IK2PI;
                                                                                                                                                                }
                                                                                                                                                                else if (j2array[0] < -IKPI)
                                                                                                                                                                {
                                                                                                                                                                    j2array[0] += IK2PI;
                                                                                                                                                                }
                                                                                                                                                                j2valid[0] = true;
                                                                                                                                                                for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                                                {
                                                                                                                                                                    if (!j2valid[ij2])
                                                                                                                                                                    {
                                                                                                                                                                        continue;
                                                                                                                                                                    }
                                                                                                                                                                    _ij2[0] = ij2;
                                                                                                                                                                    _ij2[1] = -1;
                                                                                                                                                                    for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                                                    {
                                                                                                                                                                        if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                                                        {
                                                                                                                                                                            j2valid[iij2] = false;
                                                                                                                                                                            _ij2[1] = iij2;
                                                                                                                                                                            break;
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    j2 = j2array[ij2];
                                                                                                                                                                    cj2 = cj2array[ij2];
                                                                                                                                                                    sj2 = sj2array[ij2];
                                                                                                                                                                    {
                                                                                                                                                                        IkReal evalcond[6];
                                                                                                                                                                        IkReal x603 = IKsin(j2);
                                                                                                                                                                        IkReal x604 = IKcos(j2);
                                                                                                                                                                        IkReal x605 = ((-1.0) * x604);
                                                                                                                                                                        evalcond[0] = x603;
                                                                                                                                                                        evalcond[1] = (new_r22 * x603);
                                                                                                                                                                        evalcond[2] = x605;
                                                                                                                                                                        evalcond[3] = (new_r22 * x605);
                                                                                                                                                                        evalcond[4] = ((((-1.0) * x603)) + (((-1.0) * new_r10)));
                                                                                                                                                                        evalcond[5] = ((((-1.0) * x604)) + (((-1.0) * new_r11)));
                                                                                                                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                                                        {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                    }

                                                                                                                                                                    {
                                                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                                                        vinfos[0].foffset = j0;
                                                                                                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                                                        vinfos[1].foffset = j1;
                                                                                                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                                                        vinfos[2].foffset = j2;
                                                                                                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                                                        vinfos[3].foffset = j3;
                                                                                                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                                                        vinfos[4].foffset = j4;
                                                                                                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                                                        vinfos[5].foffset = j5;
                                                                                                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                                                                                                        vinfos[6].jointtype = 1;
                                                                                                                                                                        vinfos[6].foffset = j6;
                                                                                                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                                                                                                        std::vector<int> vfree(0);
                                                                                                                                                                        solutions.AddSolution(vinfos, vfree);
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    } while (0);
                                                                                                                                                    if (bgotonextstatement)
                                                                                                                                                    {
                                                                                                                                                        bool bgotonextstatement = true;
                                                                                                                                                        do
                                                                                                                                                        {
                                                                                                                                                            if (1)
                                                                                                                                                            {
                                                                                                                                                                bgotonextstatement = false;
                                                                                                                                                                continue; // branch miss [j2]
                                                                                                                                                            }
                                                                                                                                                        } while (0);
                                                                                                                                                        if (bgotonextstatement)
                                                                                                                                                        {
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                                    bool j2valid[1] = {false};
                                                                                                                                    _nj2 = 1;
                                                                                                                                    CheckValue<IkReal> x606 = IKPowWithIntegerCheck(cj1, -1);
                                                                                                                                    if (!x606.valid)
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    CheckValue<IkReal> x607 = IKPowWithIntegerCheck(sj1, -1);
                                                                                                                                    if (!x607.valid)
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    if (IKabs((new_r01 * (x606.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20 * (x607.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r01 * (x606.value))) + IKsqr(((-1.0) * new_r20 * (x607.value))) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                        continue;
                                                                                                                                    j2array[0] = IKatan2((new_r01 * (x606.value)), ((-1.0) * new_r20 * (x607.value)));
                                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                                    {
                                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                                    }
                                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                                    {
                                                                                                                                        j2array[0] += IK2PI;
                                                                                                                                    }
                                                                                                                                    j2valid[0] = true;
                                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                                    {
                                                                                                                                        if (!j2valid[ij2])
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        _ij2[0] = ij2;
                                                                                                                                        _ij2[1] = -1;
                                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                        {
                                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                            {
                                                                                                                                                j2valid[iij2] = false;
                                                                                                                                                _ij2[1] = iij2;
                                                                                                                                                break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        j2 = j2array[ij2];
                                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                                        {
                                                                                                                                            IkReal evalcond[8];
                                                                                                                                            IkReal x608 = IKsin(j2);
                                                                                                                                            IkReal x609 = IKcos(j2);
                                                                                                                                            IkReal x610 = ((1.0) * new_r00);
                                                                                                                                            IkReal x611 = ((1.0) * sj1);
                                                                                                                                            IkReal x612 = ((1.0) * new_r01);
                                                                                                                                            IkReal x613 = ((1.0) * x609);
                                                                                                                                            evalcond[0] = (((sj1 * x609)) + new_r20);
                                                                                                                                            evalcond[1] = (new_r21 + (((-1.0) * x608 * x611)));
                                                                                                                                            evalcond[2] = ((((-1.0) * x608)) + (((-1.0) * new_r10)));
                                                                                                                                            evalcond[3] = ((((-1.0) * x613)) + (((-1.0) * new_r11)));
                                                                                                                                            evalcond[4] = (((cj1 * x608)) + (((-1.0) * x612)));
                                                                                                                                            evalcond[5] = ((((-1.0) * cj1 * x613)) + (((-1.0) * x610)));
                                                                                                                                            evalcond[6] = ((((-1.0) * new_r21 * x611)) + (((-1.0) * cj1 * x612)) + x608);
                                                                                                                                            evalcond[7] = ((((-1.0) * cj1 * x610)) + (((-1.0) * x613)) + (((-1.0) * new_r20 * x611)));
                                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                        }

                                                                                                                                        {
                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                                            std::vector<int> vfree(0);
                                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        {
                                                                                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                            bool j2valid[1] = {false};
                                                                                                                            _nj2 = 1;
                                                                                                                            CheckValue<IkReal> x614 = IKPowWithIntegerCheck(sj1, -1);
                                                                                                                            if (!x614.valid)
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            if (IKabs((new_r21 * (x614.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r21 * (x614.value))) + IKsqr(((-1.0) * new_r11)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                                                                                continue;
                                                                                                                            j2array[0] = IKatan2((new_r21 * (x614.value)), ((-1.0) * new_r11));
                                                                                                                            sj2array[0] = IKsin(j2array[0]);
                                                                                                                            cj2array[0] = IKcos(j2array[0]);
                                                                                                                            if (j2array[0] > IKPI)
                                                                                                                            {
                                                                                                                                j2array[0] -= IK2PI;
                                                                                                                            }
                                                                                                                            else if (j2array[0] < -IKPI)
                                                                                                                            {
                                                                                                                                j2array[0] += IK2PI;
                                                                                                                            }
                                                                                                                            j2valid[0] = true;
                                                                                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                            {
                                                                                                                                if (!j2valid[ij2])
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                _ij2[0] = ij2;
                                                                                                                                _ij2[1] = -1;
                                                                                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                                {
                                                                                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                                    {
                                                                                                                                        j2valid[iij2] = false;
                                                                                                                                        _ij2[1] = iij2;
                                                                                                                                        break;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                j2 = j2array[ij2];
                                                                                                                                cj2 = cj2array[ij2];
                                                                                                                                sj2 = sj2array[ij2];
                                                                                                                                {
                                                                                                                                    IkReal evalcond[8];
                                                                                                                                    IkReal x615 = IKsin(j2);
                                                                                                                                    IkReal x616 = IKcos(j2);
                                                                                                                                    IkReal x617 = ((1.0) * new_r00);
                                                                                                                                    IkReal x618 = ((1.0) * sj1);
                                                                                                                                    IkReal x619 = ((1.0) * new_r01);
                                                                                                                                    IkReal x620 = ((1.0) * x616);
                                                                                                                                    evalcond[0] = (((sj1 * x616)) + new_r20);
                                                                                                                                    evalcond[1] = (new_r21 + (((-1.0) * x615 * x618)));
                                                                                                                                    evalcond[2] = ((((-1.0) * x615)) + (((-1.0) * new_r10)));
                                                                                                                                    evalcond[3] = ((((-1.0) * x620)) + (((-1.0) * new_r11)));
                                                                                                                                    evalcond[4] = ((((-1.0) * x619)) + ((cj1 * x615)));
                                                                                                                                    evalcond[5] = ((((-1.0) * cj1 * x620)) + (((-1.0) * x617)));
                                                                                                                                    evalcond[6] = ((((-1.0) * new_r21 * x618)) + (((-1.0) * cj1 * x619)) + x615);
                                                                                                                                    evalcond[7] = ((((-1.0) * x620)) + (((-1.0) * cj1 * x617)) + (((-1.0) * new_r20 * x618)));
                                                                                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                }

                                                                                                                                {
                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                    vinfos[0].foffset = j0;
                                                                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                    vinfos[1].foffset = j1;
                                                                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                    vinfos[2].foffset = j2;
                                                                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                    vinfos[3].foffset = j3;
                                                                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                    vinfos[4].foffset = j4;
                                                                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                    vinfos[5].foffset = j5;
                                                                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                                                                    vinfos[6].jointtype = 1;
                                                                                                                                    vinfos[6].foffset = j6;
                                                                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                                                                    std::vector<int> vfree(0);
                                                                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                                                                    bool j2valid[1] = {false};
                                                                                                                    _nj2 = 1;
                                                                                                                    CheckValue<IkReal> x621 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                                                                                                    if (!x621.valid)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    CheckValue<IkReal> x622 = IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                                                                                                                    if (!x622.valid)
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x621.value))) + (x622.value));
                                                                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                                                                    if (j2array[0] > IKPI)
                                                                                                                    {
                                                                                                                        j2array[0] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if (j2array[0] < -IKPI)
                                                                                                                    {
                                                                                                                        j2array[0] += IK2PI;
                                                                                                                    }
                                                                                                                    j2valid[0] = true;
                                                                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                                                                    {
                                                                                                                        if (!j2valid[ij2])
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        _ij2[0] = ij2;
                                                                                                                        _ij2[1] = -1;
                                                                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                                                                        {
                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                            {
                                                                                                                                j2valid[iij2] = false;
                                                                                                                                _ij2[1] = iij2;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        j2 = j2array[ij2];
                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                        {
                                                                                                                            IkReal evalcond[8];
                                                                                                                            IkReal x623 = IKsin(j2);
                                                                                                                            IkReal x624 = IKcos(j2);
                                                                                                                            IkReal x625 = ((1.0) * new_r00);
                                                                                                                            IkReal x626 = ((1.0) * sj1);
                                                                                                                            IkReal x627 = ((1.0) * new_r01);
                                                                                                                            IkReal x628 = ((1.0) * x624);
                                                                                                                            evalcond[0] = (((sj1 * x624)) + new_r20);
                                                                                                                            evalcond[1] = ((((-1.0) * x623 * x626)) + new_r21);
                                                                                                                            evalcond[2] = ((((-1.0) * new_r10)) + (((-1.0) * x623)));
                                                                                                                            evalcond[3] = ((((-1.0) * x628)) + (((-1.0) * new_r11)));
                                                                                                                            evalcond[4] = ((((-1.0) * x627)) + ((cj1 * x623)));
                                                                                                                            evalcond[5] = ((((-1.0) * cj1 * x628)) + (((-1.0) * x625)));
                                                                                                                            evalcond[6] = ((((-1.0) * cj1 * x627)) + (((-1.0) * new_r21 * x626)) + x623);
                                                                                                                            evalcond[7] = ((((-1.0) * cj1 * x625)) + (((-1.0) * x628)) + (((-1.0) * new_r20 * x626)));
                                                                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        {
                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                            std::vector<int> vfree(0);
                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                } while (0);
                                                                                                if (bgotonextstatement)
                                                                                                {
                                                                                                    bool bgotonextstatement = true;
                                                                                                    do
                                                                                                    {
                                                                                                        evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                                                        {
                                                                                                            bgotonextstatement = false;
                                                                                                            {
                                                                                                                IkReal j2eval[1];
                                                                                                                new_r21 = 0;
                                                                                                                new_r20 = 0;
                                                                                                                new_r02 = 0;
                                                                                                                new_r12 = 0;
                                                                                                                j2eval[0] = IKabs(new_r22);
                                                                                                                if (IKabs(j2eval[0]) < 0.0000000100000000)
                                                                                                                {
                                                                                                                    continue; // no branches [j2]
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    IkReal op[2 + 1], zeror[2];
                                                                                                                    int numroots;
                                                                                                                    op[0] = new_r22;
                                                                                                                    op[1] = 0;
                                                                                                                    op[2] = ((-1.0) * new_r22);
                                                                                                                    polyroots2(op, zeror, numroots);
                                                                                                                    IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
                                                                                                                    int numsolutions = 0;
                                                                                                                    for (int ij2 = 0; ij2 < numroots; ++ij2)
                                                                                                                    {
                                                                                                                        IkReal htj2 = zeror[ij2];
                                                                                                                        tempj2array[0] = ((2.0) * (atan(htj2)));
                                                                                                                        for (int kj2 = 0; kj2 < 1; ++kj2)
                                                                                                                        {
                                                                                                                            j2array[numsolutions] = tempj2array[kj2];
                                                                                                                            if (j2array[numsolutions] > IKPI)
                                                                                                                            {
                                                                                                                                j2array[numsolutions] -= IK2PI;
                                                                                                                            }
                                                                                                                            else if (j2array[numsolutions] < -IKPI)
                                                                                                                            {
                                                                                                                                j2array[numsolutions] += IK2PI;
                                                                                                                            }
                                                                                                                            sj2array[numsolutions] = IKsin(j2array[numsolutions]);
                                                                                                                            cj2array[numsolutions] = IKcos(j2array[numsolutions]);
                                                                                                                            numsolutions++;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    bool j2valid[2] = {true, true};
                                                                                                                    _nj2 = 2;
                                                                                                                    for (int ij2 = 0; ij2 < numsolutions; ++ij2)
                                                                                                                    {
                                                                                                                        if (!j2valid[ij2])
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        j2 = j2array[ij2];
                                                                                                                        cj2 = cj2array[ij2];
                                                                                                                        sj2 = sj2array[ij2];
                                                                                                                        htj2 = IKtan(j2 / 2);

                                                                                                                        _ij2[0] = ij2;
                                                                                                                        _ij2[1] = -1;
                                                                                                                        for (int iij2 = ij2 + 1; iij2 < numsolutions; ++iij2)
                                                                                                                        {
                                                                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                                                                            {
                                                                                                                                j2valid[iij2] = false;
                                                                                                                                _ij2[1] = iij2;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        {
                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                            vinfos[0].foffset = j0;
                                                                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                                                                            vinfos[0].maxsolutions = _nj0;
                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                            vinfos[1].foffset = j1;
                                                                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                                                                            vinfos[1].maxsolutions = _nj1;
                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                            vinfos[2].foffset = j2;
                                                                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                                                                            vinfos[2].maxsolutions = _nj2;
                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                            vinfos[3].foffset = j3;
                                                                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                                                                            vinfos[3].maxsolutions = _nj3;
                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                            vinfos[4].foffset = j4;
                                                                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                                                                            vinfos[4].maxsolutions = _nj4;
                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                            vinfos[5].foffset = j5;
                                                                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                                                                            vinfos[5].maxsolutions = _nj5;
                                                                                                                            vinfos[6].jointtype = 1;
                                                                                                                            vinfos[6].foffset = j6;
                                                                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                                                                            vinfos[6].maxsolutions = _nj6;
                                                                                                                            std::vector<int> vfree(0);
                                                                                                                            solutions.AddSolution(vinfos, vfree);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    } while (0);
                                                                                                    if (bgotonextstatement)
                                                                                                    {
                                                                                                        bool bgotonextstatement = true;
                                                                                                        do
                                                                                                        {
                                                                                                            if (1)
                                                                                                            {
                                                                                                                bgotonextstatement = false;
                                                                                                                continue; // branch miss [j2]
                                                                                                            }
                                                                                                        } while (0);
                                                                                                        if (bgotonextstatement)
                                                                                                        {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                {
                                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                                    bool j2valid[1] = {false};
                                                                    _nj2 = 1;
                                                                    CheckValue<IkReal> x630 = IKPowWithIntegerCheck(sj1, -1);
                                                                    if (!x630.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    IkReal x629 = x630.value;
                                                                    CheckValue<IkReal> x631 = IKPowWithIntegerCheck(cj0, -1);
                                                                    if (!x631.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    CheckValue<IkReal> x632 = IKPowWithIntegerCheck(cj1, -1);
                                                                    if (!x632.valid)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    if (IKabs((x629 * (x631.value) * (x632.value) * ((((new_r20 * sj0)) + (((-1.0) * new_r01 * sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20 * x629)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x629 * (x631.value) * (x632.value) * ((((new_r20 * sj0)) + (((-1.0) * new_r01 * sj1)))))) + IKsqr(((-1.0) * new_r20 * x629)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                    j2array[0] = IKatan2((x629 * (x631.value) * (x632.value) * ((((new_r20 * sj0)) + (((-1.0) * new_r01 * sj1))))), ((-1.0) * new_r20 * x629));
                                                                    sj2array[0] = IKsin(j2array[0]);
                                                                    cj2array[0] = IKcos(j2array[0]);
                                                                    if (j2array[0] > IKPI)
                                                                    {
                                                                        j2array[0] -= IK2PI;
                                                                    }
                                                                    else if (j2array[0] < -IKPI)
                                                                    {
                                                                        j2array[0] += IK2PI;
                                                                    }
                                                                    j2valid[0] = true;
                                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                                    {
                                                                        if (!j2valid[ij2])
                                                                        {
                                                                            continue;
                                                                        }
                                                                        _ij2[0] = ij2;
                                                                        _ij2[1] = -1;
                                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                        {
                                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                            {
                                                                                j2valid[iij2] = false;
                                                                                _ij2[1] = iij2;
                                                                                break;
                                                                            }
                                                                        }
                                                                        j2 = j2array[ij2];
                                                                        cj2 = cj2array[ij2];
                                                                        sj2 = sj2array[ij2];
                                                                        {
                                                                            IkReal evalcond[12];
                                                                            IkReal x633 = IKsin(j2);
                                                                            IkReal x634 = IKcos(j2);
                                                                            IkReal x635 = ((1.0) * sj1);
                                                                            IkReal x636 = ((1.0) * sj0);
                                                                            IkReal x637 = (cj0 * new_r00);
                                                                            IkReal x638 = (cj0 * cj1);
                                                                            IkReal x639 = (new_r11 * sj0);
                                                                            IkReal x640 = (new_r10 * sj0);
                                                                            IkReal x641 = ((1.0) * x634);
                                                                            IkReal x642 = (cj1 * x633);
                                                                            IkReal x643 = ((1.0) * x633);
                                                                            evalcond[0] = (((sj1 * x634)) + new_r20);
                                                                            evalcond[1] = ((((-1.0) * x633 * x635)) + new_r21);
                                                                            evalcond[2] = (x642 + x639 + ((cj0 * new_r01)));
                                                                            evalcond[3] = ((((-1.0) * new_r00 * x636)) + (((-1.0) * x643)) + ((cj0 * new_r10)));
                                                                            evalcond[4] = ((((-1.0) * new_r01 * x636)) + (((-1.0) * x641)) + ((cj0 * new_r11)));
                                                                            evalcond[5] = (((sj0 * x634)) + new_r01 + ((x633 * x638)));
                                                                            evalcond[6] = ((((-1.0) * cj1 * x641)) + x640 + x637);
                                                                            evalcond[7] = (((sj0 * x633)) + new_r00 + (((-1.0) * x638 * x641)));
                                                                            evalcond[8] = (((sj0 * x642)) + (((-1.0) * cj0 * x641)) + new_r11);
                                                                            evalcond[9] = ((((-1.0) * cj1 * x634 * x636)) + (((-1.0) * cj0 * x643)) + new_r10);
                                                                            evalcond[10] = (((new_r01 * x638)) + (((-1.0) * new_r21 * x635)) + x633 + ((cj1 * x639)));
                                                                            evalcond[11] = (((cj1 * x640)) + (((-1.0) * x641)) + (((-1.0) * new_r20 * x635)) + ((cj1 * x637)));
                                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                                                            {
                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 1;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 1;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 1;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            vinfos[6].jointtype = 1;
                                                                            vinfos[6].foffset = j6;
                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                            vinfos[6].maxsolutions = _nj6;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        {
                                                            IkReal j2array[1], cj2array[1], sj2array[1];
                                                            bool j2valid[1] = {false};
                                                            _nj2 = 1;
                                                            CheckValue<IkReal> x645 = IKPowWithIntegerCheck(sj1, -1);
                                                            if (!x645.valid)
                                                            {
                                                                continue;
                                                            }
                                                            IkReal x644 = x645.value;
                                                            CheckValue<IkReal> x646 = IKPowWithIntegerCheck(sj0, -1);
                                                            if (!x646.valid)
                                                            {
                                                                continue;
                                                            }
                                                            if (IKabs((x644 * (x646.value) * (((((-1.0) * cj0 * cj1 * new_r20)) + (((-1.0) * new_r00 * sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0) * new_r20 * x644)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x644 * (x646.value) * (((((-1.0) * cj0 * cj1 * new_r20)) + (((-1.0) * new_r00 * sj1)))))) + IKsqr(((-1.0) * new_r20 * x644)) - 1) <= IKFAST_SINCOS_THRESH)
                                                                continue;
                                                            j2array[0] = IKatan2((x644 * (x646.value) * (((((-1.0) * cj0 * cj1 * new_r20)) + (((-1.0) * new_r00 * sj1))))), ((-1.0) * new_r20 * x644));
                                                            sj2array[0] = IKsin(j2array[0]);
                                                            cj2array[0] = IKcos(j2array[0]);
                                                            if (j2array[0] > IKPI)
                                                            {
                                                                j2array[0] -= IK2PI;
                                                            }
                                                            else if (j2array[0] < -IKPI)
                                                            {
                                                                j2array[0] += IK2PI;
                                                            }
                                                            j2valid[0] = true;
                                                            for (int ij2 = 0; ij2 < 1; ++ij2)
                                                            {
                                                                if (!j2valid[ij2])
                                                                {
                                                                    continue;
                                                                }
                                                                _ij2[0] = ij2;
                                                                _ij2[1] = -1;
                                                                for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                                {
                                                                    if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                                    {
                                                                        j2valid[iij2] = false;
                                                                        _ij2[1] = iij2;
                                                                        break;
                                                                    }
                                                                }
                                                                j2 = j2array[ij2];
                                                                cj2 = cj2array[ij2];
                                                                sj2 = sj2array[ij2];
                                                                {
                                                                    IkReal evalcond[12];
                                                                    IkReal x647 = IKsin(j2);
                                                                    IkReal x648 = IKcos(j2);
                                                                    IkReal x649 = ((1.0) * sj1);
                                                                    IkReal x650 = ((1.0) * sj0);
                                                                    IkReal x651 = (cj0 * new_r00);
                                                                    IkReal x652 = (cj0 * cj1);
                                                                    IkReal x653 = (new_r11 * sj0);
                                                                    IkReal x654 = (new_r10 * sj0);
                                                                    IkReal x655 = ((1.0) * x648);
                                                                    IkReal x656 = (cj1 * x647);
                                                                    IkReal x657 = ((1.0) * x647);
                                                                    evalcond[0] = (((sj1 * x648)) + new_r20);
                                                                    evalcond[1] = ((((-1.0) * x647 * x649)) + new_r21);
                                                                    evalcond[2] = (x653 + x656 + ((cj0 * new_r01)));
                                                                    evalcond[3] = ((((-1.0) * new_r00 * x650)) + (((-1.0) * x657)) + ((cj0 * new_r10)));
                                                                    evalcond[4] = ((((-1.0) * x655)) + (((-1.0) * new_r01 * x650)) + ((cj0 * new_r11)));
                                                                    evalcond[5] = (((x647 * x652)) + ((sj0 * x648)) + new_r01);
                                                                    evalcond[6] = ((((-1.0) * cj1 * x655)) + x651 + x654);
                                                                    evalcond[7] = (((sj0 * x647)) + new_r00 + (((-1.0) * x652 * x655)));
                                                                    evalcond[8] = (((sj0 * x656)) + (((-1.0) * cj0 * x655)) + new_r11);
                                                                    evalcond[9] = ((((-1.0) * cj0 * x657)) + new_r10 + (((-1.0) * cj1 * x648 * x650)));
                                                                    evalcond[10] = (((cj1 * x653)) + (((-1.0) * new_r21 * x649)) + ((new_r01 * x652)) + x647);
                                                                    evalcond[11] = (((cj1 * x651)) + ((cj1 * x654)) + (((-1.0) * x655)) + (((-1.0) * new_r20 * x649)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                                                    {
                                                                        continue;
                                                                    }
                                                                }

                                                                {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                                    vinfos[0].jointtype = 1;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 1;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 1;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 1;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    vinfos[6].jointtype = 1;
                                                                    vinfos[6].foffset = j6;
                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                    vinfos[6].maxsolutions = _nj6;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                {
                                                    IkReal j2array[1], cj2array[1], sj2array[1];
                                                    bool j2valid[1] = {false};
                                                    _nj2 = 1;
                                                    CheckValue<IkReal> x658 = IKPowWithIntegerCheck(IKsign(sj1), -1);
                                                    if (!x658.valid)
                                                    {
                                                        continue;
                                                    }
                                                    CheckValue<IkReal> x659 = IKatan2WithCheck(IkReal(new_r21), IkReal(((-1.0) * new_r20)), IKFAST_ATAN2_MAGTHRESH);
                                                    if (!x659.valid)
                                                    {
                                                        continue;
                                                    }
                                                    j2array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x658.value))) + (x659.value));
                                                    sj2array[0] = IKsin(j2array[0]);
                                                    cj2array[0] = IKcos(j2array[0]);
                                                    if (j2array[0] > IKPI)
                                                    {
                                                        j2array[0] -= IK2PI;
                                                    }
                                                    else if (j2array[0] < -IKPI)
                                                    {
                                                        j2array[0] += IK2PI;
                                                    }
                                                    j2valid[0] = true;
                                                    for (int ij2 = 0; ij2 < 1; ++ij2)
                                                    {
                                                        if (!j2valid[ij2])
                                                        {
                                                            continue;
                                                        }
                                                        _ij2[0] = ij2;
                                                        _ij2[1] = -1;
                                                        for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
                                                        {
                                                            if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                                                            {
                                                                j2valid[iij2] = false;
                                                                _ij2[1] = iij2;
                                                                break;
                                                            }
                                                        }
                                                        j2 = j2array[ij2];
                                                        cj2 = cj2array[ij2];
                                                        sj2 = sj2array[ij2];
                                                        {
                                                            IkReal evalcond[12];
                                                            IkReal x660 = IKsin(j2);
                                                            IkReal x661 = IKcos(j2);
                                                            IkReal x662 = ((1.0) * sj1);
                                                            IkReal x663 = ((1.0) * sj0);
                                                            IkReal x664 = (cj0 * new_r00);
                                                            IkReal x665 = (cj0 * cj1);
                                                            IkReal x666 = (new_r11 * sj0);
                                                            IkReal x667 = (new_r10 * sj0);
                                                            IkReal x668 = ((1.0) * x661);
                                                            IkReal x669 = (cj1 * x660);
                                                            IkReal x670 = ((1.0) * x660);
                                                            evalcond[0] = (((sj1 * x661)) + new_r20);
                                                            evalcond[1] = ((((-1.0) * x660 * x662)) + new_r21);
                                                            evalcond[2] = (x669 + x666 + ((cj0 * new_r01)));
                                                            evalcond[3] = (((cj0 * new_r10)) + (((-1.0) * new_r00 * x663)) + (((-1.0) * x670)));
                                                            evalcond[4] = ((((-1.0) * x668)) + ((cj0 * new_r11)) + (((-1.0) * new_r01 * x663)));
                                                            evalcond[5] = (((sj0 * x661)) + ((x660 * x665)) + new_r01);
                                                            evalcond[6] = ((((-1.0) * cj1 * x668)) + x664 + x667);
                                                            evalcond[7] = ((((-1.0) * x665 * x668)) + ((sj0 * x660)) + new_r00);
                                                            evalcond[8] = ((((-1.0) * cj0 * x668)) + ((sj0 * x669)) + new_r11);
                                                            evalcond[9] = ((((-1.0) * cj0 * x670)) + (((-1.0) * cj1 * x661 * x663)) + new_r10);
                                                            evalcond[10] = ((((-1.0) * new_r21 * x662)) + x660 + ((cj1 * x666)) + ((new_r01 * x665)));
                                                            evalcond[11] = ((((-1.0) * x668)) + ((cj1 * x664)) + ((cj1 * x667)) + (((-1.0) * new_r20 * x662)));
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                                            {
                                                                continue;
                                                            }
                                                        }

                                                        {
                                                            std::vector<IkSingleDOFSolutionBase<IkReal>> vinfos(7);
                                                            vinfos[0].jointtype = 1;
                                                            vinfos[0].foffset = j0;
                                                            vinfos[0].indices[0] = _ij0[0];
                                                            vinfos[0].indices[1] = _ij0[1];
                                                            vinfos[0].maxsolutions = _nj0;
                                                            vinfos[1].jointtype = 1;
                                                            vinfos[1].foffset = j1;
                                                            vinfos[1].indices[0] = _ij1[0];
                                                            vinfos[1].indices[1] = _ij1[1];
                                                            vinfos[1].maxsolutions = _nj1;
                                                            vinfos[2].jointtype = 1;
                                                            vinfos[2].foffset = j2;
                                                            vinfos[2].indices[0] = _ij2[0];
                                                            vinfos[2].indices[1] = _ij2[1];
                                                            vinfos[2].maxsolutions = _nj2;
                                                            vinfos[3].jointtype = 1;
                                                            vinfos[3].foffset = j3;
                                                            vinfos[3].indices[0] = _ij3[0];
                                                            vinfos[3].indices[1] = _ij3[1];
                                                            vinfos[3].maxsolutions = _nj3;
                                                            vinfos[4].jointtype = 1;
                                                            vinfos[4].foffset = j4;
                                                            vinfos[4].indices[0] = _ij4[0];
                                                            vinfos[4].indices[1] = _ij4[1];
                                                            vinfos[4].maxsolutions = _nj4;
                                                            vinfos[5].jointtype = 1;
                                                            vinfos[5].foffset = j5;
                                                            vinfos[5].indices[0] = _ij5[0];
                                                            vinfos[5].indices[1] = _ij5[1];
                                                            vinfos[5].maxsolutions = _nj5;
                                                            vinfos[6].jointtype = 1;
                                                            vinfos[6].foffset = j6;
                                                            vinfos[6].indices[0] = _ij6[0];
                                                            vinfos[6].indices[1] = _ij6[1];
                                                            vinfos[6].maxsolutions = _nj6;
                                                            std::vector<int> vfree(0);
                                                            solutions.AddSolution(vinfos, vfree);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        static inline void polyroots3(IkReal rawcoeffs[3 + 1], IkReal rawroots[3], int &numroots)
        {
            using std::complex;
            if (rawcoeffs[0] == 0)
            {
                // solve with one reduced degree
                polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
                return;
            }
            IKFAST_ASSERT(rawcoeffs[0] != 0);
            const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
            const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
            complex<IkReal> coeffs[3];
            const int maxsteps = 110;
            for (int i = 0; i < 3; ++i)
            {
                coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
            }
            complex<IkReal> roots[3];
            IkReal err[3];
            roots[0] = complex<IkReal>(1, 0);
            roots[1] = complex<IkReal>(0.4, 0.9); // any complex number not a root of unity works
            err[0] = 1.0;
            err[1] = 1.0;
            for (int i = 2; i < 3; ++i)
            {
                roots[i] = roots[i - 1] * roots[1];
                err[i] = 1.0;
            }
            for (int step = 0; step < maxsteps; ++step)
            {
                bool changed = false;
                for (int i = 0; i < 3; ++i)
                {
                    if (err[i] >= tol)
                    {
                        changed = true;
                        // evaluate
                        complex<IkReal> x = roots[i] + coeffs[0];
                        for (int j = 1; j < 3; ++j)
                        {
                            x = roots[i] * x + coeffs[j];
                        }
                        for (int j = 0; j < 3; ++j)
                        {
                            if (i != j)
                            {
                                if (roots[i] != roots[j])
                                {
                                    x /= (roots[i] - roots[j]);
                                }
                            }
                        }
                        roots[i] -= x;
                        err[i] = abs(x);
                    }
                }
                if (!changed)
                {
                    break;
                }
            }

            // sort roots hoping that it solution indices become more robust to slight change in coeffs
            std::sort(roots, roots + 3, ComplexLess<IkReal>());

            numroots = 0;
            bool visited[3] = {false};
            for (int i = 0; i < 3; ++i)
            {
                if (!visited[i])
                {
                    // might be a multiple root, in which case it will have more error than the other roots
                    // find any neighboring roots, and take the average
                    complex<IkReal> newroot = roots[i];
                    int n = 1;
                    for (int j = i + 1; j < 3; ++j)
                    {
                        // care about error in real much more than imaginary
                        if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && (abs(imag(roots[i]) - imag(roots[j])) < 0.002 || abs(imag(roots[i]) + imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002)
                        {
                            newroot += roots[j];
                            n += 1;
                            visited[j] = true;
                        }
                    }
                    if (n > 1)
                    {
                        newroot /= n;
                    }
                    // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
                    if (IKabs(imag(newroot)) < tolsqrt)
                    {
                        rawroots[numroots++] = real(newroot);
                    }
                }
            }
        }
        static inline void polyroots2(IkReal rawcoeffs[2 + 1], IkReal rawroots[2], int &numroots)
        {
            IkReal det = rawcoeffs[1] * rawcoeffs[1] - 4 * rawcoeffs[0] * rawcoeffs[2];
            if (det < 0)
            {
                numroots = 0;
            }
            else if (det == 0)
            {
                rawroots[0] = -0.5 * rawcoeffs[1] / rawcoeffs[0];
                numroots = 1;
            }
            else
            {
                det = IKsqrt(det);
                rawroots[0] = (-rawcoeffs[1] + det) / (2 * rawcoeffs[0]);
                rawroots[1] = (-rawcoeffs[1] - det) / (2 * rawcoeffs[0]); //rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
                numroots = 2;
            }
        }
        static inline void polyroots4(IkReal rawcoeffs[4 + 1], IkReal rawroots[4], int &numroots)
        {
            using std::complex;
            if (rawcoeffs[0] == 0)
            {
                // solve with one reduced degree
                polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
                return;
            }
            IKFAST_ASSERT(rawcoeffs[0] != 0);
            const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
            const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
            complex<IkReal> coeffs[4];
            const int maxsteps = 110;
            for (int i = 0; i < 4; ++i)
            {
                coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
            }
            complex<IkReal> roots[4];
            IkReal err[4];
            roots[0] = complex<IkReal>(1, 0);
            roots[1] = complex<IkReal>(0.4, 0.9); // any complex number not a root of unity works
            err[0] = 1.0;
            err[1] = 1.0;
            for (int i = 2; i < 4; ++i)
            {
                roots[i] = roots[i - 1] * roots[1];
                err[i] = 1.0;
            }
            for (int step = 0; step < maxsteps; ++step)
            {
                bool changed = false;
                for (int i = 0; i < 4; ++i)
                {
                    if (err[i] >= tol)
                    {
                        changed = true;
                        // evaluate
                        complex<IkReal> x = roots[i] + coeffs[0];
                        for (int j = 1; j < 4; ++j)
                        {
                            x = roots[i] * x + coeffs[j];
                        }
                        for (int j = 0; j < 4; ++j)
                        {
                            if (i != j)
                            {
                                if (roots[i] != roots[j])
                                {
                                    x /= (roots[i] - roots[j]);
                                }
                            }
                        }
                        roots[i] -= x;
                        err[i] = abs(x);
                    }
                }
                if (!changed)
                {
                    break;
                }
            }

            // sort roots hoping that it solution indices become more robust to slight change in coeffs
            std::sort(roots, roots + 4, ComplexLess<IkReal>());

            numroots = 0;
            bool visited[4] = {false};
            for (int i = 0; i < 4; ++i)
            {
                if (!visited[i])
                {
                    // might be a multiple root, in which case it will have more error than the other roots
                    // find any neighboring roots, and take the average
                    complex<IkReal> newroot = roots[i];
                    int n = 1;
                    for (int j = i + 1; j < 4; ++j)
                    {
                        // care about error in real much more than imaginary
                        if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && (abs(imag(roots[i]) - imag(roots[j])) < 0.002 || abs(imag(roots[i]) + imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002)
                        {
                            newroot += roots[j];
                            n += 1;
                            visited[j] = true;
                        }
                    }
                    if (n > 1)
                    {
                        newroot /= n;
                    }
                    // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
                    if (IKabs(imag(newroot)) < tolsqrt)
                    {
                        rawroots[numroots++] = real(newroot);
                    }
                }
            }
        }
    };

    /// solves the inverse kinematics equations.
    /// \param pfree is an array specifying the free joints of the chain.
    IKFAST_API bool ComputeIk(const IkReal *eetrans, const IkReal *eerot, const IkReal *pfree, IkSolutionListBase<IkReal> &solutions)
    {
        IKSolver solver;
        return solver.ComputeIk(eetrans, eerot, pfree, solutions);
    }

    IKFAST_API bool ComputeIk2(const IkReal *eetrans, const IkReal *eerot, const IkReal *pfree, IkSolutionListBase<IkReal> &solutions, void *pOpenRAVEManip)
    {
        IKSolver solver;
        return solver.ComputeIk(eetrans, eerot, pfree, solutions);
    }

    IKFAST_API const char *GetKinematicsHash() { return "<robot:GenericRobot - franka (8435d96a1d8b91a2bc992365005a91a3)>"; }

    IKFAST_API const char *GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char **argv)
{
    if (argc != 12 + GetNumFreeParameters() + 1)
    {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",
               GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9], eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for (std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13 + i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if (!bSuccess)
    {
        fprintf(stderr, "Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for (std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal> &sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0], vsolfree.size() > 0 ? &vsolfree[0] : NULL);
        for (std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif