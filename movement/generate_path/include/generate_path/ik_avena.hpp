/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2021-08-20 12:21:43.828185
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

namespace ik_avena
{

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKsin(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[0]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=((0.447)*x9);
x13=((1.0)*x0);
x14=((0.073)*x6);
x15=((0.1134)*x9);
x16=((1.0)*x6);
x17=((0.447)*x0);
x18=((0.1134)*x0);
x19=((1.0)*x9);
x20=((1.0)*x5);
x21=((0.073)*x5);
x22=((0.452)*x3);
x23=(x2*x3);
x24=((-1.0)*x5);
x25=(x11*x9);
x26=(x1*x2);
x27=(x3*x4);
x28=((-1.0)*x11);
x29=(x1*x4);
x30=((-1.0)*x6);
x31=(x10*x9);
x32=((1.0)*x26);
x33=((((-1.0)*x32))+x27);
x34=((((-1.0)*x23))+(((-1.0)*x29)));
x35=(x33*x6);
x36=(((x0*x26))+(((-1.0)*x13*x27)));
x37=((((-1.0)*x19*x27))+((x26*x9)));
x38=(x34*x5);
x39=(x13*((x23+x29)));
x40=((-1.0)*x39);
x41=(x19*((x23+x29)));
x42=((-1.0)*x41);
x43=(x37*x5);
x44=(x36*x5);
x45=((((-1.0)*x20*x34))+(((-1.0)*x16*x33)));
x46=(((x24*(((((-1.0)*x27))+x32))))+((x30*x34)));
x47=(((x39*x5))+((x36*x6)));
x48=(((x41*x5))+((x37*x6)));
x49=(((x30*x42))+((x24*x37)));
eerot[0]=(((x47*x8))+((x7*((x31+((x11*(((((-1.0)*x20*x36))+(((-1.0)*x16*x40)))))))))));
eerot[1]=(((x47*x7))+((x8*((((x28*((((x30*x40))+((x24*x36))))))+(((-1.0)*x31)))))));
eerot[2]=(((x10*((x44+((x40*x6))))))+x25);
IkReal x50=((1.0)*x29);
IkReal x51=((1.0)*x18);
eetrans[0]=((((-1.0)*x17*x50))+(((-1.0)*x0*x22))+(((-1.0)*x17*x23))+(((0.1036)*x9))+(((0.073)*x25))+((x6*((((x18*x27))+(((-1.0)*x26*x51))))))+((x5*(((((-1.0)*x18*x50))+(((-1.0)*x23*x51))))))+((x10*((((x21*x36))+((x14*x40)))))));
eerot[3]=(((x7*(((((-1.0)*x0*x10))+((x11*x49))))))+((x48*x8)));
eerot[4]=(((x8*((((x28*x49))+((x10*x13))))))+((x48*x7)));
eerot[5]=((((-1.0)*x11*x13))+((x10*((((x42*x6))+x43)))));
IkReal x52=((1.0)*x29);
IkReal x53=((1.0)*x15);
eetrans[1]=((((-1.0)*x12*x52))+(((-1.0)*x12*x23))+(((-0.1036)*x0))+(((-1.0)*x22*x9))+(((-0.073)*x0*x11))+((x6*(((((-1.0)*x26*x53))+((x15*x27))))))+((x5*(((((-1.0)*x15*x52))+(((-1.0)*x23*x53))))))+((x10*((((x21*x37))+((x14*x42)))))));
eerot[6]=(((x46*x8))+((x11*x7*((x38+x35)))));
eerot[7]=(((x46*x7))+((x11*x45*x8)));
eerot[8]=(x10*x45);
eetrans[2]=((0.1149)+((x10*(((((-1.0)*x14*x33))+(((-1.0)*x21*x34))))))+(((-0.447)*x27))+((x6*(((((-0.1134)*x29))+(((-0.1134)*x23))))))+(((0.452)*x1))+(((0.447)*x26))+((x5*(((((-0.1134)*x27))+(((0.1134)*x26)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r10;
new_r01=r11;
new_r02=r12;
new_px=((((-0.073)*r12))+py);
new_r10=r00;
new_r11=r01;
new_r12=r02;
new_py=((((-0.073)*r02))+px);
new_r20=((-1.0)*r20);
new_r21=((-1.0)*r21);
new_r22=((-1.0)*r22);
new_pz=((0.1149)+(((-1.0)*pz))+(((0.073)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x54=((1.0)*px);
IkReal x55=((1.0)*pz);
IkReal x56=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x56))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x55)));
rxp0_2=((((-1.0)*r10*x54))+((py*r00)));
rxp1_0=((((-1.0)*r21*x56))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x55)));
rxp1_2=((((-1.0)*r11*x54))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x56)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x55)));
rxp2_2=((((-1.0)*r12*x54))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x57=((0.2268)*npx);
IkReal x58=((0.2268)*npy);
IkReal x59=((0.1134)*r22);
IkReal x60=((0.1134)*r21);
IkReal x61=((-0.1134)*r20);
IkReal x62=((-0.1134)*r21);
IkReal x63=((-1.0)*npz);
IkReal x64=((-1.0)*rxp1_2);
IkReal x65=((-1.0)*r20);
IkReal x66=((-1.0)*npx);
IkReal x67=((-1.0)*r22);
IkReal x68=((-0.1134)*r22);
IkReal x69=((-1.0)*npy);
IkReal x70=((-1.0)*rxp0_2);
matrixinvcoeffs[0]=x61;
matrixinvcoeffs[1]=x57;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x65;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x70;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x61;
matrixinvcoeffs[19]=x57;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=r20;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x66;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=rxp0_2;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x62;
matrixinvcoeffs[33]=x58;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=((-1.0)*r21);
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x64;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x62;
matrixinvcoeffs[51]=x58;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=r21;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x69;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=rxp1_2;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=r22;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x63;
matrixinvcoeffs[76]=x59;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=rxp2_2;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x63;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x59;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x64;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x60;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x64;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x60;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x65;
matrixinvcoeffs[133]=x66;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x61;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x65;
matrixinvcoeffs[151]=x66;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x61;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x67;
matrixinvcoeffs[165]=x63;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x68;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x67;
matrixinvcoeffs[183]=x63;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=x68;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=r21;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x69;
matrixinvcoeffs[204]=x60;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=rxp1_2;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=x69;
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x60;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x65;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=npx;
matrixinvcoeffs[236]=x61;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=x70;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x65;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x61;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x70;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_8=matrixinvcoeffs[134], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_8=matrixinvcoeffs[136], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_8=matrixinvcoeffs[138], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x71=pz*pz;
IkReal x72=((0.1036)*pp);
IkReal x73=(gclwh15_15*r20);
IkReal x74=(gclwh6_8*r21);
IkReal x75=(npy*pz);
IkReal x76=((0.05143824)*r20);
IkReal x77=((1.0)*pp);
IkReal x78=(gclwh10_8*r22);
IkReal x79=(npx*pz);
IkReal x80=((4.0)*gclwh14_8);
IkReal x81=(gclwh13_15*r21);
IkReal x82=((0.18281767392)*rxp2_2);
IkReal x83=((2.0)*gclwh11_10);
IkReal x84=(npz*pz);
IkReal x85=((0.2268)*pp);
IkReal x86=(gclwh5_1*rxp2_2);
IkReal x87=((0.2072)*gclwh12_14);
IkReal x88=(pz*r21);
IkReal x89=(gclwh13_0*rxp1_2);
IkReal x90=(gclwh14_2*rxp0_2);
IkReal x91=((0.2268)*pz);
IkReal x92=(gclwh15_9*rxp0_2);
IkReal x93=(pp*r21);
IkReal x94=(gclwh15_0*rxp0_2);
IkReal x95=(gclwh9_0*r20);
IkReal x96=(pp*r22);
IkReal x97=((4.0)*gclwh4_8);
IkReal x98=(gclwh11_0*r22);
IkReal x99=((0.2072)*pp);
IkReal x100=(gclwh14_14*r20);
IkReal x101=((2.0)*gclwh9_10);
IkReal x102=((0.02299289328)*r20);
IkReal x103=((0.001332250416)*r21);
IkReal x104=((2.0)*pp);
IkReal x105=(gclwh15_10*r20);
IkReal x106=((0.01162504224)*r20);
IkReal x107=((4.0)*pp);
IkReal x108=(gclwh6_12*rxp1_2);
IkReal x109=(gclwh5_9*rxp2_2);
IkReal x110=((0.02349648)*rxp2_2);
IkReal x111=(gclwh12_14*rxp1_2);
IkReal x112=(pp*r20);
IkReal x113=((4.0)*gclwh11_10);
IkReal x114=(gclwh4_8*rxp2_2);
IkReal x115=(gclwh15_15*rxp0_2);
IkReal x116=((0.001332250416)*r22);
IkReal x117=((2.0)*gclwh7_10);
IkReal x118=(gclwh7_13*r21);
IkReal x119=(gclwh12_2*rxp1_2);
IkReal x120=((0.4536)*rxp1_2);
IkReal x121=(gclwh14_11*rxp0_2);
IkReal x122=((0.2027592)*rxp2_2);
IkReal x123=(gclwh7_0*r21);
IkReal x124=(gclwh10_2*r22);
IkReal x125=((0.18281767392)*rxp1_2);
IkReal x126=(gclwh11_10*r22);
IkReal x127=((0.02299289328)*r21);
IkReal x128=((0.2072)*gclwh5_15);
IkReal x129=((0.4144)*gclwh4_14);
IkReal x130=(gclwh13_9*rxp1_2);
IkReal x131=(gclwh5_15*r22);
IkReal x132=(gclwh4_14*r22);
IkReal x133=((0.02571912)*r21);
IkReal x134=(gclwh14_3*rxp0_2);
IkReal x135=(gclwh13_1*rxp1_2);
IkReal x136=(gclwh14_8*r20);
IkReal x137=((0.4536)*rxp0_2);
IkReal x138=((4.0)*gclwh7_10);
IkReal x139=(gclwh12_8*rxp1_2);
IkReal x140=(gclwh10_12*r22);
IkReal x141=(gclwh4_2*rxp2_2);
IkReal x142=(gclwh8_12*rxp0_2);
IkReal x143=((0.02571912)*r20);
IkReal x144=((0.4536)*rxp2_2);
IkReal x145=(gclwh15_1*rxp0_2);
IkReal x146=(gclwh5_15*rxp2_2);
IkReal x147=(gclwh4_11*rxp2_2);
IkReal x148=(gclwh9_7*r20);
IkReal x149=(gclwh7_10*r21);
IkReal x150=(gclwh4_8*r22);
IkReal x151=(gclwh8_8*r20);
IkReal x152=((0.9072)*rxp0_2);
IkReal x153=((4.0)*gclwh12_8);
IkReal x154=((0.9072)*rxp1_2);
IkReal x155=(gclwh4_3*rxp2_2);
IkReal x156=((0.01285956)*pz);
IkReal x157=(gclwh11_13*r22);
IkReal x158=(gclwh9_13*r20);
IkReal x159=(gclwh12_14*r21);
IkReal x160=(gclwh14_14*rxp0_2);
IkReal x161=((0.4144)*gclwh12_14);
IkReal x162=(gclwh12_11*rxp1_2);
IkReal x163=(gclwh8_12*r20);
IkReal x164=(gclwh5_0*rxp2_2);
IkReal x165=(gclwh13_15*rxp1_2);
IkReal x166=((0.02349648)*rxp1_2);
IkReal x167=((0.01162504224)*r21);
IkReal x168=((0.9072)*rxp2_2);
IkReal x169=(gclwh4_14*rxp2_2);
IkReal x170=(gclwh12_3*rxp1_2);
IkReal x171=((0.2072)*gclwh4_14);
IkReal x172=(gclwh8_2*r20);
IkReal x173=(gclwh9_10*r20);
IkReal x174=(gclwh6_12*r21);
IkReal x175=(gclwh8_5*r20);
IkReal x176=((0.2268)*rxp0_2);
IkReal x177=((0.02349648)*rxp0_2);
IkReal x178=((0.01162504224)*r22);
IkReal x179=(gclwh6_2*r21);
IkReal x180=(gclwh6_5*x103);
IkReal x181=(gclwh4_14*x110);
IkReal x182=((0.02349648)*x111);
IkReal x183=((0.001332250416)*x175);
IkReal x184=((0.02349648)*x160);
IkReal x185=(gclwh10_5*x116);
IkReal x186=(gclwh14_8*x176);
IkReal x187=((0.01285956)*x78);
IkReal x188=((0.01285956)*x151);
IkReal x189=((0.2268)*x139);
IkReal x190=((0.01285956)*x74);
IkReal x191=((0.2268)*x114);
IkReal x192=(gclwh15_10*x176);
IkReal x193=((0.01285956)*x126);
IkReal x194=((0.01285956)*x173);
IkReal x195=((0.01285956)*x149);
IkReal x196=((0.2268)*gclwh13_10*rxp1_2);
IkReal x197=((0.2268)*gclwh5_10*rxp2_2);
IkReal x198=((0.02349648)*x115);
IkReal x199=(gclwh7_7*x103);
IkReal x200=((0.001332250416)*x148);
IkReal x201=(gclwh5_15*x110);
IkReal x202=((0.02349648)*x165);
IkReal x203=(gclwh11_7*x116);
IkReal x204=((0.001332250416)*x100);
IkReal x205=(gclwh6_5*x166);
IkReal x206=(gclwh8_5*x177);
IkReal x207=(gclwh4_14*x116);
IkReal x208=(gclwh12_14*x103);
IkReal x209=(gclwh10_5*x110);
IkReal x210=((0.001332250416)*x81);
IkReal x211=(gclwh7_7*x166);
IkReal x212=(gclwh5_15*x116);
IkReal x213=(gclwh11_7*x110);
IkReal x214=((0.001332250416)*x73);
IkReal x215=(gclwh9_7*x177);
IkReal x216=((0.02571912)*x74);
IkReal x217=(gclwh12_8*x120);
IkReal x218=((0.4536)*x114);
IkReal x219=(gclwh8_8*x143);
IkReal x220=((0.02571912)*x78);
IkReal x221=(gclwh14_8*x137);
IkReal x222=((0.04699296)*x160);
IkReal x223=((0.02571912)*x126);
IkReal x224=(gclwh9_10*x143);
IkReal x225=(gclwh15_10*x137);
IkReal x226=(gclwh13_10*x120);
IkReal x227=(gclwh5_10*x144);
IkReal x228=(gclwh7_10*x133);
IkReal x229=((0.04699296)*x115);
IkReal x230=((0.02571912)*x136);
IkReal x231=(gclwh6_8*x120);
IkReal x232=(gclwh12_8*x133);
IkReal x233=(gclwh8_8*x137);
IkReal x234=((0.02571912)*x150);
IkReal x235=(gclwh10_8*x144);
IkReal x236=((2.0)*x71);
IkReal x237=(gclwh6_5*r21*x72);
IkReal x238=((0.2072)*gclwh8_5*x79);
IkReal x239=((0.2072)*gclwh10_5*x84);
IkReal x240=(x175*x72);
IkReal x241=((0.2072)*gclwh6_5*x75);
IkReal x242=(gclwh10_5*r22*x72);
IkReal x243=(x124*x156);
IkReal x244=(x155*x85);
IkReal x245=(x90*x91);
IkReal x246=((2.0)*gclwh6_8*x75);
IkReal x247=(gclwh10_2*pz*x96);
IkReal x248=(x156*x172);
IkReal x249=(gclwh8_2*pz*x112);
IkReal x250=(x170*x85);
IkReal x251=((0.01285956)*gclwh6_2*x88);
IkReal x252=(x141*x91);
IkReal x253=(x134*x85);
IkReal x254=((2.0)*gclwh8_8*x79);
IkReal x255=((2.0)*gclwh10_8*x84);
IkReal x256=(x119*x91);
IkReal x257=(x91*x94);
IkReal x258=(x135*x85);
IkReal x259=(gclwh11_0*pz*x96);
IkReal x260=(x117*x75);
IkReal x261=(x156*x95);
IkReal x262=(x85*x86);
IkReal x263=(x156*x98);
IkReal x264=(pp*pz*x95);
IkReal x265=(x83*x84);
IkReal x266=(x101*x79);
IkReal x267=(x89*x91);
IkReal x268=(x164*x91);
IkReal x269=(x145*x85);
IkReal x270=((0.01285956)*gclwh7_0*x88);
IkReal x271=((0.2072)*gclwh9_7*x79);
IkReal x272=(gclwh7_7*r21*x72);
IkReal x273=((0.2072)*gclwh11_7*x84);
IkReal x274=((0.2072)*gclwh7_7*x75);
IkReal x275=(x148*x72);
IkReal x276=(gclwh11_7*r22*x72);
IkReal x277=(x75*x87);
IkReal x278=(x171*x84);
IkReal x279=(x100*x72);
IkReal x280=(x159*x72);
IkReal x281=((0.2072)*gclwh14_14*x79);
IkReal x282=(x132*x72);
IkReal x283=((0.2072)*gclwh15_15*x79);
IkReal x284=(x72*x81);
IkReal x285=(x131*x72);
IkReal x286=((0.2072)*gclwh13_15*x75);
IkReal x287=(x72*x73);
IkReal x288=(x128*x84);
IkReal x289=((4.0)*gclwh10_8*x84);
IkReal x290=(x104*x74);
IkReal x291=((4.0)*gclwh8_8*x79);
IkReal x292=(x104*x78);
IkReal x293=(x104*x151);
IkReal x294=((4.0)*gclwh6_8*x75);
IkReal x295=(x83*x96);
IkReal x296=(x138*x75);
IkReal x297=(x101*x112);
IkReal x298=(x117*x93);
IkReal x299=((4.0)*gclwh9_10*x79);
IkReal x300=(x113*x84);
IkReal x301=(x84*x97);
IkReal x302=(x104*x136);
IkReal x303=(x153*x75);
IkReal x304=((2.0)*gclwh4_8*x96);
IkReal x305=((2.0)*gclwh12_8*x93);
IkReal x306=(x79*x80);
IkReal x307=(gclwh6_2*npy*x236);
IkReal x308=(gclwh6_2*x77*x88);
IkReal x309=(gclwh10_2*npz*x236);
IkReal x310=(gclwh8_2*npx*x236);
IkReal x311=(gclwh7_0*npy*x236);
IkReal x312=(gclwh9_0*npx*x236);
IkReal x313=(gclwh11_0*npz*x236);
IkReal x314=(gclwh7_0*x77*x88);
IkReal x315=((((0.04699296)*x169))+(((0.04699296)*x111)));
IkReal x316=((((0.04699296)*x165))+(((0.04699296)*x146)));
IkReal x317=(x181+x182);
IkReal x318=(x202+x201);
IkReal x319=(x213+x215);
IkReal x320=(x206+x209);
IkReal x321=(x315+(((-1.0)*x222)));
IkReal x322=(x316+(((-1.0)*x229)));
IkReal x323=(x186+x187+x188+x246);
IkReal x324=(x193+x192+x194+x260);
IkReal x325=(x214+x288+x287+x286);
IkReal x326=(x180+x238+x239+x237);
IkReal x327=(x199+x272+x273+x271);
IkReal x328=(x204+x277+x278+x279);
IkReal x329=(x197+x196+x195+x265+x266);
IkReal x330=(x191+x190+x189+x254+x255);
IkReal x331=(x203+x200+x276+x274+x275);
IkReal x332=(x185+x183+x242+x241+x240);
IkReal x333=(x207+x208+x282+x281+x280);
IkReal x334=(x302+x303+x301+x230+x231);
IkReal x335=(x210+x212+x285+x284+x283);
IkReal x336=(x223+x225+x224+x295+x296+x297);
IkReal x337=(x216+x217+x218+x290+x291+x289);
IkReal x338=(x300+x228+x227+x226+x298+x299);
IkReal x339=(x219+x221+x220+x292+x293+x294);
IkReal x340=(x306+x304+x305+x232+x233+x234+x235);
IkReal x341=(x308+x309+x310+x256+x251+x252+x253);
IkReal x342=(x314+x313+x312+x267+x269+x268+x270);
IkReal x343=(((x100*x99))+(((-1.0)*x171*x96))+((x161*x75))+((x129*x84))+(((-1.0)*x87*x93))+(((-0.4144)*gclwh14_14*x79))+(((-0.002664500832)*x132))+(((-0.002664500832)*x159))+(((0.002664500832)*x100)));
IkReal x344=(x307+x250+x243+x247+x245+x244+x249+x248);
IkReal x345=(x311+x258+x259+x257+x264+x261+x263+x262);
op[0]=((-0.1862728)+x184+x326+(((-1.0)*x317))+(((-1.0)*x332)));
op[1]=((((-0.2038932)*x119))+(((-1.0)*gclwh4_3*x82))+(((-0.01156074444)*x179))+(((-1.798)*gclwh8_2*x79))+(((-0.899)*gclwh6_2*x93))+(((0.18281767392)*x134))+(((-1.0)*x323))+(((0.01156074444)*x172))+(((-0.2038932)*x141))+x330+x344+(((0.899)*gclwh10_2*x96))+(((0.17817408)*x147))+(((0.01156074444)*x124))+(((1.798)*gclwh6_2*x75))+(((0.17817408)*x162))+(((-1.0)*gclwh12_3*x125))+(((0.2038932)*x90))+((pp*x74))+(((-1.798)*gclwh10_2*x84))+(((-1.0)*x341))+(((-1.0)*x77*x78))+(((0.899)*gclwh8_2*x112))+(((-1.0)*x151*x77))+(((-0.17817408)*x121)));
op[2]=((((1.788)*gclwh6_12*x75))+(((-1.788)*gclwh10_12*x84))+(((-0.2050272)*x121))+(((-1.788)*gclwh8_12*x79))+(((0.01149644664)*x163))+(((-0.01149644664)*x174))+x337+(((0.01149644664)*x140))+(((-0.894)*gclwh6_12*x93))+(((0.894)*gclwh8_12*x112))+(((0.2050272)*x147))+(((-1.0)*x339))+(((0.894)*gclwh10_12*x96))+(((0.2050272)*x162)));
op[3]=x321;
op[4]=((-0.001036)+(((-1.0)*x184))+x326+x317+(((-1.0)*x332)));
op[5]=((((0.001134)*x90))+(((0.02685312)*x121))+(((-0.001134)*x119))+(((0.01)*gclwh6_2*x75))+(((0.005)*gclwh8_2*x112))+(((-6.42978e-5)*x179))+(((-0.01)*gclwh10_2*x84))+(((-0.001134)*x141))+(((0.005)*gclwh10_2*x96))+((gclwh8_8*x112))+x323+x344+(((6.42978e-5)*x124))+(((-1.0)*x74*x77))+(((-0.02685312)*x147))+(((-1.0)*x330))+(((0.00047664288)*x155))+(((6.42978e-5)*x172))+((pp*x78))+(((-0.02685312)*x162))+(((-1.0)*x341))+(((0.00047664288)*x170))+(((-0.005)*gclwh6_2*x93))+(((-0.00047664288)*x134))+(((-0.01)*gclwh8_2*x79)));
op[6]=((((0.899)*pp*x95))+(((-0.22961232)*x92))+(((-1.0)*gclwh13_1*x125))+(((-1.0)*x173*x77))+(((-0.2038932)*x89))+((gclwh7_10*x93))+(((1.798)*gclwh7_0*x75))+(((-0.01156074444)*x123))+(((-1.0)*x324))+(((-1.798)*gclwh11_0*x84))+(((0.18281767392)*x145))+(((0.01156074444)*x98))+(((0.01156074444)*x95))+x329+x345+(((-1.0)*gclwh5_1*x82))+(((-0.2038932)*x164))+(((0.22961232)*x130))+(((-1.798)*gclwh9_0*x79))+(((-0.899)*gclwh7_0*x93))+(((0.2038932)*x94))+(((-1.0)*x342))+(((-1.0)*x126*x77))+(((0.22961232)*x109))+(((0.899)*gclwh11_0*x96)));
op[7]=((-0.1862728)+(((-1.0)*x198))+x327+x318+(((-1.0)*x331)));
op[8]=x322;
op[9]=((((-0.2050272)*x109))+(((-0.2050272)*x130))+(((1.788)*gclwh7_13*x75))+(((0.01149644664)*x157))+(((0.01149644664)*x158))+x336+(((-1.788)*gclwh9_13*x79))+(((-1.788)*gclwh11_13*x84))+(((-0.01149644664)*x118))+(((-1.0)*x338))+(((0.2050272)*x92))+(((0.894)*gclwh11_13*x96))+(((0.894)*gclwh9_13*x112))+(((-0.894)*gclwh7_13*x93)));
op[10]=((((0.001134)*x94))+(((0.00047664288)*x86))+(((-0.01)*gclwh11_0*x84))+(((-0.001134)*x89))+(((0.005)*pp*x95))+(((-1.0)*x329))+(((-0.005)*gclwh7_0*x93))+(((-6.42978e-5)*x123))+x324+x345+(((-0.02458512)*x92))+(((0.005)*gclwh11_0*x96))+(((-0.01)*gclwh9_0*x79))+(((6.42978e-5)*x95))+(((6.42978e-5)*x98))+(((-0.001134)*x164))+((gclwh11_10*x96))+(((0.00047664288)*x135))+(((-1.0)*x149*x77))+((gclwh9_10*x112))+(((0.02458512)*x130))+(((-1.0)*x342))+(((0.02458512)*x109))+(((0.01)*gclwh7_0*x75))+(((-0.00047664288)*x145)));
op[11]=((-0.001036)+x198+x327+(((-1.0)*x318))+(((-1.0)*x331)));
op[12]=((((-1.0)*x320))+(((-1.0)*x328))+x333+x205);
op[13]=((-0.79746804)+(((-0.01156074444)*gclwh3_2*r21))+(((0.2268)*gclwh8_2*pz*rxp0_2))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((0.79321484)*gclwh12_3*pp*r21))+(((0.79321484)*gclwh4_3*pp*r22))+(((0.7856)*gclwh14_11*pp*r20))+(((-1.5712)*gclwh14_11*npx*pz))+(((-0.7856)*gclwh12_11*pp*r21))+(((0.2038932)*gclwh10_2*rxp2_2))+(((1.5712)*gclwh12_11*npy*pz))+(((-1.798)*gclwh4_2*npz*pz))+(((2.0)*gclwh4_3*npz*pp*pz))+(((1.798)*gclwh14_2*npx*pz))+(((0.81893396)*gclwh1_3*pp*r20))+(((0.899)*gclwh12_2*pp*r21))+(((0.01156074444)*gclwh12_2*r21))+((gclwh14_3*r20*(pp*pp)))+(((0.2268)*gclwh6_8*rxp1_2))+(((-0.79321484)*gclwh14_3*pp*r20))+(((-0.01156074444)*gclwh14_2*r20))+(((-0.01285956)*gclwh14_2*pz*r20))+(((-1.6121488)*gclwh3_3*npy*pz))+((gclwh1_2*pp*pz*r20))+(((0.01285956)*gclwh4_2*pz*r22))+(((0.01156074444)*gclwh4_2*r22))+(((-0.2268)*gclwh8_8*rxp0_2))+(((0.2268)*gclwh10_2*pz*rxp2_2))+(((-1.798)*gclwh1_2*npx*pz))+(((-0.01285956)*gclwh4_8*r22))+(((-0.010365762111264)*gclwh3_3*r21))+(((-1.6121488)*gclwh1_3*npx*pz))+(((2.0)*gclwh3_3*npy*pp*pz))+(((-0.899)*gclwh14_2*pp*r20))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-1.0)*gclwh14_2*pp*pz*r20))+(((-1.0)*gclwh12_8*pp*r21))+((gclwh3_2*pp*pz*r21))+(((2.0)*gclwh12_8*npy*pz))+(((-0.01285956)*gclwh1_2*pz*r20))+(((0.01285956)*gclwh12_2*pz*r21))+(((-2.0)*gclwh12_2*npy*(pz*pz)))+(((0.01285956)*gclwh14_8*r20))+(((-1.6121488)*gclwh12_3*npy*pz))+((gclwh14_8*pp*r20))+(((-2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.7856)*gclwh4_11*pp*r22))+(((-0.2038932)*gclwh6_2*rxp1_2))+(((-2.0)*gclwh14_8*npx*pz))+(((-1.798)*gclwh12_2*npy*pz))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((-1.0)*gclwh12_3*r21*(pp*pp)))+(((2.0)*gclwh1_3*npx*pp*pz))+(((0.010365762111264)*gclwh12_3*r21))+(((0.81893396)*gclwh3_3*pp*r21))+(((-0.01285956)*gclwh3_2*pz*r21))+(((0.899)*gclwh3_2*pp*r21))+(((-1.0)*gclwh4_8*pp*r22))+(((0.899)*gclwh4_2*pp*r22))+(((-0.01285956)*gclwh12_8*r21))+(((0.899)*gclwh1_2*pp*r20))+(((-0.010102470336)*gclwh12_11*r21))+(((2.0)*gclwh4_8*npz*pz))+(((2.0)*gclwh12_3*npy*pp*pz))+(((2.0)*gclwh14_2*npx*(pz*pz)))+(((-1.6121488)*gclwh4_3*npz*pz))+(((-0.2268)*pz))+(((0.2038932)*gclwh8_2*rxp0_2))+(((1.5712)*gclwh4_11*npz*pz))+(((-0.2268)*gclwh6_2*pz*rxp1_2))+(((-0.010365762111264)*gclwh14_3*r20))+(((-0.2268)*gclwh10_8*rxp2_2))+(((1.6121488)*gclwh14_3*npx*pz))+(((0.010365762111264)*gclwh4_3*r22))+(((0.010102470336)*gclwh14_11*r20))+(((-0.010102470336)*gclwh4_11*r22))+(((-1.798)*gclwh3_2*npy*pz))+(((-0.01156074444)*gclwh1_2*r20))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+((gclwh12_2*pp*pz*r21))+(((-1.0)*gclwh1_3*r20*(pp*pp)))+(((-0.010365762111264)*gclwh1_3*r20)));
op[14]=((0.01247592)+(((1.808)*gclwh4_11*x84))+(((-0.904)*gclwh12_11*x93))+(((-1.808)*gclwh14_11*x79))+((gclwh10_12*x122))+(((-1.0)*gclwh12_11*x167))+x334+(((-0.904)*gclwh4_11*x96))+(((-0.2027592)*x108))+(((-1.0)*gclwh4_11*x178))+((gclwh14_11*x106))+(((-1.0)*x340))+(((0.2027592)*x142))+(((1.808)*gclwh12_11*x75))+(((0.904)*gclwh14_11*x112)));
op[15]=x343;
op[16]=((((-1.0)*x320))+x328+x205+(((-1.0)*x333)));
op[17]=((-0.01070796)+(((0.01075796)*gclwh1_3*pp*r20))+(((0.2268)*gclwh8_2*pz*rxp0_2))+(((0.0042032)*gclwh3_3*npy*pz))+(((2.7025651296e-5)*gclwh1_3*r20))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((2.0)*gclwh4_3*npz*pp*pz))+(((0.01)*gclwh14_2*npx*pz))+(((0.005)*gclwh4_2*pp*r22))+(((0.0042032)*gclwh1_3*npx*pz))+(((2.7025651296e-5)*gclwh14_3*r20))+((gclwh14_3*r20*(pp*pp)))+(((-0.01496116)*gclwh4_3*pp*r22))+(((-0.001522571904)*gclwh14_11*r20))+(((0.01285956)*gclwh4_8*r22))+(((6.42978e-5)*gclwh4_2*r22))+(((-0.1184)*gclwh14_11*pp*r20))+(((-2.0)*gclwh4_8*npz*pz))+(((-0.01285956)*gclwh14_2*pz*r20))+(((-1.0)*gclwh14_8*pp*r20))+((gclwh1_2*pp*pz*r20))+(((0.001134)*gclwh10_2*rxp2_2))+(((0.01285956)*gclwh4_2*pz*r22))+(((0.2268)*gclwh10_2*pz*rxp2_2))+(((0.005)*gclwh3_2*pp*r21))+(((0.01285956)*gclwh12_8*r21))+(((0.1184)*gclwh4_11*pp*r22))+(((0.0042032)*gclwh12_3*npy*pz))+(((2.0)*gclwh3_3*npy*pp*pz))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-1.0)*gclwh14_2*pp*pz*r20))+(((0.2268)*gclwh8_8*rxp0_2))+((gclwh3_2*pp*pz*r21))+(((-0.005)*gclwh14_2*pp*r20))+(((-0.0042032)*gclwh14_3*npx*pz))+(((-0.01285956)*gclwh1_2*pz*r20))+(((0.01285956)*gclwh12_2*pz*r21))+(((-2.0)*gclwh12_2*npy*(pz*pz)))+(((-0.2368)*gclwh12_11*npy*pz))+(((-2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh12_8*npy*pz))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((0.01496116)*gclwh14_3*pp*r20))+(((-6.42978e-5)*gclwh1_2*r20))+(((0.001522571904)*gclwh4_11*r22))+((gclwh12_8*pp*r21))+(((0.0042032)*gclwh4_3*npz*pz))+(((-2.7025651296e-5)*gclwh12_3*r21))+(((0.2368)*gclwh14_11*npx*pz))+(((-0.2368)*gclwh4_11*npz*pz))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((-1.0)*gclwh12_3*r21*(pp*pp)))+(((2.0)*gclwh1_3*npx*pp*pz))+(((-0.01285956)*gclwh3_2*pz*r21))+(((0.1184)*gclwh12_11*pp*r21))+(((2.0)*gclwh14_8*npx*pz))+(((-0.01)*gclwh4_2*npz*pz))+(((0.01075796)*gclwh3_3*pp*r21))+(((-0.001134)*gclwh6_2*rxp1_2))+(((-2.7025651296e-5)*gclwh4_3*r22))+(((0.2268)*gclwh10_8*rxp2_2))+(((0.001522571904)*gclwh12_11*r21))+(((-0.01496116)*gclwh12_3*pp*r21))+(((-0.01)*gclwh1_2*npx*pz))+(((-0.01285956)*gclwh14_8*r20))+(((2.0)*gclwh12_3*npy*pp*pz))+(((2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.2268)*pz))+(((0.001134)*gclwh8_2*rxp0_2))+(((0.005)*gclwh1_2*pp*r20))+(((-0.2268)*gclwh6_2*pz*rxp1_2))+(((-0.01)*gclwh12_2*npy*pz))+(((-0.01)*gclwh3_2*npy*pz))+(((6.42978e-5)*gclwh12_2*r21))+((gclwh4_8*pp*r22))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+(((0.005)*gclwh12_2*pp*r21))+(((-0.2268)*gclwh6_8*rxp1_2))+(((-6.42978e-5)*gclwh3_2*r21))+(((2.7025651296e-5)*gclwh3_3*r21))+((gclwh12_2*pp*pz*r21))+(((-6.42978e-5)*gclwh14_2*r20))+(((-1.0)*gclwh1_3*r20*(pp*pp))));
op[18]=((-0.79746804)+(((-1.798)*gclwh5_0*npz*pz))+(((-1.798)*gclwh13_0*npy*pz))+(((0.01285956)*gclwh0_0*pz*r20))+(((0.013019018544)*gclwh15_9*r20))+(((1.798)*gclwh2_0*npy*pz))+(((-0.010365762111264)*gclwh15_1*r20))+((gclwh15_1*r20*(pp*pp)))+(((0.79321484)*gclwh5_1*pp*r22))+(((-0.01285956)*gclwh5_10*r22))+(((1.0124)*gclwh15_9*pp*r20))+(((2.0248)*gclwh5_9*npz*pz))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+((gclwh5_0*pp*pz*r22))+(((-0.899)*gclwh0_0*pp*r20))+(((0.899)*gclwh13_0*pp*r21))+(((-0.01285956)*gclwh15_0*pz*r20))+(((0.01156074444)*gclwh13_0*r21))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((2.0)*gclwh5_1*npz*pp*pz))+(((-2.0)*gclwh15_10*npx*pz))+((gclwh13_0*pp*pz*r21))+(((0.2038932)*gclwh11_0*rxp2_2))+(((-0.01156074444)*gclwh15_0*r20))+(((0.2268)*gclwh7_10*rxp1_2))+(((0.010365762111264)*gclwh13_1*r21))+(((-0.899)*gclwh15_0*pp*r20))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-0.013019018544)*gclwh5_9*r22))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((-0.2038932)*gclwh7_0*rxp1_2))+(((0.01285956)*gclwh2_0*pz*r21))+(((-0.81893396)*gclwh0_1*pp*r20))+(((2.0)*gclwh13_1*npy*pp*pz))+(((1.798)*gclwh0_0*npx*pz))+(((1.798)*gclwh15_0*npx*pz))+(((0.2268)*pz))+(((-1.0)*gclwh13_10*pp*r21))+(((-0.81893396)*gclwh2_1*pp*r21))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((0.01156074444)*gclwh2_0*r21))+(((-1.0)*gclwh5_10*pp*r22))+(((-0.013019018544)*gclwh13_9*r21))+(((2.0248)*gclwh13_9*npy*pz))+(((-0.2268)*gclwh7_0*pz*rxp1_2))+(((-1.0124)*gclwh13_9*pp*r21))+(((0.2268)*gclwh11_0*pz*rxp2_2))+(((-1.6121488)*gclwh5_1*npz*pz))+(((1.6121488)*gclwh0_1*npx*pz))+(((0.010365762111264)*gclwh2_1*r21))+(((-0.899)*gclwh2_0*pp*r21))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((0.01285956)*gclwh13_0*pz*r21))+(((0.01285956)*gclwh15_10*r20))+(((-1.0124)*gclwh5_9*pp*r22))+(((-0.2268)*gclwh9_10*rxp0_2))+((gclwh2_1*r21*(pp*pp)))+(((2.0)*gclwh5_10*npz*pz))+(((1.6121488)*gclwh2_1*npy*pz))+(((0.010365762111264)*gclwh5_1*r22))+(((0.010365762111264)*gclwh0_1*r20))+(((0.01156074444)*gclwh5_0*r22))+(((2.0)*gclwh13_10*npy*pz))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((0.899)*gclwh5_0*pp*r22))+((gclwh15_10*pp*r20))+(((-0.01285956)*gclwh13_10*r21))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((-2.0248)*gclwh15_9*npx*pz))+(((0.79321484)*gclwh13_1*pp*r21))+(((-0.2268)*gclwh11_10*rxp2_2))+(((0.2038932)*gclwh9_0*rxp0_2))+(((0.2268)*gclwh9_0*pz*rxp0_2))+(((0.01285956)*gclwh5_0*pz*r22))+((gclwh0_1*r20*(pp*pp)))+(((1.6121488)*gclwh15_1*npx*pz))+(((-1.6121488)*gclwh13_1*npy*pz))+(((0.01156074444)*gclwh0_0*r20))+(((-0.79321484)*gclwh15_1*pp*r20)));
op[19]=(x325+x211+(((-1.0)*x319))+(((-1.0)*x335)));
op[20]=((((-0.002664500832)*x81))+(((-0.4144)*gclwh15_15*x79))+((x73*x99))+(((-0.002664500832)*x131))+(((0.002664500832)*x73))+(((0.4144)*gclwh13_15*x75))+(((0.4144)*gclwh5_15*x84))+(((-1.0)*x81*x99))+(((-1.0)*x128*x96)));
op[21]=((-0.01247592)+(((-1.0)*x104*x105))+(((-4.0)*gclwh5_10*x84))+(((-0.904)*gclwh15_9*x112))+((gclwh11_10*x144))+(((0.904)*gclwh5_9*x96))+(((0.904)*gclwh13_9*x93))+(((2.0)*gclwh5_10*x96))+(((-4.0)*gclwh13_10*x75))+(((0.02571912)*gclwh5_10*r22))+(((-1.0)*gclwh7_10*x120))+(((1.808)*gclwh15_9*x79))+(((-0.2027592)*gclwh7_13*rxp1_2))+(((-0.02571912)*x105))+(((4.0)*gclwh15_10*x79))+((gclwh13_9*x167))+(((-1.808)*gclwh5_9*x84))+((gclwh13_10*x133))+((gclwh11_13*x122))+(((-1.808)*gclwh13_9*x75))+(((-1.0)*gclwh15_9*x106))+((gclwh9_10*x137))+(((2.0)*gclwh13_10*x93))+((gclwh5_9*x178))+(((0.2027592)*gclwh9_13*rxp0_2)));
op[22]=((-0.01070796)+(((0.01)*gclwh2_0*npy*pz))+(((-0.001393976304)*gclwh13_9*r21))+(((-0.005)*gclwh15_0*pp*r20))+(((-2.0)*gclwh5_10*npz*pz))+(((6.42978e-5)*gclwh5_0*r22))+(((0.01285956)*gclwh0_0*pz*r20))+(((0.001134)*gclwh11_0*rxp2_2))+((gclwh5_10*pp*r22))+(((-0.01285956)*gclwh15_10*r20))+(((0.01285956)*gclwh5_10*r22))+((gclwh15_1*r20*(pp*pp)))+(((-0.005)*gclwh2_0*pp*r21))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+((gclwh5_0*pp*pz*r22))+(((-2.7025651296e-5)*gclwh5_1*r22))+(((0.2168)*gclwh5_9*npz*pz))+((gclwh13_10*pp*r21))+(((-0.01285956)*gclwh15_0*pz*r20))+(((0.01)*gclwh15_0*npx*pz))+(((-0.0042032)*gclwh2_1*npy*pz))+(((0.2168)*gclwh13_9*npy*pz))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((-0.001134)*gclwh7_0*rxp1_2))+(((2.0)*gclwh5_1*npz*pp*pz))+((gclwh13_0*pp*pz*r21))+(((-0.01)*gclwh13_0*npy*pz))+(((-6.42978e-5)*gclwh15_0*r20))+(((0.001393976304)*gclwh15_9*r20))+(((-0.1084)*gclwh5_9*pp*r22))+(((0.0042032)*gclwh13_1*npy*pz))+(((6.42978e-5)*gclwh2_0*r21))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((-0.01)*gclwh5_0*npz*pz))+(((0.01285956)*gclwh2_0*pz*r21))+(((0.1084)*gclwh15_9*pp*r20))+(((-2.0)*gclwh13_10*npy*pz))+(((0.01285956)*gclwh13_10*r21))+(((-0.01496116)*gclwh5_1*pp*r22))+(((2.0)*gclwh13_1*npy*pp*pz))+(((0.2268)*gclwh11_10*rxp2_2))+(((-0.01075796)*gclwh2_1*pp*r21))+(((-2.7025651296e-5)*gclwh13_1*r21))+(((-0.01496116)*gclwh13_1*pp*r21))+(((6.42978e-5)*gclwh13_0*r21))+(((0.2268)*pz))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-2.7025651296e-5)*gclwh2_1*r21))+(((-0.001393976304)*gclwh5_9*r22))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((-0.0042032)*gclwh0_1*npx*pz))+(((-0.1084)*gclwh13_9*pp*r21))+(((0.005)*gclwh5_0*pp*r22))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((0.0042032)*gclwh5_1*npz*pz))+(((-0.2268)*gclwh7_0*pz*rxp1_2))+(((0.2268)*gclwh11_0*pz*rxp2_2))+(((0.01496116)*gclwh15_1*pp*r20))+(((2.0)*gclwh15_10*npx*pz))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((0.01285956)*gclwh13_0*pz*r21))+(((-1.0)*gclwh15_10*pp*r20))+((gclwh2_1*r21*(pp*pp)))+(((-0.01075796)*gclwh0_1*pp*r20))+(((2.7025651296e-5)*gclwh15_1*r20))+(((0.001134)*gclwh9_0*rxp0_2))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((-0.2168)*gclwh15_9*npx*pz))+(((-0.0042032)*gclwh15_1*npx*pz))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((-0.2268)*gclwh7_10*rxp1_2))+(((-0.005)*gclwh0_0*pp*r20))+(((0.005)*gclwh13_0*pp*r21))+(((0.2268)*gclwh9_0*pz*rxp0_2))+(((0.01285956)*gclwh5_0*pz*r22))+(((0.01)*gclwh0_0*npx*pz))+(((6.42978e-5)*gclwh0_0*r20))+((gclwh0_1*r20*(pp*pp)))+(((0.2268)*gclwh9_10*rxp0_2))+(((-2.7025651296e-5)*gclwh0_1*r20)));
op[23]=((((-1.0)*x325))+x335+x211+(((-1.0)*x319)));
op[24]=((((-0.02312148888)*x174))+(((-3.596)*gclwh10_12*x84))+(((-3.596)*gclwh8_12*x79))+(((1.798)*gclwh8_12*x112))+(((-1.798)*gclwh6_12*x93))+x337+(((0.02312148888)*x140))+(((0.02312148888)*x163))+(((3.596)*gclwh6_12*x75))+(((-1.0)*x339))+(((1.798)*gclwh10_12*x96)));
op[25]=x321;
op[26]=((0.3704736)+(((0.09398592)*x111))+(((0.09398592)*x169))+(((-0.09398592)*x160)));
op[27]=(((gclwh8_8*x76))+(((0.4055184)*x141))+(((-0.9072)*x139))+(((-1.0)*gclwh8_2*x102))+(((-0.4055184)*x90))+((x107*x151))+(((-8.0)*gclwh10_8*x84))+(((-0.05143824)*x74))+(((0.4055184)*x119))+((x107*x78))+((gclwh6_2*x127))+(((8.0)*gclwh6_8*x75))+(((1.788)*gclwh6_2*x93))+(((3.576)*gclwh10_2*x84))+(((-1.788)*gclwh10_2*x96))+(((-1.788)*gclwh8_2*x112))+((gclwh14_8*x152))+(((-1.0)*x107*x74))+(((3.576)*gclwh8_2*x79))+(((-8.0)*gclwh8_8*x79))+(((0.05143824)*x78))+(((-0.02299289328)*x124))+(((-0.9072)*x114))+(((-3.576)*gclwh6_2*x75)));
op[28]=((((-0.01)*gclwh6_12*x93))+(((-0.02)*gclwh8_12*x79))+(((0.01)*gclwh10_12*x96))+(((0.01)*gclwh8_12*x112))+(((0.0001285956)*x163))+(((0.0001285956)*x140))+x339+(((-1.0)*x337))+(((0.02)*gclwh6_12*x75))+(((-0.0001285956)*x174))+(((-0.02)*gclwh10_12*x84)));
op[29]=(x222+(((-1.0)*x315)));
op[30]=x322;
op[31]=((((-3.596)*gclwh11_13*x84))+(((3.596)*gclwh7_13*x75))+(((1.798)*gclwh9_13*x112))+(((-0.02312148888)*x118))+x336+(((0.02312148888)*x158))+(((0.02312148888)*x157))+(((-3.596)*gclwh9_13*x79))+(((-1.0)*x338))+(((1.798)*gclwh11_13*x96))+(((-1.798)*gclwh7_13*x93)));
op[32]=(((x113*x96))+(((0.05143824)*x126))+(((-1.0)*gclwh5_10*x168))+((x107*x173))+(((-0.4055184)*x94))+(((-1.0)*gclwh13_10*x154))+((gclwh15_10*x152))+(((-1.788)*pp*x95))+(((-0.02299289328)*x95))+(((-0.02299289328)*x98))+(((-3.576)*gclwh7_0*x75))+(((0.02299289328)*x123))+(((-0.05143824)*x149))+(((-8.0)*gclwh9_10*x79))+(((8.0)*gclwh7_10*x75))+(((-1.0)*x138*x93))+(((1.788)*gclwh7_0*x93))+(((3.576)*gclwh11_0*x84))+(((3.576)*gclwh9_0*x79))+(((-8.0)*gclwh11_10*x84))+((gclwh9_10*x76))+(((0.4055184)*x89))+(((-1.788)*gclwh11_0*x96))+(((0.4055184)*x164)));
op[33]=((0.3704736)+(((0.09398592)*x115))+(((-0.09398592)*x146))+(((-0.09398592)*x165)));
op[34]=(x229+(((-1.0)*x316)));
op[35]=((((0.01)*gclwh11_13*x96))+(((0.02)*gclwh7_13*x75))+(((-0.0001285956)*x118))+(((0.0001285956)*x158))+(((0.0001285956)*x157))+x338+(((0.01)*gclwh9_13*x112))+(((-1.0)*x336))+(((-0.02)*gclwh11_13*x84))+(((-0.01)*gclwh7_13*x93))+(((-0.02)*gclwh9_13*x79)));
op[36]=((1.63786792)+(((0.4077864)*gclwh10_12*rxp2_2))+(((-0.4077864)*x108))+(((0.4077864)*x142))+x334+(((-1.0)*x340)));
op[37]=x343;
op[38]=((((-0.005329001664)*x132))+(((-1.0)*x161*x93))+(((-0.8288)*gclwh14_14*x79))+(((0.4144)*pp*x100))+(((-0.005329001664)*x159))+(((0.005329001664)*x100))+(((0.8288)*gclwh4_14*x84))+(((0.8288)*gclwh12_14*x75))+(((-1.0)*x129*x96)));
op[39]=((-0.06091184)+(((0.4055184)*gclwh6_2*rxp1_2))+((x96*x97))+((gclwh3_2*x127))+(((3.576)*gclwh4_2*x84))+(((-0.4055184)*gclwh8_2*rxp0_2))+((gclwh8_8*x152))+((gclwh14_2*x102))+((x153*x93))+(((-1.0)*gclwh12_2*x127))+(((-1.0)*x112*x80))+(((-8.0)*gclwh4_8*x84))+(((-1.788)*gclwh12_2*x93))+(((3.576)*gclwh3_2*x75))+(((-3.576)*gclwh14_2*x79))+(((-1.788)*gclwh4_2*x96))+(((3.576)*gclwh12_2*x75))+(((-1.0)*gclwh6_8*x154))+(((0.05143824)*gclwh12_8*r21))+((gclwh1_2*x102))+(((-1.788)*gclwh1_2*x112))+(((-0.02299289328)*gclwh4_2*r22))+(((3.576)*gclwh1_2*x79))+((gclwh10_8*x168))+(((-1.788)*gclwh3_2*x93))+(((1.788)*gclwh14_2*x112))+(((-0.4055184)*gclwh10_2*rxp2_2))+(((-8.0)*gclwh12_8*x75))+(((-1.0)*gclwh14_8*x76))+(((0.05143824)*x150))+(((8.0)*gclwh14_8*x79)));
IkReal x346=pz*pz;
IkReal x347=((0.1036)*pp);
IkReal x348=(gclwh15_15*r20);
IkReal x349=(gclwh6_8*r21);
IkReal x350=(npy*pz);
IkReal x351=(gclwh9_10*rxp0_2);
IkReal x352=(pp*r22);
IkReal x353=(gclwh7_13*rxp1_2);
IkReal x354=(npx*pz);
IkReal x355=(gclwh13_15*r21);
IkReal x356=((0.18281767392)*rxp2_2);
IkReal x357=(pp*r20);
IkReal x358=(npz*pz);
IkReal x359=((2.0)*gclwh11_10);
IkReal x360=((0.2268)*pp);
IkReal x361=(gclwh5_1*rxp2_2);
IkReal x362=((0.2072)*gclwh12_14);
IkReal x363=(gclwh13_0*rxp1_2);
IkReal x364=(gclwh14_2*rxp0_2);
IkReal x365=((0.2268)*pz);
IkReal x366=(gclwh15_9*rxp0_2);
IkReal x367=(gclwh15_0*rxp0_2);
IkReal x368=(gclwh9_0*r20);
IkReal x369=((0.4144)*pp);
IkReal x370=(gclwh5_15*r22);
IkReal x371=(gclwh11_0*r22);
IkReal x372=((0.2072)*pp);
IkReal x373=((0.01285956)*pz);
IkReal x374=((2.0)*gclwh9_10);
IkReal x375=((0.001332250416)*r21);
IkReal x376=((2.0)*pp);
IkReal x377=((0.01162504224)*r20);
IkReal x378=((0.02299289328)*r20);
IkReal x379=(gclwh5_9*rxp2_2);
IkReal x380=((0.02349648)*rxp2_2);
IkReal x381=(gclwh12_14*rxp1_2);
IkReal x382=(gclwh11_13*rxp2_2);
IkReal x383=(pp*r21);
IkReal x384=(gclwh15_10*r20);
IkReal x385=((0.02349648)*rxp0_2);
IkReal x386=((0.001332250416)*r22);
IkReal x387=((0.4144)*gclwh5_15);
IkReal x388=(gclwh12_2*rxp1_2);
IkReal x389=((1.0)*pz);
IkReal x390=((4.0)*gclwh15_10);
IkReal x391=(gclwh7_10*rxp1_2);
IkReal x392=(gclwh14_11*rxp0_2);
IkReal x393=(gclwh7_0*r21);
IkReal x394=(gclwh6_2*r21);
IkReal x395=((0.18281767392)*rxp1_2);
IkReal x396=((0.01285956)*r22);
IkReal x397=((0.2072)*gclwh5_15);
IkReal x398=((0.4536)*rxp2_2);
IkReal x399=(gclwh13_9*rxp1_2);
IkReal x400=(gclwh4_14*r22);
IkReal x401=(gclwh14_14*r20);
IkReal x402=(gclwh13_10*r21);
IkReal x403=(gclwh12_8*r21);
IkReal x404=(gclwh14_3*rxp0_2);
IkReal x405=(gclwh13_1*rxp1_2);
IkReal x406=((0.4536)*rxp0_2);
IkReal x407=((0.2268)*rxp1_2);
IkReal x408=((0.01149644664)*r22);
IkReal x409=(gclwh4_2*rxp2_2);
IkReal x410=(gclwh8_12*rxp0_2);
IkReal x411=((0.02571912)*r20);
IkReal x412=(gclwh15_1*rxp0_2);
IkReal x413=((0.04699296)*rxp2_2);
IkReal x414=(gclwh4_11*rxp2_2);
IkReal x415=(gclwh9_7*r20);
IkReal x416=((0.2268)*rxp2_2);
IkReal x417=(gclwh4_3*rxp2_2);
IkReal x418=(gclwh10_2*r22);
IkReal x419=(gclwh12_14*r21);
IkReal x420=((0.01149644664)*r20);
IkReal x421=((2.0)*gclwh10_8);
IkReal x422=(gclwh10_12*rxp2_2);
IkReal x423=(gclwh12_11*rxp1_2);
IkReal x424=((2.0)*gclwh8_8);
IkReal x425=(gclwh5_0*rxp2_2);
IkReal x426=(gclwh13_15*rxp1_2);
IkReal x427=((0.02349648)*rxp1_2);
IkReal x428=((0.01162504224)*r21);
IkReal x429=((0.02571912)*r22);
IkReal x430=((0.04699296)*rxp0_2);
IkReal x431=((4.0)*gclwh5_10);
IkReal x432=((0.2072)*gclwh14_14);
IkReal x433=((4.0)*gclwh13_10);
IkReal x434=(gclwh6_12*rxp1_2);
IkReal x435=(gclwh12_3*rxp1_2);
IkReal x436=((0.2072)*gclwh4_14);
IkReal x437=(gclwh8_2*r20);
IkReal x438=((0.01285956)*r20);
IkReal x439=((0.4536)*rxp1_2);
IkReal x440=(gclwh9_13*rxp0_2);
IkReal x441=(gclwh7_10*r21);
IkReal x442=((0.02299289328)*r21);
IkReal x443=(gclwh8_5*r20);
IkReal x444=((0.2268)*rxp0_2);
IkReal x445=((0.01149644664)*r21);
IkReal x446=((0.01162504224)*r22);
IkReal x447=((0.4536)*x391);
IkReal x448=((0.02571912)*x384);
IkReal x449=(gclwh5_10*x429);
IkReal x450=(gclwh11_10*x398);
IkReal x451=((0.4536)*x351);
IkReal x452=((0.02571912)*x402);
IkReal x453=(gclwh14_14*x385);
IkReal x454=(gclwh6_5*x375);
IkReal x455=((0.001332250416)*x443);
IkReal x456=(gclwh10_5*x386);
IkReal x457=(gclwh4_14*x380);
IkReal x458=((0.02349648)*x381);
IkReal x459=(gclwh12_8*x407);
IkReal x460=((0.01285956)*x349);
IkReal x461=(gclwh4_8*x416);
IkReal x462=(gclwh14_8*x444);
IkReal x463=(gclwh10_8*x396);
IkReal x464=(gclwh8_8*x438);
IkReal x465=((0.01285956)*x441);
IkReal x466=(gclwh13_10*x407);
IkReal x467=(gclwh5_10*x416);
IkReal x468=(gclwh15_10*x444);
IkReal x469=(gclwh11_10*x396);
IkReal x470=(gclwh9_10*x438);
IkReal x471=(gclwh5_15*x380);
IkReal x472=((0.02349648)*x426);
IkReal x473=(gclwh7_7*x375);
IkReal x474=((0.001332250416)*x415);
IkReal x475=(gclwh15_15*x385);
IkReal x476=(gclwh11_7*x386);
IkReal x477=((0.02571912)*x403);
IkReal x478=(gclwh8_8*x406);
IkReal x479=(gclwh4_8*x429);
IkReal x480=(gclwh10_8*x398);
IkReal x481=(gclwh14_8*x411);
IkReal x482=(gclwh6_8*x439);
IkReal x483=(gclwh6_5*x427);
IkReal x484=(gclwh4_14*x386);
IkReal x485=(gclwh12_14*x375);
IkReal x486=(gclwh8_5*x385);
IkReal x487=((0.001332250416)*x401);
IkReal x488=(gclwh10_5*x380);
IkReal x489=(gclwh7_7*x427);
IkReal x490=((0.001332250416)*x348);
IkReal x491=(gclwh11_7*x380);
IkReal x492=((0.001332250416)*x355);
IkReal x493=(gclwh9_7*x385);
IkReal x494=((0.001332250416)*x370);
IkReal x495=((2.0)*x346);
IkReal x496=((2.0)*gclwh15_10*x357);
IkReal x497=(x358*x431);
IkReal x498=(x350*x433);
IkReal x499=(x376*x402);
IkReal x500=(x354*x390);
IkReal x501=((2.0)*gclwh5_10*x352);
IkReal x502=(gclwh6_5*r21*x347);
IkReal x503=((0.2072)*gclwh8_5*x354);
IkReal x504=((0.2072)*gclwh10_5*x358);
IkReal x505=(x347*x443);
IkReal x506=((0.2072)*gclwh6_5*x350);
IkReal x507=(gclwh10_5*r22*x347);
IkReal x508=(x373*x418);
IkReal x509=(x360*x417);
IkReal x510=(x364*x365);
IkReal x511=(gclwh10_2*pz*x352);
IkReal x512=(x373*x437);
IkReal x513=(x354*x424);
IkReal x514=(gclwh8_2*pz*x357);
IkReal x515=(x360*x435);
IkReal x516=(x358*x421);
IkReal x517=(x373*x394);
IkReal x518=((2.0)*gclwh6_8*x350);
IkReal x519=(x365*x409);
IkReal x520=(x360*x404);
IkReal x521=(x365*x388);
IkReal x522=(x358*x359);
IkReal x523=(x354*x374);
IkReal x524=(x365*x367);
IkReal x525=(x360*x405);
IkReal x526=(gclwh11_0*pz*x352);
IkReal x527=(x368*x373);
IkReal x528=(x360*x361);
IkReal x529=(x371*x373);
IkReal x530=(gclwh9_0*pz*x357);
IkReal x531=(x363*x365);
IkReal x532=(x365*x425);
IkReal x533=(x360*x412);
IkReal x534=(x373*x393);
IkReal x535=((2.0)*gclwh7_10*x350);
IkReal x536=((0.2072)*gclwh9_7*x354);
IkReal x537=(gclwh7_7*r21*x347);
IkReal x538=((0.2072)*gclwh11_7*x358);
IkReal x539=((0.2072)*gclwh7_7*x350);
IkReal x540=(x347*x415);
IkReal x541=(gclwh11_7*r22*x347);
IkReal x542=((2.0)*gclwh4_8*x352);
IkReal x543=(x376*x403);
IkReal x544=((4.0)*gclwh14_8*x354);
IkReal x545=((4.0)*gclwh4_8*x358);
IkReal x546=((2.0)*gclwh14_8*x357);
IkReal x547=((4.0)*gclwh12_8*x350);
IkReal x548=(x347*x419);
IkReal x549=(x354*x432);
IkReal x550=(x347*x400);
IkReal x551=(x350*x362);
IkReal x552=(x358*x436);
IkReal x553=(x347*x401);
IkReal x554=((0.2072)*gclwh13_15*x350);
IkReal x555=(x347*x348);
IkReal x556=(x358*x397);
IkReal x557=((0.2072)*gclwh15_15*x354);
IkReal x558=(x347*x355);
IkReal x559=(x347*x370);
IkReal x560=(gclwh6_2*npy*x495);
IkReal x561=(gclwh6_2*x383*x389);
IkReal x562=(gclwh10_2*npz*x495);
IkReal x563=(gclwh8_2*npx*x495);
IkReal x564=(gclwh7_0*npy*x495);
IkReal x565=(gclwh9_0*npx*x495);
IkReal x566=(gclwh11_0*npz*x495);
IkReal x567=(gclwh7_0*x383*x389);
IkReal x568=(x458+x457);
IkReal x569=(x493+x491);
IkReal x570=(x471+x472);
IkReal x571=(x488+x486);
IkReal x572=(x463+x462+x464+x518);
IkReal x573=(x469+x468+x470+x535);
IkReal x574=((((0.002664500832)*x348))+(((0.4144)*gclwh13_15*x350))+((x348*x372))+((x358*x387)));
IkReal x575=(x454+x502+x503+x504);
IkReal x576=(x490+x556+x555+x554);
IkReal x577=(x473+x537+x536+x538);
IkReal x578=(x487+x553+x552+x551);
IkReal x579=(x467+x466+x465+x522+x523);
IkReal x580=(x459+x461+x460+x516+x513);
IkReal x581=((((0.002664500832)*x355))+((x355*x372))+(((0.002664500832)*x370))+((x352*x397))+(((0.4144)*gclwh15_15*x354)));
IkReal x582=(x498+x496+x497+x448+x447);
IkReal x583=(x492+x494+x559+x558+x557);
IkReal x584=(x474+x476+x540+x541+x539);
IkReal x585=(x456+x455+x505+x506+x507);
IkReal x586=(x485+x484+x550+x548+x549);
IkReal x587=(x481+x482+x545+x546+x547);
IkReal x588=(x499+x449+x452+x450+x451+x500+x501);
IkReal x589=(x480+x477+x478+x479+x544+x542+x543);
IkReal x590=(x531+x533+x532+x534+x566+x567+x565);
IkReal x591=(x520+x521+x519+x517+x562+x563+x561);
IkReal x592=((((0.002664500832)*x419))+(((-0.4144)*gclwh12_14*x350))+(((0.002664500832)*x400))+((x362*x383))+(((-0.4144)*gclwh4_14*x358))+(((-0.002664500832)*x401))+((x352*x436))+(((0.4144)*gclwh14_14*x354))+(((-1.0)*x357*x432)));
IkReal x593=((((-1.0)*x574))+x581);
IkReal x594=(x530+x526+x527+x524+x525+x528+x529+x564);
IkReal x595=(x508+x509+x515+x514+x512+x511+x510+x560);
op[40]=((-0.02151592)+(((-0.002268)*x434))+x589+(((0.002268)*x410))+(((-1.0)*x587))+(((0.002268)*x422)));
op[41]=x592;
op[42]=(x574+(((-1.0)*x581)));
op[43]=((-1.63786792)+(((0.4077864)*x382))+(((-0.4077864)*x353))+x588+(((0.4077864)*x440))+(((-1.0)*x582)));
op[44]=((-0.06091184)+(((-8.0)*gclwh5_10*x358))+(((0.4055184)*gclwh7_0*rxp1_2))+(((-1.788)*gclwh5_0*x352))+(((1.788)*gclwh2_0*x383))+(((-1.788)*gclwh13_0*x383))+(((0.05143824)*x402))+(((3.576)*gclwh5_0*x358))+(((-3.576)*gclwh0_0*x354))+(((-0.9072)*x391))+(((-1.0)*gclwh2_0*x442))+(((0.9072)*gclwh11_10*rxp2_2))+((gclwh15_0*x378))+(((1.788)*gclwh15_0*x357))+(((-0.4055184)*gclwh11_0*rxp2_2))+(((8.0)*gclwh15_10*x354))+(((-1.0)*gclwh0_0*x378))+(((-0.02299289328)*gclwh5_0*r22))+((x352*x431))+(((3.576)*gclwh13_0*x350))+(((-1.0)*gclwh13_0*x442))+(((-8.0)*gclwh13_10*x350))+(((-3.576)*gclwh2_0*x350))+(((-1.0)*x357*x390))+(((0.9072)*x351))+(((1.788)*gclwh0_0*x357))+((x383*x433))+(((0.05143824)*gclwh5_10*r22))+(((-3.576)*gclwh15_0*x354))+(((-0.4055184)*gclwh9_0*rxp0_2))+(((-0.05143824)*x384)));
op[45]=(((x352*x387))+(((0.005329001664)*x370))+((x355*x369))+(((-0.8288)*gclwh5_15*x358))+(((-1.0)*x348*x369))+(((0.005329001664)*x355))+(((-0.8288)*gclwh13_15*x350))+(((-0.005329001664)*x348))+(((0.8288)*gclwh15_15*x354)));
op[46]=x593;
op[47]=((0.02151592)+(((0.002268)*x382))+x582+(((-1.0)*x588))+(((-0.002268)*x353))+(((0.002268)*x440)));
op[48]=((0.1862728)+(((-1.0)*x453))+x575+x568+(((-1.0)*x585)));
op[49]=((((-0.899)*gclwh10_2*x352))+(((0.17817408)*x414))+(((0.18281767392)*x404))+(((0.899)*gclwh6_2*x383))+(((1.798)*gclwh8_2*x354))+(((-1.0)*pp*x349))+(((-1.0)*gclwh4_3*x356))+(((0.2038932)*x388))+(((0.17817408)*x423))+(((-0.01156074444)*x418))+(((-1.0)*x591))+x572+x595+((gclwh10_8*x352))+(((-1.798)*gclwh6_2*x350))+(((-0.2038932)*x364))+(((-0.01156074444)*x437))+(((0.2038932)*x409))+(((0.01156074444)*x394))+(((-0.17817408)*x392))+(((-1.0)*gclwh12_3*x395))+(((-1.0)*x580))+(((-0.899)*gclwh8_2*x357))+(((1.798)*gclwh10_2*x358))+((gclwh8_8*x357)));
op[50]=((((4.0)*gclwh6_8*x350))+(((-0.894)*gclwh10_12*x352))+(((-4.0)*gclwh10_8*x358))+(((-4.0)*gclwh8_8*x354))+((gclwh14_8*x406))+(((-1.0)*gclwh10_12*x408))+(((-0.02571912)*x349))+((x352*x421))+((gclwh10_8*x429))+(((0.2050272)*x423))+(((-1.788)*gclwh6_12*x350))+(((-1.0)*gclwh12_8*x439))+(((-0.894)*gclwh8_12*x357))+(((0.2050272)*x414))+(((1.788)*gclwh8_12*x354))+((gclwh8_8*x411))+(((-1.0)*gclwh4_8*x398))+((gclwh6_12*x445))+(((1.788)*gclwh10_12*x358))+(((-1.0)*x349*x376))+(((-1.0)*gclwh8_12*x420))+(((0.894)*gclwh6_12*x383))+((x357*x424))+(((-0.2050272)*x392)));
op[51]=(((gclwh14_14*x430))+(((-0.04699296)*x381))+(((-1.0)*gclwh4_14*x413)));
op[52]=((0.001036)+x453+x575+(((-1.0)*x585))+(((-1.0)*x568)));
op[53]=((((6.42978e-5)*x394))+(((0.01)*gclwh8_2*x354))+((pp*x349))+(((-6.42978e-5)*x437))+(((0.01)*gclwh10_2*x358))+(((0.001134)*x409))+(((-0.005)*gclwh10_2*x352))+(((-0.01)*gclwh6_2*x350))+(((0.001134)*x388))+(((-1.0)*x591))+(((-0.02685312)*x414))+(((0.00047664288)*x435))+(((-1.0)*x572))+(((-0.00047664288)*x404))+x580+x595+(((-1.0)*gclwh8_8*x357))+(((0.00047664288)*x417))+(((-0.005)*gclwh8_2*x357))+(((-1.0)*gclwh10_8*x352))+(((0.02685312)*x392))+(((-6.42978e-5)*x418))+(((-0.02685312)*x423))+(((-0.001134)*x364))+(((0.005)*gclwh6_2*x383)));
op[54]=((((0.2038932)*x425))+((gclwh11_10*x352))+(((-1.798)*gclwh7_0*x350))+(((-0.01156074444)*x368))+((gclwh9_10*x357))+(((0.18281767392)*x412))+(((-0.01156074444)*x371))+(((-1.0)*gclwh5_1*x356))+(((-0.899)*gclwh9_0*x357))+(((-1.0)*gclwh7_10*x383))+(((-1.0)*x590))+(((-1.0)*x579))+x573+x594+(((-0.2038932)*x367))+(((0.899)*gclwh7_0*x383))+(((0.01156074444)*x393))+(((0.22961232)*x379))+(((1.798)*gclwh11_0*x358))+(((0.2038932)*x363))+(((1.798)*gclwh9_0*x354))+(((-0.22961232)*x366))+(((0.22961232)*x399))+(((-0.899)*gclwh11_0*x352))+(((-1.0)*gclwh13_1*x395)));
op[55]=((0.1862728)+x475+(((-1.0)*x570))+x577+(((-1.0)*x584)));
op[56]=((((-1.0)*gclwh5_15*x413))+((gclwh15_15*x430))+(((-0.04699296)*x426)));
op[57]=((((-1.788)*gclwh7_13*x350))+(((-1.0)*gclwh9_13*x420))+(((1.788)*gclwh9_13*x354))+(((-0.894)*gclwh11_13*x352))+(((-0.2050272)*x379))+((x376*x441))+(((0.02571912)*x441))+(((4.0)*gclwh11_10*x358))+(((-1.0)*gclwh11_13*x408))+((gclwh7_13*x445))+((gclwh13_10*x439))+(((-1.0)*gclwh11_10*x429))+(((1.788)*gclwh11_13*x358))+(((0.2050272)*x366))+(((-0.894)*gclwh9_13*x357))+((gclwh5_10*x398))+(((-4.0)*gclwh7_10*x350))+(((-1.0)*gclwh15_10*x406))+(((-1.0)*x357*x374))+(((4.0)*gclwh9_10*x354))+(((-1.0)*x352*x359))+(((0.894)*gclwh7_13*x383))+(((-1.0)*gclwh9_10*x411))+(((-0.2050272)*x399)));
op[58]=((((-1.0)*gclwh11_10*x352))+(((0.02458512)*x399))+(((-0.005)*gclwh11_0*x352))+(((6.42978e-5)*x393))+(((0.005)*gclwh7_0*x383))+((gclwh7_10*x383))+(((0.01)*gclwh11_0*x358))+(((-1.0)*x590))+(((-0.00047664288)*x412))+(((-0.005)*gclwh9_0*x357))+(((-1.0)*x573))+(((0.01)*gclwh9_0*x354))+(((0.001134)*x363))+x579+x594+(((-1.0)*gclwh9_10*x357))+(((-6.42978e-5)*x368))+(((-6.42978e-5)*x371))+(((0.00047664288)*x405))+(((0.001134)*x425))+(((-0.02458512)*x366))+(((0.02458512)*x379))+(((0.00047664288)*x361))+(((-0.001134)*x367))+(((-0.01)*gclwh7_0*x350)));
op[59]=((0.001036)+(((-1.0)*x475))+x577+x570+(((-1.0)*x584)));
op[60]=(x483+(((-1.0)*x571))+x578+(((-1.0)*x586)));
op[61]=((0.79746804)+(((-0.899)*gclwh12_2*pp*r21))+(((0.01156074444)*gclwh1_2*r20))+(((-0.899)*gclwh3_2*pp*r21))+(((0.2268)*gclwh8_2*pz*rxp0_2))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((0.79321484)*gclwh12_3*pp*r21))+(((0.79321484)*gclwh4_3*pp*r22))+(((0.7856)*gclwh14_11*pp*r20))+(((-1.5712)*gclwh14_11*npx*pz))+(((-0.7856)*gclwh12_11*pp*r21))+(((1.5712)*gclwh12_11*npy*pz))+(((2.0)*gclwh4_3*npz*pp*pz))+(((0.81893396)*gclwh1_3*pp*r20))+(((0.899)*gclwh14_2*pp*r20))+((gclwh14_3*r20*(pp*pp)))+(((-0.01156074444)*gclwh12_2*r21))+(((-0.79321484)*gclwh14_3*pp*r20))+(((0.01285956)*gclwh4_8*r22))+(((-2.0)*gclwh4_8*npz*pz))+(((-0.01285956)*gclwh14_2*pz*r20))+(((-1.6121488)*gclwh3_3*npy*pz))+(((-1.0)*gclwh14_8*pp*r20))+((gclwh1_2*pp*pz*r20))+(((0.01285956)*gclwh4_2*pz*r22))+(((0.2268)*gclwh10_2*pz*rxp2_2))+(((0.01285956)*gclwh12_8*r21))+(((0.01156074444)*gclwh3_2*r21))+(((-0.010365762111264)*gclwh3_3*r21))+(((-1.6121488)*gclwh1_3*npx*pz))+(((2.0)*gclwh3_3*npy*pp*pz))+(((1.798)*gclwh1_2*npx*pz))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-1.0)*gclwh14_2*pp*pz*r20))+(((0.2268)*gclwh8_8*rxp0_2))+((gclwh3_2*pp*pz*r21))+(((-0.01285956)*gclwh1_2*pz*r20))+(((0.01285956)*gclwh12_2*pz*r21))+(((-2.0)*gclwh12_2*npy*(pz*pz)))+(((-1.6121488)*gclwh12_3*npy*pz))+(((-2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh12_8*npy*pz))+(((-0.899)*gclwh1_2*pp*r20))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.7856)*gclwh4_11*pp*r22))+(((1.798)*gclwh12_2*npy*pz))+((gclwh12_8*pp*r21))+(((0.2038932)*gclwh6_2*rxp1_2))+(((-0.2038932)*gclwh8_2*rxp0_2))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((0.01156074444)*gclwh14_2*r20))+(((-1.0)*gclwh12_3*r21*(pp*pp)))+(((-0.2038932)*gclwh10_2*rxp2_2))+(((2.0)*gclwh1_3*npx*pp*pz))+(((0.010365762111264)*gclwh12_3*r21))+(((0.81893396)*gclwh3_3*pp*r21))+(((-0.01285956)*gclwh3_2*pz*r21))+(((2.0)*gclwh14_8*npx*pz))+(((-0.01156074444)*gclwh4_2*r22))+(((0.2268)*gclwh10_8*rxp2_2))+(((-0.01285956)*gclwh14_8*r20))+(((-1.798)*gclwh14_2*npx*pz))+(((-0.010102470336)*gclwh12_11*r21))+(((2.0)*gclwh12_3*npy*pp*pz))+(((2.0)*gclwh14_2*npx*(pz*pz)))+(((-1.6121488)*gclwh4_3*npz*pz))+(((1.798)*gclwh3_2*npy*pz))+(((-0.2268)*pz))+(((1.5712)*gclwh4_11*npz*pz))+(((-0.2268)*gclwh6_2*pz*rxp1_2))+(((-0.010365762111264)*gclwh14_3*r20))+(((1.6121488)*gclwh14_3*npx*pz))+(((0.010365762111264)*gclwh4_3*r22))+(((0.010102470336)*gclwh14_11*r20))+(((-0.010102470336)*gclwh4_11*r22))+((gclwh4_8*pp*r22))+(((-0.899)*gclwh4_2*pp*r22))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+(((-0.2268)*gclwh6_8*rxp1_2))+(((1.798)*gclwh4_2*npz*pz))+((gclwh12_2*pp*pz*r21))+(((-1.0)*gclwh1_3*r20*(pp*pp)))+(((-0.010365762111264)*gclwh1_3*r20)));
op[62]=((-0.01247592)+(((-1.0)*gclwh4_11*x446))+(((-1.808)*gclwh14_11*x354))+(((-0.2027592)*x422))+(((-0.904)*gclwh12_11*x383))+(((0.904)*gclwh14_11*x357))+(((-1.0)*gclwh12_11*x428))+(((0.2027592)*x434))+x589+(((1.808)*gclwh12_11*x350))+((gclwh14_11*x377))+(((1.808)*gclwh4_11*x358))+(((-0.2027592)*x410))+(((-1.0)*x587))+(((-0.904)*gclwh4_11*x352)));
op[63]=x592;
op[64]=(x483+(((-1.0)*x578))+(((-1.0)*x571))+x586);
op[65]=((0.01070796)+(((0.01075796)*gclwh1_3*pp*r20))+(((0.2268)*gclwh8_2*pz*rxp0_2))+(((-6.42978e-5)*gclwh12_2*r21))+(((0.0042032)*gclwh3_3*npy*pz))+(((2.7025651296e-5)*gclwh1_3*r20))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((0.001134)*gclwh6_2*rxp1_2))+(((0.01)*gclwh12_2*npy*pz))+(((2.0)*gclwh4_3*npz*pp*pz))+(((0.01)*gclwh4_2*npz*pz))+(((0.0042032)*gclwh1_3*npx*pz))+(((6.42978e-5)*gclwh1_2*r20))+(((2.7025651296e-5)*gclwh14_3*r20))+((gclwh14_3*r20*(pp*pp)))+(((-0.01496116)*gclwh4_3*pp*r22))+(((-0.01)*gclwh14_2*npx*pz))+(((0.2268)*gclwh6_8*rxp1_2))+(((-0.001522571904)*gclwh14_11*r20))+(((-0.005)*gclwh12_2*pp*r21))+(((-0.1184)*gclwh14_11*pp*r20))+(((-0.01285956)*gclwh14_2*pz*r20))+((gclwh1_2*pp*pz*r20))+(((-0.005)*gclwh3_2*pp*r21))+(((0.01285956)*gclwh4_2*pz*r22))+(((-0.2268)*gclwh8_8*rxp0_2))+(((0.2268)*gclwh10_2*pz*rxp2_2))+(((-0.01285956)*gclwh4_8*r22))+(((-0.001134)*gclwh8_2*rxp0_2))+(((-0.005)*gclwh4_2*pp*r22))+(((0.1184)*gclwh4_11*pp*r22))+(((0.0042032)*gclwh12_3*npy*pz))+(((2.0)*gclwh3_3*npy*pp*pz))+(((0.01)*gclwh3_2*npy*pz))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-1.0)*gclwh14_2*pp*pz*r20))+(((-1.0)*gclwh12_8*pp*r21))+((gclwh3_2*pp*pz*r21))+(((6.42978e-5)*gclwh14_2*r20))+(((-0.0042032)*gclwh14_3*npx*pz))+(((2.0)*gclwh12_8*npy*pz))+(((-0.01285956)*gclwh1_2*pz*r20))+(((0.01285956)*gclwh12_2*pz*r21))+(((-2.0)*gclwh12_2*npy*(pz*pz)))+(((0.01285956)*gclwh14_8*r20))+(((-0.2368)*gclwh12_11*npy*pz))+((gclwh14_8*pp*r20))+(((-2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((0.01496116)*gclwh14_3*pp*r20))+(((0.001522571904)*gclwh4_11*r22))+(((-2.0)*gclwh14_8*npx*pz))+(((0.0042032)*gclwh4_3*npz*pz))+(((-2.7025651296e-5)*gclwh12_3*r21))+(((0.2368)*gclwh14_11*npx*pz))+(((0.005)*gclwh14_2*pp*r20))+(((-0.2368)*gclwh4_11*npz*pz))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((-1.0)*gclwh12_3*r21*(pp*pp)))+(((2.0)*gclwh1_3*npx*pp*pz))+(((-0.01285956)*gclwh3_2*pz*r21))+(((0.1184)*gclwh12_11*pp*r21))+(((-1.0)*gclwh4_8*pp*r22))+(((0.01075796)*gclwh3_3*pp*r21))+(((-2.7025651296e-5)*gclwh4_3*r22))+(((-0.01285956)*gclwh12_8*r21))+(((0.01)*gclwh1_2*npx*pz))+(((0.001522571904)*gclwh12_11*r21))+(((-0.01496116)*gclwh12_3*pp*r21))+(((6.42978e-5)*gclwh3_2*r21))+(((2.0)*gclwh4_8*npz*pz))+(((2.0)*gclwh12_3*npy*pp*pz))+(((2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.001134)*gclwh10_2*rxp2_2))+(((-0.005)*gclwh1_2*pp*r20))+(((-0.2268)*pz))+(((-0.2268)*gclwh6_2*pz*rxp1_2))+(((-0.2268)*gclwh10_8*rxp2_2))+(((-6.42978e-5)*gclwh4_2*r22))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+(((2.7025651296e-5)*gclwh3_3*r21))+((gclwh12_2*pp*pz*r21))+(((-1.0)*gclwh1_3*r20*(pp*pp))));
op[66]=((0.79746804)+(((-0.01156074444)*gclwh2_0*r21))+(((-2.0)*gclwh5_10*npz*pz))+(((0.01285956)*gclwh0_0*pz*r20))+(((-0.899)*gclwh5_0*pp*r22))+(((0.013019018544)*gclwh15_9*r20))+((gclwh5_10*pp*r22))+(((-0.01285956)*gclwh15_10*r20))+(((-0.01156074444)*gclwh0_0*r20))+(((0.01285956)*gclwh5_10*r22))+(((-0.010365762111264)*gclwh15_1*r20))+((gclwh15_1*r20*(pp*pp)))+(((0.79321484)*gclwh5_1*pp*r22))+(((1.0124)*gclwh15_9*pp*r20))+(((2.0248)*gclwh5_9*npz*pz))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+((gclwh5_0*pp*pz*r22))+(((0.01156074444)*gclwh15_0*r20))+(((1.798)*gclwh13_0*npy*pz))+((gclwh13_10*pp*r21))+(((-0.01285956)*gclwh15_0*pz*r20))+(((-1.798)*gclwh2_0*npy*pz))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((-0.2038932)*gclwh9_0*rxp0_2))+(((2.0)*gclwh5_1*npz*pp*pz))+(((0.899)*gclwh2_0*pp*r21))+((gclwh13_0*pp*pz*r21))+(((0.010365762111264)*gclwh13_1*r21))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((0.2038932)*gclwh7_0*rxp1_2))+(((-0.013019018544)*gclwh5_9*r22))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((0.01285956)*gclwh2_0*pz*r21))+(((-0.81893396)*gclwh0_1*pp*r20))+(((-2.0)*gclwh13_10*npy*pz))+(((0.01285956)*gclwh13_10*r21))+(((2.0)*gclwh13_1*npy*pp*pz))+(((0.2268)*gclwh11_10*rxp2_2))+(((1.798)*gclwh5_0*npz*pz))+(((-1.798)*gclwh15_0*npx*pz))+(((0.899)*gclwh15_0*pp*r20))+(((0.2268)*pz))+(((-0.81893396)*gclwh2_1*pp*r21))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-0.013019018544)*gclwh13_9*r21))+(((-1.798)*gclwh0_0*npx*pz))+(((2.0248)*gclwh13_9*npy*pz))+(((-0.01156074444)*gclwh5_0*r22))+(((-0.2268)*gclwh7_0*pz*rxp1_2))+(((-1.0124)*gclwh13_9*pp*r21))+(((0.2268)*gclwh11_0*pz*rxp2_2))+(((-1.6121488)*gclwh5_1*npz*pz))+(((1.6121488)*gclwh0_1*npx*pz))+(((2.0)*gclwh15_10*npx*pz))+(((0.010365762111264)*gclwh2_1*r21))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((-0.01156074444)*gclwh13_0*r21))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((0.01285956)*gclwh13_0*pz*r21))+(((-1.0124)*gclwh5_9*pp*r22))+(((-1.0)*gclwh15_10*pp*r20))+((gclwh2_1*r21*(pp*pp)))+(((1.6121488)*gclwh2_1*npy*pz))+(((-0.899)*gclwh13_0*pp*r21))+(((0.010365762111264)*gclwh5_1*r22))+(((0.010365762111264)*gclwh0_1*r20))+(((-0.2038932)*gclwh11_0*rxp2_2))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((0.899)*gclwh0_0*pp*r20))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((-2.0248)*gclwh15_9*npx*pz))+(((0.79321484)*gclwh13_1*pp*r21))+(((-0.2268)*gclwh7_10*rxp1_2))+(((0.2268)*gclwh9_0*pz*rxp0_2))+(((0.01285956)*gclwh5_0*pz*r22))+((gclwh0_1*r20*(pp*pp)))+(((1.6121488)*gclwh15_1*npx*pz))+(((0.2268)*gclwh9_10*rxp0_2))+(((-1.6121488)*gclwh13_1*npy*pz))+(((-0.79321484)*gclwh15_1*pp*r20)));
op[67]=(x489+(((-1.0)*x576))+x583+(((-1.0)*x569)));
op[68]=x593;
op[69]=((0.01247592)+(((0.2027592)*x353))+(((-0.2027592)*x440))+(((0.904)*gclwh13_9*x383))+((gclwh13_9*x428))+(((-0.904)*gclwh15_9*x357))+(((0.904)*gclwh5_9*x352))+(((1.808)*gclwh15_9*x354))+(((-1.808)*gclwh13_9*x350))+x582+(((-0.2027592)*x382))+(((-1.0)*x588))+(((-1.808)*gclwh5_9*x358))+(((-1.0)*gclwh15_9*x377))+((gclwh5_9*x446)));
op[70]=((0.01070796)+(((-0.001393976304)*gclwh13_9*r21))+(((-6.42978e-5)*gclwh2_0*r21))+(((0.01285956)*gclwh0_0*pz*r20))+(((-0.01)*gclwh2_0*npy*pz))+(((0.005)*gclwh2_0*pp*r21))+((gclwh15_1*r20*(pp*pp)))+(((-0.01285956)*gclwh5_10*r22))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+((gclwh5_0*pp*pz*r22))+(((-2.7025651296e-5)*gclwh5_1*r22))+(((0.2168)*gclwh5_9*npz*pz))+(((-0.01285956)*gclwh15_0*pz*r20))+(((-0.001134)*gclwh9_0*rxp0_2))+(((-0.0042032)*gclwh2_1*npy*pz))+(((-6.42978e-5)*gclwh0_0*r20))+(((0.2168)*gclwh13_9*npy*pz))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((0.005)*gclwh0_0*pp*r20))+(((2.0)*gclwh5_1*npz*pp*pz))+(((-2.0)*gclwh15_10*npx*pz))+((gclwh13_0*pp*pz*r21))+(((0.005)*gclwh15_0*pp*r20))+(((0.2268)*gclwh7_10*rxp1_2))+(((0.001393976304)*gclwh15_9*r20))+(((-0.1084)*gclwh5_9*pp*r22))+(((0.0042032)*gclwh13_1*npy*pz))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((0.01285956)*gclwh2_0*pz*r21))+(((0.1084)*gclwh15_9*pp*r20))+(((-0.01496116)*gclwh5_1*pp*r22))+(((2.0)*gclwh13_1*npy*pp*pz))+(((-0.01075796)*gclwh2_1*pp*r21))+(((-2.7025651296e-5)*gclwh13_1*r21))+(((-0.01496116)*gclwh13_1*pp*r21))+(((0.2268)*pz))+(((-1.0)*gclwh13_10*pp*r21))+(((-0.01)*gclwh0_0*npx*pz))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-2.7025651296e-5)*gclwh2_1*r21))+(((-0.001393976304)*gclwh5_9*r22))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((-0.01)*gclwh15_0*npx*pz))+(((-0.0042032)*gclwh0_1*npx*pz))+(((-0.1084)*gclwh13_9*pp*r21))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-1.0)*gclwh5_10*pp*r22))+(((0.0042032)*gclwh5_1*npz*pz))+(((-0.005)*gclwh13_0*pp*r21))+(((-0.2268)*gclwh7_0*pz*rxp1_2))+(((0.2268)*gclwh11_0*pz*rxp2_2))+(((0.01496116)*gclwh15_1*pp*r20))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((-0.005)*gclwh5_0*pp*r22))+(((0.01285956)*gclwh13_0*pz*r21))+(((0.01285956)*gclwh15_10*r20))+(((-0.2268)*gclwh9_10*rxp0_2))+((gclwh2_1*r21*(pp*pp)))+(((-6.42978e-5)*gclwh13_0*r21))+(((-6.42978e-5)*gclwh5_0*r22))+(((2.0)*gclwh5_10*npz*pz))+(((-0.01075796)*gclwh0_1*pp*r20))+(((0.001134)*gclwh7_0*rxp1_2))+(((2.7025651296e-5)*gclwh15_1*r20))+(((0.01)*gclwh5_0*npz*pz))+(((0.01)*gclwh13_0*npy*pz))+(((6.42978e-5)*gclwh15_0*r20))+(((2.0)*gclwh13_10*npy*pz))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((-0.2168)*gclwh15_9*npx*pz))+(((-0.0042032)*gclwh15_1*npx*pz))+((gclwh15_10*pp*r20))+(((-0.01285956)*gclwh13_10*r21))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((-0.2268)*gclwh11_10*rxp2_2))+(((-0.001134)*gclwh11_0*rxp2_2))+(((0.2268)*gclwh9_0*pz*rxp0_2))+(((0.01285956)*gclwh5_0*pz*r22))+((gclwh0_1*r20*(pp*pp)))+(((-2.7025651296e-5)*gclwh0_1*r20)));
op[71]=(x489+x576+(((-1.0)*x583))+(((-1.0)*x569)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x596=htj1*htj1;
CheckValue<IkReal> x597=IKPowWithIntegerCheck(((1.0)+x596),-1);
if(!x597.valid){
continue;
}
cj1array[numsolutions]=((x597.value)*(((1.0)+(((-1.0)*x596)))));
CheckValue<IkReal> x598=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x598.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x598.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x599=htj2*htj2;
CheckValue<IkReal> x600=IKPowWithIntegerCheck(((1.0)+x599),-1);
if(!x600.valid){
continue;
}
cj2array[numsolutions]=((x600.value)*(((1.0)+(((-1.0)*x599)))));
CheckValue<IkReal> x601=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x601.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x601.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x602=htj3*htj3;
CheckValue<IkReal> x603=IKPowWithIntegerCheck(((1.0)+x602),-1);
if(!x603.valid){
continue;
}
cj3array[numsolutions]=((x603.value)*(((1.0)+(((-1.0)*x602)))));
CheckValue<IkReal> x604=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x604.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x604.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+5, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+6, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((1.0)+(((-1.0)*(r22*r22))));
j5eval[1]=((r20*r20)+(r21*r21));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x605=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x605);
rxp1_0=(pz*r11);
rxp1_1=(r01*x605);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x606=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x606);
rxp1_0=(pz*r11);
rxp1_1=(r01*x606);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x607=IKPowWithIntegerCheck(cj3,-1);
if(!x607.valid){
continue;
}
CheckValue<IkReal> x608=IKPowWithIntegerCheck(r22,-1);
if(!x608.valid){
continue;
}
sj4array[0]=((x607.value)*(x608.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x609=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x609);
rxp1_0=(pz*r11);
rxp1_1=(r01*x609);
IkReal x610=(r10*sj3);
IkReal x611=((4.0)*cj4);
IkReal x612=(r11*sj3);
IkReal x613=((16.0)*cj4);
IkReal x614=(sj1*sj2);
IkReal x615=(r01*sj4);
IkReal x616=(cj3*r11);
IkReal x617=(cj1*sj2);
IkReal x618=((8.0)*cj2);
IkReal x619=((8.0)*cj4);
IkReal x620=((4.0)*sj4);
IkReal x621=(r12*sj3);
IkReal x622=(cj2*sj1);
IkReal x623=(cj1*cj2);
IkReal x624=(cj3*r12);
IkReal x625=((12.0)*sj4);
IkReal x626=(cj3*r10);
IkReal x627=((4.0)*x612);
IkReal x628=((4.0)*x616);
IkReal x629=((12.0)*cj4*r02);
IkReal x630=(x611*x626);
IkReal x631=(x624*x625);
IkReal x632=(x610*x611);
IkReal x633=(x621*x625);
IkReal x634=(r00*x620*x623);
IkReal x635=(r00*x614*x620);
IkReal x636=(x623*x629);
IkReal x637=(x614*x629);
IkReal x638=(r00*x617*x620);
IkReal x639=(r00*x620*x622);
IkReal x640=(x622*x629);
IkReal x641=(x617*x629);
IkReal x642=(x627+x634);
IkReal x643=(x635+x630);
IkReal x644=(x636+x631);
IkReal x645=(x641+x640);
IkReal x646=(x628+x632+x638+x639);
j5eval[0]=((((0.5)*(IKabs((((r02*x611*x623))+(((-1.0)*x642))+x643+(((-1.0)*r02*x611*x614))+((x620*x624)))))))+(IKabs(((((8.0)*x610))+(((8.0)*x614*x615))+((x616*x619))+(((-1.0)*cj1*x615*x618)))))+(((0.5)*(IKabs(((((-1.0)*x645))+(((-1.0)*x646))+x633)))))+(IKabs(((((8.0)*x615*x617))+((x612*x619))+(((-8.0)*x626))+((sj1*x615*x618)))))+(((0.5)*(IKabs(((((-1.0)*x637))+(((-1.0)*x642))+x644+x643)))))+(((0.5)*(IKabs(((((16.0)*x610))+((x613*x616))+(((-16.0)*x615*x623))+(((16.0)*x614*x615)))))))+(((0.5)*(IKabs(((((-1.0)*r02*x611*x622))+x646+(((-1.0)*r02*x611*x617))+((x620*x621)))))))+(((0.5)*(IKabs(((((16.0)*x615*x622))+((x612*x613))+(((16.0)*x615*x617))+(((-16.0)*x626)))))))+(((0.5)*(IKabs(((((-1.0)*x645))+x646+x633)))))+(((0.5)*(IKabs(((((-1.0)*x637))+(((-1.0)*x643))+x644+x642))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x647=((4.0)*cj4);
IkReal x648=(cj3*r10);
IkReal x649=((4.0)*sj4);
IkReal x650=(r12*sj3);
IkReal x651=((12.0)*cj4);
IkReal x652=(cj1*sj2);
IkReal x653=(cj2*sj1);
IkReal x654=(r01*sj4);
IkReal x655=((4.0)*cj3*r11);
IkReal x656=(r02*x652);
IkReal x657=(cj4*r11*sj3);
IkReal x658=(r10*sj3*x647);
IkReal x659=((12.0)*sj4*x650);
IkReal x660=(x649*x650);
IkReal x661=(x653*x654);
IkReal x662=(r00*x649*x652);
IkReal x663=(r00*x649*x653);
IkReal x664=(r02*x651*x653);
IkReal x665=(x651*x656);
IkReal x666=(r02*x647*x653);
IkReal x667=(x647*x656);
IkReal x668=(x667+x666);
IkReal x669=(x665+x664);
IkReal x670=((((8.0)*x661))+(((8.0)*x652*x654))+(((-8.0)*x648))+(((8.0)*x657)));
IkReal x671=(x655+x658+x663+x662);
op[0]=((((-1.0)*x668))+x660+x671);
op[1]=x670;
op[2]=((((-1.0)*x669))+x659+x671);
op[3]=((((-16.0)*x648))+(((16.0)*x657))+(((16.0)*x652*x654))+(((16.0)*x661)));
op[4]=((((-1.0)*x669))+x659+(((-1.0)*x671)));
op[5]=x670;
op[6]=((((-1.0)*x668))+x660+(((-1.0)*x671)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x672=(sj1*sj2);
IkReal x673=(cj1*cj2);
IkReal x674=(r10*sj3);
IkReal x675=(cj4*r02);
IkReal x676=((4.0)*r11*sj3);
IkReal x677=((8.0)*r01*sj4);
IkReal x678=(cj3*cj4*r11);
IkReal x679=((16.0)*r01*sj4);
IkReal x680=(cj3*r12*sj4);
IkReal x681=((4.0)*r00*sj4);
IkReal x682=((4.0)*x680);
IkReal x683=((4.0)*cj3*cj4*r10);
IkReal x684=((12.0)*x680);
IkReal x685=(x673*x681);
IkReal x686=(x672*x681);
IkReal x687=((4.0)*x673*x675);
IkReal x688=((12.0)*x673*x675);
IkReal x689=((12.0)*x672*x675);
IkReal x690=((4.0)*x672*x675);
IkReal x691=(x676+x685);
IkReal x692=(x683+x686);
IkReal x693=(x688+x684);
IkReal x694=(x682+x687);
IkReal x695=(((x672*x677))+(((8.0)*x674))+(((8.0)*x678))+(((-1.0)*x673*x677)));
j5evalpoly[0]=(((x695*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x689))+x692+x693+(((-1.0)*x691))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x694+x692+(((-1.0)*x691))+(((-1.0)*x690))))))+(((htj5*htj5*htj5)*((((x672*x679))+(((16.0)*x674))+(((16.0)*x678))+(((-1.0)*x673*x679))))))+x694+x691+(((-1.0)*x692))+(((-1.0)*x690))+(((htj5*htj5)*(((((-1.0)*x689))+x691+x693+(((-1.0)*x692))))))+((htj5*x695)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x696=(cj5*sj4);
IkReal x697=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x696))+((r01*x697)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x697))+((r10*x696))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x696))+((r01*x697))))+IKsqr(((((-1.0)*r11*x697))+((r10*x696))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x696))+((r01*x697))), ((((-1.0)*r11*x697))+((r10*x696))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x698=IKsin(j0);
IkReal x699=IKcos(j0);
IkReal x700=((0.447)*cj2);
IkReal x701=(r00*sj5);
IkReal x702=(cj4*sj3);
IkReal x703=(cj5*r00);
IkReal x704=((1.0)*sj2);
IkReal x705=(r11*sj5);
IkReal x706=(cj3*r01);
IkReal x707=((1.0)*sj5);
IkReal x708=((1.0)*sj3);
IkReal x709=(r02*sj4);
IkReal x710=(cj5*r10);
IkReal x711=(cj3*cj4);
IkReal x712=(cj5*r11);
IkReal x713=(cj5*r01);
IkReal x714=((1.0)*cj2);
IkReal x715=((1.0)*cj3);
IkReal x716=(r12*sj4);
IkReal x717=(r10*sj5);
IkReal x718=((0.447)*sj2);
IkReal x719=((1.0)*sj4);
IkReal x720=((1.0)*cj4);
IkReal x721=(sj1*x698);
IkReal x722=(cj1*x699);
IkReal x723=(cj1*x698);
IkReal x724=(sj1*x699);
evalcond[0]=((((-1.0)*r12*x720))+(((-1.0)*x710*x719))+x699+((sj4*x705)));
evalcond[1]=((((-1.0)*r02*x720))+(((-1.0)*x703*x719))+((r01*sj4*sj5))+(((-1.0)*x698)));
evalcond[2]=((((-1.0)*x700*x724))+(((-0.1134)*x701))+(((-0.1134)*x713))+(((-1.0)*px))+(((-0.1036)*x698))+(((-1.0)*x718*x722))+(((-0.452)*x724)));
evalcond[3]=((((-1.0)*x700*x721))+(((-0.1134)*x712))+(((-0.1134)*x717))+(((0.1036)*x699))+(((-1.0)*py))+(((-1.0)*x718*x723))+(((-0.452)*x721)));
evalcond[4]=(((x702*x703))+((cj5*x706))+(((-1.0)*x704*x722))+(((-1.0)*x708*x709))+(((-1.0)*x714*x724))+((cj3*x701))+(((-1.0)*r01*x702*x707)));
evalcond[5]=((((-1.0)*x702*x705))+((x702*x710))+(((-1.0)*x704*x723))+(((-1.0)*x708*x716))+(((-1.0)*x714*x721))+((cj3*x712))+((cj3*x717)));
evalcond[6]=((((-1.0)*cj4*x706*x707))+(((-1.0)*x709*x715))+((x703*x711))+(((-1.0)*x704*x724))+((cj2*x722))+(((-1.0)*x708*x713))+(((-1.0)*x701*x708)));
evalcond[7]=((((-1.0)*r10*sj3*x707))+(((-1.0)*x705*x711))+(((-1.0)*x704*x721))+((x710*x711))+((cj2*x723))+(((-1.0)*x708*x712))+(((-1.0)*x715*x716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x725=IKPowWithIntegerCheck(r22,-1);
if(!x725.valid){
continue;
}
CheckValue<IkReal> x726=IKPowWithIntegerCheck(sj3,-1);
if(!x726.valid){
continue;
}
sj4array[0]=((x725.value)*(x726.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x727=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x727);
rxp1_0=(pz*r11);
rxp1_1=(r01*x727);
IkReal x728=(r10*sj3);
IkReal x729=((4.0)*cj4);
IkReal x730=(r11*sj3);
IkReal x731=((16.0)*cj4);
IkReal x732=(sj1*sj2);
IkReal x733=(r01*sj4);
IkReal x734=(cj3*r11);
IkReal x735=(cj1*sj2);
IkReal x736=((8.0)*cj2);
IkReal x737=((8.0)*cj4);
IkReal x738=((4.0)*sj4);
IkReal x739=(r12*sj3);
IkReal x740=(cj2*sj1);
IkReal x741=(cj1*cj2);
IkReal x742=(cj3*r12);
IkReal x743=((12.0)*sj4);
IkReal x744=(cj3*r10);
IkReal x745=((4.0)*x730);
IkReal x746=((4.0)*x734);
IkReal x747=((12.0)*cj4*r02);
IkReal x748=(x729*x744);
IkReal x749=(x742*x743);
IkReal x750=(x728*x729);
IkReal x751=(x739*x743);
IkReal x752=(r00*x738*x741);
IkReal x753=(r00*x732*x738);
IkReal x754=(x741*x747);
IkReal x755=(x732*x747);
IkReal x756=(r00*x735*x738);
IkReal x757=(r00*x738*x740);
IkReal x758=(x740*x747);
IkReal x759=(x735*x747);
IkReal x760=(x752+x745);
IkReal x761=(x753+x748);
IkReal x762=(x754+x749);
IkReal x763=(x759+x758);
IkReal x764=(x757+x756+x750+x746);
j5eval[0]=((IKabs(((((-8.0)*x744))+((sj1*x733*x736))+(((8.0)*x733*x735))+((x730*x737)))))+(((0.5)*(IKabs(((((-16.0)*x744))+(((16.0)*x733*x735))+((x730*x731))+(((16.0)*x733*x740)))))))+(((0.5)*(IKabs(((((-1.0)*x764))+(((-1.0)*x763))+x751)))))+(((0.5)*(IKabs(((((-1.0)*r02*x729*x740))+(((-1.0)*r02*x729*x735))+x764+((x738*x739)))))))+(IKabs(((((-1.0)*cj1*x733*x736))+((x734*x737))+(((8.0)*x732*x733))+(((8.0)*x728)))))+(((0.5)*(IKabs(((((-1.0)*x763))+x751+x764)))))+(((0.5)*(IKabs((((x731*x734))+(((16.0)*x732*x733))+(((-16.0)*x733*x741))+(((16.0)*x728)))))))+(((0.5)*(IKabs(((((-1.0)*x761))+x760+x762+(((-1.0)*x755)))))))+(((0.5)*(IKabs(((((-1.0)*x760))+x761+x762+(((-1.0)*x755)))))))+(((0.5)*(IKabs((((x738*x742))+(((-1.0)*x760))+(((-1.0)*r02*x729*x732))+x761+((r02*x729*x741))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x765=((4.0)*cj4);
IkReal x766=(cj3*r10);
IkReal x767=((4.0)*sj4);
IkReal x768=(r12*sj3);
IkReal x769=((12.0)*cj4);
IkReal x770=(cj1*sj2);
IkReal x771=(cj2*sj1);
IkReal x772=(r01*sj4);
IkReal x773=((4.0)*cj3*r11);
IkReal x774=(r02*x770);
IkReal x775=(cj4*r11*sj3);
IkReal x776=(r10*sj3*x765);
IkReal x777=((12.0)*sj4*x768);
IkReal x778=(x767*x768);
IkReal x779=(x771*x772);
IkReal x780=(r00*x767*x770);
IkReal x781=(r00*x767*x771);
IkReal x782=(r02*x769*x771);
IkReal x783=(x769*x774);
IkReal x784=(r02*x765*x771);
IkReal x785=(x765*x774);
IkReal x786=(x784+x785);
IkReal x787=(x782+x783);
IkReal x788=((((8.0)*x779))+(((8.0)*x775))+(((8.0)*x770*x772))+(((-8.0)*x766)));
IkReal x789=(x773+x776+x780+x781);
op[0]=((((-1.0)*x786))+x778+x789);
op[1]=x788;
op[2]=((((-1.0)*x787))+x777+x789);
op[3]=((((-16.0)*x766))+(((16.0)*x770*x772))+(((16.0)*x779))+(((16.0)*x775)));
op[4]=((((-1.0)*x787))+(((-1.0)*x789))+x777);
op[5]=x788;
op[6]=((((-1.0)*x786))+(((-1.0)*x789))+x778);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x790=(sj1*sj2);
IkReal x791=(cj1*cj2);
IkReal x792=(r10*sj3);
IkReal x793=(cj4*r02);
IkReal x794=((4.0)*r11*sj3);
IkReal x795=((8.0)*r01*sj4);
IkReal x796=(cj3*cj4*r11);
IkReal x797=((16.0)*r01*sj4);
IkReal x798=(cj3*r12*sj4);
IkReal x799=((4.0)*r00*sj4);
IkReal x800=((4.0)*x798);
IkReal x801=((4.0)*cj3*cj4*r10);
IkReal x802=((12.0)*x798);
IkReal x803=(x791*x799);
IkReal x804=(x790*x799);
IkReal x805=((4.0)*x791*x793);
IkReal x806=((12.0)*x791*x793);
IkReal x807=((12.0)*x790*x793);
IkReal x808=((4.0)*x790*x793);
IkReal x809=(x794+x803);
IkReal x810=(x804+x801);
IkReal x811=(x806+x802);
IkReal x812=(x805+x800);
IkReal x813=((((8.0)*x796))+(((8.0)*x792))+((x790*x795))+(((-1.0)*x791*x795)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*((x812+x810+(((-1.0)*x808))+(((-1.0)*x809))))))+(((-1.0)*x810))+(((htj5*htj5*htj5*htj5)*((x810+x811+(((-1.0)*x809))+(((-1.0)*x807))))))+((x813*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*((((x790*x797))+(((16.0)*x796))+(((16.0)*x792))+(((-1.0)*x791*x797))))))+((htj5*x813))+(((htj5*htj5)*(((((-1.0)*x810))+x811+x809+(((-1.0)*x807))))))+x812+x809+(((-1.0)*x808)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x814=(cj5*sj4);
IkReal x815=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x815))+(((-1.0)*r00*x814)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x815))+((r10*x814))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x815))+(((-1.0)*r00*x814))))+IKsqr(((((-1.0)*r11*x815))+((r10*x814))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x815))+(((-1.0)*r00*x814))), ((((-1.0)*r11*x815))+((r10*x814))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x816=IKsin(j0);
IkReal x817=IKcos(j0);
IkReal x818=((0.447)*cj2);
IkReal x819=(r00*sj5);
IkReal x820=(cj4*sj3);
IkReal x821=(cj5*r00);
IkReal x822=((1.0)*sj2);
IkReal x823=(r11*sj5);
IkReal x824=(cj3*r01);
IkReal x825=((1.0)*sj5);
IkReal x826=((1.0)*sj3);
IkReal x827=(r02*sj4);
IkReal x828=(cj5*r10);
IkReal x829=(cj3*cj4);
IkReal x830=(cj5*r11);
IkReal x831=(cj5*r01);
IkReal x832=((1.0)*cj2);
IkReal x833=((1.0)*cj3);
IkReal x834=(r12*sj4);
IkReal x835=(r10*sj5);
IkReal x836=((0.447)*sj2);
IkReal x837=((1.0)*sj4);
IkReal x838=((1.0)*cj4);
IkReal x839=(sj1*x816);
IkReal x840=(cj1*x817);
IkReal x841=(cj1*x816);
IkReal x842=(sj1*x817);
evalcond[0]=((((-1.0)*x828*x837))+(((-1.0)*r12*x838))+x817+((sj4*x823)));
evalcond[1]=((((-1.0)*x821*x837))+(((-1.0)*r02*x838))+((r01*sj4*sj5))+(((-1.0)*x816)));
evalcond[2]=((((-1.0)*x836*x840))+(((-0.452)*x842))+(((-1.0)*x818*x842))+(((-1.0)*px))+(((-0.1134)*x831))+(((-0.1134)*x819))+(((-0.1036)*x816)));
evalcond[3]=((((-0.452)*x839))+(((-1.0)*x836*x841))+(((-1.0)*x818*x839))+(((-1.0)*py))+(((-0.1134)*x835))+(((-0.1134)*x830))+(((0.1036)*x817)));
evalcond[4]=(((cj3*x819))+((x820*x821))+(((-1.0)*r01*x820*x825))+((cj5*x824))+(((-1.0)*x826*x827))+(((-1.0)*x822*x840))+(((-1.0)*x832*x842)));
evalcond[5]=((((-1.0)*x832*x839))+((x820*x828))+(((-1.0)*x826*x834))+(((-1.0)*x822*x841))+((cj3*x835))+((cj3*x830))+(((-1.0)*x820*x823)));
evalcond[6]=((((-1.0)*x827*x833))+((x821*x829))+(((-1.0)*cj4*x824*x825))+(((-1.0)*x826*x831))+(((-1.0)*x819*x826))+(((-1.0)*x822*x842))+((cj2*x840)));
evalcond[7]=((((-1.0)*x823*x829))+(((-1.0)*x826*x830))+(((-1.0)*r10*sj3*x825))+(((-1.0)*x833*x834))+(((-1.0)*x822*x839))+((cj2*x841))+((x828*x829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x843=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x843);
rxp1_0=(pz*r11);
rxp1_1=(r01*x843);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x844=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x844);
rxp1_0=(pz*r11);
rxp1_1=(r01*x844);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x845=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x845);
rxp1_0=(pz*r11);
rxp1_1=(r01*x845);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x846=IKPowWithIntegerCheck(r22,-1);
if(!x846.valid){
continue;
}
sj4array[0]=((x846.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x847=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x847);
rxp1_0=(pz*r11);
rxp1_1=(r01*x847);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x849 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x849.valid){
continue;
}
IkReal x848=x849.value;
j5array[0]=((-1.0)*x848);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x848)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x850=(cj5*sj4);
IkReal x851=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x850))+((r01*x851)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x850))+(((-1.0)*r11*x851)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x850))+((r01*x851))))+IKsqr((((r10*x850))+(((-1.0)*r11*x851))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x850))+((r01*x851))), (((r10*x850))+(((-1.0)*r11*x851))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x852=IKcos(j0);
IkReal x853=IKsin(j0);
IkReal x854=(r00*sj5);
IkReal x855=(sj1*sj2);
IkReal x856=(sj4*sj5);
IkReal x857=(cj1*cj2);
IkReal x858=((1.0)*cj5);
IkReal x859=(r10*sj5);
IkReal x860=((0.1134)*cj5);
IkReal x861=((0.452)*sj1);
IkReal x862=((1.0)*x853);
evalcond[0]=(((r11*x856))+(((-1.0)*r10*sj4*x858))+x852);
evalcond[1]=((((-1.0)*x862))+(((-1.0)*r00*sj4*x858))+((r01*x856)));
evalcond[2]=((((-1.0)*x852*x855))+(((-1.0)*r01*x858))+(((-1.0)*x854))+((x852*x857)));
evalcond[3]=((((-1.0)*r11*x858))+(((-1.0)*x859))+((x853*x857))+(((-1.0)*x855*x862)));
evalcond[4]=((((-0.1134)*x854))+(((-0.1036)*x853))+(((-1.0)*r01*x860))+(((-1.0)*x852*x861))+(((-1.0)*px)));
evalcond[5]=((((-0.1134)*x859))+(((-1.0)*x853*x861))+(((-1.0)*py))+(((0.1036)*x852))+(((-1.0)*r11*x860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x863=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x863);
rxp1_0=(pz*r11);
rxp1_1=(r01*x863);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x864=IKPowWithIntegerCheck(r22,-1);
if(!x864.valid){
continue;
}
sj4array[0]=((-1.0)*(x864.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x865=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x865);
rxp1_0=(pz*r11);
rxp1_1=(r01*x865);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x867 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x867.valid){
continue;
}
IkReal x866=x867.value;
j5array[0]=((-1.0)*x866);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x866)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x868=(cj5*sj4);
IkReal x869=(sj4*sj5);
if( IKabs((((r01*x869))+(((-1.0)*r00*x868)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x868))+(((-1.0)*r11*x869)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x869))+(((-1.0)*r00*x868))))+IKsqr((((r10*x868))+(((-1.0)*r11*x869))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x869))+(((-1.0)*r00*x868))), (((r10*x868))+(((-1.0)*r11*x869))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x870=IKcos(j0);
IkReal x871=IKsin(j0);
IkReal x872=(r00*sj5);
IkReal x873=(cj5*r01);
IkReal x874=(sj1*sj2);
IkReal x875=(sj4*sj5);
IkReal x876=(cj1*cj2);
IkReal x877=((0.452)*sj1);
IkReal x878=(cj5*r11);
IkReal x879=(r10*sj5);
IkReal x880=((1.0)*x871);
IkReal x881=((1.0)*cj5*sj4);
evalcond[0]=(((r11*x875))+(((-1.0)*r10*x881))+x870);
evalcond[1]=(((r01*x875))+(((-1.0)*x880))+(((-1.0)*r00*x881)));
evalcond[2]=(((x870*x876))+(((-1.0)*x870*x874))+x872+x873);
evalcond[3]=(((x871*x876))+x878+x879+(((-1.0)*x874*x880)));
evalcond[4]=((((-0.1036)*x871))+(((-0.1134)*x873))+(((-0.1134)*x872))+(((-1.0)*px))+(((-1.0)*x870*x877)));
evalcond[5]=((((-0.1134)*x878))+(((-0.1134)*x879))+(((-1.0)*x871*x877))+(((-1.0)*py))+(((0.1036)*x870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x882=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x882);
rxp1_0=(pz*r11);
rxp1_1=(r01*x882);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x883=IKPowWithIntegerCheck(r22,-1);
if(!x883.valid){
continue;
}
sj4array[0]=((x883.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x884=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x884);
rxp1_0=(pz*r11);
rxp1_1=(r01*x884);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x886 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x886.valid){
continue;
}
IkReal x885=x886.value;
j5array[0]=((-1.0)*x885);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x885)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x887=(cj5*sj4);
IkReal x888=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x887))+((r01*x888)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x888))+((r10*x887)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x887))+((r01*x888))))+IKsqr(((((-1.0)*r11*x888))+((r10*x887))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x887))+((r01*x888))), ((((-1.0)*r11*x888))+((r10*x887))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x889=IKcos(j0);
IkReal x890=IKsin(j0);
IkReal x891=(r00*sj5);
IkReal x892=(cj5*r01);
IkReal x893=(sj4*sj5);
IkReal x894=((1.0)*cj2);
IkReal x895=(cj5*r11);
IkReal x896=(r10*sj5);
IkReal x897=((0.447)*cj2*sj1);
IkReal x898=((1.0)*cj1*sj2);
IkReal x899=(sj1*x889);
IkReal x900=((0.447)*cj1*sj2);
IkReal x901=((1.0)*cj5*sj4);
IkReal x902=(sj1*x890);
evalcond[0]=(((r11*x893))+x889+(((-1.0)*r10*x901)));
evalcond[1]=(((r01*x893))+(((-1.0)*x890))+(((-1.0)*r00*x901)));
evalcond[2]=((((-1.0)*x889*x898))+(((-1.0)*x894*x899))+x892+x891);
evalcond[3]=((((-1.0)*x894*x902))+x896+x895+(((-1.0)*x890*x898)));
evalcond[4]=((((-1.0)*x889*x900))+(((-1.0)*px))+(((-1.0)*x889*x897))+(((-0.452)*x899))+(((-0.1134)*x892))+(((-0.1134)*x891))+(((-0.1036)*x890)));
evalcond[5]=((((-1.0)*x890*x900))+(((-1.0)*py))+(((-0.1134)*x896))+(((-0.1134)*x895))+(((0.1036)*x889))+(((-0.452)*x902))+(((-1.0)*x890*x897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x903=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x903);
rxp1_0=(pz*r11);
rxp1_1=(r01*x903);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x904=IKPowWithIntegerCheck(r22,-1);
if(!x904.valid){
continue;
}
sj4array[0]=((-1.0)*(x904.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x905=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x905);
rxp1_0=(pz*r11);
rxp1_1=(r01*x905);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x907 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x907.valid){
continue;
}
IkReal x906=x907.value;
j5array[0]=((-1.0)*x906);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x906)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x908=(cj5*sj4);
IkReal x909=(sj4*sj5);
if( IKabs((((r01*x909))+(((-1.0)*r00*x908)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x909))+((r10*x908)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x909))+(((-1.0)*r00*x908))))+IKsqr(((((-1.0)*r11*x909))+((r10*x908))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x909))+(((-1.0)*r00*x908))), ((((-1.0)*r11*x909))+((r10*x908))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x910=IKcos(j0);
IkReal x911=IKsin(j0);
IkReal x912=(r00*sj5);
IkReal x913=(sj4*sj5);
IkReal x914=((1.0)*cj5);
IkReal x915=(r10*sj5);
IkReal x916=((0.1134)*cj5);
IkReal x917=((1.0)*cj2);
IkReal x918=((0.447)*cj2*sj1);
IkReal x919=((1.0)*cj1*sj2);
IkReal x920=(sj1*x910);
IkReal x921=((0.447)*cj1*sj2);
IkReal x922=(sj1*x911);
evalcond[0]=((((-1.0)*r10*sj4*x914))+((r11*x913))+x910);
evalcond[1]=((((-1.0)*r00*sj4*x914))+(((-1.0)*x911))+((r01*x913)));
evalcond[2]=((((-1.0)*r01*x914))+(((-1.0)*x910*x919))+(((-1.0)*x912))+(((-1.0)*x917*x920)));
evalcond[3]=((((-1.0)*r11*x914))+(((-1.0)*x915))+(((-1.0)*x911*x919))+(((-1.0)*x917*x922)));
evalcond[4]=((((-0.1036)*x911))+(((-0.452)*x920))+(((-0.1134)*x912))+(((-1.0)*r01*x916))+(((-1.0)*px))+(((-1.0)*x910*x918))+(((-1.0)*x910*x921)));
evalcond[5]=((((0.1036)*x910))+(((-0.452)*x922))+(((-0.1134)*x915))+(((-1.0)*py))+(((-1.0)*r11*x916))+(((-1.0)*x911*x918))+(((-1.0)*x911*x921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x923=IKPowWithIntegerCheck(cj3,-1);
if(!x923.valid){
continue;
}
CheckValue<IkReal> x924=IKPowWithIntegerCheck(r22,-1);
if(!x924.valid){
continue;
}
sj4array[0]=((x923.value)*(x924.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x925=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x925);
rxp1_0=(pz*r11);
rxp1_1=(r01*x925);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x926=((4.0)*r01);
IkReal x927=((16.0)*r00);
IkReal x928=(cj3*sj2);
IkReal x929=((8.0)*r00);
IkReal x930=(cj2*cj3);
IkReal x931=(cj4*r01);
IkReal x932=((16.0)*cj1);
IkReal x933=((8.0)*sj1);
IkReal x934=((16.0)*sj1);
IkReal x935=((8.0)*cj1);
IkReal x936=(sj2*sj3);
IkReal x937=(cj2*sj3);
IkReal x938=(sj1*x937);
IkReal x939=((4.0)*cj4*r00);
IkReal x940=(((sj1*x936*x939))+((sj1*x926*x928))+((cj1*x926*x936))+((x926*x938)));
IkReal x941=(((cj1*x928*x939))+((sj1*x930*x939))+((cj1*x926*x930))+((cj1*x937*x939)));
IkReal x942=((((-1.0)*x940))+x941);
IkReal x943=(((x928*x931*x935))+(((-1.0)*x931*x933*x936))+((sj1*x928*x929))+((x930*x931*x933))+(((-1.0)*cj1*x929*x930))+((cj1*x929*x936))+((x931*x935*x937))+((x929*x938)));
IkReal x944=((((-1.0)*x941))+x940);
op[0]=x942;
op[1]=x943;
op[2]=x942;
op[3]=(((x928*x931*x932))+((cj1*x927*x936))+((x927*x938))+((x930*x931*x934))+((sj1*x927*x928))+((x931*x932*x937))+(((-1.0)*x931*x934*x936))+(((-1.0)*cj1*x927*x930)));
op[4]=x944;
op[5]=x943;
op[6]=x944;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x945=(cj5*sj4);
IkReal x946=(sj4*sj5);
if( IKabs((((r01*x946))+(((-1.0)*r00*x945)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x946))+((r10*x945)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x946))+(((-1.0)*r00*x945))))+IKsqr(((((-1.0)*r11*x946))+((r10*x945))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x946))+(((-1.0)*r00*x945))), ((((-1.0)*r11*x946))+((r10*x945))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x947=IKcos(j0);
IkReal x948=IKsin(j0);
IkReal x949=((0.447)*cj2);
IkReal x950=(r00*sj5);
IkReal x951=(cj4*sj3);
IkReal x952=(cj5*r00);
IkReal x953=((1.0)*sj2);
IkReal x954=(r11*sj5);
IkReal x955=(cj3*r01);
IkReal x956=((1.0)*sj5);
IkReal x957=((0.1134)*cj5);
IkReal x958=(cj5*r10);
IkReal x959=(cj3*cj4);
IkReal x960=(cj5*r11);
IkReal x961=((1.0)*sj3);
IkReal x962=((1.0)*cj2);
IkReal x963=((0.447)*sj2);
IkReal x964=(r10*sj5);
IkReal x965=((1.0)*sj4);
IkReal x966=(sj1*x948);
IkReal x967=(cj1*x947);
IkReal x968=(cj1*x948);
IkReal x969=(sj1*x947);
evalcond[0]=(((sj4*x954))+(((-1.0)*x958*x965))+x947);
evalcond[1]=(((r01*sj4*sj5))+(((-1.0)*x948))+(((-1.0)*x952*x965)));
evalcond[2]=(((cj5*x955))+((x951*x952))+(((-1.0)*x962*x969))+(((-1.0)*x953*x967))+((cj3*x950))+(((-1.0)*r01*x951*x956)));
evalcond[3]=(((x951*x958))+(((-1.0)*x962*x966))+(((-1.0)*x951*x954))+(((-1.0)*x953*x968))+((cj3*x960))+((cj3*x964)));
evalcond[4]=(((x952*x959))+(((-1.0)*cj5*r01*x961))+(((-1.0)*x953*x969))+(((-1.0)*x950*x961))+((cj2*x967))+(((-1.0)*cj4*x955*x956)));
evalcond[5]=((((-1.0)*x960*x961))+(((-1.0)*x953*x966))+((cj2*x968))+((x958*x959))+(((-1.0)*x954*x959))+(((-1.0)*r10*sj3*x956)));
evalcond[6]=((((-0.1134)*x950))+(((-0.1036)*x948))+(((-1.0)*x963*x967))+(((-1.0)*r01*x957))+(((-1.0)*px))+(((-0.452)*x969))+(((-1.0)*x949*x969)));
evalcond[7]=((((-0.1134)*x964))+(((-1.0)*x963*x968))+(((-1.0)*py))+(((-1.0)*r11*x957))+(((-0.452)*x966))+(((-1.0)*x949*x966))+(((0.1036)*x947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x970=IKPowWithIntegerCheck(r22,-1);
if(!x970.valid){
continue;
}
CheckValue<IkReal> x971=IKPowWithIntegerCheck(sj3,-1);
if(!x971.valid){
continue;
}
sj4array[0]=((x970.value)*(x971.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x972=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x972);
rxp1_0=(pz*r11);
rxp1_1=(r01*x972);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x973=((4.0)*r01);
IkReal x974=((16.0)*r00);
IkReal x975=(cj3*sj2);
IkReal x976=((8.0)*r00);
IkReal x977=(cj2*cj3);
IkReal x978=(cj4*r01);
IkReal x979=((16.0)*cj1);
IkReal x980=((8.0)*sj1);
IkReal x981=((16.0)*sj1);
IkReal x982=((8.0)*cj1);
IkReal x983=(sj2*sj3);
IkReal x984=(cj2*sj3);
IkReal x985=(sj1*x984);
IkReal x986=((4.0)*cj4*r00);
IkReal x987=(((sj1*x973*x975))+((x973*x985))+((sj1*x983*x986))+((cj1*x973*x983)));
IkReal x988=(((sj1*x977*x986))+((cj1*x984*x986))+((cj1*x975*x986))+((cj1*x973*x977)));
IkReal x989=((((-1.0)*x987))+x988);
IkReal x990=((((-1.0)*cj1*x976*x977))+((x977*x978*x980))+((x978*x982*x984))+((x976*x985))+((cj1*x976*x983))+(((-1.0)*x978*x980*x983))+((x975*x978*x982))+((sj1*x975*x976)));
IkReal x991=((((-1.0)*x988))+x987);
op[0]=x989;
op[1]=x990;
op[2]=x989;
op[3]=(((cj1*x974*x983))+(((-1.0)*cj1*x974*x977))+((x977*x978*x981))+((x978*x979*x984))+((x974*x985))+((x975*x978*x979))+((sj1*x974*x975))+(((-1.0)*x978*x981*x983)));
op[4]=x991;
op[5]=x990;
op[6]=x991;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x992=(cj5*sj4);
IkReal x993=(sj4*sj5);
if( IKabs((((r01*x993))+(((-1.0)*r00*x992)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x992))+(((-1.0)*r11*x993)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x993))+(((-1.0)*r00*x992))))+IKsqr((((r10*x992))+(((-1.0)*r11*x993))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x993))+(((-1.0)*r00*x992))), (((r10*x992))+(((-1.0)*r11*x993))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x994=IKcos(j0);
IkReal x995=IKsin(j0);
IkReal x996=((0.447)*cj2);
IkReal x997=(r00*sj5);
IkReal x998=(cj4*sj3);
IkReal x999=(cj5*r00);
IkReal x1000=((1.0)*sj2);
IkReal x1001=(r11*sj5);
IkReal x1002=(cj3*r01);
IkReal x1003=((1.0)*sj5);
IkReal x1004=((0.1134)*cj5);
IkReal x1005=(cj5*r10);
IkReal x1006=(cj3*cj4);
IkReal x1007=(cj5*r11);
IkReal x1008=((1.0)*sj3);
IkReal x1009=((1.0)*cj2);
IkReal x1010=((0.447)*sj2);
IkReal x1011=(r10*sj5);
IkReal x1012=((1.0)*sj4);
IkReal x1013=(sj1*x995);
IkReal x1014=(cj1*x994);
IkReal x1015=(cj1*x995);
IkReal x1016=(sj1*x994);
evalcond[0]=(((sj4*x1001))+(((-1.0)*x1005*x1012))+x994);
evalcond[1]=((((-1.0)*x995))+(((-1.0)*x1012*x999))+((r01*sj4*sj5)));
evalcond[2]=(((x998*x999))+(((-1.0)*x1009*x1016))+(((-1.0)*r01*x1003*x998))+((cj5*x1002))+((cj3*x997))+(((-1.0)*x1000*x1014)));
evalcond[3]=(((cj3*x1007))+(((-1.0)*x1009*x1013))+((cj3*x1011))+(((-1.0)*x1001*x998))+((x1005*x998))+(((-1.0)*x1000*x1015)));
evalcond[4]=((((-1.0)*cj4*x1002*x1003))+((cj2*x1014))+(((-1.0)*cj5*r01*x1008))+((x1006*x999))+(((-1.0)*x1008*x997))+(((-1.0)*x1000*x1016)));
evalcond[5]=(((cj2*x1015))+(((-1.0)*x1001*x1006))+(((-1.0)*r10*sj3*x1003))+(((-1.0)*x1007*x1008))+((x1005*x1006))+(((-1.0)*x1000*x1013)));
evalcond[6]=((((-1.0)*x1016*x996))+(((-1.0)*x1010*x1014))+(((-0.1134)*x997))+(((-0.1036)*x995))+(((-1.0)*px))+(((-0.452)*x1016))+(((-1.0)*r01*x1004)));
evalcond[7]=((((-1.0)*x1010*x1015))+(((-0.1134)*x1011))+(((-1.0)*py))+(((-1.0)*x1013*x996))+(((-1.0)*r11*x1004))+(((0.1036)*x994))+(((-0.452)*x1013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1019 = IKatan2WithCheck(IkReal(((-0.1134)*r21)),IkReal(((-0.1134)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1019.valid){
continue;
}
IkReal x1017=((1.0)*(x1019.value));
if((((((0.01285956)*(r21*r21)))+(((0.01285956)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1020=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01285956)*(r21*r21)))+(((0.01285956)*(r20*r20)))))),-1);
if(!x1020.valid){
continue;
}
if( (((x1020.value)*(((((0.447)*sj1*sj2))+(((-1.0)*pz))+(((-0.452)*cj1))+(((-0.447)*cj1*cj2)))))) < -1-IKFAST_SINCOS_THRESH || (((x1020.value)*(((((0.447)*sj1*sj2))+(((-1.0)*pz))+(((-0.452)*cj1))+(((-0.447)*cj1*cj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1018=IKasin(((x1020.value)*(((((0.447)*sj1*sj2))+(((-1.0)*pz))+(((-0.452)*cj1))+(((-0.447)*cj1*cj2))))));
j5array[0]=((((-1.0)*x1017))+(((-1.0)*x1018)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+x1018+(((-1.0)*x1017)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1021=cj5*cj5;
IkReal x1022=r21*r21;
IkReal x1023=(sj3*x1021);
IkReal x1024=(((sj3*(r22*r22)))+((x1023*(r20*r20)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+(((-1.0)*x1022*x1023))+((sj3*x1022)));
j4eval[0]=x1024;
j4eval[1]=IKsign(x1024);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1025=cj5*cj5;
IkReal x1026=r21*r21;
IkReal x1027=(cj3*x1025);
IkReal x1028=((((-1.0)*x1026*x1027))+(((-2.0)*cj3*cj5*r20*r21*sj5))+((x1027*(r20*r20)))+((cj3*(r22*r22)))+((cj3*x1026)));
j4eval[0]=x1028;
j4eval[1]=IKsign(x1028);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1029=cj1*cj1;
IkReal x1030=cj2*cj2;
IkReal x1031=((89.8972191323693)*cj2);
IkReal x1032=((2525550.0)*cj2);
IkReal x1033=(cj1*sj1*sj2);
IkReal x1034=(x1029*x1030);
j0eval[0]=((47.8391457174639)+x1031+(((44.4513904338153)*x1030))+(((-1.0)*x1029))+(((-88.9027808676307)*x1034))+(((-1.0)*x1029*x1031))+(((89.8972191323693)*x1033))+(((88.9027808676307)*cj2*x1033)));
j0eval[1]=IKsign(((1343981.0)+(((2497612.5)*cj2*x1033))+(((-28093.75)*x1029))+x1032+(((-1.0)*x1029*x1032))+(((2525550.0)*x1033))+(((1248806.25)*x1030))+(((-2497612.5)*x1034))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1035=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1035;
j0eval[1]=IKsign(x1035);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1036=cj5*cj5;
IkReal x1037=r21*r21;
IkReal x1038=(sj1*sj2);
IkReal x1039=(r21*sj5);
IkReal x1040=(cj5*r20);
IkReal x1041=(cj1*cj2);
IkReal x1042=(x1037+(r22*r22)+((x1036*(r20*r20)))+(((-2.0)*x1039*x1040))+(((-1.0)*x1036*x1037)));
j4eval[0]=x1042;
j4eval[1]=IKsign(x1042);
j4eval[2]=((IKabs((((r22*x1038))+(((-1.0)*r22*x1041)))))+(IKabs((((x1038*x1039))+(((-1.0)*x1038*x1040))+((x1040*x1041))+(((-1.0)*x1039*x1041))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.492063434766163)*px))+(((-2.12309223301616)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.12309223301616)*px))+(((0.492063434766163)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.492063434766163)*px))+(((-2.12309223301616)*py))))+IKsqr(((((-2.12309223301616)*px))+(((0.492063434766163)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.492063434766163)*px))+(((-2.12309223301616)*py))), ((((-2.12309223301616)*px))+(((0.492063434766163)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1043=IKcos(j0);
IkReal x1044=IKsin(j0);
evalcond[0]=((((-0.447)*x1043))+(((-1.0)*px))+(((-0.1036)*x1044)));
evalcond[1]=((((0.1036)*x1043))+(((-0.447)*x1044))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1045=((1.0)*cj5);
IkReal x1046=((((-1.0)*r01*x1045))+(((-1.0)*r00*sj5)));
j4eval[0]=x1046;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1045))))));
j4eval[2]=IKsign(x1046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1047=((1.0)*cj5);
IkReal x1048=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1047)));
j4eval[0]=x1048;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1047))))));
j4eval[2]=IKsign(x1048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1049=cj5*cj5;
IkReal x1050=((1.0)*sj5);
IkReal x1051=(cj5*r20);
IkReal x1052=(r11*r21);
IkReal x1053=(x1052+(((-1.0)*x1049*x1052))+((r12*r22))+(((-1.0)*r11*x1050*x1051))+(((-1.0)*cj5*r10*r21*x1050))+((r10*r20*x1049)));
j4eval[0]=x1053;
j4eval[1]=IKsign(x1053);
j4eval[2]=((IKabs((((cj0*x1051))+(((-1.0)*cj0*r21*x1050)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1054=cj5*cj5;
IkReal x1055=((1.0)*sj5);
IkReal x1056=(cj5*r20);
IkReal x1057=(r11*r21);
CheckValue<IkReal> x1058 = IKatan2WithCheck(IkReal((((cj0*x1056))+(((-1.0)*cj0*r21*x1055)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1058.valid){
continue;
}
CheckValue<IkReal> x1059=IKPowWithIntegerCheck(IKsign((((r10*r20*x1054))+(((-1.0)*x1054*x1057))+x1057+((r12*r22))+(((-1.0)*cj5*r10*r21*x1055))+(((-1.0)*r11*x1055*x1056)))),-1);
if(!x1059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1058.value)+(((1.5707963267949)*(x1059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1060=IKsin(j4);
IkReal x1061=IKcos(j4);
IkReal x1062=((1.0)*sj0);
IkReal x1063=(cj5*r00);
IkReal x1064=(r11*sj5);
IkReal x1065=(cj5*r10);
IkReal x1066=(r21*sj5);
IkReal x1067=(cj5*r20);
IkReal x1068=(r01*sj5);
IkReal x1069=((1.0)*x1061);
IkReal x1070=((1.0)*x1060);
evalcond[0]=((((-1.0)*r22*x1069))+((x1060*x1066))+(((-1.0)*x1067*x1070)));
evalcond[1]=(((x1061*x1067))+(((-1.0)*r22*x1070))+(((-1.0)*x1066*x1069)));
evalcond[2]=(cj0+((x1060*x1064))+(((-1.0)*r12*x1069))+(((-1.0)*x1065*x1070)));
evalcond[3]=((((-1.0)*x1063*x1070))+((x1060*x1068))+(((-1.0)*r02*x1069))+(((-1.0)*x1062)));
evalcond[4]=(((x1061*x1063))+(((-1.0)*r02*x1070))+(((-1.0)*x1068*x1069))+(((-1.0)*cj0)));
evalcond[5]=(((x1061*x1065))+(((-1.0)*r12*x1070))+(((-1.0)*x1062))+(((-1.0)*x1064*x1069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1071=((1.0)*cj5);
CheckValue<IkReal> x1072 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1071)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1072.valid){
continue;
}
CheckValue<IkReal> x1073=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1071)))),-1);
if(!x1073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1072.value)+(((1.5707963267949)*(x1073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1074=IKsin(j4);
IkReal x1075=IKcos(j4);
IkReal x1076=((1.0)*sj0);
IkReal x1077=(cj5*r00);
IkReal x1078=(r11*sj5);
IkReal x1079=(cj5*r10);
IkReal x1080=(r21*sj5);
IkReal x1081=(cj5*r20);
IkReal x1082=(r01*sj5);
IkReal x1083=((1.0)*x1075);
IkReal x1084=((1.0)*x1074);
evalcond[0]=((((-1.0)*x1081*x1084))+((x1074*x1080))+(((-1.0)*r22*x1083)));
evalcond[1]=(((x1075*x1081))+(((-1.0)*x1080*x1083))+(((-1.0)*r22*x1084)));
evalcond[2]=(((x1074*x1078))+cj0+(((-1.0)*x1079*x1084))+(((-1.0)*r12*x1083)));
evalcond[3]=((((-1.0)*r02*x1083))+(((-1.0)*x1077*x1084))+((x1074*x1082))+(((-1.0)*x1076)));
evalcond[4]=(((x1075*x1077))+(((-1.0)*r02*x1084))+(((-1.0)*x1082*x1083))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1078*x1083))+((x1075*x1079))+(((-1.0)*x1076))+(((-1.0)*r12*x1084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1085=((1.0)*cj5);
CheckValue<IkReal> x1086 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1085))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1086.valid){
continue;
}
CheckValue<IkReal> x1087=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1085)))),-1);
if(!x1087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1086.value)+(((1.5707963267949)*(x1087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1088=IKsin(j4);
IkReal x1089=IKcos(j4);
IkReal x1090=((1.0)*sj0);
IkReal x1091=(cj5*r00);
IkReal x1092=(r11*sj5);
IkReal x1093=(cj5*r10);
IkReal x1094=(r21*sj5);
IkReal x1095=(cj5*r20);
IkReal x1096=(r01*sj5);
IkReal x1097=((1.0)*x1089);
IkReal x1098=((1.0)*x1088);
evalcond[0]=(((x1088*x1094))+(((-1.0)*x1095*x1098))+(((-1.0)*r22*x1097)));
evalcond[1]=(((x1089*x1095))+(((-1.0)*x1094*x1097))+(((-1.0)*r22*x1098)));
evalcond[2]=(cj0+((x1088*x1092))+(((-1.0)*r12*x1097))+(((-1.0)*x1093*x1098)));
evalcond[3]=((((-1.0)*x1091*x1098))+(((-1.0)*x1090))+(((-1.0)*r02*x1097))+((x1088*x1096)));
evalcond[4]=(((x1089*x1091))+(((-1.0)*x1096*x1097))+(((-1.0)*r02*x1098))+(((-1.0)*cj0)));
evalcond[5]=(((x1089*x1093))+(((-1.0)*x1090))+(((-1.0)*r12*x1098))+(((-1.0)*x1092*x1097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.492063434766163)*px))+(((2.12309223301616)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.12309223301616)*px))+(((0.492063434766163)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.492063434766163)*px))+(((2.12309223301616)*py))))+IKsqr(((((2.12309223301616)*px))+(((0.492063434766163)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.492063434766163)*px))+(((2.12309223301616)*py))), ((((2.12309223301616)*px))+(((0.492063434766163)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1099=IKcos(j0);
IkReal x1100=IKsin(j0);
evalcond[0]=((((0.447)*x1099))+(((-1.0)*px))+(((-0.1036)*x1100)));
evalcond[1]=((((-1.0)*py))+(((0.447)*x1100))+(((0.1036)*x1099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1101=((1.0)*cj5);
IkReal x1102=((((-1.0)*r01*x1101))+(((-1.0)*r00*sj5)));
j4eval[0]=x1102;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1101)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1102);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1103=cj5*cj5;
IkReal x1104=((1.0)*r21);
IkReal x1105=(cj5*sj5);
IkReal x1106=((1.0)*r20);
IkReal x1107=(((r00*r20*x1103))+(((-1.0)*r01*x1103*x1104))+((r01*r21))+(((-1.0)*r00*x1104*x1105))+((r02*r22))+(((-1.0)*r01*x1105*x1106)));
j4eval[0]=x1107;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1106)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1107);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1108=cj5*cj5;
IkReal x1109=(r21*sj5);
IkReal x1110=(r11*r21);
IkReal x1111=((1.0)*cj5*r20);
IkReal x1112=(x1110+(((-1.0)*r11*sj5*x1111))+((r12*r22))+((r10*r20*x1108))+(((-1.0)*cj5*r10*x1109))+(((-1.0)*x1108*x1110)));
j4eval[0]=x1112;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1111))+((sj0*x1109)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1112);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1113=cj5*cj5;
IkReal x1114=(r21*sj5);
IkReal x1115=(r11*r21);
IkReal x1116=((1.0)*cj5*r20);
CheckValue<IkReal> x1117 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1116))+((sj0*x1114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1117.valid){
continue;
}
CheckValue<IkReal> x1118=IKPowWithIntegerCheck(IKsign((x1115+(((-1.0)*x1113*x1115))+(((-1.0)*r11*sj5*x1116))+((r12*r22))+((r10*r20*x1113))+(((-1.0)*cj5*r10*x1114)))),-1);
if(!x1118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1117.value)+(((1.5707963267949)*(x1118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1119=IKsin(j4);
IkReal x1120=IKcos(j4);
IkReal x1121=(r11*sj5);
IkReal x1122=(cj5*r00);
IkReal x1123=(cj5*r10);
IkReal x1124=(r21*sj5);
IkReal x1125=(cj5*r20);
IkReal x1126=(r01*sj5);
IkReal x1127=((1.0)*x1120);
IkReal x1128=((1.0)*x1119);
evalcond[0]=(((x1119*x1124))+(((-1.0)*r22*x1127))+(((-1.0)*x1125*x1128)));
evalcond[1]=(((x1120*x1125))+(((-1.0)*r22*x1128))+(((-1.0)*x1124*x1127)));
evalcond[2]=((((-1.0)*r12*x1127))+cj0+((x1119*x1121))+(((-1.0)*x1123*x1128)));
evalcond[3]=(cj0+((x1120*x1122))+(((-1.0)*x1126*x1127))+(((-1.0)*r02*x1128)));
evalcond[4]=((((-1.0)*r12*x1128))+sj0+((x1120*x1123))+(((-1.0)*x1121*x1127)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1122*x1128))+((x1119*x1126))+(((-1.0)*r02*x1127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1129=cj5*cj5;
IkReal x1130=((1.0)*r21);
IkReal x1131=(cj5*sj5);
IkReal x1132=((1.0)*r20);
CheckValue<IkReal> x1133 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1132)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1133.valid){
continue;
}
CheckValue<IkReal> x1134=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x1129*x1130))+(((-1.0)*r00*x1130*x1131))+((r02*r22))+(((-1.0)*r01*x1131*x1132))+((r00*r20*x1129)))),-1);
if(!x1134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1133.value)+(((1.5707963267949)*(x1134.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1135=IKsin(j4);
IkReal x1136=IKcos(j4);
IkReal x1137=(r11*sj5);
IkReal x1138=(cj5*r00);
IkReal x1139=(cj5*r10);
IkReal x1140=(r21*sj5);
IkReal x1141=(cj5*r20);
IkReal x1142=(r01*sj5);
IkReal x1143=((1.0)*x1136);
IkReal x1144=((1.0)*x1135);
evalcond[0]=((((-1.0)*x1141*x1144))+(((-1.0)*r22*x1143))+((x1135*x1140)));
evalcond[1]=((((-1.0)*x1140*x1143))+(((-1.0)*r22*x1144))+((x1136*x1141)));
evalcond[2]=(cj0+((x1135*x1137))+(((-1.0)*x1139*x1144))+(((-1.0)*r12*x1143)));
evalcond[3]=(cj0+((x1136*x1138))+(((-1.0)*r02*x1144))+(((-1.0)*x1142*x1143)));
evalcond[4]=((((-1.0)*x1137*x1143))+sj0+((x1136*x1139))+(((-1.0)*r12*x1144)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1143))+((x1135*x1142))+(((-1.0)*x1138*x1144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1145=((1.0)*cj5);
CheckValue<IkReal> x1146 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1145)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1146.valid){
continue;
}
CheckValue<IkReal> x1147=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1145))+(((-1.0)*r00*sj5)))),-1);
if(!x1147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1146.value)+(((1.5707963267949)*(x1147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1148=IKsin(j4);
IkReal x1149=IKcos(j4);
IkReal x1150=(r11*sj5);
IkReal x1151=(cj5*r00);
IkReal x1152=(cj5*r10);
IkReal x1153=(r21*sj5);
IkReal x1154=(cj5*r20);
IkReal x1155=(r01*sj5);
IkReal x1156=((1.0)*x1149);
IkReal x1157=((1.0)*x1148);
evalcond[0]=((((-1.0)*x1154*x1157))+((x1148*x1153))+(((-1.0)*r22*x1156)));
evalcond[1]=(((x1149*x1154))+(((-1.0)*r22*x1157))+(((-1.0)*x1153*x1156)));
evalcond[2]=(cj0+(((-1.0)*x1152*x1157))+(((-1.0)*r12*x1156))+((x1148*x1150)));
evalcond[3]=(((x1149*x1151))+(((-1.0)*x1155*x1156))+cj0+(((-1.0)*r02*x1157)));
evalcond[4]=(((x1149*x1152))+sj0+(((-1.0)*r12*x1157))+(((-1.0)*x1150*x1156)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1156))+((x1148*x1155))+(((-1.0)*x1151*x1157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.126505927291133)*px))+(((-1.09776861616534)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.126505927291133)*py))+(((-1.09776861616534)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.126505927291133)*px))+(((-1.09776861616534)*py))))+IKsqr(((((0.126505927291133)*py))+(((-1.09776861616534)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.126505927291133)*px))+(((-1.09776861616534)*py))), ((((0.126505927291133)*py))+(((-1.09776861616534)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1158=IKcos(j0);
IkReal x1159=IKsin(j0);
evalcond[0]=((((-0.899)*x1158))+(((-1.0)*px))+(((-0.1036)*x1159)));
evalcond[1]=((((-0.899)*x1159))+(((0.1036)*x1158))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1160=((1.0)*cj5);
IkReal x1161=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1160)));
j4eval[0]=x1161;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1160)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1161);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1162=((1.0)*cj5);
IkReal x1163=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1162)));
j4eval[0]=x1163;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1162))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1163);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1164=cj5*cj5;
IkReal x1165=((1.0)*sj5);
IkReal x1166=(cj5*r20);
IkReal x1167=(r11*r21);
IkReal x1168=(x1167+((r10*r20*x1164))+(((-1.0)*cj5*r10*r21*x1165))+(((-1.0)*r11*x1165*x1166))+((r12*r22))+(((-1.0)*x1164*x1167)));
j4eval[0]=x1168;
j4eval[1]=IKsign(x1168);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1165))+((cj0*x1166)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1169=cj5*cj5;
IkReal x1170=((1.0)*sj5);
IkReal x1171=(cj5*r20);
IkReal x1172=(r11*r21);
CheckValue<IkReal> x1173=IKPowWithIntegerCheck(IKsign((x1172+(((-1.0)*r11*x1170*x1171))+((r10*r20*x1169))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1170))+(((-1.0)*x1169*x1172)))),-1);
if(!x1173.valid){
continue;
}
CheckValue<IkReal> x1174 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1170))+((cj0*x1171)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1173.value)))+(x1174.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1175=IKsin(j4);
IkReal x1176=IKcos(j4);
IkReal x1177=((1.0)*sj0);
IkReal x1178=(cj5*r00);
IkReal x1179=(r11*sj5);
IkReal x1180=(cj5*r10);
IkReal x1181=(r21*sj5);
IkReal x1182=(cj5*r20);
IkReal x1183=(r01*sj5);
IkReal x1184=((1.0)*x1176);
IkReal x1185=((1.0)*x1175);
evalcond[0]=(((x1175*x1181))+(((-1.0)*r22*x1184))+(((-1.0)*x1182*x1185)));
evalcond[1]=((((-1.0)*x1181*x1184))+((x1176*x1182))+(((-1.0)*r22*x1185)));
evalcond[2]=(cj0+((x1175*x1179))+(((-1.0)*x1180*x1185))+(((-1.0)*r12*x1184)));
evalcond[3]=(((x1175*x1183))+(((-1.0)*x1178*x1185))+(((-1.0)*x1177))+(((-1.0)*r02*x1184)));
evalcond[4]=(((x1176*x1178))+(((-1.0)*x1183*x1184))+(((-1.0)*cj0))+(((-1.0)*r02*x1185)));
evalcond[5]=(((x1176*x1180))+(((-1.0)*x1179*x1184))+(((-1.0)*x1177))+(((-1.0)*r12*x1185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1186=((1.0)*cj5);
CheckValue<IkReal> x1187=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1186))+(((-1.0)*r10*sj5)))),-1);
if(!x1187.valid){
continue;
}
CheckValue<IkReal> x1188 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1187.value)))+(x1188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1189=IKsin(j4);
IkReal x1190=IKcos(j4);
IkReal x1191=((1.0)*sj0);
IkReal x1192=(cj5*r00);
IkReal x1193=(r11*sj5);
IkReal x1194=(cj5*r10);
IkReal x1195=(r21*sj5);
IkReal x1196=(cj5*r20);
IkReal x1197=(r01*sj5);
IkReal x1198=((1.0)*x1190);
IkReal x1199=((1.0)*x1189);
evalcond[0]=(((x1189*x1195))+(((-1.0)*r22*x1198))+(((-1.0)*x1196*x1199)));
evalcond[1]=((((-1.0)*x1195*x1198))+(((-1.0)*r22*x1199))+((x1190*x1196)));
evalcond[2]=(cj0+(((-1.0)*x1194*x1199))+((x1189*x1193))+(((-1.0)*r12*x1198)));
evalcond[3]=(((x1189*x1197))+(((-1.0)*x1191))+(((-1.0)*x1192*x1199))+(((-1.0)*r02*x1198)));
evalcond[4]=((((-1.0)*x1197*x1198))+(((-1.0)*r02*x1199))+((x1190*x1192))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1193*x1198))+(((-1.0)*x1191))+((x1190*x1194))+(((-1.0)*r12*x1199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1200=((1.0)*cj5);
CheckValue<IkReal> x1201 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1200)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1201.valid){
continue;
}
CheckValue<IkReal> x1202=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1200)))),-1);
if(!x1202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1201.value)+(((1.5707963267949)*(x1202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1203=IKsin(j4);
IkReal x1204=IKcos(j4);
IkReal x1205=((1.0)*sj0);
IkReal x1206=(cj5*r00);
IkReal x1207=(r11*sj5);
IkReal x1208=(cj5*r10);
IkReal x1209=(r21*sj5);
IkReal x1210=(cj5*r20);
IkReal x1211=(r01*sj5);
IkReal x1212=((1.0)*x1204);
IkReal x1213=((1.0)*x1203);
evalcond[0]=((((-1.0)*r22*x1212))+((x1203*x1209))+(((-1.0)*x1210*x1213)));
evalcond[1]=((((-1.0)*x1209*x1212))+(((-1.0)*r22*x1213))+((x1204*x1210)));
evalcond[2]=((((-1.0)*x1208*x1213))+cj0+((x1203*x1207))+(((-1.0)*r12*x1212)));
evalcond[3]=((((-1.0)*r02*x1212))+(((-1.0)*x1206*x1213))+((x1203*x1211))+(((-1.0)*x1205)));
evalcond[4]=(((x1204*x1206))+(((-1.0)*r02*x1213))+(((-1.0)*x1211*x1212))+(((-1.0)*cj0)));
evalcond[5]=(((x1204*x1208))+(((-1.0)*x1207*x1212))+(((-1.0)*r12*x1213))+(((-1.0)*x1205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-9.63007856508111)*px))+(((-0.464772131519359)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((9.63007856508111)*py))+(((-0.464772131519359)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-9.63007856508111)*px))+(((-0.464772131519359)*py))))+IKsqr(((((9.63007856508111)*py))+(((-0.464772131519359)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-9.63007856508111)*px))+(((-0.464772131519359)*py))), ((((9.63007856508111)*py))+(((-0.464772131519359)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1214=IKcos(j0);
IkReal x1215=IKsin(j0);
evalcond[0]=((((-0.1036)*x1215))+(((-1.0)*px))+(((-0.005)*x1214)));
evalcond[1]=((((0.1036)*x1214))+(((-1.0)*py))+(((-0.005)*x1215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1216=((1.0)*cj5);
IkReal x1217=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1216)));
j4eval[0]=x1217;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1216)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1217);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1218=cj5*cj5;
IkReal x1219=((1.0)*r21);
IkReal x1220=(cj5*sj5);
IkReal x1221=((1.0)*r20);
IkReal x1222=((((-1.0)*r01*x1220*x1221))+(((-1.0)*r00*x1219*x1220))+((r00*r20*x1218))+((r01*r21))+(((-1.0)*r01*x1218*x1219))+((r02*r22)));
j4eval[0]=x1222;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1221)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1222);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1223=cj5*cj5;
IkReal x1224=(r21*sj5);
IkReal x1225=(r11*r21);
IkReal x1226=((1.0)*cj5*r20);
IkReal x1227=((((-1.0)*x1223*x1225))+x1225+(((-1.0)*r11*sj5*x1226))+((r12*r22))+(((-1.0)*cj5*r10*x1224))+((r10*r20*x1223)));
j4eval[0]=x1227;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1224))+(((-1.0)*sj0*x1226))))));
j4eval[2]=IKsign(x1227);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1228=cj5*cj5;
IkReal x1229=(r21*sj5);
IkReal x1230=(r11*r21);
IkReal x1231=((1.0)*cj5*r20);
CheckValue<IkReal> x1232 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1229))+(((-1.0)*sj0*x1231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1232.valid){
continue;
}
CheckValue<IkReal> x1233=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x1231))+x1230+((r12*r22))+(((-1.0)*cj5*r10*x1229))+(((-1.0)*x1228*x1230))+((r10*r20*x1228)))),-1);
if(!x1233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1232.value)+(((1.5707963267949)*(x1233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1234=IKsin(j4);
IkReal x1235=IKcos(j4);
IkReal x1236=(r11*sj5);
IkReal x1237=(cj5*r00);
IkReal x1238=(cj5*r10);
IkReal x1239=(r21*sj5);
IkReal x1240=(cj5*r20);
IkReal x1241=(r01*sj5);
IkReal x1242=((1.0)*x1235);
IkReal x1243=((1.0)*x1234);
evalcond[0]=(((x1234*x1239))+(((-1.0)*r22*x1242))+(((-1.0)*x1240*x1243)));
evalcond[1]=((((-1.0)*x1239*x1242))+(((-1.0)*r22*x1243))+((x1235*x1240)));
evalcond[2]=(((x1234*x1236))+cj0+(((-1.0)*r12*x1242))+(((-1.0)*x1238*x1243)));
evalcond[3]=((((-1.0)*r02*x1243))+cj0+((x1235*x1237))+(((-1.0)*x1241*x1242)));
evalcond[4]=(sj0+((x1235*x1238))+(((-1.0)*x1236*x1242))+(((-1.0)*r12*x1243)));
evalcond[5]=((((-1.0)*r02*x1242))+(((-1.0)*sj0))+(((-1.0)*x1237*x1243))+((x1234*x1241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1244=cj5*cj5;
IkReal x1245=((1.0)*r21);
IkReal x1246=(cj5*sj5);
IkReal x1247=((1.0)*r20);
CheckValue<IkReal> x1248 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1248.valid){
continue;
}
CheckValue<IkReal> x1249=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1244*x1245))+(((-1.0)*r00*x1245*x1246))+((r01*r21))+(((-1.0)*r01*x1246*x1247))+((r00*r20*x1244))+((r02*r22)))),-1);
if(!x1249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1248.value)+(((1.5707963267949)*(x1249.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1250=IKsin(j4);
IkReal x1251=IKcos(j4);
IkReal x1252=(r11*sj5);
IkReal x1253=(cj5*r00);
IkReal x1254=(cj5*r10);
IkReal x1255=(r21*sj5);
IkReal x1256=(cj5*r20);
IkReal x1257=(r01*sj5);
IkReal x1258=((1.0)*x1251);
IkReal x1259=((1.0)*x1250);
evalcond[0]=((((-1.0)*r22*x1258))+(((-1.0)*x1256*x1259))+((x1250*x1255)));
evalcond[1]=((((-1.0)*r22*x1259))+(((-1.0)*x1255*x1258))+((x1251*x1256)));
evalcond[2]=((((-1.0)*r12*x1258))+cj0+((x1250*x1252))+(((-1.0)*x1254*x1259)));
evalcond[3]=(cj0+(((-1.0)*x1257*x1258))+(((-1.0)*r02*x1259))+((x1251*x1253)));
evalcond[4]=((((-1.0)*r12*x1259))+sj0+(((-1.0)*x1252*x1258))+((x1251*x1254)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1253*x1259))+((x1250*x1257))+(((-1.0)*r02*x1258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1260=((1.0)*cj5);
CheckValue<IkReal> x1261=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1260)))),-1);
if(!x1261.valid){
continue;
}
CheckValue<IkReal> x1262 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1260)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1261.value)))+(x1262.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1263=IKsin(j4);
IkReal x1264=IKcos(j4);
IkReal x1265=(r11*sj5);
IkReal x1266=(cj5*r00);
IkReal x1267=(cj5*r10);
IkReal x1268=(r21*sj5);
IkReal x1269=(cj5*r20);
IkReal x1270=(r01*sj5);
IkReal x1271=((1.0)*x1264);
IkReal x1272=((1.0)*x1263);
evalcond[0]=((((-1.0)*r22*x1271))+(((-1.0)*x1269*x1272))+((x1263*x1268)));
evalcond[1]=((((-1.0)*x1268*x1271))+((x1264*x1269))+(((-1.0)*r22*x1272)));
evalcond[2]=(cj0+(((-1.0)*x1267*x1272))+(((-1.0)*r12*x1271))+((x1263*x1265)));
evalcond[3]=(cj0+((x1264*x1266))+(((-1.0)*x1270*x1271))+(((-1.0)*r02*x1272)));
evalcond[4]=(sj0+(((-1.0)*r12*x1272))+((x1264*x1267))+(((-1.0)*x1265*x1271)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1266*x1272))+(((-1.0)*r02*x1271))+((x1263*x1270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.492063434766163)*px))+(((2.12309223301616)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.12309223301616)*px))+(((0.492063434766163)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.492063434766163)*px))+(((2.12309223301616)*py))))+IKsqr(((((2.12309223301616)*px))+(((0.492063434766163)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.492063434766163)*px))+(((2.12309223301616)*py))), ((((2.12309223301616)*px))+(((0.492063434766163)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1273=IKcos(j0);
IkReal x1274=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.1036)*x1274))+(((0.447)*x1273)));
evalcond[1]=((((-1.0)*py))+(((0.1036)*x1273))+(((0.447)*x1274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1275=((1.0)*cj5);
IkReal x1276=((((-1.0)*r01*x1275))+(((-1.0)*r00*sj5)));
j4eval[0]=x1276;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1275))))));
j4eval[2]=IKsign(x1276);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1277=cj5*cj5;
IkReal x1278=((1.0)*r21);
IkReal x1279=(cj5*sj5);
IkReal x1280=((1.0)*r20);
IkReal x1281=(((r01*r21))+((r00*r20*x1277))+(((-1.0)*r01*x1277*x1278))+(((-1.0)*r00*x1278*x1279))+((r02*r22))+(((-1.0)*r01*x1279*x1280)));
j4eval[0]=x1281;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1280)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1281);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1282=cj5*cj5;
IkReal x1283=(r21*sj5);
IkReal x1284=(r11*r21);
IkReal x1285=((1.0)*cj5*r20);
IkReal x1286=(x1284+((r10*r20*x1282))+((r12*r22))+(((-1.0)*x1282*x1284))+(((-1.0)*r11*sj5*x1285))+(((-1.0)*cj5*r10*x1283)));
j4eval[0]=x1286;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1283))+(((-1.0)*sj0*x1285))))));
j4eval[2]=IKsign(x1286);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1287=cj5*cj5;
IkReal x1288=(r21*sj5);
IkReal x1289=(r11*r21);
IkReal x1290=((1.0)*cj5*r20);
CheckValue<IkReal> x1291 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1290))+((sj0*x1288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1291.valid){
continue;
}
CheckValue<IkReal> x1292=IKPowWithIntegerCheck(IKsign((x1289+((r10*r20*x1287))+((r12*r22))+(((-1.0)*x1287*x1289))+(((-1.0)*cj5*r10*x1288))+(((-1.0)*r11*sj5*x1290)))),-1);
if(!x1292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1291.value)+(((1.5707963267949)*(x1292.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1293=IKsin(j4);
IkReal x1294=IKcos(j4);
IkReal x1295=(r11*sj5);
IkReal x1296=(cj5*r00);
IkReal x1297=(cj5*r10);
IkReal x1298=(r21*sj5);
IkReal x1299=(cj5*r20);
IkReal x1300=(r01*sj5);
IkReal x1301=((1.0)*x1294);
IkReal x1302=((1.0)*x1293);
evalcond[0]=((((-1.0)*x1299*x1302))+(((-1.0)*r22*x1301))+((x1293*x1298)));
evalcond[1]=((((-1.0)*r22*x1302))+((x1294*x1299))+(((-1.0)*x1298*x1301)));
evalcond[2]=(cj0+(((-1.0)*x1297*x1302))+((x1293*x1295))+(((-1.0)*r12*x1301)));
evalcond[3]=(cj0+((x1294*x1296))+(((-1.0)*r02*x1302))+(((-1.0)*x1300*x1301)));
evalcond[4]=(sj0+((x1294*x1297))+(((-1.0)*r12*x1302))+(((-1.0)*x1295*x1301)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1301))+(((-1.0)*x1296*x1302))+((x1293*x1300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1303=cj5*cj5;
IkReal x1304=((1.0)*r21);
IkReal x1305=(cj5*sj5);
IkReal x1306=((1.0)*r20);
CheckValue<IkReal> x1307 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1307.valid){
continue;
}
CheckValue<IkReal> x1308=IKPowWithIntegerCheck(IKsign((((r00*r20*x1303))+(((-1.0)*r01*x1303*x1304))+(((-1.0)*r01*x1305*x1306))+((r01*r21))+(((-1.0)*r00*x1304*x1305))+((r02*r22)))),-1);
if(!x1308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1307.value)+(((1.5707963267949)*(x1308.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1309=IKsin(j4);
IkReal x1310=IKcos(j4);
IkReal x1311=(r11*sj5);
IkReal x1312=(cj5*r00);
IkReal x1313=(cj5*r10);
IkReal x1314=(r21*sj5);
IkReal x1315=(cj5*r20);
IkReal x1316=(r01*sj5);
IkReal x1317=((1.0)*x1310);
IkReal x1318=((1.0)*x1309);
evalcond[0]=((((-1.0)*x1315*x1318))+(((-1.0)*r22*x1317))+((x1309*x1314)));
evalcond[1]=(((x1310*x1315))+(((-1.0)*r22*x1318))+(((-1.0)*x1314*x1317)));
evalcond[2]=((((-1.0)*x1313*x1318))+cj0+((x1309*x1311))+(((-1.0)*r12*x1317)));
evalcond[3]=(((x1310*x1312))+cj0+(((-1.0)*r02*x1318))+(((-1.0)*x1316*x1317)));
evalcond[4]=((((-1.0)*x1311*x1317))+((x1310*x1313))+sj0+(((-1.0)*r12*x1318)));
evalcond[5]=((((-1.0)*sj0))+((x1309*x1316))+(((-1.0)*r02*x1317))+(((-1.0)*x1312*x1318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1319=((1.0)*cj5);
CheckValue<IkReal> x1320 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1319)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1320.valid){
continue;
}
CheckValue<IkReal> x1321=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1319))+(((-1.0)*r00*sj5)))),-1);
if(!x1321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1320.value)+(((1.5707963267949)*(x1321.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1322=IKsin(j4);
IkReal x1323=IKcos(j4);
IkReal x1324=(r11*sj5);
IkReal x1325=(cj5*r00);
IkReal x1326=(cj5*r10);
IkReal x1327=(r21*sj5);
IkReal x1328=(cj5*r20);
IkReal x1329=(r01*sj5);
IkReal x1330=((1.0)*x1323);
IkReal x1331=((1.0)*x1322);
evalcond[0]=((((-1.0)*x1328*x1331))+(((-1.0)*r22*x1330))+((x1322*x1327)));
evalcond[1]=((((-1.0)*x1327*x1330))+((x1323*x1328))+(((-1.0)*r22*x1331)));
evalcond[2]=((((-1.0)*x1326*x1331))+cj0+((x1322*x1324))+(((-1.0)*r12*x1330)));
evalcond[3]=(cj0+((x1323*x1325))+(((-1.0)*x1329*x1330))+(((-1.0)*r02*x1331)));
evalcond[4]=(sj0+(((-1.0)*x1324*x1330))+((x1323*x1326))+(((-1.0)*r12*x1331)));
evalcond[5]=((((-1.0)*x1325*x1331))+(((-1.0)*sj0))+((x1322*x1329))+(((-1.0)*r02*x1330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.492063434766163)*px))+(((-2.12309223301616)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.12309223301616)*px))+(((0.492063434766163)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.492063434766163)*px))+(((-2.12309223301616)*py))))+IKsqr(((((-2.12309223301616)*px))+(((0.492063434766163)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.492063434766163)*px))+(((-2.12309223301616)*py))), ((((-2.12309223301616)*px))+(((0.492063434766163)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1332=IKcos(j0);
IkReal x1333=IKsin(j0);
evalcond[0]=((((-0.1036)*x1333))+(((-1.0)*px))+(((-0.447)*x1332)));
evalcond[1]=((((-1.0)*py))+(((-0.447)*x1333))+(((0.1036)*x1332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1334=((1.0)*cj5);
IkReal x1335=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1334)));
j4eval[0]=x1335;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1334)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1335);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1336=((1.0)*cj5);
IkReal x1337=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1336)));
j4eval[0]=x1337;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1336))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1337);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1338=cj5*cj5;
IkReal x1339=((1.0)*sj5);
IkReal x1340=(cj5*r20);
IkReal x1341=(r11*r21);
IkReal x1342=(x1341+((r10*r20*x1338))+((r12*r22))+(((-1.0)*r11*x1339*x1340))+(((-1.0)*cj5*r10*r21*x1339))+(((-1.0)*x1338*x1341)));
j4eval[0]=x1342;
j4eval[1]=IKsign(x1342);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1339))+((cj0*x1340))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1343=cj5*cj5;
IkReal x1344=((1.0)*sj5);
IkReal x1345=(cj5*r20);
IkReal x1346=(r11*r21);
CheckValue<IkReal> x1347 = IKatan2WithCheck(IkReal((((cj0*x1345))+(((-1.0)*cj0*r21*x1344)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1347.valid){
continue;
}
CheckValue<IkReal> x1348=IKPowWithIntegerCheck(IKsign((x1346+(((-1.0)*cj5*r10*r21*x1344))+((r12*r22))+(((-1.0)*r11*x1344*x1345))+((r10*r20*x1343))+(((-1.0)*x1343*x1346)))),-1);
if(!x1348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1347.value)+(((1.5707963267949)*(x1348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1349=IKsin(j4);
IkReal x1350=IKcos(j4);
IkReal x1351=((1.0)*sj0);
IkReal x1352=(cj5*r00);
IkReal x1353=(r11*sj5);
IkReal x1354=(cj5*r10);
IkReal x1355=(r21*sj5);
IkReal x1356=(cj5*r20);
IkReal x1357=(r01*sj5);
IkReal x1358=((1.0)*x1350);
IkReal x1359=((1.0)*x1349);
evalcond[0]=((((-1.0)*r22*x1358))+((x1349*x1355))+(((-1.0)*x1356*x1359)));
evalcond[1]=((((-1.0)*x1355*x1358))+(((-1.0)*r22*x1359))+((x1350*x1356)));
evalcond[2]=((((-1.0)*r12*x1358))+cj0+(((-1.0)*x1354*x1359))+((x1349*x1353)));
evalcond[3]=((((-1.0)*x1351))+(((-1.0)*x1352*x1359))+(((-1.0)*r02*x1358))+((x1349*x1357)));
evalcond[4]=((((-1.0)*r02*x1359))+((x1350*x1352))+(((-1.0)*x1357*x1358))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1351))+(((-1.0)*r12*x1359))+((x1350*x1354))+(((-1.0)*x1353*x1358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1360=((1.0)*cj5);
CheckValue<IkReal> x1361=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1360))+(((-1.0)*r10*sj5)))),-1);
if(!x1361.valid){
continue;
}
CheckValue<IkReal> x1362 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1361.value)))+(x1362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1363=IKsin(j4);
IkReal x1364=IKcos(j4);
IkReal x1365=((1.0)*sj0);
IkReal x1366=(cj5*r00);
IkReal x1367=(r11*sj5);
IkReal x1368=(cj5*r10);
IkReal x1369=(r21*sj5);
IkReal x1370=(cj5*r20);
IkReal x1371=(r01*sj5);
IkReal x1372=((1.0)*x1364);
IkReal x1373=((1.0)*x1363);
evalcond[0]=(((x1363*x1369))+(((-1.0)*x1370*x1373))+(((-1.0)*r22*x1372)));
evalcond[1]=((((-1.0)*r22*x1373))+(((-1.0)*x1369*x1372))+((x1364*x1370)));
evalcond[2]=(cj0+((x1363*x1367))+(((-1.0)*r12*x1372))+(((-1.0)*x1368*x1373)));
evalcond[3]=((((-1.0)*r02*x1372))+(((-1.0)*x1366*x1373))+((x1363*x1371))+(((-1.0)*x1365)));
evalcond[4]=((((-1.0)*x1371*x1372))+(((-1.0)*r02*x1373))+((x1364*x1366))+(((-1.0)*cj0)));
evalcond[5]=(((x1364*x1368))+(((-1.0)*r12*x1373))+(((-1.0)*x1367*x1372))+(((-1.0)*x1365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1374=((1.0)*cj5);
CheckValue<IkReal> x1375=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1374))+(((-1.0)*r00*sj5)))),-1);
if(!x1375.valid){
continue;
}
CheckValue<IkReal> x1376 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1374)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1375.value)))+(x1376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1377=IKsin(j4);
IkReal x1378=IKcos(j4);
IkReal x1379=((1.0)*sj0);
IkReal x1380=(cj5*r00);
IkReal x1381=(r11*sj5);
IkReal x1382=(cj5*r10);
IkReal x1383=(r21*sj5);
IkReal x1384=(cj5*r20);
IkReal x1385=(r01*sj5);
IkReal x1386=((1.0)*x1378);
IkReal x1387=((1.0)*x1377);
evalcond[0]=((((-1.0)*x1384*x1387))+((x1377*x1383))+(((-1.0)*r22*x1386)));
evalcond[1]=((((-1.0)*x1383*x1386))+(((-1.0)*r22*x1387))+((x1378*x1384)));
evalcond[2]=((((-1.0)*r12*x1386))+cj0+(((-1.0)*x1382*x1387))+((x1377*x1381)));
evalcond[3]=((((-1.0)*r02*x1386))+(((-1.0)*x1379))+(((-1.0)*x1380*x1387))+((x1377*x1385)));
evalcond[4]=((((-1.0)*r02*x1387))+((x1378*x1380))+(((-1.0)*cj0))+(((-1.0)*x1385*x1386)));
evalcond[5]=((((-1.0)*r12*x1387))+(((-1.0)*x1379))+(((-1.0)*x1381*x1386))+((x1378*x1382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.126505927291133)*px))+(((1.09776861616534)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.126505927291133)*py))+(((1.09776861616534)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.126505927291133)*px))+(((1.09776861616534)*py))))+IKsqr(((((0.126505927291133)*py))+(((1.09776861616534)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.126505927291133)*px))+(((1.09776861616534)*py))), ((((0.126505927291133)*py))+(((1.09776861616534)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1388=IKsin(j0);
IkReal x1389=IKcos(j0);
evalcond[0]=((((0.899)*x1389))+(((-1.0)*px))+(((-0.1036)*x1388)));
evalcond[1]=((((0.1036)*x1389))+(((0.899)*x1388))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1390=((1.0)*cj5);
IkReal x1391=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1390)));
j4eval[0]=x1391;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1390))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1391);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1392=cj5*cj5;
IkReal x1393=((1.0)*r21);
IkReal x1394=(cj5*sj5);
IkReal x1395=((1.0)*r20);
IkReal x1396=((((-1.0)*r01*x1394*x1395))+(((-1.0)*r01*x1392*x1393))+((r01*r21))+(((-1.0)*r00*x1393*x1394))+((r02*r22))+((r00*r20*x1392)));
j4eval[0]=x1396;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1395)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1396);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1397=cj5*cj5;
IkReal x1398=(r21*sj5);
IkReal x1399=(r11*r21);
IkReal x1400=((1.0)*cj5*r20);
IkReal x1401=(x1399+(((-1.0)*r11*sj5*x1400))+((r12*r22))+((r10*r20*x1397))+(((-1.0)*x1397*x1399))+(((-1.0)*cj5*r10*x1398)));
j4eval[0]=x1401;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1400))+((sj0*x1398))))));
j4eval[2]=IKsign(x1401);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1402=cj5*cj5;
IkReal x1403=(r21*sj5);
IkReal x1404=(r11*r21);
IkReal x1405=((1.0)*cj5*r20);
CheckValue<IkReal> x1406 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1405))+((sj0*x1403)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1406.valid){
continue;
}
CheckValue<IkReal> x1407=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1403))+(((-1.0)*r11*sj5*x1405))+((r10*r20*x1402))+((r12*r22))+(((-1.0)*x1402*x1404))+x1404)),-1);
if(!x1407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1406.value)+(((1.5707963267949)*(x1407.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1408=IKsin(j4);
IkReal x1409=IKcos(j4);
IkReal x1410=(r11*sj5);
IkReal x1411=(cj5*r00);
IkReal x1412=(cj5*r10);
IkReal x1413=(r21*sj5);
IkReal x1414=(cj5*r20);
IkReal x1415=(r01*sj5);
IkReal x1416=((1.0)*x1409);
IkReal x1417=((1.0)*x1408);
evalcond[0]=((((-1.0)*r22*x1416))+(((-1.0)*x1414*x1417))+((x1408*x1413)));
evalcond[1]=((((-1.0)*x1413*x1416))+(((-1.0)*r22*x1417))+((x1409*x1414)));
evalcond[2]=(cj0+(((-1.0)*x1412*x1417))+(((-1.0)*r12*x1416))+((x1408*x1410)));
evalcond[3]=((((-1.0)*x1415*x1416))+cj0+(((-1.0)*r02*x1417))+((x1409*x1411)));
evalcond[4]=(sj0+(((-1.0)*x1410*x1416))+(((-1.0)*r12*x1417))+((x1409*x1412)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1416))+(((-1.0)*x1411*x1417))+((x1408*x1415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1418=cj5*cj5;
IkReal x1419=((1.0)*r21);
IkReal x1420=(cj5*sj5);
IkReal x1421=((1.0)*r20);
CheckValue<IkReal> x1422 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1421)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1422.valid){
continue;
}
CheckValue<IkReal> x1423=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1420*x1421))+(((-1.0)*r00*x1419*x1420))+((r01*r21))+((r00*r20*x1418))+((r02*r22))+(((-1.0)*r01*x1418*x1419)))),-1);
if(!x1423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1422.value)+(((1.5707963267949)*(x1423.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1424=IKsin(j4);
IkReal x1425=IKcos(j4);
IkReal x1426=(r11*sj5);
IkReal x1427=(cj5*r00);
IkReal x1428=(cj5*r10);
IkReal x1429=(r21*sj5);
IkReal x1430=(cj5*r20);
IkReal x1431=(r01*sj5);
IkReal x1432=((1.0)*x1425);
IkReal x1433=((1.0)*x1424);
evalcond[0]=(((x1424*x1429))+(((-1.0)*r22*x1432))+(((-1.0)*x1430*x1433)));
evalcond[1]=((((-1.0)*x1429*x1432))+(((-1.0)*r22*x1433))+((x1425*x1430)));
evalcond[2]=(((x1424*x1426))+(((-1.0)*r12*x1432))+cj0+(((-1.0)*x1428*x1433)));
evalcond[3]=(((x1425*x1427))+cj0+(((-1.0)*x1431*x1432))+(((-1.0)*r02*x1433)));
evalcond[4]=(((x1425*x1428))+(((-1.0)*r12*x1433))+sj0+(((-1.0)*x1426*x1432)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1432))+((x1424*x1431))+(((-1.0)*x1427*x1433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1434=((1.0)*cj5);
CheckValue<IkReal> x1435 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1434)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1435.valid){
continue;
}
CheckValue<IkReal> x1436=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1434)))),-1);
if(!x1436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1435.value)+(((1.5707963267949)*(x1436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1437=IKsin(j4);
IkReal x1438=IKcos(j4);
IkReal x1439=(r11*sj5);
IkReal x1440=(cj5*r00);
IkReal x1441=(cj5*r10);
IkReal x1442=(r21*sj5);
IkReal x1443=(cj5*r20);
IkReal x1444=(r01*sj5);
IkReal x1445=((1.0)*x1438);
IkReal x1446=((1.0)*x1437);
evalcond[0]=(((x1437*x1442))+(((-1.0)*r22*x1445))+(((-1.0)*x1443*x1446)));
evalcond[1]=(((x1438*x1443))+(((-1.0)*r22*x1446))+(((-1.0)*x1442*x1445)));
evalcond[2]=(cj0+((x1437*x1439))+(((-1.0)*r12*x1445))+(((-1.0)*x1441*x1446)));
evalcond[3]=(((x1438*x1440))+cj0+(((-1.0)*x1444*x1445))+(((-1.0)*r02*x1446)));
evalcond[4]=(((x1438*x1441))+sj0+(((-1.0)*r12*x1446))+(((-1.0)*x1439*x1445)));
evalcond[5]=(((x1437*x1444))+(((-1.0)*sj0))+(((-1.0)*r02*x1445))+(((-1.0)*x1440*x1446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-9.63007856508111)*px))+(((0.464772131519359)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((9.63007856508111)*py))+(((0.464772131519359)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-9.63007856508111)*px))+(((0.464772131519359)*py))))+IKsqr(((((9.63007856508111)*py))+(((0.464772131519359)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-9.63007856508111)*px))+(((0.464772131519359)*py))), ((((9.63007856508111)*py))+(((0.464772131519359)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1447=IKcos(j0);
IkReal x1448=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.005)*x1447))+(((-0.1036)*x1448)));
evalcond[1]=((((-1.0)*py))+(((0.005)*x1448))+(((0.1036)*x1447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1449=((1.0)*cj5);
IkReal x1450=((((-1.0)*r01*x1449))+(((-1.0)*r00*sj5)));
j4eval[0]=x1450;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1449))))));
j4eval[2]=IKsign(x1450);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1451=((1.0)*cj5);
IkReal x1452=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1451)));
j4eval[0]=x1452;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1451))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1452);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1453=cj5*cj5;
IkReal x1454=((1.0)*sj5);
IkReal x1455=(cj5*r20);
IkReal x1456=(r11*r21);
IkReal x1457=(((r10*r20*x1453))+((r12*r22))+x1456+(((-1.0)*r11*x1454*x1455))+(((-1.0)*x1453*x1456))+(((-1.0)*cj5*r10*r21*x1454)));
j4eval[0]=x1457;
j4eval[1]=IKsign(x1457);
j4eval[2]=((IKabs((((cj0*x1455))+(((-1.0)*cj0*r21*x1454)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1458=cj5*cj5;
IkReal x1459=((1.0)*sj5);
IkReal x1460=(cj5*r20);
IkReal x1461=(r11*r21);
CheckValue<IkReal> x1462 = IKatan2WithCheck(IkReal((((cj0*x1460))+(((-1.0)*cj0*r21*x1459)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1462.valid){
continue;
}
CheckValue<IkReal> x1463=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1459*x1460))+((r10*r20*x1458))+((r12*r22))+x1461+(((-1.0)*x1458*x1461))+(((-1.0)*cj5*r10*r21*x1459)))),-1);
if(!x1463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1462.value)+(((1.5707963267949)*(x1463.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1464=IKsin(j4);
IkReal x1465=IKcos(j4);
IkReal x1466=((1.0)*sj0);
IkReal x1467=(cj5*r00);
IkReal x1468=(r11*sj5);
IkReal x1469=(cj5*r10);
IkReal x1470=(r21*sj5);
IkReal x1471=(cj5*r20);
IkReal x1472=(r01*sj5);
IkReal x1473=((1.0)*x1465);
IkReal x1474=((1.0)*x1464);
evalcond[0]=((((-1.0)*r22*x1473))+(((-1.0)*x1471*x1474))+((x1464*x1470)));
evalcond[1]=((((-1.0)*r22*x1474))+(((-1.0)*x1470*x1473))+((x1465*x1471)));
evalcond[2]=(cj0+(((-1.0)*r12*x1473))+((x1464*x1468))+(((-1.0)*x1469*x1474)));
evalcond[3]=((((-1.0)*x1466))+(((-1.0)*x1467*x1474))+(((-1.0)*r02*x1473))+((x1464*x1472)));
evalcond[4]=(((x1465*x1467))+(((-1.0)*r02*x1474))+(((-1.0)*x1472*x1473))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1466))+((x1465*x1469))+(((-1.0)*r12*x1474))+(((-1.0)*x1468*x1473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1475=((1.0)*cj5);
CheckValue<IkReal> x1476=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1475)))),-1);
if(!x1476.valid){
continue;
}
CheckValue<IkReal> x1477 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1475))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1476.value)))+(x1477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1478=IKsin(j4);
IkReal x1479=IKcos(j4);
IkReal x1480=((1.0)*sj0);
IkReal x1481=(cj5*r00);
IkReal x1482=(r11*sj5);
IkReal x1483=(cj5*r10);
IkReal x1484=(r21*sj5);
IkReal x1485=(cj5*r20);
IkReal x1486=(r01*sj5);
IkReal x1487=((1.0)*x1479);
IkReal x1488=((1.0)*x1478);
evalcond[0]=((((-1.0)*x1485*x1488))+(((-1.0)*r22*x1487))+((x1478*x1484)));
evalcond[1]=((((-1.0)*x1484*x1487))+(((-1.0)*r22*x1488))+((x1479*x1485)));
evalcond[2]=(cj0+(((-1.0)*r12*x1487))+(((-1.0)*x1483*x1488))+((x1478*x1482)));
evalcond[3]=((((-1.0)*x1480))+(((-1.0)*x1481*x1488))+(((-1.0)*r02*x1487))+((x1478*x1486)));
evalcond[4]=((((-1.0)*x1486*x1487))+(((-1.0)*r02*x1488))+(((-1.0)*cj0))+((x1479*x1481)));
evalcond[5]=((((-1.0)*x1482*x1487))+(((-1.0)*r12*x1488))+(((-1.0)*x1480))+((x1479*x1483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1489=((1.0)*cj5);
CheckValue<IkReal> x1490 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1489)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1490.valid){
continue;
}
CheckValue<IkReal> x1491=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1489))+(((-1.0)*r00*sj5)))),-1);
if(!x1491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1490.value)+(((1.5707963267949)*(x1491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1492=IKsin(j4);
IkReal x1493=IKcos(j4);
IkReal x1494=((1.0)*sj0);
IkReal x1495=(cj5*r00);
IkReal x1496=(r11*sj5);
IkReal x1497=(cj5*r10);
IkReal x1498=(r21*sj5);
IkReal x1499=(cj5*r20);
IkReal x1500=(r01*sj5);
IkReal x1501=((1.0)*x1493);
IkReal x1502=((1.0)*x1492);
evalcond[0]=((((-1.0)*x1499*x1502))+(((-1.0)*r22*x1501))+((x1492*x1498)));
evalcond[1]=((((-1.0)*x1498*x1501))+(((-1.0)*r22*x1502))+((x1493*x1499)));
evalcond[2]=(cj0+((x1492*x1496))+(((-1.0)*x1497*x1502))+(((-1.0)*r12*x1501)));
evalcond[3]=(((x1492*x1500))+(((-1.0)*x1494))+(((-1.0)*r02*x1501))+(((-1.0)*x1495*x1502)));
evalcond[4]=((((-1.0)*r02*x1502))+((x1493*x1495))+(((-1.0)*x1500*x1501))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1494))+((x1493*x1497))+(((-1.0)*x1496*x1501))+(((-1.0)*r12*x1502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1503=(cj5*r01);
IkReal x1504=(r00*sj5);
IkReal x1505=(cj1*cj2);
IkReal x1506=((2500.0)*px);
IkReal x1507=((1130.0)*sj1);
IkReal x1508=(sj1*sj2);
IkReal x1509=((283.5)*x1508);
IkReal x1510=((1117.5)*cj2*sj1);
IkReal x1511=((1117.5)*cj1*sj2);
CheckValue<IkReal> x1512=IKPowWithIntegerCheck(((((-259.0)*x1508))+(((259.0)*x1505))),-1);
if(!x1512.valid){
continue;
}
CheckValue<IkReal> x1513=IKPowWithIntegerCheck(((((-1.0)*x1508))+x1505),-1);
if(!x1513.valid){
continue;
}
if( IKabs(((x1512.value)*(((((-283.5)*x1504*x1505))+(((-1.0)*x1504*x1507))+(((-1.0)*x1504*x1510))+(((-1.0)*x1504*x1511))+((x1504*x1509))+((x1506*x1508))+(((-283.5)*x1503*x1505))+((x1503*x1509))+(((-1.0)*x1503*x1507))+(((-1.0)*x1503*x1510))+(((-1.0)*x1503*x1511))+(((-1.0)*x1505*x1506)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1513.value)*((x1503+x1504)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1512.value)*(((((-283.5)*x1504*x1505))+(((-1.0)*x1504*x1507))+(((-1.0)*x1504*x1510))+(((-1.0)*x1504*x1511))+((x1504*x1509))+((x1506*x1508))+(((-283.5)*x1503*x1505))+((x1503*x1509))+(((-1.0)*x1503*x1507))+(((-1.0)*x1503*x1510))+(((-1.0)*x1503*x1511))+(((-1.0)*x1505*x1506))))))+IKsqr(((x1513.value)*((x1503+x1504))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1512.value)*(((((-283.5)*x1504*x1505))+(((-1.0)*x1504*x1507))+(((-1.0)*x1504*x1510))+(((-1.0)*x1504*x1511))+((x1504*x1509))+((x1506*x1508))+(((-283.5)*x1503*x1505))+((x1503*x1509))+(((-1.0)*x1503*x1507))+(((-1.0)*x1503*x1510))+(((-1.0)*x1503*x1511))+(((-1.0)*x1505*x1506))))), ((x1513.value)*((x1503+x1504))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1514=IKcos(j0);
IkReal x1515=IKsin(j0);
IkReal x1516=((0.447)*cj2);
IkReal x1517=(r00*sj5);
IkReal x1518=((1.0)*sj2);
IkReal x1519=(cj1*cj2);
IkReal x1520=((1.0)*cj5);
IkReal x1521=(r10*sj5);
IkReal x1522=((0.1134)*cj5);
IkReal x1523=(sj1*x1515);
IkReal x1524=(sj1*x1514);
IkReal x1525=((0.447)*cj1*sj2);
evalcond[0]=(((x1514*x1519))+(((-1.0)*x1517))+(((-1.0)*r01*x1520))+(((-1.0)*x1518*x1524)));
evalcond[1]=((((-1.0)*r11*x1520))+(((-1.0)*x1518*x1523))+((x1515*x1519))+(((-1.0)*x1521)));
evalcond[2]=((((-1.0)*r01*x1522))+(((-1.0)*x1514*x1525))+(((-1.0)*px))+(((-0.452)*x1524))+(((-0.1134)*x1517))+(((-1.0)*x1516*x1524))+(((-0.1036)*x1515)));
evalcond[3]=((((-1.0)*r11*x1522))+(((0.1036)*x1514))+(((-1.0)*x1515*x1525))+(((-1.0)*py))+(((-0.452)*x1523))+(((-0.1134)*x1521))+(((-1.0)*x1516*x1523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1526=((1.0)*cj5);
IkReal x1527=((((-1.0)*r01*x1526))+(((-1.0)*r00*sj5)));
j4eval[0]=x1527;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1526))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1527);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1528=((1.0)*cj5);
IkReal x1529=((((-1.0)*r11*x1528))+(((-1.0)*r10*sj5)));
j4eval[0]=x1529;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1528)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1530=((1.0)*sj0);
IkReal x1531=((1.0)*cj0);
IkReal x1532=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1532;
j4eval[1]=((IKabs(((((-1.0)*r12*x1530))+(((-1.0)*r02*x1531)))))+(IKabs(((((-1.0)*r01*sj5*x1531))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1530))))));
j4eval[2]=IKsign(x1532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1533=((-1.0)*r20);
IkReal x1535 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1535)==0){
continue;
}
IkReal x1534=pow(x1535,-0.5);
CheckValue<IkReal> x1536 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1533),IKFAST_ATAN2_MAGTHRESH);
if(!x1536.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1536.value));
IkReal gconst79=(r21*x1534);
IkReal gconst80=(x1533*x1534);
CheckValue<IkReal> x1537 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1537.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1537.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1538=((-1.0)*r20);
IkReal x1539=x1534;
CheckValue<IkReal> x1541 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1538),IKFAST_ATAN2_MAGTHRESH);
if(!x1541.valid){
continue;
}
IkReal x1540=((-1.0)*(x1541.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1540;
IkReal gconst78=x1540;
IkReal gconst79=(r21*x1539);
IkReal gconst80=(x1538*x1539);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1542=((-1.0)*r20);
IkReal x1543=x1534;
CheckValue<IkReal> x1545 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1542),IKFAST_ATAN2_MAGTHRESH);
if(!x1545.valid){
continue;
}
IkReal x1544=((-1.0)*(x1545.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1544;
IkReal gconst78=x1544;
IkReal gconst79=(r21*x1543);
IkReal gconst80=(x1542*x1543);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1546=((-1.0)*r20);
IkReal x1547=x1534;
CheckValue<IkReal> x1549 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1546),IKFAST_ATAN2_MAGTHRESH);
if(!x1549.valid){
continue;
}
IkReal x1548=((-1.0)*(x1549.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1548;
IkReal gconst78=x1548;
IkReal gconst79=(r21*x1547);
IkReal gconst80=(x1546*x1547);
IkReal x1550=r22*r22;
CheckValue<IkReal> x1553=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1550))),-1);
if(!x1553.valid){
continue;
}
IkReal x1551=x1553.value;
IkReal x1552=(((x1551*(r21*r21*r21*r21)))+(((2.0)*x1551*(r20*r20)*(r21*r21)))+x1550+((x1551*(r20*r20*r20*r20))));
j4eval[0]=x1552;
j4eval[1]=IKsign(x1552);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1554=(sj1*sj2);
IkReal x1555=(gconst80*r20);
IkReal x1556=(gconst79*r21);
IkReal x1557=(cj1*cj2);
CheckValue<IkReal> x1558 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1557))+((r22*x1554)))),IkReal((((x1555*x1557))+((x1554*x1556))+(((-1.0)*x1556*x1557))+(((-1.0)*x1554*x1555)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1558.valid){
continue;
}
CheckValue<IkReal> x1559=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x1555*x1556))+(x1555*x1555)+(x1556*x1556))),-1);
if(!x1559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1558.value)+(((1.5707963267949)*(x1559.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1560=IKsin(j4);
IkReal x1561=IKcos(j4);
IkReal x1562=(gconst79*r01);
IkReal x1563=(gconst79*r21);
IkReal x1564=((1.0)*cj2);
IkReal x1565=(gconst79*r11);
IkReal x1566=((1.0)*sj0);
IkReal x1567=(cj1*sj2);
IkReal x1568=((1.0)*x1561);
IkReal x1569=(gconst80*x1561);
IkReal x1570=((1.0)*x1560);
IkReal x1571=(gconst80*x1570);
evalcond[0]=(((x1560*x1563))+(((-1.0)*r22*x1568))+(((-1.0)*r20*x1571)));
evalcond[1]=(((x1560*x1565))+cj0+(((-1.0)*r10*x1571))+(((-1.0)*r12*x1568)));
evalcond[2]=(((x1560*x1562))+(((-1.0)*r02*x1568))+(((-1.0)*r00*x1571))+(((-1.0)*x1566)));
evalcond[3]=(((r20*x1569))+((sj1*sj2))+(((-1.0)*cj1*x1564))+(((-1.0)*r22*x1570))+(((-1.0)*x1563*x1568)));
evalcond[4]=((((-1.0)*cj0*x1567))+(((-1.0)*r02*x1570))+(((-1.0)*x1562*x1568))+(((-1.0)*cj0*sj1*x1564))+((r00*x1569)));
evalcond[5]=((((-1.0)*sj0*sj1*x1564))+(((-1.0)*x1565*x1568))+(((-1.0)*x1566*x1567))+((r10*x1569))+(((-1.0)*r12*x1570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1572=((1.0)*gconst80);
CheckValue<IkReal> x1573 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1572))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1573.valid){
continue;
}
CheckValue<IkReal> x1574=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x1572)))),-1);
if(!x1574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1573.value)+(((1.5707963267949)*(x1574.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1575=IKsin(j4);
IkReal x1576=IKcos(j4);
IkReal x1577=(gconst79*r01);
IkReal x1578=(gconst79*r21);
IkReal x1579=((1.0)*cj2);
IkReal x1580=(gconst79*r11);
IkReal x1581=((1.0)*sj0);
IkReal x1582=(cj1*sj2);
IkReal x1583=((1.0)*x1576);
IkReal x1584=(gconst80*x1576);
IkReal x1585=((1.0)*x1575);
IkReal x1586=(gconst80*x1585);
evalcond[0]=(((x1575*x1578))+(((-1.0)*r22*x1583))+(((-1.0)*r20*x1586)));
evalcond[1]=(cj0+((x1575*x1580))+(((-1.0)*r12*x1583))+(((-1.0)*r10*x1586)));
evalcond[2]=((((-1.0)*x1581))+(((-1.0)*r02*x1583))+((x1575*x1577))+(((-1.0)*r00*x1586)));
evalcond[3]=((((-1.0)*x1578*x1583))+((r20*x1584))+((sj1*sj2))+(((-1.0)*cj1*x1579))+(((-1.0)*r22*x1585)));
evalcond[4]=((((-1.0)*cj0*x1582))+(((-1.0)*x1577*x1583))+(((-1.0)*r02*x1585))+(((-1.0)*cj0*sj1*x1579))+((r00*x1584)));
evalcond[5]=((((-1.0)*x1580*x1583))+(((-1.0)*x1581*x1582))+((r10*x1584))+(((-1.0)*r12*x1585))+(((-1.0)*sj0*sj1*x1579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1587=((1.0)*gconst80);
CheckValue<IkReal> x1588 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1587))+((cj0*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1588.valid){
continue;
}
CheckValue<IkReal> x1589=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1587)))),-1);
if(!x1589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1588.value)+(((1.5707963267949)*(x1589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1590=IKsin(j4);
IkReal x1591=IKcos(j4);
IkReal x1592=(gconst79*r01);
IkReal x1593=(gconst79*r21);
IkReal x1594=((1.0)*cj2);
IkReal x1595=(gconst79*r11);
IkReal x1596=((1.0)*sj0);
IkReal x1597=(cj1*sj2);
IkReal x1598=((1.0)*x1591);
IkReal x1599=(gconst80*x1591);
IkReal x1600=((1.0)*x1590);
IkReal x1601=(gconst80*x1600);
evalcond[0]=(((x1590*x1593))+(((-1.0)*r20*x1601))+(((-1.0)*r22*x1598)));
evalcond[1]=(((x1590*x1595))+cj0+(((-1.0)*r10*x1601))+(((-1.0)*r12*x1598)));
evalcond[2]=((((-1.0)*x1596))+((x1590*x1592))+(((-1.0)*r02*x1598))+(((-1.0)*r00*x1601)));
evalcond[3]=(((r20*x1599))+(((-1.0)*x1593*x1598))+((sj1*sj2))+(((-1.0)*r22*x1600))+(((-1.0)*cj1*x1594)));
evalcond[4]=(((r00*x1599))+(((-1.0)*x1592*x1598))+(((-1.0)*cj0*x1597))+(((-1.0)*r02*x1600))+(((-1.0)*cj0*sj1*x1594)));
evalcond[5]=((((-1.0)*sj0*sj1*x1594))+(((-1.0)*x1595*x1598))+(((-1.0)*r12*x1600))+((r10*x1599))+(((-1.0)*x1596*x1597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1602=((-1.0)*r21);
IkReal x1604 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1604)==0){
continue;
}
IkReal x1603=pow(x1604,-0.5);
CheckValue<IkReal> x1605 = IKatan2WithCheck(IkReal(x1602),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1605.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1605.value))));
IkReal gconst82=(x1602*x1603);
IkReal gconst83=((1.0)*r20*x1603);
CheckValue<IkReal> x1606 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1606.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1606.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1607=((-1.0)*r21);
CheckValue<IkReal> x1610 = IKatan2WithCheck(IkReal(x1607),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1610.valid){
continue;
}
IkReal x1608=((1.0)*(x1610.value));
IkReal x1609=x1603;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1608)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1608)));
IkReal gconst82=(x1607*x1609);
IkReal gconst83=((1.0)*r20*x1609);
IkReal x1611=r22*r22;
IkReal x1612=((1.0)*x1611);
CheckValue<IkReal> x1616=IKPowWithIntegerCheck(((-1.0)+x1611),-1);
if(!x1616.valid){
continue;
}
IkReal x1613=x1616.value;
if((((1.0)+(((-1.0)*x1612)))) < -0.00001)
continue;
IkReal x1614=IKsqrt(((1.0)+(((-1.0)*x1612))));
IkReal x1615=(cj0*x1613*x1614);
j4eval[0]=((IKabs((x1615+(((-1.0)*x1612*x1615)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1617=((-1.0)*r21);
CheckValue<IkReal> x1620 = IKatan2WithCheck(IkReal(x1617),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1620.valid){
continue;
}
IkReal x1618=((1.0)*(x1620.value));
IkReal x1619=x1603;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1618)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1618)));
IkReal gconst82=(x1617*x1619);
IkReal gconst83=((1.0)*r20*x1619);
IkReal x1621=r22*r22;
IkReal x1622=((1.0)*x1621);
CheckValue<IkReal> x1626=IKPowWithIntegerCheck(((-1.0)+x1621),-1);
if(!x1626.valid){
continue;
}
IkReal x1623=x1626.value;
if((((1.0)+(((-1.0)*x1622)))) < -0.00001)
continue;
IkReal x1624=IKsqrt(((1.0)+(((-1.0)*x1622))));
IkReal x1625=(sj0*x1623*x1624);
j4eval[0]=((IKabs((x1625+(((-1.0)*x1622*x1625)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1627=((-1.0)*r21);
CheckValue<IkReal> x1630 = IKatan2WithCheck(IkReal(x1627),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1630.valid){
continue;
}
IkReal x1628=((1.0)*(x1630.value));
IkReal x1629=x1603;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1628)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1628)));
IkReal gconst82=(x1627*x1629);
IkReal gconst83=((1.0)*r20*x1629);
IkReal x1631=r22*r22;
IkReal x1632=(r12*sj0);
IkReal x1633=(cj0*r02);
CheckValue<IkReal> x1637=IKPowWithIntegerCheck(((-1.0)+x1631),-1);
if(!x1637.valid){
continue;
}
IkReal x1634=x1637.value;
if((((1.0)+(((-1.0)*x1631)))) < -0.00001)
continue;
IkReal x1635=IKsqrt(((1.0)+(((-1.0)*x1631))));
IkReal x1636=(r22*x1634*x1635);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x1632*x1636))+((x1633*x1636)))))+(IKabs(((((-1.0)*x1633))+(((-1.0)*x1632))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1638=((1.0)*sj0);
IkReal x1639=((1.0)*cj0);
CheckValue<IkReal> x1640=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1640.valid){
continue;
}
CheckValue<IkReal> x1641 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1638))+(((-1.0)*r02*x1639)))),IkReal(((((-1.0)*gconst82*r11*x1638))+((gconst83*r10*sj0))+((cj0*gconst83*r00))+(((-1.0)*gconst82*r01*x1639)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1640.value)))+(x1641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1642=IKsin(j4);
IkReal x1643=IKcos(j4);
IkReal x1644=(gconst82*r11);
IkReal x1645=((1.0)*cj2);
IkReal x1646=((1.0)*sj0);
IkReal x1647=(cj1*sj2);
IkReal x1648=((1.0)*x1643);
IkReal x1649=(gconst83*x1643);
IkReal x1650=(gconst82*x1642);
IkReal x1651=((1.0)*x1642);
evalcond[0]=((((-1.0)*r22*x1648))+(((-1.0)*gconst83*r20*x1651))+((r21*x1650)));
evalcond[1]=(cj0+(((-1.0)*r12*x1648))+((x1642*x1644))+(((-1.0)*gconst83*r10*x1651)));
evalcond[2]=((((-1.0)*gconst83*r00*x1651))+((r01*x1650))+(((-1.0)*x1646))+(((-1.0)*r02*x1648)));
evalcond[3]=((((-1.0)*r22*x1651))+((r20*x1649))+(((-1.0)*cj1*x1645))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1648)));
evalcond[4]=((((-1.0)*cj0*x1647))+((r00*x1649))+(((-1.0)*cj0*sj1*x1645))+(((-1.0)*r02*x1651))+(((-1.0)*gconst82*r01*x1648)));
evalcond[5]=((((-1.0)*x1646*x1647))+((r10*x1649))+(((-1.0)*x1644*x1648))+(((-1.0)*r12*x1651))+(((-1.0)*sj0*sj1*x1645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1652=((1.0)*gconst83);
CheckValue<IkReal> x1653 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1652))+((gconst82*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1653.valid){
continue;
}
CheckValue<IkReal> x1654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1652))+(((-1.0)*gconst82*r10)))),-1);
if(!x1654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1653.value)+(((1.5707963267949)*(x1654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1655=IKsin(j4);
IkReal x1656=IKcos(j4);
IkReal x1657=(gconst82*r11);
IkReal x1658=((1.0)*cj2);
IkReal x1659=((1.0)*sj0);
IkReal x1660=(cj1*sj2);
IkReal x1661=((1.0)*x1656);
IkReal x1662=(gconst83*x1656);
IkReal x1663=(gconst82*x1655);
IkReal x1664=((1.0)*x1655);
evalcond[0]=((((-1.0)*gconst83*r20*x1664))+(((-1.0)*r22*x1661))+((r21*x1663)));
evalcond[1]=(cj0+(((-1.0)*r12*x1661))+((x1655*x1657))+(((-1.0)*gconst83*r10*x1664)));
evalcond[2]=((((-1.0)*gconst83*r00*x1664))+((r01*x1663))+(((-1.0)*x1659))+(((-1.0)*r02*x1661)));
evalcond[3]=((((-1.0)*gconst82*r21*x1661))+(((-1.0)*cj1*x1658))+(((-1.0)*r22*x1664))+((r20*x1662))+((sj1*sj2)));
evalcond[4]=((((-1.0)*gconst82*r01*x1661))+(((-1.0)*cj0*x1660))+((r00*x1662))+(((-1.0)*r02*x1664))+(((-1.0)*cj0*sj1*x1658)));
evalcond[5]=(((r10*x1662))+(((-1.0)*r12*x1664))+(((-1.0)*x1657*x1661))+(((-1.0)*sj0*sj1*x1658))+(((-1.0)*x1659*x1660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1665=((1.0)*gconst83);
CheckValue<IkReal> x1666=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1665))+(((-1.0)*gconst82*r00)))),-1);
if(!x1666.valid){
continue;
}
CheckValue<IkReal> x1667 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x1665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1666.value)))+(x1667.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1668=IKsin(j4);
IkReal x1669=IKcos(j4);
IkReal x1670=(gconst82*r11);
IkReal x1671=((1.0)*cj2);
IkReal x1672=((1.0)*sj0);
IkReal x1673=(cj1*sj2);
IkReal x1674=((1.0)*x1669);
IkReal x1675=(gconst83*x1669);
IkReal x1676=(gconst82*x1668);
IkReal x1677=((1.0)*x1668);
evalcond[0]=(((r21*x1676))+(((-1.0)*gconst83*r20*x1677))+(((-1.0)*r22*x1674)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1677))+((x1668*x1670))+(((-1.0)*r12*x1674)));
evalcond[2]=((((-1.0)*gconst83*r00*x1677))+(((-1.0)*r02*x1674))+(((-1.0)*x1672))+((r01*x1676)));
evalcond[3]=(((sj1*sj2))+((r20*x1675))+(((-1.0)*cj1*x1671))+(((-1.0)*gconst82*r21*x1674))+(((-1.0)*r22*x1677)));
evalcond[4]=(((r00*x1675))+(((-1.0)*cj0*sj1*x1671))+(((-1.0)*r02*x1677))+(((-1.0)*cj0*x1673))+(((-1.0)*gconst82*r01*x1674)));
evalcond[5]=((((-1.0)*x1672*x1673))+(((-1.0)*sj0*sj1*x1671))+(((-1.0)*r12*x1677))+(((-1.0)*x1670*x1674))+((r10*x1675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1678=((-1.0)*r10);
IkReal x1680 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1680)==0){
continue;
}
IkReal x1679=pow(x1680,-0.5);
CheckValue<IkReal> x1681 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1678),IKFAST_ATAN2_MAGTHRESH);
if(!x1681.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1681.value));
IkReal gconst85=(r11*x1679);
IkReal gconst86=(x1678*x1679);
CheckValue<IkReal> x1682 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1682.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1682.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1683=((-1.0)*r10);
IkReal x1684=x1679;
CheckValue<IkReal> x1686 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1683),IKFAST_ATAN2_MAGTHRESH);
if(!x1686.valid){
continue;
}
IkReal x1685=((-1.0)*(x1686.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1685;
IkReal gconst84=x1685;
IkReal gconst85=(r11*x1684);
IkReal gconst86=(x1683*x1684);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1687=((1.0)*sj0);
IkReal x1688=((1.0)*gconst85);
CheckValue<IkReal> x1689 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1687))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*gconst85*r11*x1687))+(((-1.0)*cj0*r01*x1688))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1689.valid){
continue;
}
CheckValue<IkReal> x1690=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1688)))),-1);
if(!x1690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1689.value)+(((1.5707963267949)*(x1690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1691=IKsin(j4);
IkReal x1692=IKcos(j4);
IkReal x1693=(gconst85*r21);
IkReal x1694=(gconst86*r00);
IkReal x1695=(gconst86*r10);
IkReal x1696=((1.0)*cj2);
IkReal x1697=(gconst85*r11);
IkReal x1698=(gconst85*r01);
IkReal x1699=((1.0)*sj0);
IkReal x1700=(gconst86*r20);
IkReal x1701=(cj1*sj2);
IkReal x1702=((1.0)*x1692);
IkReal x1703=((1.0)*x1691);
evalcond[0]=(((x1691*x1693))+(((-1.0)*x1700*x1703))+(((-1.0)*r22*x1702)));
evalcond[1]=(cj0+((x1691*x1697))+(((-1.0)*x1695*x1703))+(((-1.0)*r12*x1702)));
evalcond[2]=((((-1.0)*x1699))+((x1691*x1698))+(((-1.0)*r02*x1702))+(((-1.0)*x1694*x1703)));
evalcond[3]=((((-1.0)*cj1*x1696))+((sj1*sj2))+(((-1.0)*r22*x1703))+(((-1.0)*x1693*x1702))+((x1692*x1700)));
evalcond[4]=((((-1.0)*x1698*x1702))+(((-1.0)*cj0*sj1*x1696))+(((-1.0)*cj0*x1701))+((x1692*x1694))+(((-1.0)*r02*x1703)));
evalcond[5]=((((-1.0)*sj0*sj1*x1696))+(((-1.0)*x1699*x1701))+((x1692*x1695))+(((-1.0)*x1697*x1702))+(((-1.0)*r12*x1703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1704=((1.0)*gconst86);
CheckValue<IkReal> x1705 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x1704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1705.valid){
continue;
}
CheckValue<IkReal> x1706=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r00))+(((-1.0)*r01*x1704)))),-1);
if(!x1706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1705.value)+(((1.5707963267949)*(x1706.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1707=IKsin(j4);
IkReal x1708=IKcos(j4);
IkReal x1709=(gconst85*r21);
IkReal x1710=(gconst86*r00);
IkReal x1711=(gconst86*r10);
IkReal x1712=((1.0)*cj2);
IkReal x1713=(gconst85*r11);
IkReal x1714=(gconst85*r01);
IkReal x1715=((1.0)*sj0);
IkReal x1716=(gconst86*r20);
IkReal x1717=(cj1*sj2);
IkReal x1718=((1.0)*x1708);
IkReal x1719=((1.0)*x1707);
evalcond[0]=((((-1.0)*x1716*x1719))+(((-1.0)*r22*x1718))+((x1707*x1709)));
evalcond[1]=(cj0+(((-1.0)*x1711*x1719))+(((-1.0)*r12*x1718))+((x1707*x1713)));
evalcond[2]=((((-1.0)*x1710*x1719))+(((-1.0)*x1715))+(((-1.0)*r02*x1718))+((x1707*x1714)));
evalcond[3]=((((-1.0)*x1709*x1718))+(((-1.0)*cj1*x1712))+((sj1*sj2))+(((-1.0)*r22*x1719))+((x1708*x1716)));
evalcond[4]=((((-1.0)*x1714*x1718))+(((-1.0)*cj0*x1717))+(((-1.0)*r02*x1719))+(((-1.0)*cj0*sj1*x1712))+((x1708*x1710)));
evalcond[5]=((((-1.0)*x1713*x1718))+(((-1.0)*sj0*sj1*x1712))+(((-1.0)*x1715*x1717))+((x1708*x1711))+(((-1.0)*r12*x1719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1720=((-1.0)*r11);
IkReal x1722 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1722)==0){
continue;
}
IkReal x1721=pow(x1722,-0.5);
CheckValue<IkReal> x1723 = IKatan2WithCheck(IkReal(x1720),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1723.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1723.value))));
IkReal gconst88=(x1720*x1721);
IkReal gconst89=((1.0)*r10*x1721);
CheckValue<IkReal> x1724 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1724.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1724.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1725=((-1.0)*r11);
CheckValue<IkReal> x1728 = IKatan2WithCheck(IkReal(x1725),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1728.valid){
continue;
}
IkReal x1726=((1.0)*(x1728.value));
IkReal x1727=x1721;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1726)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1726)));
IkReal gconst88=(x1725*x1727);
IkReal gconst89=((1.0)*r10*x1727);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1729=((-1.0)*r11);
CheckValue<IkReal> x1732 = IKatan2WithCheck(IkReal(x1729),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1732.valid){
continue;
}
IkReal x1730=((1.0)*(x1732.value));
IkReal x1731=x1721;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1730)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1730)));
IkReal gconst88=(x1729*x1731);
IkReal gconst89=((1.0)*r10*x1731);
IkReal x1733=r12*r12;
IkReal x1734=((1.0)*sj0);
IkReal x1735=(cj0*r02);
IkReal x1736=x1721;
j4eval[0]=((IKabs(((((-1.0)*r12*x1734))+(((-1.0)*x1735)))))+(IKabs(((((-1.0)*x1734*x1736))+((r12*x1735*x1736))+((sj0*x1733*x1736))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1737=((-1.0)*r11);
CheckValue<IkReal> x1740 = IKatan2WithCheck(IkReal(x1737),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1740.valid){
continue;
}
IkReal x1738=((1.0)*(x1740.value));
IkReal x1739=x1721;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1738)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1738)));
IkReal gconst88=(x1737*x1739);
IkReal gconst89=((1.0)*r10*x1739);
IkReal x1741=r12*r12;
IkReal x1742=(cj1*cj2*r22);
IkReal x1743=(r22*sj1*sj2);
CheckValue<IkReal> x1747=IKPowWithIntegerCheck(((-1.0)+x1741),-1);
if(!x1747.valid){
continue;
}
IkReal x1744=x1747.value;
if((((1.0)+(((-1.0)*x1741)))) < -0.00001)
continue;
IkReal x1745=IKsqrt(((1.0)+(((-1.0)*x1741))));
IkReal x1746=(r12*x1744*x1745);
j4eval[0]=((IKabs((x1743+(((-1.0)*x1742)))))+(IKabs((((x1742*x1746))+(((-1.0)*x1743*x1746))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1748=(cj1*cj2);
IkReal x1749=(gconst89*r20);
IkReal x1750=(gconst88*r21);
IkReal x1751=(sj1*sj2);
CheckValue<IkReal> x1752=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1749*x1750))+(x1749*x1749)+(r22*r22)+(x1750*x1750))),-1);
if(!x1752.valid){
continue;
}
CheckValue<IkReal> x1753 = IKatan2WithCheck(IkReal((((r22*x1751))+(((-1.0)*r22*x1748)))),IkReal(((((-1.0)*x1749*x1751))+((x1750*x1751))+(((-1.0)*x1748*x1750))+((x1748*x1749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1752.value)))+(x1753.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1754=IKsin(j4);
IkReal x1755=IKcos(j4);
IkReal x1756=((1.0)*sj0);
IkReal x1757=((1.0)*cj2);
IkReal x1758=(gconst89*r20);
IkReal x1759=(gconst89*r10);
IkReal x1760=(gconst89*r00);
IkReal x1761=(cj1*sj2);
IkReal x1762=((1.0)*x1755);
IkReal x1763=((1.0)*x1754);
IkReal x1764=(gconst88*x1754);
evalcond[0]=(((r21*x1764))+(((-1.0)*x1758*x1763))+(((-1.0)*r22*x1762)));
evalcond[1]=(cj0+(((-1.0)*x1759*x1763))+((r11*x1764))+(((-1.0)*r12*x1762)));
evalcond[2]=((((-1.0)*r02*x1762))+((r01*x1764))+(((-1.0)*x1760*x1763))+(((-1.0)*x1756)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x1757))+(((-1.0)*r22*x1763))+(((-1.0)*gconst88*r21*x1762))+((x1755*x1758)));
evalcond[4]=((((-1.0)*cj0*sj1*x1757))+(((-1.0)*r02*x1763))+(((-1.0)*cj0*x1761))+((x1755*x1760))+(((-1.0)*gconst88*r01*x1762)));
evalcond[5]=((((-1.0)*cj2*sj1*x1756))+(((-1.0)*x1756*x1761))+(((-1.0)*r12*x1763))+(((-1.0)*gconst88*r11*x1762))+((x1755*x1759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1765=((1.0)*sj0);
IkReal x1766=((1.0)*cj0);
CheckValue<IkReal> x1767 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1766))+(((-1.0)*r12*x1765)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r11*x1765))+(((-1.0)*gconst88*r01*x1766))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1767.valid){
continue;
}
CheckValue<IkReal> x1768=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x1768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1767.value)+(((1.5707963267949)*(x1768.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1769=IKsin(j4);
IkReal x1770=IKcos(j4);
IkReal x1771=((1.0)*sj0);
IkReal x1772=((1.0)*cj2);
IkReal x1773=(gconst89*r20);
IkReal x1774=(gconst89*r10);
IkReal x1775=(gconst89*r00);
IkReal x1776=(cj1*sj2);
IkReal x1777=((1.0)*x1770);
IkReal x1778=((1.0)*x1769);
IkReal x1779=(gconst88*x1769);
evalcond[0]=(((r21*x1779))+(((-1.0)*x1773*x1778))+(((-1.0)*r22*x1777)));
evalcond[1]=(cj0+((r11*x1779))+(((-1.0)*x1774*x1778))+(((-1.0)*r12*x1777)));
evalcond[2]=(((r01*x1779))+(((-1.0)*r02*x1777))+(((-1.0)*x1771))+(((-1.0)*x1775*x1778)));
evalcond[3]=((((-1.0)*cj1*x1772))+((x1770*x1773))+(((-1.0)*gconst88*r21*x1777))+((sj1*sj2))+(((-1.0)*r22*x1778)));
evalcond[4]=(((x1770*x1775))+(((-1.0)*gconst88*r01*x1777))+(((-1.0)*cj0*x1776))+(((-1.0)*r02*x1778))+(((-1.0)*cj0*sj1*x1772)));
evalcond[5]=((((-1.0)*gconst88*r11*x1777))+(((-1.0)*cj2*sj1*x1771))+((x1770*x1774))+(((-1.0)*x1771*x1776))+(((-1.0)*r12*x1778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1780=((1.0)*gconst89);
CheckValue<IkReal> x1781 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1780))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1781.valid){
continue;
}
CheckValue<IkReal> x1782=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1780))+(((-1.0)*gconst88*r00)))),-1);
if(!x1782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1781.value)+(((1.5707963267949)*(x1782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1783=IKsin(j4);
IkReal x1784=IKcos(j4);
IkReal x1785=((1.0)*sj0);
IkReal x1786=((1.0)*cj2);
IkReal x1787=(gconst89*r20);
IkReal x1788=(gconst89*r10);
IkReal x1789=(gconst89*r00);
IkReal x1790=(cj1*sj2);
IkReal x1791=((1.0)*x1784);
IkReal x1792=((1.0)*x1783);
IkReal x1793=(gconst88*x1783);
evalcond[0]=((((-1.0)*x1787*x1792))+(((-1.0)*r22*x1791))+((r21*x1793)));
evalcond[1]=(cj0+(((-1.0)*r12*x1791))+(((-1.0)*x1788*x1792))+((r11*x1793)));
evalcond[2]=((((-1.0)*x1785))+(((-1.0)*x1789*x1792))+(((-1.0)*r02*x1791))+((r01*x1793)));
evalcond[3]=((((-1.0)*r22*x1792))+((sj1*sj2))+((x1784*x1787))+(((-1.0)*cj1*x1786))+(((-1.0)*gconst88*r21*x1791)));
evalcond[4]=((((-1.0)*cj0*sj1*x1786))+((x1784*x1789))+(((-1.0)*gconst88*r01*x1791))+(((-1.0)*r02*x1792))+(((-1.0)*cj0*x1790)));
evalcond[5]=((((-1.0)*r12*x1792))+(((-1.0)*cj2*sj1*x1785))+(((-1.0)*x1785*x1790))+((x1784*x1788))+(((-1.0)*gconst88*r11*x1791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1794=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x1794;
j4eval[1]=IKsign(x1794);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1795=((1.0)*cj5);
IkReal x1796=((((-1.0)*r01*x1795))+(((-1.0)*r00*sj5)));
j4eval[0]=x1796;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x1795))))));
j4eval[2]=IKsign(x1796);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1797=cj5*cj5;
IkReal x1798=r11*r11;
IkReal x1799=(r11*sj5);
IkReal x1800=(cj5*r10);
IkReal x1801=((r12*r12)+x1798+((x1797*(r10*r10)))+(((-2.0)*x1799*x1800))+(((-1.0)*x1797*x1798)));
j4eval[0]=x1801;
j4eval[1]=IKsign(x1801);
j4eval[2]=((IKabs(r12))+(IKabs((x1800+(((-1.0)*x1799))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1802=cj5*cj5;
IkReal x1803=r11*r11;
IkReal x1804=(cj5*r10);
IkReal x1805=(r11*sj5);
CheckValue<IkReal> x1806 = IKatan2WithCheck(IkReal((x1804+(((-1.0)*x1805)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1806.valid){
continue;
}
CheckValue<IkReal> x1807=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x1804*x1805))+((x1802*(r10*r10)))+x1803+(((-1.0)*x1802*x1803)))),-1);
if(!x1807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1806.value)+(((1.5707963267949)*(x1807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1808=IKsin(j4);
IkReal x1809=IKcos(j4);
IkReal x1810=(cj5*r10);
IkReal x1811=(r01*sj5);
IkReal x1812=((1.0)*cj2);
IkReal x1813=(cj5*r00);
IkReal x1814=(cj5*r20);
IkReal x1815=((1.0)*x1809);
IkReal x1816=((1.0)*x1808);
IkReal x1817=(sj5*x1808);
evalcond[0]=((((-1.0)*x1814*x1816))+((r21*x1817))+(((-1.0)*r22*x1815)));
evalcond[1]=((((-1.0)*x1813*x1816))+(((-1.0)*r02*x1815))+((x1808*x1811)));
evalcond[2]=(((x1809*x1810))+(((-1.0)*r11*sj5*x1815))+(((-1.0)*r12*x1816)));
evalcond[3]=((1.0)+(((-1.0)*x1810*x1816))+(((-1.0)*r12*x1815))+((r11*x1817)));
evalcond[4]=((((-1.0)*r21*sj5*x1815))+((sj1*sj2))+((x1809*x1814))+(((-1.0)*cj1*x1812))+(((-1.0)*r22*x1816)));
evalcond[5]=((((-1.0)*sj1*x1812))+(((-1.0)*x1811*x1815))+(((-1.0)*r02*x1816))+(((-1.0)*cj1*sj2))+((x1809*x1813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1818=((1.0)*cj5);
CheckValue<IkReal> x1819=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1818)))),-1);
if(!x1819.valid){
continue;
}
CheckValue<IkReal> x1820 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x1818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1819.value)))+(x1820.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1821=IKsin(j4);
IkReal x1822=IKcos(j4);
IkReal x1823=(cj5*r10);
IkReal x1824=(r01*sj5);
IkReal x1825=((1.0)*cj2);
IkReal x1826=(cj5*r00);
IkReal x1827=(cj5*r20);
IkReal x1828=((1.0)*x1822);
IkReal x1829=((1.0)*x1821);
IkReal x1830=(sj5*x1821);
evalcond[0]=((((-1.0)*x1827*x1829))+(((-1.0)*r22*x1828))+((r21*x1830)));
evalcond[1]=((((-1.0)*x1826*x1829))+((x1821*x1824))+(((-1.0)*r02*x1828)));
evalcond[2]=((((-1.0)*r11*sj5*x1828))+((x1822*x1823))+(((-1.0)*r12*x1829)));
evalcond[3]=((1.0)+((r11*x1830))+(((-1.0)*r12*x1828))+(((-1.0)*x1823*x1829)));
evalcond[4]=(((sj1*sj2))+((x1822*x1827))+(((-1.0)*r22*x1829))+(((-1.0)*r21*sj5*x1828))+(((-1.0)*cj1*x1825)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x1822*x1826))+(((-1.0)*r02*x1829))+(((-1.0)*x1824*x1828))+(((-1.0)*sj1*x1825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1831=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x1831.valid){
continue;
}
CheckValue<IkReal> x1832 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1831.value)))+(x1832.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1833=IKsin(j4);
IkReal x1834=IKcos(j4);
IkReal x1835=(cj5*r10);
IkReal x1836=(r01*sj5);
IkReal x1837=((1.0)*cj2);
IkReal x1838=(cj5*r00);
IkReal x1839=(cj5*r20);
IkReal x1840=((1.0)*x1834);
IkReal x1841=((1.0)*x1833);
IkReal x1842=(sj5*x1833);
evalcond[0]=((((-1.0)*r22*x1840))+(((-1.0)*x1839*x1841))+((r21*x1842)));
evalcond[1]=((((-1.0)*r02*x1840))+((x1833*x1836))+(((-1.0)*x1838*x1841)));
evalcond[2]=((((-1.0)*r11*sj5*x1840))+(((-1.0)*r12*x1841))+((x1834*x1835)));
evalcond[3]=((1.0)+(((-1.0)*r12*x1840))+(((-1.0)*x1835*x1841))+((r11*x1842)));
evalcond[4]=((((-1.0)*r22*x1841))+((sj1*sj2))+(((-1.0)*r21*sj5*x1840))+((x1834*x1839))+(((-1.0)*cj1*x1837)));
evalcond[5]=((((-1.0)*r02*x1841))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x1837))+(((-1.0)*x1836*x1840))+((x1834*x1838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1843=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1843;
j4eval[1]=IKsign(x1843);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1844=((1.0)*cj5);
IkReal x1845=((((-1.0)*r21*x1844))+(((-1.0)*r20*sj5)));
j4eval[0]=x1845;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x1844))))));
j4eval[2]=IKsign(x1845);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1846=cj5*cj5;
IkReal x1847=r11*r11;
IkReal x1848=(cj5*r10);
IkReal x1849=(r11*sj5);
IkReal x1850=(((x1846*x1847))+(((-1.0)*(r12*r12)))+(((-1.0)*x1847))+(((2.0)*x1848*x1849))+(((-1.0)*x1846*(r10*r10))));
j4eval[0]=x1850;
j4eval[1]=((IKabs(r12))+(IKabs((x1848+(((-1.0)*x1849))))));
j4eval[2]=IKsign(x1850);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1851=cj5*cj5;
IkReal x1852=r11*r11;
IkReal x1853=(cj5*r10);
IkReal x1854=(r11*sj5);
CheckValue<IkReal> x1855=IKPowWithIntegerCheck(IKsign((((x1851*x1852))+(((-1.0)*x1852))+(((-1.0)*x1851*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x1853*x1854)))),-1);
if(!x1855.valid){
continue;
}
CheckValue<IkReal> x1856 = IKatan2WithCheck(IkReal(((((-1.0)*x1854))+x1853)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1855.value)))+(x1856.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1857=IKsin(j4);
IkReal x1858=IKcos(j4);
IkReal x1859=(cj5*r10);
IkReal x1860=(r01*sj5);
IkReal x1861=(cj5*r00);
IkReal x1862=(cj5*r20);
IkReal x1863=((1.0)*x1858);
IkReal x1864=((1.0)*x1857);
IkReal x1865=(sj5*x1857);
evalcond[0]=((((-1.0)*x1862*x1864))+(((-1.0)*r22*x1863))+((r21*x1865)));
evalcond[1]=((((-1.0)*r02*x1863))+(((-1.0)*x1861*x1864))+((x1857*x1860)));
evalcond[2]=((((-1.0)*r12*x1864))+(((-1.0)*r11*sj5*x1863))+((x1858*x1859)));
evalcond[3]=((-1.0)+((r11*x1865))+(((-1.0)*r12*x1863))+(((-1.0)*x1859*x1864)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x1864))+(((-1.0)*x1860*x1863))+((cj1*sj2))+((x1858*x1861)));
evalcond[5]=((((-1.0)*r21*sj5*x1863))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1858*x1862))+(((-1.0)*r22*x1864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1866=((1.0)*cj5);
CheckValue<IkReal> x1867=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1866))+(((-1.0)*r20*sj5)))),-1);
if(!x1867.valid){
continue;
}
CheckValue<IkReal> x1868 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x1866)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1867.value)))+(x1868.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1869=IKsin(j4);
IkReal x1870=IKcos(j4);
IkReal x1871=(cj5*r10);
IkReal x1872=(r01*sj5);
IkReal x1873=(cj5*r00);
IkReal x1874=(cj5*r20);
IkReal x1875=((1.0)*x1870);
IkReal x1876=((1.0)*x1869);
IkReal x1877=(sj5*x1869);
evalcond[0]=((((-1.0)*r22*x1875))+(((-1.0)*x1874*x1876))+((r21*x1877)));
evalcond[1]=((((-1.0)*x1873*x1876))+(((-1.0)*r02*x1875))+((x1869*x1872)));
evalcond[2]=((((-1.0)*r12*x1876))+(((-1.0)*r11*sj5*x1875))+((x1870*x1871)));
evalcond[3]=((-1.0)+(((-1.0)*x1871*x1876))+(((-1.0)*r12*x1875))+((r11*x1877)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x1872*x1875))+(((-1.0)*r02*x1876))+((cj1*sj2))+((x1870*x1873)));
evalcond[5]=((((-1.0)*r22*x1876))+(((-1.0)*r21*sj5*x1875))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x1870*x1874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1878 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1878.valid){
continue;
}
CheckValue<IkReal> x1879=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1878.value)+(((1.5707963267949)*(x1879.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1880=IKsin(j4);
IkReal x1881=IKcos(j4);
IkReal x1882=(cj5*r10);
IkReal x1883=(r01*sj5);
IkReal x1884=(cj5*r00);
IkReal x1885=(cj5*r20);
IkReal x1886=((1.0)*x1881);
IkReal x1887=((1.0)*x1880);
IkReal x1888=(sj5*x1880);
evalcond[0]=(((r21*x1888))+(((-1.0)*r22*x1886))+(((-1.0)*x1885*x1887)));
evalcond[1]=(((x1880*x1883))+(((-1.0)*r02*x1886))+(((-1.0)*x1884*x1887)));
evalcond[2]=(((x1881*x1882))+(((-1.0)*r12*x1887))+(((-1.0)*r11*sj5*x1886)));
evalcond[3]=((-1.0)+(((-1.0)*x1882*x1887))+(((-1.0)*r12*x1886))+((r11*x1888)));
evalcond[4]=(((cj2*sj1))+((x1881*x1884))+(((-1.0)*x1883*x1886))+((cj1*sj2))+(((-1.0)*r02*x1887)));
evalcond[5]=(((x1881*x1885))+(((-1.0)*r21*sj5*x1886))+(((-1.0)*r22*x1887))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1889=((-1.0)*r00);
IkReal x1891 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1891)==0){
continue;
}
IkReal x1890=pow(x1891,-0.5);
CheckValue<IkReal> x1892 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x1889),IKFAST_ATAN2_MAGTHRESH);
if(!x1892.valid){
continue;
}
IkReal gconst90=((-1.0)*(x1892.value));
IkReal gconst91=(r01*x1890);
IkReal gconst92=(x1889*x1890);
CheckValue<IkReal> x1893 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1893.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1893.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1894=((-1.0)*r00);
IkReal x1895=x1890;
CheckValue<IkReal> x1897 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x1894),IKFAST_ATAN2_MAGTHRESH);
if(!x1897.valid){
continue;
}
IkReal x1896=((-1.0)*(x1897.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x1896;
IkReal gconst90=x1896;
IkReal gconst91=(r01*x1895);
IkReal gconst92=(x1894*x1895);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1898=((1.0)*sj0);
IkReal x1899=((1.0)*cj0);
CheckValue<IkReal> x1900 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1899))+(((-1.0)*r12*x1898)))),IkReal(((((-1.0)*gconst91*r01*x1899))+((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x1898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1900.valid){
continue;
}
CheckValue<IkReal> x1901=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x1901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1900.value)+(((1.5707963267949)*(x1901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1902=IKsin(j4);
IkReal x1903=IKcos(j4);
IkReal x1904=((1.0)*cj2);
IkReal x1905=(gconst92*r00);
IkReal x1906=(gconst92*r20);
IkReal x1907=((1.0)*sj0);
IkReal x1908=(gconst92*r10);
IkReal x1909=(cj1*sj2);
IkReal x1910=((1.0)*x1903);
IkReal x1911=(gconst91*x1902);
IkReal x1912=((1.0)*x1902);
evalcond[0]=((((-1.0)*r22*x1910))+((r21*x1911))+(((-1.0)*x1906*x1912)));
evalcond[1]=(cj0+(((-1.0)*r12*x1910))+((r11*x1911))+(((-1.0)*x1908*x1912)));
evalcond[2]=((((-1.0)*r02*x1910))+(((-1.0)*x1905*x1912))+((r01*x1911))+(((-1.0)*x1907)));
evalcond[3]=((((-1.0)*r22*x1912))+((x1903*x1906))+(((-1.0)*cj1*x1904))+((sj1*sj2))+(((-1.0)*gconst91*r21*x1910)));
evalcond[4]=((((-1.0)*r02*x1912))+((x1903*x1905))+(((-1.0)*gconst91*r01*x1910))+(((-1.0)*cj0*x1909))+(((-1.0)*cj0*sj1*x1904)));
evalcond[5]=((((-1.0)*gconst91*r11*x1910))+(((-1.0)*x1907*x1909))+((x1903*x1908))+(((-1.0)*r12*x1912))+(((-1.0)*sj0*sj1*x1904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1913=((1.0)*gconst92);
CheckValue<IkReal> x1914=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x1913)))),-1);
if(!x1914.valid){
continue;
}
CheckValue<IkReal> x1915 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x1913)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1914.value)))+(x1915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1916=IKsin(j4);
IkReal x1917=IKcos(j4);
IkReal x1918=((1.0)*cj2);
IkReal x1919=(gconst92*r00);
IkReal x1920=(gconst92*r20);
IkReal x1921=((1.0)*sj0);
IkReal x1922=(gconst92*r10);
IkReal x1923=(cj1*sj2);
IkReal x1924=((1.0)*x1917);
IkReal x1925=(gconst91*x1916);
IkReal x1926=((1.0)*x1916);
evalcond[0]=((((-1.0)*r22*x1924))+((r21*x1925))+(((-1.0)*x1920*x1926)));
evalcond[1]=((((-1.0)*r12*x1924))+cj0+(((-1.0)*x1922*x1926))+((r11*x1925)));
evalcond[2]=(((r01*x1925))+(((-1.0)*x1921))+(((-1.0)*x1919*x1926))+(((-1.0)*r02*x1924)));
evalcond[3]=((((-1.0)*gconst91*r21*x1924))+((sj1*sj2))+(((-1.0)*cj1*x1918))+(((-1.0)*r22*x1926))+((x1917*x1920)));
evalcond[4]=((((-1.0)*cj0*x1923))+((x1917*x1919))+(((-1.0)*cj0*sj1*x1918))+(((-1.0)*r02*x1926))+(((-1.0)*gconst91*r01*x1924)));
evalcond[5]=((((-1.0)*r12*x1926))+(((-1.0)*gconst91*r11*x1924))+((x1917*x1922))+(((-1.0)*sj0*sj1*x1918))+(((-1.0)*x1921*x1923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1927=((-1.0)*r01);
IkReal x1929 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1929)==0){
continue;
}
IkReal x1928=pow(x1929,-0.5);
CheckValue<IkReal> x1930 = IKatan2WithCheck(IkReal(x1927),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1930.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x1930.value))));
IkReal gconst94=(x1927*x1928);
IkReal gconst95=((1.0)*r00*x1928);
CheckValue<IkReal> x1931 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1931.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1931.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x1932=((-1.0)*r01);
CheckValue<IkReal> x1935 = IKatan2WithCheck(IkReal(x1932),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1935.valid){
continue;
}
IkReal x1933=((1.0)*(x1935.value));
IkReal x1934=x1928;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1933)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1933)));
IkReal gconst94=(x1932*x1934);
IkReal gconst95=((1.0)*r00*x1934);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1936=((-1.0)*r01);
CheckValue<IkReal> x1939 = IKatan2WithCheck(IkReal(x1936),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1939.valid){
continue;
}
IkReal x1937=((1.0)*(x1939.value));
IkReal x1938=x1928;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1937)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1937)));
IkReal gconst94=(x1936*x1938);
IkReal gconst95=((1.0)*r00*x1938);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1940=((-1.0)*r01);
CheckValue<IkReal> x1943 = IKatan2WithCheck(IkReal(x1940),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1943.valid){
continue;
}
IkReal x1941=((1.0)*(x1943.value));
IkReal x1942=x1928;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1941)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1941)));
IkReal gconst94=(x1940*x1942);
IkReal gconst95=((1.0)*r00*x1942);
IkReal x1944=r02*r02;
IkReal x1945=(r12*sj0);
IkReal x1946=((1.0)*cj0);
IkReal x1947=x1928;
j4eval[0]=((IKabs(((((-1.0)*r02*x1946))+(((-1.0)*x1945)))))+(IKabs((((r02*x1945*x1947))+(((-1.0)*x1946*x1947))+((cj0*x1944*x1947))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1948=((1.0)*sj0);
IkReal x1949=((1.0)*cj0);
CheckValue<IkReal> x1950=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x1950.valid){
continue;
}
CheckValue<IkReal> x1951 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1949))+(((-1.0)*r12*x1948)))),IkReal(((((-1.0)*gconst94*r01*x1949))+(((-1.0)*gconst94*r11*x1948))+((gconst95*r10*sj0))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1950.value)))+(x1951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1952=IKsin(j4);
IkReal x1953=IKcos(j4);
IkReal x1954=(gconst94*r11);
IkReal x1955=((1.0)*cj2);
IkReal x1956=(gconst94*r21);
IkReal x1957=((1.0)*sj0);
IkReal x1958=(gconst94*r01);
IkReal x1959=(cj1*sj2);
IkReal x1960=((1.0)*x1953);
IkReal x1961=(gconst95*x1953);
IkReal x1962=((1.0)*x1952);
IkReal x1963=(gconst95*x1962);
evalcond[0]=(((x1952*x1956))+(((-1.0)*r22*x1960))+(((-1.0)*r20*x1963)));
evalcond[1]=(cj0+((x1952*x1954))+(((-1.0)*r10*x1963))+(((-1.0)*r12*x1960)));
evalcond[2]=((((-1.0)*x1957))+((x1952*x1958))+(((-1.0)*r02*x1960))+(((-1.0)*r00*x1963)));
evalcond[3]=((((-1.0)*x1956*x1960))+((r20*x1961))+(((-1.0)*r22*x1962))+((sj1*sj2))+(((-1.0)*cj1*x1955)));
evalcond[4]=((((-1.0)*cj0*sj1*x1955))+(((-1.0)*cj0*x1959))+(((-1.0)*x1958*x1960))+(((-1.0)*r02*x1962))+((r00*x1961)));
evalcond[5]=((((-1.0)*x1957*x1959))+((r10*x1961))+(((-1.0)*r12*x1962))+(((-1.0)*sj0*sj1*x1955))+(((-1.0)*x1954*x1960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1964=((1.0)*gconst95);
CheckValue<IkReal> x1965 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x1964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1965.valid){
continue;
}
CheckValue<IkReal> x1966=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x1964)))),-1);
if(!x1966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1965.value)+(((1.5707963267949)*(x1966.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1967=IKsin(j4);
IkReal x1968=IKcos(j4);
IkReal x1969=(gconst94*r11);
IkReal x1970=((1.0)*cj2);
IkReal x1971=(gconst94*r21);
IkReal x1972=((1.0)*sj0);
IkReal x1973=(gconst94*r01);
IkReal x1974=(cj1*sj2);
IkReal x1975=((1.0)*x1968);
IkReal x1976=(gconst95*x1968);
IkReal x1977=((1.0)*x1967);
IkReal x1978=(gconst95*x1977);
evalcond[0]=(((x1967*x1971))+(((-1.0)*r22*x1975))+(((-1.0)*r20*x1978)));
evalcond[1]=(cj0+(((-1.0)*r10*x1978))+(((-1.0)*r12*x1975))+((x1967*x1969)));
evalcond[2]=(((x1967*x1973))+(((-1.0)*r02*x1975))+(((-1.0)*x1972))+(((-1.0)*r00*x1978)));
evalcond[3]=(((r20*x1976))+(((-1.0)*r22*x1977))+((sj1*sj2))+(((-1.0)*x1971*x1975))+(((-1.0)*cj1*x1970)));
evalcond[4]=((((-1.0)*cj0*x1974))+(((-1.0)*cj0*sj1*x1970))+(((-1.0)*r02*x1977))+(((-1.0)*x1973*x1975))+((r00*x1976)));
evalcond[5]=((((-1.0)*sj0*sj1*x1970))+((r10*x1976))+(((-1.0)*x1972*x1974))+(((-1.0)*r12*x1977))+(((-1.0)*x1969*x1975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1979=((1.0)*gconst95);
CheckValue<IkReal> x1980=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x1979)))),-1);
if(!x1980.valid){
continue;
}
CheckValue<IkReal> x1981 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1979))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1980.value)))+(x1981.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1982=IKsin(j4);
IkReal x1983=IKcos(j4);
IkReal x1984=(gconst94*r11);
IkReal x1985=((1.0)*cj2);
IkReal x1986=(gconst94*r21);
IkReal x1987=((1.0)*sj0);
IkReal x1988=(gconst94*r01);
IkReal x1989=(cj1*sj2);
IkReal x1990=((1.0)*x1983);
IkReal x1991=(gconst95*x1983);
IkReal x1992=((1.0)*x1982);
IkReal x1993=(gconst95*x1992);
evalcond[0]=(((x1982*x1986))+(((-1.0)*r22*x1990))+(((-1.0)*r20*x1993)));
evalcond[1]=((((-1.0)*r10*x1993))+cj0+((x1982*x1984))+(((-1.0)*r12*x1990)));
evalcond[2]=((((-1.0)*x1987))+(((-1.0)*r00*x1993))+(((-1.0)*r02*x1990))+((x1982*x1988)));
evalcond[3]=((((-1.0)*x1986*x1990))+((sj1*sj2))+((r20*x1991))+(((-1.0)*cj1*x1985))+(((-1.0)*r22*x1992)));
evalcond[4]=((((-1.0)*r02*x1992))+((r00*x1991))+(((-1.0)*cj0*sj1*x1985))+(((-1.0)*cj0*x1989))+(((-1.0)*x1988*x1990)));
evalcond[5]=(((r10*x1991))+(((-1.0)*x1987*x1989))+(((-1.0)*sj0*sj1*x1985))+(((-1.0)*x1984*x1990))+(((-1.0)*r12*x1992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1994=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x1994;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x1994);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1995=((1.0)*cj5);
IkReal x1996=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1995)));
j4eval[0]=x1996;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x1995))))));
j4eval[2]=IKsign(x1996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1997=cj5*cj5;
IkReal x1998=r01*r01;
IkReal x1999=(r01*sj5);
IkReal x2000=(cj5*r00);
IkReal x2001=((((2.0)*x1999*x2000))+(((-1.0)*(r02*r02)))+(((-1.0)*x1998))+(((-1.0)*x1997*(r00*r00)))+((x1997*x1998)));
j4eval[0]=x2001;
j4eval[1]=IKsign(x2001);
j4eval[2]=((IKabs(r02))+(IKabs((x2000+(((-1.0)*x1999))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2002=cj5*cj5;
IkReal x2003=r01*r01;
IkReal x2004=(r01*sj5);
IkReal x2005=(cj5*r00);
CheckValue<IkReal> x2006 = IKatan2WithCheck(IkReal((x2005+(((-1.0)*x2004)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2006.valid){
continue;
}
CheckValue<IkReal> x2007=IKPowWithIntegerCheck(IKsign((((x2002*x2003))+(((2.0)*x2004*x2005))+(((-1.0)*(r02*r02)))+(((-1.0)*x2002*(r00*r00)))+(((-1.0)*x2003)))),-1);
if(!x2007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2006.value)+(((1.5707963267949)*(x2007.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2008=IKsin(j4);
IkReal x2009=IKcos(j4);
IkReal x2010=(cj5*r10);
IkReal x2011=(r01*sj5);
IkReal x2012=((1.0)*cj2);
IkReal x2013=(cj5*r00);
IkReal x2014=(cj5*r20);
IkReal x2015=((1.0)*x2009);
IkReal x2016=((1.0)*x2008);
IkReal x2017=(sj5*x2008);
evalcond[0]=((((-1.0)*x2014*x2016))+((r21*x2017))+(((-1.0)*r22*x2015)));
evalcond[1]=((((-1.0)*x2010*x2016))+(((-1.0)*r12*x2015))+((r11*x2017)));
evalcond[2]=((((-1.0)*x2011*x2015))+((x2009*x2013))+(((-1.0)*r02*x2016)));
evalcond[3]=((-1.0)+(((-1.0)*x2013*x2016))+((x2008*x2011))+(((-1.0)*r02*x2015)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r21*sj5*x2015))+(((-1.0)*cj1*x2012))+((x2009*x2014))+(((-1.0)*r22*x2016)));
evalcond[5]=((((-1.0)*r11*sj5*x2015))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2016))+((x2009*x2010))+(((-1.0)*sj1*x2012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2018=((1.0)*cj5);
CheckValue<IkReal> x2019=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2018)))),-1);
if(!x2019.valid){
continue;
}
CheckValue<IkReal> x2020 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2018))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2019.value)))+(x2020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2021=IKsin(j4);
IkReal x2022=IKcos(j4);
IkReal x2023=(cj5*r10);
IkReal x2024=(r01*sj5);
IkReal x2025=((1.0)*cj2);
IkReal x2026=(cj5*r00);
IkReal x2027=(cj5*r20);
IkReal x2028=((1.0)*x2022);
IkReal x2029=((1.0)*x2021);
IkReal x2030=(sj5*x2021);
evalcond[0]=(((r21*x2030))+(((-1.0)*r22*x2028))+(((-1.0)*x2027*x2029)));
evalcond[1]=((((-1.0)*x2023*x2029))+(((-1.0)*r12*x2028))+((r11*x2030)));
evalcond[2]=((((-1.0)*r02*x2029))+((x2022*x2026))+(((-1.0)*x2024*x2028)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2028))+(((-1.0)*x2026*x2029))+((x2021*x2024)));
evalcond[4]=((((-1.0)*r21*sj5*x2028))+(((-1.0)*r22*x2029))+(((-1.0)*cj1*x2025))+((sj1*sj2))+((x2022*x2027)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x2022*x2023))+(((-1.0)*r12*x2029))+(((-1.0)*r11*sj5*x2028))+(((-1.0)*sj1*x2025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2031=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2031.valid){
continue;
}
CheckValue<IkReal> x2032 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2031.value)))+(x2032.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2033=IKsin(j4);
IkReal x2034=IKcos(j4);
IkReal x2035=(cj5*r10);
IkReal x2036=(r01*sj5);
IkReal x2037=((1.0)*cj2);
IkReal x2038=(cj5*r00);
IkReal x2039=(cj5*r20);
IkReal x2040=((1.0)*x2034);
IkReal x2041=((1.0)*x2033);
IkReal x2042=(sj5*x2033);
evalcond[0]=(((r21*x2042))+(((-1.0)*r22*x2040))+(((-1.0)*x2039*x2041)));
evalcond[1]=(((r11*x2042))+(((-1.0)*x2035*x2041))+(((-1.0)*r12*x2040)));
evalcond[2]=(((x2034*x2038))+(((-1.0)*r02*x2041))+(((-1.0)*x2036*x2040)));
evalcond[3]=((-1.0)+((x2033*x2036))+(((-1.0)*r02*x2040))+(((-1.0)*x2038*x2041)));
evalcond[4]=(((x2034*x2039))+(((-1.0)*r22*x2041))+(((-1.0)*cj1*x2037))+((sj1*sj2))+(((-1.0)*r21*sj5*x2040)));
evalcond[5]=((((-1.0)*r11*sj5*x2040))+((x2034*x2035))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2037))+(((-1.0)*r12*x2041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2043=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2043;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2043);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2044=((1.0)*cj5);
IkReal x2045=((((-1.0)*r21*x2044))+(((-1.0)*r20*sj5)));
j4eval[0]=x2045;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2044))+((r11*sj5))))));
j4eval[2]=IKsign(x2045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2046=cj5*cj5;
IkReal x2047=r01*r01;
IkReal x2048=(cj5*r00);
IkReal x2049=(r01*sj5);
IkReal x2050=(x2047+(((-2.0)*x2048*x2049))+((x2046*(r00*r00)))+(r02*r02)+(((-1.0)*x2046*x2047)));
j4eval[0]=x2050;
j4eval[1]=((IKabs(r02))+(IKabs((x2048+(((-1.0)*x2049))))));
j4eval[2]=IKsign(x2050);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2051=cj5*cj5;
IkReal x2052=r01*r01;
IkReal x2053=(r01*sj5);
IkReal x2054=(cj5*r00);
CheckValue<IkReal> x2055=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2053*x2054))+x2052+(((-1.0)*x2051*x2052))+(r02*r02)+((x2051*(r00*r00))))),-1);
if(!x2055.valid){
continue;
}
CheckValue<IkReal> x2056 = IKatan2WithCheck(IkReal((x2054+(((-1.0)*x2053)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2055.value)))+(x2056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2057=IKsin(j4);
IkReal x2058=IKcos(j4);
IkReal x2059=(cj5*r10);
IkReal x2060=(r01*sj5);
IkReal x2061=(cj5*r00);
IkReal x2062=(cj5*r20);
IkReal x2063=((1.0)*x2058);
IkReal x2064=((1.0)*x2057);
IkReal x2065=(sj5*x2057);
evalcond[0]=(((r21*x2065))+(((-1.0)*r22*x2063))+(((-1.0)*x2062*x2064)));
evalcond[1]=((((-1.0)*r12*x2063))+((r11*x2065))+(((-1.0)*x2059*x2064)));
evalcond[2]=((((-1.0)*r02*x2064))+((x2058*x2061))+(((-1.0)*x2060*x2063)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2063))+(((-1.0)*x2061*x2064))+((x2057*x2060)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x2064))+(((-1.0)*r11*sj5*x2063))+((cj1*sj2))+((x2058*x2059)));
evalcond[5]=((((-1.0)*r22*x2064))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2058*x2062))+(((-1.0)*r21*sj5*x2063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2066=((1.0)*cj5);
CheckValue<IkReal> x2067=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2066))+(((-1.0)*r20*sj5)))),-1);
if(!x2067.valid){
continue;
}
CheckValue<IkReal> x2068 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2066))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2067.value)))+(x2068.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2069=IKsin(j4);
IkReal x2070=IKcos(j4);
IkReal x2071=(cj5*r10);
IkReal x2072=(r01*sj5);
IkReal x2073=(cj5*r00);
IkReal x2074=(cj5*r20);
IkReal x2075=((1.0)*x2070);
IkReal x2076=((1.0)*x2069);
IkReal x2077=(sj5*x2069);
evalcond[0]=((((-1.0)*r22*x2075))+(((-1.0)*x2074*x2076))+((r21*x2077)));
evalcond[1]=((((-1.0)*r12*x2075))+(((-1.0)*x2071*x2076))+((r11*x2077)));
evalcond[2]=((((-1.0)*r02*x2076))+((x2070*x2073))+(((-1.0)*x2072*x2075)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2075))+((x2069*x2072))+(((-1.0)*x2073*x2076)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x2076))+((cj1*sj2))+(((-1.0)*r11*sj5*x2075))+((x2070*x2071)));
evalcond[5]=((((-1.0)*r22*x2076))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2070*x2074))+(((-1.0)*r21*sj5*x2075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2078 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2078.valid){
continue;
}
CheckValue<IkReal> x2079=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2078.value)+(((1.5707963267949)*(x2079.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2080=IKsin(j4);
IkReal x2081=IKcos(j4);
IkReal x2082=(cj5*r10);
IkReal x2083=(r01*sj5);
IkReal x2084=(cj5*r00);
IkReal x2085=(cj5*r20);
IkReal x2086=((1.0)*x2081);
IkReal x2087=((1.0)*x2080);
IkReal x2088=(sj5*x2080);
evalcond[0]=((((-1.0)*r22*x2086))+(((-1.0)*x2085*x2087))+((r21*x2088)));
evalcond[1]=((((-1.0)*x2082*x2087))+(((-1.0)*r12*x2086))+((r11*x2088)));
evalcond[2]=((((-1.0)*r02*x2087))+((x2081*x2084))+(((-1.0)*x2083*x2086)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2086))+(((-1.0)*x2084*x2087))+((x2080*x2083)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2081*x2082))+(((-1.0)*r11*sj5*x2086))+(((-1.0)*r12*x2087)));
evalcond[5]=((((-1.0)*r21*sj5*x2086))+(((-1.0)*r22*x2087))+((x2081*x2085))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2089=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2089);
rxp1_1=(px*r21);
rxp1_2=(r11*x2089);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2090=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2090);
rxp1_1=(px*r21);
rxp1_2=(r11*x2090);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2091=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2091);
rxp1_1=(px*r21);
rxp1_2=(r11*x2091);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2094=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2094.valid){
continue;
}
IkReal x2092=x2094.value;
IkReal x2093=(sj0*x2092);
cj4array[0]=(((cj2*sj1*x2093))+((cj1*sj2*x2093)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2095=IKsin(j4);
IkReal x2096=IKcos(j4);
IkReal x2097=(cj5*r20);
IkReal x2098=(r21*sj5);
IkReal x2099=((1.0)*x2095);
IkReal x2100=((1.0)*x2096);
evalcond[0]=((-1.0)*r02*x2095);
evalcond[1]=((((-1.0)*r02*x2100))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x2097*x2099))+((x2095*x2098)));
evalcond[3]=(((r11*sj5*x2095))+(((-1.0)*cj5*r10*x2099)));
evalcond[4]=(((x2096*x2097))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2098*x2100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2102=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2102.valid){
continue;
}
IkReal x2101=x2102.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2101))+((cj1*cj2*x2101)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2103=IKsin(j4);
IkReal x2104=IKcos(j4);
IkReal x2105=(r11*sj5);
IkReal x2106=((1.0)*sj0);
IkReal x2107=((1.0)*x2104);
IkReal x2108=((1.0)*cj5*x2103);
evalcond[0]=((-1.0)*r02*x2103);
evalcond[1]=((((-1.0)*r02*x2107))+(((-1.0)*x2106)));
evalcond[2]=((((-1.0)*r20*x2108))+((r21*sj5*x2103)));
evalcond[3]=((((-1.0)*r10*x2108))+((x2103*x2105)));
evalcond[4]=((((-1.0)*x2105*x2107))+(((-1.0)*cj2*sj1*x2106))+((cj5*r10*x2104))+(((-1.0)*cj1*sj2*x2106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2109=IKPowWithIntegerCheck(r02,-1);
if(!x2109.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2109.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2110=IKsin(j4);
IkReal x2111=IKcos(j4);
IkReal x2112=((1.0)*sj0);
IkReal x2113=(cj5*x2111);
IkReal x2114=(sj5*x2110);
IkReal x2115=((1.0)*sj5*x2111);
IkReal x2116=((1.0)*cj5*x2110);
evalcond[0]=((-1.0)*r02*x2110);
evalcond[1]=((((-1.0)*r20*x2116))+((r21*x2114)));
evalcond[2]=((((-1.0)*r10*x2116))+((r11*x2114)));
evalcond[3]=((((-1.0)*r21*x2115))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2113)));
evalcond[4]=((((-1.0)*cj2*sj1*x2112))+((r10*x2113))+(((-1.0)*cj1*sj2*x2112))+(((-1.0)*r11*x2115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2117=((1.0)*sj0);
IkReal x2118=((1.0)*cj0);
CheckValue<IkReal> x2119 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2117))+(((-1.0)*r02*x2118)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x2117))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2118)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2119.valid){
continue;
}
CheckValue<IkReal> x2120=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2119.value)+(((1.5707963267949)*(x2120.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2121=IKsin(j4);
IkReal x2122=IKcos(j4);
IkReal x2123=(cj5*r10);
IkReal x2124=(r01*sj5);
IkReal x2125=((1.0)*cj2);
IkReal x2126=(cj5*r00);
IkReal x2127=((1.0)*sj0);
IkReal x2128=(cj5*r20);
IkReal x2129=(cj1*sj2);
IkReal x2130=((1.0)*x2122);
IkReal x2131=((1.0)*x2121);
IkReal x2132=(sj5*x2121);
evalcond[0]=((((-1.0)*r22*x2130))+((r21*x2132))+(((-1.0)*x2128*x2131)));
evalcond[1]=(cj0+(((-1.0)*r12*x2130))+((r11*x2132))+(((-1.0)*x2123*x2131)));
evalcond[2]=(((x2121*x2124))+(((-1.0)*x2127))+(((-1.0)*x2126*x2131))+(((-1.0)*r02*x2130)));
evalcond[3]=((((-1.0)*r22*x2131))+((x2122*x2128))+((sj1*sj2))+(((-1.0)*cj1*x2125))+(((-1.0)*r21*sj5*x2130)));
evalcond[4]=(((x2122*x2126))+(((-1.0)*cj0*sj1*x2125))+(((-1.0)*cj0*x2129))+(((-1.0)*x2124*x2130))+(((-1.0)*r02*x2131)));
evalcond[5]=(((x2122*x2123))+(((-1.0)*r12*x2131))+(((-1.0)*r11*sj5*x2130))+(((-1.0)*x2127*x2129))+(((-1.0)*sj0*sj1*x2125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2133=((1.0)*cj5);
CheckValue<IkReal> x2134=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2133)))),-1);
if(!x2134.valid){
continue;
}
CheckValue<IkReal> x2135 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2134.value)))+(x2135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2136=IKsin(j4);
IkReal x2137=IKcos(j4);
IkReal x2138=(cj5*r10);
IkReal x2139=(r01*sj5);
IkReal x2140=((1.0)*cj2);
IkReal x2141=(cj5*r00);
IkReal x2142=((1.0)*sj0);
IkReal x2143=(cj5*r20);
IkReal x2144=(cj1*sj2);
IkReal x2145=((1.0)*x2137);
IkReal x2146=((1.0)*x2136);
IkReal x2147=(sj5*x2136);
evalcond[0]=((((-1.0)*x2143*x2146))+(((-1.0)*r22*x2145))+((r21*x2147)));
evalcond[1]=((((-1.0)*x2138*x2146))+((r11*x2147))+cj0+(((-1.0)*r12*x2145)));
evalcond[2]=(((x2136*x2139))+(((-1.0)*r02*x2145))+(((-1.0)*x2142))+(((-1.0)*x2141*x2146)));
evalcond[3]=(((sj1*sj2))+((x2137*x2143))+(((-1.0)*r22*x2146))+(((-1.0)*cj1*x2140))+(((-1.0)*r21*sj5*x2145)));
evalcond[4]=((((-1.0)*cj0*sj1*x2140))+(((-1.0)*r02*x2146))+(((-1.0)*cj0*x2144))+((x2137*x2141))+(((-1.0)*x2139*x2145)));
evalcond[5]=((((-1.0)*x2142*x2144))+(((-1.0)*r11*sj5*x2145))+(((-1.0)*r12*x2146))+((x2137*x2138))+(((-1.0)*sj0*sj1*x2140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2148=((1.0)*cj5);
CheckValue<IkReal> x2149 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2149.valid){
continue;
}
CheckValue<IkReal> x2150=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2148))+(((-1.0)*r00*sj5)))),-1);
if(!x2150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2149.value)+(((1.5707963267949)*(x2150.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2151=IKsin(j4);
IkReal x2152=IKcos(j4);
IkReal x2153=(cj5*r10);
IkReal x2154=(r01*sj5);
IkReal x2155=((1.0)*cj2);
IkReal x2156=(cj5*r00);
IkReal x2157=((1.0)*sj0);
IkReal x2158=(cj5*r20);
IkReal x2159=(cj1*sj2);
IkReal x2160=((1.0)*x2152);
IkReal x2161=((1.0)*x2151);
IkReal x2162=(sj5*x2151);
evalcond[0]=(((r21*x2162))+(((-1.0)*x2158*x2161))+(((-1.0)*r22*x2160)));
evalcond[1]=(cj0+(((-1.0)*x2153*x2161))+(((-1.0)*r12*x2160))+((r11*x2162)));
evalcond[2]=((((-1.0)*x2157))+((x2151*x2154))+(((-1.0)*x2156*x2161))+(((-1.0)*r02*x2160)));
evalcond[3]=((((-1.0)*r21*sj5*x2160))+((x2152*x2158))+((sj1*sj2))+(((-1.0)*cj1*x2155))+(((-1.0)*r22*x2161)));
evalcond[4]=((((-1.0)*x2154*x2160))+(((-1.0)*cj0*sj1*x2155))+((x2152*x2156))+(((-1.0)*cj0*x2159))+(((-1.0)*r02*x2161)));
evalcond[5]=((((-1.0)*sj0*sj1*x2155))+(((-1.0)*r11*sj5*x2160))+((x2152*x2153))+(((-1.0)*x2157*x2159))+(((-1.0)*r12*x2161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2163=cj5*cj5;
IkReal x2164=r21*r21;
IkReal x2165=(sj1*sj2);
IkReal x2166=(r21*sj5);
IkReal x2167=(cj1*cj2);
IkReal x2168=(cj5*r20);
CheckValue<IkReal> x2169 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2167))+((r22*x2165)))),IkReal(((((-1.0)*x2166*x2167))+((x2165*x2166))+((x2167*x2168))+(((-1.0)*x2165*x2168)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2169.valid){
continue;
}
CheckValue<IkReal> x2170=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2166*x2168))+(r22*r22)+x2164+((x2163*(r20*r20)))+(((-1.0)*x2163*x2164)))),-1);
if(!x2170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2169.value)+(((1.5707963267949)*(x2170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2171=IKsin(j4);
IkReal x2172=IKcos(j4);
IkReal x2173=(r21*sj5);
IkReal x2174=(cj5*r20);
IkReal x2175=((1.0)*x2172);
IkReal x2176=((1.0)*x2171);
evalcond[0]=((((-1.0)*x2174*x2176))+((x2171*x2173))+(((-1.0)*r22*x2175)));
evalcond[1]=(((x2172*x2174))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2173*x2175))+(((-1.0)*r22*x2176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2177=(cj5*sj4);
IkReal x2178=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x2178))+(((-1.0)*r00*x2177)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2178))+((r10*x2177))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x2178))+(((-1.0)*r00*x2177))))+IKsqr(((((-1.0)*r11*x2178))+((r10*x2177))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x2178))+(((-1.0)*r00*x2177))), ((((-1.0)*r11*x2178))+((r10*x2177))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2179=IKcos(j0);
IkReal x2180=IKsin(j0);
IkReal x2181=(cj4*cj5);
IkReal x2182=((0.447)*cj2);
IkReal x2183=(r00*sj5);
IkReal x2184=((1.0)*sj2);
IkReal x2185=(r11*sj5);
IkReal x2186=((1.0)*cj5);
IkReal x2187=((1.0)*sj4);
IkReal x2188=(r10*sj5);
IkReal x2189=((0.1134)*cj5);
IkReal x2190=((1.0)*cj2);
IkReal x2191=((0.447)*sj2);
IkReal x2192=((1.0)*cj4);
IkReal x2193=(r01*sj5);
IkReal x2194=(sj1*x2180);
IkReal x2195=(cj1*x2179);
IkReal x2196=(cj1*x2180);
IkReal x2197=(sj1*x2179);
evalcond[0]=((((-1.0)*r10*sj4*x2186))+x2179+((sj4*x2185))+(((-1.0)*r12*x2192)));
evalcond[1]=((((-1.0)*x2180))+(((-1.0)*r00*sj4*x2186))+(((-1.0)*r02*x2192))+((sj4*x2193)));
evalcond[2]=(((cj2*x2195))+(((-1.0)*x2183))+(((-1.0)*x2184*x2197))+(((-1.0)*r01*x2186)));
evalcond[3]=(((cj2*x2196))+(((-1.0)*x2188))+(((-1.0)*x2184*x2194))+(((-1.0)*r11*x2186)));
evalcond[4]=((((-1.0)*x2192*x2193))+(((-1.0)*r02*x2187))+(((-1.0)*x2184*x2195))+(((-1.0)*x2190*x2197))+((r00*x2181)));
evalcond[5]=((((-1.0)*x2185*x2192))+(((-1.0)*x2184*x2196))+(((-1.0)*x2190*x2194))+(((-1.0)*r12*x2187))+((r10*x2181)));
evalcond[6]=((((-0.452)*x2197))+(((-1.0)*x2191*x2195))+(((-1.0)*px))+(((-1.0)*x2182*x2197))+(((-0.1134)*x2183))+(((-1.0)*r01*x2189))+(((-0.1036)*x2180)));
evalcond[7]=((((-0.452)*x2194))+(((-1.0)*x2191*x2196))+(((-1.0)*py))+(((0.1036)*x2179))+(((-1.0)*x2182*x2194))+(((-0.1134)*x2188))+(((-1.0)*r11*x2189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2198=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x2198.valid){
continue;
}
CheckValue<IkReal> x2199 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2199.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2198.value)))+(x2199.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2200=IKcos(j0);
IkReal x2201=IKsin(j0);
IkReal x2202=((0.447)*cj2);
IkReal x2203=(r00*sj5);
IkReal x2204=((1.0)*sj2);
IkReal x2205=(cj1*cj2);
IkReal x2206=((1.0)*cj5);
IkReal x2207=(r10*sj5);
IkReal x2208=((0.1134)*cj5);
IkReal x2209=(sj1*x2201);
IkReal x2210=(sj1*x2200);
IkReal x2211=((0.447)*cj1*sj2);
evalcond[0]=((((-1.0)*x2203))+(((-1.0)*x2204*x2210))+((x2200*x2205))+(((-1.0)*r01*x2206)));
evalcond[1]=((((-1.0)*x2207))+(((-1.0)*x2204*x2209))+(((-1.0)*r11*x2206))+((x2201*x2205)));
evalcond[2]=((((-1.0)*x2202*x2210))+(((-0.452)*x2210))+(((-0.1036)*x2201))+(((-1.0)*px))+(((-1.0)*x2200*x2211))+(((-0.1134)*x2203))+(((-1.0)*r01*x2208)));
evalcond[3]=((((-1.0)*r11*x2208))+(((-0.452)*x2209))+(((-1.0)*x2202*x2209))+(((-1.0)*py))+(((0.1036)*x2200))+(((-0.1134)*x2207))+(((-1.0)*x2201*x2211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2212=((1.0)*cj5);
IkReal x2213=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2212)));
j4eval[0]=x2213;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2212)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2213);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2214=((1.0)*cj5);
IkReal x2215=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2214)));
j4eval[0]=x2215;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x2214))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x2215);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2216=((1.0)*sj0);
IkReal x2217=((1.0)*cj0);
IkReal x2218=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2218;
j4eval[1]=((IKabs(((((-1.0)*r12*x2216))+(((-1.0)*r02*x2217)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2217))+(((-1.0)*r11*sj5*x2216))))));
j4eval[2]=IKsign(x2218);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2219=((-1.0)*r20);
IkReal x2221 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2221)==0){
continue;
}
IkReal x2220=pow(x2221,-0.5);
CheckValue<IkReal> x2222 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2219),IKFAST_ATAN2_MAGTHRESH);
if(!x2222.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2222.value));
IkReal gconst79=(r21*x2220);
IkReal gconst80=(x2219*x2220);
CheckValue<IkReal> x2223 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2223.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2223.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2224=((-1.0)*r20);
IkReal x2225=x2220;
CheckValue<IkReal> x2227 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2224),IKFAST_ATAN2_MAGTHRESH);
if(!x2227.valid){
continue;
}
IkReal x2226=((-1.0)*(x2227.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2226;
IkReal gconst78=x2226;
IkReal gconst79=(r21*x2225);
IkReal gconst80=(x2224*x2225);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2228=((-1.0)*r20);
IkReal x2229=x2220;
CheckValue<IkReal> x2231 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2228),IKFAST_ATAN2_MAGTHRESH);
if(!x2231.valid){
continue;
}
IkReal x2230=((-1.0)*(x2231.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2230;
IkReal gconst78=x2230;
IkReal gconst79=(r21*x2229);
IkReal gconst80=(x2228*x2229);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2232=((-1.0)*r20);
IkReal x2233=x2220;
CheckValue<IkReal> x2235 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2232),IKFAST_ATAN2_MAGTHRESH);
if(!x2235.valid){
continue;
}
IkReal x2234=((-1.0)*(x2235.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2234;
IkReal gconst78=x2234;
IkReal gconst79=(r21*x2233);
IkReal gconst80=(x2232*x2233);
IkReal x2236=r22*r22;
CheckValue<IkReal> x2239=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2236))),-1);
if(!x2239.valid){
continue;
}
IkReal x2237=x2239.value;
IkReal x2238=(((x2237*(r21*r21*r21*r21)))+x2236+((x2237*(r20*r20*r20*r20)))+(((2.0)*x2237*(r20*r20)*(r21*r21))));
j4eval[0]=x2238;
j4eval[1]=IKsign(x2238);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2240=(sj1*sj2);
IkReal x2241=(gconst80*r20);
IkReal x2242=(gconst79*r21);
IkReal x2243=(cj1*cj2);
CheckValue<IkReal> x2244 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2243))+((r22*x2240)))),IkReal((((x2241*x2243))+(((-1.0)*x2242*x2243))+(((-1.0)*x2240*x2241))+((x2240*x2242)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2244.valid){
continue;
}
CheckValue<IkReal> x2245=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2241*x2242))+(r22*r22)+(x2242*x2242)+(x2241*x2241))),-1);
if(!x2245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2244.value)+(((1.5707963267949)*(x2245.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2246=IKsin(j4);
IkReal x2247=IKcos(j4);
IkReal x2248=(gconst79*r01);
IkReal x2249=(gconst79*r21);
IkReal x2250=((1.0)*cj2);
IkReal x2251=(gconst79*r11);
IkReal x2252=((1.0)*sj0);
IkReal x2253=(cj1*sj2);
IkReal x2254=((1.0)*x2247);
IkReal x2255=(gconst80*x2247);
IkReal x2256=((1.0)*x2246);
IkReal x2257=(gconst80*x2256);
evalcond[0]=((((-1.0)*r22*x2254))+((x2246*x2249))+(((-1.0)*r20*x2257)));
evalcond[1]=(((x2246*x2251))+cj0+(((-1.0)*r12*x2254))+(((-1.0)*r10*x2257)));
evalcond[2]=(((x2246*x2248))+(((-1.0)*r02*x2254))+(((-1.0)*x2252))+(((-1.0)*r00*x2257)));
evalcond[3]=((((-1.0)*x2249*x2254))+(((-1.0)*r22*x2256))+((sj1*sj2))+((r20*x2255))+(((-1.0)*cj1*x2250)));
evalcond[4]=((((-1.0)*r02*x2256))+(((-1.0)*cj0*x2253))+(((-1.0)*x2248*x2254))+((r00*x2255))+(((-1.0)*cj0*sj1*x2250)));
evalcond[5]=(((r10*x2255))+(((-1.0)*sj0*sj1*x2250))+(((-1.0)*r12*x2256))+(((-1.0)*x2252*x2253))+(((-1.0)*x2251*x2254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2258=((1.0)*gconst80);
CheckValue<IkReal> x2259 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2258))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2259.valid){
continue;
}
CheckValue<IkReal> x2260=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2258))+(((-1.0)*gconst79*r10)))),-1);
if(!x2260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2259.value)+(((1.5707963267949)*(x2260.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2261=IKsin(j4);
IkReal x2262=IKcos(j4);
IkReal x2263=(gconst79*r01);
IkReal x2264=(gconst79*r21);
IkReal x2265=((1.0)*cj2);
IkReal x2266=(gconst79*r11);
IkReal x2267=((1.0)*sj0);
IkReal x2268=(cj1*sj2);
IkReal x2269=((1.0)*x2262);
IkReal x2270=(gconst80*x2262);
IkReal x2271=((1.0)*x2261);
IkReal x2272=(gconst80*x2271);
evalcond[0]=((((-1.0)*r20*x2272))+((x2261*x2264))+(((-1.0)*r22*x2269)));
evalcond[1]=(cj0+((x2261*x2266))+(((-1.0)*r10*x2272))+(((-1.0)*r12*x2269)));
evalcond[2]=((((-1.0)*r00*x2272))+((x2261*x2263))+(((-1.0)*r02*x2269))+(((-1.0)*x2267)));
evalcond[3]=((((-1.0)*cj1*x2265))+((sj1*sj2))+(((-1.0)*r22*x2271))+((r20*x2270))+(((-1.0)*x2264*x2269)));
evalcond[4]=(((r00*x2270))+(((-1.0)*cj0*sj1*x2265))+(((-1.0)*x2263*x2269))+(((-1.0)*r02*x2271))+(((-1.0)*cj0*x2268)));
evalcond[5]=((((-1.0)*sj0*sj1*x2265))+((r10*x2270))+(((-1.0)*x2267*x2268))+(((-1.0)*r12*x2271))+(((-1.0)*x2266*x2269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2273=((1.0)*gconst80);
CheckValue<IkReal> x2274 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2273)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2274.valid){
continue;
}
CheckValue<IkReal> x2275=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2273))+(((-1.0)*gconst79*r00)))),-1);
if(!x2275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2274.value)+(((1.5707963267949)*(x2275.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2276=IKsin(j4);
IkReal x2277=IKcos(j4);
IkReal x2278=(gconst79*r01);
IkReal x2279=(gconst79*r21);
IkReal x2280=((1.0)*cj2);
IkReal x2281=(gconst79*r11);
IkReal x2282=((1.0)*sj0);
IkReal x2283=(cj1*sj2);
IkReal x2284=((1.0)*x2277);
IkReal x2285=(gconst80*x2277);
IkReal x2286=((1.0)*x2276);
IkReal x2287=(gconst80*x2286);
evalcond[0]=(((x2276*x2279))+(((-1.0)*r20*x2287))+(((-1.0)*r22*x2284)));
evalcond[1]=(cj0+(((-1.0)*r12*x2284))+(((-1.0)*r10*x2287))+((x2276*x2281)));
evalcond[2]=((((-1.0)*r02*x2284))+(((-1.0)*x2282))+((x2276*x2278))+(((-1.0)*r00*x2287)));
evalcond[3]=(((r20*x2285))+((sj1*sj2))+(((-1.0)*x2279*x2284))+(((-1.0)*cj1*x2280))+(((-1.0)*r22*x2286)));
evalcond[4]=((((-1.0)*r02*x2286))+(((-1.0)*cj0*x2283))+(((-1.0)*cj0*sj1*x2280))+(((-1.0)*x2278*x2284))+((r00*x2285)));
evalcond[5]=((((-1.0)*x2282*x2283))+((r10*x2285))+(((-1.0)*r12*x2286))+(((-1.0)*x2281*x2284))+(((-1.0)*sj0*sj1*x2280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2288=((-1.0)*r21);
IkReal x2290 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2290)==0){
continue;
}
IkReal x2289=pow(x2290,-0.5);
CheckValue<IkReal> x2291 = IKatan2WithCheck(IkReal(x2288),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2291.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2291.value))));
IkReal gconst82=(x2288*x2289);
IkReal gconst83=((1.0)*r20*x2289);
CheckValue<IkReal> x2292 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2292.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2292.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2293=((-1.0)*r21);
CheckValue<IkReal> x2296 = IKatan2WithCheck(IkReal(x2293),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2296.valid){
continue;
}
IkReal x2294=((1.0)*(x2296.value));
IkReal x2295=x2289;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2294)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2294)));
IkReal gconst82=(x2293*x2295);
IkReal gconst83=((1.0)*r20*x2295);
IkReal x2297=r22*r22;
IkReal x2298=((1.0)*x2297);
CheckValue<IkReal> x2302=IKPowWithIntegerCheck(((-1.0)+x2297),-1);
if(!x2302.valid){
continue;
}
IkReal x2299=x2302.value;
if((((1.0)+(((-1.0)*x2298)))) < -0.00001)
continue;
IkReal x2300=IKsqrt(((1.0)+(((-1.0)*x2298))));
IkReal x2301=(cj0*x2299*x2300);
j4eval[0]=((IKabs((x2301+(((-1.0)*x2298*x2301)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2303=((-1.0)*r21);
CheckValue<IkReal> x2306 = IKatan2WithCheck(IkReal(x2303),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2306.valid){
continue;
}
IkReal x2304=((1.0)*(x2306.value));
IkReal x2305=x2289;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2304)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2304)));
IkReal gconst82=(x2303*x2305);
IkReal gconst83=((1.0)*r20*x2305);
IkReal x2307=r22*r22;
IkReal x2308=((1.0)*x2307);
CheckValue<IkReal> x2312=IKPowWithIntegerCheck(((-1.0)+x2307),-1);
if(!x2312.valid){
continue;
}
IkReal x2309=x2312.value;
if((((1.0)+(((-1.0)*x2308)))) < -0.00001)
continue;
IkReal x2310=IKsqrt(((1.0)+(((-1.0)*x2308))));
IkReal x2311=(sj0*x2309*x2310);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2311+(((-1.0)*x2308*x2311))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2313=((-1.0)*r21);
CheckValue<IkReal> x2316 = IKatan2WithCheck(IkReal(x2313),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2316.valid){
continue;
}
IkReal x2314=((1.0)*(x2316.value));
IkReal x2315=x2289;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2314)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2314)));
IkReal gconst82=(x2313*x2315);
IkReal gconst83=((1.0)*r20*x2315);
IkReal x2317=r22*r22;
IkReal x2318=(r12*sj0);
IkReal x2319=(cj0*r02);
CheckValue<IkReal> x2323=IKPowWithIntegerCheck(((-1.0)+x2317),-1);
if(!x2323.valid){
continue;
}
IkReal x2320=x2323.value;
if((((1.0)+(((-1.0)*x2317)))) < -0.00001)
continue;
IkReal x2321=IKsqrt(((1.0)+(((-1.0)*x2317))));
IkReal x2322=(r22*x2320*x2321);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x2319*x2322))+((x2318*x2322)))))+(IKabs(((((-1.0)*x2319))+(((-1.0)*x2318))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2324=((1.0)*sj0);
IkReal x2325=((1.0)*cj0);
CheckValue<IkReal> x2326=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2326.valid){
continue;
}
CheckValue<IkReal> x2327 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2324))+(((-1.0)*r02*x2325)))),IkReal((((gconst83*r10*sj0))+((cj0*gconst83*r00))+(((-1.0)*gconst82*r11*x2324))+(((-1.0)*gconst82*r01*x2325)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2326.value)))+(x2327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2328=IKsin(j4);
IkReal x2329=IKcos(j4);
IkReal x2330=(gconst82*r11);
IkReal x2331=((1.0)*cj2);
IkReal x2332=((1.0)*sj0);
IkReal x2333=(cj1*sj2);
IkReal x2334=((1.0)*x2329);
IkReal x2335=(gconst83*x2329);
IkReal x2336=(gconst82*x2328);
IkReal x2337=((1.0)*x2328);
evalcond[0]=(((r21*x2336))+(((-1.0)*r22*x2334))+(((-1.0)*gconst83*r20*x2337)));
evalcond[1]=((((-1.0)*gconst83*r10*x2337))+cj0+(((-1.0)*r12*x2334))+((x2328*x2330)));
evalcond[2]=((((-1.0)*x2332))+((r01*x2336))+(((-1.0)*r02*x2334))+(((-1.0)*gconst83*r00*x2337)));
evalcond[3]=((((-1.0)*r22*x2337))+(((-1.0)*gconst82*r21*x2334))+((sj1*sj2))+(((-1.0)*cj1*x2331))+((r20*x2335)));
evalcond[4]=((((-1.0)*gconst82*r01*x2334))+(((-1.0)*cj0*sj1*x2331))+((r00*x2335))+(((-1.0)*r02*x2337))+(((-1.0)*cj0*x2333)));
evalcond[5]=((((-1.0)*x2332*x2333))+(((-1.0)*sj0*sj1*x2331))+(((-1.0)*r12*x2337))+(((-1.0)*x2330*x2334))+((r10*x2335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2338=((1.0)*gconst83);
CheckValue<IkReal> x2339=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x2338)))),-1);
if(!x2339.valid){
continue;
}
CheckValue<IkReal> x2340 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2339.value)))+(x2340.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2341=IKsin(j4);
IkReal x2342=IKcos(j4);
IkReal x2343=(gconst82*r11);
IkReal x2344=((1.0)*cj2);
IkReal x2345=((1.0)*sj0);
IkReal x2346=(cj1*sj2);
IkReal x2347=((1.0)*x2342);
IkReal x2348=(gconst83*x2342);
IkReal x2349=(gconst82*x2341);
IkReal x2350=((1.0)*x2341);
evalcond[0]=((((-1.0)*gconst83*r20*x2350))+(((-1.0)*r22*x2347))+((r21*x2349)));
evalcond[1]=(cj0+((x2341*x2343))+(((-1.0)*gconst83*r10*x2350))+(((-1.0)*r12*x2347)));
evalcond[2]=(((r01*x2349))+(((-1.0)*gconst83*r00*x2350))+(((-1.0)*r02*x2347))+(((-1.0)*x2345)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2344))+(((-1.0)*r22*x2350))+((r20*x2348))+(((-1.0)*gconst82*r21*x2347)));
evalcond[4]=(((r00*x2348))+(((-1.0)*cj0*x2346))+(((-1.0)*r02*x2350))+(((-1.0)*gconst82*r01*x2347))+(((-1.0)*cj0*sj1*x2344)));
evalcond[5]=((((-1.0)*x2345*x2346))+(((-1.0)*sj0*sj1*x2344))+((r10*x2348))+(((-1.0)*x2343*x2347))+(((-1.0)*r12*x2350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2351=((1.0)*gconst83);
CheckValue<IkReal> x2352 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2351)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2352.valid){
continue;
}
CheckValue<IkReal> x2353=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2351))+(((-1.0)*gconst82*r00)))),-1);
if(!x2353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2352.value)+(((1.5707963267949)*(x2353.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2354=IKsin(j4);
IkReal x2355=IKcos(j4);
IkReal x2356=(gconst82*r11);
IkReal x2357=((1.0)*cj2);
IkReal x2358=((1.0)*sj0);
IkReal x2359=(cj1*sj2);
IkReal x2360=((1.0)*x2355);
IkReal x2361=(gconst83*x2355);
IkReal x2362=(gconst82*x2354);
IkReal x2363=((1.0)*x2354);
evalcond[0]=((((-1.0)*r22*x2360))+((r21*x2362))+(((-1.0)*gconst83*r20*x2363)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x2363))+((x2354*x2356))+(((-1.0)*r12*x2360)));
evalcond[2]=((((-1.0)*gconst83*r00*x2363))+((r01*x2362))+(((-1.0)*x2358))+(((-1.0)*r02*x2360)));
evalcond[3]=(((r20*x2361))+((sj1*sj2))+(((-1.0)*cj1*x2357))+(((-1.0)*r22*x2363))+(((-1.0)*gconst82*r21*x2360)));
evalcond[4]=((((-1.0)*gconst82*r01*x2360))+(((-1.0)*cj0*x2359))+(((-1.0)*cj0*sj1*x2357))+((r00*x2361))+(((-1.0)*r02*x2363)));
evalcond[5]=((((-1.0)*x2358*x2359))+(((-1.0)*sj0*sj1*x2357))+((r10*x2361))+(((-1.0)*x2356*x2360))+(((-1.0)*r12*x2363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2364=((-1.0)*r10);
IkReal x2366 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2366)==0){
continue;
}
IkReal x2365=pow(x2366,-0.5);
CheckValue<IkReal> x2367 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2364),IKFAST_ATAN2_MAGTHRESH);
if(!x2367.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2367.value));
IkReal gconst85=(r11*x2365);
IkReal gconst86=(x2364*x2365);
CheckValue<IkReal> x2368 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2368.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2368.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2369=((-1.0)*r10);
IkReal x2370=x2365;
CheckValue<IkReal> x2372 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2369),IKFAST_ATAN2_MAGTHRESH);
if(!x2372.valid){
continue;
}
IkReal x2371=((-1.0)*(x2372.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2371;
IkReal gconst84=x2371;
IkReal gconst85=(r11*x2370);
IkReal gconst86=(x2369*x2370);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2373=((1.0)*sj0);
IkReal x2374=((1.0)*gconst85);
CheckValue<IkReal> x2375 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2373)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*gconst85*r11*x2373))+(((-1.0)*cj0*r01*x2374))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2375.valid){
continue;
}
CheckValue<IkReal> x2376=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2374)))),-1);
if(!x2376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2375.value)+(((1.5707963267949)*(x2376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2377=IKsin(j4);
IkReal x2378=IKcos(j4);
IkReal x2379=(gconst85*r21);
IkReal x2380=(gconst86*r00);
IkReal x2381=(gconst86*r10);
IkReal x2382=((1.0)*cj2);
IkReal x2383=(gconst85*r11);
IkReal x2384=(gconst85*r01);
IkReal x2385=((1.0)*sj0);
IkReal x2386=(gconst86*r20);
IkReal x2387=(cj1*sj2);
IkReal x2388=((1.0)*x2378);
IkReal x2389=((1.0)*x2377);
evalcond[0]=((((-1.0)*x2386*x2389))+(((-1.0)*r22*x2388))+((x2377*x2379)));
evalcond[1]=((((-1.0)*r12*x2388))+(((-1.0)*x2381*x2389))+cj0+((x2377*x2383)));
evalcond[2]=((((-1.0)*x2380*x2389))+(((-1.0)*r02*x2388))+(((-1.0)*x2385))+((x2377*x2384)));
evalcond[3]=((((-1.0)*cj1*x2382))+((sj1*sj2))+(((-1.0)*r22*x2389))+(((-1.0)*x2379*x2388))+((x2378*x2386)));
evalcond[4]=((((-1.0)*r02*x2389))+(((-1.0)*cj0*sj1*x2382))+(((-1.0)*cj0*x2387))+(((-1.0)*x2384*x2388))+((x2378*x2380)));
evalcond[5]=((((-1.0)*r12*x2389))+(((-1.0)*x2383*x2388))+(((-1.0)*sj0*sj1*x2382))+(((-1.0)*x2385*x2387))+((x2378*x2381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2390=((1.0)*gconst86);
CheckValue<IkReal> x2391=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2390))+(((-1.0)*gconst85*r00)))),-1);
if(!x2391.valid){
continue;
}
CheckValue<IkReal> x2392 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2390))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2391.value)))+(x2392.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2393=IKsin(j4);
IkReal x2394=IKcos(j4);
IkReal x2395=(gconst85*r21);
IkReal x2396=(gconst86*r00);
IkReal x2397=(gconst86*r10);
IkReal x2398=((1.0)*cj2);
IkReal x2399=(gconst85*r11);
IkReal x2400=(gconst85*r01);
IkReal x2401=((1.0)*sj0);
IkReal x2402=(gconst86*r20);
IkReal x2403=(cj1*sj2);
IkReal x2404=((1.0)*x2394);
IkReal x2405=((1.0)*x2393);
evalcond[0]=(((x2393*x2395))+(((-1.0)*x2402*x2405))+(((-1.0)*r22*x2404)));
evalcond[1]=(cj0+(((-1.0)*x2397*x2405))+((x2393*x2399))+(((-1.0)*r12*x2404)));
evalcond[2]=((((-1.0)*x2401))+((x2393*x2400))+(((-1.0)*r02*x2404))+(((-1.0)*x2396*x2405)));
evalcond[3]=((((-1.0)*cj1*x2398))+((sj1*sj2))+(((-1.0)*x2395*x2404))+((x2394*x2402))+(((-1.0)*r22*x2405)));
evalcond[4]=((((-1.0)*x2400*x2404))+(((-1.0)*cj0*sj1*x2398))+(((-1.0)*r02*x2405))+((x2394*x2396))+(((-1.0)*cj0*x2403)));
evalcond[5]=((((-1.0)*x2401*x2403))+(((-1.0)*x2399*x2404))+((x2394*x2397))+(((-1.0)*r12*x2405))+(((-1.0)*sj0*sj1*x2398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2406=((-1.0)*r11);
IkReal x2408 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2408)==0){
continue;
}
IkReal x2407=pow(x2408,-0.5);
CheckValue<IkReal> x2409 = IKatan2WithCheck(IkReal(x2406),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2409.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2409.value))));
IkReal gconst88=(x2406*x2407);
IkReal gconst89=((1.0)*r10*x2407);
CheckValue<IkReal> x2410 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2410.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2410.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2411=((-1.0)*r11);
CheckValue<IkReal> x2414 = IKatan2WithCheck(IkReal(x2411),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2414.valid){
continue;
}
IkReal x2412=((1.0)*(x2414.value));
IkReal x2413=x2407;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2412)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2412)));
IkReal gconst88=(x2411*x2413);
IkReal gconst89=((1.0)*r10*x2413);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2415=((-1.0)*r11);
CheckValue<IkReal> x2418 = IKatan2WithCheck(IkReal(x2415),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2418.valid){
continue;
}
IkReal x2416=((1.0)*(x2418.value));
IkReal x2417=x2407;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2416)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2416)));
IkReal gconst88=(x2415*x2417);
IkReal gconst89=((1.0)*r10*x2417);
IkReal x2419=r12*r12;
IkReal x2420=((1.0)*sj0);
IkReal x2421=(cj0*r02);
IkReal x2422=x2407;
j4eval[0]=((IKabs((((r12*x2421*x2422))+(((-1.0)*x2420*x2422))+((sj0*x2419*x2422)))))+(IKabs(((((-1.0)*r12*x2420))+(((-1.0)*x2421))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2423=((-1.0)*r11);
CheckValue<IkReal> x2426 = IKatan2WithCheck(IkReal(x2423),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2426.valid){
continue;
}
IkReal x2424=((1.0)*(x2426.value));
IkReal x2425=x2407;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2424)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2424)));
IkReal gconst88=(x2423*x2425);
IkReal gconst89=((1.0)*r10*x2425);
IkReal x2427=r12*r12;
IkReal x2428=(cj1*cj2*r22);
IkReal x2429=(r22*sj1*sj2);
CheckValue<IkReal> x2433=IKPowWithIntegerCheck(((-1.0)+x2427),-1);
if(!x2433.valid){
continue;
}
IkReal x2430=x2433.value;
if((((1.0)+(((-1.0)*x2427)))) < -0.00001)
continue;
IkReal x2431=IKsqrt(((1.0)+(((-1.0)*x2427))));
IkReal x2432=(r12*x2430*x2431);
j4eval[0]=((IKabs((((x2428*x2432))+(((-1.0)*x2429*x2432)))))+(IKabs((x2429+(((-1.0)*x2428))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2434=(cj1*cj2);
IkReal x2435=(gconst89*r20);
IkReal x2436=(gconst88*r21);
IkReal x2437=(sj1*sj2);
CheckValue<IkReal> x2438=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2435*x2435)+(((-2.0)*x2435*x2436))+(x2436*x2436))),-1);
if(!x2438.valid){
continue;
}
CheckValue<IkReal> x2439 = IKatan2WithCheck(IkReal((((r22*x2437))+(((-1.0)*r22*x2434)))),IkReal(((((-1.0)*x2435*x2437))+((x2436*x2437))+((x2434*x2435))+(((-1.0)*x2434*x2436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2438.value)))+(x2439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2440=IKsin(j4);
IkReal x2441=IKcos(j4);
IkReal x2442=((1.0)*sj0);
IkReal x2443=((1.0)*cj2);
IkReal x2444=(gconst89*r20);
IkReal x2445=(gconst89*r10);
IkReal x2446=(gconst89*r00);
IkReal x2447=(cj1*sj2);
IkReal x2448=((1.0)*x2441);
IkReal x2449=((1.0)*x2440);
IkReal x2450=(gconst88*x2440);
evalcond[0]=((((-1.0)*x2444*x2449))+(((-1.0)*r22*x2448))+((r21*x2450)));
evalcond[1]=(cj0+(((-1.0)*x2445*x2449))+(((-1.0)*r12*x2448))+((r11*x2450)));
evalcond[2]=(((r01*x2450))+(((-1.0)*x2446*x2449))+(((-1.0)*x2442))+(((-1.0)*r02*x2448)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2443))+(((-1.0)*r22*x2449))+((x2441*x2444))+(((-1.0)*gconst88*r21*x2448)));
evalcond[4]=((((-1.0)*cj0*x2447))+(((-1.0)*gconst88*r01*x2448))+(((-1.0)*cj0*sj1*x2443))+((x2441*x2446))+(((-1.0)*r02*x2449)));
evalcond[5]=((((-1.0)*cj2*sj1*x2442))+(((-1.0)*r12*x2449))+(((-1.0)*gconst88*r11*x2448))+((x2441*x2445))+(((-1.0)*x2442*x2447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2451=((1.0)*sj0);
IkReal x2452=((1.0)*cj0);
CheckValue<IkReal> x2453 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2451))+(((-1.0)*r02*x2452)))),IkReal(((((-1.0)*gconst88*r01*x2452))+((cj0*gconst89*r00))+(((-1.0)*gconst88*r11*x2451))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2453.valid){
continue;
}
CheckValue<IkReal> x2454=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2453.value)+(((1.5707963267949)*(x2454.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2455=IKsin(j4);
IkReal x2456=IKcos(j4);
IkReal x2457=((1.0)*sj0);
IkReal x2458=((1.0)*cj2);
IkReal x2459=(gconst89*r20);
IkReal x2460=(gconst89*r10);
IkReal x2461=(gconst89*r00);
IkReal x2462=(cj1*sj2);
IkReal x2463=((1.0)*x2456);
IkReal x2464=((1.0)*x2455);
IkReal x2465=(gconst88*x2455);
evalcond[0]=((((-1.0)*r22*x2463))+((r21*x2465))+(((-1.0)*x2459*x2464)));
evalcond[1]=(cj0+(((-1.0)*r12*x2463))+((r11*x2465))+(((-1.0)*x2460*x2464)));
evalcond[2]=(((r01*x2465))+(((-1.0)*r02*x2463))+(((-1.0)*x2457))+(((-1.0)*x2461*x2464)));
evalcond[3]=((((-1.0)*gconst88*r21*x2463))+(((-1.0)*r22*x2464))+((sj1*sj2))+((x2456*x2459))+(((-1.0)*cj1*x2458)));
evalcond[4]=((((-1.0)*gconst88*r01*x2463))+(((-1.0)*cj0*x2462))+(((-1.0)*cj0*sj1*x2458))+((x2456*x2461))+(((-1.0)*r02*x2464)));
evalcond[5]=((((-1.0)*gconst88*r11*x2463))+(((-1.0)*x2457*x2462))+(((-1.0)*r12*x2464))+(((-1.0)*cj2*sj1*x2457))+((x2456*x2460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2466=((1.0)*gconst89);
CheckValue<IkReal> x2467=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2466))+(((-1.0)*gconst88*r00)))),-1);
if(!x2467.valid){
continue;
}
CheckValue<IkReal> x2468 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2466))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2467.value)))+(x2468.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2469=IKsin(j4);
IkReal x2470=IKcos(j4);
IkReal x2471=((1.0)*sj0);
IkReal x2472=((1.0)*cj2);
IkReal x2473=(gconst89*r20);
IkReal x2474=(gconst89*r10);
IkReal x2475=(gconst89*r00);
IkReal x2476=(cj1*sj2);
IkReal x2477=((1.0)*x2470);
IkReal x2478=((1.0)*x2469);
IkReal x2479=(gconst88*x2469);
evalcond[0]=(((r21*x2479))+(((-1.0)*x2473*x2478))+(((-1.0)*r22*x2477)));
evalcond[1]=((((-1.0)*r12*x2477))+cj0+(((-1.0)*x2474*x2478))+((r11*x2479)));
evalcond[2]=(((r01*x2479))+(((-1.0)*x2471))+(((-1.0)*x2475*x2478))+(((-1.0)*r02*x2477)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*gconst88*r21*x2477))+(((-1.0)*r22*x2478))+(((-1.0)*cj1*x2472))+((x2470*x2473)));
evalcond[4]=((((-1.0)*gconst88*r01*x2477))+(((-1.0)*cj0*sj1*x2472))+(((-1.0)*cj0*x2476))+(((-1.0)*r02*x2478))+((x2470*x2475)));
evalcond[5]=((((-1.0)*gconst88*r11*x2477))+(((-1.0)*r12*x2478))+(((-1.0)*x2471*x2476))+(((-1.0)*cj2*sj1*x2471))+((x2470*x2474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2480=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2480;
j4eval[1]=IKsign(x2480);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2481=((1.0)*cj5);
IkReal x2482=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2481)));
j4eval[0]=x2482;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2481))))));
j4eval[2]=IKsign(x2482);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2483=cj5*cj5;
IkReal x2484=r11*r11;
IkReal x2485=(r11*sj5);
IkReal x2486=(cj5*r10);
IkReal x2487=((r12*r12)+x2484+((x2483*(r10*r10)))+(((-2.0)*x2485*x2486))+(((-1.0)*x2483*x2484)));
j4eval[0]=x2487;
j4eval[1]=IKsign(x2487);
j4eval[2]=((IKabs(r12))+(IKabs((x2486+(((-1.0)*x2485))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2488=cj5*cj5;
IkReal x2489=r11*r11;
IkReal x2490=(cj5*r10);
IkReal x2491=(r11*sj5);
CheckValue<IkReal> x2492 = IKatan2WithCheck(IkReal((x2490+(((-1.0)*x2491)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2492.valid){
continue;
}
CheckValue<IkReal> x2493=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2489+(((-1.0)*x2488*x2489))+((x2488*(r10*r10)))+(((-2.0)*x2490*x2491)))),-1);
if(!x2493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2492.value)+(((1.5707963267949)*(x2493.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2494=IKsin(j4);
IkReal x2495=IKcos(j4);
IkReal x2496=(cj5*r10);
IkReal x2497=(r01*sj5);
IkReal x2498=((1.0)*cj2);
IkReal x2499=(cj5*r00);
IkReal x2500=(cj5*r20);
IkReal x2501=((1.0)*x2495);
IkReal x2502=((1.0)*x2494);
IkReal x2503=(sj5*x2494);
evalcond[0]=((((-1.0)*r22*x2501))+(((-1.0)*x2500*x2502))+((r21*x2503)));
evalcond[1]=((((-1.0)*r02*x2501))+((x2494*x2497))+(((-1.0)*x2499*x2502)));
evalcond[2]=(((x2495*x2496))+(((-1.0)*r12*x2502))+(((-1.0)*r11*sj5*x2501)));
evalcond[3]=((1.0)+(((-1.0)*x2496*x2502))+(((-1.0)*r12*x2501))+((r11*x2503)));
evalcond[4]=(((x2495*x2500))+((sj1*sj2))+(((-1.0)*r22*x2502))+(((-1.0)*cj1*x2498))+(((-1.0)*r21*sj5*x2501)));
evalcond[5]=((((-1.0)*r02*x2502))+((x2495*x2499))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2498))+(((-1.0)*x2497*x2501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2504=((1.0)*cj5);
CheckValue<IkReal> x2505 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2504)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2505.valid){
continue;
}
CheckValue<IkReal> x2506=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2504)))),-1);
if(!x2506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2505.value)+(((1.5707963267949)*(x2506.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2507=IKsin(j4);
IkReal x2508=IKcos(j4);
IkReal x2509=(cj5*r10);
IkReal x2510=(r01*sj5);
IkReal x2511=((1.0)*cj2);
IkReal x2512=(cj5*r00);
IkReal x2513=(cj5*r20);
IkReal x2514=((1.0)*x2508);
IkReal x2515=((1.0)*x2507);
IkReal x2516=(sj5*x2507);
evalcond[0]=((((-1.0)*x2513*x2515))+(((-1.0)*r22*x2514))+((r21*x2516)));
evalcond[1]=((((-1.0)*x2512*x2515))+((x2507*x2510))+(((-1.0)*r02*x2514)));
evalcond[2]=((((-1.0)*r12*x2515))+((x2508*x2509))+(((-1.0)*r11*sj5*x2514)));
evalcond[3]=((1.0)+((r11*x2516))+(((-1.0)*r12*x2514))+(((-1.0)*x2509*x2515)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x2515))+((x2508*x2513))+(((-1.0)*cj1*x2511))+(((-1.0)*r21*sj5*x2514)));
evalcond[5]=((((-1.0)*sj1*x2511))+(((-1.0)*x2510*x2514))+(((-1.0)*cj1*sj2))+((x2508*x2512))+(((-1.0)*r02*x2515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2517=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2517.valid){
continue;
}
CheckValue<IkReal> x2518 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2517.value)))+(x2518.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2519=IKsin(j4);
IkReal x2520=IKcos(j4);
IkReal x2521=(cj5*r10);
IkReal x2522=(r01*sj5);
IkReal x2523=((1.0)*cj2);
IkReal x2524=(cj5*r00);
IkReal x2525=(cj5*r20);
IkReal x2526=((1.0)*x2520);
IkReal x2527=((1.0)*x2519);
IkReal x2528=(sj5*x2519);
evalcond[0]=((((-1.0)*x2525*x2527))+((r21*x2528))+(((-1.0)*r22*x2526)));
evalcond[1]=((((-1.0)*x2524*x2527))+((x2519*x2522))+(((-1.0)*r02*x2526)));
evalcond[2]=((((-1.0)*r12*x2527))+(((-1.0)*r11*sj5*x2526))+((x2520*x2521)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2526))+((r11*x2528))+(((-1.0)*x2521*x2527)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x2523))+(((-1.0)*r21*sj5*x2526))+((x2520*x2525))+(((-1.0)*r22*x2527)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x2522*x2526))+(((-1.0)*r02*x2527))+((x2520*x2524))+(((-1.0)*sj1*x2523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2529=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2529;
j4eval[1]=IKsign(x2529);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2530=((1.0)*cj5);
IkReal x2531=((((-1.0)*r21*x2530))+(((-1.0)*r20*sj5)));
j4eval[0]=x2531;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2530))))));
j4eval[2]=IKsign(x2531);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2532=cj5*cj5;
IkReal x2533=r11*r11;
IkReal x2534=(cj5*r10);
IkReal x2535=(r11*sj5);
IkReal x2536=((((-1.0)*(r12*r12)))+((x2532*x2533))+(((-1.0)*x2533))+(((2.0)*x2534*x2535))+(((-1.0)*x2532*(r10*r10))));
j4eval[0]=x2536;
j4eval[1]=((IKabs(r12))+(IKabs((x2534+(((-1.0)*x2535))))));
j4eval[2]=IKsign(x2536);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2537=cj5*cj5;
IkReal x2538=r11*r11;
IkReal x2539=(cj5*r10);
IkReal x2540=(r11*sj5);
CheckValue<IkReal> x2541=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2537*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x2538))+(((2.0)*x2539*x2540))+((x2537*x2538)))),-1);
if(!x2541.valid){
continue;
}
CheckValue<IkReal> x2542 = IKatan2WithCheck(IkReal((x2539+(((-1.0)*x2540)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2541.value)))+(x2542.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2543=IKsin(j4);
IkReal x2544=IKcos(j4);
IkReal x2545=(cj5*r10);
IkReal x2546=(r01*sj5);
IkReal x2547=(cj5*r00);
IkReal x2548=(cj5*r20);
IkReal x2549=((1.0)*x2544);
IkReal x2550=((1.0)*x2543);
IkReal x2551=(sj5*x2543);
evalcond[0]=((((-1.0)*x2548*x2550))+(((-1.0)*r22*x2549))+((r21*x2551)));
evalcond[1]=(((x2543*x2546))+(((-1.0)*x2547*x2550))+(((-1.0)*r02*x2549)));
evalcond[2]=((((-1.0)*r12*x2550))+(((-1.0)*r11*sj5*x2549))+((x2544*x2545)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2549))+((r11*x2551))+(((-1.0)*x2545*x2550)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2550))+(((-1.0)*x2546*x2549))+((x2544*x2547)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2549))+(((-1.0)*r22*x2550))+((x2544*x2548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2552=((1.0)*cj5);
CheckValue<IkReal> x2553=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2552))+(((-1.0)*r20*sj5)))),-1);
if(!x2553.valid){
continue;
}
CheckValue<IkReal> x2554 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2553.value)))+(x2554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2555=IKsin(j4);
IkReal x2556=IKcos(j4);
IkReal x2557=(cj5*r10);
IkReal x2558=(r01*sj5);
IkReal x2559=(cj5*r00);
IkReal x2560=(cj5*r20);
IkReal x2561=((1.0)*x2556);
IkReal x2562=((1.0)*x2555);
IkReal x2563=(sj5*x2555);
evalcond[0]=((((-1.0)*r22*x2561))+(((-1.0)*x2560*x2562))+((r21*x2563)));
evalcond[1]=((((-1.0)*r02*x2561))+((x2555*x2558))+(((-1.0)*x2559*x2562)));
evalcond[2]=(((x2556*x2557))+(((-1.0)*r11*sj5*x2561))+(((-1.0)*r12*x2562)));
evalcond[3]=((-1.0)+(((-1.0)*x2557*x2562))+((r11*x2563))+(((-1.0)*r12*x2561)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2562))+(((-1.0)*x2558*x2561))+((x2556*x2559)));
evalcond[5]=((((-1.0)*r22*x2562))+((x2556*x2560))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2564 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2564.valid){
continue;
}
CheckValue<IkReal> x2565=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2564.value)+(((1.5707963267949)*(x2565.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2566=IKsin(j4);
IkReal x2567=IKcos(j4);
IkReal x2568=(cj5*r10);
IkReal x2569=(r01*sj5);
IkReal x2570=(cj5*r00);
IkReal x2571=(cj5*r20);
IkReal x2572=((1.0)*x2567);
IkReal x2573=((1.0)*x2566);
IkReal x2574=(sj5*x2566);
evalcond[0]=(((r21*x2574))+(((-1.0)*x2571*x2573))+(((-1.0)*r22*x2572)));
evalcond[1]=((((-1.0)*x2570*x2573))+((x2566*x2569))+(((-1.0)*r02*x2572)));
evalcond[2]=(((x2567*x2568))+(((-1.0)*r12*x2573))+(((-1.0)*r11*sj5*x2572)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2572))+((r11*x2574))+(((-1.0)*x2568*x2573)));
evalcond[4]=((((-1.0)*x2569*x2572))+((cj2*sj1))+((x2567*x2570))+((cj1*sj2))+(((-1.0)*r02*x2573)));
evalcond[5]=(((x2567*x2571))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2572))+(((-1.0)*r22*x2573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2575=((-1.0)*r00);
IkReal x2577 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2577)==0){
continue;
}
IkReal x2576=pow(x2577,-0.5);
CheckValue<IkReal> x2578 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2575),IKFAST_ATAN2_MAGTHRESH);
if(!x2578.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2578.value));
IkReal gconst91=(r01*x2576);
IkReal gconst92=(x2575*x2576);
CheckValue<IkReal> x2579 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2579.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2579.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2580=((-1.0)*r00);
IkReal x2581=x2576;
CheckValue<IkReal> x2583 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2580),IKFAST_ATAN2_MAGTHRESH);
if(!x2583.valid){
continue;
}
IkReal x2582=((-1.0)*(x2583.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2582;
IkReal gconst90=x2582;
IkReal gconst91=(r01*x2581);
IkReal gconst92=(x2580*x2581);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2584=((1.0)*sj0);
IkReal x2585=((1.0)*cj0);
CheckValue<IkReal> x2586=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2586.valid){
continue;
}
CheckValue<IkReal> x2587 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2585))+(((-1.0)*r12*x2584)))),IkReal(((((-1.0)*gconst91*r01*x2585))+((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2584)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2586.value)))+(x2587.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2588=IKsin(j4);
IkReal x2589=IKcos(j4);
IkReal x2590=((1.0)*cj2);
IkReal x2591=(gconst92*r00);
IkReal x2592=(gconst92*r20);
IkReal x2593=((1.0)*sj0);
IkReal x2594=(gconst92*r10);
IkReal x2595=(cj1*sj2);
IkReal x2596=((1.0)*x2589);
IkReal x2597=(gconst91*x2588);
IkReal x2598=((1.0)*x2588);
evalcond[0]=((((-1.0)*r22*x2596))+(((-1.0)*x2592*x2598))+((r21*x2597)));
evalcond[1]=((((-1.0)*x2594*x2598))+cj0+((r11*x2597))+(((-1.0)*r12*x2596)));
evalcond[2]=(((r01*x2597))+(((-1.0)*r02*x2596))+(((-1.0)*x2593))+(((-1.0)*x2591*x2598)));
evalcond[3]=((((-1.0)*cj1*x2590))+(((-1.0)*gconst91*r21*x2596))+(((-1.0)*r22*x2598))+((sj1*sj2))+((x2589*x2592)));
evalcond[4]=((((-1.0)*cj0*x2595))+(((-1.0)*r02*x2598))+(((-1.0)*cj0*sj1*x2590))+((x2589*x2591))+(((-1.0)*gconst91*r01*x2596)));
evalcond[5]=((((-1.0)*x2593*x2595))+(((-1.0)*sj0*sj1*x2590))+((x2589*x2594))+(((-1.0)*r12*x2598))+(((-1.0)*gconst91*r11*x2596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2599=((1.0)*gconst92);
CheckValue<IkReal> x2600 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2599)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2600.valid){
continue;
}
CheckValue<IkReal> x2601=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2599)))),-1);
if(!x2601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2600.value)+(((1.5707963267949)*(x2601.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2602=IKsin(j4);
IkReal x2603=IKcos(j4);
IkReal x2604=((1.0)*cj2);
IkReal x2605=(gconst92*r00);
IkReal x2606=(gconst92*r20);
IkReal x2607=((1.0)*sj0);
IkReal x2608=(gconst92*r10);
IkReal x2609=(cj1*sj2);
IkReal x2610=((1.0)*x2603);
IkReal x2611=(gconst91*x2602);
IkReal x2612=((1.0)*x2602);
evalcond[0]=((((-1.0)*x2606*x2612))+(((-1.0)*r22*x2610))+((r21*x2611)));
evalcond[1]=(cj0+(((-1.0)*x2608*x2612))+(((-1.0)*r12*x2610))+((r11*x2611)));
evalcond[2]=(((r01*x2611))+(((-1.0)*r02*x2610))+(((-1.0)*x2605*x2612))+(((-1.0)*x2607)));
evalcond[3]=(((x2603*x2606))+((sj1*sj2))+(((-1.0)*r22*x2612))+(((-1.0)*cj1*x2604))+(((-1.0)*gconst91*r21*x2610)));
evalcond[4]=(((x2603*x2605))+(((-1.0)*cj0*x2609))+(((-1.0)*gconst91*r01*x2610))+(((-1.0)*r02*x2612))+(((-1.0)*cj0*sj1*x2604)));
evalcond[5]=(((x2603*x2608))+(((-1.0)*r12*x2612))+(((-1.0)*gconst91*r11*x2610))+(((-1.0)*x2607*x2609))+(((-1.0)*sj0*sj1*x2604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2613=((-1.0)*r01);
IkReal x2615 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2615)==0){
continue;
}
IkReal x2614=pow(x2615,-0.5);
CheckValue<IkReal> x2616 = IKatan2WithCheck(IkReal(x2613),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2616.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2616.value))));
IkReal gconst94=(x2613*x2614);
IkReal gconst95=((1.0)*r00*x2614);
CheckValue<IkReal> x2617 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2617.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2617.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2618=((-1.0)*r01);
CheckValue<IkReal> x2621 = IKatan2WithCheck(IkReal(x2618),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2621.valid){
continue;
}
IkReal x2619=((1.0)*(x2621.value));
IkReal x2620=x2614;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2619)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2619)));
IkReal gconst94=(x2618*x2620);
IkReal gconst95=((1.0)*r00*x2620);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2622=((-1.0)*r01);
CheckValue<IkReal> x2625 = IKatan2WithCheck(IkReal(x2622),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2625.valid){
continue;
}
IkReal x2623=((1.0)*(x2625.value));
IkReal x2624=x2614;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2623)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2623)));
IkReal gconst94=(x2622*x2624);
IkReal gconst95=((1.0)*r00*x2624);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2626=((-1.0)*r01);
CheckValue<IkReal> x2629 = IKatan2WithCheck(IkReal(x2626),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2629.valid){
continue;
}
IkReal x2627=((1.0)*(x2629.value));
IkReal x2628=x2614;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2627)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2627)));
IkReal gconst94=(x2626*x2628);
IkReal gconst95=((1.0)*r00*x2628);
IkReal x2630=r02*r02;
IkReal x2631=(r12*sj0);
IkReal x2632=((1.0)*cj0);
IkReal x2633=x2614;
j4eval[0]=((IKabs((((r02*x2631*x2633))+(((-1.0)*x2632*x2633))+((cj0*x2630*x2633)))))+(IKabs(((((-1.0)*r02*x2632))+(((-1.0)*x2631))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2634=((1.0)*sj0);
IkReal x2635=((1.0)*cj0);
CheckValue<IkReal> x2636=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2636.valid){
continue;
}
CheckValue<IkReal> x2637 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2635))+(((-1.0)*r12*x2634)))),IkReal(((((-1.0)*gconst94*r11*x2634))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2635))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2636.value)))+(x2637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2638=IKsin(j4);
IkReal x2639=IKcos(j4);
IkReal x2640=(gconst94*r11);
IkReal x2641=((1.0)*cj2);
IkReal x2642=(gconst94*r21);
IkReal x2643=((1.0)*sj0);
IkReal x2644=(gconst94*r01);
IkReal x2645=(cj1*sj2);
IkReal x2646=((1.0)*x2639);
IkReal x2647=(gconst95*x2639);
IkReal x2648=((1.0)*x2638);
IkReal x2649=(gconst95*x2648);
evalcond[0]=((((-1.0)*r22*x2646))+((x2638*x2642))+(((-1.0)*r20*x2649)));
evalcond[1]=((((-1.0)*r12*x2646))+cj0+((x2638*x2640))+(((-1.0)*r10*x2649)));
evalcond[2]=((((-1.0)*r00*x2649))+((x2638*x2644))+(((-1.0)*r02*x2646))+(((-1.0)*x2643)));
evalcond[3]=((((-1.0)*r22*x2648))+(((-1.0)*cj1*x2641))+((sj1*sj2))+(((-1.0)*x2642*x2646))+((r20*x2647)));
evalcond[4]=((((-1.0)*x2644*x2646))+(((-1.0)*r02*x2648))+(((-1.0)*cj0*sj1*x2641))+((r00*x2647))+(((-1.0)*cj0*x2645)));
evalcond[5]=((((-1.0)*r12*x2648))+((r10*x2647))+(((-1.0)*x2640*x2646))+(((-1.0)*sj0*sj1*x2641))+(((-1.0)*x2643*x2645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2650=((1.0)*gconst95);
CheckValue<IkReal> x2651 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2650)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2651.valid){
continue;
}
CheckValue<IkReal> x2652=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2650)))),-1);
if(!x2652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2651.value)+(((1.5707963267949)*(x2652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2653=IKsin(j4);
IkReal x2654=IKcos(j4);
IkReal x2655=(gconst94*r11);
IkReal x2656=((1.0)*cj2);
IkReal x2657=(gconst94*r21);
IkReal x2658=((1.0)*sj0);
IkReal x2659=(gconst94*r01);
IkReal x2660=(cj1*sj2);
IkReal x2661=((1.0)*x2654);
IkReal x2662=(gconst95*x2654);
IkReal x2663=((1.0)*x2653);
IkReal x2664=(gconst95*x2663);
evalcond[0]=(((x2653*x2657))+(((-1.0)*r20*x2664))+(((-1.0)*r22*x2661)));
evalcond[1]=((((-1.0)*r12*x2661))+cj0+((x2653*x2655))+(((-1.0)*r10*x2664)));
evalcond[2]=((((-1.0)*r00*x2664))+((x2653*x2659))+(((-1.0)*r02*x2661))+(((-1.0)*x2658)));
evalcond[3]=((((-1.0)*cj1*x2656))+((sj1*sj2))+(((-1.0)*x2657*x2661))+(((-1.0)*r22*x2663))+((r20*x2662)));
evalcond[4]=((((-1.0)*cj0*x2660))+(((-1.0)*r02*x2663))+(((-1.0)*cj0*sj1*x2656))+(((-1.0)*x2659*x2661))+((r00*x2662)));
evalcond[5]=((((-1.0)*r12*x2663))+(((-1.0)*x2655*x2661))+((r10*x2662))+(((-1.0)*sj0*sj1*x2656))+(((-1.0)*x2658*x2660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2665=((1.0)*gconst95);
CheckValue<IkReal> x2666 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2666.valid){
continue;
}
CheckValue<IkReal> x2667=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2665)))),-1);
if(!x2667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2666.value)+(((1.5707963267949)*(x2667.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2668=IKsin(j4);
IkReal x2669=IKcos(j4);
IkReal x2670=(gconst94*r11);
IkReal x2671=((1.0)*cj2);
IkReal x2672=(gconst94*r21);
IkReal x2673=((1.0)*sj0);
IkReal x2674=(gconst94*r01);
IkReal x2675=(cj1*sj2);
IkReal x2676=((1.0)*x2669);
IkReal x2677=(gconst95*x2669);
IkReal x2678=((1.0)*x2668);
IkReal x2679=(gconst95*x2678);
evalcond[0]=(((x2668*x2672))+(((-1.0)*r20*x2679))+(((-1.0)*r22*x2676)));
evalcond[1]=((((-1.0)*r12*x2676))+cj0+((x2668*x2670))+(((-1.0)*r10*x2679)));
evalcond[2]=(((x2668*x2674))+(((-1.0)*r00*x2679))+(((-1.0)*r02*x2676))+(((-1.0)*x2673)));
evalcond[3]=((((-1.0)*cj1*x2671))+((sj1*sj2))+(((-1.0)*x2672*x2676))+((r20*x2677))+(((-1.0)*r22*x2678)));
evalcond[4]=((((-1.0)*cj0*x2675))+(((-1.0)*cj0*sj1*x2671))+(((-1.0)*x2674*x2676))+(((-1.0)*r02*x2678))+((r00*x2677)));
evalcond[5]=((((-1.0)*r12*x2678))+(((-1.0)*x2670*x2676))+(((-1.0)*sj0*sj1*x2671))+(((-1.0)*x2673*x2675))+((r10*x2677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2680=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2680;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2680);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2681=((1.0)*cj5);
IkReal x2682=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2681)));
j4eval[0]=x2682;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2681)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2682);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2683=cj5*cj5;
IkReal x2684=r01*r01;
IkReal x2685=(r01*sj5);
IkReal x2686=(cj5*r00);
IkReal x2687=((((2.0)*x2685*x2686))+(((-1.0)*(r02*r02)))+((x2683*x2684))+(((-1.0)*x2683*(r00*r00)))+(((-1.0)*x2684)));
j4eval[0]=x2687;
j4eval[1]=IKsign(x2687);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2685))+x2686))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2688=cj5*cj5;
IkReal x2689=r01*r01;
IkReal x2690=(r01*sj5);
IkReal x2691=(cj5*r00);
CheckValue<IkReal> x2692=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x2690*x2691))+(((-1.0)*x2688*(r00*r00)))+(((-1.0)*x2689))+((x2688*x2689)))),-1);
if(!x2692.valid){
continue;
}
CheckValue<IkReal> x2693 = IKatan2WithCheck(IkReal(((((-1.0)*x2690))+x2691)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2692.value)))+(x2693.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2694=IKsin(j4);
IkReal x2695=IKcos(j4);
IkReal x2696=(cj5*r10);
IkReal x2697=(r01*sj5);
IkReal x2698=((1.0)*cj2);
IkReal x2699=(cj5*r00);
IkReal x2700=(cj5*r20);
IkReal x2701=((1.0)*x2695);
IkReal x2702=((1.0)*x2694);
IkReal x2703=(sj5*x2694);
evalcond[0]=((((-1.0)*r22*x2701))+((r21*x2703))+(((-1.0)*x2700*x2702)));
evalcond[1]=(((r11*x2703))+(((-1.0)*r12*x2701))+(((-1.0)*x2696*x2702)));
evalcond[2]=((((-1.0)*x2697*x2701))+(((-1.0)*r02*x2702))+((x2695*x2699)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2701))+((x2694*x2697))+(((-1.0)*x2699*x2702)));
evalcond[4]=(((x2695*x2700))+(((-1.0)*r22*x2702))+(((-1.0)*cj1*x2698))+((sj1*sj2))+(((-1.0)*r21*sj5*x2701)));
evalcond[5]=((((-1.0)*r11*sj5*x2701))+(((-1.0)*sj1*x2698))+(((-1.0)*r12*x2702))+(((-1.0)*cj1*sj2))+((x2695*x2696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2704=((1.0)*cj5);
CheckValue<IkReal> x2705 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2705.valid){
continue;
}
CheckValue<IkReal> x2706=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2704)))),-1);
if(!x2706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2705.value)+(((1.5707963267949)*(x2706.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2707=IKsin(j4);
IkReal x2708=IKcos(j4);
IkReal x2709=(cj5*r10);
IkReal x2710=(r01*sj5);
IkReal x2711=((1.0)*cj2);
IkReal x2712=(cj5*r00);
IkReal x2713=(cj5*r20);
IkReal x2714=((1.0)*x2708);
IkReal x2715=((1.0)*x2707);
IkReal x2716=(sj5*x2707);
evalcond[0]=((((-1.0)*x2713*x2715))+(((-1.0)*r22*x2714))+((r21*x2716)));
evalcond[1]=((((-1.0)*x2709*x2715))+((r11*x2716))+(((-1.0)*r12*x2714)));
evalcond[2]=(((x2708*x2712))+(((-1.0)*r02*x2715))+(((-1.0)*x2710*x2714)));
evalcond[3]=((-1.0)+(((-1.0)*x2712*x2715))+((x2707*x2710))+(((-1.0)*r02*x2714)));
evalcond[4]=(((x2708*x2713))+(((-1.0)*r21*sj5*x2714))+((sj1*sj2))+(((-1.0)*r22*x2715))+(((-1.0)*cj1*x2711)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2714))+(((-1.0)*sj1*x2711))+(((-1.0)*r12*x2715))+((x2708*x2709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2717=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2717.valid){
continue;
}
CheckValue<IkReal> x2718 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2717.value)))+(x2718.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2719=IKsin(j4);
IkReal x2720=IKcos(j4);
IkReal x2721=(cj5*r10);
IkReal x2722=(r01*sj5);
IkReal x2723=((1.0)*cj2);
IkReal x2724=(cj5*r00);
IkReal x2725=(cj5*r20);
IkReal x2726=((1.0)*x2720);
IkReal x2727=((1.0)*x2719);
IkReal x2728=(sj5*x2719);
evalcond[0]=((((-1.0)*x2725*x2727))+((r21*x2728))+(((-1.0)*r22*x2726)));
evalcond[1]=((((-1.0)*r12*x2726))+(((-1.0)*x2721*x2727))+((r11*x2728)));
evalcond[2]=((((-1.0)*x2722*x2726))+((x2720*x2724))+(((-1.0)*r02*x2727)));
evalcond[3]=((-1.0)+(((-1.0)*x2724*x2727))+((x2719*x2722))+(((-1.0)*r02*x2726)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x2727))+((x2720*x2725))+(((-1.0)*r21*sj5*x2726))+(((-1.0)*cj1*x2723)));
evalcond[5]=((((-1.0)*sj1*x2723))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2727))+(((-1.0)*r11*sj5*x2726))+((x2720*x2721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2729=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2729;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2729);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2730=((1.0)*cj5);
IkReal x2731=((((-1.0)*r21*x2730))+(((-1.0)*r20*sj5)));
j4eval[0]=x2731;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2730))))));
j4eval[2]=IKsign(x2731);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2732=cj5*cj5;
IkReal x2733=r01*r01;
IkReal x2734=(cj5*r00);
IkReal x2735=(r01*sj5);
IkReal x2736=(x2733+(((-2.0)*x2734*x2735))+(((-1.0)*x2732*x2733))+((x2732*(r00*r00)))+(r02*r02));
j4eval[0]=x2736;
j4eval[1]=((IKabs(r02))+(IKabs((x2734+(((-1.0)*x2735))))));
j4eval[2]=IKsign(x2736);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2737=cj5*cj5;
IkReal x2738=r01*r01;
IkReal x2739=(r01*sj5);
IkReal x2740=(cj5*r00);
CheckValue<IkReal> x2741 = IKatan2WithCheck(IkReal((x2740+(((-1.0)*x2739)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2741.valid){
continue;
}
CheckValue<IkReal> x2742=IKPowWithIntegerCheck(IKsign((x2738+((x2737*(r00*r00)))+(((-1.0)*x2737*x2738))+(((-2.0)*x2739*x2740))+(r02*r02))),-1);
if(!x2742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2741.value)+(((1.5707963267949)*(x2742.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2743=IKsin(j4);
IkReal x2744=IKcos(j4);
IkReal x2745=(cj5*r10);
IkReal x2746=(r01*sj5);
IkReal x2747=(cj5*r00);
IkReal x2748=(cj5*r20);
IkReal x2749=((1.0)*x2744);
IkReal x2750=((1.0)*x2743);
IkReal x2751=(sj5*x2743);
evalcond[0]=(((r21*x2751))+(((-1.0)*x2748*x2750))+(((-1.0)*r22*x2749)));
evalcond[1]=(((r11*x2751))+(((-1.0)*x2745*x2750))+(((-1.0)*r12*x2749)));
evalcond[2]=(((x2744*x2747))+(((-1.0)*x2746*x2749))+(((-1.0)*r02*x2750)));
evalcond[3]=((1.0)+((x2743*x2746))+(((-1.0)*x2747*x2750))+(((-1.0)*r02*x2749)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2749))+((cj1*sj2))+((x2744*x2745))+(((-1.0)*r12*x2750)));
evalcond[5]=((((-1.0)*r22*x2750))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2744*x2748))+(((-1.0)*r21*sj5*x2749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2752=((1.0)*cj5);
CheckValue<IkReal> x2753 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2752)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2753.valid){
continue;
}
CheckValue<IkReal> x2754=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2752))+(((-1.0)*r20*sj5)))),-1);
if(!x2754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2753.value)+(((1.5707963267949)*(x2754.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2755=IKsin(j4);
IkReal x2756=IKcos(j4);
IkReal x2757=(cj5*r10);
IkReal x2758=(r01*sj5);
IkReal x2759=(cj5*r00);
IkReal x2760=(cj5*r20);
IkReal x2761=((1.0)*x2756);
IkReal x2762=((1.0)*x2755);
IkReal x2763=(sj5*x2755);
evalcond[0]=((((-1.0)*x2760*x2762))+((r21*x2763))+(((-1.0)*r22*x2761)));
evalcond[1]=((((-1.0)*r12*x2761))+(((-1.0)*x2757*x2762))+((r11*x2763)));
evalcond[2]=(((x2756*x2759))+(((-1.0)*x2758*x2761))+(((-1.0)*r02*x2762)));
evalcond[3]=((1.0)+(((-1.0)*x2759*x2762))+(((-1.0)*r02*x2761))+((x2755*x2758)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x2762))+((x2756*x2757))+((cj1*sj2))+(((-1.0)*r11*sj5*x2761)));
evalcond[5]=(((x2756*x2760))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2761))+(((-1.0)*r22*x2762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2764 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2764.valid){
continue;
}
CheckValue<IkReal> x2765=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2764.value)+(((1.5707963267949)*(x2765.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2766=IKsin(j4);
IkReal x2767=IKcos(j4);
IkReal x2768=(cj5*r10);
IkReal x2769=(r01*sj5);
IkReal x2770=(cj5*r00);
IkReal x2771=(cj5*r20);
IkReal x2772=((1.0)*x2767);
IkReal x2773=((1.0)*x2766);
IkReal x2774=(sj5*x2766);
evalcond[0]=((((-1.0)*x2771*x2773))+((r21*x2774))+(((-1.0)*r22*x2772)));
evalcond[1]=((((-1.0)*x2768*x2773))+((r11*x2774))+(((-1.0)*r12*x2772)));
evalcond[2]=((((-1.0)*x2769*x2772))+(((-1.0)*r02*x2773))+((x2767*x2770)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2772))+(((-1.0)*x2770*x2773))+((x2766*x2769)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2772))+((cj1*sj2))+(((-1.0)*r12*x2773))+((x2767*x2768)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2772))+((x2767*x2771))+(((-1.0)*r22*x2773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2775=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2775);
rxp1_1=(px*r21);
rxp1_2=(r11*x2775);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2776=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2776);
rxp1_1=(px*r21);
rxp1_2=(r11*x2776);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2777=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2777);
rxp1_1=(px*r21);
rxp1_2=(r11*x2777);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2780=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2780.valid){
continue;
}
IkReal x2778=x2780.value;
IkReal x2779=(sj0*x2778);
cj4array[0]=(((cj1*sj2*x2779))+((cj2*sj1*x2779)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2781=IKsin(j4);
IkReal x2782=IKcos(j4);
IkReal x2783=(cj5*r20);
IkReal x2784=(r21*sj5);
IkReal x2785=((1.0)*x2781);
IkReal x2786=((1.0)*x2782);
evalcond[0]=((-1.0)*r02*x2781);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2786)));
evalcond[2]=(((x2781*x2784))+(((-1.0)*x2783*x2785)));
evalcond[3]=((((-1.0)*cj5*r10*x2785))+((r11*sj5*x2781)));
evalcond[4]=((((-1.0)*x2784*x2786))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2782*x2783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2788=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2788.valid){
continue;
}
IkReal x2787=x2788.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2787))+((cj1*cj2*x2787)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2789=IKsin(j4);
IkReal x2790=IKcos(j4);
IkReal x2791=(r11*sj5);
IkReal x2792=((1.0)*sj0);
IkReal x2793=((1.0)*x2790);
IkReal x2794=((1.0)*cj5*x2789);
evalcond[0]=((-1.0)*r02*x2789);
evalcond[1]=((((-1.0)*x2792))+(((-1.0)*r02*x2793)));
evalcond[2]=((((-1.0)*r20*x2794))+((r21*sj5*x2789)));
evalcond[3]=(((x2789*x2791))+(((-1.0)*r10*x2794)));
evalcond[4]=((((-1.0)*x2791*x2793))+((cj5*r10*x2790))+(((-1.0)*cj1*sj2*x2792))+(((-1.0)*cj2*sj1*x2792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2795=IKPowWithIntegerCheck(r02,-1);
if(!x2795.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2795.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2796=IKsin(j4);
IkReal x2797=IKcos(j4);
IkReal x2798=((1.0)*sj0);
IkReal x2799=(cj5*x2797);
IkReal x2800=(sj5*x2796);
IkReal x2801=((1.0)*sj5*x2797);
IkReal x2802=((1.0)*cj5*x2796);
evalcond[0]=((-1.0)*r02*x2796);
evalcond[1]=((((-1.0)*r20*x2802))+((r21*x2800)));
evalcond[2]=((((-1.0)*r10*x2802))+((r11*x2800)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2801))+((r20*x2799)));
evalcond[4]=((((-1.0)*r11*x2801))+((r10*x2799))+(((-1.0)*cj1*sj2*x2798))+(((-1.0)*cj2*sj1*x2798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2803=((1.0)*sj0);
IkReal x2804=((1.0)*cj0);
CheckValue<IkReal> x2805 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2803))+(((-1.0)*r02*x2804)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x2803))+(((-1.0)*r01*sj5*x2804)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2805.valid){
continue;
}
CheckValue<IkReal> x2806=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2805.value)+(((1.5707963267949)*(x2806.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2807=IKsin(j4);
IkReal x2808=IKcos(j4);
IkReal x2809=(cj5*r10);
IkReal x2810=(r01*sj5);
IkReal x2811=((1.0)*cj2);
IkReal x2812=(cj5*r00);
IkReal x2813=((1.0)*sj0);
IkReal x2814=(cj5*r20);
IkReal x2815=(cj1*sj2);
IkReal x2816=((1.0)*x2808);
IkReal x2817=((1.0)*x2807);
IkReal x2818=(sj5*x2807);
evalcond[0]=(((r21*x2818))+(((-1.0)*r22*x2816))+(((-1.0)*x2814*x2817)));
evalcond[1]=((((-1.0)*r12*x2816))+(((-1.0)*x2809*x2817))+cj0+((r11*x2818)));
evalcond[2]=((((-1.0)*r02*x2816))+(((-1.0)*x2812*x2817))+(((-1.0)*x2813))+((x2807*x2810)));
evalcond[3]=((((-1.0)*cj1*x2811))+((sj1*sj2))+(((-1.0)*r22*x2817))+(((-1.0)*r21*sj5*x2816))+((x2808*x2814)));
evalcond[4]=((((-1.0)*x2810*x2816))+(((-1.0)*r02*x2817))+(((-1.0)*cj0*x2815))+(((-1.0)*cj0*sj1*x2811))+((x2808*x2812)));
evalcond[5]=((((-1.0)*r12*x2817))+((x2808*x2809))+(((-1.0)*sj0*sj1*x2811))+(((-1.0)*x2813*x2815))+(((-1.0)*r11*sj5*x2816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2819=((1.0)*cj5);
CheckValue<IkReal> x2820=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2819))+(((-1.0)*r10*sj5)))),-1);
if(!x2820.valid){
continue;
}
CheckValue<IkReal> x2821 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2820.value)))+(x2821.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2822=IKsin(j4);
IkReal x2823=IKcos(j4);
IkReal x2824=(cj5*r10);
IkReal x2825=(r01*sj5);
IkReal x2826=((1.0)*cj2);
IkReal x2827=(cj5*r00);
IkReal x2828=((1.0)*sj0);
IkReal x2829=(cj5*r20);
IkReal x2830=(cj1*sj2);
IkReal x2831=((1.0)*x2823);
IkReal x2832=((1.0)*x2822);
IkReal x2833=(sj5*x2822);
evalcond[0]=((((-1.0)*r22*x2831))+((r21*x2833))+(((-1.0)*x2829*x2832)));
evalcond[1]=(cj0+(((-1.0)*r12*x2831))+(((-1.0)*x2824*x2832))+((r11*x2833)));
evalcond[2]=(((x2822*x2825))+(((-1.0)*x2827*x2832))+(((-1.0)*x2828))+(((-1.0)*r02*x2831)));
evalcond[3]=((((-1.0)*cj1*x2826))+(((-1.0)*r21*sj5*x2831))+((sj1*sj2))+((x2823*x2829))+(((-1.0)*r22*x2832)));
evalcond[4]=(((x2823*x2827))+(((-1.0)*x2825*x2831))+(((-1.0)*cj0*sj1*x2826))+(((-1.0)*r02*x2832))+(((-1.0)*cj0*x2830)));
evalcond[5]=((((-1.0)*sj0*sj1*x2826))+((x2823*x2824))+(((-1.0)*r12*x2832))+(((-1.0)*r11*sj5*x2831))+(((-1.0)*x2828*x2830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2834=((1.0)*cj5);
CheckValue<IkReal> x2835 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2834)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2835.valid){
continue;
}
CheckValue<IkReal> x2836=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2834))+(((-1.0)*r00*sj5)))),-1);
if(!x2836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2835.value)+(((1.5707963267949)*(x2836.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2837=IKsin(j4);
IkReal x2838=IKcos(j4);
IkReal x2839=(cj5*r10);
IkReal x2840=(r01*sj5);
IkReal x2841=((1.0)*cj2);
IkReal x2842=(cj5*r00);
IkReal x2843=((1.0)*sj0);
IkReal x2844=(cj5*r20);
IkReal x2845=(cj1*sj2);
IkReal x2846=((1.0)*x2838);
IkReal x2847=((1.0)*x2837);
IkReal x2848=(sj5*x2837);
evalcond[0]=(((r21*x2848))+(((-1.0)*x2844*x2847))+(((-1.0)*r22*x2846)));
evalcond[1]=(((r11*x2848))+cj0+(((-1.0)*r12*x2846))+(((-1.0)*x2839*x2847)));
evalcond[2]=((((-1.0)*x2842*x2847))+((x2837*x2840))+(((-1.0)*r02*x2846))+(((-1.0)*x2843)));
evalcond[3]=(((x2838*x2844))+((sj1*sj2))+(((-1.0)*r22*x2847))+(((-1.0)*r21*sj5*x2846))+(((-1.0)*cj1*x2841)));
evalcond[4]=((((-1.0)*x2840*x2846))+((x2838*x2842))+(((-1.0)*cj0*sj1*x2841))+(((-1.0)*r02*x2847))+(((-1.0)*cj0*x2845)));
evalcond[5]=((((-1.0)*x2843*x2845))+(((-1.0)*r12*x2847))+(((-1.0)*sj0*sj1*x2841))+((x2838*x2839))+(((-1.0)*r11*sj5*x2846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2849=((1.0)*cj5);
IkReal x2850=((1.0)*sj5);
IkReal x2851=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x2851;
j0eval[1]=IKsign(x2851);
j0eval[2]=((IKabs(((((-1.0)*r01*x2849))+(((-1.0)*r00*x2850)))))+(IKabs(((((-1.0)*r11*x2849))+(((-1.0)*r10*x2850))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2852=r21*r21;
IkReal x2853=cj5*cj5;
IkReal x2854=(sj1*sj2);
IkReal x2855=(r21*sj5);
IkReal x2856=(cj5*r20);
IkReal x2857=(cj1*cj2);
IkReal x2858=((((2.0)*x2855*x2856))+((x2852*x2853))+(((-1.0)*(r22*r22)))+(((-1.0)*x2853*(r20*r20)))+(((-1.0)*x2852)));
j4eval[0]=x2858;
j4eval[1]=((IKabs(((((-1.0)*r22*x2857))+((r22*x2854)))))+(IKabs(((((-1.0)*x2854*x2856))+(((-1.0)*x2855*x2857))+((x2856*x2857))+((x2854*x2855))))));
j4eval[2]=IKsign(x2858);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.492063434766163)*px))+(((-2.12309223301616)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.12309223301616)*px))+(((0.492063434766163)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.492063434766163)*px))+(((-2.12309223301616)*py))))+IKsqr(((((-2.12309223301616)*px))+(((0.492063434766163)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.492063434766163)*px))+(((-2.12309223301616)*py))), ((((-2.12309223301616)*px))+(((0.492063434766163)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2859=IKcos(j0);
IkReal x2860=IKsin(j0);
evalcond[0]=((((-0.447)*x2859))+(((-1.0)*px))+(((-0.1036)*x2860)));
evalcond[1]=((((-1.0)*py))+(((-0.447)*x2860))+(((0.1036)*x2859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2861=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2861;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2861);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2862=((1.0)*cj5);
IkReal x2863=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2862)));
j4eval[0]=x2863;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2862))))));
j4eval[2]=IKsign(x2863);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2864=((1.0)*cj5);
IkReal x2865=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2864)));
j4eval[0]=x2865;
j4eval[1]=IKsign(x2865);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2864))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2866=((1.0)*cj5);
CheckValue<IkReal> x2867 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2866)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2867.valid){
continue;
}
CheckValue<IkReal> x2868=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2866)))),-1);
if(!x2868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2867.value)+(((1.5707963267949)*(x2868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2869=IKcos(j4);
IkReal x2870=IKsin(j4);
IkReal x2871=((1.0)*sj0);
IkReal x2872=(cj5*r00);
IkReal x2873=(cj5*r10);
IkReal x2874=(cj5*r20);
IkReal x2875=((1.0)*x2869);
IkReal x2876=((1.0)*x2870);
IkReal x2877=(sj5*x2869);
IkReal x2878=(sj5*x2870);
evalcond[0]=(((r22*x2870))+((r21*x2877))+(((-1.0)*x2874*x2875)));
evalcond[1]=((((-1.0)*r22*x2875))+((r21*x2878))+(((-1.0)*x2874*x2876)));
evalcond[2]=(cj0+((r11*x2878))+(((-1.0)*x2873*x2876))+(((-1.0)*r12*x2875)));
evalcond[3]=(((r01*x2877))+((r02*x2870))+(((-1.0)*x2872*x2875))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x2871))+((r11*x2877))+(((-1.0)*x2873*x2875))+((r12*x2870)));
evalcond[5]=((((-1.0)*r02*x2875))+((r01*x2878))+(((-1.0)*x2871))+(((-1.0)*x2872*x2876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2879=((1.0)*cj5);
CheckValue<IkReal> x2880 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2879)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2880.valid){
continue;
}
CheckValue<IkReal> x2881=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2879)))),-1);
if(!x2881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2880.value)+(((1.5707963267949)*(x2881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2882=IKcos(j4);
IkReal x2883=IKsin(j4);
IkReal x2884=((1.0)*sj0);
IkReal x2885=(cj5*r00);
IkReal x2886=(cj5*r10);
IkReal x2887=(cj5*r20);
IkReal x2888=((1.0)*x2882);
IkReal x2889=((1.0)*x2883);
IkReal x2890=(sj5*x2882);
IkReal x2891=(sj5*x2883);
evalcond[0]=((((-1.0)*x2887*x2888))+((r22*x2883))+((r21*x2890)));
evalcond[1]=((((-1.0)*r22*x2888))+(((-1.0)*x2887*x2889))+((r21*x2891)));
evalcond[2]=(cj0+((r11*x2891))+(((-1.0)*x2886*x2889))+(((-1.0)*r12*x2888)));
evalcond[3]=(((r01*x2890))+(((-1.0)*x2885*x2888))+((r02*x2883))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x2890))+((r12*x2883))+(((-1.0)*x2884))+(((-1.0)*x2886*x2888)));
evalcond[5]=((((-1.0)*r02*x2888))+((r01*x2891))+(((-1.0)*x2885*x2889))+(((-1.0)*x2884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2892 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2892.valid){
continue;
}
CheckValue<IkReal> x2893=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2892.value)+(((1.5707963267949)*(x2893.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2894=IKcos(j4);
IkReal x2895=IKsin(j4);
IkReal x2896=((1.0)*sj0);
IkReal x2897=(cj5*r00);
IkReal x2898=(cj5*r10);
IkReal x2899=(cj5*r20);
IkReal x2900=((1.0)*x2894);
IkReal x2901=((1.0)*x2895);
IkReal x2902=(sj5*x2894);
IkReal x2903=(sj5*x2895);
evalcond[0]=(((r21*x2902))+((r22*x2895))+(((-1.0)*x2899*x2900)));
evalcond[1]=(((r21*x2903))+(((-1.0)*x2899*x2901))+(((-1.0)*r22*x2900)));
evalcond[2]=(cj0+(((-1.0)*x2898*x2901))+(((-1.0)*r12*x2900))+((r11*x2903)));
evalcond[3]=((((-1.0)*x2897*x2900))+((r01*x2902))+((r02*x2895))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x2898*x2900))+((r12*x2895))+(((-1.0)*x2896))+((r11*x2902)));
evalcond[5]=((((-1.0)*r02*x2900))+(((-1.0)*x2897*x2901))+((r01*x2903))+(((-1.0)*x2896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.492063434766163)*px))+(((2.12309223301616)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.12309223301616)*px))+(((0.492063434766163)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.492063434766163)*px))+(((2.12309223301616)*py))))+IKsqr(((((2.12309223301616)*px))+(((0.492063434766163)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.492063434766163)*px))+(((2.12309223301616)*py))), ((((2.12309223301616)*px))+(((0.492063434766163)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2904=IKcos(j0);
IkReal x2905=IKsin(j0);
evalcond[0]=((((0.447)*x2904))+(((-0.1036)*x2905))+(((-1.0)*px)));
evalcond[1]=((((0.447)*x2905))+(((-1.0)*py))+(((0.1036)*x2904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2906=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2906;
j4eval[1]=IKsign(x2906);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2907=((1.0)*cj5);
IkReal x2908=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2907)));
j4eval[0]=x2908;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2907))))));
j4eval[2]=IKsign(x2908);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2909=cj5*cj5;
IkReal x2910=((1.0)*r20);
IkReal x2911=(r01*r21);
IkReal x2912=(r21*sj5);
IkReal x2913=((((-1.0)*r00*x2909*x2910))+((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x2909*x2911))+(((-1.0)*x2911))+((cj5*r00*x2912)));
j4eval[0]=x2913;
j4eval[1]=((IKabs((((cj0*x2912))+(((-1.0)*cj0*cj5*x2910)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2913);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2914=cj5*cj5;
IkReal x2915=((1.0)*r20);
IkReal x2916=(r01*r21);
IkReal x2917=(r21*sj5);
CheckValue<IkReal> x2918=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x2914*x2916))+(((-1.0)*r02*r22))+(((-1.0)*r00*x2914*x2915))+(((-1.0)*x2916))+((cj5*r00*x2917)))),-1);
if(!x2918.valid){
continue;
}
CheckValue<IkReal> x2919 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x2917))+(((-1.0)*cj0*cj5*x2915)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2918.value)))+(x2919.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2920=IKcos(j4);
IkReal x2921=IKsin(j4);
IkReal x2922=(cj5*r00);
IkReal x2923=(cj5*r10);
IkReal x2924=(cj5*r20);
IkReal x2925=((1.0)*x2920);
IkReal x2926=((1.0)*x2921);
IkReal x2927=(sj5*x2920);
IkReal x2928=(sj5*x2921);
evalcond[0]=(((r22*x2921))+((r21*x2927))+(((-1.0)*x2924*x2925)));
evalcond[1]=(((r21*x2928))+(((-1.0)*x2924*x2926))+(((-1.0)*r22*x2925)));
evalcond[2]=(cj0+((r01*x2927))+((r02*x2921))+(((-1.0)*x2922*x2925)));
evalcond[3]=(sj0+(((-1.0)*x2923*x2925))+((r11*x2927))+((r12*x2921)));
evalcond[4]=((((-1.0)*x2923*x2926))+cj0+(((-1.0)*r12*x2925))+((r11*x2928)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x2925))+((r01*x2928))+(((-1.0)*x2922*x2926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2929=((1.0)*cj5);
CheckValue<IkReal> x2930=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2929)))),-1);
if(!x2930.valid){
continue;
}
CheckValue<IkReal> x2931 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2929)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2930.value)))+(x2931.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2932=IKcos(j4);
IkReal x2933=IKsin(j4);
IkReal x2934=(cj5*r00);
IkReal x2935=(cj5*r10);
IkReal x2936=(cj5*r20);
IkReal x2937=((1.0)*x2932);
IkReal x2938=((1.0)*x2933);
IkReal x2939=(sj5*x2932);
IkReal x2940=(sj5*x2933);
evalcond[0]=(((r21*x2939))+((r22*x2933))+(((-1.0)*x2936*x2937)));
evalcond[1]=(((r21*x2940))+(((-1.0)*x2936*x2938))+(((-1.0)*r22*x2937)));
evalcond[2]=(((r02*x2933))+cj0+((r01*x2939))+(((-1.0)*x2934*x2937)));
evalcond[3]=(sj0+(((-1.0)*x2935*x2937))+((r12*x2933))+((r11*x2939)));
evalcond[4]=(cj0+(((-1.0)*x2935*x2938))+((r11*x2940))+(((-1.0)*r12*x2937)));
evalcond[5]=((((-1.0)*sj0))+((r01*x2940))+(((-1.0)*x2934*x2938))+(((-1.0)*r02*x2937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2941 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2941.valid){
continue;
}
CheckValue<IkReal> x2942=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2941.value)+(((1.5707963267949)*(x2942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2943=IKcos(j4);
IkReal x2944=IKsin(j4);
IkReal x2945=(cj5*r00);
IkReal x2946=(cj5*r10);
IkReal x2947=(cj5*r20);
IkReal x2948=((1.0)*x2943);
IkReal x2949=((1.0)*x2944);
IkReal x2950=(sj5*x2943);
IkReal x2951=(sj5*x2944);
evalcond[0]=(((r21*x2950))+((r22*x2944))+(((-1.0)*x2947*x2948)));
evalcond[1]=(((r21*x2951))+(((-1.0)*x2947*x2949))+(((-1.0)*r22*x2948)));
evalcond[2]=(cj0+((r02*x2944))+((r01*x2950))+(((-1.0)*x2945*x2948)));
evalcond[3]=(sj0+((r12*x2944))+(((-1.0)*x2946*x2948))+((r11*x2950)));
evalcond[4]=((((-1.0)*r12*x2948))+cj0+(((-1.0)*x2946*x2949))+((r11*x2951)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x2948))+((r01*x2951))+(((-1.0)*x2945*x2949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.126505927291133)*px))+(((-1.09776861616534)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.126505927291133)*py))+(((-1.09776861616534)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.126505927291133)*px))+(((-1.09776861616534)*py))))+IKsqr(((((0.126505927291133)*py))+(((-1.09776861616534)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.126505927291133)*px))+(((-1.09776861616534)*py))), ((((0.126505927291133)*py))+(((-1.09776861616534)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2952=IKcos(j0);
IkReal x2953=IKsin(j0);
evalcond[0]=((((-0.899)*x2952))+(((-0.1036)*x2953))+(((-1.0)*px)));
evalcond[1]=((((-0.899)*x2953))+(((-1.0)*py))+(((0.1036)*x2952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2954=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2954;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2954);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2955=((1.0)*cj5);
IkReal x2956=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2955)));
j4eval[0]=x2956;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2955))))));
j4eval[2]=IKsign(x2956);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2957=((1.0)*cj5);
IkReal x2958=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2957)));
j4eval[0]=x2958;
j4eval[1]=IKsign(x2958);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2957)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2959=((1.0)*cj5);
CheckValue<IkReal> x2960 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2959)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2960.valid){
continue;
}
CheckValue<IkReal> x2961=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2959)))),-1);
if(!x2961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2960.value)+(((1.5707963267949)*(x2961.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2962=IKcos(j4);
IkReal x2963=IKsin(j4);
IkReal x2964=((1.0)*sj0);
IkReal x2965=(cj5*r00);
IkReal x2966=(cj5*r10);
IkReal x2967=(cj5*r20);
IkReal x2968=((1.0)*x2962);
IkReal x2969=((1.0)*x2963);
IkReal x2970=(sj5*x2962);
IkReal x2971=(sj5*x2963);
evalcond[0]=(((r22*x2963))+(((-1.0)*x2967*x2968))+((r21*x2970)));
evalcond[1]=((((-1.0)*x2967*x2969))+(((-1.0)*r22*x2968))+((r21*x2971)));
evalcond[2]=(cj0+((r11*x2971))+(((-1.0)*x2966*x2969))+(((-1.0)*r12*x2968)));
evalcond[3]=(((r02*x2963))+(((-1.0)*x2965*x2968))+((r01*x2970))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x2964))+((r11*x2970))+((r12*x2963))+(((-1.0)*x2966*x2968)));
evalcond[5]=((((-1.0)*x2965*x2969))+((r01*x2971))+(((-1.0)*r02*x2968))+(((-1.0)*x2964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2972=((1.0)*cj5);
CheckValue<IkReal> x2973=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2972))+(((-1.0)*r00*sj5)))),-1);
if(!x2973.valid){
continue;
}
CheckValue<IkReal> x2974 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2973.value)))+(x2974.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2975=IKcos(j4);
IkReal x2976=IKsin(j4);
IkReal x2977=((1.0)*sj0);
IkReal x2978=(cj5*r00);
IkReal x2979=(cj5*r10);
IkReal x2980=(cj5*r20);
IkReal x2981=((1.0)*x2975);
IkReal x2982=((1.0)*x2976);
IkReal x2983=(sj5*x2975);
IkReal x2984=(sj5*x2976);
evalcond[0]=(((r22*x2976))+(((-1.0)*x2980*x2981))+((r21*x2983)));
evalcond[1]=((((-1.0)*x2980*x2982))+(((-1.0)*r22*x2981))+((r21*x2984)));
evalcond[2]=(cj0+((r11*x2984))+(((-1.0)*x2979*x2982))+(((-1.0)*r12*x2981)));
evalcond[3]=((((-1.0)*x2978*x2981))+((r02*x2976))+((r01*x2983))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x2983))+(((-1.0)*x2979*x2981))+((r12*x2976))+(((-1.0)*x2977)));
evalcond[5]=((((-1.0)*x2978*x2982))+((r01*x2984))+(((-1.0)*x2977))+(((-1.0)*r02*x2981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2985 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2985.valid){
continue;
}
CheckValue<IkReal> x2986=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2985.value)+(((1.5707963267949)*(x2986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2987=IKcos(j4);
IkReal x2988=IKsin(j4);
IkReal x2989=((1.0)*sj0);
IkReal x2990=(cj5*r00);
IkReal x2991=(cj5*r10);
IkReal x2992=(cj5*r20);
IkReal x2993=((1.0)*x2987);
IkReal x2994=((1.0)*x2988);
IkReal x2995=(sj5*x2987);
IkReal x2996=(sj5*x2988);
evalcond[0]=((((-1.0)*x2992*x2993))+((r21*x2995))+((r22*x2988)));
evalcond[1]=((((-1.0)*r22*x2993))+(((-1.0)*x2992*x2994))+((r21*x2996)));
evalcond[2]=(cj0+(((-1.0)*r12*x2993))+(((-1.0)*x2991*x2994))+((r11*x2996)));
evalcond[3]=(((r01*x2995))+(((-1.0)*x2990*x2993))+((r02*x2988))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x2989))+((r12*x2988))+(((-1.0)*x2991*x2993))+((r11*x2995)));
evalcond[5]=(((r01*x2996))+(((-1.0)*x2989))+(((-1.0)*r02*x2993))+(((-1.0)*x2990*x2994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-9.63007856508111)*px))+(((-0.464772131519359)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((9.63007856508111)*py))+(((-0.464772131519359)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-9.63007856508111)*px))+(((-0.464772131519359)*py))))+IKsqr(((((9.63007856508111)*py))+(((-0.464772131519359)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-9.63007856508111)*px))+(((-0.464772131519359)*py))), ((((9.63007856508111)*py))+(((-0.464772131519359)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2997=IKcos(j0);
IkReal x2998=IKsin(j0);
evalcond[0]=((((-0.005)*x2997))+(((-1.0)*px))+(((-0.1036)*x2998)));
evalcond[1]=((((-0.005)*x2998))+(((-1.0)*py))+(((0.1036)*x2997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2999=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2999;
j4eval[1]=IKsign(x2999);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3000=((1.0)*cj5);
IkReal x3001=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3000)));
j4eval[0]=x3001;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3000))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3001);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3002=cj5*cj5;
IkReal x3003=((1.0)*r20);
IkReal x3004=(r01*r21);
IkReal x3005=(r21*sj5);
IkReal x3006=(((cj5*r01*r20*sj5))+(((-1.0)*x3004))+(((-1.0)*r02*r22))+((cj5*r00*x3005))+((x3002*x3004))+(((-1.0)*r00*x3002*x3003)));
j4eval[0]=x3006;
j4eval[1]=((IKabs((((cj0*x3005))+(((-1.0)*cj0*cj5*x3003)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3006);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3007=cj5*cj5;
IkReal x3008=((1.0)*r20);
IkReal x3009=(r01*r21);
IkReal x3010=(r21*sj5);
CheckValue<IkReal> x3011 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3010))+(((-1.0)*cj0*cj5*x3008)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3011.valid){
continue;
}
CheckValue<IkReal> x3012=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x3009))+((cj5*r00*x3010))+(((-1.0)*r02*r22))+((x3007*x3009))+(((-1.0)*r00*x3007*x3008)))),-1);
if(!x3012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3011.value)+(((1.5707963267949)*(x3012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3013=IKcos(j4);
IkReal x3014=IKsin(j4);
IkReal x3015=(cj5*r00);
IkReal x3016=(cj5*r10);
IkReal x3017=(cj5*r20);
IkReal x3018=((1.0)*x3013);
IkReal x3019=((1.0)*x3014);
IkReal x3020=(sj5*x3013);
IkReal x3021=(sj5*x3014);
evalcond[0]=(((r22*x3014))+((r21*x3020))+(((-1.0)*x3017*x3018)));
evalcond[1]=((((-1.0)*r22*x3018))+((r21*x3021))+(((-1.0)*x3017*x3019)));
evalcond[2]=(cj0+((r01*x3020))+(((-1.0)*x3015*x3018))+((r02*x3014)));
evalcond[3]=(sj0+((r11*x3020))+((r12*x3014))+(((-1.0)*x3016*x3018)));
evalcond[4]=(((r11*x3021))+cj0+(((-1.0)*r12*x3018))+(((-1.0)*x3016*x3019)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3018))+((r01*x3021))+(((-1.0)*x3015*x3019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3022=((1.0)*cj5);
CheckValue<IkReal> x3023=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3022))+(((-1.0)*r10*sj5)))),-1);
if(!x3023.valid){
continue;
}
CheckValue<IkReal> x3024 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3022)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3023.value)))+(x3024.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3025=IKcos(j4);
IkReal x3026=IKsin(j4);
IkReal x3027=(cj5*r00);
IkReal x3028=(cj5*r10);
IkReal x3029=(cj5*r20);
IkReal x3030=((1.0)*x3025);
IkReal x3031=((1.0)*x3026);
IkReal x3032=(sj5*x3025);
IkReal x3033=(sj5*x3026);
evalcond[0]=((((-1.0)*x3029*x3030))+((r21*x3032))+((r22*x3026)));
evalcond[1]=((((-1.0)*x3029*x3031))+((r21*x3033))+(((-1.0)*r22*x3030)));
evalcond[2]=(cj0+((r02*x3026))+((r01*x3032))+(((-1.0)*x3027*x3030)));
evalcond[3]=(((r12*x3026))+sj0+((r11*x3032))+(((-1.0)*x3028*x3030)));
evalcond[4]=(cj0+((r11*x3033))+(((-1.0)*x3028*x3031))+(((-1.0)*r12*x3030)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3033))+(((-1.0)*x3027*x3031))+(((-1.0)*r02*x3030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3034 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3034.valid){
continue;
}
CheckValue<IkReal> x3035=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3034.value)+(((1.5707963267949)*(x3035.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3036=IKcos(j4);
IkReal x3037=IKsin(j4);
IkReal x3038=(cj5*r00);
IkReal x3039=(cj5*r10);
IkReal x3040=(cj5*r20);
IkReal x3041=((1.0)*x3036);
IkReal x3042=((1.0)*x3037);
IkReal x3043=(sj5*x3036);
IkReal x3044=(sj5*x3037);
evalcond[0]=(((r21*x3043))+((r22*x3037))+(((-1.0)*x3040*x3041)));
evalcond[1]=(((r21*x3044))+(((-1.0)*r22*x3041))+(((-1.0)*x3040*x3042)));
evalcond[2]=(((r02*x3037))+cj0+(((-1.0)*x3038*x3041))+((r01*x3043)));
evalcond[3]=(sj0+(((-1.0)*x3039*x3041))+((r12*x3037))+((r11*x3043)));
evalcond[4]=(cj0+(((-1.0)*r12*x3041))+(((-1.0)*x3039*x3042))+((r11*x3044)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3038*x3042))+(((-1.0)*r02*x3041))+((r01*x3044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.492063434766163)*px))+(((2.12309223301616)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.12309223301616)*px))+(((0.492063434766163)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.492063434766163)*px))+(((2.12309223301616)*py))))+IKsqr(((((2.12309223301616)*px))+(((0.492063434766163)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.492063434766163)*px))+(((2.12309223301616)*py))), ((((2.12309223301616)*px))+(((0.492063434766163)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3045=IKcos(j0);
IkReal x3046=IKsin(j0);
evalcond[0]=((((0.447)*x3045))+(((-0.1036)*x3046))+(((-1.0)*px)));
evalcond[1]=((((0.447)*x3046))+(((0.1036)*x3045))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3047=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3047;
j4eval[1]=IKsign(x3047);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3048=((1.0)*cj5);
IkReal x3049=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3048)));
j4eval[0]=x3049;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3048)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3049);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3050=cj5*cj5;
IkReal x3051=((1.0)*r20);
IkReal x3052=(r01*r21);
IkReal x3053=(r21*sj5);
IkReal x3054=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3052))+((cj5*r00*x3053))+(((-1.0)*r00*x3050*x3051))+((x3050*x3052)));
j4eval[0]=x3054;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3051))+((cj0*x3053)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3054);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3055=cj5*cj5;
IkReal x3056=((1.0)*r20);
IkReal x3057=(r01*r21);
IkReal x3058=(r21*sj5);
CheckValue<IkReal> x3059=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3057))+(((-1.0)*r00*x3055*x3056))+((cj5*r00*x3058))+((x3055*x3057)))),-1);
if(!x3059.valid){
continue;
}
CheckValue<IkReal> x3060 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3056))+((cj0*x3058)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3059.value)))+(x3060.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3061=IKcos(j4);
IkReal x3062=IKsin(j4);
IkReal x3063=(cj5*r00);
IkReal x3064=(cj5*r10);
IkReal x3065=(cj5*r20);
IkReal x3066=((1.0)*x3061);
IkReal x3067=((1.0)*x3062);
IkReal x3068=(sj5*x3061);
IkReal x3069=(sj5*x3062);
evalcond[0]=(((r22*x3062))+(((-1.0)*x3065*x3066))+((r21*x3068)));
evalcond[1]=((((-1.0)*r22*x3066))+(((-1.0)*x3065*x3067))+((r21*x3069)));
evalcond[2]=(cj0+((r01*x3068))+(((-1.0)*x3063*x3066))+((r02*x3062)));
evalcond[3]=(sj0+((r11*x3068))+((r12*x3062))+(((-1.0)*x3064*x3066)));
evalcond[4]=(cj0+(((-1.0)*r12*x3066))+((r11*x3069))+(((-1.0)*x3064*x3067)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3069))+(((-1.0)*x3063*x3067))+(((-1.0)*r02*x3066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3070=((1.0)*cj5);
CheckValue<IkReal> x3071=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3070)))),-1);
if(!x3071.valid){
continue;
}
CheckValue<IkReal> x3072 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3070))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3071.value)))+(x3072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3073=IKcos(j4);
IkReal x3074=IKsin(j4);
IkReal x3075=(cj5*r00);
IkReal x3076=(cj5*r10);
IkReal x3077=(cj5*r20);
IkReal x3078=((1.0)*x3073);
IkReal x3079=((1.0)*x3074);
IkReal x3080=(sj5*x3073);
IkReal x3081=(sj5*x3074);
evalcond[0]=(((r22*x3074))+((r21*x3080))+(((-1.0)*x3077*x3078)));
evalcond[1]=((((-1.0)*r22*x3078))+((r21*x3081))+(((-1.0)*x3077*x3079)));
evalcond[2]=(cj0+((r01*x3080))+(((-1.0)*x3075*x3078))+((r02*x3074)));
evalcond[3]=(sj0+((r11*x3080))+((r12*x3074))+(((-1.0)*x3076*x3078)));
evalcond[4]=(cj0+((r11*x3081))+(((-1.0)*r12*x3078))+(((-1.0)*x3076*x3079)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3078))+((r01*x3081))+(((-1.0)*x3075*x3079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3082 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3082.valid){
continue;
}
CheckValue<IkReal> x3083=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3082.value)+(((1.5707963267949)*(x3083.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3084=IKcos(j4);
IkReal x3085=IKsin(j4);
IkReal x3086=(cj5*r00);
IkReal x3087=(cj5*r10);
IkReal x3088=(cj5*r20);
IkReal x3089=((1.0)*x3084);
IkReal x3090=((1.0)*x3085);
IkReal x3091=(sj5*x3084);
IkReal x3092=(sj5*x3085);
evalcond[0]=(((r21*x3091))+((r22*x3085))+(((-1.0)*x3088*x3089)));
evalcond[1]=(((r21*x3092))+(((-1.0)*r22*x3089))+(((-1.0)*x3088*x3090)));
evalcond[2]=(((r01*x3091))+cj0+((r02*x3085))+(((-1.0)*x3086*x3089)));
evalcond[3]=(sj0+((r12*x3085))+((r11*x3091))+(((-1.0)*x3087*x3089)));
evalcond[4]=(cj0+(((-1.0)*x3087*x3090))+((r11*x3092))+(((-1.0)*r12*x3089)));
evalcond[5]=(((r01*x3092))+(((-1.0)*sj0))+(((-1.0)*r02*x3089))+(((-1.0)*x3086*x3090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.492063434766163)*px))+(((-2.12309223301616)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.12309223301616)*px))+(((0.492063434766163)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.492063434766163)*px))+(((-2.12309223301616)*py))))+IKsqr(((((-2.12309223301616)*px))+(((0.492063434766163)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.492063434766163)*px))+(((-2.12309223301616)*py))), ((((-2.12309223301616)*px))+(((0.492063434766163)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3093=IKcos(j0);
IkReal x3094=IKsin(j0);
evalcond[0]=((((-0.1036)*x3094))+(((-1.0)*px))+(((-0.447)*x3093)));
evalcond[1]=((((0.1036)*x3093))+(((-1.0)*py))+(((-0.447)*x3094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3095=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3095;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3095);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3096=((1.0)*cj5);
IkReal x3097=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3096)));
j4eval[0]=x3097;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3096)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3097);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3098=((1.0)*cj5);
IkReal x3099=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3098)));
j4eval[0]=x3099;
j4eval[1]=IKsign(x3099);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3098))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3100=((1.0)*cj5);
CheckValue<IkReal> x3101 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3100))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3101.valid){
continue;
}
CheckValue<IkReal> x3102=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3100))+(((-1.0)*r00*sj5)))),-1);
if(!x3102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3101.value)+(((1.5707963267949)*(x3102.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3103=IKcos(j4);
IkReal x3104=IKsin(j4);
IkReal x3105=((1.0)*sj0);
IkReal x3106=(cj5*r00);
IkReal x3107=(cj5*r10);
IkReal x3108=(cj5*r20);
IkReal x3109=((1.0)*x3103);
IkReal x3110=((1.0)*x3104);
IkReal x3111=(sj5*x3103);
IkReal x3112=(sj5*x3104);
evalcond[0]=(((r22*x3104))+((r21*x3111))+(((-1.0)*x3108*x3109)));
evalcond[1]=((((-1.0)*x3108*x3110))+((r21*x3112))+(((-1.0)*r22*x3109)));
evalcond[2]=(cj0+(((-1.0)*r12*x3109))+((r11*x3112))+(((-1.0)*x3107*x3110)));
evalcond[3]=(((r02*x3104))+(((-1.0)*x3106*x3109))+((r01*x3111))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3107*x3109))+(((-1.0)*x3105))+((r12*x3104))+((r11*x3111)));
evalcond[5]=((((-1.0)*x3105))+(((-1.0)*x3106*x3110))+((r01*x3112))+(((-1.0)*r02*x3109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3113=((1.0)*cj5);
CheckValue<IkReal> x3114 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3113)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3114.valid){
continue;
}
CheckValue<IkReal> x3115=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3113)))),-1);
if(!x3115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3114.value)+(((1.5707963267949)*(x3115.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3116=IKcos(j4);
IkReal x3117=IKsin(j4);
IkReal x3118=((1.0)*sj0);
IkReal x3119=(cj5*r00);
IkReal x3120=(cj5*r10);
IkReal x3121=(cj5*r20);
IkReal x3122=((1.0)*x3116);
IkReal x3123=((1.0)*x3117);
IkReal x3124=(sj5*x3116);
IkReal x3125=(sj5*x3117);
evalcond[0]=(((r22*x3117))+((r21*x3124))+(((-1.0)*x3121*x3122)));
evalcond[1]=(((r21*x3125))+(((-1.0)*x3121*x3123))+(((-1.0)*r22*x3122)));
evalcond[2]=(cj0+(((-1.0)*r12*x3122))+(((-1.0)*x3120*x3123))+((r11*x3125)));
evalcond[3]=(((r01*x3124))+((r02*x3117))+(((-1.0)*x3119*x3122))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3117))+(((-1.0)*x3118))+(((-1.0)*x3120*x3122))+((r11*x3124)));
evalcond[5]=(((r01*x3125))+(((-1.0)*r02*x3122))+(((-1.0)*x3118))+(((-1.0)*x3119*x3123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3126 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3126.valid){
continue;
}
CheckValue<IkReal> x3127=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3126.value)+(((1.5707963267949)*(x3127.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3128=IKcos(j4);
IkReal x3129=IKsin(j4);
IkReal x3130=((1.0)*sj0);
IkReal x3131=(cj5*r00);
IkReal x3132=(cj5*r10);
IkReal x3133=(cj5*r20);
IkReal x3134=((1.0)*x3128);
IkReal x3135=((1.0)*x3129);
IkReal x3136=(sj5*x3128);
IkReal x3137=(sj5*x3129);
evalcond[0]=((((-1.0)*x3133*x3134))+((r21*x3136))+((r22*x3129)));
evalcond[1]=((((-1.0)*x3133*x3135))+((r21*x3137))+(((-1.0)*r22*x3134)));
evalcond[2]=(cj0+(((-1.0)*x3132*x3135))+(((-1.0)*r12*x3134))+((r11*x3137)));
evalcond[3]=((((-1.0)*x3131*x3134))+((r01*x3136))+((r02*x3129))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3132*x3134))+((r12*x3129))+((r11*x3136))+(((-1.0)*x3130)));
evalcond[5]=((((-1.0)*x3131*x3135))+((r01*x3137))+(((-1.0)*r02*x3134))+(((-1.0)*x3130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.126505927291133)*px))+(((1.09776861616534)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.126505927291133)*py))+(((1.09776861616534)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.126505927291133)*px))+(((1.09776861616534)*py))))+IKsqr(((((0.126505927291133)*py))+(((1.09776861616534)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.126505927291133)*px))+(((1.09776861616534)*py))), ((((0.126505927291133)*py))+(((1.09776861616534)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3138=IKsin(j0);
IkReal x3139=IKcos(j0);
evalcond[0]=((((-0.1036)*x3138))+(((0.899)*x3139))+(((-1.0)*px)));
evalcond[1]=((((0.1036)*x3139))+(((0.899)*x3138))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3140=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3140;
j4eval[1]=IKsign(x3140);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3141=((1.0)*cj5);
IkReal x3142=((((-1.0)*r11*x3141))+(((-1.0)*r10*sj5)));
j4eval[0]=x3142;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3141)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3142);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3143=cj5*cj5;
IkReal x3144=((1.0)*r20);
IkReal x3145=(r01*r21);
IkReal x3146=(r21*sj5);
IkReal x3147=(((cj5*r01*r20*sj5))+(((-1.0)*x3145))+(((-1.0)*r02*r22))+((x3143*x3145))+((cj5*r00*x3146))+(((-1.0)*r00*x3143*x3144)));
j4eval[0]=x3147;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3146))+(((-1.0)*cj0*cj5*x3144))))));
j4eval[2]=IKsign(x3147);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3148=cj5*cj5;
IkReal x3149=((1.0)*r20);
IkReal x3150=(r01*r21);
IkReal x3151=(r21*sj5);
CheckValue<IkReal> x3152=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3150))+((x3148*x3150))+((cj5*r00*x3151))+(((-1.0)*r00*x3148*x3149)))),-1);
if(!x3152.valid){
continue;
}
CheckValue<IkReal> x3153 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3149))+((cj0*x3151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3152.value)))+(x3153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3154=IKcos(j4);
IkReal x3155=IKsin(j4);
IkReal x3156=(cj5*r00);
IkReal x3157=(cj5*r10);
IkReal x3158=(cj5*r20);
IkReal x3159=((1.0)*x3154);
IkReal x3160=((1.0)*x3155);
IkReal x3161=(sj5*x3154);
IkReal x3162=(sj5*x3155);
evalcond[0]=(((r22*x3155))+(((-1.0)*x3158*x3159))+((r21*x3161)));
evalcond[1]=((((-1.0)*r22*x3159))+(((-1.0)*x3158*x3160))+((r21*x3162)));
evalcond[2]=(((r02*x3155))+cj0+(((-1.0)*x3156*x3159))+((r01*x3161)));
evalcond[3]=((((-1.0)*x3157*x3159))+sj0+((r11*x3161))+((r12*x3155)));
evalcond[4]=((((-1.0)*x3157*x3160))+cj0+((r11*x3162))+(((-1.0)*r12*x3159)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3156*x3160))+((r01*x3162))+(((-1.0)*r02*x3159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3163=((1.0)*cj5);
CheckValue<IkReal> x3164 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3163)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3164.valid){
continue;
}
CheckValue<IkReal> x3165=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3163)))),-1);
if(!x3165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3164.value)+(((1.5707963267949)*(x3165.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3166=IKcos(j4);
IkReal x3167=IKsin(j4);
IkReal x3168=(cj5*r00);
IkReal x3169=(cj5*r10);
IkReal x3170=(cj5*r20);
IkReal x3171=((1.0)*x3166);
IkReal x3172=((1.0)*x3167);
IkReal x3173=(sj5*x3166);
IkReal x3174=(sj5*x3167);
evalcond[0]=(((r22*x3167))+((r21*x3173))+(((-1.0)*x3170*x3171)));
evalcond[1]=(((r21*x3174))+(((-1.0)*r22*x3171))+(((-1.0)*x3170*x3172)));
evalcond[2]=(((r02*x3167))+cj0+(((-1.0)*x3168*x3171))+((r01*x3173)));
evalcond[3]=(((r11*x3173))+(((-1.0)*x3169*x3171))+sj0+((r12*x3167)));
evalcond[4]=(((r11*x3174))+(((-1.0)*x3169*x3172))+cj0+(((-1.0)*r12*x3171)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3168*x3172))+((r01*x3174))+(((-1.0)*r02*x3171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3175 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3175.valid){
continue;
}
CheckValue<IkReal> x3176=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3175.value)+(((1.5707963267949)*(x3176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3177=IKcos(j4);
IkReal x3178=IKsin(j4);
IkReal x3179=(cj5*r00);
IkReal x3180=(cj5*r10);
IkReal x3181=(cj5*r20);
IkReal x3182=((1.0)*x3177);
IkReal x3183=((1.0)*x3178);
IkReal x3184=(sj5*x3177);
IkReal x3185=(sj5*x3178);
evalcond[0]=((((-1.0)*x3181*x3182))+((r22*x3178))+((r21*x3184)));
evalcond[1]=((((-1.0)*r22*x3182))+(((-1.0)*x3181*x3183))+((r21*x3185)));
evalcond[2]=(cj0+((r01*x3184))+(((-1.0)*x3179*x3182))+((r02*x3178)));
evalcond[3]=((((-1.0)*x3180*x3182))+sj0+((r11*x3184))+((r12*x3178)));
evalcond[4]=((((-1.0)*x3180*x3183))+cj0+((r11*x3185))+(((-1.0)*r12*x3182)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3182))+((r01*x3185))+(((-1.0)*x3179*x3183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-9.63007856508111)*px))+(((0.464772131519359)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((9.63007856508111)*py))+(((0.464772131519359)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-9.63007856508111)*px))+(((0.464772131519359)*py))))+IKsqr(((((9.63007856508111)*py))+(((0.464772131519359)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-9.63007856508111)*px))+(((0.464772131519359)*py))), ((((9.63007856508111)*py))+(((0.464772131519359)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3186=IKcos(j0);
IkReal x3187=IKsin(j0);
evalcond[0]=((((0.005)*x3186))+(((-1.0)*px))+(((-0.1036)*x3187)));
evalcond[1]=((((0.005)*x3187))+(((-1.0)*py))+(((0.1036)*x3186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3188=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3188;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3188);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3189=((1.0)*cj5);
IkReal x3190=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3189)));
j4eval[0]=x3190;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3189))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3190);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3191=((1.0)*cj5);
IkReal x3192=((((-1.0)*r01*x3191))+(((-1.0)*r00*sj5)));
j4eval[0]=x3192;
j4eval[1]=IKsign(x3192);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3191)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3193=((1.0)*cj5);
CheckValue<IkReal> x3194=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3193))+(((-1.0)*r00*sj5)))),-1);
if(!x3194.valid){
continue;
}
CheckValue<IkReal> x3195 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3193)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3194.value)))+(x3195.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3196=IKcos(j4);
IkReal x3197=IKsin(j4);
IkReal x3198=((1.0)*sj0);
IkReal x3199=(cj5*r00);
IkReal x3200=(cj5*r10);
IkReal x3201=(cj5*r20);
IkReal x3202=((1.0)*x3196);
IkReal x3203=((1.0)*x3197);
IkReal x3204=(sj5*x3196);
IkReal x3205=(sj5*x3197);
evalcond[0]=((((-1.0)*x3201*x3202))+((r22*x3197))+((r21*x3204)));
evalcond[1]=((((-1.0)*x3201*x3203))+(((-1.0)*r22*x3202))+((r21*x3205)));
evalcond[2]=(cj0+(((-1.0)*x3200*x3203))+((r11*x3205))+(((-1.0)*r12*x3202)));
evalcond[3]=((((-1.0)*x3199*x3202))+((r01*x3204))+((r02*x3197))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3200*x3202))+((r11*x3204))+((r12*x3197))+(((-1.0)*x3198)));
evalcond[5]=((((-1.0)*r02*x3202))+(((-1.0)*x3199*x3203))+((r01*x3205))+(((-1.0)*x3198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3206=((1.0)*cj5);
CheckValue<IkReal> x3207=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3206)))),-1);
if(!x3207.valid){
continue;
}
CheckValue<IkReal> x3208 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3207.value)))+(x3208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3209=IKcos(j4);
IkReal x3210=IKsin(j4);
IkReal x3211=((1.0)*sj0);
IkReal x3212=(cj5*r00);
IkReal x3213=(cj5*r10);
IkReal x3214=(cj5*r20);
IkReal x3215=((1.0)*x3209);
IkReal x3216=((1.0)*x3210);
IkReal x3217=(sj5*x3209);
IkReal x3218=(sj5*x3210);
evalcond[0]=((((-1.0)*x3214*x3215))+((r22*x3210))+((r21*x3217)));
evalcond[1]=((((-1.0)*x3214*x3216))+((r21*x3218))+(((-1.0)*r22*x3215)));
evalcond[2]=(cj0+((r11*x3218))+(((-1.0)*r12*x3215))+(((-1.0)*x3213*x3216)));
evalcond[3]=(((r01*x3217))+(((-1.0)*x3212*x3215))+(((-1.0)*cj0))+((r02*x3210)));
evalcond[4]=(((r12*x3210))+((r11*x3217))+(((-1.0)*x3211))+(((-1.0)*x3213*x3215)));
evalcond[5]=(((r01*x3218))+(((-1.0)*x3212*x3216))+(((-1.0)*x3211))+(((-1.0)*r02*x3215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3219 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3219.valid){
continue;
}
CheckValue<IkReal> x3220=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3219.value)+(((1.5707963267949)*(x3220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3221=IKcos(j4);
IkReal x3222=IKsin(j4);
IkReal x3223=((1.0)*sj0);
IkReal x3224=(cj5*r00);
IkReal x3225=(cj5*r10);
IkReal x3226=(cj5*r20);
IkReal x3227=((1.0)*x3221);
IkReal x3228=((1.0)*x3222);
IkReal x3229=(sj5*x3221);
IkReal x3230=(sj5*x3222);
evalcond[0]=(((r21*x3229))+((r22*x3222))+(((-1.0)*x3226*x3227)));
evalcond[1]=((((-1.0)*r22*x3227))+(((-1.0)*x3226*x3228))+((r21*x3230)));
evalcond[2]=(cj0+(((-1.0)*x3225*x3228))+((r11*x3230))+(((-1.0)*r12*x3227)));
evalcond[3]=(((r02*x3222))+(((-1.0)*x3224*x3227))+((r01*x3229))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3222))+((r11*x3229))+(((-1.0)*x3225*x3227))+(((-1.0)*x3223)));
evalcond[5]=((((-1.0)*r02*x3227))+((r01*x3230))+(((-1.0)*x3224*x3228))+(((-1.0)*x3223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3231=(sj1*sj2);
IkReal x3232=(r00*sj5);
IkReal x3233=(cj5*r01);
IkReal x3234=(cj1*cj2);
IkReal x3235=((2500.0)*px);
IkReal x3236=((1130.0)*sj1);
IkReal x3237=((1117.5)*cj2*sj1);
IkReal x3238=((1117.5)*cj1*sj2);
CheckValue<IkReal> x3239=IKPowWithIntegerCheck(((((259.0)*x3234))+(((-259.0)*x3231))),-1);
if(!x3239.valid){
continue;
}
CheckValue<IkReal> x3240=IKPowWithIntegerCheck((x3234+(((-1.0)*x3231))),-1);
if(!x3240.valid){
continue;
}
if( IKabs(((x3239.value)*((((x3232*x3238))+((x3232*x3237))+((x3232*x3236))+(((283.5)*x3231*x3233))+(((283.5)*x3231*x3232))+((x3231*x3235))+(((-283.5)*x3232*x3234))+(((-283.5)*x3233*x3234))+(((-1.0)*x3234*x3235))+((x3233*x3236))+((x3233*x3237))+((x3233*x3238)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3240.value)*(((((-1.0)*x3232))+(((-1.0)*x3233)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3239.value)*((((x3232*x3238))+((x3232*x3237))+((x3232*x3236))+(((283.5)*x3231*x3233))+(((283.5)*x3231*x3232))+((x3231*x3235))+(((-283.5)*x3232*x3234))+(((-283.5)*x3233*x3234))+(((-1.0)*x3234*x3235))+((x3233*x3236))+((x3233*x3237))+((x3233*x3238))))))+IKsqr(((x3240.value)*(((((-1.0)*x3232))+(((-1.0)*x3233))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3239.value)*((((x3232*x3238))+((x3232*x3237))+((x3232*x3236))+(((283.5)*x3231*x3233))+(((283.5)*x3231*x3232))+((x3231*x3235))+(((-283.5)*x3232*x3234))+(((-283.5)*x3233*x3234))+(((-1.0)*x3234*x3235))+((x3233*x3236))+((x3233*x3237))+((x3233*x3238))))), ((x3240.value)*(((((-1.0)*x3232))+(((-1.0)*x3233))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3241=IKcos(j0);
IkReal x3242=IKsin(j0);
IkReal x3243=((0.447)*cj2);
IkReal x3244=(r00*sj5);
IkReal x3245=(cj5*r01);
IkReal x3246=((1.0)*sj2);
IkReal x3247=(cj1*cj2);
IkReal x3248=(cj5*r11);
IkReal x3249=(r10*sj5);
IkReal x3250=(sj1*x3242);
IkReal x3251=(sj1*x3241);
IkReal x3252=((0.447)*cj1*sj2);
evalcond[0]=((((-1.0)*x3246*x3251))+x3245+x3244+((x3241*x3247)));
evalcond[1]=((((-1.0)*x3246*x3250))+x3249+x3248+((x3242*x3247)));
evalcond[2]=((((-1.0)*x3241*x3252))+(((-1.0)*x3243*x3251))+(((-1.0)*px))+(((-0.1134)*x3245))+(((-0.1134)*x3244))+(((-0.452)*x3251))+(((-0.1036)*x3242)));
evalcond[3]=((((0.1036)*x3241))+(((-1.0)*x3242*x3252))+(((-1.0)*x3243*x3250))+(((-1.0)*py))+(((-0.1134)*x3249))+(((-0.1134)*x3248))+(((-0.452)*x3250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3253=((1.0)*cj5);
IkReal x3254=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3253)));
j4eval[0]=x3254;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3253))))));
j4eval[2]=IKsign(x3254);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3255=((1.0)*cj5);
IkReal x3256=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3255)));
j4eval[0]=x3256;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x3255))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3256);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3257=((1.0)*sj0);
IkReal x3258=((1.0)*cj0);
IkReal x3259=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3259;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x3258))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3257)))))+(IKabs(((((-1.0)*r02*x3258))+(((-1.0)*r12*x3257))))));
j4eval[2]=IKsign(x3259);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3260=((-1.0)*r20);
IkReal x3262 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3262)==0){
continue;
}
IkReal x3261=pow(x3262,-0.5);
CheckValue<IkReal> x3263 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3260),IKFAST_ATAN2_MAGTHRESH);
if(!x3263.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3263.value));
IkReal gconst97=(r21*x3261);
IkReal gconst98=(x3260*x3261);
CheckValue<IkReal> x3264 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3264.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3264.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3265=((-1.0)*r20);
IkReal x3266=x3261;
CheckValue<IkReal> x3268 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3265),IKFAST_ATAN2_MAGTHRESH);
if(!x3268.valid){
continue;
}
IkReal x3267=((-1.0)*(x3268.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3267;
IkReal gconst96=x3267;
IkReal gconst97=(r21*x3266);
IkReal gconst98=(x3265*x3266);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3269=((-1.0)*r20);
IkReal x3270=x3261;
CheckValue<IkReal> x3272 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3269),IKFAST_ATAN2_MAGTHRESH);
if(!x3272.valid){
continue;
}
IkReal x3271=((-1.0)*(x3272.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3271;
IkReal gconst96=x3271;
IkReal gconst97=(r21*x3270);
IkReal gconst98=(x3269*x3270);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3273=((-1.0)*r20);
IkReal x3274=x3261;
CheckValue<IkReal> x3276 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3273),IKFAST_ATAN2_MAGTHRESH);
if(!x3276.valid){
continue;
}
IkReal x3275=((-1.0)*(x3276.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3275;
IkReal gconst96=x3275;
IkReal gconst97=(r21*x3274);
IkReal gconst98=(x3273*x3274);
IkReal x3277=((1.0)*(r22*r22));
CheckValue<IkReal> x3281=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3277))),-1);
if(!x3281.valid){
continue;
}
IkReal x3278=x3281.value;
IkReal x3279=((1.0)*x3278);
IkReal x3280=((((-2.0)*x3278*(r20*r20)*(r21*r21)))+(((-1.0)*x3277))+(((-1.0)*x3279*(r20*r20*r20*r20)))+(((-1.0)*x3279*(r21*r21*r21*r21))));
j4eval[0]=x3280;
j4eval[1]=IKsign(x3280);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3282=(cj1*cj2);
IkReal x3283=(gconst98*r20);
IkReal x3284=(sj1*sj2);
IkReal x3285=(gconst97*r21);
CheckValue<IkReal> x3286 = IKatan2WithCheck(IkReal((((r22*x3284))+(((-1.0)*r22*x3282)))),IkReal(((((-1.0)*x3282*x3285))+(((-1.0)*x3283*x3284))+((x3282*x3283))+((x3284*x3285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3286.valid){
continue;
}
CheckValue<IkReal> x3287=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3283*x3283)))+(((-1.0)*(x3285*x3285)))+(((2.0)*x3283*x3285))+(((-1.0)*(r22*r22))))),-1);
if(!x3287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3286.value)+(((1.5707963267949)*(x3287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3288=IKsin(j4);
IkReal x3289=IKcos(j4);
IkReal x3290=(gconst98*r10);
IkReal x3291=(gconst97*r21);
IkReal x3292=(gconst98*r20);
IkReal x3293=((1.0)*cj2);
IkReal x3294=((1.0)*sj0);
IkReal x3295=(gconst98*r00);
IkReal x3296=(cj1*sj2);
IkReal x3297=((1.0)*x3289);
IkReal x3298=((1.0)*x3288);
IkReal x3299=(gconst97*x3288);
IkReal x3300=(gconst97*x3289);
evalcond[0]=(((x3288*x3291))+(((-1.0)*r22*x3297))+(((-1.0)*x3292*x3298)));
evalcond[1]=((((-1.0)*r12*x3297))+cj0+((r11*x3299))+(((-1.0)*x3290*x3298)));
evalcond[2]=(((r01*x3299))+(((-1.0)*x3294))+(((-1.0)*r02*x3297))+(((-1.0)*x3295*x3298)));
evalcond[3]=(((x3289*x3291))+((sj1*sj2))+(((-1.0)*cj1*x3293))+(((-1.0)*x3292*x3297))+((r22*x3288)));
evalcond[4]=(((r02*x3288))+(((-1.0)*cj0*x3296))+(((-1.0)*cj0*sj1*x3293))+(((-1.0)*x3295*x3297))+((r01*x3300)));
evalcond[5]=(((r11*x3300))+(((-1.0)*sj0*sj1*x3293))+(((-1.0)*x3294*x3296))+((r12*x3288))+(((-1.0)*x3290*x3297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3301=((1.0)*gconst98);
CheckValue<IkReal> x3302 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3301)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3302.valid){
continue;
}
CheckValue<IkReal> x3303=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst97*r10))+(((-1.0)*r11*x3301)))),-1);
if(!x3303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3302.value)+(((1.5707963267949)*(x3303.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3304=IKsin(j4);
IkReal x3305=IKcos(j4);
IkReal x3306=(gconst98*r10);
IkReal x3307=(gconst97*r21);
IkReal x3308=(gconst98*r20);
IkReal x3309=((1.0)*cj2);
IkReal x3310=((1.0)*sj0);
IkReal x3311=(gconst98*r00);
IkReal x3312=(cj1*sj2);
IkReal x3313=((1.0)*x3305);
IkReal x3314=((1.0)*x3304);
IkReal x3315=(gconst97*x3304);
IkReal x3316=(gconst97*x3305);
evalcond[0]=((((-1.0)*r22*x3313))+((x3304*x3307))+(((-1.0)*x3308*x3314)));
evalcond[1]=(cj0+((r11*x3315))+(((-1.0)*x3306*x3314))+(((-1.0)*r12*x3313)));
evalcond[2]=((((-1.0)*x3310))+(((-1.0)*r02*x3313))+(((-1.0)*x3311*x3314))+((r01*x3315)));
evalcond[3]=((((-1.0)*cj1*x3309))+((sj1*sj2))+((r22*x3304))+(((-1.0)*x3308*x3313))+((x3305*x3307)));
evalcond[4]=((((-1.0)*cj0*sj1*x3309))+((r02*x3304))+(((-1.0)*cj0*x3312))+(((-1.0)*x3311*x3313))+((r01*x3316)));
evalcond[5]=(((r11*x3316))+(((-1.0)*x3306*x3313))+(((-1.0)*sj0*sj1*x3309))+((r12*x3304))+(((-1.0)*x3310*x3312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3317=((1.0)*gconst98);
CheckValue<IkReal> x3318 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3317))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3318.valid){
continue;
}
CheckValue<IkReal> x3319=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3317))+(((-1.0)*gconst97*r00)))),-1);
if(!x3319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3318.value)+(((1.5707963267949)*(x3319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3320=IKsin(j4);
IkReal x3321=IKcos(j4);
IkReal x3322=(gconst98*r10);
IkReal x3323=(gconst97*r21);
IkReal x3324=(gconst98*r20);
IkReal x3325=((1.0)*cj2);
IkReal x3326=((1.0)*sj0);
IkReal x3327=(gconst98*r00);
IkReal x3328=(cj1*sj2);
IkReal x3329=((1.0)*x3321);
IkReal x3330=((1.0)*x3320);
IkReal x3331=(gconst97*x3320);
IkReal x3332=(gconst97*x3321);
evalcond[0]=((((-1.0)*x3324*x3330))+(((-1.0)*r22*x3329))+((x3320*x3323)));
evalcond[1]=((((-1.0)*x3322*x3330))+cj0+((r11*x3331))+(((-1.0)*r12*x3329)));
evalcond[2]=((((-1.0)*x3326))+(((-1.0)*r02*x3329))+((r01*x3331))+(((-1.0)*x3327*x3330)));
evalcond[3]=(((r22*x3320))+(((-1.0)*x3324*x3329))+((sj1*sj2))+(((-1.0)*cj1*x3325))+((x3321*x3323)));
evalcond[4]=((((-1.0)*x3327*x3329))+((r01*x3332))+(((-1.0)*cj0*sj1*x3325))+((r02*x3320))+(((-1.0)*cj0*x3328)));
evalcond[5]=(((r12*x3320))+(((-1.0)*x3326*x3328))+(((-1.0)*x3322*x3329))+((r11*x3332))+(((-1.0)*sj0*sj1*x3325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3333=((-1.0)*r21);
IkReal x3335 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3335)==0){
continue;
}
IkReal x3334=pow(x3335,-0.5);
CheckValue<IkReal> x3336 = IKatan2WithCheck(IkReal(x3333),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3336.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3336.value))));
IkReal gconst100=(x3333*x3334);
IkReal gconst101=((1.0)*r20*x3334);
CheckValue<IkReal> x3337 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3337.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3337.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3338=((-1.0)*r21);
CheckValue<IkReal> x3341 = IKatan2WithCheck(IkReal(x3338),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3341.valid){
continue;
}
IkReal x3339=((1.0)*(x3341.value));
IkReal x3340=x3334;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3339)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3339)));
IkReal gconst100=(x3338*x3340);
IkReal gconst101=((1.0)*r20*x3340);
IkReal x3342=r22*r22;
IkReal x3343=((1.0)*x3342);
CheckValue<IkReal> x3347=IKPowWithIntegerCheck(((-1.0)+x3342),-1);
if(!x3347.valid){
continue;
}
IkReal x3344=x3347.value;
if((((1.0)+(((-1.0)*x3343)))) < -0.00001)
continue;
IkReal x3345=IKsqrt(((1.0)+(((-1.0)*x3343))));
IkReal x3346=(cj0*x3344*x3345);
j4eval[0]=((IKabs(((((-1.0)*x3343*x3346))+x3346)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3348=((-1.0)*r21);
CheckValue<IkReal> x3351 = IKatan2WithCheck(IkReal(x3348),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3351.valid){
continue;
}
IkReal x3349=((1.0)*(x3351.value));
IkReal x3350=x3334;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3349)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3349)));
IkReal gconst100=(x3348*x3350);
IkReal gconst101=((1.0)*r20*x3350);
IkReal x3352=r22*r22;
IkReal x3353=((1.0)*x3352);
CheckValue<IkReal> x3357=IKPowWithIntegerCheck(((-1.0)+x3352),-1);
if(!x3357.valid){
continue;
}
IkReal x3354=x3357.value;
if((((1.0)+(((-1.0)*x3353)))) < -0.00001)
continue;
IkReal x3355=IKsqrt(((1.0)+(((-1.0)*x3353))));
IkReal x3356=(sj0*x3354*x3355);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3356+(((-1.0)*x3353*x3356))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3358=((-1.0)*r21);
CheckValue<IkReal> x3361 = IKatan2WithCheck(IkReal(x3358),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3361.valid){
continue;
}
IkReal x3359=((1.0)*(x3361.value));
IkReal x3360=x3334;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3359)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3359)));
IkReal gconst100=(x3358*x3360);
IkReal gconst101=((1.0)*r20*x3360);
IkReal x3362=r22*r22;
IkReal x3363=(r12*sj0);
IkReal x3364=(cj0*r02);
CheckValue<IkReal> x3368=IKPowWithIntegerCheck(((-1.0)+x3362),-1);
if(!x3368.valid){
continue;
}
IkReal x3365=x3368.value;
if((((1.0)+(((-1.0)*x3362)))) < -0.00001)
continue;
IkReal x3366=IKsqrt(((1.0)+(((-1.0)*x3362))));
IkReal x3367=(r22*x3365*x3366);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3363))+(((-1.0)*x3364)))))+(IKabs((((x3363*x3367))+((x3364*x3367))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3369=((1.0)*sj0);
IkReal x3370=((1.0)*gconst100);
CheckValue<IkReal> x3371 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3369))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst100*r11*x3369))+((gconst101*r10*sj0))+(((-1.0)*cj0*r01*x3370))+((cj0*gconst101*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3371.valid){
continue;
}
CheckValue<IkReal> x3372=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3370))+(((-1.0)*gconst101*r21)))),-1);
if(!x3372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3371.value)+(((1.5707963267949)*(x3372.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3373=IKsin(j4);
IkReal x3374=IKcos(j4);
IkReal x3375=(gconst101*r20);
IkReal x3376=(gconst101*r10);
IkReal x3377=((1.0)*cj2);
IkReal x3378=(gconst101*r00);
IkReal x3379=((1.0)*sj0);
IkReal x3380=(cj1*sj2);
IkReal x3381=((1.0)*x3374);
IkReal x3382=((1.0)*x3373);
IkReal x3383=(gconst100*x3373);
IkReal x3384=(gconst100*x3374);
evalcond[0]=((((-1.0)*r22*x3381))+((r21*x3383))+(((-1.0)*x3375*x3382)));
evalcond[1]=(cj0+(((-1.0)*x3376*x3382))+((r11*x3383))+(((-1.0)*r12*x3381)));
evalcond[2]=(((r01*x3383))+(((-1.0)*x3378*x3382))+(((-1.0)*x3379))+(((-1.0)*r02*x3381)));
evalcond[3]=((((-1.0)*cj1*x3377))+((r22*x3373))+((sj1*sj2))+((r21*x3384))+(((-1.0)*x3375*x3381)));
evalcond[4]=(((r01*x3384))+(((-1.0)*x3378*x3381))+(((-1.0)*cj0*sj1*x3377))+((r02*x3373))+(((-1.0)*cj0*x3380)));
evalcond[5]=(((r12*x3373))+(((-1.0)*x3376*x3381))+(((-1.0)*sj0*sj1*x3377))+(((-1.0)*x3379*x3380))+((r11*x3384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3385=((1.0)*gconst101);
CheckValue<IkReal> x3386 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3385))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3386.valid){
continue;
}
CheckValue<IkReal> x3387=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3385)))),-1);
if(!x3387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3386.value)+(((1.5707963267949)*(x3387.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3388=IKsin(j4);
IkReal x3389=IKcos(j4);
IkReal x3390=(gconst101*r20);
IkReal x3391=(gconst101*r10);
IkReal x3392=((1.0)*cj2);
IkReal x3393=(gconst101*r00);
IkReal x3394=((1.0)*sj0);
IkReal x3395=(cj1*sj2);
IkReal x3396=((1.0)*x3389);
IkReal x3397=((1.0)*x3388);
IkReal x3398=(gconst100*x3388);
IkReal x3399=(gconst100*x3389);
evalcond[0]=((((-1.0)*r22*x3396))+((r21*x3398))+(((-1.0)*x3390*x3397)));
evalcond[1]=(cj0+((r11*x3398))+(((-1.0)*r12*x3396))+(((-1.0)*x3391*x3397)));
evalcond[2]=(((r01*x3398))+(((-1.0)*r02*x3396))+(((-1.0)*x3394))+(((-1.0)*x3393*x3397)));
evalcond[3]=(((sj1*sj2))+((r21*x3399))+((r22*x3388))+(((-1.0)*x3390*x3396))+(((-1.0)*cj1*x3392)));
evalcond[4]=((((-1.0)*cj0*x3395))+((r01*x3399))+((r02*x3388))+(((-1.0)*x3393*x3396))+(((-1.0)*cj0*sj1*x3392)));
evalcond[5]=((((-1.0)*sj0*sj1*x3392))+(((-1.0)*x3394*x3395))+((r11*x3399))+((r12*x3388))+(((-1.0)*x3391*x3396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3400=((1.0)*gconst101);
CheckValue<IkReal> x3401 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3400)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3401.valid){
continue;
}
CheckValue<IkReal> x3402=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3400))+(((-1.0)*gconst100*r00)))),-1);
if(!x3402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3401.value)+(((1.5707963267949)*(x3402.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3403=IKsin(j4);
IkReal x3404=IKcos(j4);
IkReal x3405=(gconst101*r20);
IkReal x3406=(gconst101*r10);
IkReal x3407=((1.0)*cj2);
IkReal x3408=(gconst101*r00);
IkReal x3409=((1.0)*sj0);
IkReal x3410=(cj1*sj2);
IkReal x3411=((1.0)*x3404);
IkReal x3412=((1.0)*x3403);
IkReal x3413=(gconst100*x3403);
IkReal x3414=(gconst100*x3404);
evalcond[0]=((((-1.0)*r22*x3411))+((r21*x3413))+(((-1.0)*x3405*x3412)));
evalcond[1]=(cj0+((r11*x3413))+(((-1.0)*r12*x3411))+(((-1.0)*x3406*x3412)));
evalcond[2]=((((-1.0)*r02*x3411))+(((-1.0)*x3408*x3412))+((r01*x3413))+(((-1.0)*x3409)));
evalcond[3]=(((r22*x3403))+((r21*x3414))+(((-1.0)*x3405*x3411))+((sj1*sj2))+(((-1.0)*cj1*x3407)));
evalcond[4]=(((r02*x3403))+(((-1.0)*x3408*x3411))+((r01*x3414))+(((-1.0)*cj0*x3410))+(((-1.0)*cj0*sj1*x3407)));
evalcond[5]=((((-1.0)*sj0*sj1*x3407))+((r11*x3414))+((r12*x3403))+(((-1.0)*x3409*x3410))+(((-1.0)*x3406*x3411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3415=((-1.0)*r10);
IkReal x3417 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3417)==0){
continue;
}
IkReal x3416=pow(x3417,-0.5);
CheckValue<IkReal> x3418 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3415),IKFAST_ATAN2_MAGTHRESH);
if(!x3418.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3418.value));
IkReal gconst103=(r11*x3416);
IkReal gconst104=(x3415*x3416);
CheckValue<IkReal> x3419 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3419.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3419.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3420=((-1.0)*r10);
IkReal x3421=x3416;
CheckValue<IkReal> x3423 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3420),IKFAST_ATAN2_MAGTHRESH);
if(!x3423.valid){
continue;
}
IkReal x3422=((-1.0)*(x3423.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3422;
IkReal gconst102=x3422;
IkReal gconst103=(r11*x3421);
IkReal gconst104=(x3420*x3421);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3424=((1.0)*sj0);
IkReal x3425=((1.0)*gconst103);
CheckValue<IkReal> x3426 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3424))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst103*r11*x3424))+((gconst104*r10*sj0))+(((-1.0)*cj0*r01*x3425))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3426.valid){
continue;
}
CheckValue<IkReal> x3427=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3425)))),-1);
if(!x3427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3426.value)+(((1.5707963267949)*(x3427.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3428=IKsin(j4);
IkReal x3429=IKcos(j4);
IkReal x3430=(gconst103*r11);
IkReal x3431=((1.0)*cj2);
IkReal x3432=((1.0)*sj0);
IkReal x3433=(cj1*sj2);
IkReal x3434=((1.0)*x3429);
IkReal x3435=(gconst103*x3429);
IkReal x3436=(gconst103*x3428);
IkReal x3437=((1.0)*gconst104*x3428);
evalcond[0]=((((-1.0)*r22*x3434))+(((-1.0)*r20*x3437))+((r21*x3436)));
evalcond[1]=((((-1.0)*r12*x3434))+((x3428*x3430))+cj0+(((-1.0)*r10*x3437)));
evalcond[2]=(((r01*x3436))+(((-1.0)*x3432))+(((-1.0)*r00*x3437))+(((-1.0)*r02*x3434)));
evalcond[3]=(((sj1*sj2))+((r21*x3435))+(((-1.0)*cj1*x3431))+(((-1.0)*gconst104*r20*x3434))+((r22*x3428)));
evalcond[4]=((((-1.0)*gconst104*r00*x3434))+((r01*x3435))+(((-1.0)*cj0*sj1*x3431))+((r02*x3428))+(((-1.0)*cj0*x3433)));
evalcond[5]=(((x3429*x3430))+(((-1.0)*sj0*sj1*x3431))+(((-1.0)*x3432*x3433))+(((-1.0)*gconst104*r10*x3434))+((r12*x3428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3438=((1.0)*gconst104);
CheckValue<IkReal> x3439 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3438))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3439.valid){
continue;
}
CheckValue<IkReal> x3440=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3438)))),-1);
if(!x3440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3439.value)+(((1.5707963267949)*(x3440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3441=IKsin(j4);
IkReal x3442=IKcos(j4);
IkReal x3443=(gconst103*r11);
IkReal x3444=((1.0)*cj2);
IkReal x3445=((1.0)*sj0);
IkReal x3446=(cj1*sj2);
IkReal x3447=((1.0)*x3442);
IkReal x3448=(gconst103*x3442);
IkReal x3449=(gconst103*x3441);
IkReal x3450=((1.0)*gconst104*x3441);
evalcond[0]=(((r21*x3449))+(((-1.0)*r20*x3450))+(((-1.0)*r22*x3447)));
evalcond[1]=(cj0+(((-1.0)*r10*x3450))+(((-1.0)*r12*x3447))+((x3441*x3443)));
evalcond[2]=((((-1.0)*r02*x3447))+((r01*x3449))+(((-1.0)*r00*x3450))+(((-1.0)*x3445)));
evalcond[3]=(((r21*x3448))+(((-1.0)*gconst104*r20*x3447))+((sj1*sj2))+((r22*x3441))+(((-1.0)*cj1*x3444)));
evalcond[4]=((((-1.0)*cj0*sj1*x3444))+((r02*x3441))+(((-1.0)*cj0*x3446))+(((-1.0)*gconst104*r00*x3447))+((r01*x3448)));
evalcond[5]=(((x3442*x3443))+((r12*x3441))+(((-1.0)*sj0*sj1*x3444))+(((-1.0)*x3445*x3446))+(((-1.0)*gconst104*r10*x3447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3451=((-1.0)*r11);
IkReal x3453 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3453)==0){
continue;
}
IkReal x3452=pow(x3453,-0.5);
CheckValue<IkReal> x3454 = IKatan2WithCheck(IkReal(x3451),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3454.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3454.value))));
IkReal gconst106=(x3451*x3452);
IkReal gconst107=((1.0)*r10*x3452);
CheckValue<IkReal> x3455 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3455.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3455.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3456=((-1.0)*r11);
CheckValue<IkReal> x3459 = IKatan2WithCheck(IkReal(x3456),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3459.valid){
continue;
}
IkReal x3457=((1.0)*(x3459.value));
IkReal x3458=x3452;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3457)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3457)));
IkReal gconst106=(x3456*x3458);
IkReal gconst107=((1.0)*r10*x3458);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3460=((-1.0)*r11);
CheckValue<IkReal> x3463 = IKatan2WithCheck(IkReal(x3460),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3463.valid){
continue;
}
IkReal x3461=((1.0)*(x3463.value));
IkReal x3462=x3452;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3461)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3461)));
IkReal gconst106=(x3460*x3462);
IkReal gconst107=((1.0)*r10*x3462);
IkReal x3464=r12*r12;
IkReal x3465=((1.0)*sj0);
IkReal x3466=(cj0*r02);
IkReal x3467=x3452;
j4eval[0]=((IKabs((((r12*x3466*x3467))+(((-1.0)*x3465*x3467))+((sj0*x3464*x3467)))))+(IKabs(((((-1.0)*r12*x3465))+(((-1.0)*x3466))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3468=((-1.0)*r11);
CheckValue<IkReal> x3471 = IKatan2WithCheck(IkReal(x3468),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3471.valid){
continue;
}
IkReal x3469=((1.0)*(x3471.value));
IkReal x3470=x3452;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3469)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3469)));
IkReal gconst106=(x3468*x3470);
IkReal gconst107=((1.0)*r10*x3470);
IkReal x3472=r12*r12;
IkReal x3473=((1.0)+(((-1.0)*x3472)));
IkReal x3474=(r22*sj1*sj2);
IkReal x3475=(cj1*cj2*r22);
CheckValue<IkReal> x3482=IKPowWithIntegerCheck(x3473,-1);
if(!x3482.valid){
continue;
}
IkReal x3476=x3482.value;
CheckValue<IkReal> x3483=IKPowWithIntegerCheck(((-1.0)+x3472),-1);
if(!x3483.valid){
continue;
}
IkReal x3477=x3483.value;
IkReal x3478=((1.0)*x3476);
if((x3473) < -0.00001)
continue;
IkReal x3479=IKsqrt(x3473);
IkReal x3480=(r12*x3477*x3479);
IkReal x3481=((((-1.0)*x3478*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x3476))+(((-1.0)*x3478*(r10*r10)*(r20*r20))));
j4eval[0]=x3481;
j4eval[1]=((IKabs((((x3475*x3480))+(((-1.0)*x3474*x3480)))))+(IKabs((x3474+(((-1.0)*x3475))))));
j4eval[2]=IKsign(x3481);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3484=(sj1*sj2);
IkReal x3485=(gconst106*r21);
IkReal x3486=(gconst107*r20);
IkReal x3487=(cj1*cj2);
CheckValue<IkReal> x3488 = IKatan2WithCheck(IkReal((((r22*x3484))+(((-1.0)*r22*x3487)))),IkReal(((((-1.0)*x3485*x3487))+((x3484*x3485))+((x3486*x3487))+(((-1.0)*x3484*x3486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3488.valid){
continue;
}
CheckValue<IkReal> x3489=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((-1.0)*(x3485*x3485)))+(((2.0)*x3485*x3486))+(((-1.0)*(x3486*x3486))))),-1);
if(!x3489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3488.value)+(((1.5707963267949)*(x3489.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3490=IKsin(j4);
IkReal x3491=IKcos(j4);
IkReal x3492=(gconst107*r10);
IkReal x3493=(gconst107*r00);
IkReal x3494=((1.0)*cj2);
IkReal x3495=(gconst107*r20);
IkReal x3496=((1.0)*sj0);
IkReal x3497=(cj1*sj2);
IkReal x3498=((1.0)*x3491);
IkReal x3499=(gconst106*x3491);
IkReal x3500=(gconst106*x3490);
IkReal x3501=((1.0)*x3490);
evalcond[0]=((((-1.0)*x3495*x3501))+(((-1.0)*r22*x3498))+((r21*x3500)));
evalcond[1]=((((-1.0)*r12*x3498))+cj0+(((-1.0)*x3492*x3501))+((r11*x3500)));
evalcond[2]=(((r01*x3500))+(((-1.0)*r02*x3498))+(((-1.0)*x3493*x3501))+(((-1.0)*x3496)));
evalcond[3]=((((-1.0)*cj1*x3494))+((sj1*sj2))+((r22*x3490))+(((-1.0)*x3495*x3498))+((r21*x3499)));
evalcond[4]=((((-1.0)*cj0*x3497))+((r01*x3499))+(((-1.0)*cj0*sj1*x3494))+(((-1.0)*x3493*x3498))+((r02*x3490)));
evalcond[5]=((((-1.0)*x3496*x3497))+(((-1.0)*x3492*x3498))+((r11*x3499))+(((-1.0)*sj0*sj1*x3494))+((r12*x3490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3502=((1.0)*sj0);
IkReal x3503=((1.0)*gconst106);
CheckValue<IkReal> x3504 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3502))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3503))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x3502))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3504.valid){
continue;
}
CheckValue<IkReal> x3505=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3503)))),-1);
if(!x3505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3504.value)+(((1.5707963267949)*(x3505.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3506=IKsin(j4);
IkReal x3507=IKcos(j4);
IkReal x3508=(gconst107*r10);
IkReal x3509=(gconst107*r00);
IkReal x3510=((1.0)*cj2);
IkReal x3511=(gconst107*r20);
IkReal x3512=((1.0)*sj0);
IkReal x3513=(cj1*sj2);
IkReal x3514=((1.0)*x3507);
IkReal x3515=(gconst106*x3507);
IkReal x3516=(gconst106*x3506);
IkReal x3517=((1.0)*x3506);
evalcond[0]=(((r21*x3516))+(((-1.0)*x3511*x3517))+(((-1.0)*r22*x3514)));
evalcond[1]=(cj0+(((-1.0)*x3508*x3517))+((r11*x3516))+(((-1.0)*r12*x3514)));
evalcond[2]=((((-1.0)*r02*x3514))+(((-1.0)*x3509*x3517))+(((-1.0)*x3512))+((r01*x3516)));
evalcond[3]=((((-1.0)*cj1*x3510))+((r21*x3515))+(((-1.0)*x3511*x3514))+((sj1*sj2))+((r22*x3506)));
evalcond[4]=((((-1.0)*x3509*x3514))+((r01*x3515))+((r02*x3506))+(((-1.0)*cj0*x3513))+(((-1.0)*cj0*sj1*x3510)));
evalcond[5]=((((-1.0)*x3512*x3513))+((r12*x3506))+(((-1.0)*x3508*x3514))+((r11*x3515))+(((-1.0)*sj0*sj1*x3510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3518=((1.0)*gconst107);
CheckValue<IkReal> x3519=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3518)))),-1);
if(!x3519.valid){
continue;
}
CheckValue<IkReal> x3520 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3518))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3519.value)))+(x3520.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3521=IKsin(j4);
IkReal x3522=IKcos(j4);
IkReal x3523=(gconst107*r10);
IkReal x3524=(gconst107*r00);
IkReal x3525=((1.0)*cj2);
IkReal x3526=(gconst107*r20);
IkReal x3527=((1.0)*sj0);
IkReal x3528=(cj1*sj2);
IkReal x3529=((1.0)*x3522);
IkReal x3530=(gconst106*x3522);
IkReal x3531=(gconst106*x3521);
IkReal x3532=((1.0)*x3521);
evalcond[0]=((((-1.0)*r22*x3529))+((r21*x3531))+(((-1.0)*x3526*x3532)));
evalcond[1]=(((r11*x3531))+cj0+(((-1.0)*x3523*x3532))+(((-1.0)*r12*x3529)));
evalcond[2]=((((-1.0)*r02*x3529))+(((-1.0)*x3527))+(((-1.0)*x3524*x3532))+((r01*x3531)));
evalcond[3]=((((-1.0)*cj1*x3525))+(((-1.0)*x3526*x3529))+((sj1*sj2))+((r21*x3530))+((r22*x3521)));
evalcond[4]=((((-1.0)*x3524*x3529))+((r02*x3521))+((r01*x3530))+(((-1.0)*cj0*x3528))+(((-1.0)*cj0*sj1*x3525)));
evalcond[5]=((((-1.0)*x3527*x3528))+((r11*x3530))+((r12*x3521))+(((-1.0)*sj0*sj1*x3525))+(((-1.0)*x3523*x3529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3533=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3533;
j4eval[1]=IKsign(x3533);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3534=((1.0)*cj5);
IkReal x3535=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3534)));
j4eval[0]=x3535;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3534)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3535);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3536=(sj1*sj2);
IkReal x3537=(cj5*r10);
IkReal x3538=(r11*sj5);
IkReal x3539=(cj1*cj2);
IkReal x3540=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3540;
j4eval[1]=((IKabs((((r12*x3539))+(((-1.0)*r12*x3536)))))+(IKabs(((((-1.0)*x3536*x3537))+(((-1.0)*x3538*x3539))+((x3536*x3538))+((x3537*x3539))))));
j4eval[2]=IKsign(x3540);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3541=(sj1*sj2);
IkReal x3542=(cj5*r10);
IkReal x3543=(r11*sj5);
IkReal x3544=(cj1*cj2);
CheckValue<IkReal> x3545=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3545.valid){
continue;
}
CheckValue<IkReal> x3546 = IKatan2WithCheck(IkReal((((x3541*x3543))+((x3542*x3544))+(((-1.0)*x3543*x3544))+(((-1.0)*x3541*x3542)))),IkReal((((r12*x3544))+(((-1.0)*r12*x3541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3545.value)))+(x3546.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3547=IKcos(j4);
IkReal x3548=IKsin(j4);
IkReal x3549=(cj5*r00);
IkReal x3550=(cj5*r10);
IkReal x3551=(r21*sj5);
IkReal x3552=((1.0)*cj2);
IkReal x3553=(cj5*r20);
IkReal x3554=((1.0)*x3547);
IkReal x3555=((1.0)*x3548);
IkReal x3556=(sj5*x3548);
IkReal x3557=(sj5*x3547);
evalcond[0]=(((r12*x3548))+(((-1.0)*x3550*x3554))+((r11*x3557)));
evalcond[1]=(((x3548*x3551))+(((-1.0)*x3553*x3555))+(((-1.0)*r22*x3554)));
evalcond[2]=(((r01*x3556))+(((-1.0)*x3549*x3555))+(((-1.0)*r02*x3554)));
evalcond[3]=((1.0)+(((-1.0)*x3550*x3555))+(((-1.0)*r12*x3554))+((r11*x3556)));
evalcond[4]=(((sj1*sj2))+((x3547*x3551))+(((-1.0)*x3553*x3554))+(((-1.0)*cj1*x3552))+((r22*x3548)));
evalcond[5]=(((r02*x3548))+(((-1.0)*sj1*x3552))+((r01*x3557))+(((-1.0)*cj1*sj2))+(((-1.0)*x3549*x3554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3558=((1.0)*cj5);
CheckValue<IkReal> x3559 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3558))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3559.valid){
continue;
}
CheckValue<IkReal> x3560=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3558))+(((-1.0)*r00*sj5)))),-1);
if(!x3560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3559.value)+(((1.5707963267949)*(x3560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3561=IKcos(j4);
IkReal x3562=IKsin(j4);
IkReal x3563=(cj5*r00);
IkReal x3564=(cj5*r10);
IkReal x3565=(r21*sj5);
IkReal x3566=((1.0)*cj2);
IkReal x3567=(cj5*r20);
IkReal x3568=((1.0)*x3561);
IkReal x3569=((1.0)*x3562);
IkReal x3570=(sj5*x3562);
IkReal x3571=(sj5*x3561);
evalcond[0]=(((r11*x3571))+(((-1.0)*x3564*x3568))+((r12*x3562)));
evalcond[1]=(((x3562*x3565))+(((-1.0)*r22*x3568))+(((-1.0)*x3567*x3569)));
evalcond[2]=((((-1.0)*r02*x3568))+((r01*x3570))+(((-1.0)*x3563*x3569)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3568))+((r11*x3570))+(((-1.0)*x3564*x3569)));
evalcond[4]=(((sj1*sj2))+((x3561*x3565))+((r22*x3562))+(((-1.0)*x3567*x3568))+(((-1.0)*cj1*x3566)));
evalcond[5]=((((-1.0)*sj1*x3566))+((r01*x3571))+(((-1.0)*cj1*sj2))+(((-1.0)*x3563*x3568))+((r02*x3562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3572=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3572.valid){
continue;
}
CheckValue<IkReal> x3573 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3572.value)))+(x3573.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3574=IKcos(j4);
IkReal x3575=IKsin(j4);
IkReal x3576=(cj5*r00);
IkReal x3577=(cj5*r10);
IkReal x3578=(r21*sj5);
IkReal x3579=((1.0)*cj2);
IkReal x3580=(cj5*r20);
IkReal x3581=((1.0)*x3574);
IkReal x3582=((1.0)*x3575);
IkReal x3583=(sj5*x3575);
IkReal x3584=(sj5*x3574);
evalcond[0]=((((-1.0)*x3577*x3581))+((r11*x3584))+((r12*x3575)));
evalcond[1]=(((x3575*x3578))+(((-1.0)*r22*x3581))+(((-1.0)*x3580*x3582)));
evalcond[2]=((((-1.0)*x3576*x3582))+(((-1.0)*r02*x3581))+((r01*x3583)));
evalcond[3]=((1.0)+(((-1.0)*x3577*x3582))+((r11*x3583))+(((-1.0)*r12*x3581)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x3580*x3581))+((r22*x3575))+((x3574*x3578))+(((-1.0)*cj1*x3579)));
evalcond[5]=((((-1.0)*x3576*x3581))+(((-1.0)*cj1*sj2))+((r01*x3584))+((r02*x3575))+(((-1.0)*sj1*x3579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3585=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3585;
j4eval[1]=IKsign(x3585);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3586=((1.0)*cj5);
IkReal x3587=((((-1.0)*r21*x3586))+(((-1.0)*r20*sj5)));
j4eval[0]=x3587;
j4eval[1]=((IKabs(((((-1.0)*r00*x3586))+((r01*sj5)))))+(IKabs(r02)));
j4eval[2]=IKsign(x3587);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3588=cj5*cj5;
IkReal x3589=r11*r11;
IkReal x3590=(r11*sj5);
IkReal x3591=(cj5*r10);
IkReal x3592=((r12*r12)+(((-1.0)*x3588*x3589))+(((-2.0)*x3590*x3591))+x3589+((x3588*(r10*r10))));
j4eval[0]=x3592;
j4eval[1]=IKsign(x3592);
j4eval[2]=((IKabs(r12))+(IKabs((x3590+(((-1.0)*x3591))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3593=cj5*cj5;
IkReal x3594=r11*r11;
IkReal x3595=(cj5*r10);
IkReal x3596=(r11*sj5);
CheckValue<IkReal> x3597 = IKatan2WithCheck(IkReal((x3596+(((-1.0)*x3595)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3597.valid){
continue;
}
CheckValue<IkReal> x3598=IKPowWithIntegerCheck(IKsign(((r12*r12)+x3594+(((-2.0)*x3595*x3596))+((x3593*(r10*r10)))+(((-1.0)*x3593*x3594)))),-1);
if(!x3598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3597.value)+(((1.5707963267949)*(x3598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3599=IKcos(j4);
IkReal x3600=IKsin(j4);
IkReal x3601=(cj5*r00);
IkReal x3602=(cj5*r10);
IkReal x3603=(r21*sj5);
IkReal x3604=(cj5*r20);
IkReal x3605=((1.0)*x3599);
IkReal x3606=((1.0)*x3600);
IkReal x3607=(sj5*x3600);
IkReal x3608=(sj5*x3599);
evalcond[0]=(((r11*x3608))+(((-1.0)*x3602*x3605))+((r12*x3600)));
evalcond[1]=(((x3600*x3603))+(((-1.0)*r22*x3605))+(((-1.0)*x3604*x3606)));
evalcond[2]=((((-1.0)*r02*x3605))+(((-1.0)*x3601*x3606))+((r01*x3607)));
evalcond[3]=((-1.0)+((r11*x3607))+(((-1.0)*r12*x3605))+(((-1.0)*x3602*x3606)));
evalcond[4]=(((cj2*sj1))+((r02*x3600))+((cj1*sj2))+(((-1.0)*x3601*x3605))+((r01*x3608)));
evalcond[5]=((((-1.0)*cj1*cj2))+((r22*x3600))+((sj1*sj2))+((x3599*x3603))+(((-1.0)*x3604*x3605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3609=((1.0)*cj5);
CheckValue<IkReal> x3610=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3609))+(((-1.0)*r20*sj5)))),-1);
if(!x3610.valid){
continue;
}
CheckValue<IkReal> x3611 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x3609))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3610.value)))+(x3611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3612=IKcos(j4);
IkReal x3613=IKsin(j4);
IkReal x3614=(cj5*r00);
IkReal x3615=(cj5*r10);
IkReal x3616=(r21*sj5);
IkReal x3617=(cj5*r20);
IkReal x3618=((1.0)*x3612);
IkReal x3619=((1.0)*x3613);
IkReal x3620=(sj5*x3613);
IkReal x3621=(sj5*x3612);
evalcond[0]=((((-1.0)*x3615*x3618))+((r11*x3621))+((r12*x3613)));
evalcond[1]=(((x3613*x3616))+(((-1.0)*x3617*x3619))+(((-1.0)*r22*x3618)));
evalcond[2]=(((r01*x3620))+(((-1.0)*r02*x3618))+(((-1.0)*x3614*x3619)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3618))+(((-1.0)*x3615*x3619))+((r11*x3620)));
evalcond[4]=(((cj2*sj1))+((r02*x3613))+((r01*x3621))+((cj1*sj2))+(((-1.0)*x3614*x3618)));
evalcond[5]=(((x3612*x3616))+(((-1.0)*x3617*x3618))+((r22*x3613))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3622 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3622.valid){
continue;
}
CheckValue<IkReal> x3623=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3622.value)+(((1.5707963267949)*(x3623.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3624=IKcos(j4);
IkReal x3625=IKsin(j4);
IkReal x3626=(cj5*r00);
IkReal x3627=(cj5*r10);
IkReal x3628=(r21*sj5);
IkReal x3629=(cj5*r20);
IkReal x3630=((1.0)*x3624);
IkReal x3631=((1.0)*x3625);
IkReal x3632=(sj5*x3625);
IkReal x3633=(sj5*x3624);
evalcond[0]=((((-1.0)*x3627*x3630))+((r11*x3633))+((r12*x3625)));
evalcond[1]=((((-1.0)*r22*x3630))+((x3625*x3628))+(((-1.0)*x3629*x3631)));
evalcond[2]=((((-1.0)*r02*x3630))+((r01*x3632))+(((-1.0)*x3626*x3631)));
evalcond[3]=((-1.0)+(((-1.0)*x3627*x3631))+((r11*x3632))+(((-1.0)*r12*x3630)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x3625))+((r01*x3633))+(((-1.0)*x3626*x3630)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3624*x3628))+((r22*x3625))+(((-1.0)*x3629*x3630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3634=((-1.0)*r00);
IkReal x3636 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3636)==0){
continue;
}
IkReal x3635=pow(x3636,-0.5);
CheckValue<IkReal> x3637 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3634),IKFAST_ATAN2_MAGTHRESH);
if(!x3637.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3637.value));
IkReal gconst109=(r01*x3635);
IkReal gconst110=(x3634*x3635);
CheckValue<IkReal> x3638 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3638.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3638.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3639=((-1.0)*r00);
IkReal x3640=x3635;
CheckValue<IkReal> x3642 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3639),IKFAST_ATAN2_MAGTHRESH);
if(!x3642.valid){
continue;
}
IkReal x3641=((-1.0)*(x3642.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3641;
IkReal gconst108=x3641;
IkReal gconst109=(r01*x3640);
IkReal gconst110=(x3639*x3640);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3643=((1.0)*sj0);
IkReal x3644=((1.0)*gconst109);
CheckValue<IkReal> x3645=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3644))+(((-1.0)*gconst110*r21)))),-1);
if(!x3645.valid){
continue;
}
CheckValue<IkReal> x3646 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3643))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*cj0*r01*x3644))+(((-1.0)*gconst109*r11*x3643)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3645.value)))+(x3646.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3647=IKsin(j4);
IkReal x3648=IKcos(j4);
IkReal x3649=(gconst109*r21);
IkReal x3650=((1.0)*cj2);
IkReal x3651=((1.0)*sj0);
IkReal x3652=(cj1*sj2);
IkReal x3653=((1.0)*x3648);
IkReal x3654=(gconst109*x3647);
IkReal x3655=(gconst109*x3648);
IkReal x3656=((1.0)*gconst110*x3647);
evalcond[0]=((((-1.0)*r20*x3656))+((x3647*x3649))+(((-1.0)*r22*x3653)));
evalcond[1]=(cj0+((r11*x3654))+(((-1.0)*r10*x3656))+(((-1.0)*r12*x3653)));
evalcond[2]=((((-1.0)*r00*x3656))+(((-1.0)*r02*x3653))+((r01*x3654))+(((-1.0)*x3651)));
evalcond[3]=(((sj1*sj2))+((x3648*x3649))+(((-1.0)*cj1*x3650))+((r22*x3647))+(((-1.0)*gconst110*r20*x3653)));
evalcond[4]=((((-1.0)*gconst110*r00*x3653))+(((-1.0)*cj0*x3652))+((r02*x3647))+(((-1.0)*cj0*sj1*x3650))+((r01*x3655)));
evalcond[5]=((((-1.0)*sj0*sj1*x3650))+((r12*x3647))+((r11*x3655))+(((-1.0)*gconst110*r10*x3653))+(((-1.0)*x3651*x3652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3657=((1.0)*gconst110);
CheckValue<IkReal> x3658 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x3657)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3658.valid){
continue;
}
CheckValue<IkReal> x3659=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3657))+(((-1.0)*gconst109*r10)))),-1);
if(!x3659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3658.value)+(((1.5707963267949)*(x3659.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3660=IKsin(j4);
IkReal x3661=IKcos(j4);
IkReal x3662=(gconst109*r21);
IkReal x3663=((1.0)*cj2);
IkReal x3664=((1.0)*sj0);
IkReal x3665=(cj1*sj2);
IkReal x3666=((1.0)*x3661);
IkReal x3667=(gconst109*x3660);
IkReal x3668=(gconst109*x3661);
IkReal x3669=((1.0)*gconst110*x3660);
evalcond[0]=((((-1.0)*r20*x3669))+(((-1.0)*r22*x3666))+((x3660*x3662)));
evalcond[1]=(cj0+((r11*x3667))+(((-1.0)*r10*x3669))+(((-1.0)*r12*x3666)));
evalcond[2]=((((-1.0)*x3664))+(((-1.0)*r02*x3666))+((r01*x3667))+(((-1.0)*r00*x3669)));
evalcond[3]=(((r22*x3660))+((sj1*sj2))+(((-1.0)*cj1*x3663))+(((-1.0)*gconst110*r20*x3666))+((x3661*x3662)));
evalcond[4]=((((-1.0)*gconst110*r00*x3666))+(((-1.0)*cj0*sj1*x3663))+((r01*x3668))+(((-1.0)*cj0*x3665))+((r02*x3660)));
evalcond[5]=((((-1.0)*sj0*sj1*x3663))+((r11*x3668))+((r12*x3660))+(((-1.0)*x3664*x3665))+(((-1.0)*gconst110*r10*x3666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3670=((-1.0)*r01);
IkReal x3672 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3672)==0){
continue;
}
IkReal x3671=pow(x3672,-0.5);
CheckValue<IkReal> x3673 = IKatan2WithCheck(IkReal(x3670),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3673.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3673.value))));
IkReal gconst112=(x3670*x3671);
IkReal gconst113=((1.0)*r00*x3671);
CheckValue<IkReal> x3674 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3674.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3674.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3675=((-1.0)*r01);
CheckValue<IkReal> x3678 = IKatan2WithCheck(IkReal(x3675),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3678.valid){
continue;
}
IkReal x3676=((1.0)*(x3678.value));
IkReal x3677=x3671;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3676)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3676)));
IkReal gconst112=(x3675*x3677);
IkReal gconst113=((1.0)*r00*x3677);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3679=((-1.0)*r01);
CheckValue<IkReal> x3682 = IKatan2WithCheck(IkReal(x3679),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3682.valid){
continue;
}
IkReal x3680=((1.0)*(x3682.value));
IkReal x3681=x3671;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3680)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3680)));
IkReal gconst112=(x3679*x3681);
IkReal gconst113=((1.0)*r00*x3681);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3683=((-1.0)*r01);
CheckValue<IkReal> x3686 = IKatan2WithCheck(IkReal(x3683),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3686.valid){
continue;
}
IkReal x3684=((1.0)*(x3686.value));
IkReal x3685=x3671;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3684)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3684)));
IkReal gconst112=(x3683*x3685);
IkReal gconst113=((1.0)*r00*x3685);
IkReal x3687=r02*r02;
IkReal x3688=(r12*sj0);
IkReal x3689=((1.0)*cj0);
IkReal x3690=x3671;
j4eval[0]=((IKabs(((((-1.0)*x3689*x3690))+((cj0*x3687*x3690))+((r02*x3688*x3690)))))+(IKabs(((((-1.0)*x3688))+(((-1.0)*r02*x3689))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3691=((1.0)*sj0);
IkReal x3692=((1.0)*gconst112);
CheckValue<IkReal> x3693 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3691))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst112*r11*x3691))+((gconst113*r10*sj0))+(((-1.0)*cj0*r01*x3692))+((cj0*gconst113*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3693.valid){
continue;
}
CheckValue<IkReal> x3694=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3692))+(((-1.0)*gconst113*r21)))),-1);
if(!x3694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3693.value)+(((1.5707963267949)*(x3694.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3695=IKsin(j4);
IkReal x3696=IKcos(j4);
IkReal x3697=(gconst113*r20);
IkReal x3698=(gconst112*r21);
IkReal x3699=((1.0)*cj2);
IkReal x3700=(gconst113*r00);
IkReal x3701=(gconst113*r10);
IkReal x3702=((1.0)*sj0);
IkReal x3703=(cj1*sj2);
IkReal x3704=((1.0)*x3696);
IkReal x3705=((1.0)*x3695);
IkReal x3706=(gconst112*x3696);
IkReal x3707=(gconst112*x3695);
evalcond[0]=((((-1.0)*x3697*x3705))+((x3695*x3698))+(((-1.0)*r22*x3704)));
evalcond[1]=(cj0+((r11*x3707))+(((-1.0)*x3701*x3705))+(((-1.0)*r12*x3704)));
evalcond[2]=((((-1.0)*r02*x3704))+((r01*x3707))+(((-1.0)*x3700*x3705))+(((-1.0)*x3702)));
evalcond[3]=((((-1.0)*x3697*x3704))+((x3696*x3698))+(((-1.0)*cj1*x3699))+((sj1*sj2))+((r22*x3695)));
evalcond[4]=((((-1.0)*cj0*x3703))+((r01*x3706))+((r02*x3695))+(((-1.0)*x3700*x3704))+(((-1.0)*cj0*sj1*x3699)));
evalcond[5]=(((r11*x3706))+(((-1.0)*x3701*x3704))+(((-1.0)*sj0*sj1*x3699))+(((-1.0)*x3702*x3703))+((r12*x3695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3708=((1.0)*gconst113);
CheckValue<IkReal> x3709 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x3708)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3709.valid){
continue;
}
CheckValue<IkReal> x3710=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3708))+(((-1.0)*gconst112*r10)))),-1);
if(!x3710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3709.value)+(((1.5707963267949)*(x3710.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3711=IKsin(j4);
IkReal x3712=IKcos(j4);
IkReal x3713=(gconst113*r20);
IkReal x3714=(gconst112*r21);
IkReal x3715=((1.0)*cj2);
IkReal x3716=(gconst113*r00);
IkReal x3717=(gconst113*r10);
IkReal x3718=((1.0)*sj0);
IkReal x3719=(cj1*sj2);
IkReal x3720=((1.0)*x3712);
IkReal x3721=((1.0)*x3711);
IkReal x3722=(gconst112*x3712);
IkReal x3723=(gconst112*x3711);
evalcond[0]=((((-1.0)*r22*x3720))+((x3711*x3714))+(((-1.0)*x3713*x3721)));
evalcond[1]=(cj0+(((-1.0)*r12*x3720))+((r11*x3723))+(((-1.0)*x3717*x3721)));
evalcond[2]=(((r01*x3723))+(((-1.0)*x3718))+(((-1.0)*x3716*x3721))+(((-1.0)*r02*x3720)));
evalcond[3]=((((-1.0)*cj1*x3715))+(((-1.0)*x3713*x3720))+((x3712*x3714))+((sj1*sj2))+((r22*x3711)));
evalcond[4]=(((r01*x3722))+(((-1.0)*cj0*x3719))+(((-1.0)*x3716*x3720))+((r02*x3711))+(((-1.0)*cj0*sj1*x3715)));
evalcond[5]=(((r12*x3711))+((r11*x3722))+(((-1.0)*sj0*sj1*x3715))+(((-1.0)*x3718*x3719))+(((-1.0)*x3717*x3720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3724=((1.0)*gconst113);
CheckValue<IkReal> x3725=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3724))+(((-1.0)*gconst112*r00)))),-1);
if(!x3725.valid){
continue;
}
CheckValue<IkReal> x3726 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3724))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3725.value)))+(x3726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3727=IKsin(j4);
IkReal x3728=IKcos(j4);
IkReal x3729=(gconst113*r20);
IkReal x3730=(gconst112*r21);
IkReal x3731=((1.0)*cj2);
IkReal x3732=(gconst113*r00);
IkReal x3733=(gconst113*r10);
IkReal x3734=((1.0)*sj0);
IkReal x3735=(cj1*sj2);
IkReal x3736=((1.0)*x3728);
IkReal x3737=((1.0)*x3727);
IkReal x3738=(gconst112*x3728);
IkReal x3739=(gconst112*x3727);
evalcond[0]=(((x3727*x3730))+(((-1.0)*x3729*x3737))+(((-1.0)*r22*x3736)));
evalcond[1]=(cj0+(((-1.0)*r12*x3736))+((r11*x3739))+(((-1.0)*x3733*x3737)));
evalcond[2]=((((-1.0)*x3734))+((r01*x3739))+(((-1.0)*x3732*x3737))+(((-1.0)*r02*x3736)));
evalcond[3]=((((-1.0)*cj1*x3731))+((r22*x3727))+((sj1*sj2))+(((-1.0)*x3729*x3736))+((x3728*x3730)));
evalcond[4]=(((r01*x3738))+(((-1.0)*cj0*x3735))+((r02*x3727))+(((-1.0)*x3732*x3736))+(((-1.0)*cj0*sj1*x3731)));
evalcond[5]=((((-1.0)*sj0*sj1*x3731))+((r11*x3738))+((r12*x3727))+(((-1.0)*x3733*x3736))+(((-1.0)*x3734*x3735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3740=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3740;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3740);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3741=((1.0)*cj5);
IkReal x3742=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3741)));
j4eval[0]=x3742;
j4eval[1]=((IKabs(((((-1.0)*r20*x3741))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3742);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3743=cj5*cj5;
IkReal x3744=r01*r01;
IkReal x3745=(cj5*r00);
IkReal x3746=(r01*sj5);
IkReal x3747=((((-1.0)*x3743*x3744))+((x3743*(r00*r00)))+x3744+(((-2.0)*x3745*x3746))+(r02*r02));
j4eval[0]=x3747;
j4eval[1]=IKsign(x3747);
j4eval[2]=((IKabs(r02))+(IKabs((x3746+(((-1.0)*x3745))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3748=cj5*cj5;
IkReal x3749=r01*r01;
IkReal x3750=(r01*sj5);
IkReal x3751=(cj5*r00);
CheckValue<IkReal> x3752=IKPowWithIntegerCheck(IKsign((x3749+(((-1.0)*x3748*x3749))+((x3748*(r00*r00)))+(((-2.0)*x3750*x3751))+(r02*r02))),-1);
if(!x3752.valid){
continue;
}
CheckValue<IkReal> x3753 = IKatan2WithCheck(IkReal((x3750+(((-1.0)*x3751)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3752.value)))+(x3753.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3754=IKcos(j4);
IkReal x3755=IKsin(j4);
IkReal x3756=(cj5*r00);
IkReal x3757=(cj5*r10);
IkReal x3758=(r21*sj5);
IkReal x3759=((1.0)*cj2);
IkReal x3760=(cj5*r20);
IkReal x3761=((1.0)*x3754);
IkReal x3762=((1.0)*x3755);
IkReal x3763=(sj5*x3755);
IkReal x3764=(sj5*x3754);
evalcond[0]=(((r02*x3755))+(((-1.0)*x3756*x3761))+((r01*x3764)));
evalcond[1]=(((x3755*x3758))+(((-1.0)*r22*x3761))+(((-1.0)*x3760*x3762)));
evalcond[2]=((((-1.0)*x3757*x3762))+((r11*x3763))+(((-1.0)*r12*x3761)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3761))+(((-1.0)*x3756*x3762))+((r01*x3763)));
evalcond[4]=((((-1.0)*cj1*x3759))+((x3754*x3758))+((sj1*sj2))+((r22*x3755))+(((-1.0)*x3760*x3761)));
evalcond[5]=((((-1.0)*x3757*x3761))+((r12*x3755))+(((-1.0)*cj1*sj2))+((r11*x3764))+(((-1.0)*sj1*x3759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3765=((1.0)*cj5);
CheckValue<IkReal> x3766 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3765))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3766.valid){
continue;
}
CheckValue<IkReal> x3767=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3765))+(((-1.0)*r10*sj5)))),-1);
if(!x3767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3766.value)+(((1.5707963267949)*(x3767.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3768=IKcos(j4);
IkReal x3769=IKsin(j4);
IkReal x3770=(cj5*r00);
IkReal x3771=(cj5*r10);
IkReal x3772=(r21*sj5);
IkReal x3773=((1.0)*cj2);
IkReal x3774=(cj5*r20);
IkReal x3775=((1.0)*x3768);
IkReal x3776=((1.0)*x3769);
IkReal x3777=(sj5*x3769);
IkReal x3778=(sj5*x3768);
evalcond[0]=(((r02*x3769))+(((-1.0)*x3770*x3775))+((r01*x3778)));
evalcond[1]=((((-1.0)*r22*x3775))+((x3769*x3772))+(((-1.0)*x3774*x3776)));
evalcond[2]=(((r11*x3777))+(((-1.0)*x3771*x3776))+(((-1.0)*r12*x3775)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3775))+(((-1.0)*x3770*x3776))+((r01*x3777)));
evalcond[4]=(((r22*x3769))+((x3768*x3772))+((sj1*sj2))+(((-1.0)*x3774*x3775))+(((-1.0)*cj1*x3773)));
evalcond[5]=((((-1.0)*sj1*x3773))+(((-1.0)*cj1*sj2))+((r11*x3778))+((r12*x3769))+(((-1.0)*x3771*x3775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3779=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3779.valid){
continue;
}
CheckValue<IkReal> x3780 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3779.value)))+(x3780.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3781=IKcos(j4);
IkReal x3782=IKsin(j4);
IkReal x3783=(cj5*r00);
IkReal x3784=(cj5*r10);
IkReal x3785=(r21*sj5);
IkReal x3786=((1.0)*cj2);
IkReal x3787=(cj5*r20);
IkReal x3788=((1.0)*x3781);
IkReal x3789=((1.0)*x3782);
IkReal x3790=(sj5*x3782);
IkReal x3791=(sj5*x3781);
evalcond[0]=(((r02*x3782))+(((-1.0)*x3783*x3788))+((r01*x3791)));
evalcond[1]=((((-1.0)*r22*x3788))+((x3782*x3785))+(((-1.0)*x3787*x3789)));
evalcond[2]=((((-1.0)*x3784*x3789))+(((-1.0)*r12*x3788))+((r11*x3790)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3788))+(((-1.0)*x3783*x3789))+((r01*x3790)));
evalcond[4]=(((r22*x3782))+((sj1*sj2))+(((-1.0)*cj1*x3786))+((x3781*x3785))+(((-1.0)*x3787*x3788)));
evalcond[5]=(((r12*x3782))+(((-1.0)*x3784*x3788))+(((-1.0)*sj1*x3786))+(((-1.0)*cj1*sj2))+((r11*x3791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3792=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3792;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3792);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3793=((1.0)*cj5);
IkReal x3794=((((-1.0)*r21*x3793))+(((-1.0)*r20*sj5)));
j4eval[0]=x3794;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x3793)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3794);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3795=cj5*cj5;
IkReal x3796=r01*r01;
IkReal x3797=(r01*sj5);
IkReal x3798=(cj5*r00);
IkReal x3799=((((2.0)*x3797*x3798))+(((-1.0)*x3795*(r00*r00)))+(((-1.0)*x3796))+(((-1.0)*(r02*r02)))+((x3795*x3796)));
j4eval[0]=x3799;
j4eval[1]=IKsign(x3799);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x3798))+x3797))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3800=cj5*cj5;
IkReal x3801=r01*r01;
IkReal x3802=(r01*sj5);
IkReal x3803=(cj5*r00);
CheckValue<IkReal> x3804=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x3800*x3801))+(((-1.0)*x3801))+(((-1.0)*x3800*(r00*r00)))+(((2.0)*x3802*x3803)))),-1);
if(!x3804.valid){
continue;
}
CheckValue<IkReal> x3805 = IKatan2WithCheck(IkReal(((((-1.0)*x3803))+x3802)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3804.value)))+(x3805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3806=IKcos(j4);
IkReal x3807=IKsin(j4);
IkReal x3808=(cj5*r00);
IkReal x3809=(cj5*r10);
IkReal x3810=(r21*sj5);
IkReal x3811=(cj5*r20);
IkReal x3812=((1.0)*x3806);
IkReal x3813=((1.0)*x3807);
IkReal x3814=(sj5*x3807);
IkReal x3815=(sj5*x3806);
evalcond[0]=((((-1.0)*x3808*x3812))+((r02*x3807))+((r01*x3815)));
evalcond[1]=((((-1.0)*r22*x3812))+((x3807*x3810))+(((-1.0)*x3811*x3813)));
evalcond[2]=((((-1.0)*r12*x3812))+((r11*x3814))+(((-1.0)*x3809*x3813)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3812))+(((-1.0)*x3808*x3813))+((r01*x3814)));
evalcond[4]=(((cj2*sj1))+((r11*x3815))+((r12*x3807))+((cj1*sj2))+(((-1.0)*x3809*x3812)));
evalcond[5]=(((r22*x3807))+((x3806*x3810))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3811*x3812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3816=((1.0)*cj5);
CheckValue<IkReal> x3817=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3816))+(((-1.0)*r20*sj5)))),-1);
if(!x3817.valid){
continue;
}
CheckValue<IkReal> x3818 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x3816)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3817.value)))+(x3818.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3819=IKcos(j4);
IkReal x3820=IKsin(j4);
IkReal x3821=(cj5*r00);
IkReal x3822=(cj5*r10);
IkReal x3823=(r21*sj5);
IkReal x3824=(cj5*r20);
IkReal x3825=((1.0)*x3819);
IkReal x3826=((1.0)*x3820);
IkReal x3827=(sj5*x3820);
IkReal x3828=(sj5*x3819);
evalcond[0]=((((-1.0)*x3821*x3825))+((r02*x3820))+((r01*x3828)));
evalcond[1]=((((-1.0)*r22*x3825))+(((-1.0)*x3824*x3826))+((x3820*x3823)));
evalcond[2]=((((-1.0)*r12*x3825))+((r11*x3827))+(((-1.0)*x3822*x3826)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3825))+(((-1.0)*x3821*x3826))+((r01*x3827)));
evalcond[4]=(((r12*x3820))+((cj2*sj1))+((r11*x3828))+((cj1*sj2))+(((-1.0)*x3822*x3825)));
evalcond[5]=(((x3819*x3823))+(((-1.0)*x3824*x3825))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3829 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3829.valid){
continue;
}
CheckValue<IkReal> x3830=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3829.value)+(((1.5707963267949)*(x3830.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3831=IKcos(j4);
IkReal x3832=IKsin(j4);
IkReal x3833=(cj5*r00);
IkReal x3834=(cj5*r10);
IkReal x3835=(r21*sj5);
IkReal x3836=(cj5*r20);
IkReal x3837=((1.0)*x3831);
IkReal x3838=((1.0)*x3832);
IkReal x3839=(sj5*x3832);
IkReal x3840=(sj5*x3831);
evalcond[0]=(((r02*x3832))+(((-1.0)*x3833*x3837))+((r01*x3840)));
evalcond[1]=(((x3832*x3835))+(((-1.0)*r22*x3837))+(((-1.0)*x3836*x3838)));
evalcond[2]=((((-1.0)*r12*x3837))+((r11*x3839))+(((-1.0)*x3834*x3838)));
evalcond[3]=((1.0)+(((-1.0)*x3833*x3838))+((r01*x3839))+(((-1.0)*r02*x3837)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x3832))+(((-1.0)*x3834*x3837))+((r11*x3840)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3831*x3835))+(((-1.0)*x3836*x3837))+((r22*x3832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3841=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3841);
rxp1_1=(px*r21);
rxp1_2=(r11*x3841);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3842=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3842);
rxp1_1=(px*r21);
rxp1_2=(r11*x3842);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3843=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3843);
rxp1_1=(px*r21);
rxp1_2=(r11*x3843);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3846=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x3846.valid){
continue;
}
IkReal x3844=x3846.value;
IkReal x3845=(sj0*x3844);
cj4array[0]=(((cj2*sj1*x3845))+((cj1*sj2*x3845)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3847=IKsin(j4);
IkReal x3848=IKcos(j4);
IkReal x3849=(r21*sj5);
IkReal x3850=((1.0)*cj5*r20);
evalcond[0]=(r02*x3847);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3848)));
evalcond[2]=(((x3847*x3849))+(((-1.0)*x3847*x3850)));
evalcond[3]=(((r11*sj5*x3847))+(((-1.0)*cj5*r10*x3847)));
evalcond[4]=((((-1.0)*x3848*x3850))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3848*x3849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3852=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x3852.valid){
continue;
}
IkReal x3851=x3852.value;
cj4array[0]=(((cj1*cj2*x3851))+(((-1.0)*sj1*sj2*x3851)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3853=IKsin(j4);
IkReal x3854=IKcos(j4);
IkReal x3855=((1.0)*sj0);
IkReal x3856=((1.0)*cj5);
IkReal x3857=(sj5*x3853);
evalcond[0]=(r02*x3853);
evalcond[1]=((((-1.0)*x3855))+(((-1.0)*r02*x3854)));
evalcond[2]=(((r21*x3857))+(((-1.0)*r20*x3853*x3856)));
evalcond[3]=(((r11*x3857))+(((-1.0)*r10*x3853*x3856)));
evalcond[4]=(((r11*sj5*x3854))+(((-1.0)*cj1*sj2*x3855))+(((-1.0)*cj2*sj1*x3855))+(((-1.0)*r10*x3854*x3856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3858=IKPowWithIntegerCheck(r02,-1);
if(!x3858.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3858.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3859=IKsin(j4);
IkReal x3860=IKcos(j4);
IkReal x3861=((1.0)*cj1);
IkReal x3862=(r21*sj5);
IkReal x3863=((1.0)*cj5);
IkReal x3864=(r11*sj5);
evalcond[0]=(r02*x3859);
evalcond[1]=((((-1.0)*r20*x3859*x3863))+((x3859*x3862)));
evalcond[2]=((((-1.0)*r10*x3859*x3863))+((x3859*x3864)));
evalcond[3]=(((x3860*x3862))+(((-1.0)*cj2*x3861))+(((-1.0)*r20*x3860*x3863))+((sj1*sj2)));
evalcond[4]=(((x3860*x3864))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x3860*x3863))+(((-1.0)*sj0*sj2*x3861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3865=((1.0)*sj0);
IkReal x3866=((1.0)*cj0);
CheckValue<IkReal> x3867 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3866))+(((-1.0)*r12*x3865)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x3865))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3866)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3867.valid){
continue;
}
CheckValue<IkReal> x3868=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3867.value)+(((1.5707963267949)*(x3868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3869=IKsin(j4);
IkReal x3870=IKcos(j4);
IkReal x3871=(cj5*r00);
IkReal x3872=(cj5*r10);
IkReal x3873=(r21*sj5);
IkReal x3874=((1.0)*cj2);
IkReal x3875=((1.0)*sj0);
IkReal x3876=(cj1*sj2);
IkReal x3877=(cj5*r20);
IkReal x3878=((1.0)*x3870);
IkReal x3879=((1.0)*x3869);
IkReal x3880=(sj5*x3869);
IkReal x3881=(sj5*x3870);
evalcond[0]=((((-1.0)*x3877*x3879))+((x3869*x3873))+(((-1.0)*r22*x3878)));
evalcond[1]=(cj0+(((-1.0)*r12*x3878))+((r11*x3880))+(((-1.0)*x3872*x3879)));
evalcond[2]=((((-1.0)*x3871*x3879))+(((-1.0)*r02*x3878))+((r01*x3880))+(((-1.0)*x3875)));
evalcond[3]=((((-1.0)*x3877*x3878))+((x3870*x3873))+((sj1*sj2))+(((-1.0)*cj1*x3874))+((r22*x3869)));
evalcond[4]=((((-1.0)*cj0*sj1*x3874))+((r02*x3869))+(((-1.0)*x3871*x3878))+(((-1.0)*cj0*x3876))+((r01*x3881)));
evalcond[5]=(((r11*x3881))+(((-1.0)*sj0*sj1*x3874))+(((-1.0)*x3875*x3876))+((r12*x3869))+(((-1.0)*x3872*x3878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3882=((1.0)*cj5);
CheckValue<IkReal> x3883 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3883.valid){
continue;
}
CheckValue<IkReal> x3884=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3882)))),-1);
if(!x3884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3883.value)+(((1.5707963267949)*(x3884.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3885=IKsin(j4);
IkReal x3886=IKcos(j4);
IkReal x3887=(cj5*r00);
IkReal x3888=(cj5*r10);
IkReal x3889=(r21*sj5);
IkReal x3890=((1.0)*cj2);
IkReal x3891=((1.0)*sj0);
IkReal x3892=(cj1*sj2);
IkReal x3893=(cj5*r20);
IkReal x3894=((1.0)*x3886);
IkReal x3895=((1.0)*x3885);
IkReal x3896=(sj5*x3885);
IkReal x3897=(sj5*x3886);
evalcond[0]=((((-1.0)*r22*x3894))+(((-1.0)*x3893*x3895))+((x3885*x3889)));
evalcond[1]=(cj0+(((-1.0)*r12*x3894))+((r11*x3896))+(((-1.0)*x3888*x3895)));
evalcond[2]=(((r01*x3896))+(((-1.0)*x3887*x3895))+(((-1.0)*x3891))+(((-1.0)*r02*x3894)));
evalcond[3]=(((x3886*x3889))+((r22*x3885))+((sj1*sj2))+(((-1.0)*x3893*x3894))+(((-1.0)*cj1*x3890)));
evalcond[4]=((((-1.0)*cj0*sj1*x3890))+((r01*x3897))+((r02*x3885))+(((-1.0)*x3887*x3894))+(((-1.0)*cj0*x3892)));
evalcond[5]=(((r12*x3885))+(((-1.0)*x3891*x3892))+((r11*x3897))+(((-1.0)*sj0*sj1*x3890))+(((-1.0)*x3888*x3894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3898=((1.0)*cj5);
CheckValue<IkReal> x3899=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3898)))),-1);
if(!x3899.valid){
continue;
}
CheckValue<IkReal> x3900 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3899.value)))+(x3900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3901=IKsin(j4);
IkReal x3902=IKcos(j4);
IkReal x3903=(cj5*r00);
IkReal x3904=(cj5*r10);
IkReal x3905=(r21*sj5);
IkReal x3906=((1.0)*cj2);
IkReal x3907=((1.0)*sj0);
IkReal x3908=(cj1*sj2);
IkReal x3909=(cj5*r20);
IkReal x3910=((1.0)*x3902);
IkReal x3911=((1.0)*x3901);
IkReal x3912=(sj5*x3901);
IkReal x3913=(sj5*x3902);
evalcond[0]=(((x3901*x3905))+(((-1.0)*r22*x3910))+(((-1.0)*x3909*x3911)));
evalcond[1]=((((-1.0)*x3904*x3911))+cj0+((r11*x3912))+(((-1.0)*r12*x3910)));
evalcond[2]=((((-1.0)*x3907))+(((-1.0)*r02*x3910))+(((-1.0)*x3903*x3911))+((r01*x3912)));
evalcond[3]=(((r22*x3901))+((x3902*x3905))+(((-1.0)*x3909*x3910))+((sj1*sj2))+(((-1.0)*cj1*x3906)));
evalcond[4]=((((-1.0)*x3903*x3910))+((r01*x3913))+(((-1.0)*cj0*sj1*x3906))+(((-1.0)*cj0*x3908))+((r02*x3901)));
evalcond[5]=((((-1.0)*sj0*sj1*x3906))+(((-1.0)*x3904*x3910))+(((-1.0)*x3907*x3908))+((r12*x3901))+((r11*x3913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3914=r21*r21;
IkReal x3915=cj5*cj5;
IkReal x3916=(sj1*sj2);
IkReal x3917=(r21*sj5);
IkReal x3918=(cj1*cj2);
IkReal x3919=(cj5*r20);
CheckValue<IkReal> x3920 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3918))+((r22*x3916)))),IkReal(((((-1.0)*x3917*x3918))+(((-1.0)*x3916*x3919))+((x3918*x3919))+((x3916*x3917)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3920.valid){
continue;
}
CheckValue<IkReal> x3921=IKPowWithIntegerCheck(IKsign((((x3914*x3915))+(((2.0)*x3917*x3919))+(((-1.0)*x3914))+(((-1.0)*x3915*(r20*r20)))+(((-1.0)*(r22*r22))))),-1);
if(!x3921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3920.value)+(((1.5707963267949)*(x3921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3922=IKsin(j4);
IkReal x3923=IKcos(j4);
IkReal x3924=(r21*sj5);
IkReal x3925=(cj5*r20);
IkReal x3926=((1.0)*x3923);
evalcond[0]=((((-1.0)*x3922*x3925))+(((-1.0)*r22*x3926))+((x3922*x3924)));
evalcond[1]=((((-1.0)*x3925*x3926))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3922))+((x3923*x3924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3927=(cj5*sj4);
IkReal x3928=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x3927))+((r01*x3928)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x3928))+((r10*x3927))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x3927))+((r01*x3928))))+IKsqr(((((-1.0)*r11*x3928))+((r10*x3927))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x3927))+((r01*x3928))), ((((-1.0)*r11*x3928))+((r10*x3927))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3929=IKcos(j0);
IkReal x3930=IKsin(j0);
IkReal x3931=((0.447)*cj2);
IkReal x3932=(r00*sj5);
IkReal x3933=(cj5*r01);
IkReal x3934=((1.0)*sj2);
IkReal x3935=(r11*sj5);
IkReal x3936=((1.0)*cj2);
IkReal x3937=(cj5*r11);
IkReal x3938=(r10*sj5);
IkReal x3939=((0.447)*sj2);
IkReal x3940=((1.0)*cj4);
IkReal x3941=(r01*sj5);
IkReal x3942=(sj1*x3930);
IkReal x3943=(cj1*x3929);
IkReal x3944=(cj1*x3930);
IkReal x3945=(cj5*x3940);
IkReal x3946=(sj1*x3929);
IkReal x3947=((1.0)*cj5*sj4);
evalcond[0]=(((sj4*x3935))+x3929+(((-1.0)*r10*x3947))+(((-1.0)*r12*x3940)));
evalcond[1]=((((-1.0)*x3930))+((sj4*x3941))+(((-1.0)*r00*x3947))+(((-1.0)*r02*x3940)));
evalcond[2]=(((cj2*x3943))+(((-1.0)*x3934*x3946))+x3933+x3932);
evalcond[3]=(((cj2*x3944))+(((-1.0)*x3934*x3942))+x3938+x3937);
evalcond[4]=((((-1.0)*x3934*x3943))+(((-1.0)*r00*x3945))+((r02*sj4))+((cj4*x3941))+(((-1.0)*x3936*x3946)));
evalcond[5]=((((-1.0)*x3934*x3944))+((r12*sj4))+(((-1.0)*r10*x3945))+((cj4*x3935))+(((-1.0)*x3936*x3942)));
evalcond[6]=((((-0.452)*x3946))+(((-0.1134)*x3933))+(((-0.1134)*x3932))+(((-0.1036)*x3930))+(((-1.0)*px))+(((-1.0)*x3931*x3946))+(((-1.0)*x3939*x3943)));
evalcond[7]=((((-0.452)*x3942))+(((-0.1134)*x3937))+(((-0.1134)*x3938))+(((-1.0)*py))+(((-1.0)*x3931*x3942))+(((-1.0)*x3939*x3944))+(((0.1036)*x3929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3948=((1.0)*cj5);
IkReal x3949=((1.0)*sj5);
CheckValue<IkReal> x3950 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3949))+(((-1.0)*r11*x3948)))),IkReal(((((-1.0)*r01*x3948))+(((-1.0)*r00*x3949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3950.valid){
continue;
}
CheckValue<IkReal> x3951=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x3951.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3950.value)+(((1.5707963267949)*(x3951.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3952=IKcos(j0);
IkReal x3953=IKsin(j0);
IkReal x3954=((0.447)*cj2);
IkReal x3955=(r00*sj5);
IkReal x3956=(cj5*r01);
IkReal x3957=((1.0)*sj2);
IkReal x3958=(cj1*cj2);
IkReal x3959=(cj5*r11);
IkReal x3960=(r10*sj5);
IkReal x3961=(sj1*x3953);
IkReal x3962=(sj1*x3952);
IkReal x3963=((0.447)*cj1*sj2);
evalcond[0]=(x3956+x3955+((x3952*x3958))+(((-1.0)*x3957*x3962)));
evalcond[1]=(((x3953*x3958))+x3960+x3959+(((-1.0)*x3957*x3961)));
evalcond[2]=((((-1.0)*x3952*x3963))+(((-0.1036)*x3953))+(((-0.1134)*x3956))+(((-0.1134)*x3955))+(((-1.0)*x3954*x3962))+(((-1.0)*px))+(((-0.452)*x3962)));
evalcond[3]=((((0.1036)*x3952))+(((-0.1134)*x3959))+(((-1.0)*x3954*x3961))+(((-1.0)*py))+(((-0.452)*x3961))+(((-1.0)*x3953*x3963))+(((-0.1134)*x3960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3964=((1.0)*cj5);
IkReal x3965=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3964)));
j4eval[0]=x3965;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3964))))));
j4eval[2]=IKsign(x3965);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3966=((1.0)*cj5);
IkReal x3967=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3966)));
j4eval[0]=x3967;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3966))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x3967);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3968=((1.0)*sj0);
IkReal x3969=((1.0)*cj0);
IkReal x3970=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3970;
j4eval[1]=((IKabs(((((-1.0)*r02*x3969))+(((-1.0)*r12*x3968)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x3969))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3968))))));
j4eval[2]=IKsign(x3970);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3971=((-1.0)*r20);
IkReal x3973 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3973)==0){
continue;
}
IkReal x3972=pow(x3973,-0.5);
CheckValue<IkReal> x3974 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3971),IKFAST_ATAN2_MAGTHRESH);
if(!x3974.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3974.value));
IkReal gconst97=(r21*x3972);
IkReal gconst98=(x3971*x3972);
CheckValue<IkReal> x3975 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3975.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3975.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3976=((-1.0)*r20);
IkReal x3977=x3972;
CheckValue<IkReal> x3979 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3976),IKFAST_ATAN2_MAGTHRESH);
if(!x3979.valid){
continue;
}
IkReal x3978=((-1.0)*(x3979.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3978;
IkReal gconst96=x3978;
IkReal gconst97=(r21*x3977);
IkReal gconst98=(x3976*x3977);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3980=((-1.0)*r20);
IkReal x3981=x3972;
CheckValue<IkReal> x3983 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3980),IKFAST_ATAN2_MAGTHRESH);
if(!x3983.valid){
continue;
}
IkReal x3982=((-1.0)*(x3983.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3982;
IkReal gconst96=x3982;
IkReal gconst97=(r21*x3981);
IkReal gconst98=(x3980*x3981);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3984=((-1.0)*r20);
IkReal x3985=x3972;
CheckValue<IkReal> x3987 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3984),IKFAST_ATAN2_MAGTHRESH);
if(!x3987.valid){
continue;
}
IkReal x3986=((-1.0)*(x3987.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3986;
IkReal gconst96=x3986;
IkReal gconst97=(r21*x3985);
IkReal gconst98=(x3984*x3985);
IkReal x3988=((1.0)*(r22*r22));
CheckValue<IkReal> x3992=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3988))),-1);
if(!x3992.valid){
continue;
}
IkReal x3989=x3992.value;
IkReal x3990=((1.0)*x3989);
IkReal x3991=((((-2.0)*x3989*(r20*r20)*(r21*r21)))+(((-1.0)*x3990*(r20*r20*r20*r20)))+(((-1.0)*x3990*(r21*r21*r21*r21)))+(((-1.0)*x3988)));
j4eval[0]=x3991;
j4eval[1]=IKsign(x3991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3993=(cj1*cj2);
IkReal x3994=(gconst98*r20);
IkReal x3995=(sj1*sj2);
IkReal x3996=(gconst97*r21);
CheckValue<IkReal> x3997 = IKatan2WithCheck(IkReal((((r22*x3995))+(((-1.0)*r22*x3993)))),IkReal(((((-1.0)*x3994*x3995))+(((-1.0)*x3993*x3996))+((x3995*x3996))+((x3993*x3994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3997.valid){
continue;
}
CheckValue<IkReal> x3998=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3996*x3996)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3994*x3994)))+(((2.0)*x3994*x3996)))),-1);
if(!x3998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3997.value)+(((1.5707963267949)*(x3998.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3999=IKsin(j4);
IkReal x4000=IKcos(j4);
IkReal x4001=(gconst98*r10);
IkReal x4002=(gconst97*r21);
IkReal x4003=(gconst98*r20);
IkReal x4004=((1.0)*cj2);
IkReal x4005=((1.0)*sj0);
IkReal x4006=(gconst98*r00);
IkReal x4007=(cj1*sj2);
IkReal x4008=((1.0)*x4000);
IkReal x4009=((1.0)*x3999);
IkReal x4010=(gconst97*x3999);
IkReal x4011=(gconst97*x4000);
evalcond[0]=((((-1.0)*r22*x4008))+(((-1.0)*x4003*x4009))+((x3999*x4002)));
evalcond[1]=(cj0+(((-1.0)*x4001*x4009))+(((-1.0)*r12*x4008))+((r11*x4010)));
evalcond[2]=((((-1.0)*r02*x4008))+(((-1.0)*x4005))+((r01*x4010))+(((-1.0)*x4006*x4009)));
evalcond[3]=(((x4000*x4002))+((sj1*sj2))+(((-1.0)*cj1*x4004))+((r22*x3999))+(((-1.0)*x4003*x4008)));
evalcond[4]=((((-1.0)*cj0*x4007))+((r01*x4011))+((r02*x3999))+(((-1.0)*x4006*x4008))+(((-1.0)*cj0*sj1*x4004)));
evalcond[5]=((((-1.0)*x4001*x4008))+((r12*x3999))+(((-1.0)*sj0*sj1*x4004))+(((-1.0)*x4005*x4007))+((r11*x4011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4012=((1.0)*gconst98);
CheckValue<IkReal> x4013 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4013.valid){
continue;
}
CheckValue<IkReal> x4014=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4012))+(((-1.0)*gconst97*r10)))),-1);
if(!x4014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4013.value)+(((1.5707963267949)*(x4014.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4015=IKsin(j4);
IkReal x4016=IKcos(j4);
IkReal x4017=(gconst98*r10);
IkReal x4018=(gconst97*r21);
IkReal x4019=(gconst98*r20);
IkReal x4020=((1.0)*cj2);
IkReal x4021=((1.0)*sj0);
IkReal x4022=(gconst98*r00);
IkReal x4023=(cj1*sj2);
IkReal x4024=((1.0)*x4016);
IkReal x4025=((1.0)*x4015);
IkReal x4026=(gconst97*x4015);
IkReal x4027=(gconst97*x4016);
evalcond[0]=((((-1.0)*r22*x4024))+((x4015*x4018))+(((-1.0)*x4019*x4025)));
evalcond[1]=((((-1.0)*r12*x4024))+cj0+((r11*x4026))+(((-1.0)*x4017*x4025)));
evalcond[2]=((((-1.0)*x4022*x4025))+(((-1.0)*r02*x4024))+((r01*x4026))+(((-1.0)*x4021)));
evalcond[3]=(((x4016*x4018))+((sj1*sj2))+(((-1.0)*cj1*x4020))+((r22*x4015))+(((-1.0)*x4019*x4024)));
evalcond[4]=(((r02*x4015))+(((-1.0)*cj0*x4023))+(((-1.0)*x4022*x4024))+((r01*x4027))+(((-1.0)*cj0*sj1*x4020)));
evalcond[5]=((((-1.0)*sj0*sj1*x4020))+((r12*x4015))+(((-1.0)*x4021*x4023))+((r11*x4027))+(((-1.0)*x4017*x4024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4028=((1.0)*gconst98);
CheckValue<IkReal> x4029=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4028))+(((-1.0)*gconst97*r00)))),-1);
if(!x4029.valid){
continue;
}
CheckValue<IkReal> x4030 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4028))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4029.value)))+(x4030.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4031=IKsin(j4);
IkReal x4032=IKcos(j4);
IkReal x4033=(gconst98*r10);
IkReal x4034=(gconst97*r21);
IkReal x4035=(gconst98*r20);
IkReal x4036=((1.0)*cj2);
IkReal x4037=((1.0)*sj0);
IkReal x4038=(gconst98*r00);
IkReal x4039=(cj1*sj2);
IkReal x4040=((1.0)*x4032);
IkReal x4041=((1.0)*x4031);
IkReal x4042=(gconst97*x4031);
IkReal x4043=(gconst97*x4032);
evalcond[0]=((((-1.0)*x4035*x4041))+((x4031*x4034))+(((-1.0)*r22*x4040)));
evalcond[1]=(cj0+(((-1.0)*r12*x4040))+(((-1.0)*x4033*x4041))+((r11*x4042)));
evalcond[2]=((((-1.0)*x4037))+(((-1.0)*r02*x4040))+((r01*x4042))+(((-1.0)*x4038*x4041)));
evalcond[3]=(((x4032*x4034))+(((-1.0)*x4035*x4040))+(((-1.0)*cj1*x4036))+((sj1*sj2))+((r22*x4031)));
evalcond[4]=((((-1.0)*cj0*x4039))+((r02*x4031))+((r01*x4043))+(((-1.0)*cj0*sj1*x4036))+(((-1.0)*x4038*x4040)));
evalcond[5]=((((-1.0)*x4037*x4039))+(((-1.0)*x4033*x4040))+((r11*x4043))+((r12*x4031))+(((-1.0)*sj0*sj1*x4036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4044=((-1.0)*r21);
IkReal x4046 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4046)==0){
continue;
}
IkReal x4045=pow(x4046,-0.5);
CheckValue<IkReal> x4047 = IKatan2WithCheck(IkReal(x4044),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4047.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4047.value))));
IkReal gconst100=(x4044*x4045);
IkReal gconst101=((1.0)*r20*x4045);
CheckValue<IkReal> x4048 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4048.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4048.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4049=((-1.0)*r21);
CheckValue<IkReal> x4052 = IKatan2WithCheck(IkReal(x4049),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4052.valid){
continue;
}
IkReal x4050=((1.0)*(x4052.value));
IkReal x4051=x4045;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4050)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4050)));
IkReal gconst100=(x4049*x4051);
IkReal gconst101=((1.0)*r20*x4051);
IkReal x4053=r22*r22;
IkReal x4054=((1.0)*x4053);
CheckValue<IkReal> x4058=IKPowWithIntegerCheck(((-1.0)+x4053),-1);
if(!x4058.valid){
continue;
}
IkReal x4055=x4058.value;
if((((1.0)+(((-1.0)*x4054)))) < -0.00001)
continue;
IkReal x4056=IKsqrt(((1.0)+(((-1.0)*x4054))));
IkReal x4057=(cj0*x4055*x4056);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x4057+(((-1.0)*x4054*x4057))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4059=((-1.0)*r21);
CheckValue<IkReal> x4062 = IKatan2WithCheck(IkReal(x4059),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4062.valid){
continue;
}
IkReal x4060=((1.0)*(x4062.value));
IkReal x4061=x4045;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4060)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4060)));
IkReal gconst100=(x4059*x4061);
IkReal gconst101=((1.0)*r20*x4061);
IkReal x4063=r22*r22;
IkReal x4064=((1.0)*x4063);
CheckValue<IkReal> x4068=IKPowWithIntegerCheck(((-1.0)+x4063),-1);
if(!x4068.valid){
continue;
}
IkReal x4065=x4068.value;
if((((1.0)+(((-1.0)*x4064)))) < -0.00001)
continue;
IkReal x4066=IKsqrt(((1.0)+(((-1.0)*x4064))));
IkReal x4067=(sj0*x4065*x4066);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4064*x4067))+x4067))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4069=((-1.0)*r21);
CheckValue<IkReal> x4072 = IKatan2WithCheck(IkReal(x4069),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4072.valid){
continue;
}
IkReal x4070=((1.0)*(x4072.value));
IkReal x4071=x4045;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4070)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4070)));
IkReal gconst100=(x4069*x4071);
IkReal gconst101=((1.0)*r20*x4071);
IkReal x4073=r22*r22;
IkReal x4074=(r12*sj0);
IkReal x4075=(cj0*r02);
CheckValue<IkReal> x4079=IKPowWithIntegerCheck(((-1.0)+x4073),-1);
if(!x4079.valid){
continue;
}
IkReal x4076=x4079.value;
if((((1.0)+(((-1.0)*x4073)))) < -0.00001)
continue;
IkReal x4077=IKsqrt(((1.0)+(((-1.0)*x4073))));
IkReal x4078=(r22*x4076*x4077);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4075))+(((-1.0)*x4074)))))+(IKabs((((x4074*x4078))+((x4075*x4078))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4080=((1.0)*sj0);
IkReal x4081=((1.0)*gconst100);
CheckValue<IkReal> x4082=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4081))+(((-1.0)*gconst101*r21)))),-1);
if(!x4082.valid){
continue;
}
CheckValue<IkReal> x4083 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4080))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4081))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*gconst100*r11*x4080)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4082.value)))+(x4083.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4084=IKsin(j4);
IkReal x4085=IKcos(j4);
IkReal x4086=(gconst101*r20);
IkReal x4087=(gconst101*r10);
IkReal x4088=((1.0)*cj2);
IkReal x4089=(gconst101*r00);
IkReal x4090=((1.0)*sj0);
IkReal x4091=(cj1*sj2);
IkReal x4092=((1.0)*x4085);
IkReal x4093=((1.0)*x4084);
IkReal x4094=(gconst100*x4084);
IkReal x4095=(gconst100*x4085);
evalcond[0]=((((-1.0)*r22*x4092))+((r21*x4094))+(((-1.0)*x4086*x4093)));
evalcond[1]=((((-1.0)*r12*x4092))+cj0+((r11*x4094))+(((-1.0)*x4087*x4093)));
evalcond[2]=((((-1.0)*x4089*x4093))+(((-1.0)*x4090))+((r01*x4094))+(((-1.0)*r02*x4092)));
evalcond[3]=(((sj1*sj2))+((r21*x4095))+(((-1.0)*x4086*x4092))+(((-1.0)*cj1*x4088))+((r22*x4084)));
evalcond[4]=((((-1.0)*x4089*x4092))+(((-1.0)*cj0*x4091))+((r01*x4095))+(((-1.0)*cj0*sj1*x4088))+((r02*x4084)));
evalcond[5]=((((-1.0)*x4090*x4091))+((r11*x4095))+((r12*x4084))+(((-1.0)*sj0*sj1*x4088))+(((-1.0)*x4087*x4092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4096=((1.0)*gconst101);
CheckValue<IkReal> x4097 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4096))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4097.valid){
continue;
}
CheckValue<IkReal> x4098=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4096))+(((-1.0)*gconst100*r10)))),-1);
if(!x4098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4097.value)+(((1.5707963267949)*(x4098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4099=IKsin(j4);
IkReal x4100=IKcos(j4);
IkReal x4101=(gconst101*r20);
IkReal x4102=(gconst101*r10);
IkReal x4103=((1.0)*cj2);
IkReal x4104=(gconst101*r00);
IkReal x4105=((1.0)*sj0);
IkReal x4106=(cj1*sj2);
IkReal x4107=((1.0)*x4100);
IkReal x4108=((1.0)*x4099);
IkReal x4109=(gconst100*x4099);
IkReal x4110=(gconst100*x4100);
evalcond[0]=((((-1.0)*r22*x4107))+((r21*x4109))+(((-1.0)*x4101*x4108)));
evalcond[1]=(cj0+(((-1.0)*r12*x4107))+(((-1.0)*x4102*x4108))+((r11*x4109)));
evalcond[2]=((((-1.0)*x4104*x4108))+(((-1.0)*x4105))+((r01*x4109))+(((-1.0)*r02*x4107)));
evalcond[3]=(((r21*x4110))+(((-1.0)*cj1*x4103))+((sj1*sj2))+((r22*x4099))+(((-1.0)*x4101*x4107)));
evalcond[4]=((((-1.0)*x4104*x4107))+(((-1.0)*cj0*sj1*x4103))+(((-1.0)*cj0*x4106))+((r02*x4099))+((r01*x4110)));
evalcond[5]=((((-1.0)*x4105*x4106))+(((-1.0)*sj0*sj1*x4103))+((r12*x4099))+(((-1.0)*x4102*x4107))+((r11*x4110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4111=((1.0)*gconst101);
CheckValue<IkReal> x4112=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4111))+(((-1.0)*gconst100*r00)))),-1);
if(!x4112.valid){
continue;
}
CheckValue<IkReal> x4113 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4112.value)))+(x4113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4114=IKsin(j4);
IkReal x4115=IKcos(j4);
IkReal x4116=(gconst101*r20);
IkReal x4117=(gconst101*r10);
IkReal x4118=((1.0)*cj2);
IkReal x4119=(gconst101*r00);
IkReal x4120=((1.0)*sj0);
IkReal x4121=(cj1*sj2);
IkReal x4122=((1.0)*x4115);
IkReal x4123=((1.0)*x4114);
IkReal x4124=(gconst100*x4114);
IkReal x4125=(gconst100*x4115);
evalcond[0]=(((r21*x4124))+(((-1.0)*r22*x4122))+(((-1.0)*x4116*x4123)));
evalcond[1]=((((-1.0)*r12*x4122))+cj0+((r11*x4124))+(((-1.0)*x4117*x4123)));
evalcond[2]=((((-1.0)*x4119*x4123))+(((-1.0)*x4120))+(((-1.0)*r02*x4122))+((r01*x4124)));
evalcond[3]=(((r21*x4125))+(((-1.0)*cj1*x4118))+((sj1*sj2))+(((-1.0)*x4116*x4122))+((r22*x4114)));
evalcond[4]=((((-1.0)*x4119*x4122))+((r02*x4114))+(((-1.0)*cj0*x4121))+((r01*x4125))+(((-1.0)*cj0*sj1*x4118)));
evalcond[5]=(((r12*x4114))+(((-1.0)*sj0*sj1*x4118))+((r11*x4125))+(((-1.0)*x4120*x4121))+(((-1.0)*x4117*x4122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4126=((-1.0)*r10);
IkReal x4128 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4128)==0){
continue;
}
IkReal x4127=pow(x4128,-0.5);
CheckValue<IkReal> x4129 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4126),IKFAST_ATAN2_MAGTHRESH);
if(!x4129.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4129.value));
IkReal gconst103=(r11*x4127);
IkReal gconst104=(x4126*x4127);
CheckValue<IkReal> x4130 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4130.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4130.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4131=((-1.0)*r10);
IkReal x4132=x4127;
CheckValue<IkReal> x4134 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4131),IKFAST_ATAN2_MAGTHRESH);
if(!x4134.valid){
continue;
}
IkReal x4133=((-1.0)*(x4134.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4133;
IkReal gconst102=x4133;
IkReal gconst103=(r11*x4132);
IkReal gconst104=(x4131*x4132);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4135=((1.0)*sj0);
IkReal x4136=((1.0)*gconst103);
CheckValue<IkReal> x4137 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4135)))),IkReal(((((-1.0)*cj0*r01*x4136))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x4135))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4137.valid){
continue;
}
CheckValue<IkReal> x4138=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4136))+(((-1.0)*gconst104*r21)))),-1);
if(!x4138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4137.value)+(((1.5707963267949)*(x4138.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4139=IKsin(j4);
IkReal x4140=IKcos(j4);
IkReal x4141=(gconst103*r11);
IkReal x4142=((1.0)*cj2);
IkReal x4143=((1.0)*sj0);
IkReal x4144=(cj1*sj2);
IkReal x4145=((1.0)*x4140);
IkReal x4146=(gconst103*x4140);
IkReal x4147=(gconst103*x4139);
IkReal x4148=((1.0)*gconst104*x4139);
evalcond[0]=(((r21*x4147))+(((-1.0)*r22*x4145))+(((-1.0)*r20*x4148)));
evalcond[1]=(((x4139*x4141))+cj0+(((-1.0)*r10*x4148))+(((-1.0)*r12*x4145)));
evalcond[2]=(((r01*x4147))+(((-1.0)*r02*x4145))+(((-1.0)*r00*x4148))+(((-1.0)*x4143)));
evalcond[3]=(((r22*x4139))+((r21*x4146))+((sj1*sj2))+(((-1.0)*cj1*x4142))+(((-1.0)*gconst104*r20*x4145)));
evalcond[4]=(((r01*x4146))+(((-1.0)*gconst104*r00*x4145))+(((-1.0)*cj0*x4144))+(((-1.0)*cj0*sj1*x4142))+((r02*x4139)));
evalcond[5]=((((-1.0)*sj0*sj1*x4142))+((r12*x4139))+(((-1.0)*x4143*x4144))+(((-1.0)*gconst104*r10*x4145))+((x4140*x4141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4149=((1.0)*gconst104);
CheckValue<IkReal> x4150 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4149))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4150.valid){
continue;
}
CheckValue<IkReal> x4151=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4149)))),-1);
if(!x4151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4150.value)+(((1.5707963267949)*(x4151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4152=IKsin(j4);
IkReal x4153=IKcos(j4);
IkReal x4154=(gconst103*r11);
IkReal x4155=((1.0)*cj2);
IkReal x4156=((1.0)*sj0);
IkReal x4157=(cj1*sj2);
IkReal x4158=((1.0)*x4153);
IkReal x4159=(gconst103*x4153);
IkReal x4160=(gconst103*x4152);
IkReal x4161=((1.0)*gconst104*x4152);
evalcond[0]=(((r21*x4160))+(((-1.0)*r20*x4161))+(((-1.0)*r22*x4158)));
evalcond[1]=(((x4152*x4154))+cj0+(((-1.0)*r10*x4161))+(((-1.0)*r12*x4158)));
evalcond[2]=((((-1.0)*r00*x4161))+((r01*x4160))+(((-1.0)*r02*x4158))+(((-1.0)*x4156)));
evalcond[3]=(((r21*x4159))+((r22*x4152))+((sj1*sj2))+(((-1.0)*cj1*x4155))+(((-1.0)*gconst104*r20*x4158)));
evalcond[4]=(((r02*x4152))+((r01*x4159))+(((-1.0)*gconst104*r00*x4158))+(((-1.0)*cj0*sj1*x4155))+(((-1.0)*cj0*x4157)));
evalcond[5]=(((x4153*x4154))+((r12*x4152))+(((-1.0)*x4156*x4157))+(((-1.0)*sj0*sj1*x4155))+(((-1.0)*gconst104*r10*x4158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4162=((-1.0)*r11);
IkReal x4164 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4164)==0){
continue;
}
IkReal x4163=pow(x4164,-0.5);
CheckValue<IkReal> x4165 = IKatan2WithCheck(IkReal(x4162),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4165.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4165.value))));
IkReal gconst106=(x4162*x4163);
IkReal gconst107=((1.0)*r10*x4163);
CheckValue<IkReal> x4166 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4166.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4166.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4167=((-1.0)*r11);
CheckValue<IkReal> x4170 = IKatan2WithCheck(IkReal(x4167),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4170.valid){
continue;
}
IkReal x4168=((1.0)*(x4170.value));
IkReal x4169=x4163;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4168)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4168)));
IkReal gconst106=(x4167*x4169);
IkReal gconst107=((1.0)*r10*x4169);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4171=((-1.0)*r11);
CheckValue<IkReal> x4174 = IKatan2WithCheck(IkReal(x4171),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4174.valid){
continue;
}
IkReal x4172=((1.0)*(x4174.value));
IkReal x4173=x4163;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4172)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4172)));
IkReal gconst106=(x4171*x4173);
IkReal gconst107=((1.0)*r10*x4173);
IkReal x4175=r12*r12;
IkReal x4176=((1.0)*sj0);
IkReal x4177=(cj0*r02);
IkReal x4178=x4163;
j4eval[0]=((IKabs((((sj0*x4175*x4178))+(((-1.0)*x4176*x4178))+((r12*x4177*x4178)))))+(IKabs(((((-1.0)*x4177))+(((-1.0)*r12*x4176))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4179=((-1.0)*r11);
CheckValue<IkReal> x4182 = IKatan2WithCheck(IkReal(x4179),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4182.valid){
continue;
}
IkReal x4180=((1.0)*(x4182.value));
IkReal x4181=x4163;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4180)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4180)));
IkReal gconst106=(x4179*x4181);
IkReal gconst107=((1.0)*r10*x4181);
IkReal x4183=r12*r12;
IkReal x4184=((1.0)+(((-1.0)*x4183)));
IkReal x4185=(r22*sj1*sj2);
IkReal x4186=(cj1*cj2*r22);
CheckValue<IkReal> x4193=IKPowWithIntegerCheck(x4184,-1);
if(!x4193.valid){
continue;
}
IkReal x4187=x4193.value;
CheckValue<IkReal> x4194=IKPowWithIntegerCheck(((-1.0)+x4183),-1);
if(!x4194.valid){
continue;
}
IkReal x4188=x4194.value;
IkReal x4189=((1.0)*x4187);
if((x4184) < -0.00001)
continue;
IkReal x4190=IKsqrt(x4184);
IkReal x4191=(r12*x4188*x4190);
IkReal x4192=((((-2.0)*r10*r11*r20*r21*x4187))+(((-1.0)*x4189*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x4189*(r10*r10)*(r20*r20))));
j4eval[0]=x4192;
j4eval[1]=((IKabs(((((-1.0)*x4186))+x4185)))+(IKabs((((x4186*x4191))+(((-1.0)*x4185*x4191))))));
j4eval[2]=IKsign(x4192);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4195=(sj1*sj2);
IkReal x4196=(gconst106*r21);
IkReal x4197=(gconst107*r20);
IkReal x4198=(cj1*cj2);
CheckValue<IkReal> x4199=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4197*x4197)))+(((2.0)*x4196*x4197))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4196*x4196))))),-1);
if(!x4199.valid){
continue;
}
CheckValue<IkReal> x4200 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4198))+((r22*x4195)))),IkReal((((x4197*x4198))+(((-1.0)*x4196*x4198))+((x4195*x4196))+(((-1.0)*x4195*x4197)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4199.value)))+(x4200.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4201=IKsin(j4);
IkReal x4202=IKcos(j4);
IkReal x4203=(gconst107*r10);
IkReal x4204=(gconst107*r00);
IkReal x4205=((1.0)*cj2);
IkReal x4206=(gconst107*r20);
IkReal x4207=((1.0)*sj0);
IkReal x4208=(cj1*sj2);
IkReal x4209=((1.0)*x4202);
IkReal x4210=(gconst106*x4202);
IkReal x4211=(gconst106*x4201);
IkReal x4212=((1.0)*x4201);
evalcond[0]=((((-1.0)*r22*x4209))+(((-1.0)*x4206*x4212))+((r21*x4211)));
evalcond[1]=((((-1.0)*r12*x4209))+cj0+((r11*x4211))+(((-1.0)*x4203*x4212)));
evalcond[2]=((((-1.0)*x4204*x4212))+(((-1.0)*r02*x4209))+(((-1.0)*x4207))+((r01*x4211)));
evalcond[3]=(((r22*x4201))+(((-1.0)*x4206*x4209))+((sj1*sj2))+(((-1.0)*cj1*x4205))+((r21*x4210)));
evalcond[4]=(((r02*x4201))+(((-1.0)*cj0*x4208))+(((-1.0)*cj0*sj1*x4205))+((r01*x4210))+(((-1.0)*x4204*x4209)));
evalcond[5]=(((r11*x4210))+(((-1.0)*x4207*x4208))+(((-1.0)*sj0*sj1*x4205))+(((-1.0)*x4203*x4209))+((r12*x4201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4213=((1.0)*sj0);
IkReal x4214=((1.0)*gconst106);
CheckValue<IkReal> x4215=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4214))+(((-1.0)*gconst107*r21)))),-1);
if(!x4215.valid){
continue;
}
CheckValue<IkReal> x4216 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4213))+(((-1.0)*cj0*r02)))),IkReal((((gconst107*r10*sj0))+(((-1.0)*cj0*r01*x4214))+((cj0*gconst107*r00))+(((-1.0)*gconst106*r11*x4213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4215.value)))+(x4216.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4217=IKsin(j4);
IkReal x4218=IKcos(j4);
IkReal x4219=(gconst107*r10);
IkReal x4220=(gconst107*r00);
IkReal x4221=((1.0)*cj2);
IkReal x4222=(gconst107*r20);
IkReal x4223=((1.0)*sj0);
IkReal x4224=(cj1*sj2);
IkReal x4225=((1.0)*x4218);
IkReal x4226=(gconst106*x4218);
IkReal x4227=(gconst106*x4217);
IkReal x4228=((1.0)*x4217);
evalcond[0]=((((-1.0)*x4222*x4228))+(((-1.0)*r22*x4225))+((r21*x4227)));
evalcond[1]=(cj0+(((-1.0)*r12*x4225))+(((-1.0)*x4219*x4228))+((r11*x4227)));
evalcond[2]=((((-1.0)*x4223))+((r01*x4227))+(((-1.0)*r02*x4225))+(((-1.0)*x4220*x4228)));
evalcond[3]=(((r22*x4217))+(((-1.0)*x4222*x4225))+((sj1*sj2))+((r21*x4226))+(((-1.0)*cj1*x4221)));
evalcond[4]=(((r01*x4226))+((r02*x4217))+(((-1.0)*cj0*x4224))+(((-1.0)*cj0*sj1*x4221))+(((-1.0)*x4220*x4225)));
evalcond[5]=(((r12*x4217))+(((-1.0)*sj0*sj1*x4221))+(((-1.0)*x4223*x4224))+(((-1.0)*x4219*x4225))+((r11*x4226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4229=((1.0)*gconst107);
CheckValue<IkReal> x4230 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4229))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4230.valid){
continue;
}
CheckValue<IkReal> x4231=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4229)))),-1);
if(!x4231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4230.value)+(((1.5707963267949)*(x4231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4232=IKsin(j4);
IkReal x4233=IKcos(j4);
IkReal x4234=(gconst107*r10);
IkReal x4235=(gconst107*r00);
IkReal x4236=((1.0)*cj2);
IkReal x4237=(gconst107*r20);
IkReal x4238=((1.0)*sj0);
IkReal x4239=(cj1*sj2);
IkReal x4240=((1.0)*x4233);
IkReal x4241=(gconst106*x4233);
IkReal x4242=(gconst106*x4232);
IkReal x4243=((1.0)*x4232);
evalcond[0]=((((-1.0)*r22*x4240))+(((-1.0)*x4237*x4243))+((r21*x4242)));
evalcond[1]=(cj0+(((-1.0)*r12*x4240))+(((-1.0)*x4234*x4243))+((r11*x4242)));
evalcond[2]=((((-1.0)*x4238))+((r01*x4242))+(((-1.0)*x4235*x4243))+(((-1.0)*r02*x4240)));
evalcond[3]=(((sj1*sj2))+((r22*x4232))+(((-1.0)*x4237*x4240))+((r21*x4241))+(((-1.0)*cj1*x4236)));
evalcond[4]=(((r01*x4241))+(((-1.0)*x4235*x4240))+((r02*x4232))+(((-1.0)*cj0*x4239))+(((-1.0)*cj0*sj1*x4236)));
evalcond[5]=(((r12*x4232))+(((-1.0)*sj0*sj1*x4236))+(((-1.0)*x4238*x4239))+(((-1.0)*x4234*x4240))+((r11*x4241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4244=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4244;
j4eval[1]=IKsign(x4244);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4245=((1.0)*cj5);
IkReal x4246=((((-1.0)*r01*x4245))+(((-1.0)*r00*sj5)));
j4eval[0]=x4246;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4245))))));
j4eval[2]=IKsign(x4246);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4247=(sj1*sj2);
IkReal x4248=(cj5*r10);
IkReal x4249=(r11*sj5);
IkReal x4250=(cj1*cj2);
IkReal x4251=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4251;
j4eval[1]=((IKabs((((r12*x4250))+(((-1.0)*r12*x4247)))))+(IKabs(((((-1.0)*x4247*x4248))+((x4247*x4249))+((x4248*x4250))+(((-1.0)*x4249*x4250))))));
j4eval[2]=IKsign(x4251);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4252=(sj1*sj2);
IkReal x4253=(cj5*r10);
IkReal x4254=(r11*sj5);
IkReal x4255=(cj1*cj2);
CheckValue<IkReal> x4256=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4256.valid){
continue;
}
CheckValue<IkReal> x4257 = IKatan2WithCheck(IkReal(((((-1.0)*x4252*x4253))+((x4253*x4255))+((x4252*x4254))+(((-1.0)*x4254*x4255)))),IkReal((((r12*x4255))+(((-1.0)*r12*x4252)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4256.value)))+(x4257.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4258=IKcos(j4);
IkReal x4259=IKsin(j4);
IkReal x4260=(cj5*r00);
IkReal x4261=(cj5*r10);
IkReal x4262=(r21*sj5);
IkReal x4263=((1.0)*cj2);
IkReal x4264=(cj5*r20);
IkReal x4265=((1.0)*x4258);
IkReal x4266=((1.0)*x4259);
IkReal x4267=(sj5*x4259);
IkReal x4268=(sj5*x4258);
evalcond[0]=(((r11*x4268))+((r12*x4259))+(((-1.0)*x4261*x4265)));
evalcond[1]=((((-1.0)*x4264*x4266))+(((-1.0)*r22*x4265))+((x4259*x4262)));
evalcond[2]=(((r01*x4267))+(((-1.0)*r02*x4265))+(((-1.0)*x4260*x4266)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4265))+((r11*x4267))+(((-1.0)*x4261*x4266)));
evalcond[4]=(((r22*x4259))+(((-1.0)*x4264*x4265))+((sj1*sj2))+((x4258*x4262))+(((-1.0)*cj1*x4263)));
evalcond[5]=(((r01*x4268))+(((-1.0)*sj1*x4263))+((r02*x4259))+(((-1.0)*cj1*sj2))+(((-1.0)*x4260*x4265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4269=((1.0)*cj5);
CheckValue<IkReal> x4270=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4269)))),-1);
if(!x4270.valid){
continue;
}
CheckValue<IkReal> x4271 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4269)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4270.value)))+(x4271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4272=IKcos(j4);
IkReal x4273=IKsin(j4);
IkReal x4274=(cj5*r00);
IkReal x4275=(cj5*r10);
IkReal x4276=(r21*sj5);
IkReal x4277=((1.0)*cj2);
IkReal x4278=(cj5*r20);
IkReal x4279=((1.0)*x4272);
IkReal x4280=((1.0)*x4273);
IkReal x4281=(sj5*x4273);
IkReal x4282=(sj5*x4272);
evalcond[0]=((((-1.0)*x4275*x4279))+((r11*x4282))+((r12*x4273)));
evalcond[1]=((((-1.0)*r22*x4279))+(((-1.0)*x4278*x4280))+((x4273*x4276)));
evalcond[2]=((((-1.0)*r02*x4279))+(((-1.0)*x4274*x4280))+((r01*x4281)));
evalcond[3]=((1.0)+(((-1.0)*x4275*x4280))+(((-1.0)*r12*x4279))+((r11*x4281)));
evalcond[4]=((((-1.0)*cj1*x4277))+(((-1.0)*x4278*x4279))+((sj1*sj2))+((x4272*x4276))+((r22*x4273)));
evalcond[5]=(((r02*x4273))+(((-1.0)*cj1*sj2))+(((-1.0)*x4274*x4279))+((r01*x4282))+(((-1.0)*sj1*x4277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4283=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4283.valid){
continue;
}
CheckValue<IkReal> x4284 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4283.value)))+(x4284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4285=IKcos(j4);
IkReal x4286=IKsin(j4);
IkReal x4287=(cj5*r00);
IkReal x4288=(cj5*r10);
IkReal x4289=(r21*sj5);
IkReal x4290=((1.0)*cj2);
IkReal x4291=(cj5*r20);
IkReal x4292=((1.0)*x4285);
IkReal x4293=((1.0)*x4286);
IkReal x4294=(sj5*x4286);
IkReal x4295=(sj5*x4285);
evalcond[0]=((((-1.0)*x4288*x4292))+((r12*x4286))+((r11*x4295)));
evalcond[1]=((((-1.0)*r22*x4292))+(((-1.0)*x4291*x4293))+((x4286*x4289)));
evalcond[2]=(((r01*x4294))+(((-1.0)*x4287*x4293))+(((-1.0)*r02*x4292)));
evalcond[3]=((1.0)+(((-1.0)*x4288*x4293))+(((-1.0)*r12*x4292))+((r11*x4294)));
evalcond[4]=(((r22*x4286))+((x4285*x4289))+(((-1.0)*x4291*x4292))+((sj1*sj2))+(((-1.0)*cj1*x4290)));
evalcond[5]=(((r01*x4295))+((r02*x4286))+(((-1.0)*cj1*sj2))+(((-1.0)*x4287*x4292))+(((-1.0)*sj1*x4290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4296=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4296;
j4eval[1]=IKsign(x4296);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4297=((1.0)*cj5);
IkReal x4298=((((-1.0)*r21*x4297))+(((-1.0)*r20*sj5)));
j4eval[0]=x4298;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x4297))+((r01*sj5))))));
j4eval[2]=IKsign(x4298);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4299=cj5*cj5;
IkReal x4300=r11*r11;
IkReal x4301=(r11*sj5);
IkReal x4302=(cj5*r10);
IkReal x4303=((((-1.0)*x4299*x4300))+(r12*r12)+(((-2.0)*x4301*x4302))+x4300+((x4299*(r10*r10))));
j4eval[0]=x4303;
j4eval[1]=IKsign(x4303);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x4302))+x4301))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4304=cj5*cj5;
IkReal x4305=r11*r11;
IkReal x4306=(cj5*r10);
IkReal x4307=(r11*sj5);
CheckValue<IkReal> x4308=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4304*x4305))+(r12*r12)+(((-2.0)*x4306*x4307))+x4305+((x4304*(r10*r10))))),-1);
if(!x4308.valid){
continue;
}
CheckValue<IkReal> x4309 = IKatan2WithCheck(IkReal(((((-1.0)*x4306))+x4307)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4308.value)))+(x4309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4310=IKcos(j4);
IkReal x4311=IKsin(j4);
IkReal x4312=(cj5*r00);
IkReal x4313=(cj5*r10);
IkReal x4314=(r21*sj5);
IkReal x4315=(cj5*r20);
IkReal x4316=((1.0)*x4310);
IkReal x4317=((1.0)*x4311);
IkReal x4318=(sj5*x4311);
IkReal x4319=(sj5*x4310);
evalcond[0]=(((r11*x4319))+((r12*x4311))+(((-1.0)*x4313*x4316)));
evalcond[1]=((((-1.0)*r22*x4316))+((x4311*x4314))+(((-1.0)*x4315*x4317)));
evalcond[2]=((((-1.0)*x4312*x4317))+((r01*x4318))+(((-1.0)*r02*x4316)));
evalcond[3]=((-1.0)+((r11*x4318))+(((-1.0)*r12*x4316))+(((-1.0)*x4313*x4317)));
evalcond[4]=((((-1.0)*x4312*x4316))+((cj2*sj1))+((cj1*sj2))+((r01*x4319))+((r02*x4311)));
evalcond[5]=(((x4310*x4314))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4315*x4316))+((r22*x4311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4320=((1.0)*cj5);
CheckValue<IkReal> x4321=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4320))+(((-1.0)*r20*sj5)))),-1);
if(!x4321.valid){
continue;
}
CheckValue<IkReal> x4322 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x4320))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4321.value)))+(x4322.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4323=IKcos(j4);
IkReal x4324=IKsin(j4);
IkReal x4325=(cj5*r00);
IkReal x4326=(cj5*r10);
IkReal x4327=(r21*sj5);
IkReal x4328=(cj5*r20);
IkReal x4329=((1.0)*x4323);
IkReal x4330=((1.0)*x4324);
IkReal x4331=(sj5*x4324);
IkReal x4332=(sj5*x4323);
evalcond[0]=((((-1.0)*x4326*x4329))+((r12*x4324))+((r11*x4332)));
evalcond[1]=(((x4324*x4327))+(((-1.0)*r22*x4329))+(((-1.0)*x4328*x4330)));
evalcond[2]=(((r01*x4331))+(((-1.0)*r02*x4329))+(((-1.0)*x4325*x4330)));
evalcond[3]=((-1.0)+(((-1.0)*x4326*x4330))+(((-1.0)*r12*x4329))+((r11*x4331)));
evalcond[4]=(((r01*x4332))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4325*x4329))+((r02*x4324)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4323*x4327))+(((-1.0)*x4328*x4329))+((r22*x4324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4333 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4333.valid){
continue;
}
CheckValue<IkReal> x4334=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4333.value)+(((1.5707963267949)*(x4334.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4335=IKcos(j4);
IkReal x4336=IKsin(j4);
IkReal x4337=(cj5*r00);
IkReal x4338=(cj5*r10);
IkReal x4339=(r21*sj5);
IkReal x4340=(cj5*r20);
IkReal x4341=((1.0)*x4335);
IkReal x4342=((1.0)*x4336);
IkReal x4343=(sj5*x4336);
IkReal x4344=(sj5*x4335);
evalcond[0]=(((r12*x4336))+(((-1.0)*x4338*x4341))+((r11*x4344)));
evalcond[1]=((((-1.0)*x4340*x4342))+(((-1.0)*r22*x4341))+((x4336*x4339)));
evalcond[2]=((((-1.0)*r02*x4341))+(((-1.0)*x4337*x4342))+((r01*x4343)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4341))+(((-1.0)*x4338*x4342))+((r11*x4343)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4337*x4341))+((r02*x4336))+((r01*x4344)));
evalcond[5]=((((-1.0)*x4340*x4341))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4335*x4339))+((r22*x4336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4345=((-1.0)*r00);
IkReal x4347 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4347)==0){
continue;
}
IkReal x4346=pow(x4347,-0.5);
CheckValue<IkReal> x4348 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4345),IKFAST_ATAN2_MAGTHRESH);
if(!x4348.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4348.value));
IkReal gconst109=(r01*x4346);
IkReal gconst110=(x4345*x4346);
CheckValue<IkReal> x4349 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4349.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4349.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4350=((-1.0)*r00);
IkReal x4351=x4346;
CheckValue<IkReal> x4353 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4350),IKFAST_ATAN2_MAGTHRESH);
if(!x4353.valid){
continue;
}
IkReal x4352=((-1.0)*(x4353.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4352;
IkReal gconst108=x4352;
IkReal gconst109=(r01*x4351);
IkReal gconst110=(x4350*x4351);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4354=((1.0)*sj0);
IkReal x4355=((1.0)*gconst109);
CheckValue<IkReal> x4356=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst110*r21))+(((-1.0)*r20*x4355)))),-1);
if(!x4356.valid){
continue;
}
CheckValue<IkReal> x4357 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4354))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4355))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4356.value)))+(x4357.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4358=IKsin(j4);
IkReal x4359=IKcos(j4);
IkReal x4360=(gconst109*r21);
IkReal x4361=((1.0)*cj2);
IkReal x4362=((1.0)*sj0);
IkReal x4363=(cj1*sj2);
IkReal x4364=((1.0)*x4359);
IkReal x4365=(gconst109*x4358);
IkReal x4366=(gconst109*x4359);
IkReal x4367=((1.0)*gconst110*x4358);
evalcond[0]=((((-1.0)*r22*x4364))+(((-1.0)*r20*x4367))+((x4358*x4360)));
evalcond[1]=(cj0+((r11*x4365))+(((-1.0)*r12*x4364))+(((-1.0)*r10*x4367)));
evalcond[2]=((((-1.0)*x4362))+((r01*x4365))+(((-1.0)*r02*x4364))+(((-1.0)*r00*x4367)));
evalcond[3]=((((-1.0)*cj1*x4361))+((x4359*x4360))+((r22*x4358))+((sj1*sj2))+(((-1.0)*gconst110*r20*x4364)));
evalcond[4]=((((-1.0)*cj0*x4363))+((r01*x4366))+((r02*x4358))+(((-1.0)*cj0*sj1*x4361))+(((-1.0)*gconst110*r00*x4364)));
evalcond[5]=(((r11*x4366))+(((-1.0)*x4362*x4363))+(((-1.0)*sj0*sj1*x4361))+(((-1.0)*gconst110*r10*x4364))+((r12*x4358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4368=((1.0)*gconst110);
CheckValue<IkReal> x4369 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x4368)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4369.valid){
continue;
}
CheckValue<IkReal> x4370=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4368))+(((-1.0)*gconst109*r10)))),-1);
if(!x4370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4369.value)+(((1.5707963267949)*(x4370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4371=IKsin(j4);
IkReal x4372=IKcos(j4);
IkReal x4373=(gconst109*r21);
IkReal x4374=((1.0)*cj2);
IkReal x4375=((1.0)*sj0);
IkReal x4376=(cj1*sj2);
IkReal x4377=((1.0)*x4372);
IkReal x4378=(gconst109*x4371);
IkReal x4379=(gconst109*x4372);
IkReal x4380=((1.0)*gconst110*x4371);
evalcond[0]=(((x4371*x4373))+(((-1.0)*r22*x4377))+(((-1.0)*r20*x4380)));
evalcond[1]=(cj0+((r11*x4378))+(((-1.0)*r10*x4380))+(((-1.0)*r12*x4377)));
evalcond[2]=(((r01*x4378))+(((-1.0)*r00*x4380))+(((-1.0)*r02*x4377))+(((-1.0)*x4375)));
evalcond[3]=(((r22*x4371))+((x4372*x4373))+((sj1*sj2))+(((-1.0)*gconst110*r20*x4377))+(((-1.0)*cj1*x4374)));
evalcond[4]=((((-1.0)*cj0*sj1*x4374))+((r02*x4371))+(((-1.0)*cj0*x4376))+((r01*x4379))+(((-1.0)*gconst110*r00*x4377)));
evalcond[5]=((((-1.0)*x4375*x4376))+((r12*x4371))+((r11*x4379))+(((-1.0)*gconst110*r10*x4377))+(((-1.0)*sj0*sj1*x4374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4381=((-1.0)*r01);
IkReal x4383 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4383)==0){
continue;
}
IkReal x4382=pow(x4383,-0.5);
CheckValue<IkReal> x4384 = IKatan2WithCheck(IkReal(x4381),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4384.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4384.value))));
IkReal gconst112=(x4381*x4382);
IkReal gconst113=((1.0)*r00*x4382);
CheckValue<IkReal> x4385 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4385.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4385.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4386=((-1.0)*r01);
CheckValue<IkReal> x4389 = IKatan2WithCheck(IkReal(x4386),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4389.valid){
continue;
}
IkReal x4387=((1.0)*(x4389.value));
IkReal x4388=x4382;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4387)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4387)));
IkReal gconst112=(x4386*x4388);
IkReal gconst113=((1.0)*r00*x4388);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4390=((-1.0)*r01);
CheckValue<IkReal> x4393 = IKatan2WithCheck(IkReal(x4390),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4393.valid){
continue;
}
IkReal x4391=((1.0)*(x4393.value));
IkReal x4392=x4382;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4391)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4391)));
IkReal gconst112=(x4390*x4392);
IkReal gconst113=((1.0)*r00*x4392);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4394=((-1.0)*r01);
CheckValue<IkReal> x4397 = IKatan2WithCheck(IkReal(x4394),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4397.valid){
continue;
}
IkReal x4395=((1.0)*(x4397.value));
IkReal x4396=x4382;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4395)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4395)));
IkReal gconst112=(x4394*x4396);
IkReal gconst113=((1.0)*r00*x4396);
IkReal x4398=r02*r02;
IkReal x4399=(r12*sj0);
IkReal x4400=((1.0)*cj0);
IkReal x4401=x4382;
j4eval[0]=((IKabs(((((-1.0)*x4399))+(((-1.0)*r02*x4400)))))+(IKabs((((r02*x4399*x4401))+(((-1.0)*x4400*x4401))+((cj0*x4398*x4401))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4402=((1.0)*sj0);
IkReal x4403=((1.0)*gconst112);
CheckValue<IkReal> x4404=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4403))+(((-1.0)*gconst113*r21)))),-1);
if(!x4404.valid){
continue;
}
CheckValue<IkReal> x4405 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4402))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4403))+(((-1.0)*gconst112*r11*x4402))+((gconst113*r10*sj0))+((cj0*gconst113*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4404.value)))+(x4405.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4406=IKsin(j4);
IkReal x4407=IKcos(j4);
IkReal x4408=(gconst113*r20);
IkReal x4409=(gconst112*r21);
IkReal x4410=((1.0)*cj2);
IkReal x4411=(gconst113*r00);
IkReal x4412=(gconst113*r10);
IkReal x4413=((1.0)*sj0);
IkReal x4414=(cj1*sj2);
IkReal x4415=((1.0)*x4407);
IkReal x4416=((1.0)*x4406);
IkReal x4417=(gconst112*x4407);
IkReal x4418=(gconst112*x4406);
evalcond[0]=((((-1.0)*x4408*x4416))+(((-1.0)*r22*x4415))+((x4406*x4409)));
evalcond[1]=(((r11*x4418))+cj0+(((-1.0)*r12*x4415))+(((-1.0)*x4412*x4416)));
evalcond[2]=(((r01*x4418))+(((-1.0)*x4411*x4416))+(((-1.0)*r02*x4415))+(((-1.0)*x4413)));
evalcond[3]=(((r22*x4406))+(((-1.0)*x4408*x4415))+((sj1*sj2))+((x4407*x4409))+(((-1.0)*cj1*x4410)));
evalcond[4]=((((-1.0)*cj0*sj1*x4410))+(((-1.0)*cj0*x4414))+((r01*x4417))+(((-1.0)*x4411*x4415))+((r02*x4406)));
evalcond[5]=(((r11*x4417))+((r12*x4406))+(((-1.0)*x4412*x4415))+(((-1.0)*x4413*x4414))+(((-1.0)*sj0*sj1*x4410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4419=((1.0)*gconst113);
CheckValue<IkReal> x4420=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4419))+(((-1.0)*gconst112*r10)))),-1);
if(!x4420.valid){
continue;
}
CheckValue<IkReal> x4421 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4419)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4420.value)))+(x4421.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4422=IKsin(j4);
IkReal x4423=IKcos(j4);
IkReal x4424=(gconst113*r20);
IkReal x4425=(gconst112*r21);
IkReal x4426=((1.0)*cj2);
IkReal x4427=(gconst113*r00);
IkReal x4428=(gconst113*r10);
IkReal x4429=((1.0)*sj0);
IkReal x4430=(cj1*sj2);
IkReal x4431=((1.0)*x4423);
IkReal x4432=((1.0)*x4422);
IkReal x4433=(gconst112*x4423);
IkReal x4434=(gconst112*x4422);
evalcond[0]=(((x4422*x4425))+(((-1.0)*r22*x4431))+(((-1.0)*x4424*x4432)));
evalcond[1]=((((-1.0)*x4428*x4432))+cj0+(((-1.0)*r12*x4431))+((r11*x4434)));
evalcond[2]=((((-1.0)*x4429))+(((-1.0)*x4427*x4432))+(((-1.0)*r02*x4431))+((r01*x4434)));
evalcond[3]=(((x4423*x4425))+((sj1*sj2))+((r22*x4422))+(((-1.0)*cj1*x4426))+(((-1.0)*x4424*x4431)));
evalcond[4]=((((-1.0)*x4427*x4431))+((r02*x4422))+(((-1.0)*cj0*x4430))+(((-1.0)*cj0*sj1*x4426))+((r01*x4433)));
evalcond[5]=((((-1.0)*x4428*x4431))+(((-1.0)*x4429*x4430))+(((-1.0)*sj0*sj1*x4426))+((r11*x4433))+((r12*x4422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4435=((1.0)*gconst113);
CheckValue<IkReal> x4436 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4435))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4436.valid){
continue;
}
CheckValue<IkReal> x4437=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4435))+(((-1.0)*gconst112*r00)))),-1);
if(!x4437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4436.value)+(((1.5707963267949)*(x4437.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4438=IKsin(j4);
IkReal x4439=IKcos(j4);
IkReal x4440=(gconst113*r20);
IkReal x4441=(gconst112*r21);
IkReal x4442=((1.0)*cj2);
IkReal x4443=(gconst113*r00);
IkReal x4444=(gconst113*r10);
IkReal x4445=((1.0)*sj0);
IkReal x4446=(cj1*sj2);
IkReal x4447=((1.0)*x4439);
IkReal x4448=((1.0)*x4438);
IkReal x4449=(gconst112*x4439);
IkReal x4450=(gconst112*x4438);
evalcond[0]=((((-1.0)*r22*x4447))+((x4438*x4441))+(((-1.0)*x4440*x4448)));
evalcond[1]=((((-1.0)*x4444*x4448))+cj0+(((-1.0)*r12*x4447))+((r11*x4450)));
evalcond[2]=(((r01*x4450))+(((-1.0)*x4445))+(((-1.0)*x4443*x4448))+(((-1.0)*r02*x4447)));
evalcond[3]=(((r22*x4438))+((sj1*sj2))+(((-1.0)*cj1*x4442))+((x4439*x4441))+(((-1.0)*x4440*x4447)));
evalcond[4]=(((r01*x4449))+(((-1.0)*cj0*sj1*x4442))+(((-1.0)*x4443*x4447))+(((-1.0)*cj0*x4446))+((r02*x4438)));
evalcond[5]=((((-1.0)*x4444*x4447))+((r12*x4438))+((r11*x4449))+(((-1.0)*x4445*x4446))+(((-1.0)*sj0*sj1*x4442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4451=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4451;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4451);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4452=((1.0)*cj5);
IkReal x4453=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4452)));
j4eval[0]=x4453;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4452)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4453);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4454=cj5*cj5;
IkReal x4455=r01*r01;
IkReal x4456=(cj5*r00);
IkReal x4457=(r01*sj5);
IkReal x4458=((((-2.0)*x4456*x4457))+x4455+((x4454*(r00*r00)))+(r02*r02)+(((-1.0)*x4454*x4455)));
j4eval[0]=x4458;
j4eval[1]=IKsign(x4458);
j4eval[2]=((IKabs((x4457+(((-1.0)*x4456)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4459=cj5*cj5;
IkReal x4460=r01*r01;
IkReal x4461=(r01*sj5);
IkReal x4462=(cj5*r00);
CheckValue<IkReal> x4463=IKPowWithIntegerCheck(IKsign((x4460+(((-1.0)*x4459*x4460))+(((-2.0)*x4461*x4462))+((x4459*(r00*r00)))+(r02*r02))),-1);
if(!x4463.valid){
continue;
}
CheckValue<IkReal> x4464 = IKatan2WithCheck(IkReal((x4461+(((-1.0)*x4462)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4463.value)))+(x4464.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4465=IKcos(j4);
IkReal x4466=IKsin(j4);
IkReal x4467=(cj5*r00);
IkReal x4468=(cj5*r10);
IkReal x4469=(r21*sj5);
IkReal x4470=((1.0)*cj2);
IkReal x4471=(cj5*r20);
IkReal x4472=((1.0)*x4465);
IkReal x4473=((1.0)*x4466);
IkReal x4474=(sj5*x4466);
IkReal x4475=(sj5*x4465);
evalcond[0]=((((-1.0)*x4467*x4472))+((r01*x4475))+((r02*x4466)));
evalcond[1]=(((x4466*x4469))+(((-1.0)*x4471*x4473))+(((-1.0)*r22*x4472)));
evalcond[2]=((((-1.0)*r12*x4472))+(((-1.0)*x4468*x4473))+((r11*x4474)));
evalcond[3]=((-1.0)+(((-1.0)*x4467*x4473))+((r01*x4474))+(((-1.0)*r02*x4472)));
evalcond[4]=((((-1.0)*cj1*x4470))+((r22*x4466))+((sj1*sj2))+(((-1.0)*x4471*x4472))+((x4465*x4469)));
evalcond[5]=((((-1.0)*sj1*x4470))+((r12*x4466))+(((-1.0)*cj1*sj2))+(((-1.0)*x4468*x4472))+((r11*x4475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4476=((1.0)*cj5);
CheckValue<IkReal> x4477=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4476))+(((-1.0)*r10*sj5)))),-1);
if(!x4477.valid){
continue;
}
CheckValue<IkReal> x4478 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4477.value)))+(x4478.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4479=IKcos(j4);
IkReal x4480=IKsin(j4);
IkReal x4481=(cj5*r00);
IkReal x4482=(cj5*r10);
IkReal x4483=(r21*sj5);
IkReal x4484=((1.0)*cj2);
IkReal x4485=(cj5*r20);
IkReal x4486=((1.0)*x4479);
IkReal x4487=((1.0)*x4480);
IkReal x4488=(sj5*x4480);
IkReal x4489=(sj5*x4479);
evalcond[0]=((((-1.0)*x4481*x4486))+((r02*x4480))+((r01*x4489)));
evalcond[1]=(((x4480*x4483))+(((-1.0)*x4485*x4487))+(((-1.0)*r22*x4486)));
evalcond[2]=(((r11*x4488))+(((-1.0)*r12*x4486))+(((-1.0)*x4482*x4487)));
evalcond[3]=((-1.0)+(((-1.0)*x4481*x4487))+((r01*x4488))+(((-1.0)*r02*x4486)));
evalcond[4]=((((-1.0)*cj1*x4484))+((sj1*sj2))+((x4479*x4483))+(((-1.0)*x4485*x4486))+((r22*x4480)));
evalcond[5]=(((r11*x4489))+(((-1.0)*sj1*x4484))+(((-1.0)*cj1*sj2))+((r12*x4480))+(((-1.0)*x4482*x4486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4490=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4490.valid){
continue;
}
CheckValue<IkReal> x4491 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4490.value)))+(x4491.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4492=IKcos(j4);
IkReal x4493=IKsin(j4);
IkReal x4494=(cj5*r00);
IkReal x4495=(cj5*r10);
IkReal x4496=(r21*sj5);
IkReal x4497=((1.0)*cj2);
IkReal x4498=(cj5*r20);
IkReal x4499=((1.0)*x4492);
IkReal x4500=((1.0)*x4493);
IkReal x4501=(sj5*x4493);
IkReal x4502=(sj5*x4492);
evalcond[0]=(((r02*x4493))+((r01*x4502))+(((-1.0)*x4494*x4499)));
evalcond[1]=((((-1.0)*x4498*x4500))+((x4493*x4496))+(((-1.0)*r22*x4499)));
evalcond[2]=(((r11*x4501))+(((-1.0)*x4495*x4500))+(((-1.0)*r12*x4499)));
evalcond[3]=((-1.0)+(((-1.0)*x4494*x4500))+(((-1.0)*r02*x4499))+((r01*x4501)));
evalcond[4]=((((-1.0)*cj1*x4497))+(((-1.0)*x4498*x4499))+((x4492*x4496))+((sj1*sj2))+((r22*x4493)));
evalcond[5]=(((r12*x4493))+(((-1.0)*sj1*x4497))+((r11*x4502))+(((-1.0)*cj1*sj2))+(((-1.0)*x4495*x4499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4503=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4503;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4503);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4504=((1.0)*cj5);
IkReal x4505=((((-1.0)*r21*x4504))+(((-1.0)*r20*sj5)));
j4eval[0]=x4505;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4504))))));
j4eval[2]=IKsign(x4505);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4506=cj5*cj5;
IkReal x4507=r01*r01;
IkReal x4508=(r01*sj5);
IkReal x4509=(cj5*r00);
IkReal x4510=(((x4506*x4507))+(((-1.0)*(r02*r02)))+(((-1.0)*x4506*(r00*r00)))+(((-1.0)*x4507))+(((2.0)*x4508*x4509)));
j4eval[0]=x4510;
j4eval[1]=IKsign(x4510);
j4eval[2]=((IKabs(r02))+(IKabs((x4508+(((-1.0)*x4509))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4511=cj5*cj5;
IkReal x4512=r01*r01;
IkReal x4513=(r01*sj5);
IkReal x4514=(cj5*r00);
CheckValue<IkReal> x4515=IKPowWithIntegerCheck(IKsign((((x4511*x4512))+(((-1.0)*(r02*r02)))+(((-1.0)*x4512))+(((-1.0)*x4511*(r00*r00)))+(((2.0)*x4513*x4514)))),-1);
if(!x4515.valid){
continue;
}
CheckValue<IkReal> x4516 = IKatan2WithCheck(IkReal((x4513+(((-1.0)*x4514)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4515.value)))+(x4516.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4517=IKcos(j4);
IkReal x4518=IKsin(j4);
IkReal x4519=(cj5*r00);
IkReal x4520=(cj5*r10);
IkReal x4521=(r21*sj5);
IkReal x4522=(cj5*r20);
IkReal x4523=((1.0)*x4517);
IkReal x4524=((1.0)*x4518);
IkReal x4525=(sj5*x4518);
IkReal x4526=(sj5*x4517);
evalcond[0]=(((r02*x4518))+((r01*x4526))+(((-1.0)*x4519*x4523)));
evalcond[1]=((((-1.0)*r22*x4523))+(((-1.0)*x4522*x4524))+((x4518*x4521)));
evalcond[2]=((((-1.0)*r12*x4523))+((r11*x4525))+(((-1.0)*x4520*x4524)));
evalcond[3]=((1.0)+((r01*x4525))+(((-1.0)*r02*x4523))+(((-1.0)*x4519*x4524)));
evalcond[4]=(((r11*x4526))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4520*x4523))+((r12*x4518)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4517*x4521))+(((-1.0)*x4522*x4523))+((r22*x4518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4527=((1.0)*cj5);
CheckValue<IkReal> x4528=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4527))+(((-1.0)*r20*sj5)))),-1);
if(!x4528.valid){
continue;
}
CheckValue<IkReal> x4529 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4527)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4528.value)))+(x4529.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4530=IKcos(j4);
IkReal x4531=IKsin(j4);
IkReal x4532=(cj5*r00);
IkReal x4533=(cj5*r10);
IkReal x4534=(r21*sj5);
IkReal x4535=(cj5*r20);
IkReal x4536=((1.0)*x4530);
IkReal x4537=((1.0)*x4531);
IkReal x4538=(sj5*x4531);
IkReal x4539=(sj5*x4530);
evalcond[0]=(((r01*x4539))+((r02*x4531))+(((-1.0)*x4532*x4536)));
evalcond[1]=(((x4531*x4534))+(((-1.0)*r22*x4536))+(((-1.0)*x4535*x4537)));
evalcond[2]=((((-1.0)*x4533*x4537))+(((-1.0)*r12*x4536))+((r11*x4538)));
evalcond[3]=((1.0)+((r01*x4538))+(((-1.0)*r02*x4536))+(((-1.0)*x4532*x4537)));
evalcond[4]=(((cj2*sj1))+((r12*x4531))+((cj1*sj2))+(((-1.0)*x4533*x4536))+((r11*x4539)));
evalcond[5]=(((x4530*x4534))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4531))+(((-1.0)*x4535*x4536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4540 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4540.valid){
continue;
}
CheckValue<IkReal> x4541=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4540.value)+(((1.5707963267949)*(x4541.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4542=IKcos(j4);
IkReal x4543=IKsin(j4);
IkReal x4544=(cj5*r00);
IkReal x4545=(cj5*r10);
IkReal x4546=(r21*sj5);
IkReal x4547=(cj5*r20);
IkReal x4548=((1.0)*x4542);
IkReal x4549=((1.0)*x4543);
IkReal x4550=(sj5*x4543);
IkReal x4551=(sj5*x4542);
evalcond[0]=(((r01*x4551))+((r02*x4543))+(((-1.0)*x4544*x4548)));
evalcond[1]=((((-1.0)*r22*x4548))+(((-1.0)*x4547*x4549))+((x4543*x4546)));
evalcond[2]=((((-1.0)*x4545*x4549))+((r11*x4550))+(((-1.0)*r12*x4548)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4548))+((r01*x4550))+(((-1.0)*x4544*x4549)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4545*x4548))+((r11*x4551))+((r12*x4543)));
evalcond[5]=(((r22*x4543))+(((-1.0)*x4547*x4548))+((x4542*x4546))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4552=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4552);
rxp1_1=(px*r21);
rxp1_2=(r11*x4552);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4553=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4553);
rxp1_1=(px*r21);
rxp1_2=(r11*x4553);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4554=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4554);
rxp1_1=(px*r21);
rxp1_2=(r11*x4554);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4557=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4557.valid){
continue;
}
IkReal x4555=x4557.value;
IkReal x4556=(sj0*x4555);
cj4array[0]=(((cj1*sj2*x4556))+((cj2*sj1*x4556)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4558=IKsin(j4);
IkReal x4559=IKcos(j4);
IkReal x4560=(r21*sj5);
IkReal x4561=((1.0)*cj5*r20);
evalcond[0]=(r02*x4558);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4559)));
evalcond[2]=((((-1.0)*x4558*x4561))+((x4558*x4560)));
evalcond[3]=((((-1.0)*cj5*r10*x4558))+((r11*sj5*x4558)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4559*x4561))+((x4559*x4560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4563=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4563.valid){
continue;
}
IkReal x4562=x4563.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4562))+((cj1*cj2*x4562)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4564=IKsin(j4);
IkReal x4565=IKcos(j4);
IkReal x4566=((1.0)*sj0);
IkReal x4567=((1.0)*cj5);
IkReal x4568=(sj5*x4564);
evalcond[0]=(r02*x4564);
evalcond[1]=((((-1.0)*r02*x4565))+(((-1.0)*x4566)));
evalcond[2]=(((r21*x4568))+(((-1.0)*r20*x4564*x4567)));
evalcond[3]=(((r11*x4568))+(((-1.0)*r10*x4564*x4567)));
evalcond[4]=((((-1.0)*cj2*sj1*x4566))+(((-1.0)*r10*x4565*x4567))+((r11*sj5*x4565))+(((-1.0)*cj1*sj2*x4566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4569=IKPowWithIntegerCheck(r02,-1);
if(!x4569.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4569.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4570=IKsin(j4);
IkReal x4571=IKcos(j4);
IkReal x4572=((1.0)*cj1);
IkReal x4573=(r21*sj5);
IkReal x4574=((1.0)*cj5);
IkReal x4575=(r11*sj5);
evalcond[0]=(r02*x4570);
evalcond[1]=((((-1.0)*r20*x4570*x4574))+((x4570*x4573)));
evalcond[2]=((((-1.0)*r10*x4570*x4574))+((x4570*x4575)));
evalcond[3]=((((-1.0)*cj2*x4572))+((sj1*sj2))+(((-1.0)*r20*x4571*x4574))+((x4571*x4573)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4571*x4574))+((x4571*x4575))+(((-1.0)*sj0*sj2*x4572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4576=((1.0)*sj0);
IkReal x4577=((1.0)*cj0);
CheckValue<IkReal> x4578 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4577))+(((-1.0)*r12*x4576)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4576))+(((-1.0)*r01*sj5*x4577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4578.valid){
continue;
}
CheckValue<IkReal> x4579=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4578.value)+(((1.5707963267949)*(x4579.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4580=IKsin(j4);
IkReal x4581=IKcos(j4);
IkReal x4582=(cj5*r00);
IkReal x4583=(cj5*r10);
IkReal x4584=(r21*sj5);
IkReal x4585=((1.0)*cj2);
IkReal x4586=((1.0)*sj0);
IkReal x4587=(cj1*sj2);
IkReal x4588=(cj5*r20);
IkReal x4589=((1.0)*x4581);
IkReal x4590=((1.0)*x4580);
IkReal x4591=(sj5*x4580);
IkReal x4592=(sj5*x4581);
evalcond[0]=((((-1.0)*r22*x4589))+(((-1.0)*x4588*x4590))+((x4580*x4584)));
evalcond[1]=(cj0+(((-1.0)*x4583*x4590))+((r11*x4591))+(((-1.0)*r12*x4589)));
evalcond[2]=((((-1.0)*x4582*x4590))+(((-1.0)*x4586))+(((-1.0)*r02*x4589))+((r01*x4591)));
evalcond[3]=(((r22*x4580))+((x4581*x4584))+((sj1*sj2))+(((-1.0)*x4588*x4589))+(((-1.0)*cj1*x4585)));
evalcond[4]=(((r02*x4580))+(((-1.0)*cj0*x4587))+(((-1.0)*cj0*sj1*x4585))+(((-1.0)*x4582*x4589))+((r01*x4592)));
evalcond[5]=((((-1.0)*x4583*x4589))+((r11*x4592))+(((-1.0)*sj0*sj1*x4585))+(((-1.0)*x4586*x4587))+((r12*x4580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4593=((1.0)*cj5);
CheckValue<IkReal> x4594=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4593)))),-1);
if(!x4594.valid){
continue;
}
CheckValue<IkReal> x4595 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4593))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4594.value)))+(x4595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4596=IKsin(j4);
IkReal x4597=IKcos(j4);
IkReal x4598=(cj5*r00);
IkReal x4599=(cj5*r10);
IkReal x4600=(r21*sj5);
IkReal x4601=((1.0)*cj2);
IkReal x4602=((1.0)*sj0);
IkReal x4603=(cj1*sj2);
IkReal x4604=(cj5*r20);
IkReal x4605=((1.0)*x4597);
IkReal x4606=((1.0)*x4596);
IkReal x4607=(sj5*x4596);
IkReal x4608=(sj5*x4597);
evalcond[0]=(((x4596*x4600))+(((-1.0)*x4604*x4606))+(((-1.0)*r22*x4605)));
evalcond[1]=(((r11*x4607))+cj0+(((-1.0)*x4599*x4606))+(((-1.0)*r12*x4605)));
evalcond[2]=((((-1.0)*x4602))+((r01*x4607))+(((-1.0)*r02*x4605))+(((-1.0)*x4598*x4606)));
evalcond[3]=(((r22*x4596))+(((-1.0)*cj1*x4601))+((x4597*x4600))+((sj1*sj2))+(((-1.0)*x4604*x4605)));
evalcond[4]=((((-1.0)*cj0*sj1*x4601))+((r01*x4608))+((r02*x4596))+(((-1.0)*cj0*x4603))+(((-1.0)*x4598*x4605)));
evalcond[5]=(((r11*x4608))+(((-1.0)*sj0*sj1*x4601))+(((-1.0)*x4599*x4605))+(((-1.0)*x4602*x4603))+((r12*x4596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4609=((1.0)*cj5);
CheckValue<IkReal> x4610=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4609)))),-1);
if(!x4610.valid){
continue;
}
CheckValue<IkReal> x4611 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4609)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4610.value)))+(x4611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4612=IKsin(j4);
IkReal x4613=IKcos(j4);
IkReal x4614=(cj5*r00);
IkReal x4615=(cj5*r10);
IkReal x4616=(r21*sj5);
IkReal x4617=((1.0)*cj2);
IkReal x4618=((1.0)*sj0);
IkReal x4619=(cj1*sj2);
IkReal x4620=(cj5*r20);
IkReal x4621=((1.0)*x4613);
IkReal x4622=((1.0)*x4612);
IkReal x4623=(sj5*x4612);
IkReal x4624=(sj5*x4613);
evalcond[0]=((((-1.0)*r22*x4621))+(((-1.0)*x4620*x4622))+((x4612*x4616)));
evalcond[1]=(cj0+((r11*x4623))+(((-1.0)*r12*x4621))+(((-1.0)*x4615*x4622)));
evalcond[2]=((((-1.0)*x4614*x4622))+(((-1.0)*r02*x4621))+(((-1.0)*x4618))+((r01*x4623)));
evalcond[3]=(((sj1*sj2))+((r22*x4612))+(((-1.0)*x4620*x4621))+((x4613*x4616))+(((-1.0)*cj1*x4617)));
evalcond[4]=((((-1.0)*x4614*x4621))+(((-1.0)*cj0*x4619))+((r02*x4612))+(((-1.0)*cj0*sj1*x4617))+((r01*x4624)));
evalcond[5]=(((r11*x4624))+((r12*x4612))+(((-1.0)*sj0*sj1*x4617))+(((-1.0)*x4615*x4621))+(((-1.0)*x4618*x4619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4625=((1.0)*cj5);
IkReal x4626=((1.0)*sj5);
IkReal x4627=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4627;
j0eval[1]=((IKabs(((((-1.0)*r01*x4625))+(((-1.0)*r00*x4626)))))+(IKabs(((((-1.0)*r11*x4625))+(((-1.0)*r10*x4626))))));
j0eval[2]=IKsign(x4627);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4628=cj5*cj5;
IkReal x4629=r21*r21;
IkReal x4630=(cj1*sj2);
IkReal x4631=((1.0)*r22);
IkReal x4632=(cj5*r20);
IkReal x4633=(r21*sj5);
IkReal x4634=(cj2*sj1);
IkReal x4635=((r22*r22)+x4629+(((-1.0)*x4628*x4629))+((x4628*(r20*r20)))+(((-2.0)*x4632*x4633)));
j4eval[0]=x4635;
j4eval[1]=IKsign(x4635);
j4eval[2]=((IKabs(((((-1.0)*x4630*x4631))+(((-1.0)*x4631*x4634)))))+(IKabs(((((-1.0)*x4630*x4633))+((x4630*x4632))+((x4632*x4634))+(((-1.0)*x4633*x4634))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.65250965250965)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.65250965250965)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.65250965250965)*px))+IKsqr(((9.65250965250965)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.65250965250965)*px), ((9.65250965250965)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.1036)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.1036)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4636=((1.0)*cj5);
IkReal x4637=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4636)));
j4eval[0]=x4637;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4636)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4637);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4638=cj5*cj5;
IkReal x4639=((1.0)*r21);
IkReal x4640=(cj5*sj5);
IkReal x4641=((1.0)*r20);
IkReal x4642=(((r01*r21))+(((-1.0)*r00*x4639*x4640))+(((-1.0)*r01*x4638*x4639))+((r00*r20*x4638))+(((-1.0)*r01*x4640*x4641))+((r02*r22)));
j4eval[0]=x4642;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4641)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4642);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4643=cj5*cj5;
IkReal x4644=(r21*sj5);
IkReal x4645=(r11*r21);
IkReal x4646=((1.0)*cj5*r20);
IkReal x4647=((((-1.0)*cj5*r10*x4644))+x4645+(((-1.0)*r11*sj5*x4646))+((r12*r22))+(((-1.0)*x4643*x4645))+((r10*r20*x4643)));
j4eval[0]=x4647;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x4644))+(((-1.0)*sj0*x4646))))));
j4eval[2]=IKsign(x4647);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4648=cj5*cj5;
IkReal x4649=(r21*sj5);
IkReal x4650=(r11*r21);
IkReal x4651=((1.0)*cj5*r20);
CheckValue<IkReal> x4652 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x4651))+((sj0*x4649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4652.valid){
continue;
}
CheckValue<IkReal> x4653=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x4651))+(((-1.0)*cj5*r10*x4649))+x4650+((r12*r22))+(((-1.0)*x4648*x4650))+((r10*r20*x4648)))),-1);
if(!x4653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4652.value)+(((1.5707963267949)*(x4653.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4654=IKsin(j4);
IkReal x4655=IKcos(j4);
IkReal x4656=(r11*sj5);
IkReal x4657=(cj5*r00);
IkReal x4658=(cj5*r10);
IkReal x4659=(r21*sj5);
IkReal x4660=(cj5*r20);
IkReal x4661=(r01*sj5);
IkReal x4662=((1.0)*x4655);
IkReal x4663=((1.0)*x4654);
evalcond[0]=((((-1.0)*x4660*x4663))+((x4654*x4659))+(((-1.0)*r22*x4662)));
evalcond[1]=((((-1.0)*x4659*x4662))+((x4655*x4660))+(((-1.0)*r22*x4663)));
evalcond[2]=((((-1.0)*x4658*x4663))+cj0+((x4654*x4656))+(((-1.0)*r12*x4662)));
evalcond[3]=((((-1.0)*x4661*x4662))+cj0+((x4655*x4657))+(((-1.0)*r02*x4663)));
evalcond[4]=(sj0+(((-1.0)*x4656*x4662))+(((-1.0)*r12*x4663))+((x4655*x4658)));
evalcond[5]=((((-1.0)*sj0))+((x4654*x4661))+(((-1.0)*x4657*x4663))+(((-1.0)*r02*x4662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4664=cj5*cj5;
IkReal x4665=((1.0)*r21);
IkReal x4666=(cj5*sj5);
IkReal x4667=((1.0)*r20);
CheckValue<IkReal> x4668 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4667)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4668.valid){
continue;
}
CheckValue<IkReal> x4669=IKPowWithIntegerCheck(IKsign((((r00*r20*x4664))+(((-1.0)*r01*x4664*x4665))+((r01*r21))+(((-1.0)*r00*x4665*x4666))+(((-1.0)*r01*x4666*x4667))+((r02*r22)))),-1);
if(!x4669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4668.value)+(((1.5707963267949)*(x4669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4670=IKsin(j4);
IkReal x4671=IKcos(j4);
IkReal x4672=(r11*sj5);
IkReal x4673=(cj5*r00);
IkReal x4674=(cj5*r10);
IkReal x4675=(r21*sj5);
IkReal x4676=(cj5*r20);
IkReal x4677=(r01*sj5);
IkReal x4678=((1.0)*x4671);
IkReal x4679=((1.0)*x4670);
evalcond[0]=(((x4670*x4675))+(((-1.0)*x4676*x4679))+(((-1.0)*r22*x4678)));
evalcond[1]=((((-1.0)*x4675*x4678))+(((-1.0)*r22*x4679))+((x4671*x4676)));
evalcond[2]=(cj0+((x4670*x4672))+(((-1.0)*x4674*x4679))+(((-1.0)*r12*x4678)));
evalcond[3]=((((-1.0)*r02*x4679))+cj0+(((-1.0)*x4677*x4678))+((x4671*x4673)));
evalcond[4]=(sj0+(((-1.0)*r12*x4679))+(((-1.0)*x4672*x4678))+((x4671*x4674)));
evalcond[5]=((((-1.0)*r02*x4678))+(((-1.0)*sj0))+((x4670*x4677))+(((-1.0)*x4673*x4679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4680=((1.0)*cj5);
CheckValue<IkReal> x4681 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4680)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4681.valid){
continue;
}
CheckValue<IkReal> x4682=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4680)))),-1);
if(!x4682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4681.value)+(((1.5707963267949)*(x4682.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4683=IKsin(j4);
IkReal x4684=IKcos(j4);
IkReal x4685=(r11*sj5);
IkReal x4686=(cj5*r00);
IkReal x4687=(cj5*r10);
IkReal x4688=(r21*sj5);
IkReal x4689=(cj5*r20);
IkReal x4690=(r01*sj5);
IkReal x4691=((1.0)*x4684);
IkReal x4692=((1.0)*x4683);
evalcond[0]=(((x4683*x4688))+(((-1.0)*r22*x4691))+(((-1.0)*x4689*x4692)));
evalcond[1]=((((-1.0)*x4688*x4691))+(((-1.0)*r22*x4692))+((x4684*x4689)));
evalcond[2]=((((-1.0)*r12*x4691))+(((-1.0)*x4687*x4692))+((x4683*x4685))+cj0);
evalcond[3]=(cj0+(((-1.0)*x4690*x4691))+(((-1.0)*r02*x4692))+((x4684*x4686)));
evalcond[4]=((((-1.0)*r12*x4692))+sj0+(((-1.0)*x4685*x4691))+((x4684*x4687)));
evalcond[5]=(((x4683*x4690))+(((-1.0)*sj0))+(((-1.0)*x4686*x4692))+(((-1.0)*r02*x4691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.65250965250965)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.65250965250965)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.65250965250965)*px))+IKsqr(((9.65250965250965)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.65250965250965)*px), ((9.65250965250965)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.1036)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.1036)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4693=((1.0)*cj5);
IkReal x4694=((((-1.0)*r01*x4693))+(((-1.0)*r00*sj5)));
j4eval[0]=x4694;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4693)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4694);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4695=((1.0)*cj5);
IkReal x4696=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4695)));
j4eval[0]=x4696;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4695))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4696);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4697=cj5*cj5;
IkReal x4698=((1.0)*sj5);
IkReal x4699=(cj5*r20);
IkReal x4700=(r11*r21);
IkReal x4701=((((-1.0)*x4697*x4700))+(((-1.0)*cj5*r10*r21*x4698))+((r12*r22))+x4700+(((-1.0)*r11*x4698*x4699))+((r10*r20*x4697)));
j4eval[0]=x4701;
j4eval[1]=IKsign(x4701);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x4699))+(((-1.0)*cj0*r21*x4698))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4702=cj5*cj5;
IkReal x4703=((1.0)*sj5);
IkReal x4704=(cj5*r20);
IkReal x4705=(r11*r21);
CheckValue<IkReal> x4706 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x4703))+((cj0*x4704)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4706.valid){
continue;
}
CheckValue<IkReal> x4707=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4703*x4704))+((r10*r20*x4702))+((r12*r22))+x4705+(((-1.0)*cj5*r10*r21*x4703))+(((-1.0)*x4702*x4705)))),-1);
if(!x4707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4706.value)+(((1.5707963267949)*(x4707.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4708=IKsin(j4);
IkReal x4709=IKcos(j4);
IkReal x4710=((1.0)*sj0);
IkReal x4711=(cj5*r00);
IkReal x4712=(r11*sj5);
IkReal x4713=(cj5*r10);
IkReal x4714=(r21*sj5);
IkReal x4715=(cj5*r20);
IkReal x4716=(r01*sj5);
IkReal x4717=((1.0)*x4709);
IkReal x4718=((1.0)*x4708);
evalcond[0]=((((-1.0)*r22*x4717))+((x4708*x4714))+(((-1.0)*x4715*x4718)));
evalcond[1]=((((-1.0)*x4714*x4717))+(((-1.0)*r22*x4718))+((x4709*x4715)));
evalcond[2]=(cj0+((x4708*x4712))+(((-1.0)*r12*x4717))+(((-1.0)*x4713*x4718)));
evalcond[3]=((((-1.0)*r02*x4717))+(((-1.0)*x4711*x4718))+((x4708*x4716))+(((-1.0)*x4710)));
evalcond[4]=((((-1.0)*r02*x4718))+((x4709*x4711))+(((-1.0)*x4716*x4717))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4712*x4717))+((x4709*x4713))+(((-1.0)*r12*x4718))+(((-1.0)*x4710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4719=((1.0)*cj5);
CheckValue<IkReal> x4720=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4719)))),-1);
if(!x4720.valid){
continue;
}
CheckValue<IkReal> x4721 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4719))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4720.value)))+(x4721.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4722=IKsin(j4);
IkReal x4723=IKcos(j4);
IkReal x4724=((1.0)*sj0);
IkReal x4725=(cj5*r00);
IkReal x4726=(r11*sj5);
IkReal x4727=(cj5*r10);
IkReal x4728=(r21*sj5);
IkReal x4729=(cj5*r20);
IkReal x4730=(r01*sj5);
IkReal x4731=((1.0)*x4723);
IkReal x4732=((1.0)*x4722);
evalcond[0]=(((x4722*x4728))+(((-1.0)*x4729*x4732))+(((-1.0)*r22*x4731)));
evalcond[1]=(((x4723*x4729))+(((-1.0)*x4728*x4731))+(((-1.0)*r22*x4732)));
evalcond[2]=(cj0+(((-1.0)*r12*x4731))+(((-1.0)*x4727*x4732))+((x4722*x4726)));
evalcond[3]=(((x4722*x4730))+(((-1.0)*x4724))+(((-1.0)*x4725*x4732))+(((-1.0)*r02*x4731)));
evalcond[4]=((((-1.0)*x4730*x4731))+((x4723*x4725))+(((-1.0)*r02*x4732))+(((-1.0)*cj0)));
evalcond[5]=(((x4723*x4727))+(((-1.0)*r12*x4732))+(((-1.0)*x4724))+(((-1.0)*x4726*x4731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4733=((1.0)*cj5);
CheckValue<IkReal> x4734=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4733))+(((-1.0)*r00*sj5)))),-1);
if(!x4734.valid){
continue;
}
CheckValue<IkReal> x4735 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4734.value)))+(x4735.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4736=IKsin(j4);
IkReal x4737=IKcos(j4);
IkReal x4738=((1.0)*sj0);
IkReal x4739=(cj5*r00);
IkReal x4740=(r11*sj5);
IkReal x4741=(cj5*r10);
IkReal x4742=(r21*sj5);
IkReal x4743=(cj5*r20);
IkReal x4744=(r01*sj5);
IkReal x4745=((1.0)*x4737);
IkReal x4746=((1.0)*x4736);
evalcond[0]=((((-1.0)*r22*x4745))+((x4736*x4742))+(((-1.0)*x4743*x4746)));
evalcond[1]=(((x4737*x4743))+(((-1.0)*r22*x4746))+(((-1.0)*x4742*x4745)));
evalcond[2]=((((-1.0)*r12*x4745))+cj0+((x4736*x4740))+(((-1.0)*x4741*x4746)));
evalcond[3]=((((-1.0)*x4738))+((x4736*x4744))+(((-1.0)*x4739*x4746))+(((-1.0)*r02*x4745)));
evalcond[4]=((((-1.0)*x4744*x4745))+((x4737*x4739))+(((-1.0)*cj0))+(((-1.0)*r02*x4746)));
evalcond[5]=(((x4737*x4741))+(((-1.0)*r12*x4746))+(((-1.0)*x4738))+(((-1.0)*x4740*x4745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.10196423907778)*py))+(((-0.481777644178006)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.10196423907778)*px))+(((0.481777644178006)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.10196423907778)*py))+(((-0.481777644178006)*px))))+IKsqr(((((-2.10196423907778)*px))+(((0.481777644178006)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.10196423907778)*py))+(((-0.481777644178006)*px))), ((((-2.10196423907778)*px))+(((0.481777644178006)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4747=IKcos(j0);
IkReal x4748=IKsin(j0);
evalcond[0]=((((-0.1036)*x4748))+(((-0.452)*x4747))+(((-1.0)*px)));
evalcond[1]=((((-0.452)*x4748))+(((-1.0)*py))+(((0.1036)*x4747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4749=((1.0)*cj5);
IkReal x4750=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4749)));
j4eval[0]=x4750;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4749)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4750);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4751=((1.0)*cj5);
IkReal x4752=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4751)));
j4eval[0]=x4752;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4751))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4752);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4753=cj5*cj5;
IkReal x4754=((1.0)*sj5);
IkReal x4755=(cj5*r20);
IkReal x4756=(r11*r21);
IkReal x4757=((((-1.0)*cj5*r10*r21*x4754))+((r12*r22))+x4756+(((-1.0)*x4753*x4756))+((r10*r20*x4753))+(((-1.0)*r11*x4754*x4755)));
j4eval[0]=x4757;
j4eval[1]=IKsign(x4757);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x4754))+((cj0*x4755)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4758=cj5*cj5;
IkReal x4759=((1.0)*sj5);
IkReal x4760=(cj5*r20);
IkReal x4761=(r11*r21);
CheckValue<IkReal> x4762 = IKatan2WithCheck(IkReal((((cj0*x4760))+(((-1.0)*cj0*r21*x4759)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4762.valid){
continue;
}
CheckValue<IkReal> x4763=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x4759))+((r12*r22))+x4761+(((-1.0)*r11*x4759*x4760))+((r10*r20*x4758))+(((-1.0)*x4758*x4761)))),-1);
if(!x4763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4762.value)+(((1.5707963267949)*(x4763.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4764=IKsin(j4);
IkReal x4765=IKcos(j4);
IkReal x4766=((1.0)*sj0);
IkReal x4767=(cj5*r00);
IkReal x4768=(r11*sj5);
IkReal x4769=(cj5*r10);
IkReal x4770=(r21*sj5);
IkReal x4771=(cj5*r20);
IkReal x4772=(r01*sj5);
IkReal x4773=((1.0)*x4765);
IkReal x4774=((1.0)*x4764);
evalcond[0]=((((-1.0)*r22*x4773))+(((-1.0)*x4771*x4774))+((x4764*x4770)));
evalcond[1]=((((-1.0)*r22*x4774))+((x4765*x4771))+(((-1.0)*x4770*x4773)));
evalcond[2]=((((-1.0)*x4769*x4774))+cj0+(((-1.0)*r12*x4773))+((x4764*x4768)));
evalcond[3]=((((-1.0)*x4766))+(((-1.0)*x4767*x4774))+(((-1.0)*r02*x4773))+((x4764*x4772)));
evalcond[4]=((((-1.0)*x4772*x4773))+(((-1.0)*r02*x4774))+(((-1.0)*cj0))+((x4765*x4767)));
evalcond[5]=((((-1.0)*x4766))+(((-1.0)*r12*x4774))+(((-1.0)*x4768*x4773))+((x4765*x4769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4775=((1.0)*cj5);
CheckValue<IkReal> x4776=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4775))+(((-1.0)*r10*sj5)))),-1);
if(!x4776.valid){
continue;
}
CheckValue<IkReal> x4777 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4775))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4776.value)))+(x4777.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4778=IKsin(j4);
IkReal x4779=IKcos(j4);
IkReal x4780=((1.0)*sj0);
IkReal x4781=(cj5*r00);
IkReal x4782=(r11*sj5);
IkReal x4783=(cj5*r10);
IkReal x4784=(r21*sj5);
IkReal x4785=(cj5*r20);
IkReal x4786=(r01*sj5);
IkReal x4787=((1.0)*x4779);
IkReal x4788=((1.0)*x4778);
evalcond[0]=(((x4778*x4784))+(((-1.0)*r22*x4787))+(((-1.0)*x4785*x4788)));
evalcond[1]=(((x4779*x4785))+(((-1.0)*r22*x4788))+(((-1.0)*x4784*x4787)));
evalcond[2]=(((x4778*x4782))+cj0+(((-1.0)*x4783*x4788))+(((-1.0)*r12*x4787)));
evalcond[3]=(((x4778*x4786))+(((-1.0)*x4781*x4788))+(((-1.0)*r02*x4787))+(((-1.0)*x4780)));
evalcond[4]=(((x4779*x4781))+(((-1.0)*x4786*x4787))+(((-1.0)*r02*x4788))+(((-1.0)*cj0)));
evalcond[5]=(((x4779*x4783))+(((-1.0)*x4782*x4787))+(((-1.0)*x4780))+(((-1.0)*r12*x4788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4789=((1.0)*cj5);
CheckValue<IkReal> x4790 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4789)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4790.valid){
continue;
}
CheckValue<IkReal> x4791=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4789)))),-1);
if(!x4791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4790.value)+(((1.5707963267949)*(x4791.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4792=IKsin(j4);
IkReal x4793=IKcos(j4);
IkReal x4794=((1.0)*sj0);
IkReal x4795=(cj5*r00);
IkReal x4796=(r11*sj5);
IkReal x4797=(cj5*r10);
IkReal x4798=(r21*sj5);
IkReal x4799=(cj5*r20);
IkReal x4800=(r01*sj5);
IkReal x4801=((1.0)*x4793);
IkReal x4802=((1.0)*x4792);
evalcond[0]=((((-1.0)*r22*x4801))+((x4792*x4798))+(((-1.0)*x4799*x4802)));
evalcond[1]=((((-1.0)*r22*x4802))+((x4793*x4799))+(((-1.0)*x4798*x4801)));
evalcond[2]=(cj0+(((-1.0)*x4797*x4802))+((x4792*x4796))+(((-1.0)*r12*x4801)));
evalcond[3]=(((x4792*x4800))+(((-1.0)*x4794))+(((-1.0)*r02*x4801))+(((-1.0)*x4795*x4802)));
evalcond[4]=((((-1.0)*x4800*x4801))+((x4793*x4795))+(((-1.0)*r02*x4802))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4796*x4801))+((x4793*x4797))+(((-1.0)*x4794))+(((-1.0)*r12*x4802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.10196423907778)*py))+(((-0.481777644178006)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.10196423907778)*px))+(((0.481777644178006)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.10196423907778)*py))+(((-0.481777644178006)*px))))+IKsqr(((((-2.10196423907778)*px))+(((0.481777644178006)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.10196423907778)*py))+(((-0.481777644178006)*px))), ((((-2.10196423907778)*px))+(((0.481777644178006)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4803=IKcos(j0);
IkReal x4804=IKsin(j0);
evalcond[0]=((((-0.452)*x4803))+(((-1.0)*px))+(((-0.1036)*x4804)));
evalcond[1]=((((-0.452)*x4804))+(((-1.0)*py))+(((0.1036)*x4803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4805=((1.0)*cj5);
IkReal x4806=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4805)));
j4eval[0]=x4806;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4805)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4806);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4807=cj5*cj5;
IkReal x4808=((1.0)*r21);
IkReal x4809=(cj5*sj5);
IkReal x4810=((1.0)*r20);
IkReal x4811=(((r00*r20*x4807))+(((-1.0)*r00*x4808*x4809))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x4807*x4808))+(((-1.0)*r01*x4809*x4810)));
j4eval[0]=x4811;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4810))))));
j4eval[2]=IKsign(x4811);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4812=cj5*cj5;
IkReal x4813=(r21*sj5);
IkReal x4814=(r11*r21);
IkReal x4815=((1.0)*cj5*r20);
IkReal x4816=((((-1.0)*cj5*r10*x4813))+(((-1.0)*x4812*x4814))+(((-1.0)*r11*sj5*x4815))+((r10*r20*x4812))+((r12*r22))+x4814);
j4eval[0]=x4816;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x4815))+((sj0*x4813))))));
j4eval[2]=IKsign(x4816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4817=cj5*cj5;
IkReal x4818=(r21*sj5);
IkReal x4819=(r11*r21);
IkReal x4820=((1.0)*cj5*r20);
CheckValue<IkReal> x4821 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x4820))+((sj0*x4818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4821.valid){
continue;
}
CheckValue<IkReal> x4822=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x4818))+(((-1.0)*x4817*x4819))+((r10*r20*x4817))+(((-1.0)*r11*sj5*x4820))+((r12*r22))+x4819)),-1);
if(!x4822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4821.value)+(((1.5707963267949)*(x4822.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4823=IKsin(j4);
IkReal x4824=IKcos(j4);
IkReal x4825=(r11*sj5);
IkReal x4826=(cj5*r00);
IkReal x4827=(cj5*r10);
IkReal x4828=(r21*sj5);
IkReal x4829=(cj5*r20);
IkReal x4830=(r01*sj5);
IkReal x4831=((1.0)*x4824);
IkReal x4832=((1.0)*x4823);
evalcond[0]=(((x4823*x4828))+(((-1.0)*x4829*x4832))+(((-1.0)*r22*x4831)));
evalcond[1]=((((-1.0)*r22*x4832))+((x4824*x4829))+(((-1.0)*x4828*x4831)));
evalcond[2]=(cj0+((x4823*x4825))+(((-1.0)*r12*x4831))+(((-1.0)*x4827*x4832)));
evalcond[3]=(cj0+(((-1.0)*x4830*x4831))+(((-1.0)*r02*x4832))+((x4824*x4826)));
evalcond[4]=(sj0+(((-1.0)*r12*x4832))+(((-1.0)*x4825*x4831))+((x4824*x4827)));
evalcond[5]=((((-1.0)*sj0))+((x4823*x4830))+(((-1.0)*x4826*x4832))+(((-1.0)*r02*x4831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4833=cj5*cj5;
IkReal x4834=((1.0)*r21);
IkReal x4835=(cj5*sj5);
IkReal x4836=((1.0)*r20);
CheckValue<IkReal> x4837=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4835*x4836))+((r01*r21))+(((-1.0)*r00*x4834*x4835))+((r02*r22))+(((-1.0)*r01*x4833*x4834))+((r00*r20*x4833)))),-1);
if(!x4837.valid){
continue;
}
CheckValue<IkReal> x4838 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4836))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4837.value)))+(x4838.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4839=IKsin(j4);
IkReal x4840=IKcos(j4);
IkReal x4841=(r11*sj5);
IkReal x4842=(cj5*r00);
IkReal x4843=(cj5*r10);
IkReal x4844=(r21*sj5);
IkReal x4845=(cj5*r20);
IkReal x4846=(r01*sj5);
IkReal x4847=((1.0)*x4840);
IkReal x4848=((1.0)*x4839);
evalcond[0]=((((-1.0)*x4845*x4848))+((x4839*x4844))+(((-1.0)*r22*x4847)));
evalcond[1]=((((-1.0)*x4844*x4847))+((x4840*x4845))+(((-1.0)*r22*x4848)));
evalcond[2]=(cj0+(((-1.0)*r12*x4847))+((x4839*x4841))+(((-1.0)*x4843*x4848)));
evalcond[3]=(cj0+(((-1.0)*r02*x4848))+((x4840*x4842))+(((-1.0)*x4846*x4847)));
evalcond[4]=(sj0+(((-1.0)*x4841*x4847))+((x4840*x4843))+(((-1.0)*r12*x4848)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4842*x4848))+(((-1.0)*r02*x4847))+((x4839*x4846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4849=((1.0)*cj5);
CheckValue<IkReal> x4850=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4849))+(((-1.0)*r00*sj5)))),-1);
if(!x4850.valid){
continue;
}
CheckValue<IkReal> x4851 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4850.value)))+(x4851.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4852=IKsin(j4);
IkReal x4853=IKcos(j4);
IkReal x4854=(r11*sj5);
IkReal x4855=(cj5*r00);
IkReal x4856=(cj5*r10);
IkReal x4857=(r21*sj5);
IkReal x4858=(cj5*r20);
IkReal x4859=(r01*sj5);
IkReal x4860=((1.0)*x4853);
IkReal x4861=((1.0)*x4852);
evalcond[0]=((((-1.0)*r22*x4860))+(((-1.0)*x4858*x4861))+((x4852*x4857)));
evalcond[1]=(((x4853*x4858))+(((-1.0)*r22*x4861))+(((-1.0)*x4857*x4860)));
evalcond[2]=((((-1.0)*x4856*x4861))+cj0+(((-1.0)*r12*x4860))+((x4852*x4854)));
evalcond[3]=(((x4853*x4855))+cj0+(((-1.0)*x4859*x4860))+(((-1.0)*r02*x4861)));
evalcond[4]=((((-1.0)*x4854*x4860))+((x4853*x4856))+sj0+(((-1.0)*r12*x4861)));
evalcond[5]=((((-1.0)*x4855*x4861))+(((-1.0)*sj0))+(((-1.0)*r02*x4860))+((x4852*x4859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.65250965250965)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.65250965250965)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.65250965250965)*px))+IKsqr(((9.65250965250965)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.65250965250965)*px), ((9.65250965250965)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.1036)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.1036)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4862=((1.0)*cj5);
IkReal x4863=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4862)));
j4eval[0]=x4863;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x4862))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4863);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4864=((1.0)*cj5);
IkReal x4865=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4864)));
j4eval[0]=x4865;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4864))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4865);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4866=cj5*cj5;
IkReal x4867=((1.0)*sj5);
IkReal x4868=(cj5*r20);
IkReal x4869=(r11*r21);
IkReal x4870=(((r10*r20*x4866))+(((-1.0)*r11*x4867*x4868))+((r12*r22))+(((-1.0)*x4866*x4869))+x4869+(((-1.0)*cj5*r10*r21*x4867)));
j4eval[0]=x4870;
j4eval[1]=IKsign(x4870);
j4eval[2]=((IKabs((((cj0*x4868))+(((-1.0)*cj0*r21*x4867)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4871=cj5*cj5;
IkReal x4872=((1.0)*sj5);
IkReal x4873=(cj5*r20);
IkReal x4874=(r11*r21);
CheckValue<IkReal> x4875 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x4872))+((cj0*x4873)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4875.valid){
continue;
}
CheckValue<IkReal> x4876=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4872*x4873))+(((-1.0)*cj5*r10*r21*x4872))+(((-1.0)*x4871*x4874))+((r12*r22))+((r10*r20*x4871))+x4874)),-1);
if(!x4876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4875.value)+(((1.5707963267949)*(x4876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4877=IKsin(j4);
IkReal x4878=IKcos(j4);
IkReal x4879=((1.0)*sj0);
IkReal x4880=(cj5*r00);
IkReal x4881=(r11*sj5);
IkReal x4882=(cj5*r10);
IkReal x4883=(r21*sj5);
IkReal x4884=(cj5*r20);
IkReal x4885=(r01*sj5);
IkReal x4886=((1.0)*x4878);
IkReal x4887=((1.0)*x4877);
evalcond[0]=((((-1.0)*x4884*x4887))+((x4877*x4883))+(((-1.0)*r22*x4886)));
evalcond[1]=((((-1.0)*x4883*x4886))+((x4878*x4884))+(((-1.0)*r22*x4887)));
evalcond[2]=(cj0+(((-1.0)*r12*x4886))+(((-1.0)*x4882*x4887))+((x4877*x4881)));
evalcond[3]=((((-1.0)*x4880*x4887))+(((-1.0)*r02*x4886))+((x4877*x4885))+(((-1.0)*x4879)));
evalcond[4]=((((-1.0)*r02*x4887))+(((-1.0)*x4885*x4886))+((x4878*x4880))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x4887))+(((-1.0)*x4881*x4886))+((x4878*x4882))+(((-1.0)*x4879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4888=((1.0)*cj5);
CheckValue<IkReal> x4889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4888)))),-1);
if(!x4889.valid){
continue;
}
CheckValue<IkReal> x4890 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4889.value)))+(x4890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4891=IKsin(j4);
IkReal x4892=IKcos(j4);
IkReal x4893=((1.0)*sj0);
IkReal x4894=(cj5*r00);
IkReal x4895=(r11*sj5);
IkReal x4896=(cj5*r10);
IkReal x4897=(r21*sj5);
IkReal x4898=(cj5*r20);
IkReal x4899=(r01*sj5);
IkReal x4900=((1.0)*x4892);
IkReal x4901=((1.0)*x4891);
evalcond[0]=((((-1.0)*x4898*x4901))+((x4891*x4897))+(((-1.0)*r22*x4900)));
evalcond[1]=(((x4892*x4898))+(((-1.0)*x4897*x4900))+(((-1.0)*r22*x4901)));
evalcond[2]=((((-1.0)*r12*x4900))+cj0+((x4891*x4895))+(((-1.0)*x4896*x4901)));
evalcond[3]=((((-1.0)*x4893))+(((-1.0)*x4894*x4901))+((x4891*x4899))+(((-1.0)*r02*x4900)));
evalcond[4]=((((-1.0)*x4899*x4900))+((x4892*x4894))+(((-1.0)*r02*x4901))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x4901))+(((-1.0)*x4893))+((x4892*x4896))+(((-1.0)*x4895*x4900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4902=((1.0)*cj5);
CheckValue<IkReal> x4903=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4902))+(((-1.0)*r00*sj5)))),-1);
if(!x4903.valid){
continue;
}
CheckValue<IkReal> x4904 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4903.value)))+(x4904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4905=IKsin(j4);
IkReal x4906=IKcos(j4);
IkReal x4907=((1.0)*sj0);
IkReal x4908=(cj5*r00);
IkReal x4909=(r11*sj5);
IkReal x4910=(cj5*r10);
IkReal x4911=(r21*sj5);
IkReal x4912=(cj5*r20);
IkReal x4913=(r01*sj5);
IkReal x4914=((1.0)*x4906);
IkReal x4915=((1.0)*x4905);
evalcond[0]=((((-1.0)*x4912*x4915))+((x4905*x4911))+(((-1.0)*r22*x4914)));
evalcond[1]=((((-1.0)*x4911*x4914))+((x4906*x4912))+(((-1.0)*r22*x4915)));
evalcond[2]=(((x4905*x4909))+cj0+(((-1.0)*r12*x4914))+(((-1.0)*x4910*x4915)));
evalcond[3]=((((-1.0)*x4907))+(((-1.0)*r02*x4914))+(((-1.0)*x4908*x4915))+((x4905*x4913)));
evalcond[4]=((((-1.0)*r02*x4915))+(((-1.0)*x4913*x4914))+((x4906*x4908))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4909*x4914))+(((-1.0)*x4907))+(((-1.0)*r12*x4915))+((x4906*x4910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.65250965250965)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.65250965250965)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.65250965250965)*px))+IKsqr(((9.65250965250965)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.65250965250965)*px), ((9.65250965250965)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.1036)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.1036)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4916=((1.0)*cj5);
IkReal x4917=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4916)));
j4eval[0]=x4917;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x4916))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4917);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4918=cj5*cj5;
IkReal x4919=((1.0)*r21);
IkReal x4920=(cj5*sj5);
IkReal x4921=((1.0)*r20);
IkReal x4922=((((-1.0)*r01*x4920*x4921))+(((-1.0)*r01*x4918*x4919))+((r01*r21))+(((-1.0)*r00*x4919*x4920))+((r00*r20*x4918))+((r02*r22)));
j4eval[0]=x4922;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4921)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4922);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4923=cj5*cj5;
IkReal x4924=(r21*sj5);
IkReal x4925=(r11*r21);
IkReal x4926=((1.0)*cj5*r20);
IkReal x4927=(x4925+(((-1.0)*cj5*r10*x4924))+(((-1.0)*x4923*x4925))+((r12*r22))+((r10*r20*x4923))+(((-1.0)*r11*sj5*x4926)));
j4eval[0]=x4927;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x4926))+((sj0*x4924))))));
j4eval[2]=IKsign(x4927);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4928=cj5*cj5;
IkReal x4929=(r21*sj5);
IkReal x4930=(r11*r21);
IkReal x4931=((1.0)*cj5*r20);
CheckValue<IkReal> x4932=IKPowWithIntegerCheck(IKsign((x4930+(((-1.0)*cj5*r10*x4929))+(((-1.0)*x4928*x4930))+((r12*r22))+((r10*r20*x4928))+(((-1.0)*r11*sj5*x4931)))),-1);
if(!x4932.valid){
continue;
}
CheckValue<IkReal> x4933 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x4931))+((sj0*x4929)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4932.value)))+(x4933.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4934=IKsin(j4);
IkReal x4935=IKcos(j4);
IkReal x4936=(r11*sj5);
IkReal x4937=(cj5*r00);
IkReal x4938=(cj5*r10);
IkReal x4939=(r21*sj5);
IkReal x4940=(cj5*r20);
IkReal x4941=(r01*sj5);
IkReal x4942=((1.0)*x4935);
IkReal x4943=((1.0)*x4934);
evalcond[0]=(((x4934*x4939))+(((-1.0)*x4940*x4943))+(((-1.0)*r22*x4942)));
evalcond[1]=((((-1.0)*x4939*x4942))+(((-1.0)*r22*x4943))+((x4935*x4940)));
evalcond[2]=(((x4934*x4936))+(((-1.0)*x4938*x4943))+cj0+(((-1.0)*r12*x4942)));
evalcond[3]=(((x4935*x4937))+(((-1.0)*x4941*x4942))+cj0+(((-1.0)*r02*x4943)));
evalcond[4]=(((x4935*x4938))+sj0+(((-1.0)*r12*x4943))+(((-1.0)*x4936*x4942)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4937*x4943))+((x4934*x4941))+(((-1.0)*r02*x4942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4944=cj5*cj5;
IkReal x4945=((1.0)*r21);
IkReal x4946=(cj5*sj5);
IkReal x4947=((1.0)*r20);
CheckValue<IkReal> x4948=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4945*x4946))+((r01*r21))+(((-1.0)*r01*x4944*x4945))+(((-1.0)*r01*x4946*x4947))+((r02*r22))+((r00*r20*x4944)))),-1);
if(!x4948.valid){
continue;
}
CheckValue<IkReal> x4949 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4948.value)))+(x4949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4950=IKsin(j4);
IkReal x4951=IKcos(j4);
IkReal x4952=(r11*sj5);
IkReal x4953=(cj5*r00);
IkReal x4954=(cj5*r10);
IkReal x4955=(r21*sj5);
IkReal x4956=(cj5*r20);
IkReal x4957=(r01*sj5);
IkReal x4958=((1.0)*x4951);
IkReal x4959=((1.0)*x4950);
evalcond[0]=((((-1.0)*x4956*x4959))+(((-1.0)*r22*x4958))+((x4950*x4955)));
evalcond[1]=((((-1.0)*x4955*x4958))+(((-1.0)*r22*x4959))+((x4951*x4956)));
evalcond[2]=(cj0+(((-1.0)*r12*x4958))+(((-1.0)*x4954*x4959))+((x4950*x4952)));
evalcond[3]=(cj0+(((-1.0)*x4957*x4958))+(((-1.0)*r02*x4959))+((x4951*x4953)));
evalcond[4]=(sj0+(((-1.0)*r12*x4959))+(((-1.0)*x4952*x4958))+((x4951*x4954)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4958))+((x4950*x4957))+(((-1.0)*x4953*x4959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4960=((1.0)*cj5);
CheckValue<IkReal> x4961=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4960)))),-1);
if(!x4961.valid){
continue;
}
CheckValue<IkReal> x4962 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4961.value)))+(x4962.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4963=IKsin(j4);
IkReal x4964=IKcos(j4);
IkReal x4965=(r11*sj5);
IkReal x4966=(cj5*r00);
IkReal x4967=(cj5*r10);
IkReal x4968=(r21*sj5);
IkReal x4969=(cj5*r20);
IkReal x4970=(r01*sj5);
IkReal x4971=((1.0)*x4964);
IkReal x4972=((1.0)*x4963);
evalcond[0]=(((x4963*x4968))+(((-1.0)*r22*x4971))+(((-1.0)*x4969*x4972)));
evalcond[1]=((((-1.0)*x4968*x4971))+((x4964*x4969))+(((-1.0)*r22*x4972)));
evalcond[2]=(((x4963*x4965))+cj0+(((-1.0)*r12*x4971))+(((-1.0)*x4967*x4972)));
evalcond[3]=(cj0+((x4964*x4966))+(((-1.0)*r02*x4972))+(((-1.0)*x4970*x4971)));
evalcond[4]=(sj0+((x4964*x4967))+(((-1.0)*r12*x4972))+(((-1.0)*x4965*x4971)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4971))+(((-1.0)*x4966*x4972))+((x4963*x4970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.481777644178006)*px))+(((2.10196423907778)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.10196423907778)*px))+(((0.481777644178006)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.481777644178006)*px))+(((2.10196423907778)*py))))+IKsqr(((((2.10196423907778)*px))+(((0.481777644178006)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.481777644178006)*px))+(((2.10196423907778)*py))), ((((2.10196423907778)*px))+(((0.481777644178006)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4973=IKcos(j0);
IkReal x4974=IKsin(j0);
evalcond[0]=((((0.452)*x4973))+(((-1.0)*px))+(((-0.1036)*x4974)));
evalcond[1]=((((0.452)*x4974))+(((-1.0)*py))+(((0.1036)*x4973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4975=((1.0)*cj5);
IkReal x4976=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4975)));
j4eval[0]=x4976;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4975)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4976);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4977=cj5*cj5;
IkReal x4978=((1.0)*r21);
IkReal x4979=(cj5*sj5);
IkReal x4980=((1.0)*r20);
IkReal x4981=((((-1.0)*r01*x4977*x4978))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x4979*x4980))+((r00*r20*x4977))+(((-1.0)*r00*x4978*x4979)));
j4eval[0]=x4981;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4980)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4981);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4982=cj5*cj5;
IkReal x4983=(r21*sj5);
IkReal x4984=(r11*r21);
IkReal x4985=((1.0)*cj5*r20);
IkReal x4986=(x4984+((r12*r22))+(((-1.0)*cj5*r10*x4983))+(((-1.0)*r11*sj5*x4985))+((r10*r20*x4982))+(((-1.0)*x4982*x4984)));
j4eval[0]=x4986;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x4985))+((sj0*x4983))))));
j4eval[2]=IKsign(x4986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4987=cj5*cj5;
IkReal x4988=(r21*sj5);
IkReal x4989=(r11*r21);
IkReal x4990=((1.0)*cj5*r20);
CheckValue<IkReal> x4991=IKPowWithIntegerCheck(IKsign((x4989+(((-1.0)*x4987*x4989))+((r12*r22))+(((-1.0)*cj5*r10*x4988))+((r10*r20*x4987))+(((-1.0)*r11*sj5*x4990)))),-1);
if(!x4991.valid){
continue;
}
CheckValue<IkReal> x4992 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x4990))+((sj0*x4988)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4991.value)))+(x4992.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4993=IKsin(j4);
IkReal x4994=IKcos(j4);
IkReal x4995=(r11*sj5);
IkReal x4996=(cj5*r00);
IkReal x4997=(cj5*r10);
IkReal x4998=(r21*sj5);
IkReal x4999=(cj5*r20);
IkReal x5000=(r01*sj5);
IkReal x5001=((1.0)*x4994);
IkReal x5002=((1.0)*x4993);
evalcond[0]=(((x4993*x4998))+(((-1.0)*x4999*x5002))+(((-1.0)*r22*x5001)));
evalcond[1]=(((x4994*x4999))+(((-1.0)*x4998*x5001))+(((-1.0)*r22*x5002)));
evalcond[2]=(((x4993*x4995))+cj0+(((-1.0)*r12*x5001))+(((-1.0)*x4997*x5002)));
evalcond[3]=(((x4994*x4996))+cj0+(((-1.0)*x5000*x5001))+(((-1.0)*r02*x5002)));
evalcond[4]=(sj0+((x4994*x4997))+(((-1.0)*r12*x5002))+(((-1.0)*x4995*x5001)));
evalcond[5]=((((-1.0)*sj0))+((x4993*x5000))+(((-1.0)*r02*x5001))+(((-1.0)*x4996*x5002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5003=cj5*cj5;
IkReal x5004=((1.0)*r21);
IkReal x5005=(cj5*sj5);
IkReal x5006=((1.0)*r20);
CheckValue<IkReal> x5007=IKPowWithIntegerCheck(IKsign((((r00*r20*x5003))+((r01*r21))+(((-1.0)*r01*x5003*x5004))+((r02*r22))+(((-1.0)*r00*x5004*x5005))+(((-1.0)*r01*x5005*x5006)))),-1);
if(!x5007.valid){
continue;
}
CheckValue<IkReal> x5008 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x5006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5007.value)))+(x5008.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5009=IKsin(j4);
IkReal x5010=IKcos(j4);
IkReal x5011=(r11*sj5);
IkReal x5012=(cj5*r00);
IkReal x5013=(cj5*r10);
IkReal x5014=(r21*sj5);
IkReal x5015=(cj5*r20);
IkReal x5016=(r01*sj5);
IkReal x5017=((1.0)*x5010);
IkReal x5018=((1.0)*x5009);
evalcond[0]=((((-1.0)*r22*x5017))+((x5009*x5014))+(((-1.0)*x5015*x5018)));
evalcond[1]=(((x5010*x5015))+(((-1.0)*x5014*x5017))+(((-1.0)*r22*x5018)));
evalcond[2]=(cj0+(((-1.0)*x5013*x5018))+((x5009*x5011))+(((-1.0)*r12*x5017)));
evalcond[3]=(cj0+((x5010*x5012))+(((-1.0)*r02*x5018))+(((-1.0)*x5016*x5017)));
evalcond[4]=(sj0+((x5010*x5013))+(((-1.0)*x5011*x5017))+(((-1.0)*r12*x5018)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5017))+((x5009*x5016))+(((-1.0)*x5012*x5018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5019=((1.0)*cj5);
CheckValue<IkReal> x5020 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5019)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5020.valid){
continue;
}
CheckValue<IkReal> x5021=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5019)))),-1);
if(!x5021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5020.value)+(((1.5707963267949)*(x5021.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5022=IKsin(j4);
IkReal x5023=IKcos(j4);
IkReal x5024=(r11*sj5);
IkReal x5025=(cj5*r00);
IkReal x5026=(cj5*r10);
IkReal x5027=(r21*sj5);
IkReal x5028=(cj5*r20);
IkReal x5029=(r01*sj5);
IkReal x5030=((1.0)*x5023);
IkReal x5031=((1.0)*x5022);
evalcond[0]=(((x5022*x5027))+(((-1.0)*x5028*x5031))+(((-1.0)*r22*x5030)));
evalcond[1]=((((-1.0)*x5027*x5030))+((x5023*x5028))+(((-1.0)*r22*x5031)));
evalcond[2]=(((x5022*x5024))+cj0+(((-1.0)*r12*x5030))+(((-1.0)*x5026*x5031)));
evalcond[3]=(((x5023*x5025))+cj0+(((-1.0)*x5029*x5030))+(((-1.0)*r02*x5031)));
evalcond[4]=(((x5023*x5026))+(((-1.0)*x5024*x5030))+sj0+(((-1.0)*r12*x5031)));
evalcond[5]=(((x5022*x5029))+(((-1.0)*sj0))+(((-1.0)*r02*x5030))+(((-1.0)*x5025*x5031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.481777644178006)*px))+(((2.10196423907778)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.10196423907778)*px))+(((0.481777644178006)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.481777644178006)*px))+(((2.10196423907778)*py))))+IKsqr(((((2.10196423907778)*px))+(((0.481777644178006)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.481777644178006)*px))+(((2.10196423907778)*py))), ((((2.10196423907778)*px))+(((0.481777644178006)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5032=IKcos(j0);
IkReal x5033=IKsin(j0);
evalcond[0]=((((0.452)*x5032))+(((-1.0)*px))+(((-0.1036)*x5033)));
evalcond[1]=((((0.452)*x5033))+(((-1.0)*py))+(((0.1036)*x5032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5034=((1.0)*cj5);
IkReal x5035=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5034)));
j4eval[0]=x5035;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5034)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5035);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5036=((1.0)*cj5);
IkReal x5037=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5036)));
j4eval[0]=x5037;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x5036))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5038=cj5*cj5;
IkReal x5039=((1.0)*sj5);
IkReal x5040=(cj5*r20);
IkReal x5041=(r11*r21);
IkReal x5042=((((-1.0)*cj5*r10*r21*x5039))+(((-1.0)*x5038*x5041))+((r10*r20*x5038))+((r12*r22))+x5041+(((-1.0)*r11*x5039*x5040)));
j4eval[0]=x5042;
j4eval[1]=IKsign(x5042);
j4eval[2]=((IKabs((((cj0*x5040))+(((-1.0)*cj0*r21*x5039)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5043=cj5*cj5;
IkReal x5044=((1.0)*sj5);
IkReal x5045=(cj5*r20);
IkReal x5046=(r11*r21);
CheckValue<IkReal> x5047=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5044*x5045))+(((-1.0)*cj5*r10*r21*x5044))+((r12*r22))+x5046+(((-1.0)*x5043*x5046))+((r10*r20*x5043)))),-1);
if(!x5047.valid){
continue;
}
CheckValue<IkReal> x5048 = IKatan2WithCheck(IkReal((((cj0*x5045))+(((-1.0)*cj0*r21*x5044)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5047.value)))+(x5048.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5049=IKsin(j4);
IkReal x5050=IKcos(j4);
IkReal x5051=((1.0)*sj0);
IkReal x5052=(cj5*r00);
IkReal x5053=(r11*sj5);
IkReal x5054=(cj5*r10);
IkReal x5055=(r21*sj5);
IkReal x5056=(cj5*r20);
IkReal x5057=(r01*sj5);
IkReal x5058=((1.0)*x5050);
IkReal x5059=((1.0)*x5049);
evalcond[0]=(((x5049*x5055))+(((-1.0)*r22*x5058))+(((-1.0)*x5056*x5059)));
evalcond[1]=((((-1.0)*x5055*x5058))+(((-1.0)*r22*x5059))+((x5050*x5056)));
evalcond[2]=(((x5049*x5053))+cj0+(((-1.0)*x5054*x5059))+(((-1.0)*r12*x5058)));
evalcond[3]=(((x5049*x5057))+(((-1.0)*x5052*x5059))+(((-1.0)*r02*x5058))+(((-1.0)*x5051)));
evalcond[4]=(((x5050*x5052))+(((-1.0)*r02*x5059))+(((-1.0)*x5057*x5058))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x5059))+(((-1.0)*x5053*x5058))+((x5050*x5054))+(((-1.0)*x5051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5060=((1.0)*cj5);
CheckValue<IkReal> x5061=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5060)))),-1);
if(!x5061.valid){
continue;
}
CheckValue<IkReal> x5062 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5060)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5061.value)))+(x5062.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5063=IKsin(j4);
IkReal x5064=IKcos(j4);
IkReal x5065=((1.0)*sj0);
IkReal x5066=(cj5*r00);
IkReal x5067=(r11*sj5);
IkReal x5068=(cj5*r10);
IkReal x5069=(r21*sj5);
IkReal x5070=(cj5*r20);
IkReal x5071=(r01*sj5);
IkReal x5072=((1.0)*x5064);
IkReal x5073=((1.0)*x5063);
evalcond[0]=(((x5063*x5069))+(((-1.0)*x5070*x5073))+(((-1.0)*r22*x5072)));
evalcond[1]=(((x5064*x5070))+(((-1.0)*x5069*x5072))+(((-1.0)*r22*x5073)));
evalcond[2]=(cj0+((x5063*x5067))+(((-1.0)*r12*x5072))+(((-1.0)*x5068*x5073)));
evalcond[3]=((((-1.0)*x5065))+(((-1.0)*r02*x5072))+(((-1.0)*x5066*x5073))+((x5063*x5071)));
evalcond[4]=((((-1.0)*r02*x5073))+((x5064*x5066))+(((-1.0)*cj0))+(((-1.0)*x5071*x5072)));
evalcond[5]=((((-1.0)*x5065))+(((-1.0)*x5067*x5072))+((x5064*x5068))+(((-1.0)*r12*x5073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5074=((1.0)*cj5);
CheckValue<IkReal> x5075 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5074))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5075.valid){
continue;
}
CheckValue<IkReal> x5076=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5074)))),-1);
if(!x5076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5075.value)+(((1.5707963267949)*(x5076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5077=IKsin(j4);
IkReal x5078=IKcos(j4);
IkReal x5079=((1.0)*sj0);
IkReal x5080=(cj5*r00);
IkReal x5081=(r11*sj5);
IkReal x5082=(cj5*r10);
IkReal x5083=(r21*sj5);
IkReal x5084=(cj5*r20);
IkReal x5085=(r01*sj5);
IkReal x5086=((1.0)*x5078);
IkReal x5087=((1.0)*x5077);
evalcond[0]=(((x5077*x5083))+(((-1.0)*x5084*x5087))+(((-1.0)*r22*x5086)));
evalcond[1]=((((-1.0)*x5083*x5086))+((x5078*x5084))+(((-1.0)*r22*x5087)));
evalcond[2]=(((x5077*x5081))+(((-1.0)*r12*x5086))+cj0+(((-1.0)*x5082*x5087)));
evalcond[3]=(((x5077*x5085))+(((-1.0)*x5079))+(((-1.0)*x5080*x5087))+(((-1.0)*r02*x5086)));
evalcond[4]=((((-1.0)*x5085*x5086))+((x5078*x5080))+(((-1.0)*r02*x5087))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x5087))+(((-1.0)*x5079))+((x5078*x5082))+(((-1.0)*x5081*x5086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5088=(cj2*sj1);
IkReal x5089=(cj1*sj2);
IkReal x5090=((2500.0)*px);
IkReal x5091=(cj5*r01);
IkReal x5092=(r00*sj5);
IkReal x5093=((1130.0)*sj1);
CheckValue<IkReal> x5094=IKPowWithIntegerCheck(((((-259.0)*x5088))+(((-259.0)*x5089))),-1);
if(!x5094.valid){
continue;
}
CheckValue<IkReal> x5095=IKPowWithIntegerCheck(((((-1.0)*x5089))+(((-1.0)*x5088))),-1);
if(!x5095.valid){
continue;
}
if( IKabs(((x5094.value)*((((x5091*x5093))+((x5089*x5090))+((x5088*x5090))+(((1401.0)*x5088*x5091))+(((1401.0)*x5088*x5092))+(((1401.0)*x5089*x5091))+(((1401.0)*x5089*x5092))+((x5092*x5093)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5095.value)*(((((-1.0)*x5091))+(((-1.0)*x5092)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5094.value)*((((x5091*x5093))+((x5089*x5090))+((x5088*x5090))+(((1401.0)*x5088*x5091))+(((1401.0)*x5088*x5092))+(((1401.0)*x5089*x5091))+(((1401.0)*x5089*x5092))+((x5092*x5093))))))+IKsqr(((x5095.value)*(((((-1.0)*x5091))+(((-1.0)*x5092))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5094.value)*((((x5091*x5093))+((x5089*x5090))+((x5088*x5090))+(((1401.0)*x5088*x5091))+(((1401.0)*x5088*x5092))+(((1401.0)*x5089*x5091))+(((1401.0)*x5089*x5092))+((x5092*x5093))))), ((x5095.value)*(((((-1.0)*x5091))+(((-1.0)*x5092))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5096=IKcos(j0);
IkReal x5097=IKsin(j0);
IkReal x5098=(r00*sj5);
IkReal x5099=(cj5*r01);
IkReal x5100=((1.0)*cj2);
IkReal x5101=(cj5*r11);
IkReal x5102=(r10*sj5);
IkReal x5103=((0.447)*cj2*sj1);
IkReal x5104=((1.0)*cj1*sj2);
IkReal x5105=(sj1*x5096);
IkReal x5106=((0.447)*cj1*sj2);
IkReal x5107=(sj1*x5097);
evalcond[0]=((((-1.0)*x5096*x5104))+(((-1.0)*x5100*x5105))+x5098+x5099);
evalcond[1]=((((-1.0)*x5097*x5104))+(((-1.0)*x5100*x5107))+x5102+x5101);
evalcond[2]=((((-1.0)*x5096*x5106))+(((-1.0)*x5096*x5103))+(((-0.1036)*x5097))+(((-0.452)*x5105))+(((-1.0)*px))+(((-0.1134)*x5099))+(((-0.1134)*x5098)));
evalcond[3]=((((-1.0)*x5097*x5106))+(((-1.0)*x5097*x5103))+(((-0.452)*x5107))+(((0.1036)*x5096))+(((-1.0)*py))+(((-0.1134)*x5102))+(((-0.1134)*x5101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5108=((1.0)*cj5);
IkReal x5109=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5108)));
j4eval[0]=x5109;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5108))))));
j4eval[2]=IKsign(x5109);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5110=((1.0)*cj5);
IkReal x5111=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5110)));
j4eval[0]=x5111;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5110)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5111);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5112=((1.0)*sj0);
IkReal x5113=((1.0)*cj0);
IkReal x5114=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5114;
j4eval[1]=((IKabs(((((-1.0)*r02*x5113))+(((-1.0)*r12*x5112)))))+(IKabs(((((-1.0)*r01*sj5*x5113))+((cj0*cj5*r00))+(((-1.0)*r11*sj5*x5112))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x5114);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5115=((-1.0)*r20);
IkReal x5117 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5117)==0){
continue;
}
IkReal x5116=pow(x5117,-0.5);
CheckValue<IkReal> x5118 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5115),IKFAST_ATAN2_MAGTHRESH);
if(!x5118.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5118.value));
IkReal gconst115=(r21*x5116);
IkReal gconst116=(x5115*x5116);
CheckValue<IkReal> x5119 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5119.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5119.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5120=((-1.0)*r20);
IkReal x5121=x5116;
CheckValue<IkReal> x5123 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5120),IKFAST_ATAN2_MAGTHRESH);
if(!x5123.valid){
continue;
}
IkReal x5122=((-1.0)*(x5123.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5122;
IkReal gconst114=x5122;
IkReal gconst115=(r21*x5121);
IkReal gconst116=(x5120*x5121);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5124=((-1.0)*r20);
IkReal x5125=x5116;
CheckValue<IkReal> x5127 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5124),IKFAST_ATAN2_MAGTHRESH);
if(!x5127.valid){
continue;
}
IkReal x5126=((-1.0)*(x5127.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5126;
IkReal gconst114=x5126;
IkReal gconst115=(r21*x5125);
IkReal gconst116=(x5124*x5125);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5128=((-1.0)*r20);
IkReal x5129=x5116;
CheckValue<IkReal> x5131 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5128),IKFAST_ATAN2_MAGTHRESH);
if(!x5131.valid){
continue;
}
IkReal x5130=((-1.0)*(x5131.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5130;
IkReal gconst114=x5130;
IkReal gconst115=(r21*x5129);
IkReal gconst116=(x5128*x5129);
IkReal x5132=r22*r22;
CheckValue<IkReal> x5135=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5132))),-1);
if(!x5135.valid){
continue;
}
IkReal x5133=x5135.value;
IkReal x5134=(((x5133*(r21*r21*r21*r21)))+((x5133*(r20*r20*r20*r20)))+x5132+(((2.0)*x5133*(r20*r20)*(r21*r21))));
j4eval[0]=x5134;
j4eval[1]=IKsign(x5134);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5136=(cj1*sj2);
IkReal x5137=((1.0)*r22);
IkReal x5138=(gconst116*r20);
IkReal x5139=(gconst115*r21);
IkReal x5140=(cj2*sj1);
CheckValue<IkReal> x5141=IKPowWithIntegerCheck(IKsign(((x5139*x5139)+(r22*r22)+(((-2.0)*x5138*x5139))+(x5138*x5138))),-1);
if(!x5141.valid){
continue;
}
CheckValue<IkReal> x5142 = IKatan2WithCheck(IkReal(((((-1.0)*x5136*x5137))+(((-1.0)*x5137*x5140)))),IkReal(((((-1.0)*x5139*x5140))+(((-1.0)*x5136*x5139))+((x5138*x5140))+((x5136*x5138)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5141.value)))+(x5142.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5143=IKsin(j4);
IkReal x5144=IKcos(j4);
IkReal x5145=(cj1*cj2);
IkReal x5146=(gconst115*r21);
IkReal x5147=(gconst116*r00);
IkReal x5148=((1.0)*sj1);
IkReal x5149=(gconst116*r20);
IkReal x5150=(gconst116*r10);
IkReal x5151=((1.0)*x5144);
IkReal x5152=((1.0)*x5143);
IkReal x5153=(gconst115*x5143);
evalcond[0]=((((-1.0)*r22*x5151))+((x5143*x5146))+(((-1.0)*x5149*x5152)));
evalcond[1]=(((r11*x5153))+cj0+(((-1.0)*r12*x5151))+(((-1.0)*x5150*x5152)));
evalcond[2]=(((r01*x5153))+(((-1.0)*sj0))+(((-1.0)*x5147*x5152))+(((-1.0)*r02*x5151)));
evalcond[3]=(((x5144*x5149))+(((-1.0)*r22*x5152))+(((-1.0)*cj1*sj2))+(((-1.0)*x5146*x5151))+(((-1.0)*cj2*x5148)));
evalcond[4]=(((x5144*x5147))+((cj0*x5145))+(((-1.0)*gconst115*r01*x5151))+(((-1.0)*cj0*sj2*x5148))+(((-1.0)*r02*x5152)));
evalcond[5]=((((-1.0)*gconst115*r11*x5151))+(((-1.0)*r12*x5152))+(((-1.0)*sj0*sj2*x5148))+((sj0*x5145))+((x5144*x5150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5154=((1.0)*gconst116);
CheckValue<IkReal> x5155=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5154)))),-1);
if(!x5155.valid){
continue;
}
CheckValue<IkReal> x5156 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5154))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5155.value)))+(x5156.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5157=IKsin(j4);
IkReal x5158=IKcos(j4);
IkReal x5159=(cj1*cj2);
IkReal x5160=(gconst115*r21);
IkReal x5161=(gconst116*r00);
IkReal x5162=((1.0)*sj1);
IkReal x5163=(gconst116*r20);
IkReal x5164=(gconst116*r10);
IkReal x5165=((1.0)*x5158);
IkReal x5166=((1.0)*x5157);
IkReal x5167=(gconst115*x5157);
evalcond[0]=((((-1.0)*r22*x5165))+(((-1.0)*x5163*x5166))+((x5157*x5160)));
evalcond[1]=(cj0+(((-1.0)*r12*x5165))+((r11*x5167))+(((-1.0)*x5164*x5166)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5167))+(((-1.0)*x5161*x5166))+(((-1.0)*r02*x5165)));
evalcond[3]=((((-1.0)*r22*x5166))+(((-1.0)*x5160*x5165))+(((-1.0)*cj1*sj2))+((x5158*x5163))+(((-1.0)*cj2*x5162)));
evalcond[4]=((((-1.0)*cj0*sj2*x5162))+(((-1.0)*gconst115*r01*x5165))+((cj0*x5159))+(((-1.0)*r02*x5166))+((x5158*x5161)));
evalcond[5]=((((-1.0)*r12*x5166))+((x5158*x5164))+(((-1.0)*sj0*sj2*x5162))+(((-1.0)*gconst115*r11*x5165))+((sj0*x5159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5168=((1.0)*gconst116);
CheckValue<IkReal> x5169 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x5168)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5169.valid){
continue;
}
CheckValue<IkReal> x5170=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x5168)))),-1);
if(!x5170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5169.value)+(((1.5707963267949)*(x5170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5171=IKsin(j4);
IkReal x5172=IKcos(j4);
IkReal x5173=(cj1*cj2);
IkReal x5174=(gconst115*r21);
IkReal x5175=(gconst116*r00);
IkReal x5176=((1.0)*sj1);
IkReal x5177=(gconst116*r20);
IkReal x5178=(gconst116*r10);
IkReal x5179=((1.0)*x5172);
IkReal x5180=((1.0)*x5171);
IkReal x5181=(gconst115*x5171);
evalcond[0]=((((-1.0)*x5177*x5180))+((x5171*x5174))+(((-1.0)*r22*x5179)));
evalcond[1]=(cj0+(((-1.0)*r12*x5179))+((r11*x5181))+(((-1.0)*x5178*x5180)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5175*x5180))+((r01*x5181))+(((-1.0)*r02*x5179)));
evalcond[3]=((((-1.0)*r22*x5180))+(((-1.0)*x5174*x5179))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x5176))+((x5172*x5177)));
evalcond[4]=((((-1.0)*gconst115*r01*x5179))+(((-1.0)*r02*x5180))+((cj0*x5173))+((x5172*x5175))+(((-1.0)*cj0*sj2*x5176)));
evalcond[5]=((((-1.0)*gconst115*r11*x5179))+(((-1.0)*sj0*sj2*x5176))+(((-1.0)*r12*x5180))+((sj0*x5173))+((x5172*x5178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5182=((-1.0)*r21);
IkReal x5184 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5184)==0){
continue;
}
IkReal x5183=pow(x5184,-0.5);
CheckValue<IkReal> x5185 = IKatan2WithCheck(IkReal(x5182),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5185.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5185.value))));
IkReal gconst118=(x5182*x5183);
IkReal gconst119=((1.0)*r20*x5183);
CheckValue<IkReal> x5186 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5186.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5186.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5187=((-1.0)*r21);
CheckValue<IkReal> x5190 = IKatan2WithCheck(IkReal(x5187),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5190.valid){
continue;
}
IkReal x5188=((1.0)*(x5190.value));
IkReal x5189=x5183;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5188)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5188)));
IkReal gconst118=(x5187*x5189);
IkReal gconst119=((1.0)*r20*x5189);
IkReal x5191=r22*r22;
IkReal x5192=((1.0)*x5191);
CheckValue<IkReal> x5196=IKPowWithIntegerCheck(((-1.0)+x5191),-1);
if(!x5196.valid){
continue;
}
IkReal x5193=x5196.value;
if((((1.0)+(((-1.0)*x5192)))) < -0.00001)
continue;
IkReal x5194=IKsqrt(((1.0)+(((-1.0)*x5192))));
IkReal x5195=(cj0*x5193*x5194);
j4eval[0]=((IKabs((x5195+(((-1.0)*x5192*x5195)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5197=((-1.0)*r21);
CheckValue<IkReal> x5200 = IKatan2WithCheck(IkReal(x5197),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5200.valid){
continue;
}
IkReal x5198=((1.0)*(x5200.value));
IkReal x5199=x5183;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5198)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5198)));
IkReal gconst118=(x5197*x5199);
IkReal gconst119=((1.0)*r20*x5199);
IkReal x5201=r22*r22;
IkReal x5202=((1.0)*x5201);
CheckValue<IkReal> x5206=IKPowWithIntegerCheck(((-1.0)+x5201),-1);
if(!x5206.valid){
continue;
}
IkReal x5203=x5206.value;
if((((1.0)+(((-1.0)*x5202)))) < -0.00001)
continue;
IkReal x5204=IKsqrt(((1.0)+(((-1.0)*x5202))));
IkReal x5205=(sj0*x5203*x5204);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5205+(((-1.0)*x5202*x5205))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5207=((-1.0)*r21);
CheckValue<IkReal> x5210 = IKatan2WithCheck(IkReal(x5207),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5210.valid){
continue;
}
IkReal x5208=((1.0)*(x5210.value));
IkReal x5209=x5183;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5208)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5208)));
IkReal gconst118=(x5207*x5209);
IkReal gconst119=((1.0)*r20*x5209);
IkReal x5211=r22*r22;
IkReal x5212=(r12*sj0);
IkReal x5213=(cj0*r02);
CheckValue<IkReal> x5217=IKPowWithIntegerCheck(((-1.0)+x5211),-1);
if(!x5217.valid){
continue;
}
IkReal x5214=x5217.value;
if((((1.0)+(((-1.0)*x5211)))) < -0.00001)
continue;
IkReal x5215=IKsqrt(((1.0)+(((-1.0)*x5211))));
IkReal x5216=(r22*x5214*x5215);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5212))+(((-1.0)*x5213)))))+(IKabs((((x5212*x5216))+((x5213*x5216))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5218=((1.0)*sj0);
IkReal x5219=((1.0)*gconst118);
CheckValue<IkReal> x5220=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5219)))),-1);
if(!x5220.valid){
continue;
}
CheckValue<IkReal> x5221 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5218)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x5218))+(((-1.0)*cj0*r01*x5219))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5220.value)))+(x5221.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5222=IKsin(j4);
IkReal x5223=IKcos(j4);
IkReal x5224=(gconst118*r01);
IkReal x5225=(gconst119*r10);
IkReal x5226=(cj1*cj2);
IkReal x5227=(gconst119*r20);
IkReal x5228=(gconst118*r11);
IkReal x5229=((1.0)*sj1);
IkReal x5230=(gconst118*r21);
IkReal x5231=(gconst119*r00);
IkReal x5232=((1.0)*x5223);
IkReal x5233=((1.0)*x5222);
evalcond[0]=(((x5222*x5230))+(((-1.0)*r22*x5232))+(((-1.0)*x5227*x5233)));
evalcond[1]=(cj0+(((-1.0)*r12*x5232))+((x5222*x5228))+(((-1.0)*x5225*x5233)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5232))+(((-1.0)*x5231*x5233))+((x5222*x5224)));
evalcond[3]=((((-1.0)*cj2*x5229))+((x5223*x5227))+(((-1.0)*r22*x5233))+(((-1.0)*cj1*sj2))+(((-1.0)*x5230*x5232)));
evalcond[4]=((((-1.0)*r02*x5233))+((cj0*x5226))+((x5223*x5231))+(((-1.0)*cj0*sj2*x5229))+(((-1.0)*x5224*x5232)));
evalcond[5]=((((-1.0)*r12*x5233))+((x5223*x5225))+(((-1.0)*sj0*sj2*x5229))+(((-1.0)*x5228*x5232))+((sj0*x5226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5234=((1.0)*gconst119);
CheckValue<IkReal> x5235=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5234))+(((-1.0)*gconst118*r10)))),-1);
if(!x5235.valid){
continue;
}
CheckValue<IkReal> x5236 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5234))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5235.value)))+(x5236.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5237=IKsin(j4);
IkReal x5238=IKcos(j4);
IkReal x5239=(gconst118*r01);
IkReal x5240=(gconst119*r10);
IkReal x5241=(cj1*cj2);
IkReal x5242=(gconst119*r20);
IkReal x5243=(gconst118*r11);
IkReal x5244=((1.0)*sj1);
IkReal x5245=(gconst118*r21);
IkReal x5246=(gconst119*r00);
IkReal x5247=((1.0)*x5238);
IkReal x5248=((1.0)*x5237);
evalcond[0]=(((x5237*x5245))+(((-1.0)*x5242*x5248))+(((-1.0)*r22*x5247)));
evalcond[1]=(((x5237*x5243))+(((-1.0)*r12*x5247))+cj0+(((-1.0)*x5240*x5248)));
evalcond[2]=((((-1.0)*sj0))+((x5237*x5239))+(((-1.0)*r02*x5247))+(((-1.0)*x5246*x5248)));
evalcond[3]=(((x5238*x5242))+(((-1.0)*r22*x5248))+(((-1.0)*cj1*sj2))+(((-1.0)*x5245*x5247))+(((-1.0)*cj2*x5244)));
evalcond[4]=(((cj0*x5241))+((x5238*x5246))+(((-1.0)*r02*x5248))+(((-1.0)*x5239*x5247))+(((-1.0)*cj0*sj2*x5244)));
evalcond[5]=((((-1.0)*r12*x5248))+(((-1.0)*x5243*x5247))+((x5238*x5240))+((sj0*x5241))+(((-1.0)*sj0*sj2*x5244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5249=((1.0)*gconst119);
CheckValue<IkReal> x5250 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5249)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5250.valid){
continue;
}
CheckValue<IkReal> x5251=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5249)))),-1);
if(!x5251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5250.value)+(((1.5707963267949)*(x5251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5252=IKsin(j4);
IkReal x5253=IKcos(j4);
IkReal x5254=(gconst118*r01);
IkReal x5255=(gconst119*r10);
IkReal x5256=(cj1*cj2);
IkReal x5257=(gconst119*r20);
IkReal x5258=(gconst118*r11);
IkReal x5259=((1.0)*sj1);
IkReal x5260=(gconst118*r21);
IkReal x5261=(gconst119*r00);
IkReal x5262=((1.0)*x5253);
IkReal x5263=((1.0)*x5252);
evalcond[0]=((((-1.0)*r22*x5262))+(((-1.0)*x5257*x5263))+((x5252*x5260)));
evalcond[1]=(cj0+(((-1.0)*r12*x5262))+(((-1.0)*x5255*x5263))+((x5252*x5258)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5262))+(((-1.0)*x5261*x5263))+((x5252*x5254)));
evalcond[3]=(((x5253*x5257))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x5263))+(((-1.0)*x5260*x5262))+(((-1.0)*cj2*x5259)));
evalcond[4]=((((-1.0)*r02*x5263))+(((-1.0)*x5254*x5262))+(((-1.0)*cj0*sj2*x5259))+((cj0*x5256))+((x5253*x5261)));
evalcond[5]=((((-1.0)*x5258*x5262))+((x5253*x5255))+((sj0*x5256))+(((-1.0)*r12*x5263))+(((-1.0)*sj0*sj2*x5259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5264=((-1.0)*r10);
IkReal x5266 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5266)==0){
continue;
}
IkReal x5265=pow(x5266,-0.5);
CheckValue<IkReal> x5267 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5264),IKFAST_ATAN2_MAGTHRESH);
if(!x5267.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5267.value));
IkReal gconst121=(r11*x5265);
IkReal gconst122=(x5264*x5265);
CheckValue<IkReal> x5268 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5268.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5268.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5269=((-1.0)*r10);
IkReal x5270=x5265;
CheckValue<IkReal> x5272 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5269),IKFAST_ATAN2_MAGTHRESH);
if(!x5272.valid){
continue;
}
IkReal x5271=((-1.0)*(x5272.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5271;
IkReal gconst120=x5271;
IkReal gconst121=(r11*x5270);
IkReal gconst122=(x5269*x5270);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5273=((1.0)*sj0);
IkReal x5274=((1.0)*gconst121);
CheckValue<IkReal> x5275 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5273)))),IkReal(((((-1.0)*cj0*r01*x5274))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x5273))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5275.valid){
continue;
}
CheckValue<IkReal> x5276=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5274))+(((-1.0)*gconst122*r21)))),-1);
if(!x5276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5275.value)+(((1.5707963267949)*(x5276.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5277=IKsin(j4);
IkReal x5278=IKcos(j4);
IkReal x5279=(gconst121*r01);
IkReal x5280=(cj1*cj2);
IkReal x5281=(gconst122*r00);
IkReal x5282=((1.0)*sj1);
IkReal x5283=(gconst122*r20);
IkReal x5284=(gconst122*r10);
IkReal x5285=((1.0)*x5278);
IkReal x5286=((1.0)*x5277);
IkReal x5287=(gconst121*x5277);
evalcond[0]=((((-1.0)*r22*x5285))+((r21*x5287))+(((-1.0)*x5283*x5286)));
evalcond[1]=((((-1.0)*x5284*x5286))+cj0+(((-1.0)*r12*x5285))+((r11*x5287)));
evalcond[2]=((((-1.0)*x5281*x5286))+(((-1.0)*sj0))+(((-1.0)*r02*x5285))+((x5277*x5279)));
evalcond[3]=((((-1.0)*r22*x5286))+((x5278*x5283))+(((-1.0)*cj2*x5282))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst121*r21*x5285)));
evalcond[4]=((((-1.0)*x5279*x5285))+((x5278*x5281))+(((-1.0)*cj0*sj2*x5282))+((cj0*x5280))+(((-1.0)*r02*x5286)));
evalcond[5]=(((sj0*x5280))+(((-1.0)*sj0*sj2*x5282))+((x5278*x5284))+(((-1.0)*r12*x5286))+(((-1.0)*gconst121*r11*x5285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5288=((1.0)*gconst122);
CheckValue<IkReal> x5289 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5288))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5289.valid){
continue;
}
CheckValue<IkReal> x5290=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5288))+(((-1.0)*gconst121*r00)))),-1);
if(!x5290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5289.value)+(((1.5707963267949)*(x5290.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5291=IKsin(j4);
IkReal x5292=IKcos(j4);
IkReal x5293=(gconst121*r01);
IkReal x5294=(cj1*cj2);
IkReal x5295=(gconst122*r00);
IkReal x5296=((1.0)*sj1);
IkReal x5297=(gconst122*r20);
IkReal x5298=(gconst122*r10);
IkReal x5299=((1.0)*x5292);
IkReal x5300=((1.0)*x5291);
IkReal x5301=(gconst121*x5291);
evalcond[0]=((((-1.0)*x5297*x5300))+((r21*x5301))+(((-1.0)*r22*x5299)));
evalcond[1]=(cj0+(((-1.0)*r12*x5299))+(((-1.0)*x5298*x5300))+((r11*x5301)));
evalcond[2]=((((-1.0)*sj0))+((x5291*x5293))+(((-1.0)*x5295*x5300))+(((-1.0)*r02*x5299)));
evalcond[3]=((((-1.0)*r22*x5300))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x5296))+(((-1.0)*gconst121*r21*x5299))+((x5292*x5297)));
evalcond[4]=((((-1.0)*cj0*sj2*x5296))+((cj0*x5294))+(((-1.0)*x5293*x5299))+(((-1.0)*r02*x5300))+((x5292*x5295)));
evalcond[5]=((((-1.0)*sj0*sj2*x5296))+((sj0*x5294))+(((-1.0)*r12*x5300))+(((-1.0)*gconst121*r11*x5299))+((x5292*x5298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5302=((-1.0)*r11);
IkReal x5304 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5304)==0){
continue;
}
IkReal x5303=pow(x5304,-0.5);
CheckValue<IkReal> x5305 = IKatan2WithCheck(IkReal(x5302),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5305.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5305.value))));
IkReal gconst124=(x5302*x5303);
IkReal gconst125=((1.0)*r10*x5303);
CheckValue<IkReal> x5306 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5306.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5306.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5307=((-1.0)*r11);
CheckValue<IkReal> x5310 = IKatan2WithCheck(IkReal(x5307),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5310.valid){
continue;
}
IkReal x5308=((1.0)*(x5310.value));
IkReal x5309=x5303;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5308)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5308)));
IkReal gconst124=(x5307*x5309);
IkReal gconst125=((1.0)*r10*x5309);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5311=((-1.0)*r11);
CheckValue<IkReal> x5314 = IKatan2WithCheck(IkReal(x5311),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5314.valid){
continue;
}
IkReal x5312=((1.0)*(x5314.value));
IkReal x5313=x5303;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5312)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5312)));
IkReal gconst124=(x5311*x5313);
IkReal gconst125=((1.0)*r10*x5313);
IkReal x5315=r12*r12;
IkReal x5316=((1.0)*sj0);
IkReal x5317=(cj0*r02);
IkReal x5318=x5303;
j4eval[0]=((IKabs((((r12*x5317*x5318))+((sj0*x5315*x5318))+(((-1.0)*x5316*x5318)))))+(IKabs(((((-1.0)*r12*x5316))+(((-1.0)*x5317))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5319=((-1.0)*r11);
CheckValue<IkReal> x5322 = IKatan2WithCheck(IkReal(x5319),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5322.valid){
continue;
}
IkReal x5320=((1.0)*(x5322.value));
IkReal x5321=x5303;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5320)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5320)));
IkReal gconst124=(x5319*x5321);
IkReal gconst125=((1.0)*r10*x5321);
IkReal x5323=((1.0)*r22);
IkReal x5324=(cj1*sj2);
IkReal x5325=(cj2*sj1);
IkReal x5326=x5303;
IkReal x5327=(r12*r22*x5326);
j4eval[0]=((IKabs(((((-1.0)*x5323*x5324))+(((-1.0)*x5323*x5325)))))+(IKabs((((x5325*x5327))+((x5324*x5327))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5328=(gconst124*r21);
IkReal x5329=(gconst125*r20);
IkReal x5330=(cj2*sj1);
IkReal x5331=((1.0)*cj1*sj2);
CheckValue<IkReal> x5332 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5330))+(((-1.0)*r22*x5331)))),IkReal(((((-1.0)*x5328*x5330))+(((-1.0)*x5328*x5331))+((cj1*sj2*x5329))+((x5329*x5330)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5332.valid){
continue;
}
CheckValue<IkReal> x5333=IKPowWithIntegerCheck(IKsign(((((-2.0)*x5328*x5329))+(r22*r22)+(x5329*x5329)+(x5328*x5328))),-1);
if(!x5333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5332.value)+(((1.5707963267949)*(x5333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5334=IKsin(j4);
IkReal x5335=IKcos(j4);
IkReal x5336=(cj1*cj2);
IkReal x5337=(gconst125*r20);
IkReal x5338=((1.0)*sj1);
IkReal x5339=((1.0)*x5335);
IkReal x5340=((1.0)*x5334);
IkReal x5341=(gconst124*x5334);
IkReal x5342=(gconst125*x5335);
evalcond[0]=((((-1.0)*r22*x5339))+((r21*x5341))+(((-1.0)*x5337*x5340)));
evalcond[1]=(cj0+(((-1.0)*r12*x5339))+((r11*x5341))+(((-1.0)*gconst125*r10*x5340)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5341))+(((-1.0)*r02*x5339))+(((-1.0)*gconst125*r00*x5340)));
evalcond[3]=((((-1.0)*gconst124*r21*x5339))+(((-1.0)*cj1*sj2))+((x5335*x5337))+(((-1.0)*r22*x5340))+(((-1.0)*cj2*x5338)));
evalcond[4]=((((-1.0)*r02*x5340))+((r00*x5342))+(((-1.0)*gconst124*r01*x5339))+(((-1.0)*cj0*sj2*x5338))+((cj0*x5336)));
evalcond[5]=(((r10*x5342))+(((-1.0)*gconst124*r11*x5339))+(((-1.0)*sj0*sj2*x5338))+(((-1.0)*r12*x5340))+((sj0*x5336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5343=((1.0)*sj0);
IkReal x5344=((1.0)*cj0);
CheckValue<IkReal> x5345 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5344))+(((-1.0)*r12*x5343)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x5344))+(((-1.0)*gconst124*r11*x5343))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5345.valid){
continue;
}
CheckValue<IkReal> x5346=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5345.value)+(((1.5707963267949)*(x5346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5347=IKsin(j4);
IkReal x5348=IKcos(j4);
IkReal x5349=(cj1*cj2);
IkReal x5350=(gconst125*r20);
IkReal x5351=((1.0)*sj1);
IkReal x5352=((1.0)*x5348);
IkReal x5353=((1.0)*x5347);
IkReal x5354=(gconst124*x5347);
IkReal x5355=(gconst125*x5348);
evalcond[0]=((((-1.0)*x5350*x5353))+(((-1.0)*r22*x5352))+((r21*x5354)));
evalcond[1]=(cj0+((r11*x5354))+(((-1.0)*r12*x5352))+(((-1.0)*gconst125*r10*x5353)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5352))+((r01*x5354))+(((-1.0)*gconst125*r00*x5353)));
evalcond[3]=((((-1.0)*cj2*x5351))+(((-1.0)*gconst124*r21*x5352))+(((-1.0)*cj1*sj2))+((x5348*x5350))+(((-1.0)*r22*x5353)));
evalcond[4]=((((-1.0)*r02*x5353))+((cj0*x5349))+((r00*x5355))+(((-1.0)*gconst124*r01*x5352))+(((-1.0)*cj0*sj2*x5351)));
evalcond[5]=(((sj0*x5349))+((r10*x5355))+(((-1.0)*sj0*sj2*x5351))+(((-1.0)*r12*x5353))+(((-1.0)*gconst124*r11*x5352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5356=((1.0)*gconst125);
CheckValue<IkReal> x5357=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5356)))),-1);
if(!x5357.valid){
continue;
}
CheckValue<IkReal> x5358 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5356))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5357.value)))+(x5358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5359=IKsin(j4);
IkReal x5360=IKcos(j4);
IkReal x5361=(cj1*cj2);
IkReal x5362=(gconst125*r20);
IkReal x5363=((1.0)*sj1);
IkReal x5364=((1.0)*x5360);
IkReal x5365=((1.0)*x5359);
IkReal x5366=(gconst124*x5359);
IkReal x5367=(gconst125*x5360);
evalcond[0]=((((-1.0)*r22*x5364))+((r21*x5366))+(((-1.0)*x5362*x5365)));
evalcond[1]=(cj0+(((-1.0)*gconst125*r10*x5365))+(((-1.0)*r12*x5364))+((r11*x5366)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst125*r00*x5365))+(((-1.0)*r02*x5364))+((r01*x5366)));
evalcond[3]=((((-1.0)*r22*x5365))+(((-1.0)*cj1*sj2))+((x5360*x5362))+(((-1.0)*cj2*x5363))+(((-1.0)*gconst124*r21*x5364)));
evalcond[4]=((((-1.0)*cj0*sj2*x5363))+(((-1.0)*r02*x5365))+((r00*x5367))+((cj0*x5361))+(((-1.0)*gconst124*r01*x5364)));
evalcond[5]=((((-1.0)*sj0*sj2*x5363))+((sj0*x5361))+((r10*x5367))+(((-1.0)*r12*x5365))+(((-1.0)*gconst124*r11*x5364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5368=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5368;
j4eval[1]=IKsign(x5368);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5369=((1.0)*cj5);
IkReal x5370=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5369)));
j4eval[0]=x5370;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5369)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5370);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5371=cj5*cj5;
IkReal x5372=r11*r11;
IkReal x5373=(r11*sj5);
IkReal x5374=(cj5*r10);
IkReal x5375=((r12*r12)+x5372+((x5371*(r10*r10)))+(((-2.0)*x5373*x5374))+(((-1.0)*x5371*x5372)));
j4eval[0]=x5375;
j4eval[1]=IKsign(x5375);
j4eval[2]=((IKabs((x5374+(((-1.0)*x5373)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5376=cj5*cj5;
IkReal x5377=r11*r11;
IkReal x5378=(cj5*r10);
IkReal x5379=(r11*sj5);
CheckValue<IkReal> x5380=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x5378*x5379))+x5377+((x5376*(r10*r10)))+(((-1.0)*x5376*x5377)))),-1);
if(!x5380.valid){
continue;
}
CheckValue<IkReal> x5381 = IKatan2WithCheck(IkReal((x5378+(((-1.0)*x5379)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x5381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5380.value)))+(x5381.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5382=IKsin(j4);
IkReal x5383=IKcos(j4);
IkReal x5384=(cj5*r10);
IkReal x5385=(r01*sj5);
IkReal x5386=((1.0)*sj1);
IkReal x5387=(cj5*r00);
IkReal x5388=(cj5*r20);
IkReal x5389=((1.0)*x5383);
IkReal x5390=((1.0)*x5382);
IkReal x5391=(sj5*x5382);
evalcond[0]=((((-1.0)*x5388*x5390))+((r21*x5391))+(((-1.0)*r22*x5389)));
evalcond[1]=(((x5382*x5385))+(((-1.0)*r02*x5389))+(((-1.0)*x5387*x5390)));
evalcond[2]=(((x5383*x5384))+(((-1.0)*r12*x5390))+(((-1.0)*r11*sj5*x5389)));
evalcond[3]=((1.0)+(((-1.0)*x5384*x5390))+((r11*x5391))+(((-1.0)*r12*x5389)));
evalcond[4]=(((x5383*x5387))+(((-1.0)*x5385*x5389))+(((-1.0)*r02*x5390))+((cj1*cj2))+(((-1.0)*sj2*x5386)));
evalcond[5]=(((x5383*x5388))+(((-1.0)*cj2*x5386))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x5390))+(((-1.0)*r21*sj5*x5389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5392=((1.0)*cj5);
CheckValue<IkReal> x5393=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5392)))),-1);
if(!x5393.valid){
continue;
}
CheckValue<IkReal> x5394 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5393.value)))+(x5394.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5395=IKsin(j4);
IkReal x5396=IKcos(j4);
IkReal x5397=(cj5*r10);
IkReal x5398=(r01*sj5);
IkReal x5399=((1.0)*sj1);
IkReal x5400=(cj5*r00);
IkReal x5401=(cj5*r20);
IkReal x5402=((1.0)*x5396);
IkReal x5403=((1.0)*x5395);
IkReal x5404=(sj5*x5395);
evalcond[0]=(((r21*x5404))+(((-1.0)*r22*x5402))+(((-1.0)*x5401*x5403)));
evalcond[1]=((((-1.0)*x5400*x5403))+(((-1.0)*r02*x5402))+((x5395*x5398)));
evalcond[2]=((((-1.0)*r11*sj5*x5402))+(((-1.0)*r12*x5403))+((x5396*x5397)));
evalcond[3]=((1.0)+(((-1.0)*x5397*x5403))+(((-1.0)*r12*x5402))+((r11*x5404)));
evalcond[4]=((((-1.0)*x5398*x5402))+(((-1.0)*r02*x5403))+((cj1*cj2))+(((-1.0)*sj2*x5399))+((x5396*x5400)));
evalcond[5]=((((-1.0)*r21*sj5*x5402))+(((-1.0)*cj2*x5399))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x5403))+((x5396*x5401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5405=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5405.valid){
continue;
}
CheckValue<IkReal> x5406 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5405.value)))+(x5406.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5407=IKsin(j4);
IkReal x5408=IKcos(j4);
IkReal x5409=(cj5*r10);
IkReal x5410=(r01*sj5);
IkReal x5411=((1.0)*sj1);
IkReal x5412=(cj5*r00);
IkReal x5413=(cj5*r20);
IkReal x5414=((1.0)*x5408);
IkReal x5415=((1.0)*x5407);
IkReal x5416=(sj5*x5407);
evalcond[0]=((((-1.0)*r22*x5414))+((r21*x5416))+(((-1.0)*x5413*x5415)));
evalcond[1]=((((-1.0)*x5412*x5415))+(((-1.0)*r02*x5414))+((x5407*x5410)));
evalcond[2]=(((x5408*x5409))+(((-1.0)*r11*sj5*x5414))+(((-1.0)*r12*x5415)));
evalcond[3]=((1.0)+((r11*x5416))+(((-1.0)*r12*x5414))+(((-1.0)*x5409*x5415)));
evalcond[4]=((((-1.0)*r02*x5415))+((x5408*x5412))+(((-1.0)*sj2*x5411))+(((-1.0)*x5410*x5414))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r21*sj5*x5414))+((x5408*x5413))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x5415))+(((-1.0)*cj2*x5411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5417=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5417;
j4eval[1]=IKsign(x5417);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5418=((1.0)*cj5);
IkReal x5419=((((-1.0)*r21*x5418))+(((-1.0)*r20*sj5)));
j4eval[0]=x5419;
j4eval[1]=((IKabs(((((-1.0)*r00*x5418))+((r01*sj5)))))+(IKabs(r02)));
j4eval[2]=IKsign(x5419);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5420=cj5*cj5;
IkReal x5421=r11*r11;
IkReal x5422=(cj5*r10);
IkReal x5423=(r11*sj5);
IkReal x5424=((((2.0)*x5422*x5423))+((x5420*x5421))+(((-1.0)*x5420*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x5421)));
j4eval[0]=x5424;
j4eval[1]=((IKabs(r12))+(IKabs((x5422+(((-1.0)*x5423))))));
j4eval[2]=IKsign(x5424);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5425=cj5*cj5;
IkReal x5426=r11*r11;
IkReal x5427=(cj5*r10);
IkReal x5428=(r11*sj5);
CheckValue<IkReal> x5429=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5425*(r10*r10)))+(((2.0)*x5427*x5428))+(((-1.0)*(r12*r12)))+((x5425*x5426))+(((-1.0)*x5426)))),-1);
if(!x5429.valid){
continue;
}
CheckValue<IkReal> x5430 = IKatan2WithCheck(IkReal((x5427+(((-1.0)*x5428)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x5430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5429.value)))+(x5430.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5431=IKsin(j4);
IkReal x5432=IKcos(j4);
IkReal x5433=(cj5*r10);
IkReal x5434=(r01*sj5);
IkReal x5435=((1.0)*cj2);
IkReal x5436=(cj5*r00);
IkReal x5437=(cj5*r20);
IkReal x5438=((1.0)*x5432);
IkReal x5439=((1.0)*x5431);
IkReal x5440=(sj5*x5431);
evalcond[0]=((((-1.0)*x5437*x5439))+(((-1.0)*r22*x5438))+((r21*x5440)));
evalcond[1]=((((-1.0)*r02*x5438))+(((-1.0)*x5436*x5439))+((x5431*x5434)));
evalcond[2]=((((-1.0)*r11*sj5*x5438))+(((-1.0)*r12*x5439))+((x5432*x5433)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5438))+(((-1.0)*x5433*x5439))+((r11*x5440)));
evalcond[4]=((((-1.0)*r02*x5439))+(((-1.0)*cj1*x5435))+((sj1*sj2))+(((-1.0)*x5434*x5438))+((x5432*x5436)));
evalcond[5]=((((-1.0)*sj1*x5435))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x5439))+((x5432*x5437))+(((-1.0)*r21*sj5*x5438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5441=((1.0)*cj5);
CheckValue<IkReal> x5442 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5442.valid){
continue;
}
CheckValue<IkReal> x5443=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5441))+(((-1.0)*r20*sj5)))),-1);
if(!x5443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5442.value)+(((1.5707963267949)*(x5443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5444=IKsin(j4);
IkReal x5445=IKcos(j4);
IkReal x5446=(cj5*r10);
IkReal x5447=(r01*sj5);
IkReal x5448=((1.0)*cj2);
IkReal x5449=(cj5*r00);
IkReal x5450=(cj5*r20);
IkReal x5451=((1.0)*x5445);
IkReal x5452=((1.0)*x5444);
IkReal x5453=(sj5*x5444);
evalcond[0]=((((-1.0)*x5450*x5452))+((r21*x5453))+(((-1.0)*r22*x5451)));
evalcond[1]=(((x5444*x5447))+(((-1.0)*r02*x5451))+(((-1.0)*x5449*x5452)));
evalcond[2]=((((-1.0)*r12*x5452))+((x5445*x5446))+(((-1.0)*r11*sj5*x5451)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5451))+((r11*x5453))+(((-1.0)*x5446*x5452)));
evalcond[4]=((((-1.0)*cj1*x5448))+((sj1*sj2))+((x5445*x5449))+(((-1.0)*r02*x5452))+(((-1.0)*x5447*x5451)));
evalcond[5]=((((-1.0)*r21*sj5*x5451))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x5448))+(((-1.0)*r22*x5452))+((x5445*x5450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5454 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5454.valid){
continue;
}
CheckValue<IkReal> x5455=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5454.value)+(((1.5707963267949)*(x5455.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5456=IKsin(j4);
IkReal x5457=IKcos(j4);
IkReal x5458=(cj5*r10);
IkReal x5459=(r01*sj5);
IkReal x5460=((1.0)*cj2);
IkReal x5461=(cj5*r00);
IkReal x5462=(cj5*r20);
IkReal x5463=((1.0)*x5457);
IkReal x5464=((1.0)*x5456);
IkReal x5465=(sj5*x5456);
evalcond[0]=(((r21*x5465))+(((-1.0)*x5462*x5464))+(((-1.0)*r22*x5463)));
evalcond[1]=(((x5456*x5459))+(((-1.0)*r02*x5463))+(((-1.0)*x5461*x5464)));
evalcond[2]=((((-1.0)*r12*x5464))+(((-1.0)*r11*sj5*x5463))+((x5457*x5458)));
evalcond[3]=((-1.0)+((r11*x5465))+(((-1.0)*x5458*x5464))+(((-1.0)*r12*x5463)));
evalcond[4]=((((-1.0)*x5459*x5463))+(((-1.0)*cj1*x5460))+(((-1.0)*r02*x5464))+((sj1*sj2))+((x5457*x5461)));
evalcond[5]=((((-1.0)*sj1*x5460))+(((-1.0)*r21*sj5*x5463))+(((-1.0)*cj1*sj2))+((x5457*x5462))+(((-1.0)*r22*x5464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5466=((-1.0)*r00);
IkReal x5468 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5468)==0){
continue;
}
IkReal x5467=pow(x5468,-0.5);
CheckValue<IkReal> x5469 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5466),IKFAST_ATAN2_MAGTHRESH);
if(!x5469.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5469.value));
IkReal gconst127=(r01*x5467);
IkReal gconst128=(x5466*x5467);
CheckValue<IkReal> x5470 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5470.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5470.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5471=((-1.0)*r00);
IkReal x5472=x5467;
CheckValue<IkReal> x5474 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5471),IKFAST_ATAN2_MAGTHRESH);
if(!x5474.valid){
continue;
}
IkReal x5473=((-1.0)*(x5474.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5473;
IkReal gconst126=x5473;
IkReal gconst127=(r01*x5472);
IkReal gconst128=(x5471*x5472);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5475=((1.0)*sj0);
IkReal x5476=((1.0)*gconst127);
CheckValue<IkReal> x5477=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5476)))),-1);
if(!x5477.valid){
continue;
}
CheckValue<IkReal> x5478 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5475))+(((-1.0)*cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x5476))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5477.value)))+(x5478.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5479=IKsin(j4);
IkReal x5480=IKcos(j4);
IkReal x5481=(cj1*cj2);
IkReal x5482=(gconst127*r01);
IkReal x5483=(gconst128*r10);
IkReal x5484=((1.0)*sj1);
IkReal x5485=(gconst128*r00);
IkReal x5486=(gconst127*r21);
IkReal x5487=(gconst128*r20);
IkReal x5488=(gconst127*r11);
IkReal x5489=((1.0)*x5480);
IkReal x5490=((1.0)*x5479);
evalcond[0]=((((-1.0)*r22*x5489))+(((-1.0)*x5487*x5490))+((x5479*x5486)));
evalcond[1]=((((-1.0)*r12*x5489))+cj0+((x5479*x5488))+(((-1.0)*x5483*x5490)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5485*x5490))+((x5479*x5482))+(((-1.0)*r02*x5489)));
evalcond[3]=(((x5480*x5487))+(((-1.0)*x5486*x5489))+(((-1.0)*r22*x5490))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x5484)));
evalcond[4]=(((x5480*x5485))+((cj0*x5481))+(((-1.0)*cj0*sj2*x5484))+(((-1.0)*r02*x5490))+(((-1.0)*x5482*x5489)));
evalcond[5]=(((x5480*x5483))+(((-1.0)*sj0*sj2*x5484))+(((-1.0)*r12*x5490))+(((-1.0)*x5488*x5489))+((sj0*x5481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5491=((1.0)*gconst128);
CheckValue<IkReal> x5492 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5491)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5492.valid){
continue;
}
CheckValue<IkReal> x5493=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5491))+(((-1.0)*gconst127*r10)))),-1);
if(!x5493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5492.value)+(((1.5707963267949)*(x5493.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5494=IKsin(j4);
IkReal x5495=IKcos(j4);
IkReal x5496=(cj1*cj2);
IkReal x5497=(gconst127*r01);
IkReal x5498=(gconst128*r10);
IkReal x5499=((1.0)*sj1);
IkReal x5500=(gconst128*r00);
IkReal x5501=(gconst127*r21);
IkReal x5502=(gconst128*r20);
IkReal x5503=(gconst127*r11);
IkReal x5504=((1.0)*x5495);
IkReal x5505=((1.0)*x5494);
evalcond[0]=(((x5494*x5501))+(((-1.0)*x5502*x5505))+(((-1.0)*r22*x5504)));
evalcond[1]=(((x5494*x5503))+cj0+(((-1.0)*x5498*x5505))+(((-1.0)*r12*x5504)));
evalcond[2]=((((-1.0)*sj0))+((x5494*x5497))+(((-1.0)*x5500*x5505))+(((-1.0)*r02*x5504)));
evalcond[3]=((((-1.0)*r22*x5505))+((x5495*x5502))+(((-1.0)*x5501*x5504))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x5499)));
evalcond[4]=(((cj0*x5496))+(((-1.0)*cj0*sj2*x5499))+((x5495*x5500))+(((-1.0)*x5497*x5504))+(((-1.0)*r02*x5505)));
evalcond[5]=(((x5495*x5498))+(((-1.0)*x5503*x5504))+(((-1.0)*sj0*sj2*x5499))+(((-1.0)*r12*x5505))+((sj0*x5496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5506=((-1.0)*r01);
IkReal x5508 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5508)==0){
continue;
}
IkReal x5507=pow(x5508,-0.5);
CheckValue<IkReal> x5509 = IKatan2WithCheck(IkReal(x5506),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5509.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5509.value))));
IkReal gconst130=(x5506*x5507);
IkReal gconst131=((1.0)*r00*x5507);
CheckValue<IkReal> x5510 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5510.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5510.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5511=((-1.0)*r01);
CheckValue<IkReal> x5514 = IKatan2WithCheck(IkReal(x5511),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5514.valid){
continue;
}
IkReal x5512=((1.0)*(x5514.value));
IkReal x5513=x5507;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5512)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5512)));
IkReal gconst130=(x5511*x5513);
IkReal gconst131=((1.0)*r00*x5513);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5515=((-1.0)*r01);
CheckValue<IkReal> x5518 = IKatan2WithCheck(IkReal(x5515),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5518.valid){
continue;
}
IkReal x5516=((1.0)*(x5518.value));
IkReal x5517=x5507;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5516)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5516)));
IkReal gconst130=(x5515*x5517);
IkReal gconst131=((1.0)*r00*x5517);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5519=((-1.0)*r01);
CheckValue<IkReal> x5522 = IKatan2WithCheck(IkReal(x5519),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5522.valid){
continue;
}
IkReal x5520=((1.0)*(x5522.value));
IkReal x5521=x5507;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5520)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5520)));
IkReal gconst130=(x5519*x5521);
IkReal gconst131=((1.0)*r00*x5521);
IkReal x5523=r02*r02;
IkReal x5524=(r12*sj0);
IkReal x5525=((1.0)*cj0);
IkReal x5526=x5507;
j4eval[0]=((IKabs(((((-1.0)*r02*x5525))+(((-1.0)*x5524)))))+(IKabs((((cj0*x5523*x5526))+((r02*x5524*x5526))+(((-1.0)*x5525*x5526))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5527=((1.0)*sj0);
IkReal x5528=((1.0)*gconst130);
CheckValue<IkReal> x5529 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5527)))),IkReal(((((-1.0)*cj0*r01*x5528))+(((-1.0)*gconst130*r11*x5527))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5529.valid){
continue;
}
CheckValue<IkReal> x5530=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5528))+(((-1.0)*gconst131*r21)))),-1);
if(!x5530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5529.value)+(((1.5707963267949)*(x5530.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5531=IKsin(j4);
IkReal x5532=IKcos(j4);
IkReal x5533=(cj1*cj2);
IkReal x5534=(gconst130*r11);
IkReal x5535=(gconst130*r01);
IkReal x5536=((1.0)*sj1);
IkReal x5537=(gconst130*r21);
IkReal x5538=((1.0)*x5532);
IkReal x5539=(gconst131*x5532);
IkReal x5540=((1.0)*x5531);
IkReal x5541=(gconst131*x5540);
evalcond[0]=((((-1.0)*r22*x5538))+((x5531*x5537))+(((-1.0)*r20*x5541)));
evalcond[1]=(cj0+((x5531*x5534))+(((-1.0)*r10*x5541))+(((-1.0)*r12*x5538)));
evalcond[2]=((((-1.0)*r00*x5541))+(((-1.0)*r02*x5538))+(((-1.0)*sj0))+((x5531*x5535)));
evalcond[3]=((((-1.0)*x5537*x5538))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x5536))+((r20*x5539))+(((-1.0)*r22*x5540)));
evalcond[4]=((((-1.0)*x5535*x5538))+(((-1.0)*cj0*sj2*x5536))+((r00*x5539))+(((-1.0)*r02*x5540))+((cj0*x5533)));
evalcond[5]=((((-1.0)*x5534*x5538))+(((-1.0)*r12*x5540))+((sj0*x5533))+((r10*x5539))+(((-1.0)*sj0*sj2*x5536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5542=((1.0)*gconst131);
CheckValue<IkReal> x5543 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x5542)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5543.valid){
continue;
}
CheckValue<IkReal> x5544=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5542))+(((-1.0)*gconst130*r10)))),-1);
if(!x5544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5543.value)+(((1.5707963267949)*(x5544.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5545=IKsin(j4);
IkReal x5546=IKcos(j4);
IkReal x5547=(cj1*cj2);
IkReal x5548=(gconst130*r11);
IkReal x5549=(gconst130*r01);
IkReal x5550=((1.0)*sj1);
IkReal x5551=(gconst130*r21);
IkReal x5552=((1.0)*x5546);
IkReal x5553=(gconst131*x5546);
IkReal x5554=((1.0)*x5545);
IkReal x5555=(gconst131*x5554);
evalcond[0]=((((-1.0)*r20*x5555))+((x5545*x5551))+(((-1.0)*r22*x5552)));
evalcond[1]=(cj0+(((-1.0)*r12*x5552))+((x5545*x5548))+(((-1.0)*r10*x5555)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5555))+(((-1.0)*r02*x5552))+((x5545*x5549)));
evalcond[3]=((((-1.0)*x5551*x5552))+(((-1.0)*cj2*x5550))+((r20*x5553))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x5554)));
evalcond[4]=(((r00*x5553))+(((-1.0)*cj0*sj2*x5550))+((cj0*x5547))+(((-1.0)*x5549*x5552))+(((-1.0)*r02*x5554)));
evalcond[5]=(((sj0*x5547))+(((-1.0)*r12*x5554))+(((-1.0)*x5548*x5552))+(((-1.0)*sj0*sj2*x5550))+((r10*x5553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5556=((1.0)*gconst131);
CheckValue<IkReal> x5557 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x5556)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5557.valid){
continue;
}
CheckValue<IkReal> x5558=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5556))+(((-1.0)*gconst130*r00)))),-1);
if(!x5558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5557.value)+(((1.5707963267949)*(x5558.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5559=IKsin(j4);
IkReal x5560=IKcos(j4);
IkReal x5561=(cj1*cj2);
IkReal x5562=(gconst130*r11);
IkReal x5563=(gconst130*r01);
IkReal x5564=((1.0)*sj1);
IkReal x5565=(gconst130*r21);
IkReal x5566=((1.0)*x5560);
IkReal x5567=(gconst131*x5560);
IkReal x5568=((1.0)*x5559);
IkReal x5569=(gconst131*x5568);
evalcond[0]=((((-1.0)*r22*x5566))+(((-1.0)*r20*x5569))+((x5559*x5565)));
evalcond[1]=((((-1.0)*r12*x5566))+cj0+(((-1.0)*r10*x5569))+((x5559*x5562)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5569))+(((-1.0)*r02*x5566))+((x5559*x5563)));
evalcond[3]=((((-1.0)*r22*x5568))+((r20*x5567))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x5564))+(((-1.0)*x5565*x5566)));
evalcond[4]=(((cj0*x5561))+(((-1.0)*x5563*x5566))+(((-1.0)*r02*x5568))+(((-1.0)*cj0*sj2*x5564))+((r00*x5567)));
evalcond[5]=((((-1.0)*sj0*sj2*x5564))+(((-1.0)*r12*x5568))+((r10*x5567))+(((-1.0)*x5562*x5566))+((sj0*x5561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5570=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5570;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5570);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5571=((1.0)*cj5);
IkReal x5572=((((-1.0)*r11*x5571))+(((-1.0)*r10*sj5)));
j4eval[0]=x5572;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x5571))))));
j4eval[2]=IKsign(x5572);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5573=cj5*cj5;
IkReal x5574=r01*r01;
IkReal x5575=(r01*sj5);
IkReal x5576=(cj5*r00);
IkReal x5577=((((2.0)*x5575*x5576))+(((-1.0)*(r02*r02)))+(((-1.0)*x5573*(r00*r00)))+((x5573*x5574))+(((-1.0)*x5574)));
j4eval[0]=x5577;
j4eval[1]=IKsign(x5577);
j4eval[2]=((IKabs(r02))+(IKabs((x5576+(((-1.0)*x5575))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5578=cj5*cj5;
IkReal x5579=r01*r01;
IkReal x5580=(r01*sj5);
IkReal x5581=(cj5*r00);
CheckValue<IkReal> x5582 = IKatan2WithCheck(IkReal((x5581+(((-1.0)*x5580)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5582.valid){
continue;
}
CheckValue<IkReal> x5583=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5578*(r00*r00)))+(((-1.0)*(r02*r02)))+((x5578*x5579))+(((2.0)*x5580*x5581))+(((-1.0)*x5579)))),-1);
if(!x5583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5582.value)+(((1.5707963267949)*(x5583.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5584=IKsin(j4);
IkReal x5585=IKcos(j4);
IkReal x5586=(cj5*r10);
IkReal x5587=(r01*sj5);
IkReal x5588=((1.0)*sj1);
IkReal x5589=(cj5*r00);
IkReal x5590=(cj5*r20);
IkReal x5591=((1.0)*x5585);
IkReal x5592=((1.0)*x5584);
IkReal x5593=(sj5*x5584);
evalcond[0]=(((r21*x5593))+(((-1.0)*x5590*x5592))+(((-1.0)*r22*x5591)));
evalcond[1]=((((-1.0)*x5586*x5592))+(((-1.0)*r12*x5591))+((r11*x5593)));
evalcond[2]=((((-1.0)*r02*x5592))+((x5585*x5589))+(((-1.0)*x5587*x5591)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5591))+((x5584*x5587))+(((-1.0)*x5589*x5592)));
evalcond[4]=((((-1.0)*r12*x5592))+((x5585*x5586))+(((-1.0)*r11*sj5*x5591))+((cj1*cj2))+(((-1.0)*sj2*x5588)));
evalcond[5]=((((-1.0)*r21*sj5*x5591))+(((-1.0)*cj1*sj2))+((x5585*x5590))+(((-1.0)*r22*x5592))+(((-1.0)*cj2*x5588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5594=((1.0)*cj5);
CheckValue<IkReal> x5595 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5594)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5595.valid){
continue;
}
CheckValue<IkReal> x5596=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5594))+(((-1.0)*r10*sj5)))),-1);
if(!x5596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5595.value)+(((1.5707963267949)*(x5596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5597=IKsin(j4);
IkReal x5598=IKcos(j4);
IkReal x5599=(cj5*r10);
IkReal x5600=(r01*sj5);
IkReal x5601=((1.0)*sj1);
IkReal x5602=(cj5*r00);
IkReal x5603=(cj5*r20);
IkReal x5604=((1.0)*x5598);
IkReal x5605=((1.0)*x5597);
IkReal x5606=(sj5*x5597);
evalcond[0]=((((-1.0)*r22*x5604))+(((-1.0)*x5603*x5605))+((r21*x5606)));
evalcond[1]=((((-1.0)*x5599*x5605))+(((-1.0)*r12*x5604))+((r11*x5606)));
evalcond[2]=((((-1.0)*r02*x5605))+(((-1.0)*x5600*x5604))+((x5598*x5602)));
evalcond[3]=((-1.0)+(((-1.0)*x5602*x5605))+(((-1.0)*r02*x5604))+((x5597*x5600)));
evalcond[4]=((((-1.0)*r12*x5605))+(((-1.0)*sj2*x5601))+((x5598*x5599))+((cj1*cj2))+(((-1.0)*r11*sj5*x5604)));
evalcond[5]=((((-1.0)*r22*x5605))+(((-1.0)*r21*sj5*x5604))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x5601))+((x5598*x5603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5607=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5607.valid){
continue;
}
CheckValue<IkReal> x5608 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5607.value)))+(x5608.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5609=IKsin(j4);
IkReal x5610=IKcos(j4);
IkReal x5611=(cj5*r10);
IkReal x5612=(r01*sj5);
IkReal x5613=((1.0)*sj1);
IkReal x5614=(cj5*r00);
IkReal x5615=(cj5*r20);
IkReal x5616=((1.0)*x5610);
IkReal x5617=((1.0)*x5609);
IkReal x5618=(sj5*x5609);
evalcond[0]=((((-1.0)*r22*x5616))+((r21*x5618))+(((-1.0)*x5615*x5617)));
evalcond[1]=((((-1.0)*r12*x5616))+((r11*x5618))+(((-1.0)*x5611*x5617)));
evalcond[2]=((((-1.0)*x5612*x5616))+((x5610*x5614))+(((-1.0)*r02*x5617)));
evalcond[3]=((-1.0)+((x5609*x5612))+(((-1.0)*r02*x5616))+(((-1.0)*x5614*x5617)));
evalcond[4]=(((x5610*x5611))+(((-1.0)*r12*x5617))+(((-1.0)*sj2*x5613))+((cj1*cj2))+(((-1.0)*r11*sj5*x5616)));
evalcond[5]=((((-1.0)*r22*x5617))+(((-1.0)*r21*sj5*x5616))+(((-1.0)*cj1*sj2))+((x5610*x5615))+(((-1.0)*cj2*x5613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5619=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5619;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5619);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5620=((1.0)*cj5);
IkReal x5621=((((-1.0)*r21*x5620))+(((-1.0)*r20*sj5)));
j4eval[0]=x5621;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5620))+((r11*sj5))))));
j4eval[2]=IKsign(x5621);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5622=cj5*cj5;
IkReal x5623=r01*r01;
IkReal x5624=(cj5*r00);
IkReal x5625=(r01*sj5);
IkReal x5626=(x5623+(((-1.0)*x5622*x5623))+(((-2.0)*x5624*x5625))+((x5622*(r00*r00)))+(r02*r02));
j4eval[0]=x5626;
j4eval[1]=((IKabs(r02))+(IKabs((x5624+(((-1.0)*x5625))))));
j4eval[2]=IKsign(x5626);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5627=cj5*cj5;
IkReal x5628=r01*r01;
IkReal x5629=(r01*sj5);
IkReal x5630=(cj5*r00);
CheckValue<IkReal> x5631=IKPowWithIntegerCheck(IKsign((x5628+(((-2.0)*x5629*x5630))+((x5627*(r00*r00)))+(r02*r02)+(((-1.0)*x5627*x5628)))),-1);
if(!x5631.valid){
continue;
}
CheckValue<IkReal> x5632 = IKatan2WithCheck(IkReal((x5630+(((-1.0)*x5629)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5631.value)))+(x5632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5633=IKsin(j4);
IkReal x5634=IKcos(j4);
IkReal x5635=(cj5*r10);
IkReal x5636=(r01*sj5);
IkReal x5637=((1.0)*cj2);
IkReal x5638=(cj5*r00);
IkReal x5639=(cj5*r20);
IkReal x5640=((1.0)*x5634);
IkReal x5641=((1.0)*x5633);
IkReal x5642=(sj5*x5633);
evalcond[0]=((((-1.0)*r22*x5640))+((r21*x5642))+(((-1.0)*x5639*x5641)));
evalcond[1]=((((-1.0)*r12*x5640))+((r11*x5642))+(((-1.0)*x5635*x5641)));
evalcond[2]=((((-1.0)*r02*x5641))+(((-1.0)*x5636*x5640))+((x5634*x5638)));
evalcond[3]=((1.0)+(((-1.0)*x5638*x5641))+(((-1.0)*r02*x5640))+((x5633*x5636)));
evalcond[4]=((((-1.0)*r12*x5641))+(((-1.0)*cj1*x5637))+((sj1*sj2))+(((-1.0)*r11*sj5*x5640))+((x5634*x5635)));
evalcond[5]=((((-1.0)*r21*sj5*x5640))+(((-1.0)*r22*x5641))+(((-1.0)*cj1*sj2))+((x5634*x5639))+(((-1.0)*sj1*x5637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5643=((1.0)*cj5);
CheckValue<IkReal> x5644=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5643))+(((-1.0)*r20*sj5)))),-1);
if(!x5644.valid){
continue;
}
CheckValue<IkReal> x5645 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x5643))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5644.value)))+(x5645.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5646=IKsin(j4);
IkReal x5647=IKcos(j4);
IkReal x5648=(cj5*r10);
IkReal x5649=(r01*sj5);
IkReal x5650=((1.0)*cj2);
IkReal x5651=(cj5*r00);
IkReal x5652=(cj5*r20);
IkReal x5653=((1.0)*x5647);
IkReal x5654=((1.0)*x5646);
IkReal x5655=(sj5*x5646);
evalcond[0]=((((-1.0)*x5652*x5654))+(((-1.0)*r22*x5653))+((r21*x5655)));
evalcond[1]=((((-1.0)*r12*x5653))+(((-1.0)*x5648*x5654))+((r11*x5655)));
evalcond[2]=(((x5647*x5651))+(((-1.0)*x5649*x5653))+(((-1.0)*r02*x5654)));
evalcond[3]=((1.0)+(((-1.0)*x5651*x5654))+(((-1.0)*r02*x5653))+((x5646*x5649)));
evalcond[4]=((((-1.0)*cj1*x5650))+(((-1.0)*r12*x5654))+((x5647*x5648))+((sj1*sj2))+(((-1.0)*r11*sj5*x5653)));
evalcond[5]=((((-1.0)*r21*sj5*x5653))+(((-1.0)*r22*x5654))+((x5647*x5652))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x5650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5656 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5656.valid){
continue;
}
CheckValue<IkReal> x5657=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5656.value)+(((1.5707963267949)*(x5657.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5658=IKsin(j4);
IkReal x5659=IKcos(j4);
IkReal x5660=(cj5*r10);
IkReal x5661=(r01*sj5);
IkReal x5662=((1.0)*cj2);
IkReal x5663=(cj5*r00);
IkReal x5664=(cj5*r20);
IkReal x5665=((1.0)*x5659);
IkReal x5666=((1.0)*x5658);
IkReal x5667=(sj5*x5658);
evalcond[0]=((((-1.0)*r22*x5665))+(((-1.0)*x5664*x5666))+((r21*x5667)));
evalcond[1]=(((r11*x5667))+(((-1.0)*x5660*x5666))+(((-1.0)*r12*x5665)));
evalcond[2]=(((x5659*x5663))+(((-1.0)*r02*x5666))+(((-1.0)*x5661*x5665)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5665))+(((-1.0)*x5663*x5666))+((x5658*x5661)));
evalcond[4]=((((-1.0)*cj1*x5662))+((x5659*x5660))+((sj1*sj2))+(((-1.0)*r11*sj5*x5665))+(((-1.0)*r12*x5666)));
evalcond[5]=(((x5659*x5664))+(((-1.0)*sj1*x5662))+(((-1.0)*r22*x5666))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x5665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5668=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5668);
rxp1_1=(px*r21);
rxp1_2=(r11*x5668);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5669=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5669);
rxp1_1=(px*r21);
rxp1_2=(r11*x5669);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5670=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5670);
rxp1_1=(px*r21);
rxp1_2=(r11*x5670);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5673=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x5673.valid){
continue;
}
IkReal x5671=x5673.value;
IkReal x5672=(sj0*x5671);
cj4array[0]=(((sj1*sj2*x5672))+(((-1.0)*cj1*cj2*x5672)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5674=IKsin(j4);
IkReal x5675=IKcos(j4);
IkReal x5676=(r21*sj5);
IkReal x5677=(cj5*r20);
IkReal x5678=((1.0)*x5674);
IkReal x5679=((1.0)*x5675);
evalcond[0]=((-1.0)*r02*x5674);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x5679)));
evalcond[2]=((((-1.0)*x5677*x5678))+((x5674*x5676)));
evalcond[3]=(((r11*sj5*x5674))+(((-1.0)*cj5*r10*x5678)));
evalcond[4]=((((-1.0)*cj2*sj1))+((x5675*x5677))+(((-1.0)*cj1*sj2))+(((-1.0)*x5676*x5679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5681=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x5681.valid){
continue;
}
IkReal x5680=x5681.value;
cj4array[0]=(((cj1*sj2*x5680))+((cj2*sj1*x5680)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5682=IKsin(j4);
IkReal x5683=IKcos(j4);
IkReal x5684=(r11*sj5);
IkReal x5685=((1.0)*sj0);
IkReal x5686=((1.0)*x5683);
IkReal x5687=((1.0)*cj5*x5682);
evalcond[0]=((-1.0)*r02*x5682);
evalcond[1]=((((-1.0)*r02*x5686))+(((-1.0)*x5685)));
evalcond[2]=(((r21*sj5*x5682))+(((-1.0)*r20*x5687)));
evalcond[3]=((((-1.0)*r10*x5687))+((x5682*x5684)));
evalcond[4]=(((cj5*r10*x5683))+(((-1.0)*sj1*sj2*x5685))+((cj1*cj2*sj0))+(((-1.0)*x5684*x5686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5688=IKPowWithIntegerCheck(r02,-1);
if(!x5688.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x5688.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5689=IKsin(j4);
IkReal x5690=IKcos(j4);
IkReal x5691=((1.0)*sj1);
IkReal x5692=(cj5*x5690);
IkReal x5693=(sj5*x5689);
IkReal x5694=((1.0)*sj5*x5690);
IkReal x5695=((1.0)*cj5*x5689);
evalcond[0]=((-1.0)*r02*x5689);
evalcond[1]=(((r21*x5693))+(((-1.0)*r20*x5695)));
evalcond[2]=((((-1.0)*r10*x5695))+((r11*x5693)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r20*x5692))+(((-1.0)*cj2*x5691))+(((-1.0)*r21*x5694)));
evalcond[4]=((((-1.0)*sj0*sj2*x5691))+((cj1*cj2*sj0))+((r10*x5692))+(((-1.0)*r11*x5694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5696=((1.0)*sj0);
IkReal x5697=((1.0)*cj0);
CheckValue<IkReal> x5698 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5697))+(((-1.0)*r12*x5696)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x5697))+(((-1.0)*r11*sj5*x5696)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5698.valid){
continue;
}
CheckValue<IkReal> x5699=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x5699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5698.value)+(((1.5707963267949)*(x5699.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5700=IKsin(j4);
IkReal x5701=IKcos(j4);
IkReal x5702=(cj1*cj2);
IkReal x5703=(cj5*r10);
IkReal x5704=(r01*sj5);
IkReal x5705=(cj5*r00);
IkReal x5706=((1.0)*sj1);
IkReal x5707=(cj5*r20);
IkReal x5708=((1.0)*x5701);
IkReal x5709=((1.0)*x5700);
IkReal x5710=(sj5*x5700);
evalcond[0]=((((-1.0)*r22*x5708))+(((-1.0)*x5707*x5709))+((r21*x5710)));
evalcond[1]=((((-1.0)*r12*x5708))+cj0+((r11*x5710))+(((-1.0)*x5703*x5709)));
evalcond[2]=((((-1.0)*sj0))+((x5700*x5704))+(((-1.0)*r02*x5708))+(((-1.0)*x5705*x5709)));
evalcond[3]=((((-1.0)*r22*x5709))+((x5701*x5707))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x5708))+(((-1.0)*cj2*x5706)));
evalcond[4]=(((x5701*x5705))+(((-1.0)*cj0*sj2*x5706))+(((-1.0)*x5704*x5708))+(((-1.0)*r02*x5709))+((cj0*x5702)));
evalcond[5]=((((-1.0)*r12*x5709))+((x5701*x5703))+((sj0*x5702))+(((-1.0)*sj0*sj2*x5706))+(((-1.0)*r11*sj5*x5708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5711=((1.0)*cj5);
CheckValue<IkReal> x5712=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5711)))),-1);
if(!x5712.valid){
continue;
}
CheckValue<IkReal> x5713 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5712.value)))+(x5713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5714=IKsin(j4);
IkReal x5715=IKcos(j4);
IkReal x5716=(cj1*cj2);
IkReal x5717=(cj5*r10);
IkReal x5718=(r01*sj5);
IkReal x5719=(cj5*r00);
IkReal x5720=((1.0)*sj1);
IkReal x5721=(cj5*r20);
IkReal x5722=((1.0)*x5715);
IkReal x5723=((1.0)*x5714);
IkReal x5724=(sj5*x5714);
evalcond[0]=(((r21*x5724))+(((-1.0)*r22*x5722))+(((-1.0)*x5721*x5723)));
evalcond[1]=(((r11*x5724))+cj0+(((-1.0)*r12*x5722))+(((-1.0)*x5717*x5723)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5719*x5723))+(((-1.0)*r02*x5722))+((x5714*x5718)));
evalcond[3]=((((-1.0)*cj1*sj2))+((x5715*x5721))+(((-1.0)*r22*x5723))+(((-1.0)*r21*sj5*x5722))+(((-1.0)*cj2*x5720)));
evalcond[4]=(((x5715*x5719))+((cj0*x5716))+(((-1.0)*r02*x5723))+(((-1.0)*x5718*x5722))+(((-1.0)*cj0*sj2*x5720)));
evalcond[5]=((((-1.0)*sj0*sj2*x5720))+((x5715*x5717))+(((-1.0)*r12*x5723))+((sj0*x5716))+(((-1.0)*r11*sj5*x5722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5725=((1.0)*cj5);
CheckValue<IkReal> x5726=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5725)))),-1);
if(!x5726.valid){
continue;
}
CheckValue<IkReal> x5727 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5725)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5726.value)))+(x5727.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5728=IKsin(j4);
IkReal x5729=IKcos(j4);
IkReal x5730=(cj1*cj2);
IkReal x5731=(cj5*r10);
IkReal x5732=(r01*sj5);
IkReal x5733=(cj5*r00);
IkReal x5734=((1.0)*sj1);
IkReal x5735=(cj5*r20);
IkReal x5736=((1.0)*x5729);
IkReal x5737=((1.0)*x5728);
IkReal x5738=(sj5*x5728);
evalcond[0]=(((r21*x5738))+(((-1.0)*x5735*x5737))+(((-1.0)*r22*x5736)));
evalcond[1]=(((r11*x5738))+cj0+(((-1.0)*r12*x5736))+(((-1.0)*x5731*x5737)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5736))+(((-1.0)*x5733*x5737))+((x5728*x5732)));
evalcond[3]=((((-1.0)*cj1*sj2))+((x5729*x5735))+(((-1.0)*r22*x5737))+(((-1.0)*r21*sj5*x5736))+(((-1.0)*cj2*x5734)));
evalcond[4]=((((-1.0)*x5732*x5736))+(((-1.0)*r02*x5737))+((x5729*x5733))+((cj0*x5730))+(((-1.0)*cj0*sj2*x5734)));
evalcond[5]=((((-1.0)*sj0*sj2*x5734))+(((-1.0)*r12*x5737))+((x5729*x5731))+(((-1.0)*r11*sj5*x5736))+((sj0*x5730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5739=cj5*cj5;
IkReal x5740=r21*r21;
IkReal x5741=(cj1*sj2);
IkReal x5742=((1.0)*r22);
IkReal x5743=(cj5*r20);
IkReal x5744=(r21*sj5);
IkReal x5745=(cj2*sj1);
CheckValue<IkReal> x5746 = IKatan2WithCheck(IkReal(((((-1.0)*x5741*x5742))+(((-1.0)*x5742*x5745)))),IkReal((((x5741*x5743))+((x5743*x5745))+(((-1.0)*x5744*x5745))+(((-1.0)*x5741*x5744)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5746.valid){
continue;
}
CheckValue<IkReal> x5747=IKPowWithIntegerCheck(IKsign((((x5739*(r20*r20)))+(r22*r22)+(((-2.0)*x5743*x5744))+(((-1.0)*x5739*x5740))+x5740)),-1);
if(!x5747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5746.value)+(((1.5707963267949)*(x5747.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5748=IKsin(j4);
IkReal x5749=IKcos(j4);
IkReal x5750=(r21*sj5);
IkReal x5751=(cj5*r20);
IkReal x5752=((1.0)*x5749);
IkReal x5753=((1.0)*x5748);
evalcond[0]=((((-1.0)*x5751*x5753))+((x5748*x5750))+(((-1.0)*r22*x5752)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x5753))+((x5749*x5751))+(((-1.0)*x5750*x5752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5754=(cj5*sj4);
IkReal x5755=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x5754))+((r01*x5755)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x5755))+((cj4*r12))+((r10*x5754)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x5754))+((r01*x5755))))+IKsqr(((((-1.0)*r11*x5755))+((cj4*r12))+((r10*x5754))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x5754))+((r01*x5755))), ((((-1.0)*r11*x5755))+((cj4*r12))+((r10*x5754))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5756=IKcos(j0);
IkReal x5757=IKsin(j0);
IkReal x5758=(cj4*cj5);
IkReal x5759=((0.447)*cj2);
IkReal x5760=(r00*sj5);
IkReal x5761=(cj5*r01);
IkReal x5762=((1.0)*sj2);
IkReal x5763=(r11*sj5);
IkReal x5764=((1.0)*sj4);
IkReal x5765=((1.0)*cj2);
IkReal x5766=((0.447)*sj2);
IkReal x5767=(cj5*r11);
IkReal x5768=(r10*sj5);
IkReal x5769=((1.0)*cj4);
IkReal x5770=(r01*sj5);
IkReal x5771=(sj1*x5757);
IkReal x5772=(cj1*x5756);
IkReal x5773=(cj1*x5757);
IkReal x5774=(sj1*x5756);
evalcond[0]=((((-1.0)*r12*x5769))+(((-1.0)*cj5*r10*x5764))+((sj4*x5763))+x5756);
evalcond[1]=(((sj4*x5770))+(((-1.0)*cj5*r00*x5764))+(((-1.0)*r02*x5769))+(((-1.0)*x5757)));
evalcond[2]=((((-1.0)*x5762*x5772))+(((-1.0)*x5765*x5774))+x5760+x5761);
evalcond[3]=((((-1.0)*x5762*x5773))+(((-1.0)*x5765*x5771))+x5768+x5767);
evalcond[4]=(((cj2*x5772))+(((-1.0)*x5769*x5770))+((r00*x5758))+(((-1.0)*x5762*x5774))+(((-1.0)*r02*x5764)));
evalcond[5]=((((-1.0)*r12*x5764))+((cj2*x5773))+(((-1.0)*x5763*x5769))+(((-1.0)*x5762*x5771))+((r10*x5758)));
evalcond[6]=((((-1.0)*x5766*x5772))+(((-0.452)*x5774))+(((-0.1134)*x5760))+(((-0.1134)*x5761))+(((-1.0)*px))+(((-1.0)*x5759*x5774))+(((-0.1036)*x5757)));
evalcond[7]=((((0.1036)*x5756))+(((-1.0)*x5766*x5773))+(((-0.452)*x5771))+(((-0.1134)*x5768))+(((-0.1134)*x5767))+(((-1.0)*py))+(((-1.0)*x5759*x5771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5775=((1.0)*cj5);
IkReal x5776=((1.0)*sj5);
CheckValue<IkReal> x5777 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x5775))+(((-1.0)*r10*x5776)))),IkReal(((((-1.0)*r00*x5776))+(((-1.0)*r01*x5775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5777.valid){
continue;
}
CheckValue<IkReal> x5778=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x5778.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5777.value)+(((1.5707963267949)*(x5778.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5779=IKcos(j0);
IkReal x5780=IKsin(j0);
IkReal x5781=(r00*sj5);
IkReal x5782=(cj5*r01);
IkReal x5783=((1.0)*cj2);
IkReal x5784=(cj5*r11);
IkReal x5785=(r10*sj5);
IkReal x5786=((0.447)*cj2*sj1);
IkReal x5787=((1.0)*cj1*sj2);
IkReal x5788=(sj1*x5779);
IkReal x5789=((0.447)*cj1*sj2);
IkReal x5790=(sj1*x5780);
evalcond[0]=((((-1.0)*x5783*x5788))+(((-1.0)*x5779*x5787))+x5781+x5782);
evalcond[1]=((((-1.0)*x5783*x5790))+(((-1.0)*x5780*x5787))+x5784+x5785);
evalcond[2]=((((-0.1036)*x5780))+(((-0.1134)*x5781))+(((-0.1134)*x5782))+(((-0.452)*x5788))+(((-1.0)*px))+(((-1.0)*x5779*x5789))+(((-1.0)*x5779*x5786)));
evalcond[3]=((((-0.1134)*x5784))+(((-0.1134)*x5785))+(((0.1036)*x5779))+(((-0.452)*x5790))+(((-1.0)*py))+(((-1.0)*x5780*x5786))+(((-1.0)*x5780*x5789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5791=((1.0)*cj5);
IkReal x5792=((((-1.0)*r01*x5791))+(((-1.0)*r00*sj5)));
j4eval[0]=x5792;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5791))))));
j4eval[2]=IKsign(x5792);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5793=((1.0)*cj5);
IkReal x5794=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5793)));
j4eval[0]=x5794;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5793))))));
j4eval[2]=IKsign(x5794);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5795=((1.0)*sj0);
IkReal x5796=((1.0)*cj0);
IkReal x5797=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5797;
j4eval[1]=((IKabs(((((-1.0)*r12*x5795))+(((-1.0)*r02*x5796)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x5796))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5795))))));
j4eval[2]=IKsign(x5797);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5798=((-1.0)*r20);
IkReal x5800 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5800)==0){
continue;
}
IkReal x5799=pow(x5800,-0.5);
CheckValue<IkReal> x5801 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5798),IKFAST_ATAN2_MAGTHRESH);
if(!x5801.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5801.value));
IkReal gconst115=(r21*x5799);
IkReal gconst116=(x5798*x5799);
CheckValue<IkReal> x5802 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5802.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5802.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5803=((-1.0)*r20);
IkReal x5804=x5799;
CheckValue<IkReal> x5806 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5803),IKFAST_ATAN2_MAGTHRESH);
if(!x5806.valid){
continue;
}
IkReal x5805=((-1.0)*(x5806.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5805;
IkReal gconst114=x5805;
IkReal gconst115=(r21*x5804);
IkReal gconst116=(x5803*x5804);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5807=((-1.0)*r20);
IkReal x5808=x5799;
CheckValue<IkReal> x5810 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5807),IKFAST_ATAN2_MAGTHRESH);
if(!x5810.valid){
continue;
}
IkReal x5809=((-1.0)*(x5810.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5809;
IkReal gconst114=x5809;
IkReal gconst115=(r21*x5808);
IkReal gconst116=(x5807*x5808);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5811=((-1.0)*r20);
IkReal x5812=x5799;
CheckValue<IkReal> x5814 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5811),IKFAST_ATAN2_MAGTHRESH);
if(!x5814.valid){
continue;
}
IkReal x5813=((-1.0)*(x5814.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5813;
IkReal gconst114=x5813;
IkReal gconst115=(r21*x5812);
IkReal gconst116=(x5811*x5812);
IkReal x5815=r22*r22;
CheckValue<IkReal> x5818=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5815))),-1);
if(!x5818.valid){
continue;
}
IkReal x5816=x5818.value;
IkReal x5817=(((x5816*(r20*r20*r20*r20)))+(((2.0)*x5816*(r20*r20)*(r21*r21)))+((x5816*(r21*r21*r21*r21)))+x5815);
j4eval[0]=x5817;
j4eval[1]=IKsign(x5817);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5819=(cj1*sj2);
IkReal x5820=((1.0)*r22);
IkReal x5821=(gconst116*r20);
IkReal x5822=(gconst115*r21);
IkReal x5823=(cj2*sj1);
CheckValue<IkReal> x5824=IKPowWithIntegerCheck(IKsign(((((-2.0)*x5821*x5822))+(r22*r22)+(x5821*x5821)+(x5822*x5822))),-1);
if(!x5824.valid){
continue;
}
CheckValue<IkReal> x5825 = IKatan2WithCheck(IkReal(((((-1.0)*x5820*x5823))+(((-1.0)*x5819*x5820)))),IkReal((((x5821*x5823))+(((-1.0)*x5822*x5823))+((x5819*x5821))+(((-1.0)*x5819*x5822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5824.value)))+(x5825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5826=IKsin(j4);
IkReal x5827=IKcos(j4);
IkReal x5828=(cj1*cj2);
IkReal x5829=(gconst115*r21);
IkReal x5830=(gconst116*r00);
IkReal x5831=((1.0)*sj1);
IkReal x5832=(gconst116*r20);
IkReal x5833=(gconst116*r10);
IkReal x5834=((1.0)*x5827);
IkReal x5835=((1.0)*x5826);
IkReal x5836=(gconst115*x5826);
evalcond[0]=((((-1.0)*r22*x5834))+(((-1.0)*x5832*x5835))+((x5826*x5829)));
evalcond[1]=((((-1.0)*x5833*x5835))+cj0+((r11*x5836))+(((-1.0)*r12*x5834)));
evalcond[2]=((((-1.0)*r02*x5834))+(((-1.0)*sj0))+(((-1.0)*x5830*x5835))+((r01*x5836)));
evalcond[3]=((((-1.0)*r22*x5835))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x5831))+((x5827*x5832))+(((-1.0)*x5829*x5834)));
evalcond[4]=((((-1.0)*r02*x5835))+(((-1.0)*gconst115*r01*x5834))+((cj0*x5828))+((x5827*x5830))+(((-1.0)*cj0*sj2*x5831)));
evalcond[5]=((((-1.0)*sj0*sj2*x5831))+((sj0*x5828))+((x5827*x5833))+(((-1.0)*r12*x5835))+(((-1.0)*gconst115*r11*x5834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5837=((1.0)*gconst116);
CheckValue<IkReal> x5838=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5837)))),-1);
if(!x5838.valid){
continue;
}
CheckValue<IkReal> x5839 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5837))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5838.value)))+(x5839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5840=IKsin(j4);
IkReal x5841=IKcos(j4);
IkReal x5842=(cj1*cj2);
IkReal x5843=(gconst115*r21);
IkReal x5844=(gconst116*r00);
IkReal x5845=((1.0)*sj1);
IkReal x5846=(gconst116*r20);
IkReal x5847=(gconst116*r10);
IkReal x5848=((1.0)*x5841);
IkReal x5849=((1.0)*x5840);
IkReal x5850=(gconst115*x5840);
evalcond[0]=(((x5840*x5843))+(((-1.0)*x5846*x5849))+(((-1.0)*r22*x5848)));
evalcond[1]=((((-1.0)*x5847*x5849))+cj0+((r11*x5850))+(((-1.0)*r12*x5848)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5848))+((r01*x5850))+(((-1.0)*x5844*x5849)));
evalcond[3]=(((x5841*x5846))+(((-1.0)*cj2*x5845))+(((-1.0)*cj1*sj2))+(((-1.0)*x5843*x5848))+(((-1.0)*r22*x5849)));
evalcond[4]=((((-1.0)*r02*x5849))+(((-1.0)*gconst115*r01*x5848))+((x5841*x5844))+((cj0*x5842))+(((-1.0)*cj0*sj2*x5845)));
evalcond[5]=(((x5841*x5847))+(((-1.0)*sj0*sj2*x5845))+((sj0*x5842))+(((-1.0)*gconst115*r11*x5848))+(((-1.0)*r12*x5849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5851=((1.0)*gconst116);
CheckValue<IkReal> x5852 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x5851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5852.valid){
continue;
}
CheckValue<IkReal> x5853=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x5851)))),-1);
if(!x5853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5852.value)+(((1.5707963267949)*(x5853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5854=IKsin(j4);
IkReal x5855=IKcos(j4);
IkReal x5856=(cj1*cj2);
IkReal x5857=(gconst115*r21);
IkReal x5858=(gconst116*r00);
IkReal x5859=((1.0)*sj1);
IkReal x5860=(gconst116*r20);
IkReal x5861=(gconst116*r10);
IkReal x5862=((1.0)*x5855);
IkReal x5863=((1.0)*x5854);
IkReal x5864=(gconst115*x5854);
evalcond[0]=((((-1.0)*r22*x5862))+((x5854*x5857))+(((-1.0)*x5860*x5863)));
evalcond[1]=(cj0+(((-1.0)*x5861*x5863))+((r11*x5864))+(((-1.0)*r12*x5862)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5858*x5863))+(((-1.0)*r02*x5862))+((r01*x5864)));
evalcond[3]=((((-1.0)*r22*x5863))+(((-1.0)*cj2*x5859))+(((-1.0)*cj1*sj2))+((x5855*x5860))+(((-1.0)*x5857*x5862)));
evalcond[4]=(((x5855*x5858))+(((-1.0)*gconst115*r01*x5862))+(((-1.0)*r02*x5863))+(((-1.0)*cj0*sj2*x5859))+((cj0*x5856)));
evalcond[5]=((((-1.0)*sj0*sj2*x5859))+((x5855*x5861))+(((-1.0)*gconst115*r11*x5862))+(((-1.0)*r12*x5863))+((sj0*x5856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5865=((-1.0)*r21);
IkReal x5867 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5867)==0){
continue;
}
IkReal x5866=pow(x5867,-0.5);
CheckValue<IkReal> x5868 = IKatan2WithCheck(IkReal(x5865),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5868.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5868.value))));
IkReal gconst118=(x5865*x5866);
IkReal gconst119=((1.0)*r20*x5866);
CheckValue<IkReal> x5869 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5869.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5869.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5870=((-1.0)*r21);
CheckValue<IkReal> x5873 = IKatan2WithCheck(IkReal(x5870),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5873.valid){
continue;
}
IkReal x5871=((1.0)*(x5873.value));
IkReal x5872=x5866;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5871)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5871)));
IkReal gconst118=(x5870*x5872);
IkReal gconst119=((1.0)*r20*x5872);
IkReal x5874=r22*r22;
IkReal x5875=((1.0)*x5874);
CheckValue<IkReal> x5879=IKPowWithIntegerCheck(((-1.0)+x5874),-1);
if(!x5879.valid){
continue;
}
IkReal x5876=x5879.value;
if((((1.0)+(((-1.0)*x5875)))) < -0.00001)
continue;
IkReal x5877=IKsqrt(((1.0)+(((-1.0)*x5875))));
IkReal x5878=(cj0*x5876*x5877);
j4eval[0]=((IKabs(((((-1.0)*x5875*x5878))+x5878)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5880=((-1.0)*r21);
CheckValue<IkReal> x5883 = IKatan2WithCheck(IkReal(x5880),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5883.valid){
continue;
}
IkReal x5881=((1.0)*(x5883.value));
IkReal x5882=x5866;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5881)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5881)));
IkReal gconst118=(x5880*x5882);
IkReal gconst119=((1.0)*r20*x5882);
IkReal x5884=r22*r22;
IkReal x5885=((1.0)*x5884);
CheckValue<IkReal> x5889=IKPowWithIntegerCheck(((-1.0)+x5884),-1);
if(!x5889.valid){
continue;
}
IkReal x5886=x5889.value;
if((((1.0)+(((-1.0)*x5885)))) < -0.00001)
continue;
IkReal x5887=IKsqrt(((1.0)+(((-1.0)*x5885))));
IkReal x5888=(sj0*x5886*x5887);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x5885*x5888))+x5888))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5890=((-1.0)*r21);
CheckValue<IkReal> x5893 = IKatan2WithCheck(IkReal(x5890),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5893.valid){
continue;
}
IkReal x5891=((1.0)*(x5893.value));
IkReal x5892=x5866;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5891)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5891)));
IkReal gconst118=(x5890*x5892);
IkReal gconst119=((1.0)*r20*x5892);
IkReal x5894=r22*r22;
IkReal x5895=(r12*sj0);
IkReal x5896=(cj0*r02);
CheckValue<IkReal> x5900=IKPowWithIntegerCheck(((-1.0)+x5894),-1);
if(!x5900.valid){
continue;
}
IkReal x5897=x5900.value;
if((((1.0)+(((-1.0)*x5894)))) < -0.00001)
continue;
IkReal x5898=IKsqrt(((1.0)+(((-1.0)*x5894))));
IkReal x5899=(r22*x5897*x5898);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5896))+(((-1.0)*x5895)))))+(IKabs((((x5895*x5899))+((x5896*x5899))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5901=((1.0)*sj0);
IkReal x5902=((1.0)*gconst118);
CheckValue<IkReal> x5903=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5902)))),-1);
if(!x5903.valid){
continue;
}
CheckValue<IkReal> x5904 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5901))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x5901))+(((-1.0)*cj0*r01*x5902))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5903.value)))+(x5904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5905=IKsin(j4);
IkReal x5906=IKcos(j4);
IkReal x5907=(gconst118*r01);
IkReal x5908=(gconst119*r10);
IkReal x5909=(cj1*cj2);
IkReal x5910=(gconst119*r20);
IkReal x5911=(gconst118*r11);
IkReal x5912=((1.0)*sj1);
IkReal x5913=(gconst118*r21);
IkReal x5914=(gconst119*r00);
IkReal x5915=((1.0)*x5906);
IkReal x5916=((1.0)*x5905);
evalcond[0]=((((-1.0)*r22*x5915))+(((-1.0)*x5910*x5916))+((x5905*x5913)));
evalcond[1]=((((-1.0)*r12*x5915))+cj0+((x5905*x5911))+(((-1.0)*x5908*x5916)));
evalcond[2]=((((-1.0)*sj0))+((x5905*x5907))+(((-1.0)*r02*x5915))+(((-1.0)*x5914*x5916)));
evalcond[3]=((((-1.0)*cj2*x5912))+(((-1.0)*r22*x5916))+(((-1.0)*cj1*sj2))+(((-1.0)*x5913*x5915))+((x5906*x5910)));
evalcond[4]=((((-1.0)*x5907*x5915))+(((-1.0)*cj0*sj2*x5912))+(((-1.0)*r02*x5916))+((x5906*x5914))+((cj0*x5909)));
evalcond[5]=((((-1.0)*sj0*sj2*x5912))+((sj0*x5909))+(((-1.0)*r12*x5916))+(((-1.0)*x5911*x5915))+((x5906*x5908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5917=((1.0)*gconst119);
CheckValue<IkReal> x5918=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5917))+(((-1.0)*gconst118*r10)))),-1);
if(!x5918.valid){
continue;
}
CheckValue<IkReal> x5919 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5917))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5918.value)))+(x5919.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5920=IKsin(j4);
IkReal x5921=IKcos(j4);
IkReal x5922=(gconst118*r01);
IkReal x5923=(gconst119*r10);
IkReal x5924=(cj1*cj2);
IkReal x5925=(gconst119*r20);
IkReal x5926=(gconst118*r11);
IkReal x5927=((1.0)*sj1);
IkReal x5928=(gconst118*r21);
IkReal x5929=(gconst119*r00);
IkReal x5930=((1.0)*x5921);
IkReal x5931=((1.0)*x5920);
evalcond[0]=((((-1.0)*x5925*x5931))+((x5920*x5928))+(((-1.0)*r22*x5930)));
evalcond[1]=(cj0+((x5920*x5926))+(((-1.0)*r12*x5930))+(((-1.0)*x5923*x5931)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5929*x5931))+(((-1.0)*r02*x5930))+((x5920*x5922)));
evalcond[3]=(((x5921*x5925))+(((-1.0)*cj1*sj2))+(((-1.0)*x5928*x5930))+(((-1.0)*cj2*x5927))+(((-1.0)*r22*x5931)));
evalcond[4]=(((x5921*x5929))+(((-1.0)*r02*x5931))+((cj0*x5924))+(((-1.0)*x5922*x5930))+(((-1.0)*cj0*sj2*x5927)));
evalcond[5]=((((-1.0)*x5926*x5930))+((x5921*x5923))+(((-1.0)*sj0*sj2*x5927))+(((-1.0)*r12*x5931))+((sj0*x5924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5932=((1.0)*gconst119);
CheckValue<IkReal> x5933 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5932)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5933.valid){
continue;
}
CheckValue<IkReal> x5934=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5932))+(((-1.0)*gconst118*r00)))),-1);
if(!x5934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5933.value)+(((1.5707963267949)*(x5934.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5935=IKsin(j4);
IkReal x5936=IKcos(j4);
IkReal x5937=(gconst118*r01);
IkReal x5938=(gconst119*r10);
IkReal x5939=(cj1*cj2);
IkReal x5940=(gconst119*r20);
IkReal x5941=(gconst118*r11);
IkReal x5942=((1.0)*sj1);
IkReal x5943=(gconst118*r21);
IkReal x5944=(gconst119*r00);
IkReal x5945=((1.0)*x5936);
IkReal x5946=((1.0)*x5935);
evalcond[0]=((((-1.0)*r22*x5945))+((x5935*x5943))+(((-1.0)*x5940*x5946)));
evalcond[1]=(cj0+((x5935*x5941))+(((-1.0)*r12*x5945))+(((-1.0)*x5938*x5946)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5944*x5946))+((x5935*x5937))+(((-1.0)*r02*x5945)));
evalcond[3]=((((-1.0)*r22*x5946))+(((-1.0)*cj1*sj2))+((x5936*x5940))+(((-1.0)*x5943*x5945))+(((-1.0)*cj2*x5942)));
evalcond[4]=((((-1.0)*x5937*x5945))+((x5936*x5944))+((cj0*x5939))+(((-1.0)*cj0*sj2*x5942))+(((-1.0)*r02*x5946)));
evalcond[5]=((((-1.0)*sj0*sj2*x5942))+(((-1.0)*r12*x5946))+(((-1.0)*x5941*x5945))+((sj0*x5939))+((x5936*x5938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5947=((-1.0)*r10);
IkReal x5949 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5949)==0){
continue;
}
IkReal x5948=pow(x5949,-0.5);
CheckValue<IkReal> x5950 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5947),IKFAST_ATAN2_MAGTHRESH);
if(!x5950.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5950.value));
IkReal gconst121=(r11*x5948);
IkReal gconst122=(x5947*x5948);
CheckValue<IkReal> x5951 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5951.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5951.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5952=((-1.0)*r10);
IkReal x5953=x5948;
CheckValue<IkReal> x5955 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5952),IKFAST_ATAN2_MAGTHRESH);
if(!x5955.valid){
continue;
}
IkReal x5954=((-1.0)*(x5955.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5954;
IkReal gconst120=x5954;
IkReal gconst121=(r11*x5953);
IkReal gconst122=(x5952*x5953);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5956=((1.0)*sj0);
IkReal x5957=((1.0)*gconst121);
CheckValue<IkReal> x5958=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5957)))),-1);
if(!x5958.valid){
continue;
}
CheckValue<IkReal> x5959 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5956)))),IkReal(((((-1.0)*gconst121*r11*x5956))+(((-1.0)*cj0*r01*x5957))+((cj0*gconst122*r00))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5958.value)))+(x5959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5960=IKsin(j4);
IkReal x5961=IKcos(j4);
IkReal x5962=(gconst121*r01);
IkReal x5963=(cj1*cj2);
IkReal x5964=(gconst122*r00);
IkReal x5965=((1.0)*sj1);
IkReal x5966=(gconst122*r20);
IkReal x5967=(gconst122*r10);
IkReal x5968=((1.0)*x5961);
IkReal x5969=((1.0)*x5960);
IkReal x5970=(gconst121*x5960);
evalcond[0]=((((-1.0)*r22*x5968))+((r21*x5970))+(((-1.0)*x5966*x5969)));
evalcond[1]=(cj0+(((-1.0)*r12*x5968))+((r11*x5970))+(((-1.0)*x5967*x5969)));
evalcond[2]=((((-1.0)*sj0))+((x5960*x5962))+(((-1.0)*x5964*x5969))+(((-1.0)*r02*x5968)));
evalcond[3]=((((-1.0)*cj2*x5965))+((x5961*x5966))+(((-1.0)*r22*x5969))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst121*r21*x5968)));
evalcond[4]=(((cj0*x5963))+((x5961*x5964))+(((-1.0)*cj0*sj2*x5965))+(((-1.0)*r02*x5969))+(((-1.0)*x5962*x5968)));
evalcond[5]=((((-1.0)*sj0*sj2*x5965))+((x5961*x5967))+(((-1.0)*gconst121*r11*x5968))+(((-1.0)*r12*x5969))+((sj0*x5963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5971=((1.0)*gconst122);
CheckValue<IkReal> x5972=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5971)))),-1);
if(!x5972.valid){
continue;
}
CheckValue<IkReal> x5973 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5971))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5972.value)))+(x5973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5974=IKsin(j4);
IkReal x5975=IKcos(j4);
IkReal x5976=(gconst121*r01);
IkReal x5977=(cj1*cj2);
IkReal x5978=(gconst122*r00);
IkReal x5979=((1.0)*sj1);
IkReal x5980=(gconst122*r20);
IkReal x5981=(gconst122*r10);
IkReal x5982=((1.0)*x5975);
IkReal x5983=((1.0)*x5974);
IkReal x5984=(gconst121*x5974);
evalcond[0]=((((-1.0)*x5980*x5983))+((r21*x5984))+(((-1.0)*r22*x5982)));
evalcond[1]=((((-1.0)*r12*x5982))+cj0+((r11*x5984))+(((-1.0)*x5981*x5983)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5978*x5983))+(((-1.0)*r02*x5982))+((x5974*x5976)));
evalcond[3]=((((-1.0)*cj2*x5979))+((x5975*x5980))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst121*r21*x5982))+(((-1.0)*r22*x5983)));
evalcond[4]=((((-1.0)*cj0*sj2*x5979))+((cj0*x5977))+(((-1.0)*x5976*x5982))+(((-1.0)*r02*x5983))+((x5975*x5978)));
evalcond[5]=((((-1.0)*r12*x5983))+(((-1.0)*sj0*sj2*x5979))+((x5975*x5981))+(((-1.0)*gconst121*r11*x5982))+((sj0*x5977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5985=((-1.0)*r11);
IkReal x5987 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5987)==0){
continue;
}
IkReal x5986=pow(x5987,-0.5);
CheckValue<IkReal> x5988 = IKatan2WithCheck(IkReal(x5985),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5988.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5988.value))));
IkReal gconst124=(x5985*x5986);
IkReal gconst125=((1.0)*r10*x5986);
CheckValue<IkReal> x5989 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5989.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5989.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5990=((-1.0)*r11);
CheckValue<IkReal> x5993 = IKatan2WithCheck(IkReal(x5990),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5993.valid){
continue;
}
IkReal x5991=((1.0)*(x5993.value));
IkReal x5992=x5986;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5991)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5991)));
IkReal gconst124=(x5990*x5992);
IkReal gconst125=((1.0)*r10*x5992);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5994=((-1.0)*r11);
CheckValue<IkReal> x5997 = IKatan2WithCheck(IkReal(x5994),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5997.valid){
continue;
}
IkReal x5995=((1.0)*(x5997.value));
IkReal x5996=x5986;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5995)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5995)));
IkReal gconst124=(x5994*x5996);
IkReal gconst125=((1.0)*r10*x5996);
IkReal x5998=r12*r12;
IkReal x5999=((1.0)*sj0);
IkReal x6000=(cj0*r02);
IkReal x6001=x5986;
j4eval[0]=((IKabs(((((-1.0)*r12*x5999))+(((-1.0)*x6000)))))+(IKabs((((sj0*x5998*x6001))+(((-1.0)*x5999*x6001))+((r12*x6000*x6001))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6002=((-1.0)*r11);
CheckValue<IkReal> x6005 = IKatan2WithCheck(IkReal(x6002),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6005.valid){
continue;
}
IkReal x6003=((1.0)*(x6005.value));
IkReal x6004=x5986;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6003)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6003)));
IkReal gconst124=(x6002*x6004);
IkReal gconst125=((1.0)*r10*x6004);
IkReal x6006=((1.0)*r22);
IkReal x6007=(cj1*sj2);
IkReal x6008=(cj2*sj1);
IkReal x6009=x5986;
IkReal x6010=(r12*r22*x6009);
j4eval[0]=((IKabs(((((-1.0)*x6006*x6007))+(((-1.0)*x6006*x6008)))))+(IKabs((((x6008*x6010))+((x6007*x6010))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6011=(gconst124*r21);
IkReal x6012=(gconst125*r20);
IkReal x6013=(cj2*sj1);
IkReal x6014=((1.0)*cj1*sj2);
CheckValue<IkReal> x6015 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6014))+(((-1.0)*r22*x6013)))),IkReal((((x6012*x6013))+((cj1*sj2*x6012))+(((-1.0)*x6011*x6014))+(((-1.0)*x6011*x6013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6015.valid){
continue;
}
CheckValue<IkReal> x6016=IKPowWithIntegerCheck(IKsign(((x6012*x6012)+(r22*r22)+(((-2.0)*x6011*x6012))+(x6011*x6011))),-1);
if(!x6016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6015.value)+(((1.5707963267949)*(x6016.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6017=IKsin(j4);
IkReal x6018=IKcos(j4);
IkReal x6019=(cj1*cj2);
IkReal x6020=(gconst125*r20);
IkReal x6021=((1.0)*sj1);
IkReal x6022=((1.0)*x6018);
IkReal x6023=((1.0)*x6017);
IkReal x6024=(gconst124*x6017);
IkReal x6025=(gconst125*x6018);
evalcond[0]=((((-1.0)*x6020*x6023))+(((-1.0)*r22*x6022))+((r21*x6024)));
evalcond[1]=((((-1.0)*gconst125*r10*x6023))+cj0+((r11*x6024))+(((-1.0)*r12*x6022)));
evalcond[2]=((((-1.0)*gconst125*r00*x6023))+(((-1.0)*sj0))+((r01*x6024))+(((-1.0)*r02*x6022)));
evalcond[3]=((((-1.0)*cj2*x6021))+(((-1.0)*gconst124*r21*x6022))+(((-1.0)*r22*x6023))+(((-1.0)*cj1*sj2))+((x6018*x6020)));
evalcond[4]=(((r00*x6025))+((cj0*x6019))+(((-1.0)*r02*x6023))+(((-1.0)*cj0*sj2*x6021))+(((-1.0)*gconst124*r01*x6022)));
evalcond[5]=((((-1.0)*gconst124*r11*x6022))+((sj0*x6019))+(((-1.0)*sj0*sj2*x6021))+((r10*x6025))+(((-1.0)*r12*x6023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6026=((1.0)*sj0);
IkReal x6027=((1.0)*cj0);
CheckValue<IkReal> x6028 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6027))+(((-1.0)*r12*x6026)))),IkReal(((((-1.0)*gconst124*r11*x6026))+((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x6027))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6028.valid){
continue;
}
CheckValue<IkReal> x6029=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6028.value)+(((1.5707963267949)*(x6029.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6030=IKsin(j4);
IkReal x6031=IKcos(j4);
IkReal x6032=(cj1*cj2);
IkReal x6033=(gconst125*r20);
IkReal x6034=((1.0)*sj1);
IkReal x6035=((1.0)*x6031);
IkReal x6036=((1.0)*x6030);
IkReal x6037=(gconst124*x6030);
IkReal x6038=(gconst125*x6031);
evalcond[0]=(((r21*x6037))+(((-1.0)*x6033*x6036))+(((-1.0)*r22*x6035)));
evalcond[1]=(cj0+((r11*x6037))+(((-1.0)*r12*x6035))+(((-1.0)*gconst125*r10*x6036)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst125*r00*x6036))+((r01*x6037))+(((-1.0)*r02*x6035)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x6034))+((x6031*x6033))+(((-1.0)*r22*x6036))+(((-1.0)*gconst124*r21*x6035)));
evalcond[4]=((((-1.0)*cj0*sj2*x6034))+((cj0*x6032))+(((-1.0)*gconst124*r01*x6035))+((r00*x6038))+(((-1.0)*r02*x6036)));
evalcond[5]=((((-1.0)*sj0*sj2*x6034))+(((-1.0)*r12*x6036))+((r10*x6038))+((sj0*x6032))+(((-1.0)*gconst124*r11*x6035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6039=((1.0)*gconst125);
CheckValue<IkReal> x6040 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6039))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6040.valid){
continue;
}
CheckValue<IkReal> x6041=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6039)))),-1);
if(!x6041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6040.value)+(((1.5707963267949)*(x6041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6042=IKsin(j4);
IkReal x6043=IKcos(j4);
IkReal x6044=(cj1*cj2);
IkReal x6045=(gconst125*r20);
IkReal x6046=((1.0)*sj1);
IkReal x6047=((1.0)*x6043);
IkReal x6048=((1.0)*x6042);
IkReal x6049=(gconst124*x6042);
IkReal x6050=(gconst125*x6043);
evalcond[0]=((((-1.0)*r22*x6047))+(((-1.0)*x6045*x6048))+((r21*x6049)));
evalcond[1]=(((r11*x6049))+cj0+(((-1.0)*gconst125*r10*x6048))+(((-1.0)*r12*x6047)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6047))+(((-1.0)*gconst125*r00*x6048))+((r01*x6049)));
evalcond[3]=((((-1.0)*cj2*x6046))+((x6043*x6045))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst124*r21*x6047))+(((-1.0)*r22*x6048)));
evalcond[4]=(((r00*x6050))+((cj0*x6044))+(((-1.0)*gconst124*r01*x6047))+(((-1.0)*r02*x6048))+(((-1.0)*cj0*sj2*x6046)));
evalcond[5]=(((sj0*x6044))+(((-1.0)*gconst124*r11*x6047))+(((-1.0)*sj0*sj2*x6046))+(((-1.0)*r12*x6048))+((r10*x6050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6051=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6051;
j4eval[1]=IKsign(x6051);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6052=((1.0)*cj5);
IkReal x6053=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6052)));
j4eval[0]=x6053;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6052))))));
j4eval[2]=IKsign(x6053);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6054=cj5*cj5;
IkReal x6055=r11*r11;
IkReal x6056=(r11*sj5);
IkReal x6057=(cj5*r10);
IkReal x6058=((r12*r12)+x6055+(((-1.0)*x6054*x6055))+((x6054*(r10*r10)))+(((-2.0)*x6056*x6057)));
j4eval[0]=x6058;
j4eval[1]=IKsign(x6058);
j4eval[2]=((IKabs(r12))+(IKabs((x6057+(((-1.0)*x6056))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6059=cj5*cj5;
IkReal x6060=r11*r11;
IkReal x6061=(cj5*r10);
IkReal x6062=(r11*sj5);
CheckValue<IkReal> x6063 = IKatan2WithCheck(IkReal((x6061+(((-1.0)*x6062)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6063.valid){
continue;
}
CheckValue<IkReal> x6064=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x6059*x6060))+x6060+(((-2.0)*x6061*x6062))+((x6059*(r10*r10))))),-1);
if(!x6064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6063.value)+(((1.5707963267949)*(x6064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6065=IKsin(j4);
IkReal x6066=IKcos(j4);
IkReal x6067=(cj5*r10);
IkReal x6068=(r01*sj5);
IkReal x6069=((1.0)*sj1);
IkReal x6070=(cj5*r00);
IkReal x6071=(cj5*r20);
IkReal x6072=((1.0)*x6066);
IkReal x6073=((1.0)*x6065);
IkReal x6074=(sj5*x6065);
evalcond[0]=((((-1.0)*r22*x6072))+((r21*x6074))+(((-1.0)*x6071*x6073)));
evalcond[1]=((((-1.0)*r02*x6072))+((x6065*x6068))+(((-1.0)*x6070*x6073)));
evalcond[2]=(((x6066*x6067))+(((-1.0)*r12*x6073))+(((-1.0)*r11*sj5*x6072)));
evalcond[3]=((1.0)+((r11*x6074))+(((-1.0)*x6067*x6073))+(((-1.0)*r12*x6072)));
evalcond[4]=((((-1.0)*r02*x6073))+((x6066*x6070))+(((-1.0)*x6068*x6072))+((cj1*cj2))+(((-1.0)*sj2*x6069)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x6066*x6071))+(((-1.0)*r22*x6073))+(((-1.0)*r21*sj5*x6072))+(((-1.0)*cj2*x6069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6075=((1.0)*cj5);
CheckValue<IkReal> x6076=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6075)))),-1);
if(!x6076.valid){
continue;
}
CheckValue<IkReal> x6077 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6075))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6076.value)))+(x6077.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6078=IKsin(j4);
IkReal x6079=IKcos(j4);
IkReal x6080=(cj5*r10);
IkReal x6081=(r01*sj5);
IkReal x6082=((1.0)*sj1);
IkReal x6083=(cj5*r00);
IkReal x6084=(cj5*r20);
IkReal x6085=((1.0)*x6079);
IkReal x6086=((1.0)*x6078);
IkReal x6087=(sj5*x6078);
evalcond[0]=((((-1.0)*r22*x6085))+((r21*x6087))+(((-1.0)*x6084*x6086)));
evalcond[1]=(((x6078*x6081))+(((-1.0)*x6083*x6086))+(((-1.0)*r02*x6085)));
evalcond[2]=((((-1.0)*r12*x6086))+((x6079*x6080))+(((-1.0)*r11*sj5*x6085)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6085))+(((-1.0)*x6080*x6086))+((r11*x6087)));
evalcond[4]=((((-1.0)*sj2*x6082))+((x6079*x6083))+(((-1.0)*r02*x6086))+((cj1*cj2))+(((-1.0)*x6081*x6085)));
evalcond[5]=((((-1.0)*r22*x6086))+((x6079*x6084))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x6082))+(((-1.0)*r21*sj5*x6085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6088=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6088.valid){
continue;
}
CheckValue<IkReal> x6089 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6088.value)))+(x6089.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6090=IKsin(j4);
IkReal x6091=IKcos(j4);
IkReal x6092=(cj5*r10);
IkReal x6093=(r01*sj5);
IkReal x6094=((1.0)*sj1);
IkReal x6095=(cj5*r00);
IkReal x6096=(cj5*r20);
IkReal x6097=((1.0)*x6091);
IkReal x6098=((1.0)*x6090);
IkReal x6099=(sj5*x6090);
evalcond[0]=((((-1.0)*r22*x6097))+((r21*x6099))+(((-1.0)*x6096*x6098)));
evalcond[1]=(((x6090*x6093))+(((-1.0)*x6095*x6098))+(((-1.0)*r02*x6097)));
evalcond[2]=((((-1.0)*r11*sj5*x6097))+((x6091*x6092))+(((-1.0)*r12*x6098)));
evalcond[3]=((1.0)+(((-1.0)*x6092*x6098))+((r11*x6099))+(((-1.0)*r12*x6097)));
evalcond[4]=((((-1.0)*x6093*x6097))+((x6091*x6095))+(((-1.0)*r02*x6098))+((cj1*cj2))+(((-1.0)*sj2*x6094)));
evalcond[5]=((((-1.0)*r22*x6098))+(((-1.0)*cj1*sj2))+((x6091*x6096))+(((-1.0)*cj2*x6094))+(((-1.0)*r21*sj5*x6097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6100=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6100;
j4eval[1]=IKsign(x6100);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6101=((1.0)*cj5);
IkReal x6102=((((-1.0)*r21*x6101))+(((-1.0)*r20*sj5)));
j4eval[0]=x6102;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6101))))));
j4eval[2]=IKsign(x6102);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6103=cj5*cj5;
IkReal x6104=r11*r11;
IkReal x6105=(cj5*r10);
IkReal x6106=(r11*sj5);
IkReal x6107=(((x6103*x6104))+(((2.0)*x6105*x6106))+(((-1.0)*x6103*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x6104)));
j4eval[0]=x6107;
j4eval[1]=((IKabs(r12))+(IKabs((x6105+(((-1.0)*x6106))))));
j4eval[2]=IKsign(x6107);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6108=cj5*cj5;
IkReal x6109=r11*r11;
IkReal x6110=(cj5*r10);
IkReal x6111=(r11*sj5);
CheckValue<IkReal> x6112 = IKatan2WithCheck(IkReal(((((-1.0)*x6111))+x6110)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6112.valid){
continue;
}
CheckValue<IkReal> x6113=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6108*(r10*r10)))+((x6108*x6109))+(((2.0)*x6110*x6111))+(((-1.0)*(r12*r12)))+(((-1.0)*x6109)))),-1);
if(!x6113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6112.value)+(((1.5707963267949)*(x6113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6114=IKsin(j4);
IkReal x6115=IKcos(j4);
IkReal x6116=(cj5*r10);
IkReal x6117=(r01*sj5);
IkReal x6118=((1.0)*cj2);
IkReal x6119=(cj5*r00);
IkReal x6120=(cj5*r20);
IkReal x6121=((1.0)*x6115);
IkReal x6122=((1.0)*x6114);
IkReal x6123=(sj5*x6114);
evalcond[0]=(((r21*x6123))+(((-1.0)*r22*x6121))+(((-1.0)*x6120*x6122)));
evalcond[1]=((((-1.0)*r02*x6121))+(((-1.0)*x6119*x6122))+((x6114*x6117)));
evalcond[2]=(((x6115*x6116))+(((-1.0)*r11*sj5*x6121))+(((-1.0)*r12*x6122)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6121))+(((-1.0)*x6116*x6122))+((r11*x6123)));
evalcond[4]=(((x6115*x6119))+(((-1.0)*x6117*x6121))+(((-1.0)*r02*x6122))+((sj1*sj2))+(((-1.0)*cj1*x6118)));
evalcond[5]=((((-1.0)*r21*sj5*x6121))+(((-1.0)*r22*x6122))+(((-1.0)*cj1*sj2))+((x6115*x6120))+(((-1.0)*sj1*x6118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6124=((1.0)*cj5);
CheckValue<IkReal> x6125 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6124)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6125.valid){
continue;
}
CheckValue<IkReal> x6126=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6124))+(((-1.0)*r20*sj5)))),-1);
if(!x6126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6125.value)+(((1.5707963267949)*(x6126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6127=IKsin(j4);
IkReal x6128=IKcos(j4);
IkReal x6129=(cj5*r10);
IkReal x6130=(r01*sj5);
IkReal x6131=((1.0)*cj2);
IkReal x6132=(cj5*r00);
IkReal x6133=(cj5*r20);
IkReal x6134=((1.0)*x6128);
IkReal x6135=((1.0)*x6127);
IkReal x6136=(sj5*x6127);
evalcond[0]=(((r21*x6136))+(((-1.0)*r22*x6134))+(((-1.0)*x6133*x6135)));
evalcond[1]=(((x6127*x6130))+(((-1.0)*x6132*x6135))+(((-1.0)*r02*x6134)));
evalcond[2]=(((x6128*x6129))+(((-1.0)*r11*sj5*x6134))+(((-1.0)*r12*x6135)));
evalcond[3]=((-1.0)+((r11*x6136))+(((-1.0)*x6129*x6135))+(((-1.0)*r12*x6134)));
evalcond[4]=((((-1.0)*x6130*x6134))+((x6128*x6132))+((sj1*sj2))+(((-1.0)*cj1*x6131))+(((-1.0)*r02*x6135)));
evalcond[5]=(((x6128*x6133))+(((-1.0)*sj1*x6131))+(((-1.0)*r21*sj5*x6134))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x6135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6137 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6137.valid){
continue;
}
CheckValue<IkReal> x6138=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6137.value)+(((1.5707963267949)*(x6138.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6139=IKsin(j4);
IkReal x6140=IKcos(j4);
IkReal x6141=(cj5*r10);
IkReal x6142=(r01*sj5);
IkReal x6143=((1.0)*cj2);
IkReal x6144=(cj5*r00);
IkReal x6145=(cj5*r20);
IkReal x6146=((1.0)*x6140);
IkReal x6147=((1.0)*x6139);
IkReal x6148=(sj5*x6139);
evalcond[0]=((((-1.0)*x6145*x6147))+((r21*x6148))+(((-1.0)*r22*x6146)));
evalcond[1]=(((x6139*x6142))+(((-1.0)*x6144*x6147))+(((-1.0)*r02*x6146)));
evalcond[2]=((((-1.0)*r11*sj5*x6146))+((x6140*x6141))+(((-1.0)*r12*x6147)));
evalcond[3]=((-1.0)+((r11*x6148))+(((-1.0)*x6141*x6147))+(((-1.0)*r12*x6146)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r02*x6147))+(((-1.0)*x6142*x6146))+(((-1.0)*cj1*x6143))+((x6140*x6144)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x6146))+(((-1.0)*r22*x6147))+(((-1.0)*sj1*x6143))+((x6140*x6145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6149=((-1.0)*r00);
IkReal x6151 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6151)==0){
continue;
}
IkReal x6150=pow(x6151,-0.5);
CheckValue<IkReal> x6152 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6149),IKFAST_ATAN2_MAGTHRESH);
if(!x6152.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6152.value));
IkReal gconst127=(r01*x6150);
IkReal gconst128=(x6149*x6150);
CheckValue<IkReal> x6153 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6153.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6153.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6154=((-1.0)*r00);
IkReal x6155=x6150;
CheckValue<IkReal> x6157 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6154),IKFAST_ATAN2_MAGTHRESH);
if(!x6157.valid){
continue;
}
IkReal x6156=((-1.0)*(x6157.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6156;
IkReal gconst126=x6156;
IkReal gconst127=(r01*x6155);
IkReal gconst128=(x6154*x6155);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6158=((1.0)*sj0);
IkReal x6159=((1.0)*gconst127);
CheckValue<IkReal> x6160=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6159)))),-1);
if(!x6160.valid){
continue;
}
CheckValue<IkReal> x6161 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6158)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x6159))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x6158)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6160.value)))+(x6161.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6162=IKsin(j4);
IkReal x6163=IKcos(j4);
IkReal x6164=(cj1*cj2);
IkReal x6165=(gconst127*r01);
IkReal x6166=(gconst128*r10);
IkReal x6167=((1.0)*sj1);
IkReal x6168=(gconst128*r00);
IkReal x6169=(gconst127*r21);
IkReal x6170=(gconst128*r20);
IkReal x6171=(gconst127*r11);
IkReal x6172=((1.0)*x6163);
IkReal x6173=((1.0)*x6162);
evalcond[0]=(((x6162*x6169))+(((-1.0)*x6170*x6173))+(((-1.0)*r22*x6172)));
evalcond[1]=(cj0+(((-1.0)*x6166*x6173))+(((-1.0)*r12*x6172))+((x6162*x6171)));
evalcond[2]=((((-1.0)*x6168*x6173))+(((-1.0)*sj0))+((x6162*x6165))+(((-1.0)*r02*x6172)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x6167))+((x6163*x6170))+(((-1.0)*r22*x6173))+(((-1.0)*x6169*x6172)));
evalcond[4]=((((-1.0)*cj0*sj2*x6167))+((x6163*x6168))+(((-1.0)*r02*x6173))+((cj0*x6164))+(((-1.0)*x6165*x6172)));
evalcond[5]=((((-1.0)*sj0*sj2*x6167))+((sj0*x6164))+(((-1.0)*r12*x6173))+(((-1.0)*x6171*x6172))+((x6163*x6166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6174=((1.0)*gconst128);
CheckValue<IkReal> x6175 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6174))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6175.valid){
continue;
}
CheckValue<IkReal> x6176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6174))+(((-1.0)*gconst127*r10)))),-1);
if(!x6176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6175.value)+(((1.5707963267949)*(x6176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6177=IKsin(j4);
IkReal x6178=IKcos(j4);
IkReal x6179=(cj1*cj2);
IkReal x6180=(gconst127*r01);
IkReal x6181=(gconst128*r10);
IkReal x6182=((1.0)*sj1);
IkReal x6183=(gconst128*r00);
IkReal x6184=(gconst127*r21);
IkReal x6185=(gconst128*r20);
IkReal x6186=(gconst127*r11);
IkReal x6187=((1.0)*x6178);
IkReal x6188=((1.0)*x6177);
evalcond[0]=((((-1.0)*r22*x6187))+((x6177*x6184))+(((-1.0)*x6185*x6188)));
evalcond[1]=(((x6177*x6186))+cj0+(((-1.0)*r12*x6187))+(((-1.0)*x6181*x6188)));
evalcond[2]=((((-1.0)*sj0))+((x6177*x6180))+(((-1.0)*r02*x6187))+(((-1.0)*x6183*x6188)));
evalcond[3]=((((-1.0)*r22*x6188))+(((-1.0)*x6184*x6187))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x6182))+((x6178*x6185)));
evalcond[4]=((((-1.0)*cj0*sj2*x6182))+(((-1.0)*r02*x6188))+((cj0*x6179))+((x6178*x6183))+(((-1.0)*x6180*x6187)));
evalcond[5]=(((sj0*x6179))+(((-1.0)*x6186*x6187))+(((-1.0)*r12*x6188))+(((-1.0)*sj0*sj2*x6182))+((x6178*x6181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6189=((-1.0)*r01);
IkReal x6191 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6191)==0){
continue;
}
IkReal x6190=pow(x6191,-0.5);
CheckValue<IkReal> x6192 = IKatan2WithCheck(IkReal(x6189),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6192.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6192.value))));
IkReal gconst130=(x6189*x6190);
IkReal gconst131=((1.0)*r00*x6190);
CheckValue<IkReal> x6193 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6193.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6193.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6194=((-1.0)*r01);
CheckValue<IkReal> x6197 = IKatan2WithCheck(IkReal(x6194),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6197.valid){
continue;
}
IkReal x6195=((1.0)*(x6197.value));
IkReal x6196=x6190;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6195)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6195)));
IkReal gconst130=(x6194*x6196);
IkReal gconst131=((1.0)*r00*x6196);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6198=((-1.0)*r01);
CheckValue<IkReal> x6201 = IKatan2WithCheck(IkReal(x6198),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6201.valid){
continue;
}
IkReal x6199=((1.0)*(x6201.value));
IkReal x6200=x6190;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6199)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6199)));
IkReal gconst130=(x6198*x6200);
IkReal gconst131=((1.0)*r00*x6200);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6202=((-1.0)*r01);
CheckValue<IkReal> x6205 = IKatan2WithCheck(IkReal(x6202),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6205.valid){
continue;
}
IkReal x6203=((1.0)*(x6205.value));
IkReal x6204=x6190;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6203)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6203)));
IkReal gconst130=(x6202*x6204);
IkReal gconst131=((1.0)*r00*x6204);
IkReal x6206=r02*r02;
IkReal x6207=(r12*sj0);
IkReal x6208=((1.0)*cj0);
IkReal x6209=x6190;
j4eval[0]=((IKabs(((((-1.0)*x6208*x6209))+((cj0*x6206*x6209))+((r02*x6207*x6209)))))+(IKabs(((((-1.0)*r02*x6208))+(((-1.0)*x6207))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6210=((1.0)*sj0);
IkReal x6211=((1.0)*gconst130);
CheckValue<IkReal> x6212=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6211))+(((-1.0)*gconst131*r21)))),-1);
if(!x6212.valid){
continue;
}
CheckValue<IkReal> x6213 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6210))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst130*r11*x6210))+(((-1.0)*cj0*r01*x6211))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6212.value)))+(x6213.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6214=IKsin(j4);
IkReal x6215=IKcos(j4);
IkReal x6216=(cj1*cj2);
IkReal x6217=(gconst130*r11);
IkReal x6218=(gconst130*r01);
IkReal x6219=((1.0)*sj1);
IkReal x6220=(gconst130*r21);
IkReal x6221=((1.0)*x6215);
IkReal x6222=(gconst131*x6215);
IkReal x6223=((1.0)*x6214);
IkReal x6224=(gconst131*x6223);
evalcond[0]=((((-1.0)*r20*x6224))+((x6214*x6220))+(((-1.0)*r22*x6221)));
evalcond[1]=(cj0+(((-1.0)*r12*x6221))+((x6214*x6217))+(((-1.0)*r10*x6224)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6224))+(((-1.0)*r02*x6221))+((x6214*x6218)));
evalcond[3]=(((r20*x6222))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x6219))+(((-1.0)*x6220*x6221))+(((-1.0)*r22*x6223)));
evalcond[4]=((((-1.0)*r02*x6223))+((r00*x6222))+(((-1.0)*cj0*sj2*x6219))+((cj0*x6216))+(((-1.0)*x6218*x6221)));
evalcond[5]=(((sj0*x6216))+(((-1.0)*r12*x6223))+((r10*x6222))+(((-1.0)*sj0*sj2*x6219))+(((-1.0)*x6217*x6221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6225=((1.0)*gconst131);
CheckValue<IkReal> x6226 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6226.valid){
continue;
}
CheckValue<IkReal> x6227=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6225))+(((-1.0)*gconst130*r10)))),-1);
if(!x6227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6226.value)+(((1.5707963267949)*(x6227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6228=IKsin(j4);
IkReal x6229=IKcos(j4);
IkReal x6230=(cj1*cj2);
IkReal x6231=(gconst130*r11);
IkReal x6232=(gconst130*r01);
IkReal x6233=((1.0)*sj1);
IkReal x6234=(gconst130*r21);
IkReal x6235=((1.0)*x6229);
IkReal x6236=(gconst131*x6229);
IkReal x6237=((1.0)*x6228);
IkReal x6238=(gconst131*x6237);
evalcond[0]=(((x6228*x6234))+(((-1.0)*r20*x6238))+(((-1.0)*r22*x6235)));
evalcond[1]=((((-1.0)*r12*x6235))+(((-1.0)*r10*x6238))+cj0+((x6228*x6231)));
evalcond[2]=((((-1.0)*sj0))+((x6228*x6232))+(((-1.0)*r00*x6238))+(((-1.0)*r02*x6235)));
evalcond[3]=(((r20*x6236))+(((-1.0)*cj2*x6233))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x6237))+(((-1.0)*x6234*x6235)));
evalcond[4]=((((-1.0)*x6232*x6235))+((r00*x6236))+(((-1.0)*r02*x6237))+(((-1.0)*cj0*sj2*x6233))+((cj0*x6230)));
evalcond[5]=((((-1.0)*r12*x6237))+((sj0*x6230))+(((-1.0)*x6231*x6235))+((r10*x6236))+(((-1.0)*sj0*sj2*x6233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6239=((1.0)*gconst131);
CheckValue<IkReal> x6240 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6240.valid){
continue;
}
CheckValue<IkReal> x6241=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6239))+(((-1.0)*gconst130*r00)))),-1);
if(!x6241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6240.value)+(((1.5707963267949)*(x6241.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6242=IKsin(j4);
IkReal x6243=IKcos(j4);
IkReal x6244=(cj1*cj2);
IkReal x6245=(gconst130*r11);
IkReal x6246=(gconst130*r01);
IkReal x6247=((1.0)*sj1);
IkReal x6248=(gconst130*r21);
IkReal x6249=((1.0)*x6243);
IkReal x6250=(gconst131*x6243);
IkReal x6251=((1.0)*x6242);
IkReal x6252=(gconst131*x6251);
evalcond[0]=(((x6242*x6248))+(((-1.0)*r22*x6249))+(((-1.0)*r20*x6252)));
evalcond[1]=(cj0+((x6242*x6245))+(((-1.0)*r12*x6249))+(((-1.0)*r10*x6252)));
evalcond[2]=((((-1.0)*r02*x6249))+(((-1.0)*sj0))+((x6242*x6246))+(((-1.0)*r00*x6252)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x6247))+(((-1.0)*r22*x6251))+((r20*x6250))+(((-1.0)*x6248*x6249)));
evalcond[4]=(((r00*x6250))+(((-1.0)*cj0*sj2*x6247))+(((-1.0)*r02*x6251))+((cj0*x6244))+(((-1.0)*x6246*x6249)));
evalcond[5]=((((-1.0)*sj0*sj2*x6247))+((r10*x6250))+((sj0*x6244))+(((-1.0)*x6245*x6249))+(((-1.0)*r12*x6251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6253=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6253;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6254=((1.0)*cj5);
IkReal x6255=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6254)));
j4eval[0]=x6255;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6254)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6255);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6256=cj5*cj5;
IkReal x6257=r01*r01;
IkReal x6258=(r01*sj5);
IkReal x6259=(cj5*r00);
IkReal x6260=((((-1.0)*(r02*r02)))+(((-1.0)*x6257))+((x6256*x6257))+(((2.0)*x6258*x6259))+(((-1.0)*x6256*(r00*r00))));
j4eval[0]=x6260;
j4eval[1]=IKsign(x6260);
j4eval[2]=((IKabs(r02))+(IKabs((x6259+(((-1.0)*x6258))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6261=cj5*cj5;
IkReal x6262=r01*r01;
IkReal x6263=(r01*sj5);
IkReal x6264=(cj5*r00);
CheckValue<IkReal> x6265=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6261*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x6262))+((x6261*x6262))+(((2.0)*x6263*x6264)))),-1);
if(!x6265.valid){
continue;
}
CheckValue<IkReal> x6266 = IKatan2WithCheck(IkReal((x6264+(((-1.0)*x6263)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6265.value)))+(x6266.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6267=IKsin(j4);
IkReal x6268=IKcos(j4);
IkReal x6269=(cj5*r10);
IkReal x6270=(r01*sj5);
IkReal x6271=((1.0)*sj1);
IkReal x6272=(cj5*r00);
IkReal x6273=(cj5*r20);
IkReal x6274=((1.0)*x6268);
IkReal x6275=((1.0)*x6267);
IkReal x6276=(sj5*x6267);
evalcond[0]=((((-1.0)*x6273*x6275))+((r21*x6276))+(((-1.0)*r22*x6274)));
evalcond[1]=((((-1.0)*x6269*x6275))+(((-1.0)*r12*x6274))+((r11*x6276)));
evalcond[2]=((((-1.0)*x6270*x6274))+((x6268*x6272))+(((-1.0)*r02*x6275)));
evalcond[3]=((-1.0)+(((-1.0)*x6272*x6275))+((x6267*x6270))+(((-1.0)*r02*x6274)));
evalcond[4]=((((-1.0)*sj2*x6271))+((x6268*x6269))+(((-1.0)*r11*sj5*x6274))+(((-1.0)*r12*x6275))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x6271))+((x6268*x6273))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x6274))+(((-1.0)*r22*x6275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6277=((1.0)*cj5);
CheckValue<IkReal> x6278 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6277))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6278.valid){
continue;
}
CheckValue<IkReal> x6279=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6277)))),-1);
if(!x6279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6278.value)+(((1.5707963267949)*(x6279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6280=IKsin(j4);
IkReal x6281=IKcos(j4);
IkReal x6282=(cj5*r10);
IkReal x6283=(r01*sj5);
IkReal x6284=((1.0)*sj1);
IkReal x6285=(cj5*r00);
IkReal x6286=(cj5*r20);
IkReal x6287=((1.0)*x6281);
IkReal x6288=((1.0)*x6280);
IkReal x6289=(sj5*x6280);
evalcond[0]=((((-1.0)*r22*x6287))+(((-1.0)*x6286*x6288))+((r21*x6289)));
evalcond[1]=((((-1.0)*x6282*x6288))+((r11*x6289))+(((-1.0)*r12*x6287)));
evalcond[2]=((((-1.0)*x6283*x6287))+(((-1.0)*r02*x6288))+((x6281*x6285)));
evalcond[3]=((-1.0)+(((-1.0)*x6285*x6288))+(((-1.0)*r02*x6287))+((x6280*x6283)));
evalcond[4]=((((-1.0)*r11*sj5*x6287))+(((-1.0)*sj2*x6284))+((cj1*cj2))+(((-1.0)*r12*x6288))+((x6281*x6282)));
evalcond[5]=((((-1.0)*cj2*x6284))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x6288))+(((-1.0)*r21*sj5*x6287))+((x6281*x6286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6290=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6290.valid){
continue;
}
CheckValue<IkReal> x6291 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6290.value)))+(x6291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6292=IKsin(j4);
IkReal x6293=IKcos(j4);
IkReal x6294=(cj5*r10);
IkReal x6295=(r01*sj5);
IkReal x6296=((1.0)*sj1);
IkReal x6297=(cj5*r00);
IkReal x6298=(cj5*r20);
IkReal x6299=((1.0)*x6293);
IkReal x6300=((1.0)*x6292);
IkReal x6301=(sj5*x6292);
evalcond[0]=((((-1.0)*x6298*x6300))+(((-1.0)*r22*x6299))+((r21*x6301)));
evalcond[1]=((((-1.0)*r12*x6299))+((r11*x6301))+(((-1.0)*x6294*x6300)));
evalcond[2]=((((-1.0)*r02*x6300))+((x6293*x6297))+(((-1.0)*x6295*x6299)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6299))+((x6292*x6295))+(((-1.0)*x6297*x6300)));
evalcond[4]=((((-1.0)*r12*x6300))+(((-1.0)*sj2*x6296))+((x6293*x6294))+((cj1*cj2))+(((-1.0)*r11*sj5*x6299)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x6299))+((x6293*x6298))+(((-1.0)*r22*x6300))+(((-1.0)*cj2*x6296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6302=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6302;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6302);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6303=((1.0)*cj5);
IkReal x6304=((((-1.0)*r21*x6303))+(((-1.0)*r20*sj5)));
j4eval[0]=x6304;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6303))+((r11*sj5))))));
j4eval[2]=IKsign(x6304);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6305=cj5*cj5;
IkReal x6306=r01*r01;
IkReal x6307=(cj5*r00);
IkReal x6308=(r01*sj5);
IkReal x6309=((((-1.0)*x6305*x6306))+x6306+(((-2.0)*x6307*x6308))+(r02*r02)+((x6305*(r00*r00))));
j4eval[0]=x6309;
j4eval[1]=((IKabs(r02))+(IKabs((x6307+(((-1.0)*x6308))))));
j4eval[2]=IKsign(x6309);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6310=cj5*cj5;
IkReal x6311=r01*r01;
IkReal x6312=(r01*sj5);
IkReal x6313=(cj5*r00);
CheckValue<IkReal> x6314 = IKatan2WithCheck(IkReal((x6313+(((-1.0)*x6312)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6314.valid){
continue;
}
CheckValue<IkReal> x6315=IKPowWithIntegerCheck(IKsign((x6311+(((-1.0)*x6310*x6311))+(r02*r02)+((x6310*(r00*r00)))+(((-2.0)*x6312*x6313)))),-1);
if(!x6315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6314.value)+(((1.5707963267949)*(x6315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6316=IKsin(j4);
IkReal x6317=IKcos(j4);
IkReal x6318=(cj5*r10);
IkReal x6319=(r01*sj5);
IkReal x6320=((1.0)*cj2);
IkReal x6321=(cj5*r00);
IkReal x6322=(cj5*r20);
IkReal x6323=((1.0)*x6317);
IkReal x6324=((1.0)*x6316);
IkReal x6325=(sj5*x6316);
evalcond[0]=((((-1.0)*r22*x6323))+(((-1.0)*x6322*x6324))+((r21*x6325)));
evalcond[1]=(((r11*x6325))+(((-1.0)*x6318*x6324))+(((-1.0)*r12*x6323)));
evalcond[2]=(((x6317*x6321))+(((-1.0)*r02*x6324))+(((-1.0)*x6319*x6323)));
evalcond[3]=((1.0)+((x6316*x6319))+(((-1.0)*x6321*x6324))+(((-1.0)*r02*x6323)));
evalcond[4]=((((-1.0)*r11*sj5*x6323))+((sj1*sj2))+(((-1.0)*r12*x6324))+(((-1.0)*cj1*x6320))+((x6317*x6318)));
evalcond[5]=(((x6317*x6322))+(((-1.0)*r21*sj5*x6323))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x6324))+(((-1.0)*sj1*x6320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6326=((1.0)*cj5);
CheckValue<IkReal> x6327=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6326))+(((-1.0)*r20*sj5)))),-1);
if(!x6327.valid){
continue;
}
CheckValue<IkReal> x6328 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6326)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6327.value)))+(x6328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6329=IKsin(j4);
IkReal x6330=IKcos(j4);
IkReal x6331=(cj5*r10);
IkReal x6332=(r01*sj5);
IkReal x6333=((1.0)*cj2);
IkReal x6334=(cj5*r00);
IkReal x6335=(cj5*r20);
IkReal x6336=((1.0)*x6330);
IkReal x6337=((1.0)*x6329);
IkReal x6338=(sj5*x6329);
evalcond[0]=((((-1.0)*x6335*x6337))+((r21*x6338))+(((-1.0)*r22*x6336)));
evalcond[1]=((((-1.0)*r12*x6336))+((r11*x6338))+(((-1.0)*x6331*x6337)));
evalcond[2]=(((x6330*x6334))+(((-1.0)*r02*x6337))+(((-1.0)*x6332*x6336)));
evalcond[3]=((1.0)+(((-1.0)*x6334*x6337))+(((-1.0)*r02*x6336))+((x6329*x6332)));
evalcond[4]=((((-1.0)*r12*x6337))+((x6330*x6331))+(((-1.0)*r11*sj5*x6336))+((sj1*sj2))+(((-1.0)*cj1*x6333)));
evalcond[5]=(((x6330*x6335))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x6336))+(((-1.0)*r22*x6337))+(((-1.0)*sj1*x6333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6339 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6339.valid){
continue;
}
CheckValue<IkReal> x6340=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6339.value)+(((1.5707963267949)*(x6340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6341=IKsin(j4);
IkReal x6342=IKcos(j4);
IkReal x6343=(cj5*r10);
IkReal x6344=(r01*sj5);
IkReal x6345=((1.0)*cj2);
IkReal x6346=(cj5*r00);
IkReal x6347=(cj5*r20);
IkReal x6348=((1.0)*x6342);
IkReal x6349=((1.0)*x6341);
IkReal x6350=(sj5*x6341);
evalcond[0]=((((-1.0)*r22*x6348))+((r21*x6350))+(((-1.0)*x6347*x6349)));
evalcond[1]=((((-1.0)*x6343*x6349))+((r11*x6350))+(((-1.0)*r12*x6348)));
evalcond[2]=(((x6342*x6346))+(((-1.0)*x6344*x6348))+(((-1.0)*r02*x6349)));
evalcond[3]=((1.0)+((x6341*x6344))+(((-1.0)*x6346*x6349))+(((-1.0)*r02*x6348)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r11*sj5*x6348))+((x6342*x6343))+(((-1.0)*r12*x6349))+(((-1.0)*cj1*x6345)));
evalcond[5]=((((-1.0)*r22*x6349))+(((-1.0)*sj1*x6345))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x6348))+((x6342*x6347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6351=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6351);
rxp1_1=(px*r21);
rxp1_2=(r11*x6351);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6352=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6352);
rxp1_1=(px*r21);
rxp1_2=(r11*x6352);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6353=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6353);
rxp1_1=(px*r21);
rxp1_2=(r11*x6353);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6356=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x6356.valid){
continue;
}
IkReal x6354=x6356.value;
IkReal x6355=(sj0*x6354);
cj4array[0]=(((sj1*sj2*x6355))+(((-1.0)*cj1*cj2*x6355)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6357=IKsin(j4);
IkReal x6358=IKcos(j4);
IkReal x6359=(r21*sj5);
IkReal x6360=(cj5*r20);
IkReal x6361=((1.0)*x6357);
IkReal x6362=((1.0)*x6358);
evalcond[0]=((-1.0)*r02*x6357);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6362)));
evalcond[2]=((((-1.0)*x6360*x6361))+((x6357*x6359)));
evalcond[3]=(((r11*sj5*x6357))+(((-1.0)*cj5*r10*x6361)));
evalcond[4]=(((x6358*x6360))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x6359*x6362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6364=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x6364.valid){
continue;
}
IkReal x6363=x6364.value;
cj4array[0]=(((cj2*sj1*x6363))+((cj1*sj2*x6363)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6365=IKsin(j4);
IkReal x6366=IKcos(j4);
IkReal x6367=(r11*sj5);
IkReal x6368=((1.0)*sj0);
IkReal x6369=((1.0)*x6366);
IkReal x6370=((1.0)*cj5*x6365);
evalcond[0]=((-1.0)*r02*x6365);
evalcond[1]=((((-1.0)*r02*x6369))+(((-1.0)*x6368)));
evalcond[2]=((((-1.0)*r20*x6370))+((r21*sj5*x6365)));
evalcond[3]=(((x6365*x6367))+(((-1.0)*r10*x6370)));
evalcond[4]=(((cj1*cj2*sj0))+((cj5*r10*x6366))+(((-1.0)*x6367*x6369))+(((-1.0)*sj1*sj2*x6368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6371=IKPowWithIntegerCheck(r02,-1);
if(!x6371.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6371.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6372=IKsin(j4);
IkReal x6373=IKcos(j4);
IkReal x6374=((1.0)*sj1);
IkReal x6375=(cj5*x6373);
IkReal x6376=(sj5*x6372);
IkReal x6377=((1.0)*sj5*x6373);
IkReal x6378=((1.0)*cj5*x6372);
evalcond[0]=((-1.0)*r02*x6372);
evalcond[1]=(((r21*x6376))+(((-1.0)*r20*x6378)));
evalcond[2]=(((r11*x6376))+(((-1.0)*r10*x6378)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r20*x6375))+(((-1.0)*cj2*x6374))+(((-1.0)*r21*x6377)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x6374))+(((-1.0)*r11*x6377))+((r10*x6375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6379=((1.0)*sj0);
IkReal x6380=((1.0)*cj0);
CheckValue<IkReal> x6381 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6379))+(((-1.0)*r02*x6380)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6379))+(((-1.0)*r01*sj5*x6380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6381.valid){
continue;
}
CheckValue<IkReal> x6382=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6381.value)+(((1.5707963267949)*(x6382.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6383=IKsin(j4);
IkReal x6384=IKcos(j4);
IkReal x6385=(cj1*cj2);
IkReal x6386=(cj5*r10);
IkReal x6387=(r01*sj5);
IkReal x6388=(cj5*r00);
IkReal x6389=((1.0)*sj1);
IkReal x6390=(cj5*r20);
IkReal x6391=((1.0)*x6384);
IkReal x6392=((1.0)*x6383);
IkReal x6393=(sj5*x6383);
evalcond[0]=((((-1.0)*r22*x6391))+((r21*x6393))+(((-1.0)*x6390*x6392)));
evalcond[1]=(((r11*x6393))+cj0+(((-1.0)*x6386*x6392))+(((-1.0)*r12*x6391)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6388*x6392))+(((-1.0)*r02*x6391))+((x6383*x6387)));
evalcond[3]=(((x6384*x6390))+(((-1.0)*r21*sj5*x6391))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x6389))+(((-1.0)*r22*x6392)));
evalcond[4]=(((cj0*x6385))+(((-1.0)*x6387*x6391))+((x6384*x6388))+(((-1.0)*r02*x6392))+(((-1.0)*cj0*sj2*x6389)));
evalcond[5]=(((sj0*x6385))+(((-1.0)*r11*sj5*x6391))+((x6384*x6386))+(((-1.0)*r12*x6392))+(((-1.0)*sj0*sj2*x6389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6394=((1.0)*cj5);
CheckValue<IkReal> x6395=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6394)))),-1);
if(!x6395.valid){
continue;
}
CheckValue<IkReal> x6396 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6394))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6395.value)))+(x6396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6397=IKsin(j4);
IkReal x6398=IKcos(j4);
IkReal x6399=(cj1*cj2);
IkReal x6400=(cj5*r10);
IkReal x6401=(r01*sj5);
IkReal x6402=(cj5*r00);
IkReal x6403=((1.0)*sj1);
IkReal x6404=(cj5*r20);
IkReal x6405=((1.0)*x6398);
IkReal x6406=((1.0)*x6397);
IkReal x6407=(sj5*x6397);
evalcond[0]=(((r21*x6407))+(((-1.0)*r22*x6405))+(((-1.0)*x6404*x6406)));
evalcond[1]=(cj0+(((-1.0)*x6400*x6406))+(((-1.0)*r12*x6405))+((r11*x6407)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6402*x6406))+(((-1.0)*r02*x6405))+((x6397*x6401)));
evalcond[3]=((((-1.0)*cj2*x6403))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x6405))+((x6398*x6404))+(((-1.0)*r22*x6406)));
evalcond[4]=((((-1.0)*cj0*sj2*x6403))+((cj0*x6399))+(((-1.0)*x6401*x6405))+(((-1.0)*r02*x6406))+((x6398*x6402)));
evalcond[5]=(((sj0*x6399))+((x6398*x6400))+(((-1.0)*r12*x6406))+(((-1.0)*r11*sj5*x6405))+(((-1.0)*sj0*sj2*x6403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6408=((1.0)*cj5);
CheckValue<IkReal> x6409 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6409.valid){
continue;
}
CheckValue<IkReal> x6410=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6408)))),-1);
if(!x6410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6409.value)+(((1.5707963267949)*(x6410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6411=IKsin(j4);
IkReal x6412=IKcos(j4);
IkReal x6413=(cj1*cj2);
IkReal x6414=(cj5*r10);
IkReal x6415=(r01*sj5);
IkReal x6416=(cj5*r00);
IkReal x6417=((1.0)*sj1);
IkReal x6418=(cj5*r20);
IkReal x6419=((1.0)*x6412);
IkReal x6420=((1.0)*x6411);
IkReal x6421=(sj5*x6411);
evalcond[0]=(((r21*x6421))+(((-1.0)*x6418*x6420))+(((-1.0)*r22*x6419)));
evalcond[1]=((((-1.0)*x6414*x6420))+cj0+((r11*x6421))+(((-1.0)*r12*x6419)));
evalcond[2]=((((-1.0)*sj0))+((x6411*x6415))+(((-1.0)*r02*x6419))+(((-1.0)*x6416*x6420)));
evalcond[3]=((((-1.0)*cj2*x6417))+(((-1.0)*r22*x6420))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x6419))+((x6412*x6418)));
evalcond[4]=((((-1.0)*x6415*x6419))+((cj0*x6413))+(((-1.0)*cj0*sj2*x6417))+((x6412*x6416))+(((-1.0)*r02*x6420)));
evalcond[5]=(((sj0*x6413))+(((-1.0)*r11*sj5*x6419))+((x6412*x6414))+(((-1.0)*sj0*sj2*x6417))+(((-1.0)*r12*x6420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6422=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6422;
j0eval[1]=IKsign(x6422);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6423=r21*r21;
IkReal x6424=cj5*cj5;
IkReal x6425=(cj1*sj2);
IkReal x6426=((1.0)*r22);
IkReal x6427=(cj5*r20);
IkReal x6428=(cj2*sj1);
IkReal x6429=(r21*sj5);
IkReal x6430=((((-1.0)*x6424*(r20*r20)))+(((-1.0)*x6423))+(((-1.0)*r22*x6426))+((x6423*x6424))+(((2.0)*x6427*x6429)));
j4eval[0]=x6430;
j4eval[1]=((IKabs(((((-1.0)*x6426*x6428))+(((-1.0)*x6425*x6426)))))+(IKabs((((x6425*x6427))+(((-1.0)*x6425*x6429))+((x6427*x6428))+(((-1.0)*x6428*x6429))))));
j4eval[2]=IKsign(x6430);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.65250965250965)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.65250965250965)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.65250965250965)*px))+IKsqr(((9.65250965250965)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.65250965250965)*px), ((9.65250965250965)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.1036)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.1036)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6431=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6431;
j4eval[1]=IKsign(x6431);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6432=((1.0)*cj5);
IkReal x6433=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6432)));
j4eval[0]=x6433;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x6432))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6434=cj5*cj5;
IkReal x6435=((1.0)*r20);
IkReal x6436=(r01*r21);
IkReal x6437=(r21*sj5);
IkReal x6438=(((cj5*r01*r20*sj5))+((cj5*r00*x6437))+(((-1.0)*r02*r22))+((x6434*x6436))+(((-1.0)*r00*x6434*x6435))+(((-1.0)*x6436)));
j4eval[0]=x6438;
j4eval[1]=((IKabs((((cj0*x6437))+(((-1.0)*cj0*cj5*x6435)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6438);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6439=cj5*cj5;
IkReal x6440=((1.0)*r20);
IkReal x6441=(r01*r21);
IkReal x6442=(r21*sj5);
CheckValue<IkReal> x6443=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x6442))+(((-1.0)*x6441))+(((-1.0)*r00*x6439*x6440))+((x6439*x6441)))),-1);
if(!x6443.valid){
continue;
}
CheckValue<IkReal> x6444 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x6442))+(((-1.0)*cj0*cj5*x6440)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6443.value)))+(x6444.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6445=IKcos(j4);
IkReal x6446=IKsin(j4);
IkReal x6447=(cj5*r00);
IkReal x6448=(cj5*r10);
IkReal x6449=(cj5*r20);
IkReal x6450=((1.0)*x6445);
IkReal x6451=((1.0)*x6446);
IkReal x6452=(sj5*x6445);
IkReal x6453=(sj5*x6446);
evalcond[0]=((((-1.0)*x6449*x6450))+((r21*x6452))+((r22*x6446)));
evalcond[1]=((((-1.0)*x6449*x6451))+((r21*x6453))+(((-1.0)*r22*x6450)));
evalcond[2]=(((r01*x6452))+cj0+(((-1.0)*x6447*x6450))+((r02*x6446)));
evalcond[3]=(((r12*x6446))+sj0+((r11*x6452))+(((-1.0)*x6448*x6450)));
evalcond[4]=(cj0+((r11*x6453))+(((-1.0)*x6448*x6451))+(((-1.0)*r12*x6450)));
evalcond[5]=((((-1.0)*sj0))+((r01*x6453))+(((-1.0)*r02*x6450))+(((-1.0)*x6447*x6451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6454=((1.0)*cj5);
CheckValue<IkReal> x6455 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6454)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6455.valid){
continue;
}
CheckValue<IkReal> x6456=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6454)))),-1);
if(!x6456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6455.value)+(((1.5707963267949)*(x6456.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6457=IKcos(j4);
IkReal x6458=IKsin(j4);
IkReal x6459=(cj5*r00);
IkReal x6460=(cj5*r10);
IkReal x6461=(cj5*r20);
IkReal x6462=((1.0)*x6457);
IkReal x6463=((1.0)*x6458);
IkReal x6464=(sj5*x6457);
IkReal x6465=(sj5*x6458);
evalcond[0]=(((r21*x6464))+((r22*x6458))+(((-1.0)*x6461*x6462)));
evalcond[1]=(((r21*x6465))+(((-1.0)*r22*x6462))+(((-1.0)*x6461*x6463)));
evalcond[2]=(cj0+((r01*x6464))+((r02*x6458))+(((-1.0)*x6459*x6462)));
evalcond[3]=(sj0+((r11*x6464))+(((-1.0)*x6460*x6462))+((r12*x6458)));
evalcond[4]=(cj0+(((-1.0)*r12*x6462))+((r11*x6465))+(((-1.0)*x6460*x6463)));
evalcond[5]=((((-1.0)*sj0))+((r01*x6465))+(((-1.0)*r02*x6462))+(((-1.0)*x6459*x6463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6466 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6466.valid){
continue;
}
CheckValue<IkReal> x6467=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6466.value)+(((1.5707963267949)*(x6467.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6468=IKcos(j4);
IkReal x6469=IKsin(j4);
IkReal x6470=(cj5*r00);
IkReal x6471=(cj5*r10);
IkReal x6472=(cj5*r20);
IkReal x6473=((1.0)*x6468);
IkReal x6474=((1.0)*x6469);
IkReal x6475=(sj5*x6468);
IkReal x6476=(sj5*x6469);
evalcond[0]=((((-1.0)*x6472*x6473))+((r22*x6469))+((r21*x6475)));
evalcond[1]=((((-1.0)*r22*x6473))+(((-1.0)*x6472*x6474))+((r21*x6476)));
evalcond[2]=(cj0+((r01*x6475))+(((-1.0)*x6470*x6473))+((r02*x6469)));
evalcond[3]=(sj0+((r11*x6475))+(((-1.0)*x6471*x6473))+((r12*x6469)));
evalcond[4]=((((-1.0)*r12*x6473))+cj0+((r11*x6476))+(((-1.0)*x6471*x6474)));
evalcond[5]=((((-1.0)*sj0))+((r01*x6476))+(((-1.0)*x6470*x6474))+(((-1.0)*r02*x6473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.65250965250965)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.65250965250965)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.65250965250965)*px))+IKsqr(((9.65250965250965)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.65250965250965)*px), ((9.65250965250965)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.1036)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.1036)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6477=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6477;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6477);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6478=((1.0)*cj5);
IkReal x6479=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6478)));
j4eval[0]=x6479;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6478))))));
j4eval[2]=IKsign(x6479);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6480=((1.0)*cj5);
IkReal x6481=((((-1.0)*r01*x6480))+(((-1.0)*r00*sj5)));
j4eval[0]=x6481;
j4eval[1]=IKsign(x6481);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6480))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6482=((1.0)*cj5);
CheckValue<IkReal> x6483=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6482))+(((-1.0)*r00*sj5)))),-1);
if(!x6483.valid){
continue;
}
CheckValue<IkReal> x6484 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x6482))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6483.value)))+(x6484.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6485=IKcos(j4);
IkReal x6486=IKsin(j4);
IkReal x6487=((1.0)*sj0);
IkReal x6488=(cj5*r00);
IkReal x6489=(cj5*r10);
IkReal x6490=(cj5*r20);
IkReal x6491=((1.0)*x6485);
IkReal x6492=((1.0)*x6486);
IkReal x6493=(sj5*x6485);
IkReal x6494=(sj5*x6486);
evalcond[0]=((((-1.0)*x6490*x6491))+((r22*x6486))+((r21*x6493)));
evalcond[1]=((((-1.0)*r22*x6491))+(((-1.0)*x6490*x6492))+((r21*x6494)));
evalcond[2]=(cj0+((r11*x6494))+(((-1.0)*x6489*x6492))+(((-1.0)*r12*x6491)));
evalcond[3]=(((r01*x6493))+(((-1.0)*x6488*x6491))+((r02*x6486))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x6487))+((r11*x6493))+(((-1.0)*x6489*x6491))+((r12*x6486)));
evalcond[5]=(((r01*x6494))+(((-1.0)*x6487))+(((-1.0)*x6488*x6492))+(((-1.0)*r02*x6491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6495=((1.0)*cj5);
CheckValue<IkReal> x6496=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6495))+(((-1.0)*r00*sj5)))),-1);
if(!x6496.valid){
continue;
}
CheckValue<IkReal> x6497 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6495)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6496.value)))+(x6497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6498=IKcos(j4);
IkReal x6499=IKsin(j4);
IkReal x6500=((1.0)*sj0);
IkReal x6501=(cj5*r00);
IkReal x6502=(cj5*r10);
IkReal x6503=(cj5*r20);
IkReal x6504=((1.0)*x6498);
IkReal x6505=((1.0)*x6499);
IkReal x6506=(sj5*x6498);
IkReal x6507=(sj5*x6499);
evalcond[0]=((((-1.0)*x6503*x6504))+((r21*x6506))+((r22*x6499)));
evalcond[1]=((((-1.0)*x6503*x6505))+((r21*x6507))+(((-1.0)*r22*x6504)));
evalcond[2]=((((-1.0)*r12*x6504))+cj0+(((-1.0)*x6502*x6505))+((r11*x6507)));
evalcond[3]=((((-1.0)*x6501*x6504))+((r02*x6499))+((r01*x6506))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x6500))+((r12*x6499))+(((-1.0)*x6502*x6504))+((r11*x6506)));
evalcond[5]=((((-1.0)*x6500))+(((-1.0)*x6501*x6505))+(((-1.0)*r02*x6504))+((r01*x6507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6508 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6508.valid){
continue;
}
CheckValue<IkReal> x6509=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6508.value)+(((1.5707963267949)*(x6509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6510=IKcos(j4);
IkReal x6511=IKsin(j4);
IkReal x6512=((1.0)*sj0);
IkReal x6513=(cj5*r00);
IkReal x6514=(cj5*r10);
IkReal x6515=(cj5*r20);
IkReal x6516=((1.0)*x6510);
IkReal x6517=((1.0)*x6511);
IkReal x6518=(sj5*x6510);
IkReal x6519=(sj5*x6511);
evalcond[0]=((((-1.0)*x6515*x6516))+((r21*x6518))+((r22*x6511)));
evalcond[1]=((((-1.0)*r22*x6516))+(((-1.0)*x6515*x6517))+((r21*x6519)));
evalcond[2]=(cj0+((r11*x6519))+(((-1.0)*x6514*x6517))+(((-1.0)*r12*x6516)));
evalcond[3]=(((r01*x6518))+((r02*x6511))+(((-1.0)*x6513*x6516))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x6518))+(((-1.0)*x6514*x6516))+((r12*x6511))+(((-1.0)*x6512)));
evalcond[5]=((((-1.0)*r02*x6516))+((r01*x6519))+(((-1.0)*x6512))+(((-1.0)*x6513*x6517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.10196423907778)*py))+(((-0.481777644178006)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.10196423907778)*px))+(((0.481777644178006)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.10196423907778)*py))+(((-0.481777644178006)*px))))+IKsqr(((((-2.10196423907778)*px))+(((0.481777644178006)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.10196423907778)*py))+(((-0.481777644178006)*px))), ((((-2.10196423907778)*px))+(((0.481777644178006)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6520=IKcos(j0);
IkReal x6521=IKsin(j0);
evalcond[0]=((((-0.1036)*x6521))+(((-1.0)*px))+(((-0.452)*x6520)));
evalcond[1]=((((0.1036)*x6520))+(((-1.0)*py))+(((-0.452)*x6521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6522=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6522;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6522);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6523=((1.0)*cj5);
IkReal x6524=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6523)));
j4eval[0]=x6524;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x6523))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6524);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6525=((1.0)*cj5);
IkReal x6526=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6525)));
j4eval[0]=x6526;
j4eval[1]=IKsign(x6526);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6525))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6527=((1.0)*cj5);
CheckValue<IkReal> x6528=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6527)))),-1);
if(!x6528.valid){
continue;
}
CheckValue<IkReal> x6529 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6527)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6528.value)))+(x6529.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6530=IKcos(j4);
IkReal x6531=IKsin(j4);
IkReal x6532=((1.0)*sj0);
IkReal x6533=(cj5*r00);
IkReal x6534=(cj5*r10);
IkReal x6535=(cj5*r20);
IkReal x6536=((1.0)*x6530);
IkReal x6537=((1.0)*x6531);
IkReal x6538=(sj5*x6530);
IkReal x6539=(sj5*x6531);
evalcond[0]=((((-1.0)*x6535*x6536))+((r21*x6538))+((r22*x6531)));
evalcond[1]=((((-1.0)*x6535*x6537))+((r21*x6539))+(((-1.0)*r22*x6536)));
evalcond[2]=((((-1.0)*x6534*x6537))+cj0+(((-1.0)*r12*x6536))+((r11*x6539)));
evalcond[3]=(((r02*x6531))+(((-1.0)*x6533*x6536))+((r01*x6538))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x6532))+(((-1.0)*x6534*x6536))+((r11*x6538))+((r12*x6531)));
evalcond[5]=((((-1.0)*x6532))+(((-1.0)*r02*x6536))+(((-1.0)*x6533*x6537))+((r01*x6539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6540=((1.0)*cj5);
CheckValue<IkReal> x6541=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6540)))),-1);
if(!x6541.valid){
continue;
}
CheckValue<IkReal> x6542 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6541.value)))+(x6542.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6543=IKcos(j4);
IkReal x6544=IKsin(j4);
IkReal x6545=((1.0)*sj0);
IkReal x6546=(cj5*r00);
IkReal x6547=(cj5*r10);
IkReal x6548=(cj5*r20);
IkReal x6549=((1.0)*x6543);
IkReal x6550=((1.0)*x6544);
IkReal x6551=(sj5*x6543);
IkReal x6552=(sj5*x6544);
evalcond[0]=((((-1.0)*x6548*x6549))+((r22*x6544))+((r21*x6551)));
evalcond[1]=((((-1.0)*r22*x6549))+(((-1.0)*x6548*x6550))+((r21*x6552)));
evalcond[2]=(cj0+(((-1.0)*r12*x6549))+((r11*x6552))+(((-1.0)*x6547*x6550)));
evalcond[3]=(((r02*x6544))+(((-1.0)*x6546*x6549))+((r01*x6551))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x6545))+((r11*x6551))+(((-1.0)*x6547*x6549))+((r12*x6544)));
evalcond[5]=((((-1.0)*x6545))+(((-1.0)*x6546*x6550))+(((-1.0)*r02*x6549))+((r01*x6552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6553 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6553.valid){
continue;
}
CheckValue<IkReal> x6554=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6553.value)+(((1.5707963267949)*(x6554.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6555=IKcos(j4);
IkReal x6556=IKsin(j4);
IkReal x6557=((1.0)*sj0);
IkReal x6558=(cj5*r00);
IkReal x6559=(cj5*r10);
IkReal x6560=(cj5*r20);
IkReal x6561=((1.0)*x6555);
IkReal x6562=((1.0)*x6556);
IkReal x6563=(sj5*x6555);
IkReal x6564=(sj5*x6556);
evalcond[0]=(((r21*x6563))+((r22*x6556))+(((-1.0)*x6560*x6561)));
evalcond[1]=((((-1.0)*r22*x6561))+((r21*x6564))+(((-1.0)*x6560*x6562)));
evalcond[2]=(cj0+((r11*x6564))+(((-1.0)*x6559*x6562))+(((-1.0)*r12*x6561)));
evalcond[3]=(((r02*x6556))+(((-1.0)*x6558*x6561))+((r01*x6563))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x6557))+((r11*x6563))+((r12*x6556))+(((-1.0)*x6559*x6561)));
evalcond[5]=((((-1.0)*x6557))+(((-1.0)*x6558*x6562))+(((-1.0)*r02*x6561))+((r01*x6564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.10196423907778)*py))+(((-0.481777644178006)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.10196423907778)*px))+(((0.481777644178006)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.10196423907778)*py))+(((-0.481777644178006)*px))))+IKsqr(((((-2.10196423907778)*px))+(((0.481777644178006)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.10196423907778)*py))+(((-0.481777644178006)*px))), ((((-2.10196423907778)*px))+(((0.481777644178006)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6565=IKcos(j0);
IkReal x6566=IKsin(j0);
evalcond[0]=((((-0.1036)*x6566))+(((-0.452)*x6565))+(((-1.0)*px)));
evalcond[1]=((((-0.452)*x6566))+(((-1.0)*py))+(((0.1036)*x6565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6567=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6567;
j4eval[1]=IKsign(x6567);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6568=((1.0)*cj5);
IkReal x6569=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6568)));
j4eval[0]=x6569;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6568)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6569);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6570=cj5*cj5;
IkReal x6571=((1.0)*r20);
IkReal x6572=(r01*r21);
IkReal x6573=(r21*sj5);
IkReal x6574=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x6573))+(((-1.0)*r00*x6570*x6571))+((x6570*x6572))+(((-1.0)*x6572)));
j4eval[0]=x6574;
j4eval[1]=((IKabs((((cj0*x6573))+(((-1.0)*cj0*cj5*x6571)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6575=cj5*cj5;
IkReal x6576=((1.0)*r20);
IkReal x6577=(r01*r21);
IkReal x6578=(r21*sj5);
CheckValue<IkReal> x6579 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x6578))+(((-1.0)*cj0*cj5*x6576)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6579.valid){
continue;
}
CheckValue<IkReal> x6580=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x6578))+((x6575*x6577))+(((-1.0)*x6577))+(((-1.0)*r00*x6575*x6576)))),-1);
if(!x6580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6579.value)+(((1.5707963267949)*(x6580.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6581=IKcos(j4);
IkReal x6582=IKsin(j4);
IkReal x6583=(cj5*r00);
IkReal x6584=(cj5*r10);
IkReal x6585=(cj5*r20);
IkReal x6586=((1.0)*x6581);
IkReal x6587=((1.0)*x6582);
IkReal x6588=(sj5*x6581);
IkReal x6589=(sj5*x6582);
evalcond[0]=(((r21*x6588))+((r22*x6582))+(((-1.0)*x6585*x6586)));
evalcond[1]=(((r21*x6589))+(((-1.0)*r22*x6586))+(((-1.0)*x6585*x6587)));
evalcond[2]=(((r02*x6582))+cj0+((r01*x6588))+(((-1.0)*x6583*x6586)));
evalcond[3]=((((-1.0)*x6584*x6586))+sj0+((r11*x6588))+((r12*x6582)));
evalcond[4]=((((-1.0)*x6584*x6587))+((r11*x6589))+cj0+(((-1.0)*r12*x6586)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6586))+((r01*x6589))+(((-1.0)*x6583*x6587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6590=((1.0)*cj5);
CheckValue<IkReal> x6591=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6590)))),-1);
if(!x6591.valid){
continue;
}
CheckValue<IkReal> x6592 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x6590))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6591.value)))+(x6592.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6593=IKcos(j4);
IkReal x6594=IKsin(j4);
IkReal x6595=(cj5*r00);
IkReal x6596=(cj5*r10);
IkReal x6597=(cj5*r20);
IkReal x6598=((1.0)*x6593);
IkReal x6599=((1.0)*x6594);
IkReal x6600=(sj5*x6593);
IkReal x6601=(sj5*x6594);
evalcond[0]=(((r22*x6594))+((r21*x6600))+(((-1.0)*x6597*x6598)));
evalcond[1]=(((r21*x6601))+(((-1.0)*r22*x6598))+(((-1.0)*x6597*x6599)));
evalcond[2]=(((r02*x6594))+cj0+((r01*x6600))+(((-1.0)*x6595*x6598)));
evalcond[3]=(((r12*x6594))+sj0+(((-1.0)*x6596*x6598))+((r11*x6600)));
evalcond[4]=(cj0+(((-1.0)*r12*x6598))+(((-1.0)*x6596*x6599))+((r11*x6601)));
evalcond[5]=((((-1.0)*sj0))+((r01*x6601))+(((-1.0)*r02*x6598))+(((-1.0)*x6595*x6599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6602 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6602.valid){
continue;
}
CheckValue<IkReal> x6603=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6602.value)+(((1.5707963267949)*(x6603.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6604=IKcos(j4);
IkReal x6605=IKsin(j4);
IkReal x6606=(cj5*r00);
IkReal x6607=(cj5*r10);
IkReal x6608=(cj5*r20);
IkReal x6609=((1.0)*x6604);
IkReal x6610=((1.0)*x6605);
IkReal x6611=(sj5*x6604);
IkReal x6612=(sj5*x6605);
evalcond[0]=(((r21*x6611))+((r22*x6605))+(((-1.0)*x6608*x6609)));
evalcond[1]=(((r21*x6612))+(((-1.0)*x6608*x6610))+(((-1.0)*r22*x6609)));
evalcond[2]=(cj0+((r01*x6611))+((r02*x6605))+(((-1.0)*x6606*x6609)));
evalcond[3]=(sj0+((r11*x6611))+(((-1.0)*x6607*x6609))+((r12*x6605)));
evalcond[4]=((((-1.0)*x6607*x6610))+cj0+((r11*x6612))+(((-1.0)*r12*x6609)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6606*x6610))+((r01*x6612))+(((-1.0)*r02*x6609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.65250965250965)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.65250965250965)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.65250965250965)*px))+IKsqr(((9.65250965250965)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.65250965250965)*px), ((9.65250965250965)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.1036)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.1036)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6613=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6613;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6613);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6614=((1.0)*cj5);
IkReal x6615=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6614)));
j4eval[0]=x6615;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6614))))));
j4eval[2]=IKsign(x6615);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6616=((1.0)*cj5);
IkReal x6617=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6616)));
j4eval[0]=x6617;
j4eval[1]=IKsign(x6617);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6616)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6618=((1.0)*cj5);
CheckValue<IkReal> x6619 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6618)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6619.valid){
continue;
}
CheckValue<IkReal> x6620=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6618)))),-1);
if(!x6620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6619.value)+(((1.5707963267949)*(x6620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6621=IKcos(j4);
IkReal x6622=IKsin(j4);
IkReal x6623=((1.0)*sj0);
IkReal x6624=(cj5*r00);
IkReal x6625=(cj5*r10);
IkReal x6626=(cj5*r20);
IkReal x6627=((1.0)*x6621);
IkReal x6628=((1.0)*x6622);
IkReal x6629=(sj5*x6621);
IkReal x6630=(sj5*x6622);
evalcond[0]=(((r22*x6622))+(((-1.0)*x6626*x6627))+((r21*x6629)));
evalcond[1]=(((r21*x6630))+(((-1.0)*r22*x6627))+(((-1.0)*x6626*x6628)));
evalcond[2]=((((-1.0)*r12*x6627))+cj0+((r11*x6630))+(((-1.0)*x6625*x6628)));
evalcond[3]=(((r02*x6622))+((r01*x6629))+(((-1.0)*x6624*x6627))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x6623))+((r12*x6622))+(((-1.0)*x6625*x6627))+((r11*x6629)));
evalcond[5]=((((-1.0)*x6623))+((r01*x6630))+(((-1.0)*r02*x6627))+(((-1.0)*x6624*x6628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6631=((1.0)*cj5);
CheckValue<IkReal> x6632=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6631)))),-1);
if(!x6632.valid){
continue;
}
CheckValue<IkReal> x6633 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6631)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6632.value)))+(x6633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6634=IKcos(j4);
IkReal x6635=IKsin(j4);
IkReal x6636=((1.0)*sj0);
IkReal x6637=(cj5*r00);
IkReal x6638=(cj5*r10);
IkReal x6639=(cj5*r20);
IkReal x6640=((1.0)*x6634);
IkReal x6641=((1.0)*x6635);
IkReal x6642=(sj5*x6634);
IkReal x6643=(sj5*x6635);
evalcond[0]=((((-1.0)*x6639*x6640))+((r21*x6642))+((r22*x6635)));
evalcond[1]=((((-1.0)*x6639*x6641))+(((-1.0)*r22*x6640))+((r21*x6643)));
evalcond[2]=((((-1.0)*x6638*x6641))+cj0+((r11*x6643))+(((-1.0)*r12*x6640)));
evalcond[3]=((((-1.0)*x6637*x6640))+((r01*x6642))+((r02*x6635))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x6638*x6640))+((r11*x6642))+((r12*x6635))+(((-1.0)*x6636)));
evalcond[5]=((((-1.0)*x6637*x6641))+((r01*x6643))+(((-1.0)*r02*x6640))+(((-1.0)*x6636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6644 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6644.valid){
continue;
}
CheckValue<IkReal> x6645=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6644.value)+(((1.5707963267949)*(x6645.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6646=IKcos(j4);
IkReal x6647=IKsin(j4);
IkReal x6648=((1.0)*sj0);
IkReal x6649=(cj5*r00);
IkReal x6650=(cj5*r10);
IkReal x6651=(cj5*r20);
IkReal x6652=((1.0)*x6646);
IkReal x6653=((1.0)*x6647);
IkReal x6654=(sj5*x6646);
IkReal x6655=(sj5*x6647);
evalcond[0]=((((-1.0)*x6651*x6652))+((r22*x6647))+((r21*x6654)));
evalcond[1]=((((-1.0)*x6651*x6653))+(((-1.0)*r22*x6652))+((r21*x6655)));
evalcond[2]=(cj0+((r11*x6655))+(((-1.0)*r12*x6652))+(((-1.0)*x6650*x6653)));
evalcond[3]=((((-1.0)*x6649*x6652))+((r01*x6654))+((r02*x6647))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x6648))+((r11*x6654))+(((-1.0)*x6650*x6652))+((r12*x6647)));
evalcond[5]=((((-1.0)*x6648))+(((-1.0)*x6649*x6653))+((r01*x6655))+(((-1.0)*r02*x6652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.65250965250965)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.65250965250965)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.65250965250965)*px))+IKsqr(((9.65250965250965)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.65250965250965)*px), ((9.65250965250965)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.1036)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.1036)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6656=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6656;
j4eval[1]=IKsign(x6656);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6657=((1.0)*cj5);
IkReal x6658=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6657)));
j4eval[0]=x6658;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6657))))));
j4eval[2]=IKsign(x6658);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6659=cj5*cj5;
IkReal x6660=((1.0)*r20);
IkReal x6661=(r01*r21);
IkReal x6662=(r21*sj5);
IkReal x6663=(((cj5*r01*r20*sj5))+((x6659*x6661))+(((-1.0)*r02*r22))+(((-1.0)*r00*x6659*x6660))+(((-1.0)*x6661))+((cj5*r00*x6662)));
j4eval[0]=x6663;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x6660))+((cj0*x6662))))));
j4eval[2]=IKsign(x6663);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6664=cj5*cj5;
IkReal x6665=((1.0)*r20);
IkReal x6666=(r01*r21);
IkReal x6667=(r21*sj5);
CheckValue<IkReal> x6668 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x6665))+((cj0*x6667)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6668.valid){
continue;
}
CheckValue<IkReal> x6669=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x6664*x6666))+(((-1.0)*r02*r22))+(((-1.0)*x6666))+((cj5*r00*x6667))+(((-1.0)*r00*x6664*x6665)))),-1);
if(!x6669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6668.value)+(((1.5707963267949)*(x6669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6670=IKcos(j4);
IkReal x6671=IKsin(j4);
IkReal x6672=(cj5*r00);
IkReal x6673=(cj5*r10);
IkReal x6674=(cj5*r20);
IkReal x6675=((1.0)*x6670);
IkReal x6676=((1.0)*x6671);
IkReal x6677=(sj5*x6670);
IkReal x6678=(sj5*x6671);
evalcond[0]=((((-1.0)*x6674*x6675))+((r22*x6671))+((r21*x6677)));
evalcond[1]=((((-1.0)*x6674*x6676))+(((-1.0)*r22*x6675))+((r21*x6678)));
evalcond[2]=((((-1.0)*x6672*x6675))+cj0+((r02*x6671))+((r01*x6677)));
evalcond[3]=((((-1.0)*x6673*x6675))+sj0+((r11*x6677))+((r12*x6671)));
evalcond[4]=((((-1.0)*x6673*x6676))+((r11*x6678))+cj0+(((-1.0)*r12*x6675)));
evalcond[5]=((((-1.0)*r02*x6675))+(((-1.0)*sj0))+(((-1.0)*x6672*x6676))+((r01*x6678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6679=((1.0)*cj5);
CheckValue<IkReal> x6680=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6679)))),-1);
if(!x6680.valid){
continue;
}
CheckValue<IkReal> x6681 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6679)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6680.value)))+(x6681.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6682=IKcos(j4);
IkReal x6683=IKsin(j4);
IkReal x6684=(cj5*r00);
IkReal x6685=(cj5*r10);
IkReal x6686=(cj5*r20);
IkReal x6687=((1.0)*x6682);
IkReal x6688=((1.0)*x6683);
IkReal x6689=(sj5*x6682);
IkReal x6690=(sj5*x6683);
evalcond[0]=(((r22*x6683))+((r21*x6689))+(((-1.0)*x6686*x6687)));
evalcond[1]=(((r21*x6690))+(((-1.0)*x6686*x6688))+(((-1.0)*r22*x6687)));
evalcond[2]=(((r02*x6683))+cj0+((r01*x6689))+(((-1.0)*x6684*x6687)));
evalcond[3]=(((r12*x6683))+sj0+((r11*x6689))+(((-1.0)*x6685*x6687)));
evalcond[4]=(((r11*x6690))+cj0+(((-1.0)*r12*x6687))+(((-1.0)*x6685*x6688)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6687))+(((-1.0)*x6684*x6688))+((r01*x6690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6691 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6691.valid){
continue;
}
CheckValue<IkReal> x6692=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6691.value)+(((1.5707963267949)*(x6692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6693=IKcos(j4);
IkReal x6694=IKsin(j4);
IkReal x6695=(cj5*r00);
IkReal x6696=(cj5*r10);
IkReal x6697=(cj5*r20);
IkReal x6698=((1.0)*x6693);
IkReal x6699=((1.0)*x6694);
IkReal x6700=(sj5*x6693);
IkReal x6701=(sj5*x6694);
evalcond[0]=((((-1.0)*x6697*x6698))+((r21*x6700))+((r22*x6694)));
evalcond[1]=((((-1.0)*x6697*x6699))+((r21*x6701))+(((-1.0)*r22*x6698)));
evalcond[2]=(cj0+((r01*x6700))+(((-1.0)*x6695*x6698))+((r02*x6694)));
evalcond[3]=(sj0+(((-1.0)*x6696*x6698))+((r12*x6694))+((r11*x6700)));
evalcond[4]=((((-1.0)*x6696*x6699))+cj0+((r11*x6701))+(((-1.0)*r12*x6698)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6698))+((r01*x6701))+(((-1.0)*x6695*x6699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.481777644178006)*px))+(((2.10196423907778)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.10196423907778)*px))+(((0.481777644178006)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.481777644178006)*px))+(((2.10196423907778)*py))))+IKsqr(((((2.10196423907778)*px))+(((0.481777644178006)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.481777644178006)*px))+(((2.10196423907778)*py))), ((((2.10196423907778)*px))+(((0.481777644178006)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6702=IKcos(j0);
IkReal x6703=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.452)*x6702))+(((-0.1036)*x6703)));
evalcond[1]=((((0.1036)*x6702))+(((-1.0)*py))+(((0.452)*x6703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6704=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6704;
j4eval[1]=IKsign(x6704);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6705=((1.0)*cj5);
IkReal x6706=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6705)));
j4eval[0]=x6706;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6705))))));
j4eval[2]=IKsign(x6706);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6707=cj5*cj5;
IkReal x6708=((1.0)*r20);
IkReal x6709=(r01*r21);
IkReal x6710=(r21*sj5);
IkReal x6711=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x6710))+((x6707*x6709))+(((-1.0)*x6709))+(((-1.0)*r00*x6707*x6708)));
j4eval[0]=x6711;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x6710))+(((-1.0)*cj0*cj5*x6708))))));
j4eval[2]=IKsign(x6711);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6712=cj5*cj5;
IkReal x6713=((1.0)*r20);
IkReal x6714=(r01*r21);
IkReal x6715=(r21*sj5);
CheckValue<IkReal> x6716=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x6712*x6713))+(((-1.0)*x6714))+((x6712*x6714))+((cj5*r00*x6715)))),-1);
if(!x6716.valid){
continue;
}
CheckValue<IkReal> x6717 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x6713))+((cj0*x6715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6716.value)))+(x6717.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6718=IKcos(j4);
IkReal x6719=IKsin(j4);
IkReal x6720=(cj5*r00);
IkReal x6721=(cj5*r10);
IkReal x6722=(cj5*r20);
IkReal x6723=((1.0)*x6718);
IkReal x6724=((1.0)*x6719);
IkReal x6725=(sj5*x6718);
IkReal x6726=(sj5*x6719);
evalcond[0]=(((r22*x6719))+(((-1.0)*x6722*x6723))+((r21*x6725)));
evalcond[1]=((((-1.0)*r22*x6723))+(((-1.0)*x6722*x6724))+((r21*x6726)));
evalcond[2]=(cj0+((r02*x6719))+(((-1.0)*x6720*x6723))+((r01*x6725)));
evalcond[3]=(((r11*x6725))+sj0+(((-1.0)*x6721*x6723))+((r12*x6719)));
evalcond[4]=(((r11*x6726))+cj0+(((-1.0)*r12*x6723))+(((-1.0)*x6721*x6724)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6723))+(((-1.0)*x6720*x6724))+((r01*x6726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6727=((1.0)*cj5);
CheckValue<IkReal> x6728=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6727)))),-1);
if(!x6728.valid){
continue;
}
CheckValue<IkReal> x6729 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6727)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6728.value)))+(x6729.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6730=IKcos(j4);
IkReal x6731=IKsin(j4);
IkReal x6732=(cj5*r00);
IkReal x6733=(cj5*r10);
IkReal x6734=(cj5*r20);
IkReal x6735=((1.0)*x6730);
IkReal x6736=((1.0)*x6731);
IkReal x6737=(sj5*x6730);
IkReal x6738=(sj5*x6731);
evalcond[0]=(((r22*x6731))+((r21*x6737))+(((-1.0)*x6734*x6735)));
evalcond[1]=(((r21*x6738))+(((-1.0)*r22*x6735))+(((-1.0)*x6734*x6736)));
evalcond[2]=(cj0+((r01*x6737))+(((-1.0)*x6732*x6735))+((r02*x6731)));
evalcond[3]=(sj0+((r11*x6737))+(((-1.0)*x6733*x6735))+((r12*x6731)));
evalcond[4]=(cj0+(((-1.0)*r12*x6735))+((r11*x6738))+(((-1.0)*x6733*x6736)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6735))+((r01*x6738))+(((-1.0)*x6732*x6736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6739 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6739.valid){
continue;
}
CheckValue<IkReal> x6740=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6739.value)+(((1.5707963267949)*(x6740.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6741=IKcos(j4);
IkReal x6742=IKsin(j4);
IkReal x6743=(cj5*r00);
IkReal x6744=(cj5*r10);
IkReal x6745=(cj5*r20);
IkReal x6746=((1.0)*x6741);
IkReal x6747=((1.0)*x6742);
IkReal x6748=(sj5*x6741);
IkReal x6749=(sj5*x6742);
evalcond[0]=(((r21*x6748))+(((-1.0)*x6745*x6746))+((r22*x6742)));
evalcond[1]=(((r21*x6749))+(((-1.0)*r22*x6746))+(((-1.0)*x6745*x6747)));
evalcond[2]=(((r02*x6742))+cj0+(((-1.0)*x6743*x6746))+((r01*x6748)));
evalcond[3]=((((-1.0)*x6744*x6746))+sj0+((r11*x6748))+((r12*x6742)));
evalcond[4]=((((-1.0)*x6744*x6747))+(((-1.0)*r12*x6746))+cj0+((r11*x6749)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6746))+(((-1.0)*x6743*x6747))+((r01*x6749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.481777644178006)*px))+(((2.10196423907778)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.10196423907778)*px))+(((0.481777644178006)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.481777644178006)*px))+(((2.10196423907778)*py))))+IKsqr(((((2.10196423907778)*px))+(((0.481777644178006)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.481777644178006)*px))+(((2.10196423907778)*py))), ((((2.10196423907778)*px))+(((0.481777644178006)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6750=IKcos(j0);
IkReal x6751=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.1036)*x6751))+(((0.452)*x6750)));
evalcond[1]=((((-1.0)*py))+(((0.1036)*x6750))+(((0.452)*x6751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6752=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6752;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6752);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6753=((1.0)*cj5);
IkReal x6754=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6753)));
j4eval[0]=x6754;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6753))))));
j4eval[2]=IKsign(x6754);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6755=((1.0)*cj5);
IkReal x6756=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6755)));
j4eval[0]=x6756;
j4eval[1]=IKsign(x6756);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6755))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6757=((1.0)*cj5);
CheckValue<IkReal> x6758=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6757)))),-1);
if(!x6758.valid){
continue;
}
CheckValue<IkReal> x6759 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x6757))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6758.value)))+(x6759.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6760=IKcos(j4);
IkReal x6761=IKsin(j4);
IkReal x6762=((1.0)*sj0);
IkReal x6763=(cj5*r00);
IkReal x6764=(cj5*r10);
IkReal x6765=(cj5*r20);
IkReal x6766=((1.0)*x6760);
IkReal x6767=((1.0)*x6761);
IkReal x6768=(sj5*x6760);
IkReal x6769=(sj5*x6761);
evalcond[0]=(((r22*x6761))+(((-1.0)*x6765*x6766))+((r21*x6768)));
evalcond[1]=((((-1.0)*r22*x6766))+(((-1.0)*x6765*x6767))+((r21*x6769)));
evalcond[2]=(cj0+((r11*x6769))+(((-1.0)*x6764*x6767))+(((-1.0)*r12*x6766)));
evalcond[3]=(((r01*x6768))+((r02*x6761))+(((-1.0)*x6763*x6766))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x6761))+((r11*x6768))+(((-1.0)*x6762))+(((-1.0)*x6764*x6766)));
evalcond[5]=(((r01*x6769))+(((-1.0)*x6762))+(((-1.0)*r02*x6766))+(((-1.0)*x6763*x6767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6770=((1.0)*cj5);
CheckValue<IkReal> x6771 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6771.valid){
continue;
}
CheckValue<IkReal> x6772=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6770))+(((-1.0)*r00*sj5)))),-1);
if(!x6772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6771.value)+(((1.5707963267949)*(x6772.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6773=IKcos(j4);
IkReal x6774=IKsin(j4);
IkReal x6775=((1.0)*sj0);
IkReal x6776=(cj5*r00);
IkReal x6777=(cj5*r10);
IkReal x6778=(cj5*r20);
IkReal x6779=((1.0)*x6773);
IkReal x6780=((1.0)*x6774);
IkReal x6781=(sj5*x6773);
IkReal x6782=(sj5*x6774);
evalcond[0]=((((-1.0)*x6778*x6779))+((r22*x6774))+((r21*x6781)));
evalcond[1]=((((-1.0)*r22*x6779))+(((-1.0)*x6778*x6780))+((r21*x6782)));
evalcond[2]=(cj0+((r11*x6782))+(((-1.0)*r12*x6779))+(((-1.0)*x6777*x6780)));
evalcond[3]=(((r02*x6774))+(((-1.0)*x6776*x6779))+((r01*x6781))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x6775))+((r12*x6774))+((r11*x6781))+(((-1.0)*x6777*x6779)));
evalcond[5]=((((-1.0)*x6775))+(((-1.0)*r02*x6779))+((r01*x6782))+(((-1.0)*x6776*x6780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6783 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6783.valid){
continue;
}
CheckValue<IkReal> x6784=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6783.value)+(((1.5707963267949)*(x6784.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6785=IKcos(j4);
IkReal x6786=IKsin(j4);
IkReal x6787=((1.0)*sj0);
IkReal x6788=(cj5*r00);
IkReal x6789=(cj5*r10);
IkReal x6790=(cj5*r20);
IkReal x6791=((1.0)*x6785);
IkReal x6792=((1.0)*x6786);
IkReal x6793=(sj5*x6785);
IkReal x6794=(sj5*x6786);
evalcond[0]=(((r21*x6793))+((r22*x6786))+(((-1.0)*x6790*x6791)));
evalcond[1]=(((r21*x6794))+(((-1.0)*r22*x6791))+(((-1.0)*x6790*x6792)));
evalcond[2]=(cj0+(((-1.0)*x6789*x6792))+((r11*x6794))+(((-1.0)*r12*x6791)));
evalcond[3]=(((r01*x6793))+(((-1.0)*x6788*x6791))+((r02*x6786))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x6787))+((r12*x6786))+(((-1.0)*x6789*x6791))+((r11*x6793)));
evalcond[5]=((((-1.0)*x6787))+((r01*x6794))+(((-1.0)*x6788*x6792))+(((-1.0)*r02*x6791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6795=(cj2*sj1);
IkReal x6796=(cj5*r01);
IkReal x6797=(cj1*sj2);
IkReal x6798=((2500.0)*px);
IkReal x6799=((1130.0)*sj1);
IkReal x6800=(r00*sj5);
CheckValue<IkReal> x6801=IKPowWithIntegerCheck(((((-259.0)*x6797))+(((-259.0)*x6795))),-1);
if(!x6801.valid){
continue;
}
CheckValue<IkReal> x6802=IKPowWithIntegerCheck(((((-1.0)*x6797))+(((-1.0)*x6795))),-1);
if(!x6802.valid){
continue;
}
if( IKabs(((x6801.value)*(((((-834.0)*x6795*x6796))+(((-834.0)*x6797*x6800))+((x6795*x6798))+(((-834.0)*x6795*x6800))+(((-834.0)*x6796*x6797))+(((-1.0)*x6799*x6800))+((x6797*x6798))+(((-1.0)*x6796*x6799)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6802.value)*((x6796+x6800)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6801.value)*(((((-834.0)*x6795*x6796))+(((-834.0)*x6797*x6800))+((x6795*x6798))+(((-834.0)*x6795*x6800))+(((-834.0)*x6796*x6797))+(((-1.0)*x6799*x6800))+((x6797*x6798))+(((-1.0)*x6796*x6799))))))+IKsqr(((x6802.value)*((x6796+x6800))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x6801.value)*(((((-834.0)*x6795*x6796))+(((-834.0)*x6797*x6800))+((x6795*x6798))+(((-834.0)*x6795*x6800))+(((-834.0)*x6796*x6797))+(((-1.0)*x6799*x6800))+((x6797*x6798))+(((-1.0)*x6796*x6799))))), ((x6802.value)*((x6796+x6800))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6803=IKcos(j0);
IkReal x6804=IKsin(j0);
IkReal x6805=(r00*sj5);
IkReal x6806=((1.0)*cj5);
IkReal x6807=(r10*sj5);
IkReal x6808=((0.1134)*cj5);
IkReal x6809=((1.0)*cj2);
IkReal x6810=((0.447)*cj2*sj1);
IkReal x6811=((1.0)*cj1*sj2);
IkReal x6812=(sj1*x6803);
IkReal x6813=((0.447)*cj1*sj2);
IkReal x6814=(sj1*x6804);
evalcond[0]=((((-1.0)*x6809*x6812))+(((-1.0)*r01*x6806))+(((-1.0)*x6805))+(((-1.0)*x6803*x6811)));
evalcond[1]=((((-1.0)*r11*x6806))+(((-1.0)*x6809*x6814))+(((-1.0)*x6807))+(((-1.0)*x6804*x6811)));
evalcond[2]=((((-0.1134)*x6805))+(((-1.0)*px))+(((-0.1036)*x6804))+(((-1.0)*r01*x6808))+(((-0.452)*x6812))+(((-1.0)*x6803*x6813))+(((-1.0)*x6803*x6810)));
evalcond[3]=((((-0.1134)*x6807))+(((-1.0)*r11*x6808))+(((-1.0)*py))+(((-0.452)*x6814))+(((-1.0)*x6804*x6810))+(((-1.0)*x6804*x6813))+(((0.1036)*x6803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6815=((1.0)*cj5);
IkReal x6816=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6815)));
j4eval[0]=x6816;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6815)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6817=((1.0)*cj5);
IkReal x6818=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6817)));
j4eval[0]=x6818;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6817))))));
j4eval[2]=IKsign(x6818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6819=((1.0)*sj0);
IkReal x6820=((1.0)*cj0);
IkReal x6821=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6821;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x6819))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6820)))))+(IKabs(((((-1.0)*r02*x6820))+(((-1.0)*r12*x6819))))));
j4eval[2]=IKsign(x6821);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6822=((-1.0)*r20);
IkReal x6824 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6824)==0){
continue;
}
IkReal x6823=pow(x6824,-0.5);
CheckValue<IkReal> x6825 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6822),IKFAST_ATAN2_MAGTHRESH);
if(!x6825.valid){
continue;
}
IkReal gconst132=((-1.0)*(x6825.value));
IkReal gconst133=(r21*x6823);
IkReal gconst134=(x6822*x6823);
CheckValue<IkReal> x6826 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6826.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6826.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6827=((-1.0)*r20);
IkReal x6828=x6823;
CheckValue<IkReal> x6830 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6827),IKFAST_ATAN2_MAGTHRESH);
if(!x6830.valid){
continue;
}
IkReal x6829=((-1.0)*(x6830.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x6829;
IkReal gconst132=x6829;
IkReal gconst133=(r21*x6828);
IkReal gconst134=(x6827*x6828);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6831=((-1.0)*r20);
IkReal x6832=x6823;
CheckValue<IkReal> x6834 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6831),IKFAST_ATAN2_MAGTHRESH);
if(!x6834.valid){
continue;
}
IkReal x6833=((-1.0)*(x6834.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x6833;
IkReal gconst132=x6833;
IkReal gconst133=(r21*x6832);
IkReal gconst134=(x6831*x6832);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6835=((-1.0)*r20);
IkReal x6836=x6823;
CheckValue<IkReal> x6838 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6835),IKFAST_ATAN2_MAGTHRESH);
if(!x6838.valid){
continue;
}
IkReal x6837=((-1.0)*(x6838.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x6837;
IkReal gconst132=x6837;
IkReal gconst133=(r21*x6836);
IkReal gconst134=(x6835*x6836);
IkReal x6839=((1.0)*(r22*r22));
CheckValue<IkReal> x6843=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6839))),-1);
if(!x6843.valid){
continue;
}
IkReal x6840=x6843.value;
IkReal x6841=((1.0)*x6840);
IkReal x6842=((((-1.0)*x6841*(r21*r21*r21*r21)))+(((-2.0)*x6840*(r20*r20)*(r21*r21)))+(((-1.0)*x6841*(r20*r20*r20*r20)))+(((-1.0)*x6839)));
j4eval[0]=x6842;
j4eval[1]=IKsign(x6842);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6844=(gconst133*r21);
IkReal x6845=(gconst134*r20);
IkReal x6846=((1.0)*cj1*sj2);
IkReal x6847=((1.0)*cj2*sj1);
CheckValue<IkReal> x6848 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6846))+(((-1.0)*r22*x6847)))),IkReal((((cj1*sj2*x6845))+(((-1.0)*x6844*x6847))+(((-1.0)*x6844*x6846))+((cj2*sj1*x6845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6848.valid){
continue;
}
CheckValue<IkReal> x6849=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6845*x6845)))+(((-1.0)*(x6844*x6844)))+(((2.0)*x6844*x6845))+(((-1.0)*(r22*r22))))),-1);
if(!x6849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6848.value)+(((1.5707963267949)*(x6849.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6850=IKsin(j4);
IkReal x6851=IKcos(j4);
IkReal x6852=(gconst134*r00);
IkReal x6853=(cj1*cj2);
IkReal x6854=((1.0)*sj1);
IkReal x6855=(gconst134*r10);
IkReal x6856=(gconst134*r20);
IkReal x6857=((1.0)*x6851);
IkReal x6858=((1.0)*x6850);
IkReal x6859=(gconst133*x6851);
IkReal x6860=(gconst133*x6850);
evalcond[0]=((((-1.0)*x6856*x6858))+((r21*x6860))+(((-1.0)*r22*x6857)));
evalcond[1]=(((r11*x6860))+cj0+(((-1.0)*r12*x6857))+(((-1.0)*x6855*x6858)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6857))+(((-1.0)*x6852*x6858))+((r01*x6860)));
evalcond[3]=(((r21*x6859))+(((-1.0)*x6856*x6857))+((r22*x6850))+(((-1.0)*cj2*x6854))+(((-1.0)*cj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj2*x6854))+((r02*x6850))+((r01*x6859))+(((-1.0)*x6852*x6857))+((cj0*x6853)));
evalcond[5]=(((sj0*x6853))+((r12*x6850))+(((-1.0)*x6855*x6857))+((r11*x6859))+(((-1.0)*sj0*sj2*x6854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6861=((1.0)*gconst134);
CheckValue<IkReal> x6862 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6861))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6862.valid){
continue;
}
CheckValue<IkReal> x6863=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x6861)))),-1);
if(!x6863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6862.value)+(((1.5707963267949)*(x6863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6864=IKsin(j4);
IkReal x6865=IKcos(j4);
IkReal x6866=(gconst134*r00);
IkReal x6867=(cj1*cj2);
IkReal x6868=((1.0)*sj1);
IkReal x6869=(gconst134*r10);
IkReal x6870=(gconst134*r20);
IkReal x6871=((1.0)*x6865);
IkReal x6872=((1.0)*x6864);
IkReal x6873=(gconst133*x6865);
IkReal x6874=(gconst133*x6864);
evalcond[0]=(((r21*x6874))+(((-1.0)*r22*x6871))+(((-1.0)*x6870*x6872)));
evalcond[1]=(((r11*x6874))+(((-1.0)*x6869*x6872))+cj0+(((-1.0)*r12*x6871)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6871))+((r01*x6874))+(((-1.0)*x6866*x6872)));
evalcond[3]=((((-1.0)*cj2*x6868))+((r22*x6864))+((r21*x6873))+(((-1.0)*cj1*sj2))+(((-1.0)*x6870*x6871)));
evalcond[4]=(((r02*x6864))+(((-1.0)*cj0*sj2*x6868))+((cj0*x6867))+((r01*x6873))+(((-1.0)*x6866*x6871)));
evalcond[5]=(((sj0*x6867))+((r11*x6873))+(((-1.0)*x6869*x6871))+(((-1.0)*sj0*sj2*x6868))+((r12*x6864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6875=((1.0)*gconst134);
CheckValue<IkReal> x6876 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6875))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6876.valid){
continue;
}
CheckValue<IkReal> x6877=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x6875)))),-1);
if(!x6877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6876.value)+(((1.5707963267949)*(x6877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6878=IKsin(j4);
IkReal x6879=IKcos(j4);
IkReal x6880=(gconst134*r00);
IkReal x6881=(cj1*cj2);
IkReal x6882=((1.0)*sj1);
IkReal x6883=(gconst134*r10);
IkReal x6884=(gconst134*r20);
IkReal x6885=((1.0)*x6879);
IkReal x6886=((1.0)*x6878);
IkReal x6887=(gconst133*x6879);
IkReal x6888=(gconst133*x6878);
evalcond[0]=((((-1.0)*x6884*x6886))+((r21*x6888))+(((-1.0)*r22*x6885)));
evalcond[1]=(((r11*x6888))+cj0+(((-1.0)*x6883*x6886))+(((-1.0)*r12*x6885)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6885))+((r01*x6888))+(((-1.0)*x6880*x6886)));
evalcond[3]=(((r22*x6878))+(((-1.0)*x6884*x6885))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x6882))+((r21*x6887)));
evalcond[4]=(((r02*x6878))+((cj0*x6881))+(((-1.0)*cj0*sj2*x6882))+((r01*x6887))+(((-1.0)*x6880*x6885)));
evalcond[5]=(((r11*x6887))+(((-1.0)*sj0*sj2*x6882))+((r12*x6878))+((sj0*x6881))+(((-1.0)*x6883*x6885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6889=((-1.0)*r21);
IkReal x6891 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6891)==0){
continue;
}
IkReal x6890=pow(x6891,-0.5);
CheckValue<IkReal> x6892 = IKatan2WithCheck(IkReal(x6889),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6892.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x6892.value))));
IkReal gconst136=(x6889*x6890);
IkReal gconst137=((1.0)*r20*x6890);
CheckValue<IkReal> x6893 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6893.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6893.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6894=((-1.0)*r21);
CheckValue<IkReal> x6897 = IKatan2WithCheck(IkReal(x6894),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6897.valid){
continue;
}
IkReal x6895=((1.0)*(x6897.value));
IkReal x6896=x6890;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6895)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6895)));
IkReal gconst136=(x6894*x6896);
IkReal gconst137=((1.0)*r20*x6896);
IkReal x6898=r22*r22;
IkReal x6899=((1.0)*x6898);
CheckValue<IkReal> x6903=IKPowWithIntegerCheck(((-1.0)+x6898),-1);
if(!x6903.valid){
continue;
}
IkReal x6900=x6903.value;
if((((1.0)+(((-1.0)*x6899)))) < -0.00001)
continue;
IkReal x6901=IKsqrt(((1.0)+(((-1.0)*x6899))));
IkReal x6902=(cj0*x6900*x6901);
j4eval[0]=((IKabs(((((-1.0)*x6899*x6902))+x6902)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6904=((-1.0)*r21);
CheckValue<IkReal> x6907 = IKatan2WithCheck(IkReal(x6904),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6907.valid){
continue;
}
IkReal x6905=((1.0)*(x6907.value));
IkReal x6906=x6890;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6905)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6905)));
IkReal gconst136=(x6904*x6906);
IkReal gconst137=((1.0)*r20*x6906);
IkReal x6908=r22*r22;
IkReal x6909=((1.0)*x6908);
CheckValue<IkReal> x6913=IKPowWithIntegerCheck(((-1.0)+x6908),-1);
if(!x6913.valid){
continue;
}
IkReal x6910=x6913.value;
if((((1.0)+(((-1.0)*x6909)))) < -0.00001)
continue;
IkReal x6911=IKsqrt(((1.0)+(((-1.0)*x6909))));
IkReal x6912=(sj0*x6910*x6911);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x6909*x6912))+x6912))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6914=((-1.0)*r21);
CheckValue<IkReal> x6917 = IKatan2WithCheck(IkReal(x6914),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6917.valid){
continue;
}
IkReal x6915=((1.0)*(x6917.value));
IkReal x6916=x6890;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6915)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6915)));
IkReal gconst136=(x6914*x6916);
IkReal gconst137=((1.0)*r20*x6916);
IkReal x6918=r22*r22;
IkReal x6919=(r12*sj0);
IkReal x6920=(cj0*r02);
CheckValue<IkReal> x6924=IKPowWithIntegerCheck(((-1.0)+x6918),-1);
if(!x6924.valid){
continue;
}
IkReal x6921=x6924.value;
if((((1.0)+(((-1.0)*x6918)))) < -0.00001)
continue;
IkReal x6922=IKsqrt(((1.0)+(((-1.0)*x6918))));
IkReal x6923=(r22*x6921*x6922);
j4eval[0]=0;
j4eval[1]=((IKabs((((x6919*x6923))+((x6920*x6923)))))+(IKabs(((((-1.0)*x6920))+(((-1.0)*x6919))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6925=((1.0)*sj0);
IkReal x6926=((1.0)*cj0);
CheckValue<IkReal> x6927=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x6927.valid){
continue;
}
CheckValue<IkReal> x6928 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6926))+(((-1.0)*r12*x6925)))),IkReal(((((-1.0)*gconst136*r11*x6925))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r01*x6926))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6927.value)))+(x6928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6929=IKsin(j4);
IkReal x6930=IKcos(j4);
IkReal x6931=(cj1*cj2);
IkReal x6932=(gconst136*r01);
IkReal x6933=(gconst137*r20);
IkReal x6934=(gconst137*r10);
IkReal x6935=((1.0)*sj1);
IkReal x6936=(gconst137*r00);
IkReal x6937=((1.0)*x6930);
IkReal x6938=((1.0)*x6929);
IkReal x6939=(gconst136*x6929);
IkReal x6940=(gconst136*x6930);
evalcond[0]=((((-1.0)*r22*x6937))+((r21*x6939))+(((-1.0)*x6933*x6938)));
evalcond[1]=(cj0+((r11*x6939))+(((-1.0)*x6934*x6938))+(((-1.0)*r12*x6937)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6937))+((x6929*x6932))+(((-1.0)*x6936*x6938)));
evalcond[3]=((((-1.0)*cj2*x6935))+(((-1.0)*cj1*sj2))+((r22*x6929))+((r21*x6940))+(((-1.0)*x6933*x6937)));
evalcond[4]=((((-1.0)*cj0*sj2*x6935))+((x6930*x6932))+((r02*x6929))+((cj0*x6931))+(((-1.0)*x6936*x6937)));
evalcond[5]=(((sj0*x6931))+(((-1.0)*x6934*x6937))+((r12*x6929))+(((-1.0)*sj0*sj2*x6935))+((r11*x6940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6941=((1.0)*gconst137);
CheckValue<IkReal> x6942 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*r20*sj0*x6941)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6942.valid){
continue;
}
CheckValue<IkReal> x6943=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6941))+(((-1.0)*gconst136*r10)))),-1);
if(!x6943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6942.value)+(((1.5707963267949)*(x6943.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6944=IKsin(j4);
IkReal x6945=IKcos(j4);
IkReal x6946=(cj1*cj2);
IkReal x6947=(gconst136*r01);
IkReal x6948=(gconst137*r20);
IkReal x6949=(gconst137*r10);
IkReal x6950=((1.0)*sj1);
IkReal x6951=(gconst137*r00);
IkReal x6952=((1.0)*x6945);
IkReal x6953=((1.0)*x6944);
IkReal x6954=(gconst136*x6944);
IkReal x6955=(gconst136*x6945);
evalcond[0]=((((-1.0)*x6948*x6953))+(((-1.0)*r22*x6952))+((r21*x6954)));
evalcond[1]=(cj0+(((-1.0)*r12*x6952))+(((-1.0)*x6949*x6953))+((r11*x6954)));
evalcond[2]=(((x6944*x6947))+(((-1.0)*x6951*x6953))+(((-1.0)*sj0))+(((-1.0)*r02*x6952)));
evalcond[3]=(((r22*x6944))+(((-1.0)*x6948*x6952))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x6950))+((r21*x6955)));
evalcond[4]=((((-1.0)*cj0*sj2*x6950))+(((-1.0)*x6951*x6952))+((r02*x6944))+((cj0*x6946))+((x6945*x6947)));
evalcond[5]=((((-1.0)*sj0*sj2*x6950))+(((-1.0)*x6949*x6952))+((r12*x6944))+((sj0*x6946))+((r11*x6955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6956=((1.0)*gconst137);
CheckValue<IkReal> x6957 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x6956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6957.valid){
continue;
}
CheckValue<IkReal> x6958=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x6956)))),-1);
if(!x6958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6957.value)+(((1.5707963267949)*(x6958.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6959=IKsin(j4);
IkReal x6960=IKcos(j4);
IkReal x6961=(cj1*cj2);
IkReal x6962=(gconst136*r01);
IkReal x6963=(gconst137*r20);
IkReal x6964=(gconst137*r10);
IkReal x6965=((1.0)*sj1);
IkReal x6966=(gconst137*r00);
IkReal x6967=((1.0)*x6960);
IkReal x6968=((1.0)*x6959);
IkReal x6969=(gconst136*x6959);
IkReal x6970=(gconst136*x6960);
evalcond[0]=(((r21*x6969))+(((-1.0)*r22*x6967))+(((-1.0)*x6963*x6968)));
evalcond[1]=((((-1.0)*x6964*x6968))+cj0+(((-1.0)*r12*x6967))+((r11*x6969)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6967))+(((-1.0)*x6966*x6968))+((x6959*x6962)));
evalcond[3]=(((r22*x6959))+((r21*x6970))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x6965))+(((-1.0)*x6963*x6967)));
evalcond[4]=(((r02*x6959))+((cj0*x6961))+(((-1.0)*x6966*x6967))+(((-1.0)*cj0*sj2*x6965))+((x6960*x6962)));
evalcond[5]=((((-1.0)*x6964*x6967))+((sj0*x6961))+(((-1.0)*sj0*sj2*x6965))+((r12*x6959))+((r11*x6970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6971=((-1.0)*r10);
IkReal x6973 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6973)==0){
continue;
}
IkReal x6972=pow(x6973,-0.5);
CheckValue<IkReal> x6974 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6971),IKFAST_ATAN2_MAGTHRESH);
if(!x6974.valid){
continue;
}
IkReal gconst138=((-1.0)*(x6974.value));
IkReal gconst139=(r11*x6972);
IkReal gconst140=(x6971*x6972);
CheckValue<IkReal> x6975 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6975.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6975.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6976=((-1.0)*r10);
IkReal x6977=x6972;
CheckValue<IkReal> x6979 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6976),IKFAST_ATAN2_MAGTHRESH);
if(!x6979.valid){
continue;
}
IkReal x6978=((-1.0)*(x6979.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x6978;
IkReal gconst138=x6978;
IkReal gconst139=(r11*x6977);
IkReal gconst140=(x6976*x6977);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6980=((1.0)*sj0);
IkReal x6981=((1.0)*gconst139);
CheckValue<IkReal> x6982=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6981))+(((-1.0)*gconst140*r21)))),-1);
if(!x6982.valid){
continue;
}
CheckValue<IkReal> x6983 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6980))+(((-1.0)*cj0*r02)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x6980))+(((-1.0)*cj0*r01*x6981))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6982.value)))+(x6983.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6984=IKsin(j4);
IkReal x6985=IKcos(j4);
IkReal x6986=(cj1*cj2);
IkReal x6987=(gconst139*r11);
IkReal x6988=((1.0)*sj1);
IkReal x6989=((1.0)*x6985);
IkReal x6990=(gconst139*x6985);
IkReal x6991=(gconst139*x6984);
IkReal x6992=((1.0)*gconst140*x6984);
evalcond[0]=(((r21*x6991))+(((-1.0)*r22*x6989))+(((-1.0)*r20*x6992)));
evalcond[1]=(cj0+(((-1.0)*r10*x6992))+(((-1.0)*r12*x6989))+((x6984*x6987)));
evalcond[2]=((((-1.0)*r00*x6992))+(((-1.0)*sj0))+((r01*x6991))+(((-1.0)*r02*x6989)));
evalcond[3]=(((r21*x6990))+((r22*x6984))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst140*r20*x6989))+(((-1.0)*cj2*x6988)));
evalcond[4]=(((r02*x6984))+((cj0*x6986))+((r01*x6990))+(((-1.0)*gconst140*r00*x6989))+(((-1.0)*cj0*sj2*x6988)));
evalcond[5]=((((-1.0)*gconst140*r10*x6989))+(((-1.0)*sj0*sj2*x6988))+((x6985*x6987))+((r12*x6984))+((sj0*x6986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6993=((1.0)*gconst140);
CheckValue<IkReal> x6994 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x6993)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6994.valid){
continue;
}
CheckValue<IkReal> x6995=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x6993)))),-1);
if(!x6995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6994.value)+(((1.5707963267949)*(x6995.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6996=IKsin(j4);
IkReal x6997=IKcos(j4);
IkReal x6998=(cj1*cj2);
IkReal x6999=(gconst139*r11);
IkReal x7000=((1.0)*sj1);
IkReal x7001=((1.0)*x6997);
IkReal x7002=(gconst139*x6997);
IkReal x7003=(gconst139*x6996);
IkReal x7004=((1.0)*gconst140*x6996);
evalcond[0]=((((-1.0)*r22*x7001))+(((-1.0)*r20*x7004))+((r21*x7003)));
evalcond[1]=((((-1.0)*r12*x7001))+cj0+(((-1.0)*r10*x7004))+((x6996*x6999)));
evalcond[2]=((((-1.0)*r02*x7001))+(((-1.0)*sj0))+(((-1.0)*r00*x7004))+((r01*x7003)));
evalcond[3]=((((-1.0)*gconst140*r20*x7001))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x7000))+((r22*x6996))+((r21*x7002)));
evalcond[4]=(((r02*x6996))+(((-1.0)*gconst140*r00*x7001))+(((-1.0)*cj0*sj2*x7000))+((cj0*x6998))+((r01*x7002)));
evalcond[5]=(((sj0*x6998))+((r12*x6996))+(((-1.0)*sj0*sj2*x7000))+(((-1.0)*gconst140*r10*x7001))+((x6997*x6999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7005=((-1.0)*r11);
IkReal x7007 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7007)==0){
continue;
}
IkReal x7006=pow(x7007,-0.5);
CheckValue<IkReal> x7008 = IKatan2WithCheck(IkReal(x7005),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7008.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7008.value))));
IkReal gconst142=(x7005*x7006);
IkReal gconst143=((1.0)*r10*x7006);
CheckValue<IkReal> x7009 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7009.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7009.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7010=((-1.0)*r11);
CheckValue<IkReal> x7013 = IKatan2WithCheck(IkReal(x7010),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7013.valid){
continue;
}
IkReal x7011=((1.0)*(x7013.value));
IkReal x7012=x7006;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7011)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7011)));
IkReal gconst142=(x7010*x7012);
IkReal gconst143=((1.0)*r10*x7012);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7014=((-1.0)*r11);
CheckValue<IkReal> x7017 = IKatan2WithCheck(IkReal(x7014),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7017.valid){
continue;
}
IkReal x7015=((1.0)*(x7017.value));
IkReal x7016=x7006;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7015)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7015)));
IkReal gconst142=(x7014*x7016);
IkReal gconst143=((1.0)*r10*x7016);
IkReal x7018=r12*r12;
IkReal x7019=((1.0)*sj0);
IkReal x7020=(cj0*r02);
IkReal x7021=x7006;
j4eval[0]=((IKabs(((((-1.0)*x7020))+(((-1.0)*r12*x7019)))))+(IKabs((((sj0*x7018*x7021))+((r12*x7020*x7021))+(((-1.0)*x7019*x7021))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7022=((-1.0)*r11);
CheckValue<IkReal> x7025 = IKatan2WithCheck(IkReal(x7022),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7025.valid){
continue;
}
IkReal x7023=((1.0)*(x7025.value));
IkReal x7024=x7006;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7023)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7023)));
IkReal gconst142=(x7022*x7024);
IkReal gconst143=((1.0)*r10*x7024);
IkReal x7026=((1.0)+(((-1.0)*(r12*r12))));
IkReal x7027=(cj1*r22*sj2);
IkReal x7028=(cj2*r22*sj1);
CheckValue<IkReal> x7034=IKPowWithIntegerCheck(x7026,-1);
if(!x7034.valid){
continue;
}
IkReal x7029=x7034.value;
IkReal x7030=((1.0)*x7029);
IkReal x7031=x7006;
IkReal x7032=(r12*x7031);
IkReal x7033=((((-1.0)*x7030*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x7030*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x7029)));
j4eval[0]=x7033;
j4eval[1]=((IKabs((((x7027*x7032))+((x7028*x7032)))))+(IKabs(((((-1.0)*x7028))+(((-1.0)*x7027))))));
j4eval[2]=IKsign(x7033);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7035=(gconst142*r21);
IkReal x7036=(cj1*sj2);
IkReal x7037=(gconst143*r20);
IkReal x7038=(cj2*sj1);
IkReal x7039=((1.0)*r22);
CheckValue<IkReal> x7040=IKPowWithIntegerCheck(IKsign(((((2.0)*x7035*x7037))+(((-1.0)*r22*x7039))+(((-1.0)*(x7035*x7035)))+(((-1.0)*(x7037*x7037))))),-1);
if(!x7040.valid){
continue;
}
CheckValue<IkReal> x7041 = IKatan2WithCheck(IkReal(((((-1.0)*x7036*x7039))+(((-1.0)*x7038*x7039)))),IkReal((((x7037*x7038))+((x7036*x7037))+(((-1.0)*x7035*x7036))+(((-1.0)*x7035*x7038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7040.value)))+(x7041.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7042=IKsin(j4);
IkReal x7043=IKcos(j4);
IkReal x7044=(cj1*cj2);
IkReal x7045=(gconst143*r20);
IkReal x7046=(gconst142*r01);
IkReal x7047=((1.0)*sj1);
IkReal x7048=(gconst143*r00);
IkReal x7049=(gconst143*r10);
IkReal x7050=((1.0)*x7043);
IkReal x7051=((1.0)*x7042);
IkReal x7052=(gconst142*x7042);
IkReal x7053=(gconst142*x7043);
evalcond[0]=((((-1.0)*r22*x7050))+(((-1.0)*x7045*x7051))+((r21*x7052)));
evalcond[1]=(cj0+(((-1.0)*x7049*x7051))+((r11*x7052))+(((-1.0)*r12*x7050)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7048*x7051))+((x7042*x7046))+(((-1.0)*r02*x7050)));
evalcond[3]=((((-1.0)*cj2*x7047))+(((-1.0)*cj1*sj2))+(((-1.0)*x7045*x7050))+((r21*x7053))+((r22*x7042)));
evalcond[4]=((((-1.0)*x7048*x7050))+((r02*x7042))+((cj0*x7044))+((x7043*x7046))+(((-1.0)*cj0*sj2*x7047)));
evalcond[5]=((((-1.0)*sj0*sj2*x7047))+((r12*x7042))+((sj0*x7044))+(((-1.0)*x7049*x7050))+((r11*x7053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7054=((1.0)*sj0);
IkReal x7055=((1.0)*gconst142);
CheckValue<IkReal> x7056=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7055))+(((-1.0)*gconst143*r21)))),-1);
if(!x7056.valid){
continue;
}
CheckValue<IkReal> x7057 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7054)))),IkReal(((((-1.0)*gconst142*r11*x7054))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7055))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7056.value)))+(x7057.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7058=IKsin(j4);
IkReal x7059=IKcos(j4);
IkReal x7060=(cj1*cj2);
IkReal x7061=(gconst143*r20);
IkReal x7062=(gconst142*r01);
IkReal x7063=((1.0)*sj1);
IkReal x7064=(gconst143*r00);
IkReal x7065=(gconst143*r10);
IkReal x7066=((1.0)*x7059);
IkReal x7067=((1.0)*x7058);
IkReal x7068=(gconst142*x7058);
IkReal x7069=(gconst142*x7059);
evalcond[0]=(((r21*x7068))+(((-1.0)*x7061*x7067))+(((-1.0)*r22*x7066)));
evalcond[1]=(cj0+(((-1.0)*x7065*x7067))+(((-1.0)*r12*x7066))+((r11*x7068)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7064*x7067))+(((-1.0)*r02*x7066))+((x7058*x7062)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r21*x7069))+(((-1.0)*x7061*x7066))+((r22*x7058))+(((-1.0)*cj2*x7063)));
evalcond[4]=(((cj0*x7060))+((x7059*x7062))+(((-1.0)*x7064*x7066))+((r02*x7058))+(((-1.0)*cj0*sj2*x7063)));
evalcond[5]=((((-1.0)*x7065*x7066))+((r12*x7058))+(((-1.0)*sj0*sj2*x7063))+((sj0*x7060))+((r11*x7069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7070=((1.0)*gconst143);
CheckValue<IkReal> x7071 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst142*r21))+(((-1.0)*cj0*r20*x7070)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7071.valid){
continue;
}
CheckValue<IkReal> x7072=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7070))+(((-1.0)*gconst142*r00)))),-1);
if(!x7072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7071.value)+(((1.5707963267949)*(x7072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7073=IKsin(j4);
IkReal x7074=IKcos(j4);
IkReal x7075=(cj1*cj2);
IkReal x7076=(gconst143*r20);
IkReal x7077=(gconst142*r01);
IkReal x7078=((1.0)*sj1);
IkReal x7079=(gconst143*r00);
IkReal x7080=(gconst143*r10);
IkReal x7081=((1.0)*x7074);
IkReal x7082=((1.0)*x7073);
IkReal x7083=(gconst142*x7073);
IkReal x7084=(gconst142*x7074);
evalcond[0]=((((-1.0)*x7076*x7082))+((r21*x7083))+(((-1.0)*r22*x7081)));
evalcond[1]=(((r11*x7083))+cj0+(((-1.0)*r12*x7081))+(((-1.0)*x7080*x7082)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7079*x7082))+((x7073*x7077))+(((-1.0)*r02*x7081)));
evalcond[3]=((((-1.0)*x7076*x7081))+((r22*x7073))+((r21*x7084))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x7078)));
evalcond[4]=(((x7074*x7077))+((cj0*x7075))+(((-1.0)*x7079*x7081))+(((-1.0)*cj0*sj2*x7078))+((r02*x7073)));
evalcond[5]=(((r11*x7084))+(((-1.0)*sj0*sj2*x7078))+(((-1.0)*x7080*x7081))+((sj0*x7075))+((r12*x7073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7085=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7085;
j4eval[1]=IKsign(x7085);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7086=((1.0)*cj5);
IkReal x7087=((((-1.0)*r01*x7086))+(((-1.0)*r00*sj5)));
j4eval[0]=x7087;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x7086)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7087);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7088=(cj5*r10);
IkReal x7089=(sj1*sj2);
IkReal x7090=(r11*sj5);
IkReal x7091=((1.0)*cj1*cj2);
IkReal x7092=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7092;
j4eval[1]=((IKabs((((r12*x7089))+(((-1.0)*r12*x7091)))))+(IKabs(((((-1.0)*x7088*x7091))+((cj1*cj2*x7090))+((x7088*x7089))+(((-1.0)*x7089*x7090))))));
j4eval[2]=IKsign(x7092);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7093=(cj5*r10);
IkReal x7094=(sj1*sj2);
IkReal x7095=(r11*sj5);
IkReal x7096=((1.0)*cj1*cj2);
CheckValue<IkReal> x7097 = IKatan2WithCheck(IkReal(((((-1.0)*x7093*x7096))+((cj1*cj2*x7095))+((x7093*x7094))+(((-1.0)*x7094*x7095)))),IkReal((((r12*x7094))+(((-1.0)*r12*x7096)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7097.valid){
continue;
}
CheckValue<IkReal> x7098=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7097.value)+(((1.5707963267949)*(x7098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7099=IKcos(j4);
IkReal x7100=IKsin(j4);
IkReal x7101=(cj5*r00);
IkReal x7102=(cj5*r10);
IkReal x7103=(r21*sj5);
IkReal x7104=((1.0)*sj1);
IkReal x7105=(cj5*r20);
IkReal x7106=((1.0)*x7099);
IkReal x7107=((1.0)*x7100);
IkReal x7108=(sj5*x7100);
IkReal x7109=(sj5*x7099);
evalcond[0]=((((-1.0)*x7102*x7106))+((r12*x7100))+((r11*x7109)));
evalcond[1]=(((x7100*x7103))+(((-1.0)*r22*x7106))+(((-1.0)*x7105*x7107)));
evalcond[2]=((((-1.0)*x7101*x7107))+(((-1.0)*r02*x7106))+((r01*x7108)));
evalcond[3]=((1.0)+(((-1.0)*x7102*x7107))+(((-1.0)*r12*x7106))+((r11*x7108)));
evalcond[4]=(((r02*x7100))+(((-1.0)*x7101*x7106))+(((-1.0)*sj2*x7104))+((cj1*cj2))+((r01*x7109)));
evalcond[5]=((((-1.0)*cj2*x7104))+((x7099*x7103))+((r22*x7100))+(((-1.0)*cj1*sj2))+(((-1.0)*x7105*x7106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7110=((1.0)*cj5);
CheckValue<IkReal> x7111=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7110)))),-1);
if(!x7111.valid){
continue;
}
CheckValue<IkReal> x7112 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7110)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7111.value)))+(x7112.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7113=IKcos(j4);
IkReal x7114=IKsin(j4);
IkReal x7115=(cj5*r00);
IkReal x7116=(cj5*r10);
IkReal x7117=(r21*sj5);
IkReal x7118=((1.0)*sj1);
IkReal x7119=(cj5*r20);
IkReal x7120=((1.0)*x7113);
IkReal x7121=((1.0)*x7114);
IkReal x7122=(sj5*x7114);
IkReal x7123=(sj5*x7113);
evalcond[0]=((((-1.0)*x7116*x7120))+((r12*x7114))+((r11*x7123)));
evalcond[1]=((((-1.0)*x7119*x7121))+(((-1.0)*r22*x7120))+((x7114*x7117)));
evalcond[2]=(((r01*x7122))+(((-1.0)*x7115*x7121))+(((-1.0)*r02*x7120)));
evalcond[3]=((1.0)+(((-1.0)*x7116*x7121))+(((-1.0)*r12*x7120))+((r11*x7122)));
evalcond[4]=(((r01*x7123))+(((-1.0)*x7115*x7120))+((r02*x7114))+(((-1.0)*sj2*x7118))+((cj1*cj2)));
evalcond[5]=(((x7113*x7117))+(((-1.0)*x7119*x7120))+(((-1.0)*cj2*x7118))+(((-1.0)*cj1*sj2))+((r22*x7114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7124=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7124.valid){
continue;
}
CheckValue<IkReal> x7125 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7124.value)))+(x7125.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7126=IKcos(j4);
IkReal x7127=IKsin(j4);
IkReal x7128=(cj5*r00);
IkReal x7129=(cj5*r10);
IkReal x7130=(r21*sj5);
IkReal x7131=((1.0)*sj1);
IkReal x7132=(cj5*r20);
IkReal x7133=((1.0)*x7126);
IkReal x7134=((1.0)*x7127);
IkReal x7135=(sj5*x7127);
IkReal x7136=(sj5*x7126);
evalcond[0]=(((r11*x7136))+((r12*x7127))+(((-1.0)*x7129*x7133)));
evalcond[1]=((((-1.0)*x7132*x7134))+((x7127*x7130))+(((-1.0)*r22*x7133)));
evalcond[2]=(((r01*x7135))+(((-1.0)*x7128*x7134))+(((-1.0)*r02*x7133)));
evalcond[3]=((1.0)+((r11*x7135))+(((-1.0)*r12*x7133))+(((-1.0)*x7129*x7134)));
evalcond[4]=(((r01*x7136))+((r02*x7127))+((cj1*cj2))+(((-1.0)*sj2*x7131))+(((-1.0)*x7128*x7133)));
evalcond[5]=(((x7126*x7130))+(((-1.0)*x7132*x7133))+(((-1.0)*cj2*x7131))+(((-1.0)*cj1*sj2))+((r22*x7127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7137=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7137;
j4eval[1]=IKsign(x7137);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7138=((1.0)*cj5);
IkReal x7139=((((-1.0)*r21*x7138))+(((-1.0)*r20*sj5)));
j4eval[0]=x7139;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7138))))));
j4eval[2]=IKsign(x7139);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7140=cj5*cj5;
IkReal x7141=r11*r11;
IkReal x7142=(r11*sj5);
IkReal x7143=(cj5*r10);
IkReal x7144=(x7141+(r12*r12)+(((-1.0)*x7140*x7141))+(((-2.0)*x7142*x7143))+((x7140*(r10*r10))));
j4eval[0]=x7144;
j4eval[1]=IKsign(x7144);
j4eval[2]=((IKabs((x7142+(((-1.0)*x7143)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7145=cj5*cj5;
IkReal x7146=r11*r11;
IkReal x7147=(cj5*r10);
IkReal x7148=(r11*sj5);
CheckValue<IkReal> x7149 = IKatan2WithCheck(IkReal((x7148+(((-1.0)*x7147)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7149.valid){
continue;
}
CheckValue<IkReal> x7150=IKPowWithIntegerCheck(IKsign((x7146+(r12*r12)+(((-1.0)*x7145*x7146))+(((-2.0)*x7147*x7148))+((x7145*(r10*r10))))),-1);
if(!x7150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7149.value)+(((1.5707963267949)*(x7150.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7151=IKcos(j4);
IkReal x7152=IKsin(j4);
IkReal x7153=(cj5*r00);
IkReal x7154=(cj5*r10);
IkReal x7155=(r21*sj5);
IkReal x7156=((1.0)*cj2);
IkReal x7157=(cj5*r20);
IkReal x7158=((1.0)*x7151);
IkReal x7159=((1.0)*x7152);
IkReal x7160=(sj5*x7152);
IkReal x7161=(sj5*x7151);
evalcond[0]=(((r12*x7152))+((r11*x7161))+(((-1.0)*x7154*x7158)));
evalcond[1]=((((-1.0)*x7157*x7159))+(((-1.0)*r22*x7158))+((x7152*x7155)));
evalcond[2]=((((-1.0)*x7153*x7159))+((r01*x7160))+(((-1.0)*r02*x7158)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7158))+((r11*x7160))+(((-1.0)*x7154*x7159)));
evalcond[4]=(((r02*x7152))+(((-1.0)*x7153*x7158))+((r01*x7161))+((sj1*sj2))+(((-1.0)*cj1*x7156)));
evalcond[5]=((((-1.0)*sj1*x7156))+((r22*x7152))+(((-1.0)*x7157*x7158))+(((-1.0)*cj1*sj2))+((x7151*x7155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7162=((1.0)*cj5);
CheckValue<IkReal> x7163 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7162)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7163.valid){
continue;
}
CheckValue<IkReal> x7164=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5))+(((-1.0)*r21*x7162)))),-1);
if(!x7164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7163.value)+(((1.5707963267949)*(x7164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7165=IKcos(j4);
IkReal x7166=IKsin(j4);
IkReal x7167=(cj5*r00);
IkReal x7168=(cj5*r10);
IkReal x7169=(r21*sj5);
IkReal x7170=((1.0)*cj2);
IkReal x7171=(cj5*r20);
IkReal x7172=((1.0)*x7165);
IkReal x7173=((1.0)*x7166);
IkReal x7174=(sj5*x7166);
IkReal x7175=(sj5*x7165);
evalcond[0]=((((-1.0)*x7168*x7172))+((r11*x7175))+((r12*x7166)));
evalcond[1]=((((-1.0)*x7171*x7173))+(((-1.0)*r22*x7172))+((x7166*x7169)));
evalcond[2]=((((-1.0)*r02*x7172))+(((-1.0)*x7167*x7173))+((r01*x7174)));
evalcond[3]=((-1.0)+(((-1.0)*x7168*x7173))+((r11*x7174))+(((-1.0)*r12*x7172)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x7167*x7172))+(((-1.0)*cj1*x7170))+((r01*x7175))+((r02*x7166)));
evalcond[5]=((((-1.0)*x7171*x7172))+((x7165*x7169))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x7170))+((r22*x7166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7176 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7176.valid){
continue;
}
CheckValue<IkReal> x7177=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7176.value)+(((1.5707963267949)*(x7177.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7178=IKcos(j4);
IkReal x7179=IKsin(j4);
IkReal x7180=(cj5*r00);
IkReal x7181=(cj5*r10);
IkReal x7182=(r21*sj5);
IkReal x7183=((1.0)*cj2);
IkReal x7184=(cj5*r20);
IkReal x7185=((1.0)*x7178);
IkReal x7186=((1.0)*x7179);
IkReal x7187=(sj5*x7179);
IkReal x7188=(sj5*x7178);
evalcond[0]=(((r11*x7188))+(((-1.0)*x7181*x7185))+((r12*x7179)));
evalcond[1]=(((x7179*x7182))+(((-1.0)*x7184*x7186))+(((-1.0)*r22*x7185)));
evalcond[2]=(((r01*x7187))+(((-1.0)*r02*x7185))+(((-1.0)*x7180*x7186)));
evalcond[3]=((-1.0)+((r11*x7187))+(((-1.0)*x7181*x7186))+(((-1.0)*r12*x7185)));
evalcond[4]=(((r01*x7188))+((sj1*sj2))+((r02*x7179))+(((-1.0)*cj1*x7183))+(((-1.0)*x7180*x7185)));
evalcond[5]=(((x7178*x7182))+(((-1.0)*x7184*x7185))+(((-1.0)*sj1*x7183))+(((-1.0)*cj1*sj2))+((r22*x7179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7189=((-1.0)*r00);
IkReal x7191 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7191)==0){
continue;
}
IkReal x7190=pow(x7191,-0.5);
CheckValue<IkReal> x7192 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7189),IKFAST_ATAN2_MAGTHRESH);
if(!x7192.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7192.value));
IkReal gconst145=(r01*x7190);
IkReal gconst146=(x7189*x7190);
CheckValue<IkReal> x7193 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7193.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7193.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7194=((-1.0)*r00);
IkReal x7195=x7190;
CheckValue<IkReal> x7197 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7194),IKFAST_ATAN2_MAGTHRESH);
if(!x7197.valid){
continue;
}
IkReal x7196=((-1.0)*(x7197.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7196;
IkReal gconst144=x7196;
IkReal gconst145=(r01*x7195);
IkReal gconst146=(x7194*x7195);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7198=((1.0)*sj0);
IkReal x7199=((1.0)*gconst145);
CheckValue<IkReal> x7200=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7199))+(((-1.0)*gconst146*r21)))),-1);
if(!x7200.valid){
continue;
}
CheckValue<IkReal> x7201 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7198)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*gconst145*r11*x7198))+((gconst146*r10*sj0))+(((-1.0)*cj0*r01*x7199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7200.value)))+(x7201.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7202=IKsin(j4);
IkReal x7203=IKcos(j4);
IkReal x7204=(gconst145*r21);
IkReal x7205=(cj1*cj2);
IkReal x7206=((1.0)*sj1);
IkReal x7207=((1.0)*x7203);
IkReal x7208=(gconst145*x7202);
IkReal x7209=(gconst145*x7203);
IkReal x7210=((1.0)*gconst146*x7202);
evalcond[0]=(((x7202*x7204))+(((-1.0)*r22*x7207))+(((-1.0)*r20*x7210)));
evalcond[1]=(cj0+(((-1.0)*r10*x7210))+((r11*x7208))+(((-1.0)*r12*x7207)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7208))+(((-1.0)*r00*x7210))+(((-1.0)*r02*x7207)));
evalcond[3]=((((-1.0)*gconst146*r20*x7207))+((x7203*x7204))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x7206))+((r22*x7202)));
evalcond[4]=(((r01*x7209))+(((-1.0)*cj0*sj2*x7206))+(((-1.0)*gconst146*r00*x7207))+((cj0*x7205))+((r02*x7202)));
evalcond[5]=((((-1.0)*gconst146*r10*x7207))+((r12*x7202))+(((-1.0)*sj0*sj2*x7206))+((r11*x7209))+((sj0*x7205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7211=((1.0)*gconst146);
CheckValue<IkReal> x7212 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7211))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7212.valid){
continue;
}
CheckValue<IkReal> x7213=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7211))+(((-1.0)*gconst145*r10)))),-1);
if(!x7213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7212.value)+(((1.5707963267949)*(x7213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7214=IKsin(j4);
IkReal x7215=IKcos(j4);
IkReal x7216=(gconst145*r21);
IkReal x7217=(cj1*cj2);
IkReal x7218=((1.0)*sj1);
IkReal x7219=((1.0)*x7215);
IkReal x7220=(gconst145*x7214);
IkReal x7221=(gconst145*x7215);
IkReal x7222=((1.0)*gconst146*x7214);
evalcond[0]=((((-1.0)*r20*x7222))+((x7214*x7216))+(((-1.0)*r22*x7219)));
evalcond[1]=(cj0+(((-1.0)*r10*x7222))+(((-1.0)*r12*x7219))+((r11*x7220)));
evalcond[2]=((((-1.0)*r00*x7222))+(((-1.0)*sj0))+((r01*x7220))+(((-1.0)*r02*x7219)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r22*x7214))+(((-1.0)*cj2*x7218))+((x7215*x7216))+(((-1.0)*gconst146*r20*x7219)));
evalcond[4]=((((-1.0)*gconst146*r00*x7219))+((r01*x7221))+((r02*x7214))+((cj0*x7217))+(((-1.0)*cj0*sj2*x7218)));
evalcond[5]=(((r12*x7214))+((sj0*x7217))+(((-1.0)*gconst146*r10*x7219))+((r11*x7221))+(((-1.0)*sj0*sj2*x7218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7223=((-1.0)*r01);
IkReal x7225 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7225)==0){
continue;
}
IkReal x7224=pow(x7225,-0.5);
CheckValue<IkReal> x7226 = IKatan2WithCheck(IkReal(x7223),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7226.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7226.value))));
IkReal gconst148=(x7223*x7224);
IkReal gconst149=((1.0)*r00*x7224);
CheckValue<IkReal> x7227 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7227.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7227.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7228=((-1.0)*r01);
CheckValue<IkReal> x7231 = IKatan2WithCheck(IkReal(x7228),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7231.valid){
continue;
}
IkReal x7229=((1.0)*(x7231.value));
IkReal x7230=x7224;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7229)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7229)));
IkReal gconst148=(x7228*x7230);
IkReal gconst149=((1.0)*r00*x7230);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7232=((-1.0)*r01);
CheckValue<IkReal> x7235 = IKatan2WithCheck(IkReal(x7232),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7235.valid){
continue;
}
IkReal x7233=((1.0)*(x7235.value));
IkReal x7234=x7224;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7233)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7233)));
IkReal gconst148=(x7232*x7234);
IkReal gconst149=((1.0)*r00*x7234);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7236=((-1.0)*r01);
CheckValue<IkReal> x7239 = IKatan2WithCheck(IkReal(x7236),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7239.valid){
continue;
}
IkReal x7237=((1.0)*(x7239.value));
IkReal x7238=x7224;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7237)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7237)));
IkReal gconst148=(x7236*x7238);
IkReal gconst149=((1.0)*r00*x7238);
IkReal x7240=r02*r02;
IkReal x7241=(r12*sj0);
IkReal x7242=((1.0)*cj0);
IkReal x7243=x7224;
j4eval[0]=((IKabs(((((-1.0)*x7242*x7243))+((r02*x7241*x7243))+((cj0*x7240*x7243)))))+(IKabs(((((-1.0)*x7241))+(((-1.0)*r02*x7242))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7244=((1.0)*sj0);
IkReal x7245=((1.0)*gconst148);
CheckValue<IkReal> x7246=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7245))+(((-1.0)*gconst149*r21)))),-1);
if(!x7246.valid){
continue;
}
CheckValue<IkReal> x7247 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7244))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x7245))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x7244)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7246.value)))+(x7247.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7248=IKsin(j4);
IkReal x7249=IKcos(j4);
IkReal x7250=(gconst149*r10);
IkReal x7251=(cj1*cj2);
IkReal x7252=((1.0)*sj1);
IkReal x7253=(gconst149*r00);
IkReal x7254=(gconst149*r20);
IkReal x7255=((1.0)*x7249);
IkReal x7256=(gconst148*x7249);
IkReal x7257=(gconst148*x7248);
IkReal x7258=((1.0)*x7248);
evalcond[0]=((((-1.0)*r22*x7255))+(((-1.0)*x7254*x7258))+((r21*x7257)));
evalcond[1]=(cj0+(((-1.0)*r12*x7255))+((r11*x7257))+(((-1.0)*x7250*x7258)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7255))+((r01*x7257))+(((-1.0)*x7253*x7258)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*x7254*x7255))+(((-1.0)*cj2*x7252))+((r21*x7256))+((r22*x7248)));
evalcond[4]=(((r02*x7248))+((r01*x7256))+(((-1.0)*x7253*x7255))+((cj0*x7251))+(((-1.0)*cj0*sj2*x7252)));
evalcond[5]=(((r11*x7256))+(((-1.0)*sj0*sj2*x7252))+((sj0*x7251))+((r12*x7248))+(((-1.0)*x7250*x7255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7259=((1.0)*gconst149);
CheckValue<IkReal> x7260=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7259))+(((-1.0)*gconst148*r10)))),-1);
if(!x7260.valid){
continue;
}
CheckValue<IkReal> x7261 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7259))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7260.value)))+(x7261.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7262=IKsin(j4);
IkReal x7263=IKcos(j4);
IkReal x7264=(gconst149*r10);
IkReal x7265=(cj1*cj2);
IkReal x7266=((1.0)*sj1);
IkReal x7267=(gconst149*r00);
IkReal x7268=(gconst149*r20);
IkReal x7269=((1.0)*x7263);
IkReal x7270=(gconst148*x7263);
IkReal x7271=(gconst148*x7262);
IkReal x7272=((1.0)*x7262);
evalcond[0]=((((-1.0)*r22*x7269))+(((-1.0)*x7268*x7272))+((r21*x7271)));
evalcond[1]=((((-1.0)*x7264*x7272))+cj0+((r11*x7271))+(((-1.0)*r12*x7269)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7267*x7272))+((r01*x7271))+(((-1.0)*r02*x7269)));
evalcond[3]=((((-1.0)*cj2*x7266))+((r22*x7262))+(((-1.0)*cj1*sj2))+(((-1.0)*x7268*x7269))+((r21*x7270)));
evalcond[4]=(((cj0*x7265))+(((-1.0)*x7267*x7269))+((r02*x7262))+((r01*x7270))+(((-1.0)*cj0*sj2*x7266)));
evalcond[5]=((((-1.0)*x7264*x7269))+((r12*x7262))+((sj0*x7265))+((r11*x7270))+(((-1.0)*sj0*sj2*x7266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7273=((1.0)*gconst149);
CheckValue<IkReal> x7274 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x7273)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7274.valid){
continue;
}
CheckValue<IkReal> x7275=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7273))+(((-1.0)*gconst148*r00)))),-1);
if(!x7275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7274.value)+(((1.5707963267949)*(x7275.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7276=IKsin(j4);
IkReal x7277=IKcos(j4);
IkReal x7278=(gconst149*r10);
IkReal x7279=(cj1*cj2);
IkReal x7280=((1.0)*sj1);
IkReal x7281=(gconst149*r00);
IkReal x7282=(gconst149*r20);
IkReal x7283=((1.0)*x7277);
IkReal x7284=(gconst148*x7277);
IkReal x7285=(gconst148*x7276);
IkReal x7286=((1.0)*x7276);
evalcond[0]=((((-1.0)*x7282*x7286))+((r21*x7285))+(((-1.0)*r22*x7283)));
evalcond[1]=(((r11*x7285))+cj0+(((-1.0)*x7278*x7286))+(((-1.0)*r12*x7283)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7281*x7286))+((r01*x7285))+(((-1.0)*r02*x7283)));
evalcond[3]=((((-1.0)*x7282*x7283))+(((-1.0)*cj2*x7280))+(((-1.0)*cj1*sj2))+((r21*x7284))+((r22*x7276)));
evalcond[4]=((((-1.0)*cj0*sj2*x7280))+(((-1.0)*x7281*x7283))+((r01*x7284))+((cj0*x7279))+((r02*x7276)));
evalcond[5]=((((-1.0)*sj0*sj2*x7280))+((r11*x7284))+(((-1.0)*x7278*x7283))+((r12*x7276))+((sj0*x7279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7287=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7287;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7287);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7288=((1.0)*cj5);
IkReal x7289=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7288)));
j4eval[0]=x7289;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7288))))));
j4eval[2]=IKsign(x7289);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7290=cj5*cj5;
IkReal x7291=r01*r01;
IkReal x7292=(cj5*r00);
IkReal x7293=(r01*sj5);
IkReal x7294=(x7291+(((-2.0)*x7292*x7293))+((x7290*(r00*r00)))+(((-1.0)*x7290*x7291))+(r02*r02));
j4eval[0]=x7294;
j4eval[1]=IKsign(x7294);
j4eval[2]=((IKabs((x7293+(((-1.0)*x7292)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7295=cj5*cj5;
IkReal x7296=r01*r01;
IkReal x7297=(r01*sj5);
IkReal x7298=(cj5*r00);
CheckValue<IkReal> x7299=IKPowWithIntegerCheck(IKsign((x7296+(((-1.0)*x7295*x7296))+((x7295*(r00*r00)))+(((-2.0)*x7297*x7298))+(r02*r02))),-1);
if(!x7299.valid){
continue;
}
CheckValue<IkReal> x7300 = IKatan2WithCheck(IkReal((x7297+(((-1.0)*x7298)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7299.value)))+(x7300.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7301=IKcos(j4);
IkReal x7302=IKsin(j4);
IkReal x7303=(cj5*r00);
IkReal x7304=(cj5*r10);
IkReal x7305=(r21*sj5);
IkReal x7306=((1.0)*sj1);
IkReal x7307=(cj5*r20);
IkReal x7308=((1.0)*x7301);
IkReal x7309=((1.0)*x7302);
IkReal x7310=(sj5*x7302);
IkReal x7311=(sj5*x7301);
evalcond[0]=(((r02*x7302))+(((-1.0)*x7303*x7308))+((r01*x7311)));
evalcond[1]=(((x7302*x7305))+(((-1.0)*x7307*x7309))+(((-1.0)*r22*x7308)));
evalcond[2]=((((-1.0)*r12*x7308))+(((-1.0)*x7304*x7309))+((r11*x7310)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7308))+(((-1.0)*x7303*x7309))+((r01*x7310)));
evalcond[4]=(((r12*x7302))+(((-1.0)*sj2*x7306))+((cj1*cj2))+(((-1.0)*x7304*x7308))+((r11*x7311)));
evalcond[5]=(((r22*x7302))+(((-1.0)*cj2*x7306))+((x7301*x7305))+(((-1.0)*cj1*sj2))+(((-1.0)*x7307*x7308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7312=((1.0)*cj5);
CheckValue<IkReal> x7313=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7312)))),-1);
if(!x7313.valid){
continue;
}
CheckValue<IkReal> x7314 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7312)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7313.value)))+(x7314.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7315=IKcos(j4);
IkReal x7316=IKsin(j4);
IkReal x7317=(cj5*r00);
IkReal x7318=(cj5*r10);
IkReal x7319=(r21*sj5);
IkReal x7320=((1.0)*sj1);
IkReal x7321=(cj5*r20);
IkReal x7322=((1.0)*x7315);
IkReal x7323=((1.0)*x7316);
IkReal x7324=(sj5*x7316);
IkReal x7325=(sj5*x7315);
evalcond[0]=(((r02*x7316))+(((-1.0)*x7317*x7322))+((r01*x7325)));
evalcond[1]=((((-1.0)*r22*x7322))+(((-1.0)*x7321*x7323))+((x7316*x7319)));
evalcond[2]=((((-1.0)*x7318*x7323))+(((-1.0)*r12*x7322))+((r11*x7324)));
evalcond[3]=((-1.0)+(((-1.0)*x7317*x7323))+((r01*x7324))+(((-1.0)*r02*x7322)));
evalcond[4]=(((r12*x7316))+(((-1.0)*sj2*x7320))+(((-1.0)*x7318*x7322))+((cj1*cj2))+((r11*x7325)));
evalcond[5]=((((-1.0)*cj2*x7320))+((r22*x7316))+(((-1.0)*cj1*sj2))+((x7315*x7319))+(((-1.0)*x7321*x7322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7326=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7326.valid){
continue;
}
CheckValue<IkReal> x7327 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7326.value)))+(x7327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7328=IKcos(j4);
IkReal x7329=IKsin(j4);
IkReal x7330=(cj5*r00);
IkReal x7331=(cj5*r10);
IkReal x7332=(r21*sj5);
IkReal x7333=((1.0)*sj1);
IkReal x7334=(cj5*r20);
IkReal x7335=((1.0)*x7328);
IkReal x7336=((1.0)*x7329);
IkReal x7337=(sj5*x7329);
IkReal x7338=(sj5*x7328);
evalcond[0]=((((-1.0)*x7330*x7335))+((r01*x7338))+((r02*x7329)));
evalcond[1]=(((x7329*x7332))+(((-1.0)*r22*x7335))+(((-1.0)*x7334*x7336)));
evalcond[2]=((((-1.0)*r12*x7335))+(((-1.0)*x7331*x7336))+((r11*x7337)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7335))+(((-1.0)*x7330*x7336))+((r01*x7337)));
evalcond[4]=((((-1.0)*sj2*x7333))+((r12*x7329))+((cj1*cj2))+(((-1.0)*x7331*x7335))+((r11*x7338)));
evalcond[5]=((((-1.0)*cj2*x7333))+((x7328*x7332))+((r22*x7329))+(((-1.0)*cj1*sj2))+(((-1.0)*x7334*x7335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7339=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7339;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7339);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7340=((1.0)*cj5);
IkReal x7341=((((-1.0)*r21*x7340))+(((-1.0)*r20*sj5)));
j4eval[0]=x7341;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x7340))+((r11*sj5))))));
j4eval[2]=IKsign(x7341);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7342=(sj1*sj2);
IkReal x7343=(r01*sj5);
IkReal x7344=(cj1*cj2);
IkReal x7345=((1.0)*cj5);
IkReal x7346=((((-1.0)*r21*x7345))+(((-1.0)*r20*sj5)));
j4eval[0]=x7346;
j4eval[1]=((IKabs((((x7342*x7343))+(((-1.0)*x7343*x7344))+((cj5*r00*x7344))+(((-1.0)*r00*x7342*x7345)))))+(IKabs(((((-1.0)*r02*x7342))+((r02*x7344))))));
j4eval[2]=IKsign(x7346);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7347=(sj1*sj2);
IkReal x7348=(r01*sj5);
IkReal x7349=(cj1*cj2);
IkReal x7350=((1.0)*cj5);
CheckValue<IkReal> x7351=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7350))+(((-1.0)*r20*sj5)))),-1);
if(!x7351.valid){
continue;
}
CheckValue<IkReal> x7352 = IKatan2WithCheck(IkReal((((x7347*x7348))+((cj5*r00*x7349))+(((-1.0)*x7348*x7349))+(((-1.0)*r00*x7347*x7350)))),IkReal(((((-1.0)*r02*x7347))+((r02*x7349)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7351.value)))+(x7352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7353=IKcos(j4);
IkReal x7354=IKsin(j4);
IkReal x7355=(cj5*r00);
IkReal x7356=(cj5*r10);
IkReal x7357=(r21*sj5);
IkReal x7358=((1.0)*cj2);
IkReal x7359=(cj5*r20);
IkReal x7360=((1.0)*x7353);
IkReal x7361=((1.0)*x7354);
IkReal x7362=(sj5*x7354);
IkReal x7363=(sj5*x7353);
evalcond[0]=(((r01*x7363))+((r02*x7354))+(((-1.0)*x7355*x7360)));
evalcond[1]=((((-1.0)*r22*x7360))+(((-1.0)*x7359*x7361))+((x7354*x7357)));
evalcond[2]=(((r11*x7362))+(((-1.0)*r12*x7360))+(((-1.0)*x7356*x7361)));
evalcond[3]=((1.0)+((r01*x7362))+(((-1.0)*r02*x7360))+(((-1.0)*x7355*x7361)));
evalcond[4]=(((r11*x7363))+((r12*x7354))+((sj1*sj2))+(((-1.0)*cj1*x7358))+(((-1.0)*x7356*x7360)));
evalcond[5]=(((x7353*x7357))+(((-1.0)*cj1*sj2))+((r22*x7354))+(((-1.0)*x7359*x7360))+(((-1.0)*sj1*x7358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7364=((1.0)*cj5);
CheckValue<IkReal> x7365 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x7364))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7365.valid){
continue;
}
CheckValue<IkReal> x7366=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7364))+(((-1.0)*r20*sj5)))),-1);
if(!x7366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7365.value)+(((1.5707963267949)*(x7366.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7367=IKcos(j4);
IkReal x7368=IKsin(j4);
IkReal x7369=(cj5*r00);
IkReal x7370=(cj5*r10);
IkReal x7371=(r21*sj5);
IkReal x7372=((1.0)*cj2);
IkReal x7373=(cj5*r20);
IkReal x7374=((1.0)*x7367);
IkReal x7375=((1.0)*x7368);
IkReal x7376=(sj5*x7368);
IkReal x7377=(sj5*x7367);
evalcond[0]=(((r01*x7377))+(((-1.0)*x7369*x7374))+((r02*x7368)));
evalcond[1]=((((-1.0)*r22*x7374))+(((-1.0)*x7373*x7375))+((x7368*x7371)));
evalcond[2]=(((r11*x7376))+(((-1.0)*r12*x7374))+(((-1.0)*x7370*x7375)));
evalcond[3]=((1.0)+((r01*x7376))+(((-1.0)*r02*x7374))+(((-1.0)*x7369*x7375)));
evalcond[4]=(((r12*x7368))+((r11*x7377))+((sj1*sj2))+(((-1.0)*x7370*x7374))+(((-1.0)*cj1*x7372)));
evalcond[5]=((((-1.0)*sj1*x7372))+(((-1.0)*cj1*sj2))+(((-1.0)*x7373*x7374))+((r22*x7368))+((x7367*x7371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7378 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7378.valid){
continue;
}
CheckValue<IkReal> x7379=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7378.value)+(((1.5707963267949)*(x7379.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7380=IKcos(j4);
IkReal x7381=IKsin(j4);
IkReal x7382=(cj5*r00);
IkReal x7383=(cj5*r10);
IkReal x7384=(r21*sj5);
IkReal x7385=((1.0)*cj2);
IkReal x7386=(cj5*r20);
IkReal x7387=((1.0)*x7380);
IkReal x7388=((1.0)*x7381);
IkReal x7389=(sj5*x7381);
IkReal x7390=(sj5*x7380);
evalcond[0]=(((r01*x7390))+(((-1.0)*x7382*x7387))+((r02*x7381)));
evalcond[1]=((((-1.0)*x7386*x7388))+(((-1.0)*r22*x7387))+((x7381*x7384)));
evalcond[2]=((((-1.0)*x7383*x7388))+(((-1.0)*r12*x7387))+((r11*x7389)));
evalcond[3]=((1.0)+(((-1.0)*r02*x7387))+((r01*x7389))+(((-1.0)*x7382*x7388)));
evalcond[4]=((((-1.0)*cj1*x7385))+((sj1*sj2))+((r11*x7390))+(((-1.0)*x7383*x7387))+((r12*x7381)));
evalcond[5]=((((-1.0)*x7386*x7387))+((x7380*x7384))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x7385))+((r22*x7381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7391=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7391);
rxp1_1=(px*r21);
rxp1_2=(r11*x7391);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7392=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7392);
rxp1_1=(px*r21);
rxp1_2=(r11*x7392);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7393=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7393);
rxp1_1=(px*r21);
rxp1_2=(r11*x7393);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7396=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x7396.valid){
continue;
}
IkReal x7394=x7396.value;
IkReal x7395=(sj0*x7394);
cj4array[0]=((((-1.0)*cj1*cj2*x7395))+((sj1*sj2*x7395)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7397=IKsin(j4);
IkReal x7398=IKcos(j4);
IkReal x7399=(r21*sj5);
IkReal x7400=((1.0)*cj5*r20);
evalcond[0]=(r02*x7397);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x7398)));
evalcond[2]=(((x7397*x7399))+(((-1.0)*x7397*x7400)));
evalcond[3]=(((r11*sj5*x7397))+(((-1.0)*cj5*r10*x7397)));
evalcond[4]=((((-1.0)*cj2*sj1))+((x7398*x7399))+(((-1.0)*x7398*x7400))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7402=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x7402.valid){
continue;
}
IkReal x7401=x7402.value;
cj4array[0]=(((cj2*sj1*x7401))+((cj1*sj2*x7401)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7403=IKsin(j4);
IkReal x7404=IKcos(j4);
IkReal x7405=((1.0)*sj0);
IkReal x7406=((1.0)*cj5);
IkReal x7407=(sj5*x7403);
evalcond[0]=(r02*x7403);
evalcond[1]=((((-1.0)*x7405))+(((-1.0)*r02*x7404)));
evalcond[2]=((((-1.0)*r20*x7403*x7406))+((r21*x7407)));
evalcond[3]=(((r11*x7407))+(((-1.0)*r10*x7403*x7406)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x7405))+((r11*sj5*x7404))+(((-1.0)*r10*x7404*x7406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7408=IKPowWithIntegerCheck(r02,-1);
if(!x7408.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x7408.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7409=IKsin(j4);
IkReal x7410=IKcos(j4);
IkReal x7411=((1.0)*sj1);
IkReal x7412=(r21*sj5);
IkReal x7413=(r11*sj5);
IkReal x7414=((1.0)*cj5*x7410);
IkReal x7415=((1.0)*cj5*x7409);
evalcond[0]=(r02*x7409);
evalcond[1]=((((-1.0)*r20*x7415))+((x7409*x7412)));
evalcond[2]=(((x7409*x7413))+(((-1.0)*r10*x7415)));
evalcond[3]=(((x7410*x7412))+(((-1.0)*r20*x7414))+(((-1.0)*cj2*x7411))+(((-1.0)*cj1*sj2)));
evalcond[4]=(((cj1*cj2*sj0))+((x7410*x7413))+(((-1.0)*sj0*sj2*x7411))+(((-1.0)*r10*x7414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7416=((1.0)*sj0);
IkReal x7417=((1.0)*cj0);
CheckValue<IkReal> x7418 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7416))+(((-1.0)*r02*x7417)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x7417))+(((-1.0)*r11*sj5*x7416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7418.valid){
continue;
}
CheckValue<IkReal> x7419=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x7419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7418.value)+(((1.5707963267949)*(x7419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7420=IKsin(j4);
IkReal x7421=IKcos(j4);
IkReal x7422=(cj5*r00);
IkReal x7423=(cj1*cj2);
IkReal x7424=(cj5*r10);
IkReal x7425=(r21*sj5);
IkReal x7426=((1.0)*sj1);
IkReal x7427=(cj5*r20);
IkReal x7428=((1.0)*x7421);
IkReal x7429=((1.0)*x7420);
IkReal x7430=(sj5*x7420);
IkReal x7431=(sj5*x7421);
evalcond[0]=((((-1.0)*r22*x7428))+(((-1.0)*x7427*x7429))+((x7420*x7425)));
evalcond[1]=(cj0+(((-1.0)*r12*x7428))+(((-1.0)*x7424*x7429))+((r11*x7430)));
evalcond[2]=(((r01*x7430))+(((-1.0)*x7422*x7429))+(((-1.0)*sj0))+(((-1.0)*r02*x7428)));
evalcond[3]=((((-1.0)*x7427*x7428))+(((-1.0)*cj1*sj2))+((x7421*x7425))+(((-1.0)*cj2*x7426))+((r22*x7420)));
evalcond[4]=(((r01*x7431))+(((-1.0)*x7422*x7428))+(((-1.0)*cj0*sj2*x7426))+((r02*x7420))+((cj0*x7423)));
evalcond[5]=((((-1.0)*sj0*sj2*x7426))+(((-1.0)*x7424*x7428))+((r11*x7431))+((r12*x7420))+((sj0*x7423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7432=((1.0)*cj5);
CheckValue<IkReal> x7433=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7432)))),-1);
if(!x7433.valid){
continue;
}
CheckValue<IkReal> x7434 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7432))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7433.value)))+(x7434.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7435=IKsin(j4);
IkReal x7436=IKcos(j4);
IkReal x7437=(cj5*r00);
IkReal x7438=(cj1*cj2);
IkReal x7439=(cj5*r10);
IkReal x7440=(r21*sj5);
IkReal x7441=((1.0)*sj1);
IkReal x7442=(cj5*r20);
IkReal x7443=((1.0)*x7436);
IkReal x7444=((1.0)*x7435);
IkReal x7445=(sj5*x7435);
IkReal x7446=(sj5*x7436);
evalcond[0]=((((-1.0)*x7442*x7444))+((x7435*x7440))+(((-1.0)*r22*x7443)));
evalcond[1]=(cj0+((r11*x7445))+(((-1.0)*x7439*x7444))+(((-1.0)*r12*x7443)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7437*x7444))+((r01*x7445))+(((-1.0)*r02*x7443)));
evalcond[3]=((((-1.0)*x7442*x7443))+(((-1.0)*cj2*x7441))+(((-1.0)*cj1*sj2))+((x7436*x7440))+((r22*x7435)));
evalcond[4]=((((-1.0)*x7437*x7443))+((r02*x7435))+((cj0*x7438))+((r01*x7446))+(((-1.0)*cj0*sj2*x7441)));
evalcond[5]=((((-1.0)*sj0*sj2*x7441))+((r11*x7446))+((r12*x7435))+(((-1.0)*x7439*x7443))+((sj0*x7438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7447=((1.0)*cj5);
CheckValue<IkReal> x7448=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7447))+(((-1.0)*r00*sj5)))),-1);
if(!x7448.valid){
continue;
}
CheckValue<IkReal> x7449 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7447)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7448.value)))+(x7449.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7450=IKsin(j4);
IkReal x7451=IKcos(j4);
IkReal x7452=(cj5*r00);
IkReal x7453=(cj1*cj2);
IkReal x7454=(cj5*r10);
IkReal x7455=(r21*sj5);
IkReal x7456=((1.0)*sj1);
IkReal x7457=(cj5*r20);
IkReal x7458=((1.0)*x7451);
IkReal x7459=((1.0)*x7450);
IkReal x7460=(sj5*x7450);
IkReal x7461=(sj5*x7451);
evalcond[0]=((((-1.0)*x7457*x7459))+((x7450*x7455))+(((-1.0)*r22*x7458)));
evalcond[1]=(cj0+(((-1.0)*x7454*x7459))+((r11*x7460))+(((-1.0)*r12*x7458)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7452*x7459))+(((-1.0)*r02*x7458))+((r01*x7460)));
evalcond[3]=((((-1.0)*x7457*x7458))+(((-1.0)*cj2*x7456))+(((-1.0)*cj1*sj2))+((r22*x7450))+((x7451*x7455)));
evalcond[4]=(((r02*x7450))+(((-1.0)*x7452*x7458))+(((-1.0)*cj0*sj2*x7456))+((cj0*x7453))+((r01*x7461)));
evalcond[5]=(((r12*x7450))+(((-1.0)*sj0*sj2*x7456))+((sj0*x7453))+(((-1.0)*x7454*x7458))+((r11*x7461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7462=r21*r21;
IkReal x7463=cj5*cj5;
IkReal x7464=(cj1*sj2);
IkReal x7465=((1.0)*r22);
IkReal x7466=(cj5*r20);
IkReal x7467=(r21*sj5);
IkReal x7468=(cj2*sj1);
CheckValue<IkReal> x7469=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7463*(r20*r20)))+(((2.0)*x7466*x7467))+(((-1.0)*r22*x7465))+((x7462*x7463))+(((-1.0)*x7462)))),-1);
if(!x7469.valid){
continue;
}
CheckValue<IkReal> x7470 = IKatan2WithCheck(IkReal(((((-1.0)*x7464*x7465))+(((-1.0)*x7465*x7468)))),IkReal(((((-1.0)*x7467*x7468))+((x7464*x7466))+(((-1.0)*x7464*x7467))+((x7466*x7468)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7469.value)))+(x7470.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7471=IKsin(j4);
IkReal x7472=IKcos(j4);
IkReal x7473=(r21*sj5);
IkReal x7474=(cj5*r20);
IkReal x7475=((1.0)*x7472);
evalcond[0]=(((x7471*x7473))+(((-1.0)*r22*x7475))+(((-1.0)*x7471*x7474)));
evalcond[1]=(((x7472*x7473))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x7474*x7475))+((r22*x7471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7476=(cj5*sj4);
IkReal x7477=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x7476))+((r01*x7477)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x7476))+(((-1.0)*r11*x7477))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x7476))+((r01*x7477))))+IKsqr((((r10*x7476))+(((-1.0)*r11*x7477))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x7476))+((r01*x7477))), (((r10*x7476))+(((-1.0)*r11*x7477))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7478=IKcos(j0);
IkReal x7479=IKsin(j0);
IkReal x7480=((0.447)*cj2);
IkReal x7481=(r00*sj5);
IkReal x7482=((1.0)*sj2);
IkReal x7483=(r11*sj5);
IkReal x7484=((1.0)*cj5);
IkReal x7485=(r10*sj5);
IkReal x7486=((0.1134)*cj5);
IkReal x7487=((1.0)*cj2);
IkReal x7488=((0.447)*sj2);
IkReal x7489=((1.0)*cj4);
IkReal x7490=(r01*sj5);
IkReal x7491=(sj1*x7479);
IkReal x7492=(cj1*x7478);
IkReal x7493=(cj1*x7479);
IkReal x7494=(sj1*x7478);
evalcond[0]=((((-1.0)*r10*sj4*x7484))+((sj4*x7483))+x7478+(((-1.0)*r12*x7489)));
evalcond[1]=((((-1.0)*r00*sj4*x7484))+(((-1.0)*x7479))+((sj4*x7490))+(((-1.0)*r02*x7489)));
evalcond[2]=((((-1.0)*x7482*x7492))+(((-1.0)*x7481))+(((-1.0)*x7487*x7494))+(((-1.0)*r01*x7484)));
evalcond[3]=((((-1.0)*x7482*x7493))+(((-1.0)*x7485))+(((-1.0)*x7487*x7491))+(((-1.0)*r11*x7484)));
evalcond[4]=((((-1.0)*x7482*x7494))+((cj4*x7490))+(((-1.0)*cj4*r00*x7484))+((r02*sj4))+((cj2*x7492)));
evalcond[5]=((((-1.0)*x7482*x7491))+((cj4*x7483))+(((-1.0)*cj4*r10*x7484))+((r12*sj4))+((cj2*x7493)));
evalcond[6]=((((-1.0)*x7480*x7494))+(((-1.0)*x7488*x7492))+(((-1.0)*r01*x7486))+(((-1.0)*px))+(((-0.1036)*x7479))+(((-0.1134)*x7481))+(((-0.452)*x7494)));
evalcond[7]=((((-1.0)*x7480*x7491))+(((0.1036)*x7478))+(((-1.0)*x7488*x7493))+(((-1.0)*py))+(((-0.1134)*x7485))+(((-1.0)*r11*x7486))+(((-0.452)*x7491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7495 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7495.valid){
continue;
}
CheckValue<IkReal> x7496=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x7496.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x7495.value)+(((1.5707963267949)*(x7496.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7497=IKcos(j0);
IkReal x7498=IKsin(j0);
IkReal x7499=(r00*sj5);
IkReal x7500=((1.0)*cj5);
IkReal x7501=(r10*sj5);
IkReal x7502=((0.1134)*cj5);
IkReal x7503=((1.0)*cj2);
IkReal x7504=((0.447)*cj2*sj1);
IkReal x7505=((1.0)*cj1*sj2);
IkReal x7506=(sj1*x7497);
IkReal x7507=((0.447)*cj1*sj2);
IkReal x7508=(sj1*x7498);
evalcond[0]=((((-1.0)*x7497*x7505))+(((-1.0)*r01*x7500))+(((-1.0)*x7503*x7506))+(((-1.0)*x7499)));
evalcond[1]=((((-1.0)*x7503*x7508))+(((-1.0)*x7498*x7505))+(((-1.0)*x7501))+(((-1.0)*r11*x7500)));
evalcond[2]=((((-1.0)*x7497*x7504))+(((-1.0)*x7497*x7507))+(((-0.1036)*x7498))+(((-1.0)*r01*x7502))+(((-0.452)*x7506))+(((-1.0)*px))+(((-0.1134)*x7499)));
evalcond[3]=((((-1.0)*x7498*x7504))+(((-1.0)*x7498*x7507))+(((-0.452)*x7508))+(((-1.0)*py))+(((0.1036)*x7497))+(((-1.0)*r11*x7502))+(((-0.1134)*x7501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7509=((1.0)*cj5);
IkReal x7510=((((-1.0)*r01*x7509))+(((-1.0)*r00*sj5)));
j4eval[0]=x7510;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7509))))));
j4eval[2]=IKsign(x7510);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7511=((1.0)*cj5);
IkReal x7512=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7511)));
j4eval[0]=x7512;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7511))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7512);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7513=((1.0)*sj0);
IkReal x7514=((1.0)*cj0);
IkReal x7515=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7515;
j4eval[1]=((IKabs(((((-1.0)*r02*x7514))+(((-1.0)*r12*x7513)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x7513))+(((-1.0)*r01*sj5*x7514))))));
j4eval[2]=IKsign(x7515);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7516=((-1.0)*r20);
IkReal x7518 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7518)==0){
continue;
}
IkReal x7517=pow(x7518,-0.5);
CheckValue<IkReal> x7519 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7516),IKFAST_ATAN2_MAGTHRESH);
if(!x7519.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7519.value));
IkReal gconst133=(r21*x7517);
IkReal gconst134=(x7516*x7517);
CheckValue<IkReal> x7520 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7520.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7520.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7521=((-1.0)*r20);
IkReal x7522=x7517;
CheckValue<IkReal> x7524 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7521),IKFAST_ATAN2_MAGTHRESH);
if(!x7524.valid){
continue;
}
IkReal x7523=((-1.0)*(x7524.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7523;
IkReal gconst132=x7523;
IkReal gconst133=(r21*x7522);
IkReal gconst134=(x7521*x7522);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7525=((-1.0)*r20);
IkReal x7526=x7517;
CheckValue<IkReal> x7528 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7525),IKFAST_ATAN2_MAGTHRESH);
if(!x7528.valid){
continue;
}
IkReal x7527=((-1.0)*(x7528.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7527;
IkReal gconst132=x7527;
IkReal gconst133=(r21*x7526);
IkReal gconst134=(x7525*x7526);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7529=((-1.0)*r20);
IkReal x7530=x7517;
CheckValue<IkReal> x7532 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7529),IKFAST_ATAN2_MAGTHRESH);
if(!x7532.valid){
continue;
}
IkReal x7531=((-1.0)*(x7532.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7531;
IkReal gconst132=x7531;
IkReal gconst133=(r21*x7530);
IkReal gconst134=(x7529*x7530);
IkReal x7533=((1.0)*(r22*r22));
CheckValue<IkReal> x7537=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7533))),-1);
if(!x7537.valid){
continue;
}
IkReal x7534=x7537.value;
IkReal x7535=((1.0)*x7534);
IkReal x7536=((((-1.0)*x7535*(r20*r20*r20*r20)))+(((-1.0)*x7533))+(((-2.0)*x7534*(r20*r20)*(r21*r21)))+(((-1.0)*x7535*(r21*r21*r21*r21))));
j4eval[0]=x7536;
j4eval[1]=IKsign(x7536);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7538=(gconst133*r21);
IkReal x7539=(gconst134*r20);
IkReal x7540=((1.0)*cj1*sj2);
IkReal x7541=((1.0)*cj2*sj1);
CheckValue<IkReal> x7542 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7540))+(((-1.0)*r22*x7541)))),IkReal((((cj2*sj1*x7539))+(((-1.0)*x7538*x7540))+(((-1.0)*x7538*x7541))+((cj1*sj2*x7539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7542.valid){
continue;
}
CheckValue<IkReal> x7543=IKPowWithIntegerCheck(IKsign(((((2.0)*x7538*x7539))+(((-1.0)*(r22*r22)))+(((-1.0)*(x7539*x7539)))+(((-1.0)*(x7538*x7538))))),-1);
if(!x7543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7542.value)+(((1.5707963267949)*(x7543.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7544=IKsin(j4);
IkReal x7545=IKcos(j4);
IkReal x7546=(gconst134*r00);
IkReal x7547=(cj1*cj2);
IkReal x7548=((1.0)*sj1);
IkReal x7549=(gconst134*r10);
IkReal x7550=(gconst134*r20);
IkReal x7551=((1.0)*x7545);
IkReal x7552=((1.0)*x7544);
IkReal x7553=(gconst133*x7545);
IkReal x7554=(gconst133*x7544);
evalcond[0]=(((r21*x7554))+(((-1.0)*x7550*x7552))+(((-1.0)*r22*x7551)));
evalcond[1]=(cj0+(((-1.0)*r12*x7551))+((r11*x7554))+(((-1.0)*x7549*x7552)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7554))+(((-1.0)*x7546*x7552))+(((-1.0)*r02*x7551)));
evalcond[3]=(((r21*x7553))+(((-1.0)*x7550*x7551))+(((-1.0)*cj1*sj2))+((r22*x7544))+(((-1.0)*cj2*x7548)));
evalcond[4]=(((cj0*x7547))+(((-1.0)*cj0*sj2*x7548))+((r02*x7544))+((r01*x7553))+(((-1.0)*x7546*x7551)));
evalcond[5]=(((sj0*x7547))+((r12*x7544))+(((-1.0)*sj0*sj2*x7548))+((r11*x7553))+(((-1.0)*x7549*x7551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7555=((1.0)*gconst134);
CheckValue<IkReal> x7556 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7555))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7556.valid){
continue;
}
CheckValue<IkReal> x7557=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7555)))),-1);
if(!x7557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7556.value)+(((1.5707963267949)*(x7557.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7558=IKsin(j4);
IkReal x7559=IKcos(j4);
IkReal x7560=(gconst134*r00);
IkReal x7561=(cj1*cj2);
IkReal x7562=((1.0)*sj1);
IkReal x7563=(gconst134*r10);
IkReal x7564=(gconst134*r20);
IkReal x7565=((1.0)*x7559);
IkReal x7566=((1.0)*x7558);
IkReal x7567=(gconst133*x7559);
IkReal x7568=(gconst133*x7558);
evalcond[0]=((((-1.0)*x7564*x7566))+(((-1.0)*r22*x7565))+((r21*x7568)));
evalcond[1]=((((-1.0)*x7563*x7566))+cj0+((r11*x7568))+(((-1.0)*r12*x7565)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7565))+(((-1.0)*x7560*x7566))+((r01*x7568)));
evalcond[3]=((((-1.0)*x7564*x7565))+((r21*x7567))+(((-1.0)*cj1*sj2))+((r22*x7558))+(((-1.0)*cj2*x7562)));
evalcond[4]=(((r02*x7558))+((cj0*x7561))+(((-1.0)*cj0*sj2*x7562))+(((-1.0)*x7560*x7565))+((r01*x7567)));
evalcond[5]=((((-1.0)*x7563*x7565))+((r11*x7567))+((r12*x7558))+((sj0*x7561))+(((-1.0)*sj0*sj2*x7562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7569=((1.0)*gconst134);
CheckValue<IkReal> x7570=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7569)))),-1);
if(!x7570.valid){
continue;
}
CheckValue<IkReal> x7571 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7569))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7570.value)))+(x7571.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7572=IKsin(j4);
IkReal x7573=IKcos(j4);
IkReal x7574=(gconst134*r00);
IkReal x7575=(cj1*cj2);
IkReal x7576=((1.0)*sj1);
IkReal x7577=(gconst134*r10);
IkReal x7578=(gconst134*r20);
IkReal x7579=((1.0)*x7573);
IkReal x7580=((1.0)*x7572);
IkReal x7581=(gconst133*x7573);
IkReal x7582=(gconst133*x7572);
evalcond[0]=((((-1.0)*r22*x7579))+((r21*x7582))+(((-1.0)*x7578*x7580)));
evalcond[1]=(cj0+(((-1.0)*x7577*x7580))+(((-1.0)*r12*x7579))+((r11*x7582)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7579))+(((-1.0)*x7574*x7580))+((r01*x7582)));
evalcond[3]=((((-1.0)*x7578*x7579))+(((-1.0)*cj2*x7576))+(((-1.0)*cj1*sj2))+((r22*x7572))+((r21*x7581)));
evalcond[4]=((((-1.0)*x7574*x7579))+((r02*x7572))+(((-1.0)*cj0*sj2*x7576))+((r01*x7581))+((cj0*x7575)));
evalcond[5]=((((-1.0)*sj0*sj2*x7576))+((r12*x7572))+(((-1.0)*x7577*x7579))+((r11*x7581))+((sj0*x7575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7583=((-1.0)*r21);
IkReal x7585 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7585)==0){
continue;
}
IkReal x7584=pow(x7585,-0.5);
CheckValue<IkReal> x7586 = IKatan2WithCheck(IkReal(x7583),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7586.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7586.value))));
IkReal gconst136=(x7583*x7584);
IkReal gconst137=((1.0)*r20*x7584);
CheckValue<IkReal> x7587 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7587.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7587.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7588=((-1.0)*r21);
CheckValue<IkReal> x7591 = IKatan2WithCheck(IkReal(x7588),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7591.valid){
continue;
}
IkReal x7589=((1.0)*(x7591.value));
IkReal x7590=x7584;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7589)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7589)));
IkReal gconst136=(x7588*x7590);
IkReal gconst137=((1.0)*r20*x7590);
IkReal x7592=r22*r22;
IkReal x7593=((1.0)*x7592);
CheckValue<IkReal> x7597=IKPowWithIntegerCheck(((-1.0)+x7592),-1);
if(!x7597.valid){
continue;
}
IkReal x7594=x7597.value;
if((((1.0)+(((-1.0)*x7593)))) < -0.00001)
continue;
IkReal x7595=IKsqrt(((1.0)+(((-1.0)*x7593))));
IkReal x7596=(cj0*x7594*x7595);
j4eval[0]=((IKabs((x7596+(((-1.0)*x7593*x7596)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7598=((-1.0)*r21);
CheckValue<IkReal> x7601 = IKatan2WithCheck(IkReal(x7598),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7601.valid){
continue;
}
IkReal x7599=((1.0)*(x7601.value));
IkReal x7600=x7584;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7599)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7599)));
IkReal gconst136=(x7598*x7600);
IkReal gconst137=((1.0)*r20*x7600);
IkReal x7602=r22*r22;
IkReal x7603=((1.0)*x7602);
CheckValue<IkReal> x7607=IKPowWithIntegerCheck(((-1.0)+x7602),-1);
if(!x7607.valid){
continue;
}
IkReal x7604=x7607.value;
if((((1.0)+(((-1.0)*x7603)))) < -0.00001)
continue;
IkReal x7605=IKsqrt(((1.0)+(((-1.0)*x7603))));
IkReal x7606=(sj0*x7604*x7605);
j4eval[0]=((IKabs(((((-1.0)*x7603*x7606))+x7606)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7608=((-1.0)*r21);
CheckValue<IkReal> x7611 = IKatan2WithCheck(IkReal(x7608),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7611.valid){
continue;
}
IkReal x7609=((1.0)*(x7611.value));
IkReal x7610=x7584;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7609)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7609)));
IkReal gconst136=(x7608*x7610);
IkReal gconst137=((1.0)*r20*x7610);
IkReal x7612=r22*r22;
IkReal x7613=(r12*sj0);
IkReal x7614=(cj0*r02);
CheckValue<IkReal> x7618=IKPowWithIntegerCheck(((-1.0)+x7612),-1);
if(!x7618.valid){
continue;
}
IkReal x7615=x7618.value;
if((((1.0)+(((-1.0)*x7612)))) < -0.00001)
continue;
IkReal x7616=IKsqrt(((1.0)+(((-1.0)*x7612))));
IkReal x7617=(r22*x7615*x7616);
j4eval[0]=0;
j4eval[1]=((IKabs((((x7613*x7617))+((x7614*x7617)))))+(IKabs(((((-1.0)*x7614))+(((-1.0)*x7613))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7619=((1.0)*sj0);
IkReal x7620=((1.0)*cj0);
CheckValue<IkReal> x7621=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7621.valid){
continue;
}
CheckValue<IkReal> x7622 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7619))+(((-1.0)*r02*x7620)))),IkReal(((((-1.0)*gconst136*r01*x7620))+(((-1.0)*gconst136*r11*x7619))+((gconst137*r10*sj0))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7621.value)))+(x7622.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7623=IKsin(j4);
IkReal x7624=IKcos(j4);
IkReal x7625=(cj1*cj2);
IkReal x7626=(gconst136*r01);
IkReal x7627=(gconst137*r20);
IkReal x7628=(gconst137*r10);
IkReal x7629=((1.0)*sj1);
IkReal x7630=(gconst137*r00);
IkReal x7631=((1.0)*x7624);
IkReal x7632=((1.0)*x7623);
IkReal x7633=(gconst136*x7623);
IkReal x7634=(gconst136*x7624);
evalcond[0]=((((-1.0)*r22*x7631))+((r21*x7633))+(((-1.0)*x7627*x7632)));
evalcond[1]=(cj0+((r11*x7633))+(((-1.0)*x7628*x7632))+(((-1.0)*r12*x7631)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7630*x7632))+(((-1.0)*r02*x7631))+((x7623*x7626)));
evalcond[3]=((((-1.0)*cj2*x7629))+((r21*x7634))+(((-1.0)*cj1*sj2))+(((-1.0)*x7627*x7631))+((r22*x7623)));
evalcond[4]=(((x7624*x7626))+((r02*x7623))+(((-1.0)*x7630*x7631))+(((-1.0)*cj0*sj2*x7629))+((cj0*x7625)));
evalcond[5]=(((r11*x7634))+(((-1.0)*x7628*x7631))+((sj0*x7625))+(((-1.0)*sj0*sj2*x7629))+((r12*x7623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7635=((1.0)*gconst137);
CheckValue<IkReal> x7636=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7635)))),-1);
if(!x7636.valid){
continue;
}
CheckValue<IkReal> x7637 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*r20*sj0*x7635)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7636.value)))+(x7637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7638=IKsin(j4);
IkReal x7639=IKcos(j4);
IkReal x7640=(cj1*cj2);
IkReal x7641=(gconst136*r01);
IkReal x7642=(gconst137*r20);
IkReal x7643=(gconst137*r10);
IkReal x7644=((1.0)*sj1);
IkReal x7645=(gconst137*r00);
IkReal x7646=((1.0)*x7639);
IkReal x7647=((1.0)*x7638);
IkReal x7648=(gconst136*x7638);
IkReal x7649=(gconst136*x7639);
evalcond[0]=((((-1.0)*r22*x7646))+((r21*x7648))+(((-1.0)*x7642*x7647)));
evalcond[1]=(cj0+(((-1.0)*r12*x7646))+(((-1.0)*x7643*x7647))+((r11*x7648)));
evalcond[2]=((((-1.0)*sj0))+((x7638*x7641))+(((-1.0)*r02*x7646))+(((-1.0)*x7645*x7647)));
evalcond[3]=((((-1.0)*cj2*x7644))+(((-1.0)*cj1*sj2))+((r21*x7649))+((r22*x7638))+(((-1.0)*x7642*x7646)));
evalcond[4]=((((-1.0)*cj0*sj2*x7644))+((x7639*x7641))+(((-1.0)*x7645*x7646))+((r02*x7638))+((cj0*x7640)));
evalcond[5]=(((sj0*x7640))+((r12*x7638))+(((-1.0)*sj0*sj2*x7644))+(((-1.0)*x7643*x7646))+((r11*x7649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7650=((1.0)*gconst137);
CheckValue<IkReal> x7651 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7650))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7651.valid){
continue;
}
CheckValue<IkReal> x7652=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x7650)))),-1);
if(!x7652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7651.value)+(((1.5707963267949)*(x7652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7653=IKsin(j4);
IkReal x7654=IKcos(j4);
IkReal x7655=(cj1*cj2);
IkReal x7656=(gconst136*r01);
IkReal x7657=(gconst137*r20);
IkReal x7658=(gconst137*r10);
IkReal x7659=((1.0)*sj1);
IkReal x7660=(gconst137*r00);
IkReal x7661=((1.0)*x7654);
IkReal x7662=((1.0)*x7653);
IkReal x7663=(gconst136*x7653);
IkReal x7664=(gconst136*x7654);
evalcond[0]=(((r21*x7663))+(((-1.0)*r22*x7661))+(((-1.0)*x7657*x7662)));
evalcond[1]=((((-1.0)*r12*x7661))+cj0+((r11*x7663))+(((-1.0)*x7658*x7662)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7661))+(((-1.0)*x7660*x7662))+((x7653*x7656)));
evalcond[3]=(((r22*x7653))+(((-1.0)*cj2*x7659))+((r21*x7664))+(((-1.0)*cj1*sj2))+(((-1.0)*x7657*x7661)));
evalcond[4]=(((r02*x7653))+((x7654*x7656))+((cj0*x7655))+(((-1.0)*x7660*x7661))+(((-1.0)*cj0*sj2*x7659)));
evalcond[5]=((((-1.0)*sj0*sj2*x7659))+((r11*x7664))+(((-1.0)*x7658*x7661))+((r12*x7653))+((sj0*x7655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7665=((-1.0)*r10);
IkReal x7667 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7667)==0){
continue;
}
IkReal x7666=pow(x7667,-0.5);
CheckValue<IkReal> x7668 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7665),IKFAST_ATAN2_MAGTHRESH);
if(!x7668.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7668.value));
IkReal gconst139=(r11*x7666);
IkReal gconst140=(x7665*x7666);
CheckValue<IkReal> x7669 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7669.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7669.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7670=((-1.0)*r10);
IkReal x7671=x7666;
CheckValue<IkReal> x7673 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7670),IKFAST_ATAN2_MAGTHRESH);
if(!x7673.valid){
continue;
}
IkReal x7672=((-1.0)*(x7673.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7672;
IkReal gconst138=x7672;
IkReal gconst139=(r11*x7671);
IkReal gconst140=(x7670*x7671);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7674=((1.0)*sj0);
IkReal x7675=((1.0)*gconst139);
CheckValue<IkReal> x7676=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7675)))),-1);
if(!x7676.valid){
continue;
}
CheckValue<IkReal> x7677 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7674)))),IkReal(((((-1.0)*cj0*r01*x7675))+((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x7674))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7676.value)))+(x7677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7678=IKsin(j4);
IkReal x7679=IKcos(j4);
IkReal x7680=(cj1*cj2);
IkReal x7681=(gconst139*r11);
IkReal x7682=((1.0)*sj1);
IkReal x7683=((1.0)*x7679);
IkReal x7684=(gconst139*x7679);
IkReal x7685=(gconst139*x7678);
IkReal x7686=((1.0)*gconst140*x7678);
evalcond[0]=((((-1.0)*r20*x7686))+(((-1.0)*r22*x7683))+((r21*x7685)));
evalcond[1]=((((-1.0)*r10*x7686))+cj0+(((-1.0)*r12*x7683))+((x7678*x7681)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x7686))+((r01*x7685))+(((-1.0)*r02*x7683)));
evalcond[3]=(((r22*x7678))+(((-1.0)*cj1*sj2))+((r21*x7684))+(((-1.0)*cj2*x7682))+(((-1.0)*gconst140*r20*x7683)));
evalcond[4]=((((-1.0)*cj0*sj2*x7682))+((r02*x7678))+((cj0*x7680))+((r01*x7684))+(((-1.0)*gconst140*r00*x7683)));
evalcond[5]=(((x7679*x7681))+((r12*x7678))+(((-1.0)*gconst140*r10*x7683))+((sj0*x7680))+(((-1.0)*sj0*sj2*x7682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7687=((1.0)*gconst140);
CheckValue<IkReal> x7688 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7688.valid){
continue;
}
CheckValue<IkReal> x7689=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7687))+(((-1.0)*gconst139*r00)))),-1);
if(!x7689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7688.value)+(((1.5707963267949)*(x7689.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7690=IKsin(j4);
IkReal x7691=IKcos(j4);
IkReal x7692=(cj1*cj2);
IkReal x7693=(gconst139*r11);
IkReal x7694=((1.0)*sj1);
IkReal x7695=((1.0)*x7691);
IkReal x7696=(gconst139*x7691);
IkReal x7697=(gconst139*x7690);
IkReal x7698=((1.0)*gconst140*x7690);
evalcond[0]=((((-1.0)*r22*x7695))+((r21*x7697))+(((-1.0)*r20*x7698)));
evalcond[1]=((((-1.0)*r10*x7698))+cj0+((x7690*x7693))+(((-1.0)*r12*x7695)));
evalcond[2]=((((-1.0)*r02*x7695))+(((-1.0)*sj0))+(((-1.0)*r00*x7698))+((r01*x7697)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r21*x7696))+(((-1.0)*cj2*x7694))+(((-1.0)*gconst140*r20*x7695))+((r22*x7690)));
evalcond[4]=(((r02*x7690))+(((-1.0)*gconst140*r00*x7695))+(((-1.0)*cj0*sj2*x7694))+((cj0*x7692))+((r01*x7696)));
evalcond[5]=((((-1.0)*gconst140*r10*x7695))+((x7691*x7693))+((r12*x7690))+((sj0*x7692))+(((-1.0)*sj0*sj2*x7694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7699=((-1.0)*r11);
IkReal x7701 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7701)==0){
continue;
}
IkReal x7700=pow(x7701,-0.5);
CheckValue<IkReal> x7702 = IKatan2WithCheck(IkReal(x7699),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7702.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7702.value))));
IkReal gconst142=(x7699*x7700);
IkReal gconst143=((1.0)*r10*x7700);
CheckValue<IkReal> x7703 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7703.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7703.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7704=((-1.0)*r11);
CheckValue<IkReal> x7707 = IKatan2WithCheck(IkReal(x7704),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7707.valid){
continue;
}
IkReal x7705=((1.0)*(x7707.value));
IkReal x7706=x7700;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7705)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7705)));
IkReal gconst142=(x7704*x7706);
IkReal gconst143=((1.0)*r10*x7706);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7708=((-1.0)*r11);
CheckValue<IkReal> x7711 = IKatan2WithCheck(IkReal(x7708),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7711.valid){
continue;
}
IkReal x7709=((1.0)*(x7711.value));
IkReal x7710=x7700;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7709)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7709)));
IkReal gconst142=(x7708*x7710);
IkReal gconst143=((1.0)*r10*x7710);
IkReal x7712=r12*r12;
IkReal x7713=((1.0)*sj0);
IkReal x7714=(cj0*r02);
IkReal x7715=x7700;
j4eval[0]=((IKabs(((((-1.0)*r12*x7713))+(((-1.0)*x7714)))))+(IKabs((((sj0*x7712*x7715))+((r12*x7714*x7715))+(((-1.0)*x7713*x7715))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7716=((-1.0)*r11);
CheckValue<IkReal> x7719 = IKatan2WithCheck(IkReal(x7716),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7719.valid){
continue;
}
IkReal x7717=((1.0)*(x7719.value));
IkReal x7718=x7700;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7717)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7717)));
IkReal gconst142=(x7716*x7718);
IkReal gconst143=((1.0)*r10*x7718);
IkReal x7720=((1.0)+(((-1.0)*(r12*r12))));
IkReal x7721=(cj1*r22*sj2);
IkReal x7722=(cj2*r22*sj1);
CheckValue<IkReal> x7728=IKPowWithIntegerCheck(x7720,-1);
if(!x7728.valid){
continue;
}
IkReal x7723=x7728.value;
IkReal x7724=((1.0)*x7723);
IkReal x7725=x7700;
IkReal x7726=(r12*x7725);
IkReal x7727=((((-2.0)*r10*r11*r20*r21*x7723))+(((-1.0)*x7724*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x7724*(r11*r11)*(r21*r21))));
j4eval[0]=x7727;
j4eval[1]=((IKabs(((((-1.0)*x7721))+(((-1.0)*x7722)))))+(IKabs((((x7721*x7726))+((x7722*x7726))))));
j4eval[2]=IKsign(x7727);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7729=(gconst142*r21);
IkReal x7730=(cj1*sj2);
IkReal x7731=(gconst143*r20);
IkReal x7732=(cj2*sj1);
IkReal x7733=((1.0)*r22);
CheckValue<IkReal> x7734 = IKatan2WithCheck(IkReal(((((-1.0)*x7732*x7733))+(((-1.0)*x7730*x7733)))),IkReal((((x7731*x7732))+((x7730*x7731))+(((-1.0)*x7729*x7730))+(((-1.0)*x7729*x7732)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7734.valid){
continue;
}
CheckValue<IkReal> x7735=IKPowWithIntegerCheck(IKsign(((((2.0)*x7729*x7731))+(((-1.0)*r22*x7733))+(((-1.0)*(x7731*x7731)))+(((-1.0)*(x7729*x7729))))),-1);
if(!x7735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7734.value)+(((1.5707963267949)*(x7735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7736=IKsin(j4);
IkReal x7737=IKcos(j4);
IkReal x7738=(cj1*cj2);
IkReal x7739=(gconst143*r20);
IkReal x7740=(gconst142*r01);
IkReal x7741=((1.0)*sj1);
IkReal x7742=(gconst143*r00);
IkReal x7743=(gconst143*r10);
IkReal x7744=((1.0)*x7737);
IkReal x7745=((1.0)*x7736);
IkReal x7746=(gconst142*x7736);
IkReal x7747=(gconst142*x7737);
evalcond[0]=((((-1.0)*r22*x7744))+(((-1.0)*x7739*x7745))+((r21*x7746)));
evalcond[1]=(cj0+(((-1.0)*r12*x7744))+(((-1.0)*x7743*x7745))+((r11*x7746)));
evalcond[2]=((((-1.0)*x7742*x7745))+(((-1.0)*sj0))+(((-1.0)*r02*x7744))+((x7736*x7740)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*x7739*x7744))+(((-1.0)*cj2*x7741))+((r22*x7736))+((r21*x7747)));
evalcond[4]=((((-1.0)*x7742*x7744))+(((-1.0)*cj0*sj2*x7741))+((cj0*x7738))+((x7737*x7740))+((r02*x7736)));
evalcond[5]=(((r12*x7736))+(((-1.0)*sj0*sj2*x7741))+(((-1.0)*x7743*x7744))+((sj0*x7738))+((r11*x7747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7748=((1.0)*sj0);
IkReal x7749=((1.0)*gconst142);
CheckValue<IkReal> x7750 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7748))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7749))+((gconst143*r10*sj0))+(((-1.0)*gconst142*r11*x7748)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7750.valid){
continue;
}
CheckValue<IkReal> x7751=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r21))+(((-1.0)*r20*x7749)))),-1);
if(!x7751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7750.value)+(((1.5707963267949)*(x7751.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7752=IKsin(j4);
IkReal x7753=IKcos(j4);
IkReal x7754=(cj1*cj2);
IkReal x7755=(gconst143*r20);
IkReal x7756=(gconst142*r01);
IkReal x7757=((1.0)*sj1);
IkReal x7758=(gconst143*r00);
IkReal x7759=(gconst143*r10);
IkReal x7760=((1.0)*x7753);
IkReal x7761=((1.0)*x7752);
IkReal x7762=(gconst142*x7752);
IkReal x7763=(gconst142*x7753);
evalcond[0]=((((-1.0)*x7755*x7761))+(((-1.0)*r22*x7760))+((r21*x7762)));
evalcond[1]=(cj0+(((-1.0)*x7759*x7761))+(((-1.0)*r12*x7760))+((r11*x7762)));
evalcond[2]=(((x7752*x7756))+(((-1.0)*sj0))+(((-1.0)*r02*x7760))+(((-1.0)*x7758*x7761)));
evalcond[3]=((((-1.0)*x7755*x7760))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x7757))+((r21*x7763))+((r22*x7752)));
evalcond[4]=((((-1.0)*cj0*sj2*x7757))+((r02*x7752))+(((-1.0)*x7758*x7760))+((cj0*x7754))+((x7753*x7756)));
evalcond[5]=((((-1.0)*sj0*sj2*x7757))+((sj0*x7754))+(((-1.0)*x7759*x7760))+((r11*x7763))+((r12*x7752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7764=((1.0)*gconst143);
CheckValue<IkReal> x7765 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst142*r21))+(((-1.0)*cj0*r20*x7764)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7765.valid){
continue;
}
CheckValue<IkReal> x7766=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7764))+(((-1.0)*gconst142*r00)))),-1);
if(!x7766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7765.value)+(((1.5707963267949)*(x7766.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7767=IKsin(j4);
IkReal x7768=IKcos(j4);
IkReal x7769=(cj1*cj2);
IkReal x7770=(gconst143*r20);
IkReal x7771=(gconst142*r01);
IkReal x7772=((1.0)*sj1);
IkReal x7773=(gconst143*r00);
IkReal x7774=(gconst143*r10);
IkReal x7775=((1.0)*x7768);
IkReal x7776=((1.0)*x7767);
IkReal x7777=(gconst142*x7767);
IkReal x7778=(gconst142*x7768);
evalcond[0]=((((-1.0)*r22*x7775))+(((-1.0)*x7770*x7776))+((r21*x7777)));
evalcond[1]=(((r11*x7777))+cj0+(((-1.0)*r12*x7775))+(((-1.0)*x7774*x7776)));
evalcond[2]=((((-1.0)*r02*x7775))+((x7767*x7771))+(((-1.0)*sj0))+(((-1.0)*x7773*x7776)));
evalcond[3]=(((r22*x7767))+(((-1.0)*cj1*sj2))+(((-1.0)*x7770*x7775))+(((-1.0)*cj2*x7772))+((r21*x7778)));
evalcond[4]=(((x7768*x7771))+((cj0*x7769))+((r02*x7767))+(((-1.0)*x7773*x7775))+(((-1.0)*cj0*sj2*x7772)));
evalcond[5]=(((r11*x7778))+(((-1.0)*sj0*sj2*x7772))+((sj0*x7769))+((r12*x7767))+(((-1.0)*x7774*x7775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7779=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7779;
j4eval[1]=IKsign(x7779);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7780=((1.0)*cj5);
IkReal x7781=((((-1.0)*r01*x7780))+(((-1.0)*r00*sj5)));
j4eval[0]=x7781;
j4eval[1]=((IKabs(((((-1.0)*r20*x7780))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7781);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7782=(cj5*r10);
IkReal x7783=(sj1*sj2);
IkReal x7784=(r11*sj5);
IkReal x7785=((1.0)*cj1*cj2);
IkReal x7786=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7786;
j4eval[1]=((IKabs((((r12*x7783))+(((-1.0)*r12*x7785)))))+(IKabs((((cj1*cj2*x7784))+(((-1.0)*x7782*x7785))+((x7782*x7783))+(((-1.0)*x7783*x7784))))));
j4eval[2]=IKsign(x7786);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7787=(cj5*r10);
IkReal x7788=(sj1*sj2);
IkReal x7789=(r11*sj5);
IkReal x7790=((1.0)*cj1*cj2);
CheckValue<IkReal> x7791=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7791.valid){
continue;
}
CheckValue<IkReal> x7792 = IKatan2WithCheck(IkReal((((cj1*cj2*x7789))+(((-1.0)*x7788*x7789))+((x7787*x7788))+(((-1.0)*x7787*x7790)))),IkReal(((((-1.0)*r12*x7790))+((r12*x7788)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7791.value)))+(x7792.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7793=IKcos(j4);
IkReal x7794=IKsin(j4);
IkReal x7795=(cj5*r00);
IkReal x7796=(cj5*r10);
IkReal x7797=(r21*sj5);
IkReal x7798=((1.0)*sj1);
IkReal x7799=(cj5*r20);
IkReal x7800=((1.0)*x7793);
IkReal x7801=((1.0)*x7794);
IkReal x7802=(sj5*x7794);
IkReal x7803=(sj5*x7793);
evalcond[0]=(((r11*x7803))+((r12*x7794))+(((-1.0)*x7796*x7800)));
evalcond[1]=(((x7794*x7797))+(((-1.0)*r22*x7800))+(((-1.0)*x7799*x7801)));
evalcond[2]=((((-1.0)*x7795*x7801))+(((-1.0)*r02*x7800))+((r01*x7802)));
evalcond[3]=((1.0)+((r11*x7802))+(((-1.0)*r12*x7800))+(((-1.0)*x7796*x7801)));
evalcond[4]=((((-1.0)*x7795*x7800))+((r01*x7803))+((r02*x7794))+(((-1.0)*sj2*x7798))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x7793*x7797))+(((-1.0)*cj2*x7798))+(((-1.0)*x7799*x7800))+((r22*x7794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7804=((1.0)*cj5);
CheckValue<IkReal> x7805=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7804)))),-1);
if(!x7805.valid){
continue;
}
CheckValue<IkReal> x7806 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x7804))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7805.value)))+(x7806.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7807=IKcos(j4);
IkReal x7808=IKsin(j4);
IkReal x7809=(cj5*r00);
IkReal x7810=(cj5*r10);
IkReal x7811=(r21*sj5);
IkReal x7812=((1.0)*sj1);
IkReal x7813=(cj5*r20);
IkReal x7814=((1.0)*x7807);
IkReal x7815=((1.0)*x7808);
IkReal x7816=(sj5*x7808);
IkReal x7817=(sj5*x7807);
evalcond[0]=(((r11*x7817))+((r12*x7808))+(((-1.0)*x7810*x7814)));
evalcond[1]=((((-1.0)*r22*x7814))+((x7808*x7811))+(((-1.0)*x7813*x7815)));
evalcond[2]=((((-1.0)*r02*x7814))+((r01*x7816))+(((-1.0)*x7809*x7815)));
evalcond[3]=((1.0)+((r11*x7816))+(((-1.0)*r12*x7814))+(((-1.0)*x7810*x7815)));
evalcond[4]=((((-1.0)*sj2*x7812))+((r02*x7808))+((r01*x7817))+((cj1*cj2))+(((-1.0)*x7809*x7814)));
evalcond[5]=((((-1.0)*cj2*x7812))+((r22*x7808))+(((-1.0)*cj1*sj2))+((x7807*x7811))+(((-1.0)*x7813*x7814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7818=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7818.valid){
continue;
}
CheckValue<IkReal> x7819 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7818.value)))+(x7819.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7820=IKcos(j4);
IkReal x7821=IKsin(j4);
IkReal x7822=(cj5*r00);
IkReal x7823=(cj5*r10);
IkReal x7824=(r21*sj5);
IkReal x7825=((1.0)*sj1);
IkReal x7826=(cj5*r20);
IkReal x7827=((1.0)*x7820);
IkReal x7828=((1.0)*x7821);
IkReal x7829=(sj5*x7821);
IkReal x7830=(sj5*x7820);
evalcond[0]=(((r12*x7821))+(((-1.0)*x7823*x7827))+((r11*x7830)));
evalcond[1]=((((-1.0)*x7826*x7828))+(((-1.0)*r22*x7827))+((x7821*x7824)));
evalcond[2]=((((-1.0)*r02*x7827))+((r01*x7829))+(((-1.0)*x7822*x7828)));
evalcond[3]=((1.0)+((r11*x7829))+(((-1.0)*x7823*x7828))+(((-1.0)*r12*x7827)));
evalcond[4]=(((r02*x7821))+(((-1.0)*sj2*x7825))+((r01*x7830))+(((-1.0)*x7822*x7827))+((cj1*cj2)));
evalcond[5]=(((x7820*x7824))+(((-1.0)*x7826*x7827))+(((-1.0)*cj2*x7825))+(((-1.0)*cj1*sj2))+((r22*x7821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7831=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7831;
j4eval[1]=IKsign(x7831);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7832=((1.0)*cj5);
IkReal x7833=((((-1.0)*r21*x7832))+(((-1.0)*r20*sj5)));
j4eval[0]=x7833;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x7832)))))+(IKabs(r02)));
j4eval[2]=IKsign(x7833);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7834=cj5*cj5;
IkReal x7835=r11*r11;
IkReal x7836=(r11*sj5);
IkReal x7837=(cj5*r10);
IkReal x7838=((r12*r12)+((x7834*(r10*r10)))+(((-2.0)*x7836*x7837))+x7835+(((-1.0)*x7834*x7835)));
j4eval[0]=x7838;
j4eval[1]=IKsign(x7838);
j4eval[2]=((IKabs(r12))+(IKabs((x7836+(((-1.0)*x7837))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7839=cj5*cj5;
IkReal x7840=r11*r11;
IkReal x7841=(cj5*r10);
IkReal x7842=(r11*sj5);
CheckValue<IkReal> x7843=IKPowWithIntegerCheck(IKsign((((x7839*(r10*r10)))+(r12*r12)+x7840+(((-2.0)*x7841*x7842))+(((-1.0)*x7839*x7840)))),-1);
if(!x7843.valid){
continue;
}
CheckValue<IkReal> x7844 = IKatan2WithCheck(IkReal(((((-1.0)*x7841))+x7842)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7843.value)))+(x7844.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7845=IKcos(j4);
IkReal x7846=IKsin(j4);
IkReal x7847=(cj5*r00);
IkReal x7848=(cj5*r10);
IkReal x7849=(r21*sj5);
IkReal x7850=((1.0)*cj2);
IkReal x7851=(cj5*r20);
IkReal x7852=((1.0)*x7845);
IkReal x7853=((1.0)*x7846);
IkReal x7854=(sj5*x7846);
IkReal x7855=(sj5*x7845);
evalcond[0]=((((-1.0)*x7848*x7852))+((r12*x7846))+((r11*x7855)));
evalcond[1]=((((-1.0)*x7851*x7853))+((x7846*x7849))+(((-1.0)*r22*x7852)));
evalcond[2]=((((-1.0)*x7847*x7853))+((r01*x7854))+(((-1.0)*r02*x7852)));
evalcond[3]=((-1.0)+(((-1.0)*x7848*x7853))+((r11*x7854))+(((-1.0)*r12*x7852)));
evalcond[4]=((((-1.0)*x7847*x7852))+((sj1*sj2))+(((-1.0)*cj1*x7850))+((r01*x7855))+((r02*x7846)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x7851*x7852))+((r22*x7846))+(((-1.0)*sj1*x7850))+((x7845*x7849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7856=((1.0)*cj5);
CheckValue<IkReal> x7857 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7857.valid){
continue;
}
CheckValue<IkReal> x7858=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7856))+(((-1.0)*r20*sj5)))),-1);
if(!x7858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7857.value)+(((1.5707963267949)*(x7858.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7859=IKcos(j4);
IkReal x7860=IKsin(j4);
IkReal x7861=(cj5*r00);
IkReal x7862=(cj5*r10);
IkReal x7863=(r21*sj5);
IkReal x7864=((1.0)*cj2);
IkReal x7865=(cj5*r20);
IkReal x7866=((1.0)*x7859);
IkReal x7867=((1.0)*x7860);
IkReal x7868=(sj5*x7860);
IkReal x7869=(sj5*x7859);
evalcond[0]=((((-1.0)*x7862*x7866))+((r11*x7869))+((r12*x7860)));
evalcond[1]=(((x7860*x7863))+(((-1.0)*x7865*x7867))+(((-1.0)*r22*x7866)));
evalcond[2]=(((r01*x7868))+(((-1.0)*r02*x7866))+(((-1.0)*x7861*x7867)));
evalcond[3]=((-1.0)+(((-1.0)*x7862*x7867))+((r11*x7868))+(((-1.0)*r12*x7866)));
evalcond[4]=(((sj1*sj2))+((r01*x7869))+(((-1.0)*cj1*x7864))+((r02*x7860))+(((-1.0)*x7861*x7866)));
evalcond[5]=((((-1.0)*sj1*x7864))+(((-1.0)*cj1*sj2))+((x7859*x7863))+((r22*x7860))+(((-1.0)*x7865*x7866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7870 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7870.valid){
continue;
}
CheckValue<IkReal> x7871=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7870.value)+(((1.5707963267949)*(x7871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7872=IKcos(j4);
IkReal x7873=IKsin(j4);
IkReal x7874=(cj5*r00);
IkReal x7875=(cj5*r10);
IkReal x7876=(r21*sj5);
IkReal x7877=((1.0)*cj2);
IkReal x7878=(cj5*r20);
IkReal x7879=((1.0)*x7872);
IkReal x7880=((1.0)*x7873);
IkReal x7881=(sj5*x7873);
IkReal x7882=(sj5*x7872);
evalcond[0]=((((-1.0)*x7875*x7879))+((r12*x7873))+((r11*x7882)));
evalcond[1]=((((-1.0)*r22*x7879))+(((-1.0)*x7878*x7880))+((x7873*x7876)));
evalcond[2]=(((r01*x7881))+(((-1.0)*r02*x7879))+(((-1.0)*x7874*x7880)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7879))+((r11*x7881))+(((-1.0)*x7875*x7880)));
evalcond[4]=((((-1.0)*x7874*x7879))+((r01*x7882))+((sj1*sj2))+(((-1.0)*cj1*x7877))+((r02*x7873)));
evalcond[5]=((((-1.0)*x7878*x7879))+(((-1.0)*sj1*x7877))+(((-1.0)*cj1*sj2))+((x7872*x7876))+((r22*x7873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7883=((-1.0)*r00);
IkReal x7885 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7885)==0){
continue;
}
IkReal x7884=pow(x7885,-0.5);
CheckValue<IkReal> x7886 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7883),IKFAST_ATAN2_MAGTHRESH);
if(!x7886.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7886.value));
IkReal gconst145=(r01*x7884);
IkReal gconst146=(x7883*x7884);
CheckValue<IkReal> x7887 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7887.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7887.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7888=((-1.0)*r00);
IkReal x7889=x7884;
CheckValue<IkReal> x7891 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7888),IKFAST_ATAN2_MAGTHRESH);
if(!x7891.valid){
continue;
}
IkReal x7890=((-1.0)*(x7891.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7890;
IkReal gconst144=x7890;
IkReal gconst145=(r01*x7889);
IkReal gconst146=(x7888*x7889);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7892=((1.0)*sj0);
IkReal x7893=((1.0)*gconst145);
CheckValue<IkReal> x7894 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7892))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*cj0*r01*x7893))+(((-1.0)*gconst145*r11*x7892)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7894.valid){
continue;
}
CheckValue<IkReal> x7895=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7893))+(((-1.0)*gconst146*r21)))),-1);
if(!x7895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7894.value)+(((1.5707963267949)*(x7895.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7896=IKsin(j4);
IkReal x7897=IKcos(j4);
IkReal x7898=(gconst145*r21);
IkReal x7899=(cj1*cj2);
IkReal x7900=((1.0)*sj1);
IkReal x7901=((1.0)*x7897);
IkReal x7902=(gconst145*x7896);
IkReal x7903=(gconst145*x7897);
IkReal x7904=((1.0)*gconst146*x7896);
evalcond[0]=((((-1.0)*r20*x7904))+((x7896*x7898))+(((-1.0)*r22*x7901)));
evalcond[1]=((((-1.0)*r12*x7901))+cj0+((r11*x7902))+(((-1.0)*r10*x7904)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x7904))+((r01*x7902))+(((-1.0)*r02*x7901)));
evalcond[3]=((((-1.0)*cj2*x7900))+(((-1.0)*gconst146*r20*x7901))+(((-1.0)*cj1*sj2))+((r22*x7896))+((x7897*x7898)));
evalcond[4]=(((r02*x7896))+((cj0*x7899))+((r01*x7903))+(((-1.0)*cj0*sj2*x7900))+(((-1.0)*gconst146*r00*x7901)));
evalcond[5]=((((-1.0)*gconst146*r10*x7901))+(((-1.0)*sj0*sj2*x7900))+((r12*x7896))+((r11*x7903))+((sj0*x7899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7905=((1.0)*gconst146);
CheckValue<IkReal> x7906 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst145*r21*sj0))+(((-1.0)*r20*sj0*x7905)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7906.valid){
continue;
}
CheckValue<IkReal> x7907=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7905))+(((-1.0)*gconst145*r10)))),-1);
if(!x7907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7906.value)+(((1.5707963267949)*(x7907.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7908=IKsin(j4);
IkReal x7909=IKcos(j4);
IkReal x7910=(gconst145*r21);
IkReal x7911=(cj1*cj2);
IkReal x7912=((1.0)*sj1);
IkReal x7913=((1.0)*x7909);
IkReal x7914=(gconst145*x7908);
IkReal x7915=(gconst145*x7909);
IkReal x7916=((1.0)*gconst146*x7908);
evalcond[0]=((((-1.0)*r22*x7913))+(((-1.0)*r20*x7916))+((x7908*x7910)));
evalcond[1]=(cj0+((r11*x7914))+(((-1.0)*r10*x7916))+(((-1.0)*r12*x7913)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7913))+((r01*x7914))+(((-1.0)*r00*x7916)));
evalcond[3]=((((-1.0)*cj2*x7912))+(((-1.0)*cj1*sj2))+((r22*x7908))+(((-1.0)*gconst146*r20*x7913))+((x7909*x7910)));
evalcond[4]=(((r02*x7908))+(((-1.0)*cj0*sj2*x7912))+(((-1.0)*gconst146*r00*x7913))+((r01*x7915))+((cj0*x7911)));
evalcond[5]=(((sj0*x7911))+((r11*x7915))+(((-1.0)*gconst146*r10*x7913))+(((-1.0)*sj0*sj2*x7912))+((r12*x7908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7917=((-1.0)*r01);
IkReal x7919 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7919)==0){
continue;
}
IkReal x7918=pow(x7919,-0.5);
CheckValue<IkReal> x7920 = IKatan2WithCheck(IkReal(x7917),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7920.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7920.value))));
IkReal gconst148=(x7917*x7918);
IkReal gconst149=((1.0)*r00*x7918);
CheckValue<IkReal> x7921 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7921.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7921.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7922=((-1.0)*r01);
CheckValue<IkReal> x7925 = IKatan2WithCheck(IkReal(x7922),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7925.valid){
continue;
}
IkReal x7923=((1.0)*(x7925.value));
IkReal x7924=x7918;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7923)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7923)));
IkReal gconst148=(x7922*x7924);
IkReal gconst149=((1.0)*r00*x7924);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7926=((-1.0)*r01);
CheckValue<IkReal> x7929 = IKatan2WithCheck(IkReal(x7926),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7929.valid){
continue;
}
IkReal x7927=((1.0)*(x7929.value));
IkReal x7928=x7918;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7927)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7927)));
IkReal gconst148=(x7926*x7928);
IkReal gconst149=((1.0)*r00*x7928);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7930=((-1.0)*r01);
CheckValue<IkReal> x7933 = IKatan2WithCheck(IkReal(x7930),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7933.valid){
continue;
}
IkReal x7931=((1.0)*(x7933.value));
IkReal x7932=x7918;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7931)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7931)));
IkReal gconst148=(x7930*x7932);
IkReal gconst149=((1.0)*r00*x7932);
IkReal x7934=r02*r02;
IkReal x7935=(r12*sj0);
IkReal x7936=((1.0)*cj0);
IkReal x7937=x7918;
j4eval[0]=((IKabs((((cj0*x7934*x7937))+(((-1.0)*x7936*x7937))+((r02*x7935*x7937)))))+(IKabs(((((-1.0)*r02*x7936))+(((-1.0)*x7935))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7938=((1.0)*sj0);
IkReal x7939=((1.0)*gconst148);
CheckValue<IkReal> x7940 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7938))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x7939))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x7938)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7940.valid){
continue;
}
CheckValue<IkReal> x7941=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x7939)))),-1);
if(!x7941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7940.value)+(((1.5707963267949)*(x7941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7942=IKsin(j4);
IkReal x7943=IKcos(j4);
IkReal x7944=(gconst149*r10);
IkReal x7945=(cj1*cj2);
IkReal x7946=((1.0)*sj1);
IkReal x7947=(gconst149*r00);
IkReal x7948=(gconst149*r20);
IkReal x7949=((1.0)*x7943);
IkReal x7950=(gconst148*x7943);
IkReal x7951=(gconst148*x7942);
IkReal x7952=((1.0)*x7942);
evalcond[0]=((((-1.0)*r22*x7949))+(((-1.0)*x7948*x7952))+((r21*x7951)));
evalcond[1]=(cj0+((r11*x7951))+(((-1.0)*r12*x7949))+(((-1.0)*x7944*x7952)));
evalcond[2]=(((r01*x7951))+(((-1.0)*x7947*x7952))+(((-1.0)*sj0))+(((-1.0)*r02*x7949)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r21*x7950))+(((-1.0)*cj2*x7946))+((r22*x7942))+(((-1.0)*x7948*x7949)));
evalcond[4]=(((r01*x7950))+((cj0*x7945))+((r02*x7942))+(((-1.0)*cj0*sj2*x7946))+(((-1.0)*x7947*x7949)));
evalcond[5]=((((-1.0)*sj0*sj2*x7946))+((sj0*x7945))+((r11*x7950))+((r12*x7942))+(((-1.0)*x7944*x7949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7953=((1.0)*gconst149);
CheckValue<IkReal> x7954 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7953))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7954.valid){
continue;
}
CheckValue<IkReal> x7955=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x7953)))),-1);
if(!x7955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7954.value)+(((1.5707963267949)*(x7955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7956=IKsin(j4);
IkReal x7957=IKcos(j4);
IkReal x7958=(gconst149*r10);
IkReal x7959=(cj1*cj2);
IkReal x7960=((1.0)*sj1);
IkReal x7961=(gconst149*r00);
IkReal x7962=(gconst149*r20);
IkReal x7963=((1.0)*x7957);
IkReal x7964=(gconst148*x7957);
IkReal x7965=(gconst148*x7956);
IkReal x7966=((1.0)*x7956);
evalcond[0]=(((r21*x7965))+(((-1.0)*r22*x7963))+(((-1.0)*x7962*x7966)));
evalcond[1]=(((r11*x7965))+cj0+(((-1.0)*x7958*x7966))+(((-1.0)*r12*x7963)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7965))+(((-1.0)*r02*x7963))+(((-1.0)*x7961*x7966)));
evalcond[3]=(((r21*x7964))+((r22*x7956))+(((-1.0)*cj1*sj2))+(((-1.0)*x7962*x7963))+(((-1.0)*cj2*x7960)));
evalcond[4]=(((r01*x7964))+((cj0*x7959))+(((-1.0)*cj0*sj2*x7960))+((r02*x7956))+(((-1.0)*x7961*x7963)));
evalcond[5]=(((r12*x7956))+((r11*x7964))+(((-1.0)*sj0*sj2*x7960))+(((-1.0)*x7958*x7963))+((sj0*x7959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7967=((1.0)*gconst149);
CheckValue<IkReal> x7968 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x7967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7968.valid){
continue;
}
CheckValue<IkReal> x7969=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x7967)))),-1);
if(!x7969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7968.value)+(((1.5707963267949)*(x7969.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7970=IKsin(j4);
IkReal x7971=IKcos(j4);
IkReal x7972=(gconst149*r10);
IkReal x7973=(cj1*cj2);
IkReal x7974=((1.0)*sj1);
IkReal x7975=(gconst149*r00);
IkReal x7976=(gconst149*r20);
IkReal x7977=((1.0)*x7971);
IkReal x7978=(gconst148*x7971);
IkReal x7979=(gconst148*x7970);
IkReal x7980=((1.0)*x7970);
evalcond[0]=((((-1.0)*r22*x7977))+(((-1.0)*x7976*x7980))+((r21*x7979)));
evalcond[1]=(cj0+((r11*x7979))+(((-1.0)*x7972*x7980))+(((-1.0)*r12*x7977)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7979))+(((-1.0)*r02*x7977))+(((-1.0)*x7975*x7980)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x7974))+(((-1.0)*x7976*x7977))+((r22*x7970))+((r21*x7978)));
evalcond[4]=(((r01*x7978))+(((-1.0)*x7975*x7977))+(((-1.0)*cj0*sj2*x7974))+((r02*x7970))+((cj0*x7973)));
evalcond[5]=(((r11*x7978))+((r12*x7970))+(((-1.0)*sj0*sj2*x7974))+(((-1.0)*x7972*x7977))+((sj0*x7973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7981=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7981;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7981);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7982=((1.0)*cj5);
IkReal x7983=((((-1.0)*r11*x7982))+(((-1.0)*r10*sj5)));
j4eval[0]=x7983;
j4eval[1]=((IKabs(((((-1.0)*r20*x7982))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7983);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7984=cj5*cj5;
IkReal x7985=r01*r01;
IkReal x7986=(cj5*r00);
IkReal x7987=(r01*sj5);
IkReal x7988=((((-1.0)*x7984*x7985))+((x7984*(r00*r00)))+x7985+(r02*r02)+(((-2.0)*x7986*x7987)));
j4eval[0]=x7988;
j4eval[1]=IKsign(x7988);
j4eval[2]=((IKabs((x7987+(((-1.0)*x7986)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7989=cj5*cj5;
IkReal x7990=r01*r01;
IkReal x7991=(r01*sj5);
IkReal x7992=(cj5*r00);
CheckValue<IkReal> x7993 = IKatan2WithCheck(IkReal((x7991+(((-1.0)*x7992)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7993.valid){
continue;
}
CheckValue<IkReal> x7994=IKPowWithIntegerCheck(IKsign((((x7989*(r00*r00)))+(((-2.0)*x7991*x7992))+x7990+(((-1.0)*x7989*x7990))+(r02*r02))),-1);
if(!x7994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7993.value)+(((1.5707963267949)*(x7994.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7995=IKcos(j4);
IkReal x7996=IKsin(j4);
IkReal x7997=(cj5*r00);
IkReal x7998=(cj5*r10);
IkReal x7999=(r21*sj5);
IkReal x8000=((1.0)*sj1);
IkReal x8001=(cj5*r20);
IkReal x8002=((1.0)*x7995);
IkReal x8003=((1.0)*x7996);
IkReal x8004=(sj5*x7996);
IkReal x8005=(sj5*x7995);
evalcond[0]=(((r01*x8005))+(((-1.0)*x7997*x8002))+((r02*x7996)));
evalcond[1]=(((x7996*x7999))+(((-1.0)*r22*x8002))+(((-1.0)*x8001*x8003)));
evalcond[2]=(((r11*x8004))+(((-1.0)*x7998*x8003))+(((-1.0)*r12*x8002)));
evalcond[3]=((-1.0)+((r01*x8004))+(((-1.0)*x7997*x8003))+(((-1.0)*r02*x8002)));
evalcond[4]=(((r11*x8005))+(((-1.0)*x7998*x8002))+(((-1.0)*sj2*x8000))+((cj1*cj2))+((r12*x7996)));
evalcond[5]=(((x7995*x7999))+(((-1.0)*cj1*sj2))+((r22*x7996))+(((-1.0)*x8001*x8002))+(((-1.0)*cj2*x8000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8006=((1.0)*cj5);
CheckValue<IkReal> x8007 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8007.valid){
continue;
}
CheckValue<IkReal> x8008=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8006)))),-1);
if(!x8008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8007.value)+(((1.5707963267949)*(x8008.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8009=IKcos(j4);
IkReal x8010=IKsin(j4);
IkReal x8011=(cj5*r00);
IkReal x8012=(cj5*r10);
IkReal x8013=(r21*sj5);
IkReal x8014=((1.0)*sj1);
IkReal x8015=(cj5*r20);
IkReal x8016=((1.0)*x8009);
IkReal x8017=((1.0)*x8010);
IkReal x8018=(sj5*x8010);
IkReal x8019=(sj5*x8009);
evalcond[0]=((((-1.0)*x8011*x8016))+((r02*x8010))+((r01*x8019)));
evalcond[1]=((((-1.0)*r22*x8016))+(((-1.0)*x8015*x8017))+((x8010*x8013)));
evalcond[2]=((((-1.0)*x8012*x8017))+((r11*x8018))+(((-1.0)*r12*x8016)));
evalcond[3]=((-1.0)+(((-1.0)*x8011*x8017))+(((-1.0)*r02*x8016))+((r01*x8018)));
evalcond[4]=((((-1.0)*x8012*x8016))+((r12*x8010))+((r11*x8019))+((cj1*cj2))+(((-1.0)*sj2*x8014)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r22*x8010))+(((-1.0)*x8015*x8016))+((x8009*x8013))+(((-1.0)*cj2*x8014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8020=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8020.valid){
continue;
}
CheckValue<IkReal> x8021 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8020.value)))+(x8021.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8022=IKcos(j4);
IkReal x8023=IKsin(j4);
IkReal x8024=(cj5*r00);
IkReal x8025=(cj5*r10);
IkReal x8026=(r21*sj5);
IkReal x8027=((1.0)*sj1);
IkReal x8028=(cj5*r20);
IkReal x8029=((1.0)*x8022);
IkReal x8030=((1.0)*x8023);
IkReal x8031=(sj5*x8023);
IkReal x8032=(sj5*x8022);
evalcond[0]=(((r02*x8023))+((r01*x8032))+(((-1.0)*x8024*x8029)));
evalcond[1]=((((-1.0)*x8028*x8030))+((x8023*x8026))+(((-1.0)*r22*x8029)));
evalcond[2]=((((-1.0)*r12*x8029))+((r11*x8031))+(((-1.0)*x8025*x8030)));
evalcond[3]=((-1.0)+(((-1.0)*x8024*x8030))+(((-1.0)*r02*x8029))+((r01*x8031)));
evalcond[4]=((((-1.0)*x8025*x8029))+((cj1*cj2))+((r12*x8023))+((r11*x8032))+(((-1.0)*sj2*x8027)));
evalcond[5]=(((x8022*x8026))+(((-1.0)*cj2*x8027))+(((-1.0)*cj1*sj2))+(((-1.0)*x8028*x8029))+((r22*x8023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8033=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8033;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8033);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8034=((1.0)*cj5);
IkReal x8035=((((-1.0)*r21*x8034))+(((-1.0)*r20*sj5)));
j4eval[0]=x8035;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8034))))));
j4eval[2]=IKsign(x8035);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8036=(sj1*sj2);
IkReal x8037=(r01*sj5);
IkReal x8038=(cj1*cj2);
IkReal x8039=((1.0)*cj5);
IkReal x8040=((((-1.0)*r21*x8039))+(((-1.0)*r20*sj5)));
j4eval[0]=x8040;
j4eval[1]=((IKabs(((((-1.0)*x8037*x8038))+((x8036*x8037))+(((-1.0)*r00*x8036*x8039))+((cj5*r00*x8038)))))+(IKabs(((((-1.0)*r02*x8036))+((r02*x8038))))));
j4eval[2]=IKsign(x8040);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8041=(sj1*sj2);
IkReal x8042=(r01*sj5);
IkReal x8043=(cj1*cj2);
IkReal x8044=((1.0)*cj5);
CheckValue<IkReal> x8045 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x8041*x8044))+(((-1.0)*x8042*x8043))+((cj5*r00*x8043))+((x8041*x8042)))),IkReal((((r02*x8043))+(((-1.0)*r02*x8041)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8045.valid){
continue;
}
CheckValue<IkReal> x8046=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8044))+(((-1.0)*r20*sj5)))),-1);
if(!x8046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8045.value)+(((1.5707963267949)*(x8046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8047=IKcos(j4);
IkReal x8048=IKsin(j4);
IkReal x8049=(cj5*r00);
IkReal x8050=(cj5*r10);
IkReal x8051=(r21*sj5);
IkReal x8052=((1.0)*cj2);
IkReal x8053=(cj5*r20);
IkReal x8054=((1.0)*x8047);
IkReal x8055=((1.0)*x8048);
IkReal x8056=(sj5*x8048);
IkReal x8057=(sj5*x8047);
evalcond[0]=(((r02*x8048))+(((-1.0)*x8049*x8054))+((r01*x8057)));
evalcond[1]=((((-1.0)*r22*x8054))+(((-1.0)*x8053*x8055))+((x8048*x8051)));
evalcond[2]=((((-1.0)*r12*x8054))+(((-1.0)*x8050*x8055))+((r11*x8056)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8054))+(((-1.0)*x8049*x8055))+((r01*x8056)));
evalcond[4]=((((-1.0)*x8050*x8054))+((sj1*sj2))+(((-1.0)*cj1*x8052))+((r11*x8057))+((r12*x8048)));
evalcond[5]=(((x8047*x8051))+(((-1.0)*cj1*sj2))+(((-1.0)*x8053*x8054))+(((-1.0)*sj1*x8052))+((r22*x8048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8058=((1.0)*cj5);
CheckValue<IkReal> x8059 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8058)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8059.valid){
continue;
}
CheckValue<IkReal> x8060=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8058))+(((-1.0)*r20*sj5)))),-1);
if(!x8060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8059.value)+(((1.5707963267949)*(x8060.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8061=IKcos(j4);
IkReal x8062=IKsin(j4);
IkReal x8063=(cj5*r00);
IkReal x8064=(cj5*r10);
IkReal x8065=(r21*sj5);
IkReal x8066=((1.0)*cj2);
IkReal x8067=(cj5*r20);
IkReal x8068=((1.0)*x8061);
IkReal x8069=((1.0)*x8062);
IkReal x8070=(sj5*x8062);
IkReal x8071=(sj5*x8061);
evalcond[0]=(((r01*x8071))+((r02*x8062))+(((-1.0)*x8063*x8068)));
evalcond[1]=((((-1.0)*x8067*x8069))+((x8062*x8065))+(((-1.0)*r22*x8068)));
evalcond[2]=((((-1.0)*x8064*x8069))+(((-1.0)*r12*x8068))+((r11*x8070)));
evalcond[3]=((1.0)+((r01*x8070))+(((-1.0)*x8063*x8069))+(((-1.0)*r02*x8068)));
evalcond[4]=((((-1.0)*x8064*x8068))+((sj1*sj2))+(((-1.0)*cj1*x8066))+((r11*x8071))+((r12*x8062)));
evalcond[5]=(((r22*x8062))+((x8061*x8065))+(((-1.0)*x8067*x8068))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8072 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8072.valid){
continue;
}
CheckValue<IkReal> x8073=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8072.value)+(((1.5707963267949)*(x8073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8074=IKcos(j4);
IkReal x8075=IKsin(j4);
IkReal x8076=(cj5*r00);
IkReal x8077=(cj5*r10);
IkReal x8078=(r21*sj5);
IkReal x8079=((1.0)*cj2);
IkReal x8080=(cj5*r20);
IkReal x8081=((1.0)*x8074);
IkReal x8082=((1.0)*x8075);
IkReal x8083=(sj5*x8075);
IkReal x8084=(sj5*x8074);
evalcond[0]=(((r02*x8075))+((r01*x8084))+(((-1.0)*x8076*x8081)));
evalcond[1]=(((x8075*x8078))+(((-1.0)*x8080*x8082))+(((-1.0)*r22*x8081)));
evalcond[2]=((((-1.0)*x8077*x8082))+((r11*x8083))+(((-1.0)*r12*x8081)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8081))+((r01*x8083))+(((-1.0)*x8076*x8082)));
evalcond[4]=(((sj1*sj2))+((r12*x8075))+(((-1.0)*x8077*x8081))+(((-1.0)*cj1*x8079))+((r11*x8084)));
evalcond[5]=((((-1.0)*sj1*x8079))+(((-1.0)*x8080*x8081))+(((-1.0)*cj1*sj2))+((r22*x8075))+((x8074*x8078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8085=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8085);
rxp1_1=(px*r21);
rxp1_2=(r11*x8085);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8086=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8086);
rxp1_1=(px*r21);
rxp1_2=(r11*x8086);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8087=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8087);
rxp1_1=(px*r21);
rxp1_2=(r11*x8087);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8090=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x8090.valid){
continue;
}
IkReal x8088=x8090.value;
IkReal x8089=(sj0*x8088);
cj4array[0]=(((sj1*sj2*x8089))+(((-1.0)*cj1*cj2*x8089)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8091=IKsin(j4);
IkReal x8092=IKcos(j4);
IkReal x8093=(r21*sj5);
IkReal x8094=((1.0)*cj5*r20);
evalcond[0]=(r02*x8091);
evalcond[1]=((((-1.0)*r02*x8092))+(((-1.0)*sj0)));
evalcond[2]=(((x8091*x8093))+(((-1.0)*x8091*x8094)));
evalcond[3]=((((-1.0)*cj5*r10*x8091))+((r11*sj5*x8091)));
evalcond[4]=((((-1.0)*x8092*x8094))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x8092*x8093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8096=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x8096.valid){
continue;
}
IkReal x8095=x8096.value;
cj4array[0]=(((cj2*sj1*x8095))+((cj1*sj2*x8095)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8097=IKsin(j4);
IkReal x8098=IKcos(j4);
IkReal x8099=((1.0)*sj0);
IkReal x8100=((1.0)*cj5);
IkReal x8101=(sj5*x8097);
evalcond[0]=(r02*x8097);
evalcond[1]=((((-1.0)*r02*x8098))+(((-1.0)*x8099)));
evalcond[2]=(((r21*x8101))+(((-1.0)*r20*x8097*x8100)));
evalcond[3]=(((r11*x8101))+(((-1.0)*r10*x8097*x8100)));
evalcond[4]=((((-1.0)*sj1*sj2*x8099))+((cj1*cj2*sj0))+(((-1.0)*r10*x8098*x8100))+((r11*sj5*x8098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8102=IKPowWithIntegerCheck(r02,-1);
if(!x8102.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8102.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8103=IKsin(j4);
IkReal x8104=IKcos(j4);
IkReal x8105=((1.0)*sj1);
IkReal x8106=(r21*sj5);
IkReal x8107=(r11*sj5);
IkReal x8108=((1.0)*cj5*x8104);
IkReal x8109=((1.0)*cj5*x8103);
evalcond[0]=(r02*x8103);
evalcond[1]=((((-1.0)*r20*x8109))+((x8103*x8106)));
evalcond[2]=(((x8103*x8107))+(((-1.0)*r10*x8109)));
evalcond[3]=((((-1.0)*r20*x8108))+(((-1.0)*cj1*sj2))+((x8104*x8106))+(((-1.0)*cj2*x8105)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x8105))+((x8104*x8107))+(((-1.0)*r10*x8108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8110=((1.0)*sj0);
IkReal x8111=((1.0)*cj0);
CheckValue<IkReal> x8112 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8110))+(((-1.0)*r02*x8111)))),IkReal(((((-1.0)*r01*sj5*x8111))+(((-1.0)*r11*sj5*x8110))+((cj0*cj5*r00))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8112.valid){
continue;
}
CheckValue<IkReal> x8113=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8112.value)+(((1.5707963267949)*(x8113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8114=IKsin(j4);
IkReal x8115=IKcos(j4);
IkReal x8116=(cj5*r00);
IkReal x8117=(cj1*cj2);
IkReal x8118=(cj5*r10);
IkReal x8119=(r21*sj5);
IkReal x8120=((1.0)*sj1);
IkReal x8121=(cj5*r20);
IkReal x8122=((1.0)*x8115);
IkReal x8123=((1.0)*x8114);
IkReal x8124=(sj5*x8114);
IkReal x8125=(sj5*x8115);
evalcond[0]=(((x8114*x8119))+(((-1.0)*x8121*x8123))+(((-1.0)*r22*x8122)));
evalcond[1]=((((-1.0)*r12*x8122))+cj0+((r11*x8124))+(((-1.0)*x8118*x8123)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8116*x8123))+((r01*x8124))+(((-1.0)*r02*x8122)));
evalcond[3]=(((x8115*x8119))+(((-1.0)*x8121*x8122))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x8120))+((r22*x8114)));
evalcond[4]=(((r02*x8114))+((cj0*x8117))+(((-1.0)*x8116*x8122))+(((-1.0)*cj0*sj2*x8120))+((r01*x8125)));
evalcond[5]=((((-1.0)*sj0*sj2*x8120))+((r12*x8114))+((r11*x8125))+(((-1.0)*x8118*x8122))+((sj0*x8117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8126=((1.0)*cj5);
CheckValue<IkReal> x8127 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8126))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8127.valid){
continue;
}
CheckValue<IkReal> x8128=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8126)))),-1);
if(!x8128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8127.value)+(((1.5707963267949)*(x8128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8129=IKsin(j4);
IkReal x8130=IKcos(j4);
IkReal x8131=(cj5*r00);
IkReal x8132=(cj1*cj2);
IkReal x8133=(cj5*r10);
IkReal x8134=(r21*sj5);
IkReal x8135=((1.0)*sj1);
IkReal x8136=(cj5*r20);
IkReal x8137=((1.0)*x8130);
IkReal x8138=((1.0)*x8129);
IkReal x8139=(sj5*x8129);
IkReal x8140=(sj5*x8130);
evalcond[0]=((((-1.0)*r22*x8137))+((x8129*x8134))+(((-1.0)*x8136*x8138)));
evalcond[1]=(((r11*x8139))+cj0+(((-1.0)*r12*x8137))+(((-1.0)*x8133*x8138)));
evalcond[2]=((((-1.0)*r02*x8137))+(((-1.0)*sj0))+(((-1.0)*x8131*x8138))+((r01*x8139)));
evalcond[3]=(((x8130*x8134))+(((-1.0)*cj2*x8135))+(((-1.0)*cj1*sj2))+((r22*x8129))+(((-1.0)*x8136*x8137)));
evalcond[4]=((((-1.0)*cj0*sj2*x8135))+((r02*x8129))+(((-1.0)*x8131*x8137))+((r01*x8140))+((cj0*x8132)));
evalcond[5]=(((r12*x8129))+((r11*x8140))+(((-1.0)*x8133*x8137))+((sj0*x8132))+(((-1.0)*sj0*sj2*x8135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8141=((1.0)*cj5);
CheckValue<IkReal> x8142=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8141))+(((-1.0)*r00*sj5)))),-1);
if(!x8142.valid){
continue;
}
CheckValue<IkReal> x8143 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8141)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8142.value)))+(x8143.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8144=IKsin(j4);
IkReal x8145=IKcos(j4);
IkReal x8146=(cj5*r00);
IkReal x8147=(cj1*cj2);
IkReal x8148=(cj5*r10);
IkReal x8149=(r21*sj5);
IkReal x8150=((1.0)*sj1);
IkReal x8151=(cj5*r20);
IkReal x8152=((1.0)*x8145);
IkReal x8153=((1.0)*x8144);
IkReal x8154=(sj5*x8144);
IkReal x8155=(sj5*x8145);
evalcond[0]=(((x8144*x8149))+(((-1.0)*x8151*x8153))+(((-1.0)*r22*x8152)));
evalcond[1]=(cj0+(((-1.0)*x8148*x8153))+((r11*x8154))+(((-1.0)*r12*x8152)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8146*x8153))+(((-1.0)*r02*x8152))+((r01*x8154)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r22*x8144))+((x8145*x8149))+(((-1.0)*x8151*x8152))+(((-1.0)*cj2*x8150)));
evalcond[4]=((((-1.0)*x8146*x8152))+((cj0*x8147))+((r01*x8155))+(((-1.0)*cj0*sj2*x8150))+((r02*x8144)));
evalcond[5]=(((sj0*x8147))+(((-1.0)*x8148*x8152))+((r11*x8155))+((r12*x8144))+(((-1.0)*sj0*sj2*x8150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8156=cj1*cj1;
IkReal x8157=cj2*cj2;
IkReal x8158=(cj2*sj1);
IkReal x8159=(cj1*sj2);
IkReal x8160=(r00*sj5);
IkReal x8161=(cj5*r11);
IkReal x8162=((2525550.0)*cj2);
IkReal x8163=((320355.0)*sj1);
IkReal x8164=((2793750.0)*py);
IkReal x8165=(r10*sj5);
IkReal x8166=((2793750.0)*px);
IkReal x8167=(cj5*r01);
IkReal x8168=((2825000.0)*sj1);
IkReal x8169=((316811.25)*x8161);
IkReal x8170=((316811.25)*x8167);
IkReal x8171=((316811.25)*x8165);
CheckValue<IkReal> x8172 = IKatan2WithCheck(IkReal(((((-1.0)*x8158*x8171))+(((-1.0)*x8159*x8164))+(((-1.0)*x8159*x8169))+(((-1.0)*py*x8168))+(((-73426.5)*x8160))+(((-73426.5)*x8167))+(((-1.0)*x8158*x8164))+(((-1.0)*x8158*x8169))+(((-1.0)*x8161*x8163))+(((-647500.0)*px))+(((-1.0)*x8163*x8165))+(((-1.0)*x8159*x8171)))),IkReal(((((-1.0)*x8158*x8170))+(((-1.0)*px*x8168))+(((-1.0)*x8159*x8166))+(((-316811.25)*x8159*x8160))+(((73426.5)*x8165))+(((73426.5)*x8161))+(((-1.0)*x8158*x8166))+(((-1.0)*x8163*x8167))+(((-316811.25)*x8158*x8160))+(((-1.0)*x8159*x8170))+(((-1.0)*x8160*x8163))+(((647500.0)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8172.valid){
continue;
}
CheckValue<IkReal> x8173=IKPowWithIntegerCheck(IKsign(((1343981.0)+(((2497612.5)*x8158*x8159))+(((1248806.25)*x8157))+(((-2497612.5)*x8156*x8157))+(((2525550.0)*sj1*x8159))+(((-28093.75)*x8156))+(((-1.0)*x8156*x8162))+x8162)),-1);
if(!x8173.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8172.value)+(((1.5707963267949)*(x8173.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8174=IKcos(j0);
IkReal x8175=IKsin(j0);
IkReal x8176=((0.1134)*sj5);
IkReal x8177=((0.1134)*cj5);
IkReal x8178=((0.452)*sj1);
IkReal x8179=((0.447)*cj2*sj1);
IkReal x8180=((0.447)*cj1*sj2);
evalcond[0]=((((-1.0)*r01*x8177))+(((-1.0)*r00*x8176))+(((-1.0)*x8174*x8180))+(((-0.1036)*x8175))+(((-1.0)*px))+(((-1.0)*x8174*x8179))+(((-1.0)*x8174*x8178)));
evalcond[1]=((((-1.0)*r11*x8177))+(((-1.0)*x8175*x8179))+(((-1.0)*x8175*x8178))+(((-1.0)*x8175*x8180))+(((0.1036)*x8174))+(((-1.0)*py))+(((-1.0)*r10*x8176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8181=((1.0)*cj5);
IkReal x8182=((((-1.0)*r01*x8181))+(((-1.0)*r00*sj5)));
j4eval[0]=x8182;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8181))))));
j4eval[2]=IKsign(x8182);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8183=((1.0)*cj5);
IkReal x8184=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8183)));
j4eval[0]=x8184;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8183)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x8184);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8185=((1.0)*sj0);
IkReal x8186=((1.0)*cj0);
IkReal x8187=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8187;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8186))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8185)))))+(IKabs(((((-1.0)*r02*x8186))+(((-1.0)*r12*x8185))))));
j4eval[2]=IKsign(x8187);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8188=((-1.0)*r20);
IkReal x8190 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8190)==0){
continue;
}
IkReal x8189=pow(x8190,-0.5);
CheckValue<IkReal> x8191 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8188),IKFAST_ATAN2_MAGTHRESH);
if(!x8191.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8191.value));
IkReal gconst1=(r21*x8189);
IkReal gconst2=(x8188*x8189);
CheckValue<IkReal> x8192 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8192.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8192.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8193=((-1.0)*r20);
IkReal x8194=x8189;
CheckValue<IkReal> x8196 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8193),IKFAST_ATAN2_MAGTHRESH);
if(!x8196.valid){
continue;
}
IkReal x8195=((-1.0)*(x8196.value));
sj5=gconst1;
cj5=gconst2;
j5=x8195;
IkReal gconst0=x8195;
IkReal gconst1=(r21*x8194);
IkReal gconst2=(x8193*x8194);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8197=((-1.0)*r20);
IkReal x8198=x8189;
CheckValue<IkReal> x8200 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8197),IKFAST_ATAN2_MAGTHRESH);
if(!x8200.valid){
continue;
}
IkReal x8199=((-1.0)*(x8200.value));
sj5=gconst1;
cj5=gconst2;
j5=x8199;
IkReal gconst0=x8199;
IkReal gconst1=(r21*x8198);
IkReal gconst2=(x8197*x8198);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8201=((-1.0)*r20);
IkReal x8202=x8189;
CheckValue<IkReal> x8204 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8201),IKFAST_ATAN2_MAGTHRESH);
if(!x8204.valid){
continue;
}
IkReal x8203=((-1.0)*(x8204.value));
sj5=gconst1;
cj5=gconst2;
j5=x8203;
IkReal gconst0=x8203;
IkReal gconst1=(r21*x8202);
IkReal gconst2=(x8201*x8202);
IkReal x8205=r22*r22;
CheckValue<IkReal> x8209=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8205))),-1);
if(!x8209.valid){
continue;
}
IkReal x8206=x8209.value;
IkReal x8207=(sj3*x8206);
IkReal x8208=((((2.0)*x8207*(r20*r20)*(r21*r21)))+((x8207*(r20*r20*r20*r20)))+((sj3*x8205))+((x8207*(r21*r21*r21*r21))));
j4eval[0]=x8208;
j4eval[1]=IKsign(x8208);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8210=((-1.0)*r20);
IkReal x8211=x8189;
CheckValue<IkReal> x8213 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8210),IKFAST_ATAN2_MAGTHRESH);
if(!x8213.valid){
continue;
}
IkReal x8212=((-1.0)*(x8213.value));
sj5=gconst1;
cj5=gconst2;
j5=x8212;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8212;
IkReal gconst1=(r21*x8211);
IkReal gconst2=(x8210*x8211);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8214=((-1.0)*r20);
IkReal x8215=x8189;
CheckValue<IkReal> x8217 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8214),IKFAST_ATAN2_MAGTHRESH);
if(!x8217.valid){
continue;
}
IkReal x8216=((-1.0)*(x8217.value));
sj5=gconst1;
cj5=gconst2;
j5=x8216;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8216;
IkReal gconst1=(r21*x8215);
IkReal gconst2=(x8214*x8215);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8218=((-1.0)*r20);
IkReal x8219=x8189;
CheckValue<IkReal> x8221 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8218),IKFAST_ATAN2_MAGTHRESH);
if(!x8221.valid){
continue;
}
IkReal x8220=((-1.0)*(x8221.value));
sj5=gconst1;
cj5=gconst2;
j5=x8220;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8220;
IkReal gconst1=(r21*x8219);
IkReal gconst2=(x8218*x8219);
IkReal x8222=r22*r22;
CheckValue<IkReal> x8225=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8222))),-1);
if(!x8225.valid){
continue;
}
IkReal x8223=x8225.value;
IkReal x8224=(((x8223*(r21*r21*r21*r21)))+((x8223*(r20*r20*r20*r20)))+(((2.0)*x8223*(r20*r20)*(r21*r21)))+x8222);
j4eval[0]=x8224;
j4eval[1]=IKsign(x8224);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8226=((-1.0)*r20);
IkReal x8227=x8189;
CheckValue<IkReal> x8229 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8226),IKFAST_ATAN2_MAGTHRESH);
if(!x8229.valid){
continue;
}
IkReal x8228=((-1.0)*(x8229.value));
sj5=gconst1;
cj5=gconst2;
j5=x8228;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8228;
IkReal gconst1=(r21*x8227);
IkReal gconst2=(x8226*x8227);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8230=((-1.0)*r20);
IkReal x8231=x8189;
CheckValue<IkReal> x8233 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8230),IKFAST_ATAN2_MAGTHRESH);
if(!x8233.valid){
continue;
}
IkReal x8232=((-1.0)*(x8233.value));
sj5=gconst1;
cj5=gconst2;
j5=x8232;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8232;
IkReal gconst1=(r21*x8231);
IkReal gconst2=(x8230*x8231);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8234=((-1.0)*r20);
IkReal x8235=x8189;
CheckValue<IkReal> x8237 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8234),IKFAST_ATAN2_MAGTHRESH);
if(!x8237.valid){
continue;
}
IkReal x8236=((-1.0)*(x8237.value));
sj5=gconst1;
cj5=gconst2;
j5=x8236;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8236;
IkReal gconst1=(r21*x8235);
IkReal gconst2=(x8234*x8235);
IkReal x8238=r22*r22;
IkReal x8239=(cj1*cj2*r02);
CheckValue<IkReal> x8244=IKPowWithIntegerCheck(((-1.0)+x8238),-1);
if(!x8244.valid){
continue;
}
IkReal x8240=x8244.value;
IkReal x8241=((1.0)*r02*sj1*sj2);
if((((1.0)+(((-1.0)*x8238)))) < -0.00001)
continue;
IkReal x8242=IKsqrt(((1.0)+(((-1.0)*x8238))));
IkReal x8243=(r22*x8240*x8242);
j4eval[0]=((IKabs(((((-1.0)*x8241*x8243))+((x8239*x8243)))))+(IKabs(((((-1.0)*x8241))+x8239))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8245=(gconst1*r01);
IkReal x8246=(cj1*cj2);
IkReal x8247=(gconst2*r00);
IkReal x8248=((1.0)*sj1*sj2);
CheckValue<IkReal> x8249 = IKatan2WithCheck(IkReal((((r02*x8246))+(((-1.0)*r02*x8248)))),IkReal(((((-1.0)*x8245*x8248))+(((-1.0)*x8246*x8247))+((x8245*x8246))+((sj1*sj2*x8247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8249.valid){
continue;
}
CheckValue<IkReal> x8250=IKPowWithIntegerCheck(IKsign(((r02*r02)+(x8247*x8247)+(((-2.0)*x8245*x8247))+(x8245*x8245))),-1);
if(!x8250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8249.value)+(((1.5707963267949)*(x8250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8251=IKsin(j4);
IkReal x8252=IKcos(j4);
IkReal x8253=((1.0)*sj1);
IkReal x8254=((1.0)*x8252);
IkReal x8255=(gconst2*x8252);
IkReal x8256=(gconst1*x8251);
IkReal x8257=((1.0)*x8251);
evalcond[0]=((((-1.0)*gconst2*r20*x8257))+((r21*x8256))+(((-1.0)*r22*x8254)));
evalcond[1]=(((r01*x8256))+(((-1.0)*gconst2*r00*x8257))+(((-1.0)*r02*x8254)));
evalcond[2]=(((r10*x8255))+(((-1.0)*r12*x8257))+(((-1.0)*gconst1*r11*x8254)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8254))+((r11*x8256))+(((-1.0)*gconst2*r10*x8257)));
evalcond[4]=(((r00*x8255))+(((-1.0)*sj2*x8253))+((cj1*cj2))+(((-1.0)*gconst1*r01*x8254))+(((-1.0)*r02*x8257)));
evalcond[5]=((((-1.0)*r22*x8257))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x8253))+((r20*x8255))+(((-1.0)*gconst1*r21*x8254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8258=(gconst1*r11);
IkReal x8259=(gconst2*r10);
CheckValue<IkReal> x8260 = IKatan2WithCheck(IkReal(((((-1.0)*x8258))+x8259)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8260.valid){
continue;
}
CheckValue<IkReal> x8261=IKPowWithIntegerCheck(IKsign(((x8258*x8258)+(r12*r12)+(x8259*x8259)+(((-2.0)*x8258*x8259)))),-1);
if(!x8261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8260.value)+(((1.5707963267949)*(x8261.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8262=IKsin(j4);
IkReal x8263=IKcos(j4);
IkReal x8264=((1.0)*sj1);
IkReal x8265=((1.0)*x8263);
IkReal x8266=(gconst2*x8263);
IkReal x8267=(gconst1*x8262);
IkReal x8268=((1.0)*x8262);
evalcond[0]=((((-1.0)*gconst2*r20*x8268))+((r21*x8267))+(((-1.0)*r22*x8265)));
evalcond[1]=((((-1.0)*gconst2*r00*x8268))+(((-1.0)*r02*x8265))+((r01*x8267)));
evalcond[2]=((((-1.0)*r12*x8268))+(((-1.0)*gconst1*r11*x8265))+((r10*x8266)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8265))+(((-1.0)*gconst2*r10*x8268))+((r11*x8267)));
evalcond[4]=((((-1.0)*sj2*x8264))+(((-1.0)*gconst1*r01*x8265))+(((-1.0)*r02*x8268))+((cj1*cj2))+((r00*x8266)));
evalcond[5]=(((r20*x8266))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x8268))+(((-1.0)*gconst1*r21*x8265))+(((-1.0)*cj2*x8264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8269=((1.0)*gconst2);
CheckValue<IkReal> x8270=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8269)))),-1);
if(!x8270.valid){
continue;
}
CheckValue<IkReal> x8271 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8269))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8270.value)))+(x8271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8272=IKsin(j4);
IkReal x8273=IKcos(j4);
IkReal x8274=((1.0)*sj1);
IkReal x8275=((1.0)*x8273);
IkReal x8276=(gconst2*x8273);
IkReal x8277=(gconst1*x8272);
IkReal x8278=((1.0)*x8272);
evalcond[0]=((((-1.0)*gconst2*r20*x8278))+(((-1.0)*r22*x8275))+((r21*x8277)));
evalcond[1]=((((-1.0)*gconst2*r00*x8278))+(((-1.0)*r02*x8275))+((r01*x8277)));
evalcond[2]=((((-1.0)*gconst1*r11*x8275))+(((-1.0)*r12*x8278))+((r10*x8276)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x8278))+((r11*x8277))+(((-1.0)*r12*x8275)));
evalcond[4]=((((-1.0)*sj2*x8274))+(((-1.0)*gconst1*r01*x8275))+((cj1*cj2))+(((-1.0)*r02*x8278))+((r00*x8276)));
evalcond[5]=(((r20*x8276))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x8278))+(((-1.0)*gconst1*r21*x8275))+(((-1.0)*cj2*x8274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8279=((-1.0)*r20);
IkReal x8280=x8189;
CheckValue<IkReal> x8282 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8279),IKFAST_ATAN2_MAGTHRESH);
if(!x8282.valid){
continue;
}
IkReal x8281=((-1.0)*(x8282.value));
sj5=gconst1;
cj5=gconst2;
j5=x8281;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8281;
IkReal gconst1=(r21*x8280);
IkReal gconst2=(x8279*x8280);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8283=((-1.0)*r20);
IkReal x8284=x8189;
CheckValue<IkReal> x8286 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8283),IKFAST_ATAN2_MAGTHRESH);
if(!x8286.valid){
continue;
}
IkReal x8285=((-1.0)*(x8286.value));
sj5=gconst1;
cj5=gconst2;
j5=x8285;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8285;
IkReal gconst1=(r21*x8284);
IkReal gconst2=(x8283*x8284);
IkReal x8287=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8291=IKPowWithIntegerCheck(x8287,-1);
if(!x8291.valid){
continue;
}
IkReal x8288=x8291.value;
IkReal x8289=((1.0)*x8288);
IkReal x8290=((((-1.0)*x8289*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8289*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x8288)));
j4eval[0]=x8290;
j4eval[1]=r12;
j4eval[2]=x8287;
j4eval[3]=IKsign(x8290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8292=((-1.0)*r20);
IkReal x8293=x8189;
CheckValue<IkReal> x8295 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8292),IKFAST_ATAN2_MAGTHRESH);
if(!x8295.valid){
continue;
}
IkReal x8294=((-1.0)*(x8295.value));
sj5=gconst1;
cj5=gconst2;
j5=x8294;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8294;
IkReal gconst1=(r21*x8293);
IkReal gconst2=(x8292*x8293);
IkReal x8296=r22*r22;
IkReal x8297=(r02*sj1*sj2);
CheckValue<IkReal> x8302=IKPowWithIntegerCheck(((-1.0)+x8296),-1);
if(!x8302.valid){
continue;
}
IkReal x8298=x8302.value;
IkReal x8299=((1.0)*cj1*cj2*r02);
if((((1.0)+(((-1.0)*x8296)))) < -0.00001)
continue;
IkReal x8300=IKsqrt(((1.0)+(((-1.0)*x8296))));
IkReal x8301=(r22*x8298*x8300);
j4eval[0]=((IKabs((((x8297*x8301))+(((-1.0)*x8299*x8301)))))+(IKabs(((((-1.0)*x8299))+x8297))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8303=(sj1*sj2);
IkReal x8304=(gconst2*r00);
IkReal x8305=(gconst1*r01);
IkReal x8306=(cj1*cj2);
CheckValue<IkReal> x8307 = IKatan2WithCheck(IkReal((((r02*x8303))+(((-1.0)*r02*x8306)))),IkReal(((((-1.0)*x8303*x8304))+((x8304*x8306))+((x8303*x8305))+(((-1.0)*x8305*x8306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8307.valid){
continue;
}
CheckValue<IkReal> x8308=IKPowWithIntegerCheck(IKsign(((x8305*x8305)+(((-2.0)*x8304*x8305))+(r02*r02)+(x8304*x8304))),-1);
if(!x8308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8307.value)+(((1.5707963267949)*(x8308.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8309=IKsin(j4);
IkReal x8310=IKcos(j4);
IkReal x8311=((1.0)*cj2);
IkReal x8312=((1.0)*x8310);
IkReal x8313=(gconst2*x8310);
IkReal x8314=(gconst1*x8309);
IkReal x8315=((1.0)*x8309);
evalcond[0]=((((-1.0)*r22*x8312))+((r21*x8314))+(((-1.0)*gconst2*r20*x8315)));
evalcond[1]=(((r01*x8314))+(((-1.0)*r02*x8312))+(((-1.0)*gconst2*r00*x8315)));
evalcond[2]=(((r10*x8313))+(((-1.0)*r12*x8315))+(((-1.0)*gconst1*r11*x8312)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x8315))+((r11*x8314))+(((-1.0)*r12*x8312)));
evalcond[4]=(((r00*x8313))+(((-1.0)*cj1*x8311))+(((-1.0)*r02*x8315))+((sj1*sj2))+(((-1.0)*gconst1*r01*x8312)));
evalcond[5]=(((r20*x8313))+(((-1.0)*r22*x8315))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8311))+(((-1.0)*gconst1*r21*x8312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8316=(gconst1*r11);
IkReal x8317=(gconst2*r10);
CheckValue<IkReal> x8318 = IKatan2WithCheck(IkReal((x8317+(((-1.0)*x8316)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8318.valid){
continue;
}
CheckValue<IkReal> x8319=IKPowWithIntegerCheck(IKsign(((((2.0)*x8316*x8317))+(((-1.0)*(x8316*x8316)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8317*x8317))))),-1);
if(!x8319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8318.value)+(((1.5707963267949)*(x8319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8320=IKsin(j4);
IkReal x8321=IKcos(j4);
IkReal x8322=((1.0)*cj2);
IkReal x8323=((1.0)*x8321);
IkReal x8324=(gconst2*x8321);
IkReal x8325=(gconst1*x8320);
IkReal x8326=((1.0)*x8320);
evalcond[0]=((((-1.0)*r22*x8323))+((r21*x8325))+(((-1.0)*gconst2*r20*x8326)));
evalcond[1]=(((r01*x8325))+(((-1.0)*gconst2*r00*x8326))+(((-1.0)*r02*x8323)));
evalcond[2]=(((r10*x8324))+(((-1.0)*gconst1*r11*x8323))+(((-1.0)*r12*x8326)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x8326))+((r11*x8325))+(((-1.0)*r12*x8323)));
evalcond[4]=((((-1.0)*gconst1*r01*x8323))+(((-1.0)*cj1*x8322))+((sj1*sj2))+((r00*x8324))+(((-1.0)*r02*x8326)));
evalcond[5]=((((-1.0)*r22*x8326))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r21*x8323))+((r20*x8324))+(((-1.0)*sj1*x8322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8327 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8327.valid){
continue;
}
CheckValue<IkReal> x8328=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8327.value)+(((1.5707963267949)*(x8328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8329=IKsin(j4);
IkReal x8330=IKcos(j4);
IkReal x8331=((1.0)*cj2);
IkReal x8332=((1.0)*x8330);
IkReal x8333=(gconst2*x8330);
IkReal x8334=(gconst1*x8329);
IkReal x8335=((1.0)*x8329);
evalcond[0]=(((r21*x8334))+(((-1.0)*r22*x8332))+(((-1.0)*gconst2*r20*x8335)));
evalcond[1]=(((r01*x8334))+(((-1.0)*r02*x8332))+(((-1.0)*gconst2*r00*x8335)));
evalcond[2]=((((-1.0)*r12*x8335))+((r10*x8333))+(((-1.0)*gconst1*r11*x8332)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8332))+((r11*x8334))+(((-1.0)*gconst2*r10*x8335)));
evalcond[4]=((((-1.0)*gconst1*r01*x8332))+((r00*x8333))+((sj1*sj2))+(((-1.0)*cj1*x8331))+(((-1.0)*r02*x8335)));
evalcond[5]=((((-1.0)*sj1*x8331))+(((-1.0)*gconst1*r21*x8332))+(((-1.0)*r22*x8335))+(((-1.0)*cj1*sj2))+((r20*x8333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8336=((-1.0)*r20);
IkReal x8337=x8189;
CheckValue<IkReal> x8339 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8336),IKFAST_ATAN2_MAGTHRESH);
if(!x8339.valid){
continue;
}
IkReal x8338=((-1.0)*(x8339.value));
sj5=gconst1;
cj5=gconst2;
j5=x8338;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8338;
IkReal gconst1=(r21*x8337);
IkReal gconst2=(x8336*x8337);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8340=((-1.0)*r20);
IkReal x8341=x8189;
CheckValue<IkReal> x8343 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8340),IKFAST_ATAN2_MAGTHRESH);
if(!x8343.valid){
continue;
}
IkReal x8342=((-1.0)*(x8343.value));
sj5=gconst1;
cj5=gconst2;
j5=x8342;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8342;
IkReal gconst1=(r21*x8341);
IkReal gconst2=(x8340*x8341);
IkReal x8344=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8348=IKPowWithIntegerCheck(x8344,-1);
if(!x8348.valid){
continue;
}
IkReal x8345=x8348.value;
IkReal x8346=((1.0)*x8345);
IkReal x8347=((((-1.0)*x8346*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x8345))+(((-1.0)*x8346*(r01*r01)*(r21*r21))));
j4eval[0]=x8347;
j4eval[1]=IKsign(x8347);
j4eval[2]=r02;
j4eval[3]=x8344;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8349=((-1.0)*r20);
IkReal x8350=x8189;
CheckValue<IkReal> x8352 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8349),IKFAST_ATAN2_MAGTHRESH);
if(!x8352.valid){
continue;
}
IkReal x8351=((-1.0)*(x8352.value));
sj5=gconst1;
cj5=gconst2;
j5=x8351;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8351;
IkReal gconst1=(r21*x8350);
IkReal gconst2=(x8349*x8350);
IkReal x8353=r22*r22;
IkReal x8354=(cj1*cj2*r12);
CheckValue<IkReal> x8359=IKPowWithIntegerCheck(((-1.0)+x8353),-1);
if(!x8359.valid){
continue;
}
IkReal x8355=x8359.value;
IkReal x8356=((1.0)*r12*sj1*sj2);
if((((1.0)+(((-1.0)*x8353)))) < -0.00001)
continue;
IkReal x8357=IKsqrt(((1.0)+(((-1.0)*x8353))));
IkReal x8358=(r22*x8355*x8357);
j4eval[0]=((IKabs((x8354+(((-1.0)*x8356)))))+(IKabs((((x8354*x8358))+(((-1.0)*x8356*x8358))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8360=(gconst2*r10);
IkReal x8361=(cj1*cj2);
IkReal x8362=(gconst1*r11);
IkReal x8363=((1.0)*sj1*sj2);
CheckValue<IkReal> x8364=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8360*x8362))+(r12*r12)+(x8362*x8362)+(x8360*x8360))),-1);
if(!x8364.valid){
continue;
}
CheckValue<IkReal> x8365 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8363))+((r12*x8361)))),IkReal(((((-1.0)*x8362*x8363))+((x8361*x8362))+((sj1*sj2*x8360))+(((-1.0)*x8360*x8361)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8364.value)))+(x8365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8366=IKsin(j4);
IkReal x8367=IKcos(j4);
IkReal x8368=((1.0)*sj1);
IkReal x8369=((1.0)*x8367);
IkReal x8370=(gconst2*x8367);
IkReal x8371=(gconst1*x8366);
IkReal x8372=((1.0)*x8366);
evalcond[0]=(((r21*x8371))+(((-1.0)*r22*x8369))+(((-1.0)*gconst2*r20*x8372)));
evalcond[1]=((((-1.0)*gconst2*r10*x8372))+(((-1.0)*r12*x8369))+((r11*x8371)));
evalcond[2]=(((r00*x8370))+(((-1.0)*r02*x8372))+(((-1.0)*gconst1*r01*x8369)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8369))+(((-1.0)*gconst2*r00*x8372))+((r01*x8371)));
evalcond[4]=((((-1.0)*r12*x8372))+((r10*x8370))+(((-1.0)*gconst1*r11*x8369))+(((-1.0)*sj2*x8368))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x8368))+((r20*x8370))+(((-1.0)*gconst1*r21*x8369))+(((-1.0)*r22*x8372))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8373=(gconst2*r00);
IkReal x8374=(gconst1*r01);
CheckValue<IkReal> x8375 = IKatan2WithCheck(IkReal((x8373+(((-1.0)*x8374)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8375.valid){
continue;
}
CheckValue<IkReal> x8376=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8374*x8374)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8373*x8373)))+(((2.0)*x8373*x8374)))),-1);
if(!x8376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8375.value)+(((1.5707963267949)*(x8376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8377=IKsin(j4);
IkReal x8378=IKcos(j4);
IkReal x8379=((1.0)*sj1);
IkReal x8380=((1.0)*x8378);
IkReal x8381=(gconst2*x8378);
IkReal x8382=(gconst1*x8377);
IkReal x8383=((1.0)*x8377);
evalcond[0]=(((r21*x8382))+(((-1.0)*r22*x8380))+(((-1.0)*gconst2*r20*x8383)));
evalcond[1]=((((-1.0)*gconst2*r10*x8383))+(((-1.0)*r12*x8380))+((r11*x8382)));
evalcond[2]=((((-1.0)*r02*x8383))+(((-1.0)*gconst1*r01*x8380))+((r00*x8381)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8380))+((r01*x8382))+(((-1.0)*gconst2*r00*x8383)));
evalcond[4]=((((-1.0)*gconst1*r11*x8380))+((cj1*cj2))+((r10*x8381))+(((-1.0)*sj2*x8379))+(((-1.0)*r12*x8383)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r21*x8380))+(((-1.0)*r22*x8383))+(((-1.0)*cj2*x8379))+((r20*x8381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8384=((1.0)*gconst2);
CheckValue<IkReal> x8385 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8385.valid){
continue;
}
CheckValue<IkReal> x8386=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8384)))),-1);
if(!x8386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8385.value)+(((1.5707963267949)*(x8386.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8387=IKsin(j4);
IkReal x8388=IKcos(j4);
IkReal x8389=((1.0)*sj1);
IkReal x8390=((1.0)*x8388);
IkReal x8391=(gconst2*x8388);
IkReal x8392=(gconst1*x8387);
IkReal x8393=((1.0)*x8387);
evalcond[0]=(((r21*x8392))+(((-1.0)*r22*x8390))+(((-1.0)*gconst2*r20*x8393)));
evalcond[1]=((((-1.0)*gconst2*r10*x8393))+(((-1.0)*r12*x8390))+((r11*x8392)));
evalcond[2]=((((-1.0)*r02*x8393))+((r00*x8391))+(((-1.0)*gconst1*r01*x8390)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8390))+((r01*x8392))+(((-1.0)*gconst2*r00*x8393)));
evalcond[4]=((((-1.0)*gconst1*r11*x8390))+(((-1.0)*sj2*x8389))+((r10*x8391))+((cj1*cj2))+(((-1.0)*r12*x8393)));
evalcond[5]=(((r20*x8391))+(((-1.0)*cj2*x8389))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r21*x8390))+(((-1.0)*r22*x8393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8394=((-1.0)*r20);
IkReal x8395=x8189;
CheckValue<IkReal> x8397 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8394),IKFAST_ATAN2_MAGTHRESH);
if(!x8397.valid){
continue;
}
IkReal x8396=((-1.0)*(x8397.value));
sj5=gconst1;
cj5=gconst2;
j5=x8396;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8396;
IkReal gconst1=(r21*x8395);
IkReal gconst2=(x8394*x8395);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8398=((-1.0)*r20);
IkReal x8399=x8189;
CheckValue<IkReal> x8401 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8398),IKFAST_ATAN2_MAGTHRESH);
if(!x8401.valid){
continue;
}
IkReal x8400=((-1.0)*(x8401.value));
sj5=gconst1;
cj5=gconst2;
j5=x8400;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8400;
IkReal gconst1=(r21*x8399);
IkReal gconst2=(x8398*x8399);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8402=((-1.0)*r20);
IkReal x8403=x8189;
CheckValue<IkReal> x8405 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8402),IKFAST_ATAN2_MAGTHRESH);
if(!x8405.valid){
continue;
}
IkReal x8404=((-1.0)*(x8405.value));
sj5=gconst1;
cj5=gconst2;
j5=x8404;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8404;
IkReal gconst1=(r21*x8403);
IkReal gconst2=(x8402*x8403);
IkReal x8406=r22*r22;
IkReal x8407=(r12*sj1*sj2);
CheckValue<IkReal> x8412=IKPowWithIntegerCheck(((-1.0)+x8406),-1);
if(!x8412.valid){
continue;
}
IkReal x8408=x8412.value;
IkReal x8409=((1.0)*cj1*cj2*r12);
if((((1.0)+(((-1.0)*x8406)))) < -0.00001)
continue;
IkReal x8410=IKsqrt(((1.0)+(((-1.0)*x8406))));
IkReal x8411=(r22*x8408*x8410);
j4eval[0]=((IKabs((x8407+(((-1.0)*x8409)))))+(IKabs(((((-1.0)*x8409*x8411))+((x8407*x8411))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8413=(sj1*sj2);
IkReal x8414=(gconst1*r11);
IkReal x8415=(gconst2*r10);
IkReal x8416=((1.0)*cj1*cj2);
CheckValue<IkReal> x8417=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8414*x8414)+(((-2.0)*x8414*x8415))+(x8415*x8415))),-1);
if(!x8417.valid){
continue;
}
CheckValue<IkReal> x8418 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8416))+((r12*x8413)))),IkReal((((x8413*x8414))+((cj1*cj2*x8415))+(((-1.0)*x8413*x8415))+(((-1.0)*x8414*x8416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8417.value)))+(x8418.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8419=IKsin(j4);
IkReal x8420=IKcos(j4);
IkReal x8421=((1.0)*cj2);
IkReal x8422=((1.0)*x8420);
IkReal x8423=(gconst2*x8420);
IkReal x8424=(gconst1*x8419);
IkReal x8425=((1.0)*x8419);
evalcond[0]=(((r21*x8424))+(((-1.0)*r22*x8422))+(((-1.0)*gconst2*r20*x8425)));
evalcond[1]=(((r11*x8424))+(((-1.0)*gconst2*r10*x8425))+(((-1.0)*r12*x8422)));
evalcond[2]=((((-1.0)*r02*x8425))+(((-1.0)*gconst1*r01*x8422))+((r00*x8423)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8422))+(((-1.0)*gconst2*r00*x8425))+((r01*x8424)));
evalcond[4]=(((r10*x8423))+((sj1*sj2))+(((-1.0)*gconst1*r11*x8422))+(((-1.0)*cj1*x8421))+(((-1.0)*r12*x8425)));
evalcond[5]=((((-1.0)*gconst1*r21*x8422))+((r20*x8423))+(((-1.0)*r22*x8425))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8426=(gconst1*r01);
IkReal x8427=(gconst2*r00);
CheckValue<IkReal> x8428=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8426*x8427))+(x8426*x8426)+(r02*r02)+(x8427*x8427))),-1);
if(!x8428.valid){
continue;
}
CheckValue<IkReal> x8429 = IKatan2WithCheck(IkReal((x8427+(((-1.0)*x8426)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8428.value)))+(x8429.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8430=IKsin(j4);
IkReal x8431=IKcos(j4);
IkReal x8432=((1.0)*cj2);
IkReal x8433=((1.0)*x8431);
IkReal x8434=(gconst2*x8431);
IkReal x8435=(gconst1*x8430);
IkReal x8436=((1.0)*x8430);
evalcond[0]=(((r21*x8435))+(((-1.0)*r22*x8433))+(((-1.0)*gconst2*r20*x8436)));
evalcond[1]=((((-1.0)*r12*x8433))+(((-1.0)*gconst2*r10*x8436))+((r11*x8435)));
evalcond[2]=((((-1.0)*gconst1*r01*x8433))+(((-1.0)*r02*x8436))+((r00*x8434)));
evalcond[3]=((1.0)+((r01*x8435))+(((-1.0)*r02*x8433))+(((-1.0)*gconst2*r00*x8436)));
evalcond[4]=((((-1.0)*r12*x8436))+(((-1.0)*cj1*x8432))+((sj1*sj2))+(((-1.0)*gconst1*r11*x8433))+((r10*x8434)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r21*x8433))+(((-1.0)*r22*x8436))+((r20*x8434))+(((-1.0)*sj1*x8432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8437 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8437.valid){
continue;
}
CheckValue<IkReal> x8438=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8437.value)+(((1.5707963267949)*(x8438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8439=IKsin(j4);
IkReal x8440=IKcos(j4);
IkReal x8441=((1.0)*cj2);
IkReal x8442=((1.0)*x8440);
IkReal x8443=(gconst2*x8440);
IkReal x8444=(gconst1*x8439);
IkReal x8445=((1.0)*x8439);
evalcond[0]=(((r21*x8444))+(((-1.0)*gconst2*r20*x8445))+(((-1.0)*r22*x8442)));
evalcond[1]=(((r11*x8444))+(((-1.0)*r12*x8442))+(((-1.0)*gconst2*r10*x8445)));
evalcond[2]=((((-1.0)*gconst1*r01*x8442))+((r00*x8443))+(((-1.0)*r02*x8445)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x8445))+(((-1.0)*r02*x8442))+((r01*x8444)));
evalcond[4]=((((-1.0)*r12*x8445))+(((-1.0)*cj1*x8441))+((sj1*sj2))+(((-1.0)*gconst1*r11*x8442))+((r10*x8443)));
evalcond[5]=((((-1.0)*gconst1*r21*x8442))+(((-1.0)*cj1*sj2))+((r20*x8443))+(((-1.0)*r22*x8445))+(((-1.0)*sj1*x8441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8446=((-1.0)*r20);
IkReal x8447=((-1.0)*px);
CheckValue<IkReal> x8449 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8446),IKFAST_ATAN2_MAGTHRESH);
if(!x8449.valid){
continue;
}
IkReal x8448=((-1.0)*(x8449.value));
sj5=gconst1;
cj5=gconst2;
j5=x8448;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8447);
rxp1_1=(px*r21);
rxp1_2=(r11*x8447);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8448;
IkReal gconst1=r21;
IkReal gconst2=x8446;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8450=((-1.0)*r20);
IkReal x8451=((-1.0)*px);
CheckValue<IkReal> x8453 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8450),IKFAST_ATAN2_MAGTHRESH);
if(!x8453.valid){
continue;
}
IkReal x8452=((-1.0)*(x8453.value));
sj5=gconst1;
cj5=gconst2;
j5=x8452;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8451);
rxp1_1=(px*r21);
rxp1_2=(r11*x8451);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8452;
IkReal gconst1=r21;
IkReal gconst2=x8450;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8454=((-1.0)*r20);
IkReal x8455=((-1.0)*px);
CheckValue<IkReal> x8457 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8454),IKFAST_ATAN2_MAGTHRESH);
if(!x8457.valid){
continue;
}
IkReal x8456=((-1.0)*(x8457.value));
sj5=gconst1;
cj5=gconst2;
j5=x8456;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8455);
rxp1_1=(px*r21);
rxp1_2=(r11*x8455);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8456;
IkReal gconst1=r21;
IkReal gconst2=x8454;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8460=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x8460.valid){
continue;
}
IkReal x8458=x8460.value;
IkReal x8459=(sj0*x8458);
cj4array[0]=(((sj1*sj2*x8459))+(((-1.0)*cj1*cj2*x8459)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8461=IKsin(j4);
IkReal x8462=IKcos(j4);
IkReal x8463=(gconst1*x8461);
IkReal x8464=((1.0)*x8462);
IkReal x8465=((1.0)*gconst2*x8461);
evalcond[0]=((-1.0)*r02*x8461);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8464)));
evalcond[2]=(((r21*x8463))+(((-1.0)*r20*x8465)));
evalcond[3]=(((r11*x8463))+(((-1.0)*r10*x8465)));
evalcond[4]=(((gconst2*r20*x8462))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r21*x8464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8467=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8467.valid){
continue;
}
IkReal x8466=x8467.value;
cj4array[0]=(((cj2*sj1*x8466))+((cj1*sj2*x8466)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8468=IKsin(j4);
IkReal x8469=IKcos(j4);
IkReal x8470=(gconst2*r10);
IkReal x8471=((1.0)*sj0);
IkReal x8472=((1.0)*x8468);
IkReal x8473=(gconst1*x8468);
IkReal x8474=((1.0)*x8469);
evalcond[0]=((-1.0)*r02*x8468);
evalcond[1]=((((-1.0)*x8471))+(((-1.0)*r02*x8474)));
evalcond[2]=(((r21*x8473))+(((-1.0)*gconst2*r20*x8472)));
evalcond[3]=((((-1.0)*x8470*x8472))+((r11*x8473)));
evalcond[4]=(((cj1*cj2*sj0))+((x8469*x8470))+(((-1.0)*gconst1*r11*x8474))+(((-1.0)*sj1*sj2*x8471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8475=IKPowWithIntegerCheck(r02,-1);
if(!x8475.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8475.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8476=IKsin(j4);
IkReal x8477=IKcos(j4);
IkReal x8478=(gconst2*r10);
IkReal x8479=((1.0)*sj1);
IkReal x8480=(gconst1*r11);
IkReal x8481=(gconst1*r21);
IkReal x8482=(gconst2*r20);
IkReal x8483=((1.0)*x8476);
IkReal x8484=((1.0)*x8477);
evalcond[0]=((-1.0)*r02*x8476);
evalcond[1]=((((-1.0)*x8482*x8483))+((x8476*x8481)));
evalcond[2]=((((-1.0)*x8478*x8483))+((x8476*x8480)));
evalcond[3]=((((-1.0)*x8481*x8484))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x8479))+((x8477*x8482)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x8479))+((x8477*x8478))+(((-1.0)*x8480*x8484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8485=((1.0)*r22);
IkReal x8486=(cj1*sj2);
IkReal x8487=(cj2*sj1);
IkReal x8488=(gconst2*r20);
IkReal x8489=(gconst1*r21);
CheckValue<IkReal> x8490 = IKatan2WithCheck(IkReal(((((-1.0)*x8485*x8486))+(((-1.0)*x8485*x8487)))),IkReal((((x8486*x8488))+((x8487*x8488))+(((-1.0)*x8487*x8489))+(((-1.0)*x8486*x8489)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8490.valid){
continue;
}
CheckValue<IkReal> x8491=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x8488*x8489))+(x8489*x8489)+(x8488*x8488))),-1);
if(!x8491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8490.value)+(((1.5707963267949)*(x8491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8492=IKsin(j4);
IkReal x8493=IKcos(j4);
IkReal x8494=(cj1*cj2);
IkReal x8495=(gconst1*r11);
IkReal x8496=(gconst1*r21);
IkReal x8497=(gconst1*r01);
IkReal x8498=((1.0)*sj1);
IkReal x8499=((1.0)*x8493);
IkReal x8500=(gconst2*x8493);
IkReal x8501=((1.0)*x8492);
evalcond[0]=(((x8492*x8496))+(((-1.0)*r22*x8499))+(((-1.0)*gconst2*r20*x8501)));
evalcond[1]=(cj0+((x8492*x8495))+(((-1.0)*gconst2*r10*x8501))+(((-1.0)*r12*x8499)));
evalcond[2]=((((-1.0)*r02*x8499))+(((-1.0)*sj0))+(((-1.0)*gconst2*r00*x8501))+((x8492*x8497)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x8498))+(((-1.0)*r22*x8501))+(((-1.0)*x8496*x8499))+((r20*x8500)));
evalcond[4]=((((-1.0)*x8497*x8499))+(((-1.0)*r02*x8501))+(((-1.0)*cj0*sj2*x8498))+((r00*x8500))+((cj0*x8494)));
evalcond[5]=(((r10*x8500))+((sj0*x8494))+(((-1.0)*x8495*x8499))+(((-1.0)*r12*x8501))+(((-1.0)*sj0*sj2*x8498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8502=((1.0)*gconst2);
CheckValue<IkReal> x8503 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8502))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8503.valid){
continue;
}
CheckValue<IkReal> x8504=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8502)))),-1);
if(!x8504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8503.value)+(((1.5707963267949)*(x8504.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8505=IKsin(j4);
IkReal x8506=IKcos(j4);
IkReal x8507=(cj1*cj2);
IkReal x8508=(gconst1*r11);
IkReal x8509=(gconst1*r21);
IkReal x8510=(gconst1*r01);
IkReal x8511=((1.0)*sj1);
IkReal x8512=((1.0)*x8506);
IkReal x8513=(gconst2*x8506);
IkReal x8514=((1.0)*x8505);
evalcond[0]=(((x8505*x8509))+(((-1.0)*r22*x8512))+(((-1.0)*gconst2*r20*x8514)));
evalcond[1]=(cj0+((x8505*x8508))+(((-1.0)*r12*x8512))+(((-1.0)*gconst2*r10*x8514)));
evalcond[2]=((((-1.0)*gconst2*r00*x8514))+(((-1.0)*sj0))+((x8505*x8510))+(((-1.0)*r02*x8512)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*x8509*x8512))+(((-1.0)*r22*x8514))+(((-1.0)*cj2*x8511))+((r20*x8513)));
evalcond[4]=(((cj0*x8507))+(((-1.0)*r02*x8514))+((r00*x8513))+(((-1.0)*x8510*x8512))+(((-1.0)*cj0*sj2*x8511)));
evalcond[5]=((((-1.0)*sj0*sj2*x8511))+(((-1.0)*x8508*x8512))+((sj0*x8507))+(((-1.0)*r12*x8514))+((r10*x8513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8515=((1.0)*gconst2);
CheckValue<IkReal> x8516=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8515)))),-1);
if(!x8516.valid){
continue;
}
CheckValue<IkReal> x8517 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x8515)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8516.value)))+(x8517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8518=IKsin(j4);
IkReal x8519=IKcos(j4);
IkReal x8520=(cj1*cj2);
IkReal x8521=(gconst1*r11);
IkReal x8522=(gconst1*r21);
IkReal x8523=(gconst1*r01);
IkReal x8524=((1.0)*sj1);
IkReal x8525=((1.0)*x8519);
IkReal x8526=(gconst2*x8519);
IkReal x8527=((1.0)*x8518);
evalcond[0]=(((x8518*x8522))+(((-1.0)*r22*x8525))+(((-1.0)*gconst2*r20*x8527)));
evalcond[1]=(((x8518*x8521))+cj0+(((-1.0)*gconst2*r10*x8527))+(((-1.0)*r12*x8525)));
evalcond[2]=((((-1.0)*sj0))+((x8518*x8523))+(((-1.0)*gconst2*r00*x8527))+(((-1.0)*r02*x8525)));
evalcond[3]=(((r20*x8526))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x8527))+(((-1.0)*x8522*x8525))+(((-1.0)*cj2*x8524)));
evalcond[4]=((((-1.0)*x8523*x8525))+(((-1.0)*r02*x8527))+(((-1.0)*cj0*sj2*x8524))+((r00*x8526))+((cj0*x8520)));
evalcond[5]=((((-1.0)*sj0*sj2*x8524))+((sj0*x8520))+(((-1.0)*r12*x8527))+(((-1.0)*x8521*x8525))+((r10*x8526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8528=((-1.0)*r20);
IkReal x8529=x8189;
CheckValue<IkReal> x8531 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8528),IKFAST_ATAN2_MAGTHRESH);
if(!x8531.valid){
continue;
}
IkReal x8530=((-1.0)*(x8531.value));
sj5=gconst1;
cj5=gconst2;
j5=x8530;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8530;
IkReal gconst1=(r21*x8529);
IkReal gconst2=(x8528*x8529);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8532=((-1.0)*r20);
IkReal x8533=x8189;
CheckValue<IkReal> x8535 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8532),IKFAST_ATAN2_MAGTHRESH);
if(!x8535.valid){
continue;
}
IkReal x8534=((-1.0)*(x8535.value));
sj5=gconst1;
cj5=gconst2;
j5=x8534;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8534;
IkReal gconst1=(r21*x8533);
IkReal gconst2=(x8532*x8533);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8536=((-1.0)*r20);
IkReal x8537=x8189;
CheckValue<IkReal> x8539 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8536),IKFAST_ATAN2_MAGTHRESH);
if(!x8539.valid){
continue;
}
IkReal x8538=((-1.0)*(x8539.value));
sj5=gconst1;
cj5=gconst2;
j5=x8538;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8538;
IkReal gconst1=(r21*x8537);
IkReal gconst2=(x8536*x8537);
IkReal x8540=((1.0)*(r22*r22));
CheckValue<IkReal> x8544=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8540))),-1);
if(!x8544.valid){
continue;
}
IkReal x8541=x8544.value;
IkReal x8542=((1.0)*x8541);
IkReal x8543=((((-1.0)*x8540))+(((-1.0)*x8542*(r21*r21*r21*r21)))+(((-1.0)*x8542*(r20*r20*r20*r20)))+(((-2.0)*x8541*(r20*r20)*(r21*r21))));
j4eval[0]=x8543;
j4eval[1]=IKsign(x8543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8545=((-1.0)*r20);
IkReal x8546=x8189;
CheckValue<IkReal> x8548 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8545),IKFAST_ATAN2_MAGTHRESH);
if(!x8548.valid){
continue;
}
IkReal x8547=((-1.0)*(x8548.value));
sj5=gconst1;
cj5=gconst2;
j5=x8547;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8547;
IkReal gconst1=(r21*x8546);
IkReal gconst2=(x8545*x8546);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8549=((-1.0)*r20);
IkReal x8550=x8189;
CheckValue<IkReal> x8552 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8549),IKFAST_ATAN2_MAGTHRESH);
if(!x8552.valid){
continue;
}
IkReal x8551=((-1.0)*(x8552.value));
sj5=gconst1;
cj5=gconst2;
j5=x8551;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8551;
IkReal gconst1=(r21*x8550);
IkReal gconst2=(x8549*x8550);
IkReal x8553=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8557=IKPowWithIntegerCheck(x8553,-1);
if(!x8557.valid){
continue;
}
IkReal x8554=x8557.value;
IkReal x8555=((1.0)*x8554);
IkReal x8556=((((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8554))+(((-1.0)*x8555*(r11*r11)*(r21*r21)))+(((-1.0)*x8555*(r10*r10)*(r20*r20))));
j4eval[0]=x8556;
j4eval[1]=r12;
j4eval[2]=x8553;
j4eval[3]=IKsign(x8556);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8558=((-1.0)*r20);
IkReal x8559=x8189;
CheckValue<IkReal> x8561 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8558),IKFAST_ATAN2_MAGTHRESH);
if(!x8561.valid){
continue;
}
IkReal x8560=((-1.0)*(x8561.value));
sj5=gconst1;
cj5=gconst2;
j5=x8560;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8560;
IkReal gconst1=(r21*x8559);
IkReal gconst2=(x8558*x8559);
IkReal x8562=r22*r22;
IkReal x8563=(cj1*r12*sj2);
IkReal x8564=(cj2*r12*sj1);
CheckValue<IkReal> x8568=IKPowWithIntegerCheck(((-1.0)+x8562),-1);
if(!x8568.valid){
continue;
}
IkReal x8565=x8568.value;
if((((1.0)+(((-1.0)*x8562)))) < -0.00001)
continue;
IkReal x8566=IKsqrt(((1.0)+(((-1.0)*x8562))));
IkReal x8567=((1.0)*r22*x8565*x8566);
j4eval[0]=((IKabs((x8564+x8563)))+(IKabs(((((-1.0)*x8564*x8567))+(((-1.0)*x8563*x8567))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8569=((1.0)*gconst1);
IkReal x8570=(cj2*sj1);
IkReal x8571=(gconst2*r10);
IkReal x8572=(cj1*sj2);
CheckValue<IkReal> x8573=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8569))+(((-1.0)*gconst2*r01)))),-1);
if(!x8573.valid){
continue;
}
CheckValue<IkReal> x8574 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x8569*x8570))+(((-1.0)*r11*x8569*x8572))+((x8570*x8571))+((x8571*x8572)))),IkReal((((r12*x8570))+((r12*x8572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8573.value)))+(x8574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8575=IKcos(j4);
IkReal x8576=IKsin(j4);
IkReal x8577=((1.0)*sj1);
IkReal x8578=((1.0)*x8575);
IkReal x8579=(gconst1*x8575);
IkReal x8580=(gconst1*x8576);
IkReal x8581=((1.0)*gconst2*x8576);
evalcond[0]=(((r12*x8576))+((r11*x8579))+(((-1.0)*gconst2*r10*x8578)));
evalcond[1]=((((-1.0)*r20*x8581))+((r21*x8580))+(((-1.0)*r22*x8578)));
evalcond[2]=((((-1.0)*r02*x8578))+((r01*x8580))+(((-1.0)*r00*x8581)));
evalcond[3]=((1.0)+((r11*x8580))+(((-1.0)*r12*x8578))+(((-1.0)*r10*x8581)));
evalcond[4]=(((r02*x8576))+(((-1.0)*sj2*x8577))+(((-1.0)*gconst2*r00*x8578))+((r01*x8579))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x8577))+((r22*x8576))+((r21*x8579))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r20*x8578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8582=(gconst2*r10);
IkReal x8583=(gconst1*r11);
CheckValue<IkReal> x8584 = IKatan2WithCheck(IkReal((x8583+(((-1.0)*x8582)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8584.valid){
continue;
}
CheckValue<IkReal> x8585=IKPowWithIntegerCheck(IKsign(((((2.0)*x8582*x8583))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8583*x8583)))+(((-1.0)*(x8582*x8582))))),-1);
if(!x8585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8584.value)+(((1.5707963267949)*(x8585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8586=IKcos(j4);
IkReal x8587=IKsin(j4);
IkReal x8588=((1.0)*sj1);
IkReal x8589=((1.0)*x8586);
IkReal x8590=(gconst1*x8586);
IkReal x8591=(gconst1*x8587);
IkReal x8592=((1.0)*gconst2*x8587);
evalcond[0]=(((r12*x8587))+((r11*x8590))+(((-1.0)*gconst2*r10*x8589)));
evalcond[1]=((((-1.0)*r20*x8592))+(((-1.0)*r22*x8589))+((r21*x8591)));
evalcond[2]=((((-1.0)*r00*x8592))+((r01*x8591))+(((-1.0)*r02*x8589)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8592))+(((-1.0)*r12*x8589))+((r11*x8591)));
evalcond[4]=(((r02*x8587))+(((-1.0)*sj2*x8588))+(((-1.0)*gconst2*r00*x8589))+((r01*x8590))+((cj1*cj2)));
evalcond[5]=(((r22*x8587))+(((-1.0)*cj2*x8588))+(((-1.0)*cj1*sj2))+((r21*x8590))+(((-1.0)*gconst2*r20*x8589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8593=((1.0)*gconst2);
CheckValue<IkReal> x8594=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8593))+(((-1.0)*gconst1*r00)))),-1);
if(!x8594.valid){
continue;
}
CheckValue<IkReal> x8595 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8593))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8594.value)))+(x8595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8596=IKcos(j4);
IkReal x8597=IKsin(j4);
IkReal x8598=((1.0)*sj1);
IkReal x8599=((1.0)*x8596);
IkReal x8600=(gconst1*x8596);
IkReal x8601=(gconst1*x8597);
IkReal x8602=((1.0)*gconst2*x8597);
evalcond[0]=((((-1.0)*gconst2*r10*x8599))+((r11*x8600))+((r12*x8597)));
evalcond[1]=((((-1.0)*r22*x8599))+(((-1.0)*r20*x8602))+((r21*x8601)));
evalcond[2]=((((-1.0)*r00*x8602))+(((-1.0)*r02*x8599))+((r01*x8601)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8599))+((r11*x8601))+(((-1.0)*r10*x8602)));
evalcond[4]=(((r01*x8600))+(((-1.0)*gconst2*r00*x8599))+((r02*x8597))+((cj1*cj2))+(((-1.0)*sj2*x8598)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x8598))+((r21*x8600))+((r22*x8597))+(((-1.0)*gconst2*r20*x8599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8603=((-1.0)*r20);
IkReal x8604=x8189;
CheckValue<IkReal> x8606 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8603),IKFAST_ATAN2_MAGTHRESH);
if(!x8606.valid){
continue;
}
IkReal x8605=((-1.0)*(x8606.value));
sj5=gconst1;
cj5=gconst2;
j5=x8605;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8605;
IkReal gconst1=(r21*x8604);
IkReal gconst2=(x8603*x8604);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8607=((-1.0)*r20);
IkReal x8608=x8189;
CheckValue<IkReal> x8610 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8607),IKFAST_ATAN2_MAGTHRESH);
if(!x8610.valid){
continue;
}
IkReal x8609=((-1.0)*(x8610.value));
sj5=gconst1;
cj5=gconst2;
j5=x8609;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8609;
IkReal gconst1=(r21*x8608);
IkReal gconst2=(x8607*x8608);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8611=((-1.0)*r20);
IkReal x8612=x8189;
CheckValue<IkReal> x8614 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8611),IKFAST_ATAN2_MAGTHRESH);
if(!x8614.valid){
continue;
}
IkReal x8613=((-1.0)*(x8614.value));
sj5=gconst1;
cj5=gconst2;
j5=x8613;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8613;
IkReal gconst1=(r21*x8612);
IkReal gconst2=(x8611*x8612);
IkReal x8615=r22*r22;
IkReal x8616=(cj1*r12*sj2);
IkReal x8617=(cj2*r12*sj1);
CheckValue<IkReal> x8621=IKPowWithIntegerCheck(((-1.0)+x8615),-1);
if(!x8621.valid){
continue;
}
IkReal x8618=x8621.value;
if((((1.0)+(((-1.0)*x8615)))) < -0.00001)
continue;
IkReal x8619=IKsqrt(((1.0)+(((-1.0)*x8615))));
IkReal x8620=((1.0)*r22*x8618*x8619);
j4eval[0]=((IKabs(((((-1.0)*x8616*x8620))+(((-1.0)*x8617*x8620)))))+(IKabs((x8617+x8616))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8622=((1.0)*gconst1);
IkReal x8623=(cj2*sj1);
IkReal x8624=(gconst2*r10);
IkReal x8625=(cj1*sj2);
CheckValue<IkReal> x8626 = IKatan2WithCheck(IkReal((((x8623*x8624))+(((-1.0)*r11*x8622*x8623))+(((-1.0)*r11*x8622*x8625))+((x8624*x8625)))),IkReal((((r12*x8623))+((r12*x8625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8626.valid){
continue;
}
CheckValue<IkReal> x8627=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8622))+(((-1.0)*gconst2*r01)))),-1);
if(!x8627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8626.value)+(((1.5707963267949)*(x8627.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8628=IKcos(j4);
IkReal x8629=IKsin(j4);
IkReal x8630=((1.0)*cj2);
IkReal x8631=((1.0)*x8628);
IkReal x8632=(gconst1*x8628);
IkReal x8633=(gconst1*x8629);
IkReal x8634=((1.0)*gconst2*x8629);
evalcond[0]=((((-1.0)*gconst2*r10*x8631))+((r12*x8629))+((r11*x8632)));
evalcond[1]=(((r21*x8633))+(((-1.0)*r22*x8631))+(((-1.0)*r20*x8634)));
evalcond[2]=((((-1.0)*r00*x8634))+((r01*x8633))+(((-1.0)*r02*x8631)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8631))+(((-1.0)*r10*x8634))+((r11*x8633)));
evalcond[4]=(((r02*x8629))+(((-1.0)*cj1*x8630))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8631))+((r01*x8632)));
evalcond[5]=((((-1.0)*sj1*x8630))+((r21*x8632))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r20*x8631))+((r22*x8629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8635=(gconst1*r11);
IkReal x8636=(gconst2*r10);
CheckValue<IkReal> x8637=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8635*x8635)+(((-2.0)*x8635*x8636))+(x8636*x8636))),-1);
if(!x8637.valid){
continue;
}
CheckValue<IkReal> x8638 = IKatan2WithCheck(IkReal((x8635+(((-1.0)*x8636)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8637.value)))+(x8638.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8639=IKcos(j4);
IkReal x8640=IKsin(j4);
IkReal x8641=((1.0)*cj2);
IkReal x8642=((1.0)*x8639);
IkReal x8643=(gconst1*x8639);
IkReal x8644=(gconst1*x8640);
IkReal x8645=((1.0)*gconst2*x8640);
evalcond[0]=(((r12*x8640))+((r11*x8643))+(((-1.0)*gconst2*r10*x8642)));
evalcond[1]=((((-1.0)*r22*x8642))+((r21*x8644))+(((-1.0)*r20*x8645)));
evalcond[2]=((((-1.0)*r02*x8642))+((r01*x8644))+(((-1.0)*r00*x8645)));
evalcond[3]=((-1.0)+((r11*x8644))+(((-1.0)*r10*x8645))+(((-1.0)*r12*x8642)));
evalcond[4]=((((-1.0)*gconst2*r00*x8642))+((r02*x8640))+((sj1*sj2))+((r01*x8643))+(((-1.0)*cj1*x8641)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8641))+((r21*x8643))+(((-1.0)*gconst2*r20*x8642))+((r22*x8640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8646 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8646.valid){
continue;
}
CheckValue<IkReal> x8647=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8646.value)+(((1.5707963267949)*(x8647.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8648=IKcos(j4);
IkReal x8649=IKsin(j4);
IkReal x8650=((1.0)*cj2);
IkReal x8651=((1.0)*x8648);
IkReal x8652=(gconst1*x8648);
IkReal x8653=(gconst1*x8649);
IkReal x8654=((1.0)*gconst2*x8649);
evalcond[0]=(((r12*x8649))+((r11*x8652))+(((-1.0)*gconst2*r10*x8651)));
evalcond[1]=(((r21*x8653))+(((-1.0)*r20*x8654))+(((-1.0)*r22*x8651)));
evalcond[2]=(((r01*x8653))+(((-1.0)*r00*x8654))+(((-1.0)*r02*x8651)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8651))+((r11*x8653))+(((-1.0)*r10*x8654)));
evalcond[4]=(((r01*x8652))+((r02*x8649))+(((-1.0)*cj1*x8650))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8651)));
evalcond[5]=((((-1.0)*sj1*x8650))+((r21*x8652))+(((-1.0)*gconst2*r20*x8651))+(((-1.0)*cj1*sj2))+((r22*x8649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8655=((-1.0)*r20);
IkReal x8656=x8189;
CheckValue<IkReal> x8658 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8655),IKFAST_ATAN2_MAGTHRESH);
if(!x8658.valid){
continue;
}
IkReal x8657=((-1.0)*(x8658.value));
sj5=gconst1;
cj5=gconst2;
j5=x8657;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8657;
IkReal gconst1=(r21*x8656);
IkReal gconst2=(x8655*x8656);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8659=((-1.0)*r20);
IkReal x8660=x8189;
CheckValue<IkReal> x8662 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8659),IKFAST_ATAN2_MAGTHRESH);
if(!x8662.valid){
continue;
}
IkReal x8661=((-1.0)*(x8662.value));
sj5=gconst1;
cj5=gconst2;
j5=x8661;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8661;
IkReal gconst1=(r21*x8660);
IkReal gconst2=(x8659*x8660);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8663=((-1.0)*r20);
IkReal x8664=x8189;
CheckValue<IkReal> x8666 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8663),IKFAST_ATAN2_MAGTHRESH);
if(!x8666.valid){
continue;
}
IkReal x8665=((-1.0)*(x8666.value));
sj5=gconst1;
cj5=gconst2;
j5=x8665;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8665;
IkReal gconst1=(r21*x8664);
IkReal gconst2=(x8663*x8664);
IkReal x8667=r22*r22;
IkReal x8668=(cj1*r02*sj2);
IkReal x8669=(cj2*r02*sj1);
CheckValue<IkReal> x8673=IKPowWithIntegerCheck(((-1.0)+x8667),-1);
if(!x8673.valid){
continue;
}
IkReal x8670=x8673.value;
if((((1.0)+(((-1.0)*x8667)))) < -0.00001)
continue;
IkReal x8671=IKsqrt(((1.0)+(((-1.0)*x8667))));
IkReal x8672=((1.0)*r22*x8670*x8671);
j4eval[0]=((IKabs((x8668+x8669)))+(IKabs(((((-1.0)*x8668*x8672))+(((-1.0)*x8669*x8672))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8674=(cj2*sj1);
IkReal x8675=(cj1*sj2);
IkReal x8676=(gconst2*r00);
IkReal x8677=((1.0)*gconst1*r01);
CheckValue<IkReal> x8678 = IKatan2WithCheck(IkReal(((((-1.0)*x8674*x8677))+(((-1.0)*x8675*x8677))+((x8674*x8676))+((x8675*x8676)))),IkReal((((r02*x8675))+((r02*x8674)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8678.valid){
continue;
}
CheckValue<IkReal> x8679=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8678.value)+(((1.5707963267949)*(x8679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8680=IKcos(j4);
IkReal x8681=IKsin(j4);
IkReal x8682=((1.0)*sj1);
IkReal x8683=((1.0)*x8680);
IkReal x8684=(gconst1*x8680);
IkReal x8685=(gconst1*x8681);
IkReal x8686=((1.0)*gconst2*x8681);
evalcond[0]=(((r01*x8684))+(((-1.0)*gconst2*r00*x8683))+((r02*x8681)));
evalcond[1]=((((-1.0)*r22*x8683))+(((-1.0)*r20*x8686))+((r21*x8685)));
evalcond[2]=((((-1.0)*r12*x8683))+((r11*x8685))+(((-1.0)*r10*x8686)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x8686))+(((-1.0)*r02*x8683))+((r01*x8685)));
evalcond[4]=((((-1.0)*sj2*x8682))+((r12*x8681))+((r11*x8684))+(((-1.0)*gconst2*r10*x8683))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r22*x8681))+((r21*x8684))+(((-1.0)*cj2*x8682))+(((-1.0)*gconst2*r20*x8683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8687=(gconst1*r01);
IkReal x8688=(gconst2*r00);
CheckValue<IkReal> x8689=IKPowWithIntegerCheck(IKsign(((x8687*x8687)+(((-2.0)*x8687*x8688))+(x8688*x8688)+(r02*r02))),-1);
if(!x8689.valid){
continue;
}
CheckValue<IkReal> x8690 = IKatan2WithCheck(IkReal((x8687+(((-1.0)*x8688)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8689.value)))+(x8690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8691=IKcos(j4);
IkReal x8692=IKsin(j4);
IkReal x8693=((1.0)*sj1);
IkReal x8694=((1.0)*x8691);
IkReal x8695=(gconst1*x8691);
IkReal x8696=(gconst1*x8692);
IkReal x8697=((1.0)*gconst2*x8692);
evalcond[0]=((((-1.0)*gconst2*r00*x8694))+((r02*x8692))+((r01*x8695)));
evalcond[1]=(((r21*x8696))+(((-1.0)*r22*x8694))+(((-1.0)*r20*x8697)));
evalcond[2]=((((-1.0)*r12*x8694))+(((-1.0)*r10*x8697))+((r11*x8696)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8694))+((r01*x8696))+(((-1.0)*r00*x8697)));
evalcond[4]=(((cj1*cj2))+(((-1.0)*sj2*x8693))+(((-1.0)*gconst2*r10*x8694))+((r12*x8692))+((r11*x8695)));
evalcond[5]=((((-1.0)*gconst2*r20*x8694))+((r21*x8695))+((r22*x8692))+(((-1.0)*cj2*x8693))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8698=((1.0)*gconst2);
CheckValue<IkReal> x8699=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8698)))),-1);
if(!x8699.valid){
continue;
}
CheckValue<IkReal> x8700 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8698)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8699.value)))+(x8700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8701=IKcos(j4);
IkReal x8702=IKsin(j4);
IkReal x8703=((1.0)*sj1);
IkReal x8704=((1.0)*x8701);
IkReal x8705=(gconst1*x8701);
IkReal x8706=(gconst1*x8702);
IkReal x8707=((1.0)*gconst2*x8702);
evalcond[0]=(((r02*x8702))+(((-1.0)*gconst2*r00*x8704))+((r01*x8705)));
evalcond[1]=(((r21*x8706))+(((-1.0)*r20*x8707))+(((-1.0)*r22*x8704)));
evalcond[2]=(((r11*x8706))+(((-1.0)*r10*x8707))+(((-1.0)*r12*x8704)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x8707))+(((-1.0)*r02*x8704))+((r01*x8706)));
evalcond[4]=(((r11*x8705))+(((-1.0)*sj2*x8703))+((r12*x8702))+(((-1.0)*gconst2*r10*x8704))+((cj1*cj2)));
evalcond[5]=(((r21*x8705))+(((-1.0)*cj2*x8703))+(((-1.0)*cj1*sj2))+((r22*x8702))+(((-1.0)*gconst2*r20*x8704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8708=((-1.0)*r20);
IkReal x8709=x8189;
CheckValue<IkReal> x8711 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8708),IKFAST_ATAN2_MAGTHRESH);
if(!x8711.valid){
continue;
}
IkReal x8710=((-1.0)*(x8711.value));
sj5=gconst1;
cj5=gconst2;
j5=x8710;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8710;
IkReal gconst1=(r21*x8709);
IkReal gconst2=(x8708*x8709);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8712=((-1.0)*r20);
IkReal x8713=x8189;
CheckValue<IkReal> x8715 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8712),IKFAST_ATAN2_MAGTHRESH);
if(!x8715.valid){
continue;
}
IkReal x8714=((-1.0)*(x8715.value));
sj5=gconst1;
cj5=gconst2;
j5=x8714;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8714;
IkReal gconst1=(r21*x8713);
IkReal gconst2=(x8712*x8713);
IkReal x8716=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8720=IKPowWithIntegerCheck(x8716,-1);
if(!x8720.valid){
continue;
}
IkReal x8717=x8720.value;
IkReal x8718=((1.0)*x8717);
IkReal x8719=((((-2.0)*r00*r01*r20*r21*x8717))+(((-1.0)*(r02*r02)))+(((-1.0)*x8718*(r00*r00)*(r20*r20)))+(((-1.0)*x8718*(r01*r01)*(r21*r21))));
j4eval[0]=x8719;
j4eval[1]=IKsign(x8719);
j4eval[2]=r02;
j4eval[3]=x8716;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8721=((-1.0)*r20);
IkReal x8722=x8189;
CheckValue<IkReal> x8724 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8721),IKFAST_ATAN2_MAGTHRESH);
if(!x8724.valid){
continue;
}
IkReal x8723=((-1.0)*(x8724.value));
sj5=gconst1;
cj5=gconst2;
j5=x8723;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8723;
IkReal gconst1=(r21*x8722);
IkReal gconst2=(x8721*x8722);
IkReal x8725=r22*r22;
IkReal x8726=(cj1*r02*sj2);
IkReal x8727=(cj2*r02*sj1);
CheckValue<IkReal> x8731=IKPowWithIntegerCheck(((-1.0)+x8725),-1);
if(!x8731.valid){
continue;
}
IkReal x8728=x8731.value;
if((((1.0)+(((-1.0)*x8725)))) < -0.00001)
continue;
IkReal x8729=IKsqrt(((1.0)+(((-1.0)*x8725))));
IkReal x8730=((1.0)*r22*x8728*x8729);
j4eval[0]=((IKabs((x8727+x8726)))+(IKabs(((((-1.0)*x8726*x8730))+(((-1.0)*x8727*x8730))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8732=(cj2*sj1);
IkReal x8733=(cj1*sj2);
IkReal x8734=(gconst2*r00);
IkReal x8735=((1.0)*gconst1*r01);
CheckValue<IkReal> x8736 = IKatan2WithCheck(IkReal((((x8732*x8734))+(((-1.0)*x8732*x8735))+(((-1.0)*x8733*x8735))+((x8733*x8734)))),IkReal((((r02*x8732))+((r02*x8733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8736.valid){
continue;
}
CheckValue<IkReal> x8737=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8736.value)+(((1.5707963267949)*(x8737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8738=IKcos(j4);
IkReal x8739=IKsin(j4);
IkReal x8740=((1.0)*cj2);
IkReal x8741=((1.0)*x8738);
IkReal x8742=(gconst1*x8738);
IkReal x8743=(gconst1*x8739);
IkReal x8744=((1.0)*gconst2*x8739);
evalcond[0]=(((r01*x8742))+(((-1.0)*gconst2*r00*x8741))+((r02*x8739)));
evalcond[1]=((((-1.0)*r22*x8741))+((r21*x8743))+(((-1.0)*r20*x8744)));
evalcond[2]=((((-1.0)*r12*x8741))+(((-1.0)*r10*x8744))+((r11*x8743)));
evalcond[3]=((1.0)+((r01*x8743))+(((-1.0)*r00*x8744))+(((-1.0)*r02*x8741)));
evalcond[4]=((((-1.0)*gconst2*r10*x8741))+((r12*x8739))+((sj1*sj2))+(((-1.0)*cj1*x8740))+((r11*x8742)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r22*x8739))+(((-1.0)*gconst2*r20*x8741))+(((-1.0)*sj1*x8740))+((r21*x8742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8745=(gconst1*r01);
IkReal x8746=(gconst2*r00);
CheckValue<IkReal> x8747 = IKatan2WithCheck(IkReal((x8745+(((-1.0)*x8746)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8747.valid){
continue;
}
CheckValue<IkReal> x8748=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x8745*x8746))+(((-1.0)*(x8746*x8746)))+(((-1.0)*(x8745*x8745))))),-1);
if(!x8748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8747.value)+(((1.5707963267949)*(x8748.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8749=IKcos(j4);
IkReal x8750=IKsin(j4);
IkReal x8751=((1.0)*cj2);
IkReal x8752=((1.0)*x8749);
IkReal x8753=(gconst1*x8749);
IkReal x8754=(gconst1*x8750);
IkReal x8755=((1.0)*gconst2*x8750);
evalcond[0]=(((r02*x8750))+(((-1.0)*gconst2*r00*x8752))+((r01*x8753)));
evalcond[1]=((((-1.0)*r22*x8752))+(((-1.0)*r20*x8755))+((r21*x8754)));
evalcond[2]=((((-1.0)*r10*x8755))+((r11*x8754))+(((-1.0)*r12*x8752)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8752))+(((-1.0)*r00*x8755))+((r01*x8754)));
evalcond[4]=((((-1.0)*gconst2*r10*x8752))+((r11*x8753))+((sj1*sj2))+(((-1.0)*cj1*x8751))+((r12*x8750)));
evalcond[5]=(((r22*x8750))+(((-1.0)*sj1*x8751))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r20*x8752))+((r21*x8753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8756 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8756.valid){
continue;
}
CheckValue<IkReal> x8757=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8756.value)+(((1.5707963267949)*(x8757.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8758=IKcos(j4);
IkReal x8759=IKsin(j4);
IkReal x8760=((1.0)*cj2);
IkReal x8761=((1.0)*x8758);
IkReal x8762=(gconst1*x8758);
IkReal x8763=(gconst1*x8759);
IkReal x8764=((1.0)*gconst2*x8759);
evalcond[0]=(((r02*x8759))+((r01*x8762))+(((-1.0)*gconst2*r00*x8761)));
evalcond[1]=((((-1.0)*r20*x8764))+(((-1.0)*r22*x8761))+((r21*x8763)));
evalcond[2]=((((-1.0)*r10*x8764))+(((-1.0)*r12*x8761))+((r11*x8763)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8761))+((r01*x8763))+(((-1.0)*r00*x8764)));
evalcond[4]=((((-1.0)*gconst2*r10*x8761))+(((-1.0)*cj1*x8760))+((sj1*sj2))+((r12*x8759))+((r11*x8762)));
evalcond[5]=(((r22*x8759))+(((-1.0)*cj1*sj2))+((r21*x8762))+(((-1.0)*sj1*x8760))+(((-1.0)*gconst2*r20*x8761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8765=((-1.0)*r20);
IkReal x8766=((-1.0)*px);
CheckValue<IkReal> x8768 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8765),IKFAST_ATAN2_MAGTHRESH);
if(!x8768.valid){
continue;
}
IkReal x8767=((-1.0)*(x8768.value));
sj5=gconst1;
cj5=gconst2;
j5=x8767;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8766);
rxp1_1=(px*r21);
rxp1_2=(r11*x8766);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8767;
IkReal gconst1=r21;
IkReal gconst2=x8765;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8769=((-1.0)*r20);
IkReal x8770=((-1.0)*px);
CheckValue<IkReal> x8772 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8769),IKFAST_ATAN2_MAGTHRESH);
if(!x8772.valid){
continue;
}
IkReal x8771=((-1.0)*(x8772.value));
sj5=gconst1;
cj5=gconst2;
j5=x8771;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8770);
rxp1_1=(px*r21);
rxp1_2=(r11*x8770);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8771;
IkReal gconst1=r21;
IkReal gconst2=x8769;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8773=((-1.0)*r20);
IkReal x8774=((-1.0)*px);
CheckValue<IkReal> x8776 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8773),IKFAST_ATAN2_MAGTHRESH);
if(!x8776.valid){
continue;
}
IkReal x8775=((-1.0)*(x8776.value));
sj5=gconst1;
cj5=gconst2;
j5=x8775;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8774);
rxp1_1=(px*r21);
rxp1_2=(r11*x8774);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8775;
IkReal gconst1=r21;
IkReal gconst2=x8773;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8779=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x8779.valid){
continue;
}
IkReal x8777=x8779.value;
IkReal x8778=(sj0*x8777);
cj4array[0]=((((-1.0)*cj1*cj2*x8778))+((sj1*sj2*x8778)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8780=IKsin(j4);
IkReal x8781=IKcos(j4);
IkReal x8782=((1.0)*gconst2);
IkReal x8783=(gconst1*r21);
evalcond[0]=(r02*x8780);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8781)));
evalcond[2]=(((x8780*x8783))+(((-1.0)*r20*x8780*x8782)));
evalcond[3]=((((-1.0)*r10*x8780*x8782))+((gconst1*r11*x8780)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x8781*x8783))+(((-1.0)*r20*x8781*x8782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8785=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8785.valid){
continue;
}
IkReal x8784=x8785.value;
cj4array[0]=(((cj2*sj1*x8784))+((cj1*sj2*x8784)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8786=IKsin(j4);
IkReal x8787=IKcos(j4);
IkReal x8788=((1.0)*sj0);
IkReal x8789=(gconst1*x8786);
IkReal x8790=((1.0)*x8787);
IkReal x8791=((1.0)*gconst2*x8786);
evalcond[0]=(r02*x8786);
evalcond[1]=((((-1.0)*r02*x8790))+(((-1.0)*x8788)));
evalcond[2]=(((r21*x8789))+(((-1.0)*r20*x8791)));
evalcond[3]=(((r11*x8789))+(((-1.0)*r10*x8791)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*gconst2*r10*x8790))+((gconst1*r11*x8787))+(((-1.0)*sj1*sj2*x8788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8792=IKPowWithIntegerCheck(r02,-1);
if(!x8792.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8792.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8793=IKsin(j4);
IkReal x8794=IKcos(j4);
IkReal x8795=((1.0)*gconst2);
IkReal x8796=(gconst1*r21);
IkReal x8797=((1.0)*sj1);
IkReal x8798=(gconst1*r11);
evalcond[0]=(r02*x8793);
evalcond[1]=(((x8793*x8796))+(((-1.0)*r20*x8793*x8795)));
evalcond[2]=(((x8793*x8798))+(((-1.0)*r10*x8793*x8795)));
evalcond[3]=((((-1.0)*cj2*x8797))+(((-1.0)*cj1*sj2))+((x8794*x8796))+(((-1.0)*r20*x8794*x8795)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r10*x8794*x8795))+((x8794*x8798))+(((-1.0)*sj0*sj2*x8797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8799=((1.0)*r22);
IkReal x8800=(cj1*sj2);
IkReal x8801=(cj2*sj1);
IkReal x8802=(gconst2*r20);
IkReal x8803=(gconst1*r21);
CheckValue<IkReal> x8804=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8803*x8803)))+(((-1.0)*(x8802*x8802)))+(((2.0)*x8802*x8803))+(((-1.0)*r22*x8799)))),-1);
if(!x8804.valid){
continue;
}
CheckValue<IkReal> x8805 = IKatan2WithCheck(IkReal(((((-1.0)*x8799*x8800))+(((-1.0)*x8799*x8801)))),IkReal((((x8800*x8802))+(((-1.0)*x8800*x8803))+((x8801*x8802))+(((-1.0)*x8801*x8803)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8804.value)))+(x8805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8806=IKsin(j4);
IkReal x8807=IKcos(j4);
IkReal x8808=(cj1*cj2);
IkReal x8809=(gconst2*r10);
IkReal x8810=((1.0)*sj1);
IkReal x8811=(gconst2*r00);
IkReal x8812=(gconst2*r20);
IkReal x8813=((1.0)*x8807);
IkReal x8814=(gconst1*x8807);
IkReal x8815=(gconst1*x8806);
IkReal x8816=((1.0)*x8806);
evalcond[0]=(((r21*x8815))+(((-1.0)*r22*x8813))+(((-1.0)*x8812*x8816)));
evalcond[1]=((((-1.0)*r12*x8813))+cj0+((r11*x8815))+(((-1.0)*x8809*x8816)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8813))+((r01*x8815))+(((-1.0)*x8811*x8816)));
evalcond[3]=(((r21*x8814))+((r22*x8806))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x8810))+(((-1.0)*x8812*x8813)));
evalcond[4]=(((cj0*x8808))+((r02*x8806))+((r01*x8814))+(((-1.0)*cj0*sj2*x8810))+(((-1.0)*x8811*x8813)));
evalcond[5]=(((r12*x8806))+((r11*x8814))+((sj0*x8808))+(((-1.0)*x8809*x8813))+(((-1.0)*sj0*sj2*x8810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8817=((1.0)*gconst2);
CheckValue<IkReal> x8818 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst1*r21*sj0))+(((-1.0)*r20*sj0*x8817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8818.valid){
continue;
}
CheckValue<IkReal> x8819=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8817))+(((-1.0)*gconst1*r10)))),-1);
if(!x8819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8818.value)+(((1.5707963267949)*(x8819.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8820=IKsin(j4);
IkReal x8821=IKcos(j4);
IkReal x8822=(cj1*cj2);
IkReal x8823=(gconst2*r10);
IkReal x8824=((1.0)*sj1);
IkReal x8825=(gconst2*r00);
IkReal x8826=(gconst2*r20);
IkReal x8827=((1.0)*x8821);
IkReal x8828=(gconst1*x8821);
IkReal x8829=(gconst1*x8820);
IkReal x8830=((1.0)*x8820);
evalcond[0]=(((r21*x8829))+(((-1.0)*x8826*x8830))+(((-1.0)*r22*x8827)));
evalcond[1]=((((-1.0)*r12*x8827))+cj0+((r11*x8829))+(((-1.0)*x8823*x8830)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8827))+((r01*x8829))+(((-1.0)*x8825*x8830)));
evalcond[3]=(((r21*x8828))+(((-1.0)*x8826*x8827))+((r22*x8820))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x8824)));
evalcond[4]=(((r02*x8820))+((r01*x8828))+(((-1.0)*cj0*sj2*x8824))+(((-1.0)*x8825*x8827))+((cj0*x8822)));
evalcond[5]=(((r12*x8820))+((r11*x8828))+((sj0*x8822))+(((-1.0)*sj0*sj2*x8824))+(((-1.0)*x8823*x8827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8831=((1.0)*gconst2);
CheckValue<IkReal> x8832 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x8831)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8832.valid){
continue;
}
CheckValue<IkReal> x8833=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8831)))),-1);
if(!x8833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8832.value)+(((1.5707963267949)*(x8833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8834=IKsin(j4);
IkReal x8835=IKcos(j4);
IkReal x8836=(cj1*cj2);
IkReal x8837=(gconst2*r10);
IkReal x8838=((1.0)*sj1);
IkReal x8839=(gconst2*r00);
IkReal x8840=(gconst2*r20);
IkReal x8841=((1.0)*x8835);
IkReal x8842=(gconst1*x8835);
IkReal x8843=(gconst1*x8834);
IkReal x8844=((1.0)*x8834);
evalcond[0]=(((r21*x8843))+(((-1.0)*x8840*x8844))+(((-1.0)*r22*x8841)));
evalcond[1]=(cj0+((r11*x8843))+(((-1.0)*x8837*x8844))+(((-1.0)*r12*x8841)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8841))+((r01*x8843))+(((-1.0)*x8839*x8844)));
evalcond[3]=(((r21*x8842))+(((-1.0)*x8840*x8841))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x8838))+((r22*x8834)));
evalcond[4]=(((cj0*x8836))+((r02*x8834))+((r01*x8842))+(((-1.0)*x8839*x8841))+(((-1.0)*cj0*sj2*x8838)));
evalcond[5]=(((r11*x8842))+((r12*x8834))+((sj0*x8836))+(((-1.0)*sj0*sj2*x8838))+(((-1.0)*x8837*x8841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8845=((-1.0)*r20);
IkReal x8846=x8189;
CheckValue<IkReal> x8848 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8845),IKFAST_ATAN2_MAGTHRESH);
if(!x8848.valid){
continue;
}
IkReal x8847=((-1.0)*(x8848.value));
sj5=gconst1;
cj5=gconst2;
j5=x8847;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8847;
IkReal gconst1=(r21*x8846);
IkReal gconst2=(x8845*x8846);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8849=((-1.0)*r20);
IkReal x8850=x8189;
CheckValue<IkReal> x8852 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8849),IKFAST_ATAN2_MAGTHRESH);
if(!x8852.valid){
continue;
}
IkReal x8851=((-1.0)*(x8852.value));
sj5=gconst1;
cj5=gconst2;
j5=x8851;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8851;
IkReal gconst1=(r21*x8850);
IkReal gconst2=(x8849*x8850);
CheckValue<IkReal> x8860=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8860.valid){
continue;
}
IkReal x8853=x8860.value;
IkReal x8854=(sj3*x8853);
IkReal x8855=(r11*x8854);
IkReal x8856=(r00*x8854);
IkReal x8857=(r01*x8854);
IkReal x8858=(r10*x8854);
IkReal x8859=(r20*r21*x8854);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x8857))+((r00*r20*r21*x8855))+((r01*x8855*(r21*r21)))+((r10*x8856*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8861=((-1.0)*r20);
IkReal x8862=x8189;
CheckValue<IkReal> x8864 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8861),IKFAST_ATAN2_MAGTHRESH);
if(!x8864.valid){
continue;
}
IkReal x8863=((-1.0)*(x8864.value));
sj5=gconst1;
cj5=gconst2;
j5=x8863;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8863;
IkReal gconst1=(r21*x8862);
IkReal gconst2=(x8861*x8862);
CheckValue<IkReal> x8872=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8872.valid){
continue;
}
IkReal x8865=x8872.value;
IkReal x8866=(cj3*x8865);
IkReal x8867=(r11*x8866);
IkReal x8868=(r01*x8866);
IkReal x8869=(r00*x8866);
IkReal x8870=(r10*x8866);
IkReal x8871=(r20*r21*x8866);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*x8869*(r20*r20)))+((r01*x8867*(r21*r21)))+((r00*r20*r21*x8867))+((r10*r20*r21*x8868))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8873=((-1.0)*r20);
IkReal x8874=x8189;
CheckValue<IkReal> x8876 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8873),IKFAST_ATAN2_MAGTHRESH);
if(!x8876.valid){
continue;
}
IkReal x8875=((-1.0)*(x8876.value));
sj5=gconst1;
cj5=gconst2;
j5=x8875;
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8875;
IkReal gconst1=(r21*x8874);
IkReal gconst2=(x8873*x8874);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8877=((-1.0)*r20);
IkReal x8878=x8189;
CheckValue<IkReal> x8880 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8877),IKFAST_ATAN2_MAGTHRESH);
if(!x8880.valid){
continue;
}
IkReal x8879=((-1.0)*(x8880.value));
sj5=gconst1;
cj5=gconst2;
j5=x8879;
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8879;
IkReal gconst1=(r21*x8878);
IkReal gconst2=(x8877*x8878);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8881=((-1.0)*r20);
IkReal x8882=x8189;
CheckValue<IkReal> x8884 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8881),IKFAST_ATAN2_MAGTHRESH);
if(!x8884.valid){
continue;
}
IkReal x8883=((-1.0)*(x8884.value));
sj5=gconst1;
cj5=gconst2;
j5=x8883;
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8883;
IkReal gconst1=(r21*x8882);
IkReal gconst2=(x8881*x8882);
IkReal x8885=r22*r22;
IkReal x8886=(r12*sj1*sj2);
IkReal x8887=(cj1*cj2*r12);
CheckValue<IkReal> x8891=IKPowWithIntegerCheck(((-1.0)+x8885),-1);
if(!x8891.valid){
continue;
}
IkReal x8888=x8891.value;
if((((1.0)+(((-1.0)*x8885)))) < -0.00001)
continue;
IkReal x8889=IKsqrt(((1.0)+(((-1.0)*x8885))));
IkReal x8890=(r22*x8888*x8889);
j4eval[0]=((IKabs(((((-1.0)*x8887))+x8886)))+(IKabs((((x8887*x8890))+(((-1.0)*x8886*x8890))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8892=((1.0)*gconst1);
IkReal x8893=(gconst2*r10);
IkReal x8894=(sj1*sj2);
IkReal x8895=((1.0)*cj1*cj2);
CheckValue<IkReal> x8896=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8892))+(((-1.0)*gconst2*r01)))),-1);
if(!x8896.valid){
continue;
}
CheckValue<IkReal> x8897 = IKatan2WithCheck(IkReal((((cj1*cj2*gconst1*r11))+((x8893*x8894))+(((-1.0)*x8893*x8895))+(((-1.0)*r11*x8892*x8894)))),IkReal((((r12*x8894))+(((-1.0)*r12*x8895)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8896.value)))+(x8897.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8898=IKsin(j4);
IkReal x8899=IKcos(j4);
IkReal x8900=((1.0)*cj2);
IkReal x8901=((1.0)*x8899);
IkReal x8902=(gconst2*x8899);
IkReal x8903=(gconst1*x8898);
IkReal x8904=((1.0)*x8898);
evalcond[0]=(((r21*x8903))+(((-1.0)*gconst2*r20*x8904))+(((-1.0)*r22*x8901)));
evalcond[1]=((((-1.0)*gconst2*r00*x8904))+((r01*x8903))+(((-1.0)*r02*x8901)));
evalcond[2]=(((r10*x8902))+(((-1.0)*gconst1*r11*x8901))+(((-1.0)*r12*x8904)));
evalcond[3]=((1.0)+((r11*x8903))+(((-1.0)*gconst2*r10*x8904))+(((-1.0)*r12*x8901)));
evalcond[4]=((((-1.0)*cj1*x8900))+((r20*x8902))+(((-1.0)*r22*x8904))+((sj1*sj2))+(((-1.0)*gconst1*r21*x8901)));
evalcond[5]=(((r00*x8902))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r01*x8901))+(((-1.0)*r02*x8904))+(((-1.0)*sj1*x8900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8905=(gconst1*r11);
IkReal x8906=(gconst2*r10);
CheckValue<IkReal> x8907 = IKatan2WithCheck(IkReal((x8906+(((-1.0)*x8905)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8907.valid){
continue;
}
CheckValue<IkReal> x8908=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8906*x8906)+(x8905*x8905)+(((-2.0)*x8905*x8906)))),-1);
if(!x8908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8907.value)+(((1.5707963267949)*(x8908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8909=IKsin(j4);
IkReal x8910=IKcos(j4);
IkReal x8911=((1.0)*cj2);
IkReal x8912=((1.0)*x8910);
IkReal x8913=(gconst2*x8910);
IkReal x8914=(gconst1*x8909);
IkReal x8915=((1.0)*x8909);
evalcond[0]=((((-1.0)*gconst2*r20*x8915))+((r21*x8914))+(((-1.0)*r22*x8912)));
evalcond[1]=(((r01*x8914))+(((-1.0)*r02*x8912))+(((-1.0)*gconst2*r00*x8915)));
evalcond[2]=((((-1.0)*r12*x8915))+((r10*x8913))+(((-1.0)*gconst1*r11*x8912)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x8915))+(((-1.0)*r12*x8912))+((r11*x8914)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x8911))+(((-1.0)*r22*x8915))+((r20*x8913))+(((-1.0)*gconst1*r21*x8912)));
evalcond[5]=(((r00*x8913))+(((-1.0)*r02*x8915))+(((-1.0)*sj1*x8911))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r01*x8912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8916=((1.0)*gconst2);
CheckValue<IkReal> x8917=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8916))+(((-1.0)*gconst1*r00)))),-1);
if(!x8917.valid){
continue;
}
CheckValue<IkReal> x8918 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8916))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8917.value)))+(x8918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8919=IKsin(j4);
IkReal x8920=IKcos(j4);
IkReal x8921=((1.0)*cj2);
IkReal x8922=((1.0)*x8920);
IkReal x8923=(gconst2*x8920);
IkReal x8924=(gconst1*x8919);
IkReal x8925=((1.0)*x8919);
evalcond[0]=((((-1.0)*r22*x8922))+(((-1.0)*gconst2*r20*x8925))+((r21*x8924)));
evalcond[1]=((((-1.0)*r02*x8922))+(((-1.0)*gconst2*r00*x8925))+((r01*x8924)));
evalcond[2]=((((-1.0)*gconst1*r11*x8922))+(((-1.0)*r12*x8925))+((r10*x8923)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x8925))+(((-1.0)*r12*x8922))+((r11*x8924)));
evalcond[4]=(((r20*x8923))+(((-1.0)*r22*x8925))+(((-1.0)*gconst1*r21*x8922))+((sj1*sj2))+(((-1.0)*cj1*x8921)));
evalcond[5]=((((-1.0)*r02*x8925))+(((-1.0)*gconst1*r01*x8922))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8921))+((r00*x8923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8926=((-1.0)*r20);
IkReal x8927=x8189;
CheckValue<IkReal> x8929 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8926),IKFAST_ATAN2_MAGTHRESH);
if(!x8929.valid){
continue;
}
IkReal x8928=((-1.0)*(x8929.value));
sj5=gconst1;
cj5=gconst2;
j5=x8928;
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8928;
IkReal gconst1=(r21*x8927);
IkReal gconst2=(x8926*x8927);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8930=((-1.0)*r20);
IkReal x8931=x8189;
CheckValue<IkReal> x8933 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8930),IKFAST_ATAN2_MAGTHRESH);
if(!x8933.valid){
continue;
}
IkReal x8932=((-1.0)*(x8933.value));
sj5=gconst1;
cj5=gconst2;
j5=x8932;
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8932;
IkReal gconst1=(r21*x8931);
IkReal gconst2=(x8930*x8931);
IkReal x8934=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8938=IKPowWithIntegerCheck(x8934,-1);
if(!x8938.valid){
continue;
}
IkReal x8935=x8938.value;
IkReal x8936=((1.0)*x8935);
IkReal x8937=((((-1.0)*x8936*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8935))+(((-1.0)*x8936*(r11*r11)*(r21*r21))));
j4eval[0]=x8937;
j4eval[1]=r12;
j4eval[2]=x8934;
j4eval[3]=IKsign(x8937);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8939=((-1.0)*r20);
IkReal x8940=x8189;
CheckValue<IkReal> x8942 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8939),IKFAST_ATAN2_MAGTHRESH);
if(!x8942.valid){
continue;
}
IkReal x8941=((-1.0)*(x8942.value));
sj5=gconst1;
cj5=gconst2;
j5=x8941;
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8941;
IkReal gconst1=(r21*x8940);
IkReal gconst2=(x8939*x8940);
IkReal x8943=r22*r22;
IkReal x8944=(cj1*cj2*r12);
IkReal x8945=(r12*sj1*sj2);
CheckValue<IkReal> x8949=IKPowWithIntegerCheck(((-1.0)+x8943),-1);
if(!x8949.valid){
continue;
}
IkReal x8946=x8949.value;
if((((1.0)+(((-1.0)*x8943)))) < -0.00001)
continue;
IkReal x8947=IKsqrt(((1.0)+(((-1.0)*x8943))));
IkReal x8948=(r22*x8946*x8947);
j4eval[0]=((IKabs(((((-1.0)*x8944*x8948))+((x8945*x8948)))))+(IKabs((x8944+(((-1.0)*x8945))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8950=(sj1*sj2);
IkReal x8951=(gconst1*r11);
IkReal x8952=(cj1*cj2);
IkReal x8953=(gconst2*r10);
CheckValue<IkReal> x8954 = IKatan2WithCheck(IkReal((((x8952*x8953))+((x8950*x8951))+(((-1.0)*x8950*x8953))+(((-1.0)*x8951*x8952)))),IkReal(((((-1.0)*r12*x8950))+((r12*x8952)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8954.valid){
continue;
}
CheckValue<IkReal> x8955=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8954.value)+(((1.5707963267949)*(x8955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8956=IKcos(j4);
IkReal x8957=IKsin(j4);
IkReal x8958=((1.0)*cj2);
IkReal x8959=((1.0)*x8956);
IkReal x8960=(gconst1*x8956);
IkReal x8961=(gconst1*x8957);
IkReal x8962=((1.0)*gconst2*x8957);
evalcond[0]=(((r11*x8960))+(((-1.0)*gconst2*r10*x8959))+((r12*x8957)));
evalcond[1]=((((-1.0)*r22*x8959))+(((-1.0)*r20*x8962))+((r21*x8961)));
evalcond[2]=((((-1.0)*r00*x8962))+((r01*x8961))+(((-1.0)*r02*x8959)));
evalcond[3]=((1.0)+((r11*x8961))+(((-1.0)*r10*x8962))+(((-1.0)*r12*x8959)));
evalcond[4]=(((r22*x8957))+((sj1*sj2))+(((-1.0)*cj1*x8958))+(((-1.0)*gconst2*r20*x8959))+((r21*x8960)));
evalcond[5]=(((r02*x8957))+(((-1.0)*sj1*x8958))+(((-1.0)*cj1*sj2))+((r01*x8960))+(((-1.0)*gconst2*r00*x8959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8963=(gconst2*r10);
IkReal x8964=(gconst1*r11);
CheckValue<IkReal> x8965 = IKatan2WithCheck(IkReal((x8964+(((-1.0)*x8963)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8965.valid){
continue;
}
CheckValue<IkReal> x8966=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*(x8963*x8963)))+(((-1.0)*(x8964*x8964)))+(((2.0)*x8963*x8964)))),-1);
if(!x8966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8965.value)+(((1.5707963267949)*(x8966.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8967=IKcos(j4);
IkReal x8968=IKsin(j4);
IkReal x8969=((1.0)*cj2);
IkReal x8970=((1.0)*x8967);
IkReal x8971=(gconst1*x8967);
IkReal x8972=(gconst1*x8968);
IkReal x8973=((1.0)*gconst2*x8968);
evalcond[0]=(((r11*x8971))+(((-1.0)*gconst2*r10*x8970))+((r12*x8968)));
evalcond[1]=(((r21*x8972))+(((-1.0)*r22*x8970))+(((-1.0)*r20*x8973)));
evalcond[2]=(((r01*x8972))+(((-1.0)*r02*x8970))+(((-1.0)*r00*x8973)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8973))+((r11*x8972))+(((-1.0)*r12*x8970)));
evalcond[4]=(((r21*x8971))+((r22*x8968))+(((-1.0)*gconst2*r20*x8970))+((sj1*sj2))+(((-1.0)*cj1*x8969)));
evalcond[5]=(((r02*x8968))+(((-1.0)*sj1*x8969))+((r01*x8971))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r00*x8970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8974=((1.0)*gconst2);
CheckValue<IkReal> x8975=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8974)))),-1);
if(!x8975.valid){
continue;
}
CheckValue<IkReal> x8976 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8975.value)))+(x8976.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8977=IKcos(j4);
IkReal x8978=IKsin(j4);
IkReal x8979=((1.0)*cj2);
IkReal x8980=((1.0)*x8977);
IkReal x8981=(gconst1*x8977);
IkReal x8982=(gconst1*x8978);
IkReal x8983=((1.0)*gconst2*x8978);
evalcond[0]=(((r12*x8978))+(((-1.0)*gconst2*r10*x8980))+((r11*x8981)));
evalcond[1]=((((-1.0)*r20*x8983))+((r21*x8982))+(((-1.0)*r22*x8980)));
evalcond[2]=(((r01*x8982))+(((-1.0)*r02*x8980))+(((-1.0)*r00*x8983)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8980))+((r11*x8982))+(((-1.0)*r10*x8983)));
evalcond[4]=((((-1.0)*gconst2*r20*x8980))+(((-1.0)*cj1*x8979))+((sj1*sj2))+((r21*x8981))+((r22*x8978)));
evalcond[5]=(((r01*x8981))+(((-1.0)*gconst2*r00*x8980))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8979))+((r02*x8978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x8984=((-1.0)*r20);
IkReal x8985=((-1.0)*px);
CheckValue<IkReal> x8987 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8984),IKFAST_ATAN2_MAGTHRESH);
if(!x8987.valid){
continue;
}
IkReal x8986=((-1.0)*(x8987.value));
sj5=gconst1;
cj5=gconst2;
j5=x8986;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8985);
rxp1_1=(px*r21);
rxp1_2=(r11*x8985);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8986;
IkReal gconst1=r21;
IkReal gconst2=x8984;
IkReal x8988=(r10*r20);
IkReal x8989=((1.0)*cj3);
IkReal x8990=(r11*r21);
j4eval[0]=(x8988+x8990);
j4eval[1]=((((-1.0)*x8988*x8989))+(((-1.0)*x8989*x8990)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8991=((-1.0)*r20);
IkReal x8992=((-1.0)*px);
CheckValue<IkReal> x8994 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8991),IKFAST_ATAN2_MAGTHRESH);
if(!x8994.valid){
continue;
}
IkReal x8993=((-1.0)*(x8994.value));
sj5=gconst1;
cj5=gconst2;
j5=x8993;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8992);
rxp1_1=(px*r21);
rxp1_2=(r11*x8992);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8993;
IkReal gconst1=r21;
IkReal gconst2=x8991;
IkReal x8995=((1.0)*sj3);
IkReal x8996=(r11*r21);
IkReal x8997=(r10*r20);
j4eval[0]=(x8996+x8997);
j4eval[1]=((((-1.0)*x8995*x8996))+(((-1.0)*x8995*x8997)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8998=((-1.0)*r20);
IkReal x8999=((-1.0)*px);
CheckValue<IkReal> x9001 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8998),IKFAST_ATAN2_MAGTHRESH);
if(!x9001.valid){
continue;
}
IkReal x9000=((-1.0)*(x9001.value));
sj5=gconst1;
cj5=gconst2;
j5=x9000;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8999);
rxp1_1=(px*r21);
rxp1_2=(r11*x8999);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9000;
IkReal gconst1=r21;
IkReal gconst2=x8998;
IkReal x9002=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x9002))+(((-1.0)*r11*r21*x9002)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9003=((1.0)*gconst1);
CheckValue<IkReal> x9004=IKPowWithIntegerCheck(cj3,-1);
if(!x9004.valid){
continue;
}
CheckValue<IkReal> x9005=IKPowWithIntegerCheck(r02,-1);
if(!x9005.valid){
continue;
}
CheckValue<IkReal> x9006=IKPowWithIntegerCheck((((gconst2*r10*sj3))+(((-1.0)*r11*sj3*x9003))),-1);
if(!x9006.valid){
continue;
}
if( IKabs(((x9004.value)*(x9005.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9006.value)*(((((-1.0)*cj3*r10*x9003))+(((-1.0)*cj3*gconst2*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9004.value)*(x9005.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x9006.value)*(((((-1.0)*cj3*r10*x9003))+(((-1.0)*cj3*gconst2*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9004.value)*(x9005.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x9006.value)*(((((-1.0)*cj3*r10*x9003))+(((-1.0)*cj3*gconst2*r11))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9007=IKsin(j4);
IkReal x9008=IKcos(j4);
IkReal x9009=(gconst2*r10);
IkReal x9010=(gconst1*r11);
IkReal x9011=(cj3*gconst1);
IkReal x9012=(sj1*sj2);
IkReal x9013=(gconst2*r20);
IkReal x9014=((1.0)*r21);
IkReal x9015=(gconst2*sj3);
IkReal x9016=((1.0)*cj2);
IkReal x9017=(cj3*gconst2);
IkReal x9018=((1.0)*cj1*sj2);
IkReal x9019=(sj1*x9016);
IkReal x9020=(sj3*x9008);
IkReal x9021=(cj3*x9008);
IkReal x9022=((1.0)*gconst1*sj3);
IkReal x9023=((1.0)*x9007);
IkReal x9024=(r02*x9023);
IkReal x9025=(x9018+x9019);
evalcond[0]=((-1.0)*r02*x9008);
evalcond[1]=(((gconst1*r21*x9007))+(((-1.0)*x9013*x9023)));
evalcond[2]=((1.0)+((x9007*x9010))+(((-1.0)*x9009*x9023)));
evalcond[3]=((((-1.0)*x9012))+(((-1.0)*cj3*x9024))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x9025))+(((-1.0)*sj3*x9024)));
evalcond[5]=((((-1.0)*x9010*x9020))+((x9009*x9020))+((r10*x9011))+((r11*x9017)));
evalcond[6]=((((-1.0)*r11*x9015))+(((-1.0)*x9010*x9021))+((x9009*x9021))+(((-1.0)*r10*x9022)));
evalcond[7]=(((x9013*x9020))+(((-1.0)*gconst1*x9014*x9020))+x9012+(((-1.0)*cj1*x9016))+((r20*x9011))+((r21*x9017)));
evalcond[8]=((((-1.0)*x9008*x9011*x9014))+((x9013*x9021))+(((-1.0)*x9025))+(((-1.0)*x9014*x9015))+(((-1.0)*r20*x9022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9026=(gconst1*r11);
IkReal x9027=(gconst2*r10);
IkReal x9028=((1.0)*cj3);
CheckValue<IkReal> x9029=IKPowWithIntegerCheck((x9026+(((-1.0)*x9027))),-1);
if(!x9029.valid){
continue;
}
CheckValue<IkReal> x9030=IKPowWithIntegerCheck((((sj3*x9027))+(((-1.0)*sj3*x9026))),-1);
if(!x9030.valid){
continue;
}
if( IKabs(((-1.0)*(x9029.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9030.value)*(((((-1.0)*gconst1*r10*x9028))+(((-1.0)*gconst2*r11*x9028)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9029.value)))+IKsqr(((x9030.value)*(((((-1.0)*gconst1*r10*x9028))+(((-1.0)*gconst2*r11*x9028))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9029.value)), ((x9030.value)*(((((-1.0)*gconst1*r10*x9028))+(((-1.0)*gconst2*r11*x9028))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9031=IKsin(j4);
IkReal x9032=IKcos(j4);
IkReal x9033=(gconst2*r10);
IkReal x9034=(gconst1*r11);
IkReal x9035=(cj3*gconst1);
IkReal x9036=(sj1*sj2);
IkReal x9037=(gconst2*r20);
IkReal x9038=((1.0)*r21);
IkReal x9039=(gconst2*sj3);
IkReal x9040=((1.0)*cj2);
IkReal x9041=(cj3*gconst2);
IkReal x9042=((1.0)*cj1*sj2);
IkReal x9043=(sj1*x9040);
IkReal x9044=(sj3*x9032);
IkReal x9045=(cj3*x9032);
IkReal x9046=((1.0)*gconst1*sj3);
IkReal x9047=((1.0)*x9031);
IkReal x9048=(r02*x9047);
IkReal x9049=(x9043+x9042);
evalcond[0]=((-1.0)*r02*x9032);
evalcond[1]=((((-1.0)*x9037*x9047))+((gconst1*r21*x9031)));
evalcond[2]=((1.0)+((x9031*x9034))+(((-1.0)*x9033*x9047)));
evalcond[3]=((((-1.0)*cj3*x9048))+((cj1*cj2))+(((-1.0)*x9036)));
evalcond[4]=((((-1.0)*x9049))+(((-1.0)*sj3*x9048)));
evalcond[5]=(((x9033*x9044))+((r10*x9035))+((r11*x9041))+(((-1.0)*x9034*x9044)));
evalcond[6]=(((x9033*x9045))+(((-1.0)*r11*x9039))+(((-1.0)*r10*x9046))+(((-1.0)*x9034*x9045)));
evalcond[7]=(((x9037*x9044))+x9036+(((-1.0)*gconst1*x9038*x9044))+(((-1.0)*cj1*x9040))+((r21*x9041))+((r20*x9035)));
evalcond[8]=((((-1.0)*x9032*x9035*x9038))+((x9037*x9045))+(((-1.0)*x9049))+(((-1.0)*x9038*x9039))+(((-1.0)*r20*x9046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9050=(gconst1*r11);
IkReal x9051=(gconst2*r10);
CheckValue<IkReal> x9052=IKPowWithIntegerCheck((x9050+(((-1.0)*x9051))),-1);
if(!x9052.valid){
continue;
}
CheckValue<IkReal> x9053=IKPowWithIntegerCheck(((((-1.0)*cj3*x9050))+((cj3*x9051))),-1);
if(!x9053.valid){
continue;
}
if( IKabs(((-1.0)*(x9052.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9053.value)*((((gconst2*r11*sj3))+((gconst1*r10*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9052.value)))+IKsqr(((x9053.value)*((((gconst2*r11*sj3))+((gconst1*r10*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9052.value)), ((x9053.value)*((((gconst2*r11*sj3))+((gconst1*r10*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9054=IKsin(j4);
IkReal x9055=IKcos(j4);
IkReal x9056=(gconst2*r10);
IkReal x9057=(gconst1*r11);
IkReal x9058=(cj3*gconst1);
IkReal x9059=(sj1*sj2);
IkReal x9060=(gconst2*r20);
IkReal x9061=((1.0)*r21);
IkReal x9062=(gconst2*sj3);
IkReal x9063=((1.0)*cj2);
IkReal x9064=(cj3*gconst2);
IkReal x9065=((1.0)*cj1*sj2);
IkReal x9066=(sj1*x9063);
IkReal x9067=(sj3*x9055);
IkReal x9068=(cj3*x9055);
IkReal x9069=((1.0)*gconst1*sj3);
IkReal x9070=((1.0)*x9054);
IkReal x9071=(r02*x9070);
IkReal x9072=(x9065+x9066);
evalcond[0]=((-1.0)*r02*x9055);
evalcond[1]=((((-1.0)*x9060*x9070))+((gconst1*r21*x9054)));
evalcond[2]=((1.0)+(((-1.0)*x9056*x9070))+((x9054*x9057)));
evalcond[3]=(((cj1*cj2))+(((-1.0)*cj3*x9071))+(((-1.0)*x9059)));
evalcond[4]=((((-1.0)*sj3*x9071))+(((-1.0)*x9072)));
evalcond[5]=(((r11*x9064))+((x9056*x9067))+((r10*x9058))+(((-1.0)*x9057*x9067)));
evalcond[6]=(((x9056*x9068))+(((-1.0)*r10*x9069))+(((-1.0)*x9057*x9068))+(((-1.0)*r11*x9062)));
evalcond[7]=(((x9060*x9067))+(((-1.0)*gconst1*x9061*x9067))+((r20*x9058))+x9059+(((-1.0)*cj1*x9063))+((r21*x9064)));
evalcond[8]=(((x9060*x9068))+(((-1.0)*x9055*x9058*x9061))+(((-1.0)*r20*x9069))+(((-1.0)*x9072))+(((-1.0)*x9061*x9062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9073=gconst1*gconst1;
IkReal x9074=gconst2*gconst2;
IkReal x9075=((1.0)*r11);
IkReal x9076=(r00*r10);
IkReal x9077=(r02*sj3);
IkReal x9078=(cj3*r01);
IkReal x9079=(gconst1*gconst2*sj3);
IkReal x9080=((1.0)*gconst1*r10);
CheckValue<IkReal> x9081 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*x9075*x9077))+(((-1.0)*x9077*x9080)))),IkReal(((((-1.0)*r01*r10*sj3*x9073))+(((-1.0)*r01*x9075*x9079))+((r00*r11*sj3*x9074))+((x9076*x9079)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9081.valid){
continue;
}
CheckValue<IkReal> x9082=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*gconst1*gconst2*r00*x9075))+((cj3*r02*r12))+((cj3*x9074*x9076))+(((-1.0)*gconst2*x9078*x9080))+((r11*x9073*x9078)))),-1);
if(!x9082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9081.value)+(((1.5707963267949)*(x9082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9083=IKsin(j4);
IkReal x9084=IKcos(j4);
IkReal x9085=((1.0)*sj3);
IkReal x9086=(gconst1*sj3);
IkReal x9087=(cj3*r00);
IkReal x9088=(cj3*gconst1);
IkReal x9089=(sj1*sj2);
IkReal x9090=((1.0)*cj2);
IkReal x9091=(gconst2*r21);
IkReal x9092=(gconst2*r01);
IkReal x9093=(gconst2*r11);
IkReal x9094=((1.0)*cj1*sj2);
IkReal x9095=(sj1*x9090);
IkReal x9096=((1.0)*x9084);
IkReal x9097=(r12*x9083);
IkReal x9098=(gconst2*x9084);
IkReal x9099=(gconst1*x9083);
IkReal x9100=((1.0)*x9083);
IkReal x9101=(x9094+x9095);
evalcond[0]=(((r21*x9099))+(((-1.0)*r22*x9096))+(((-1.0)*gconst2*r20*x9100)));
evalcond[1]=(((r01*x9099))+(((-1.0)*r02*x9096))+(((-1.0)*gconst2*r00*x9100)));
evalcond[2]=((1.0)+((r11*x9099))+(((-1.0)*gconst2*r10*x9100))+(((-1.0)*r12*x9096)));
evalcond[3]=((((-1.0)*gconst1*r11*x9084*x9085))+((r10*x9088))+((cj3*x9093))+(((-1.0)*x9085*x9097))+((r10*sj3*x9098)));
evalcond[4]=((((-1.0)*r11*x9088*x9096))+((cj3*r10*x9098))+(((-1.0)*x9085*x9093))+(((-1.0)*cj3*x9097))+(((-1.0)*gconst1*r10*x9085)));
evalcond[5]=(((r20*x9088))+((cj3*x9091))+x9089+((r20*sj3*x9098))+(((-1.0)*gconst1*r21*x9084*x9085))+(((-1.0)*r22*x9083*x9085))+(((-1.0)*cj1*x9090)));
evalcond[6]=(((cj3*x9092))+((gconst1*x9087))+((r00*sj3*x9098))+(((-1.0)*gconst1*r01*x9084*x9085))+(((-1.0)*r02*x9083*x9085))+(((-1.0)*x9101)));
evalcond[7]=(((x9087*x9098))+(((-1.0)*r01*x9088*x9096))+(((-1.0)*x9085*x9092))+(((-1.0)*gconst1*r00*x9085))+(((-1.0)*cj3*r02*x9100))+((cj1*cj2))+(((-1.0)*x9089)));
evalcond[8]=((((-1.0)*cj3*r22*x9100))+(((-1.0)*r21*x9088*x9096))+(((-1.0)*x9085*x9091))+((cj3*r20*x9098))+(((-1.0)*gconst1*r20*x9085))+(((-1.0)*x9101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9102=gconst2*gconst2;
IkReal x9103=gconst1*gconst1;
IkReal x9104=(gconst2*r11);
IkReal x9105=(cj3*r02);
IkReal x9106=(gconst1*r01);
IkReal x9107=(cj3*r10);
IkReal x9108=(r10*sj3);
IkReal x9109=((1.0)*gconst1*r00);
IkReal x9110=(r01*x9103);
IkReal x9111=(r00*x9102);
CheckValue<IkReal> x9112 = IKatan2WithCheck(IkReal((((x9104*x9105))+((gconst1*r10*x9105)))),IkReal(((((-1.0)*gconst2*x9107*x9109))+(((-1.0)*cj3*r11*x9111))+((cj3*x9104*x9106))+((x9107*x9110)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9112.valid){
continue;
}
CheckValue<IkReal> x9113=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r11*sj3*x9110))+(((-1.0)*sj3*x9104*x9109))+(((-1.0)*gconst2*x9106*x9108))+((x9108*x9111)))),-1);
if(!x9113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9112.value)+(((1.5707963267949)*(x9113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9114=IKsin(j4);
IkReal x9115=IKcos(j4);
IkReal x9116=((1.0)*sj3);
IkReal x9117=(gconst1*sj3);
IkReal x9118=(cj3*r00);
IkReal x9119=(cj3*gconst1);
IkReal x9120=(sj1*sj2);
IkReal x9121=((1.0)*cj2);
IkReal x9122=(gconst2*r21);
IkReal x9123=(gconst2*r01);
IkReal x9124=(gconst2*r11);
IkReal x9125=((1.0)*cj1*sj2);
IkReal x9126=(sj1*x9121);
IkReal x9127=((1.0)*x9115);
IkReal x9128=(r12*x9114);
IkReal x9129=(gconst2*x9115);
IkReal x9130=(gconst1*x9114);
IkReal x9131=((1.0)*x9114);
IkReal x9132=(x9125+x9126);
evalcond[0]=((((-1.0)*r22*x9127))+((r21*x9130))+(((-1.0)*gconst2*r20*x9131)));
evalcond[1]=((((-1.0)*r02*x9127))+(((-1.0)*gconst2*r00*x9131))+((r01*x9130)));
evalcond[2]=((1.0)+(((-1.0)*r12*x9127))+(((-1.0)*gconst2*r10*x9131))+((r11*x9130)));
evalcond[3]=((((-1.0)*x9116*x9128))+((cj3*x9124))+(((-1.0)*gconst1*r11*x9115*x9116))+((r10*x9119))+((r10*sj3*x9129)));
evalcond[4]=(((cj3*r10*x9129))+(((-1.0)*x9116*x9124))+(((-1.0)*gconst1*r10*x9116))+(((-1.0)*cj3*x9128))+(((-1.0)*r11*x9119*x9127)));
evalcond[5]=(((r20*sj3*x9129))+x9120+((r20*x9119))+((cj3*x9122))+(((-1.0)*r22*x9114*x9116))+(((-1.0)*cj1*x9121))+(((-1.0)*gconst1*r21*x9115*x9116)));
evalcond[6]=(((gconst1*x9118))+(((-1.0)*r02*x9114*x9116))+(((-1.0)*gconst1*r01*x9115*x9116))+((r00*sj3*x9129))+((cj3*x9123))+(((-1.0)*x9132)));
evalcond[7]=((((-1.0)*x9116*x9123))+(((-1.0)*gconst1*r00*x9116))+((x9118*x9129))+(((-1.0)*cj3*r02*x9131))+((cj1*cj2))+(((-1.0)*x9120))+(((-1.0)*r01*x9119*x9127)));
evalcond[8]=((((-1.0)*x9116*x9122))+((cj3*r20*x9129))+(((-1.0)*gconst1*r20*x9116))+(((-1.0)*cj3*r22*x9131))+(((-1.0)*x9132))+(((-1.0)*r21*x9119*x9127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9133=((1.0)*gconst2);
CheckValue<IkReal> x9134 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9133))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9134.valid){
continue;
}
CheckValue<IkReal> x9135=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9133)))),-1);
if(!x9135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9134.value)+(((1.5707963267949)*(x9135.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9136=IKsin(j4);
IkReal x9137=IKcos(j4);
IkReal x9138=((1.0)*sj3);
IkReal x9139=(gconst1*sj3);
IkReal x9140=(cj3*r00);
IkReal x9141=(cj3*gconst1);
IkReal x9142=(sj1*sj2);
IkReal x9143=((1.0)*cj2);
IkReal x9144=(gconst2*r21);
IkReal x9145=(gconst2*r01);
IkReal x9146=(gconst2*r11);
IkReal x9147=((1.0)*cj1*sj2);
IkReal x9148=(sj1*x9143);
IkReal x9149=((1.0)*x9137);
IkReal x9150=(r12*x9136);
IkReal x9151=(gconst2*x9137);
IkReal x9152=(gconst1*x9136);
IkReal x9153=((1.0)*x9136);
IkReal x9154=(x9148+x9147);
evalcond[0]=((((-1.0)*gconst2*r20*x9153))+(((-1.0)*r22*x9149))+((r21*x9152)));
evalcond[1]=((((-1.0)*gconst2*r00*x9153))+(((-1.0)*r02*x9149))+((r01*x9152)));
evalcond[2]=((1.0)+((r11*x9152))+(((-1.0)*gconst2*r10*x9153))+(((-1.0)*r12*x9149)));
evalcond[3]=(((r10*x9141))+((r10*sj3*x9151))+(((-1.0)*gconst1*r11*x9137*x9138))+((cj3*x9146))+(((-1.0)*x9138*x9150)));
evalcond[4]=((((-1.0)*r11*x9141*x9149))+(((-1.0)*gconst1*r10*x9138))+(((-1.0)*x9138*x9146))+(((-1.0)*cj3*x9150))+((cj3*r10*x9151)));
evalcond[5]=((((-1.0)*r22*x9136*x9138))+(((-1.0)*gconst1*r21*x9137*x9138))+((r20*sj3*x9151))+((r20*x9141))+x9142+(((-1.0)*cj1*x9143))+((cj3*x9144)));
evalcond[6]=((((-1.0)*r02*x9136*x9138))+((gconst1*x9140))+((r00*sj3*x9151))+(((-1.0)*gconst1*r01*x9137*x9138))+(((-1.0)*x9154))+((cj3*x9145)));
evalcond[7]=((((-1.0)*x9142))+(((-1.0)*r01*x9141*x9149))+(((-1.0)*cj3*r02*x9153))+((x9140*x9151))+(((-1.0)*x9138*x9145))+((cj1*cj2))+(((-1.0)*gconst1*r00*x9138)));
evalcond[8]=(((cj3*r20*x9151))+(((-1.0)*r21*x9141*x9149))+(((-1.0)*gconst1*r20*x9138))+(((-1.0)*cj3*r22*x9153))+(((-1.0)*x9154))+(((-1.0)*x9138*x9144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9155=((-1.0)*r20);
IkReal x9156=x8189;
CheckValue<IkReal> x9158 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9155),IKFAST_ATAN2_MAGTHRESH);
if(!x9158.valid){
continue;
}
IkReal x9157=((-1.0)*(x9158.value));
sj5=gconst1;
cj5=gconst2;
j5=x9157;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9157;
IkReal gconst1=(r21*x9156);
IkReal gconst2=(x9155*x9156);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9159=((-1.0)*r20);
IkReal x9160=x8189;
CheckValue<IkReal> x9162 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9159),IKFAST_ATAN2_MAGTHRESH);
if(!x9162.valid){
continue;
}
IkReal x9161=((-1.0)*(x9162.value));
sj5=gconst1;
cj5=gconst2;
j5=x9161;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9161;
IkReal gconst1=(r21*x9160);
IkReal gconst2=(x9159*x9160);
CheckValue<IkReal> x9170=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9170.valid){
continue;
}
IkReal x9163=x9170.value;
IkReal x9164=(sj3*x9163);
IkReal x9165=(r11*x9164);
IkReal x9166=(r00*x9164);
IkReal x9167=(r01*x9164);
IkReal x9168=(r10*x9164);
IkReal x9169=(r20*r21*x9164);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9167))+((r10*x9166*(r20*r20)))+((r01*x9165*(r21*r21)))+((r00*r20*r21*x9165))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9171=((-1.0)*r20);
IkReal x9172=x8189;
CheckValue<IkReal> x9174 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9171),IKFAST_ATAN2_MAGTHRESH);
if(!x9174.valid){
continue;
}
IkReal x9173=((-1.0)*(x9174.value));
sj5=gconst1;
cj5=gconst2;
j5=x9173;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9173;
IkReal gconst1=(r21*x9172);
IkReal gconst2=(x9171*x9172);
CheckValue<IkReal> x9182=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9182.valid){
continue;
}
IkReal x9175=x9182.value;
IkReal x9176=(cj3*x9175);
IkReal x9177=(r11*x9176);
IkReal x9178=(r01*x9176);
IkReal x9179=(r00*x9176);
IkReal x9180=(r10*x9176);
IkReal x9181=(r20*r21*x9176);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*r20*r21*x9178))+((r10*x9179*(r20*r20)))+((r01*x9177*(r21*r21)))+((r00*r20*r21*x9177))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9183=((-1.0)*r20);
IkReal x9184=x8189;
CheckValue<IkReal> x9186 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9183),IKFAST_ATAN2_MAGTHRESH);
if(!x9186.valid){
continue;
}
IkReal x9185=((-1.0)*(x9186.value));
sj5=gconst1;
cj5=gconst2;
j5=x9185;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9185;
IkReal gconst1=(r21*x9184);
IkReal gconst2=(x9183*x9184);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9187=((-1.0)*r20);
IkReal x9188=x8189;
CheckValue<IkReal> x9190 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9187),IKFAST_ATAN2_MAGTHRESH);
if(!x9190.valid){
continue;
}
IkReal x9189=((-1.0)*(x9190.value));
sj5=gconst1;
cj5=gconst2;
j5=x9189;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9189;
IkReal gconst1=(r21*x9188);
IkReal gconst2=(x9187*x9188);
IkReal x9191=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9195=IKPowWithIntegerCheck(x9191,-1);
if(!x9195.valid){
continue;
}
IkReal x9192=x9195.value;
IkReal x9193=((1.0)*x9192);
IkReal x9194=((((-2.0)*r10*r11*r20*r21*x9192))+(((-1.0)*x9193*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9193*(r10*r10)*(r20*r20))));
j4eval[0]=x9194;
j4eval[1]=r12;
j4eval[2]=x9191;
j4eval[3]=IKsign(x9194);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9196=((-1.0)*r20);
IkReal x9197=x8189;
CheckValue<IkReal> x9199 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9196),IKFAST_ATAN2_MAGTHRESH);
if(!x9199.valid){
continue;
}
IkReal x9198=((-1.0)*(x9199.value));
sj5=gconst1;
cj5=gconst2;
j5=x9198;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9198;
IkReal gconst1=(r21*x9197);
IkReal gconst2=(x9196*x9197);
IkReal x9200=r22*r22;
IkReal x9201=(cj1*r02*sj2);
IkReal x9202=(cj2*r02*sj1);
CheckValue<IkReal> x9206=IKPowWithIntegerCheck(((-1.0)+x9200),-1);
if(!x9206.valid){
continue;
}
IkReal x9203=x9206.value;
if((((1.0)+(((-1.0)*x9200)))) < -0.00001)
continue;
IkReal x9204=IKsqrt(((1.0)+(((-1.0)*x9200))));
IkReal x9205=(r22*x9203*x9204);
j4eval[0]=((IKabs((((x9202*x9205))+((x9201*x9205)))))+(IKabs((x9201+x9202))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9207=(cj1*sj2);
IkReal x9208=(gconst2*r00);
IkReal x9209=(gconst1*r01);
IkReal x9210=(cj2*sj1);
CheckValue<IkReal> x9211 = IKatan2WithCheck(IkReal((((r02*x9207))+((r02*x9210)))),IkReal((((x9209*x9210))+(((-1.0)*x9207*x9208))+(((-1.0)*x9208*x9210))+((x9207*x9209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9211.valid){
continue;
}
CheckValue<IkReal> x9212=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9208*x9209))+(x9208*x9208)+(r02*r02)+(x9209*x9209))),-1);
if(!x9212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9211.value)+(((1.5707963267949)*(x9212.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9213=IKsin(j4);
IkReal x9214=IKcos(j4);
IkReal x9215=((1.0)*x9214);
IkReal x9216=(gconst2*x9214);
IkReal x9217=(gconst1*x9213);
IkReal x9218=((1.0)*x9213);
evalcond[0]=((((-1.0)*gconst2*r20*x9218))+((r21*x9217))+(((-1.0)*r22*x9215)));
evalcond[1]=((((-1.0)*r02*x9215))+(((-1.0)*gconst2*r00*x9218))+((r01*x9217)));
evalcond[2]=(((r10*x9216))+(((-1.0)*r12*x9218))+(((-1.0)*gconst1*r11*x9215)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9218))+((r11*x9217))+(((-1.0)*r12*x9215)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x9218))+((r00*x9216))+((cj1*sj2))+(((-1.0)*gconst1*r01*x9215)));
evalcond[5]=(((r20*x9216))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r21*x9215))+(((-1.0)*r22*x9218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9219=(gconst1*r11);
IkReal x9220=(gconst2*r10);
CheckValue<IkReal> x9221 = IKatan2WithCheck(IkReal((x9220+(((-1.0)*x9219)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9221.valid){
continue;
}
CheckValue<IkReal> x9222=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9219*x9219)))+(((2.0)*x9219*x9220))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9220*x9220))))),-1);
if(!x9222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9221.value)+(((1.5707963267949)*(x9222.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9223=IKsin(j4);
IkReal x9224=IKcos(j4);
IkReal x9225=((1.0)*x9224);
IkReal x9226=(gconst2*x9224);
IkReal x9227=(gconst1*x9223);
IkReal x9228=((1.0)*x9223);
evalcond[0]=((((-1.0)*gconst2*r20*x9228))+((r21*x9227))+(((-1.0)*r22*x9225)));
evalcond[1]=(((r01*x9227))+(((-1.0)*gconst2*r00*x9228))+(((-1.0)*r02*x9225)));
evalcond[2]=((((-1.0)*r12*x9228))+(((-1.0)*gconst1*r11*x9225))+((r10*x9226)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9228))+((r11*x9227))+(((-1.0)*r12*x9225)));
evalcond[4]=(((r00*x9226))+((cj2*sj1))+(((-1.0)*r02*x9228))+((cj1*sj2))+(((-1.0)*gconst1*r01*x9225)));
evalcond[5]=(((r20*x9226))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r21*x9225))+(((-1.0)*r22*x9228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9229 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9229.valid){
continue;
}
CheckValue<IkReal> x9230=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9229.value)+(((1.5707963267949)*(x9230.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9231=IKsin(j4);
IkReal x9232=IKcos(j4);
IkReal x9233=((1.0)*x9232);
IkReal x9234=(gconst2*x9232);
IkReal x9235=(gconst1*x9231);
IkReal x9236=((1.0)*x9231);
evalcond[0]=(((r21*x9235))+(((-1.0)*gconst2*r20*x9236))+(((-1.0)*r22*x9233)));
evalcond[1]=((((-1.0)*gconst2*r00*x9236))+((r01*x9235))+(((-1.0)*r02*x9233)));
evalcond[2]=((((-1.0)*r12*x9236))+((r10*x9234))+(((-1.0)*gconst1*r11*x9233)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9233))+(((-1.0)*gconst2*r10*x9236))+((r11*x9235)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r01*x9233))+((r00*x9234))+(((-1.0)*r02*x9236)));
evalcond[5]=((((-1.0)*gconst1*r21*x9233))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x9234))+(((-1.0)*r22*x9236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9237=((-1.0)*r20);
IkReal x9238=x8189;
CheckValue<IkReal> x9240 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9237),IKFAST_ATAN2_MAGTHRESH);
if(!x9240.valid){
continue;
}
IkReal x9239=((-1.0)*(x9240.value));
sj5=gconst1;
cj5=gconst2;
j5=x9239;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9239;
IkReal gconst1=(r21*x9238);
IkReal gconst2=(x9237*x9238);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9241=((-1.0)*r20);
IkReal x9242=x8189;
CheckValue<IkReal> x9244 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9241),IKFAST_ATAN2_MAGTHRESH);
if(!x9244.valid){
continue;
}
IkReal x9243=((-1.0)*(x9244.value));
sj5=gconst1;
cj5=gconst2;
j5=x9243;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9243;
IkReal gconst1=(r21*x9242);
IkReal gconst2=(x9241*x9242);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9245=((-1.0)*r20);
IkReal x9246=x8189;
CheckValue<IkReal> x9248 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9245),IKFAST_ATAN2_MAGTHRESH);
if(!x9248.valid){
continue;
}
IkReal x9247=((-1.0)*(x9248.value));
sj5=gconst1;
cj5=gconst2;
j5=x9247;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9247;
IkReal gconst1=(r21*x9246);
IkReal gconst2=(x9245*x9246);
IkReal x9249=r22*r22;
IkReal x9250=(cj1*cj2*r12);
IkReal x9251=(r12*sj1*sj2);
CheckValue<IkReal> x9255=IKPowWithIntegerCheck(((-1.0)+x9249),-1);
if(!x9255.valid){
continue;
}
IkReal x9252=x9255.value;
if((((1.0)+(((-1.0)*x9249)))) < -0.00001)
continue;
IkReal x9253=IKsqrt(((1.0)+(((-1.0)*x9249))));
IkReal x9254=(r22*x9252*x9253);
j4eval[0]=((IKabs((x9250+(((-1.0)*x9251)))))+(IKabs((((x9251*x9254))+(((-1.0)*x9250*x9254))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9256=(sj1*sj2);
IkReal x9257=(gconst1*r11);
IkReal x9258=(cj1*cj2);
IkReal x9259=(gconst2*r10);
CheckValue<IkReal> x9260=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9260.valid){
continue;
}
CheckValue<IkReal> x9261 = IKatan2WithCheck(IkReal((((x9258*x9259))+(((-1.0)*x9257*x9258))+(((-1.0)*x9256*x9259))+((x9256*x9257)))),IkReal(((((-1.0)*r12*x9256))+((r12*x9258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9260.value)))+(x9261.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9262=IKcos(j4);
IkReal x9263=IKsin(j4);
IkReal x9264=((1.0)*x9262);
IkReal x9265=(gconst1*x9262);
IkReal x9266=(gconst1*x9263);
IkReal x9267=((1.0)*gconst2*x9263);
evalcond[0]=(((r12*x9263))+(((-1.0)*gconst2*r10*x9264))+((r11*x9265)));
evalcond[1]=((((-1.0)*r20*x9267))+(((-1.0)*r22*x9264))+((r21*x9266)));
evalcond[2]=((((-1.0)*r00*x9267))+((r01*x9266))+(((-1.0)*r02*x9264)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9267))+(((-1.0)*r12*x9264))+((r11*x9266)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r00*x9264))+((cj1*sj2))+((r01*x9265))+((r02*x9263)));
evalcond[5]=(((r22*x9263))+(((-1.0)*gconst2*r20*x9264))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x9265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9268=(gconst1*r11);
IkReal x9269=(gconst2*r10);
CheckValue<IkReal> x9270=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9268*x9268)+(((-2.0)*x9268*x9269))+(x9269*x9269))),-1);
if(!x9270.valid){
continue;
}
CheckValue<IkReal> x9271 = IKatan2WithCheck(IkReal((x9268+(((-1.0)*x9269)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9270.value)))+(x9271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9272=IKcos(j4);
IkReal x9273=IKsin(j4);
IkReal x9274=((1.0)*x9272);
IkReal x9275=(gconst1*x9272);
IkReal x9276=(gconst1*x9273);
IkReal x9277=((1.0)*gconst2*x9273);
evalcond[0]=(((r12*x9273))+((r11*x9275))+(((-1.0)*gconst2*r10*x9274)));
evalcond[1]=((((-1.0)*r20*x9277))+(((-1.0)*r22*x9274))+((r21*x9276)));
evalcond[2]=(((r01*x9276))+(((-1.0)*r02*x9274))+(((-1.0)*r00*x9277)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9277))+((r11*x9276))+(((-1.0)*r12*x9274)));
evalcond[4]=(((r02*x9273))+(((-1.0)*gconst2*r00*x9274))+((cj2*sj1))+((cj1*sj2))+((r01*x9275)));
evalcond[5]=((((-1.0)*gconst2*r20*x9274))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x9275))+((r22*x9273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9278 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9278.valid){
continue;
}
CheckValue<IkReal> x9279=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9278.value)+(((1.5707963267949)*(x9279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9280=IKcos(j4);
IkReal x9281=IKsin(j4);
IkReal x9282=((1.0)*x9280);
IkReal x9283=(gconst1*x9280);
IkReal x9284=(gconst1*x9281);
IkReal x9285=((1.0)*gconst2*x9281);
evalcond[0]=(((r11*x9283))+(((-1.0)*gconst2*r10*x9282))+((r12*x9281)));
evalcond[1]=((((-1.0)*r22*x9282))+((r21*x9284))+(((-1.0)*r20*x9285)));
evalcond[2]=(((r01*x9284))+(((-1.0)*r02*x9282))+(((-1.0)*r00*x9285)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9282))+((r11*x9284))+(((-1.0)*r10*x9285)));
evalcond[4]=(((cj2*sj1))+((r02*x9281))+(((-1.0)*gconst2*r00*x9282))+((cj1*sj2))+((r01*x9283)));
evalcond[5]=(((r22*x9281))+(((-1.0)*gconst2*r20*x9282))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x9283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9286=((-1.0)*r20);
IkReal x9287=((-1.0)*px);
CheckValue<IkReal> x9289 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9286),IKFAST_ATAN2_MAGTHRESH);
if(!x9289.valid){
continue;
}
IkReal x9288=((-1.0)*(x9289.value));
sj5=gconst1;
cj5=gconst2;
j5=x9288;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9287);
rxp1_1=(px*r21);
rxp1_2=(r11*x9287);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9288;
IkReal gconst1=r21;
IkReal gconst2=x9286;
IkReal x9290=(r10*r20);
IkReal x9291=((1.0)*cj3);
IkReal x9292=(r11*r21);
j4eval[0]=(x9292+x9290);
j4eval[1]=((((-1.0)*x9291*x9292))+(((-1.0)*x9290*x9291)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9293=((-1.0)*r20);
IkReal x9294=((-1.0)*px);
CheckValue<IkReal> x9296 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9293),IKFAST_ATAN2_MAGTHRESH);
if(!x9296.valid){
continue;
}
IkReal x9295=((-1.0)*(x9296.value));
sj5=gconst1;
cj5=gconst2;
j5=x9295;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9294);
rxp1_1=(px*r21);
rxp1_2=(r11*x9294);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9295;
IkReal gconst1=r21;
IkReal gconst2=x9293;
IkReal x9297=((1.0)*sj3);
IkReal x9298=(r11*r21);
IkReal x9299=(r10*r20);
j4eval[0]=(x9298+x9299);
j4eval[1]=((((-1.0)*x9297*x9299))+(((-1.0)*x9297*x9298)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9300=((-1.0)*r20);
IkReal x9301=((-1.0)*px);
CheckValue<IkReal> x9303 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9300),IKFAST_ATAN2_MAGTHRESH);
if(!x9303.valid){
continue;
}
IkReal x9302=((-1.0)*(x9303.value));
sj5=gconst1;
cj5=gconst2;
j5=x9302;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9301);
rxp1_1=(px*r21);
rxp1_2=(r11*x9301);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9302;
IkReal gconst1=r21;
IkReal gconst2=x9300;
IkReal x9304=((1.0)*sj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r11*r21*x9304))+(((-1.0)*r10*r20*x9304)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9305=((1.0)*gconst1);
CheckValue<IkReal> x9306=IKPowWithIntegerCheck(r02,-1);
if(!x9306.valid){
continue;
}
CheckValue<IkReal> x9307=IKPowWithIntegerCheck(sj3,-1);
if(!x9307.valid){
continue;
}
CheckValue<IkReal> x9308=IKPowWithIntegerCheck((((gconst2*r10*sj3))+(((-1.0)*r11*sj3*x9305))),-1);
if(!x9308.valid){
continue;
}
if( IKabs(((x9306.value)*(x9307.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9308.value)*(((((-1.0)*cj3*r10*x9305))+(((-1.0)*cj3*gconst2*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9306.value)*(x9307.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x9308.value)*(((((-1.0)*cj3*r10*x9305))+(((-1.0)*cj3*gconst2*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9306.value)*(x9307.value)*((((cj2*sj1))+((cj1*sj2))))), ((x9308.value)*(((((-1.0)*cj3*r10*x9305))+(((-1.0)*cj3*gconst2*r11))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9309=IKsin(j4);
IkReal x9310=IKcos(j4);
IkReal x9311=(sj1*sj2);
IkReal x9312=(gconst2*r10);
IkReal x9313=(gconst1*r11);
IkReal x9314=(cj3*gconst1);
IkReal x9315=(gconst2*r20);
IkReal x9316=((1.0)*cj2);
IkReal x9317=((1.0)*r21);
IkReal x9318=(gconst2*sj3);
IkReal x9319=(cj1*sj2);
IkReal x9320=(cj3*gconst2);
IkReal x9321=(cj1*x9316);
IkReal x9322=(sj3*x9310);
IkReal x9323=(cj3*x9310);
IkReal x9324=((1.0)*gconst1*sj3);
IkReal x9325=((1.0)*x9309);
IkReal x9326=(r02*x9325);
evalcond[0]=((-1.0)*r02*x9310);
evalcond[1]=(((gconst1*r21*x9309))+(((-1.0)*x9315*x9325)));
evalcond[2]=(((cj2*sj1))+x9319+(((-1.0)*sj3*x9326)));
evalcond[3]=((-1.0)+(((-1.0)*x9312*x9325))+((x9309*x9313)));
evalcond[4]=((((-1.0)*x9321))+x9311+(((-1.0)*cj3*x9326)));
evalcond[5]=(((r11*x9320))+(((-1.0)*x9313*x9322))+((r10*x9314))+((x9312*x9322)));
evalcond[6]=((((-1.0)*r11*x9318))+(((-1.0)*r10*x9324))+(((-1.0)*x9313*x9323))+((x9312*x9323)));
evalcond[7]=((((-1.0)*x9321))+x9311+(((-1.0)*gconst1*x9317*x9322))+((x9315*x9322))+((r20*x9314))+((r21*x9320)));
evalcond[8]=((((-1.0)*x9310*x9314*x9317))+(((-1.0)*sj1*x9316))+(((-1.0)*r20*x9324))+((x9315*x9323))+(((-1.0)*x9319))+(((-1.0)*x9317*x9318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9327=(gconst1*r11);
IkReal x9328=(gconst2*r10);
IkReal x9329=((1.0)*cj3);
CheckValue<IkReal> x9330=IKPowWithIntegerCheck(((((-1.0)*x9328))+x9327),-1);
if(!x9330.valid){
continue;
}
CheckValue<IkReal> x9331=IKPowWithIntegerCheck((((sj3*x9328))+(((-1.0)*sj3*x9327))),-1);
if(!x9331.valid){
continue;
}
if( IKabs(x9330.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9331.value)*(((((-1.0)*gconst1*r10*x9329))+(((-1.0)*gconst2*r11*x9329)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9330.value)+IKsqr(((x9331.value)*(((((-1.0)*gconst1*r10*x9329))+(((-1.0)*gconst2*r11*x9329))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9330.value, ((x9331.value)*(((((-1.0)*gconst1*r10*x9329))+(((-1.0)*gconst2*r11*x9329))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9332=IKsin(j4);
IkReal x9333=IKcos(j4);
IkReal x9334=(sj1*sj2);
IkReal x9335=(gconst2*r10);
IkReal x9336=(gconst1*r11);
IkReal x9337=(cj3*gconst1);
IkReal x9338=(gconst2*r20);
IkReal x9339=((1.0)*cj2);
IkReal x9340=((1.0)*r21);
IkReal x9341=(gconst2*sj3);
IkReal x9342=(cj1*sj2);
IkReal x9343=(cj3*gconst2);
IkReal x9344=(cj1*x9339);
IkReal x9345=(sj3*x9333);
IkReal x9346=(cj3*x9333);
IkReal x9347=((1.0)*gconst1*sj3);
IkReal x9348=((1.0)*x9332);
IkReal x9349=(r02*x9348);
evalcond[0]=((-1.0)*r02*x9333);
evalcond[1]=((((-1.0)*x9338*x9348))+((gconst1*r21*x9332)));
evalcond[2]=(((cj2*sj1))+x9342+(((-1.0)*sj3*x9349)));
evalcond[3]=((-1.0)+((x9332*x9336))+(((-1.0)*x9335*x9348)));
evalcond[4]=(x9334+(((-1.0)*x9344))+(((-1.0)*cj3*x9349)));
evalcond[5]=(((r11*x9343))+((r10*x9337))+((x9335*x9345))+(((-1.0)*x9336*x9345)));
evalcond[6]=((((-1.0)*r10*x9347))+(((-1.0)*r11*x9341))+((x9335*x9346))+(((-1.0)*x9336*x9346)));
evalcond[7]=(((r20*x9337))+x9334+(((-1.0)*gconst1*x9340*x9345))+(((-1.0)*x9344))+((r21*x9343))+((x9338*x9345)));
evalcond[8]=((((-1.0)*sj1*x9339))+(((-1.0)*x9340*x9341))+(((-1.0)*x9342))+(((-1.0)*x9333*x9337*x9340))+(((-1.0)*r20*x9347))+((x9338*x9346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9350=(gconst1*r11);
IkReal x9351=(gconst2*r10);
CheckValue<IkReal> x9352=IKPowWithIntegerCheck((x9350+(((-1.0)*x9351))),-1);
if(!x9352.valid){
continue;
}
CheckValue<IkReal> x9353=IKPowWithIntegerCheck((((cj3*x9351))+(((-1.0)*cj3*x9350))),-1);
if(!x9353.valid){
continue;
}
if( IKabs(x9352.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9353.value)*((((gconst2*r11*sj3))+((gconst1*r10*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9352.value)+IKsqr(((x9353.value)*((((gconst2*r11*sj3))+((gconst1*r10*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9352.value, ((x9353.value)*((((gconst2*r11*sj3))+((gconst1*r10*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9354=IKsin(j4);
IkReal x9355=IKcos(j4);
IkReal x9356=(sj1*sj2);
IkReal x9357=(gconst2*r10);
IkReal x9358=(gconst1*r11);
IkReal x9359=(cj3*gconst1);
IkReal x9360=(gconst2*r20);
IkReal x9361=((1.0)*cj2);
IkReal x9362=((1.0)*r21);
IkReal x9363=(gconst2*sj3);
IkReal x9364=(cj1*sj2);
IkReal x9365=(cj3*gconst2);
IkReal x9366=(cj1*x9361);
IkReal x9367=(sj3*x9355);
IkReal x9368=(cj3*x9355);
IkReal x9369=((1.0)*gconst1*sj3);
IkReal x9370=((1.0)*x9354);
IkReal x9371=(r02*x9370);
evalcond[0]=((-1.0)*r02*x9355);
evalcond[1]=((((-1.0)*x9360*x9370))+((gconst1*r21*x9354)));
evalcond[2]=(((cj2*sj1))+x9364+(((-1.0)*sj3*x9371)));
evalcond[3]=((-1.0)+((x9354*x9358))+(((-1.0)*x9357*x9370)));
evalcond[4]=(x9356+(((-1.0)*x9366))+(((-1.0)*cj3*x9371)));
evalcond[5]=(((x9357*x9367))+(((-1.0)*x9358*x9367))+((r11*x9365))+((r10*x9359)));
evalcond[6]=(((x9357*x9368))+(((-1.0)*x9358*x9368))+(((-1.0)*r10*x9369))+(((-1.0)*r11*x9363)));
evalcond[7]=(((r21*x9365))+(((-1.0)*gconst1*x9362*x9367))+x9356+(((-1.0)*x9366))+((r20*x9359))+((x9360*x9367)));
evalcond[8]=((((-1.0)*x9362*x9363))+(((-1.0)*x9355*x9359*x9362))+(((-1.0)*r20*x9369))+(((-1.0)*sj1*x9361))+(((-1.0)*x9364))+((x9360*x9368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9372=gconst1*gconst1;
IkReal x9373=gconst2*gconst2;
IkReal x9374=((1.0)*r11);
IkReal x9375=(r00*r10);
IkReal x9376=(r02*sj3);
IkReal x9377=(cj3*r01);
IkReal x9378=(gconst1*gconst2*sj3);
IkReal x9379=((1.0)*gconst1*r10);
CheckValue<IkReal> x9380 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*x9374*x9376))+(((-1.0)*x9376*x9379)))),IkReal((((r00*r11*sj3*x9373))+(((-1.0)*r01*x9374*x9378))+((x9375*x9378))+(((-1.0)*r01*r10*sj3*x9372)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9380.valid){
continue;
}
CheckValue<IkReal> x9381=IKPowWithIntegerCheck(IKsign((((r11*x9372*x9377))+((cj3*r02*r12))+((cj3*x9373*x9375))+(((-1.0)*cj3*gconst1*gconst2*r00*x9374))+(((-1.0)*gconst2*x9377*x9379)))),-1);
if(!x9381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9380.value)+(((1.5707963267949)*(x9381.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9382=IKsin(j4);
IkReal x9383=IKcos(j4);
IkReal x9384=(sj1*sj2);
IkReal x9385=((1.0)*sj3);
IkReal x9386=(gconst1*sj3);
IkReal x9387=(cj3*r00);
IkReal x9388=(cj3*gconst1);
IkReal x9389=((1.0)*cj2);
IkReal x9390=(gconst2*r21);
IkReal x9391=(cj1*sj2);
IkReal x9392=(gconst2*r01);
IkReal x9393=(gconst2*r11);
IkReal x9394=(cj1*x9389);
IkReal x9395=((1.0)*x9383);
IkReal x9396=(r12*x9382);
IkReal x9397=(gconst2*x9383);
IkReal x9398=(gconst1*x9382);
IkReal x9399=((1.0)*x9382);
evalcond[0]=((((-1.0)*gconst2*r20*x9399))+(((-1.0)*r22*x9395))+((r21*x9398)));
evalcond[1]=(((r01*x9398))+(((-1.0)*gconst2*r00*x9399))+(((-1.0)*r02*x9395)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x9395))+((r11*x9398))+(((-1.0)*gconst2*r10*x9399)));
evalcond[3]=(((r10*x9388))+(((-1.0)*x9385*x9396))+((r10*sj3*x9397))+(((-1.0)*gconst1*r11*x9383*x9385))+((cj3*x9393)));
evalcond[4]=((((-1.0)*cj3*x9396))+(((-1.0)*x9385*x9393))+(((-1.0)*gconst1*r10*x9385))+((cj3*r10*x9397))+(((-1.0)*r11*x9388*x9395)));
evalcond[5]=(((cj2*sj1))+((r00*sj3*x9397))+(((-1.0)*r02*x9382*x9385))+x9391+(((-1.0)*gconst1*r01*x9383*x9385))+((gconst1*x9387))+((cj3*x9392)));
evalcond[6]=(x9384+(((-1.0)*r22*x9382*x9385))+((r20*sj3*x9397))+(((-1.0)*gconst1*r21*x9383*x9385))+(((-1.0)*x9394))+((r20*x9388))+((cj3*x9390)));
evalcond[7]=(x9384+(((-1.0)*x9385*x9392))+(((-1.0)*cj3*r02*x9399))+(((-1.0)*r01*x9388*x9395))+((x9387*x9397))+(((-1.0)*x9394))+(((-1.0)*gconst1*r00*x9385)));
evalcond[8]=((((-1.0)*x9385*x9390))+(((-1.0)*sj1*x9389))+(((-1.0)*gconst1*r20*x9385))+((cj3*r20*x9397))+(((-1.0)*x9391))+(((-1.0)*r21*x9388*x9395))+(((-1.0)*cj3*r22*x9399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9400=gconst2*gconst2;
IkReal x9401=gconst1*gconst1;
IkReal x9402=(gconst2*r11);
IkReal x9403=(cj3*r02);
IkReal x9404=(gconst1*r01);
IkReal x9405=(cj3*r10);
IkReal x9406=(r10*sj3);
IkReal x9407=((1.0)*gconst1*r00);
IkReal x9408=(r01*x9401);
IkReal x9409=(r00*x9400);
CheckValue<IkReal> x9410=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r11*sj3*x9408))+(((-1.0)*gconst2*x9404*x9406))+((x9406*x9409))+(((-1.0)*sj3*x9402*x9407)))),-1);
if(!x9410.valid){
continue;
}
CheckValue<IkReal> x9411 = IKatan2WithCheck(IkReal((((gconst1*r10*x9403))+((x9402*x9403)))),IkReal((((x9405*x9408))+((cj3*x9402*x9404))+(((-1.0)*cj3*r11*x9409))+(((-1.0)*gconst2*x9405*x9407)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9410.value)))+(x9411.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9412=IKsin(j4);
IkReal x9413=IKcos(j4);
IkReal x9414=(sj1*sj2);
IkReal x9415=((1.0)*sj3);
IkReal x9416=(gconst1*sj3);
IkReal x9417=(cj3*r00);
IkReal x9418=(cj3*gconst1);
IkReal x9419=((1.0)*cj2);
IkReal x9420=(gconst2*r21);
IkReal x9421=(cj1*sj2);
IkReal x9422=(gconst2*r01);
IkReal x9423=(gconst2*r11);
IkReal x9424=(cj1*x9419);
IkReal x9425=((1.0)*x9413);
IkReal x9426=(r12*x9412);
IkReal x9427=(gconst2*x9413);
IkReal x9428=(gconst1*x9412);
IkReal x9429=((1.0)*x9412);
evalcond[0]=(((r21*x9428))+(((-1.0)*gconst2*r20*x9429))+(((-1.0)*r22*x9425)));
evalcond[1]=(((r01*x9428))+(((-1.0)*r02*x9425))+(((-1.0)*gconst2*r00*x9429)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9429))+(((-1.0)*r12*x9425))+((r11*x9428)));
evalcond[3]=(((r10*sj3*x9427))+((r10*x9418))+((cj3*x9423))+(((-1.0)*gconst1*r11*x9413*x9415))+(((-1.0)*x9415*x9426)));
evalcond[4]=(((cj3*r10*x9427))+(((-1.0)*cj3*x9426))+(((-1.0)*r11*x9418*x9425))+(((-1.0)*x9415*x9423))+(((-1.0)*gconst1*r10*x9415)));
evalcond[5]=(((cj2*sj1))+((r00*sj3*x9427))+(((-1.0)*gconst1*r01*x9413*x9415))+((gconst1*x9417))+((cj3*x9422))+(((-1.0)*r02*x9412*x9415))+x9421);
evalcond[6]=(((r20*x9418))+((cj3*x9420))+(((-1.0)*gconst1*r21*x9413*x9415))+(((-1.0)*r22*x9412*x9415))+x9414+(((-1.0)*x9424))+((r20*sj3*x9427)));
evalcond[7]=((((-1.0)*cj3*r02*x9429))+(((-1.0)*r01*x9418*x9425))+((x9417*x9427))+(((-1.0)*gconst1*r00*x9415))+x9414+(((-1.0)*x9415*x9422))+(((-1.0)*x9424)));
evalcond[8]=(((cj3*r20*x9427))+(((-1.0)*r21*x9418*x9425))+(((-1.0)*x9421))+(((-1.0)*sj1*x9419))+(((-1.0)*x9415*x9420))+(((-1.0)*cj3*r22*x9429))+(((-1.0)*gconst1*r20*x9415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9430 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9430.valid){
continue;
}
CheckValue<IkReal> x9431=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9430.value)+(((1.5707963267949)*(x9431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9432=IKsin(j4);
IkReal x9433=IKcos(j4);
IkReal x9434=(sj1*sj2);
IkReal x9435=((1.0)*sj3);
IkReal x9436=(gconst1*sj3);
IkReal x9437=(cj3*r00);
IkReal x9438=(cj3*gconst1);
IkReal x9439=((1.0)*cj2);
IkReal x9440=(gconst2*r21);
IkReal x9441=(cj1*sj2);
IkReal x9442=(gconst2*r01);
IkReal x9443=(gconst2*r11);
IkReal x9444=(cj1*x9439);
IkReal x9445=((1.0)*x9433);
IkReal x9446=(r12*x9432);
IkReal x9447=(gconst2*x9433);
IkReal x9448=(gconst1*x9432);
IkReal x9449=((1.0)*x9432);
evalcond[0]=(((r21*x9448))+(((-1.0)*gconst2*r20*x9449))+(((-1.0)*r22*x9445)));
evalcond[1]=(((r01*x9448))+(((-1.0)*gconst2*r00*x9449))+(((-1.0)*r02*x9445)));
evalcond[2]=((-1.0)+((r11*x9448))+(((-1.0)*gconst2*r10*x9449))+(((-1.0)*r12*x9445)));
evalcond[3]=(((cj3*x9443))+(((-1.0)*x9435*x9446))+((r10*x9438))+(((-1.0)*gconst1*r11*x9433*x9435))+((r10*sj3*x9447)));
evalcond[4]=((((-1.0)*cj3*x9446))+(((-1.0)*x9435*x9443))+((cj3*r10*x9447))+(((-1.0)*r11*x9438*x9445))+(((-1.0)*gconst1*r10*x9435)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r02*x9432*x9435))+((cj3*x9442))+x9441+((gconst1*x9437))+(((-1.0)*gconst1*r01*x9433*x9435))+((r00*sj3*x9447)));
evalcond[6]=(((cj3*x9440))+(((-1.0)*x9444))+((r20*x9438))+x9434+((r20*sj3*x9447))+(((-1.0)*r22*x9432*x9435))+(((-1.0)*gconst1*r21*x9433*x9435)));
evalcond[7]=(((x9437*x9447))+(((-1.0)*x9435*x9442))+(((-1.0)*r01*x9438*x9445))+(((-1.0)*x9444))+(((-1.0)*cj3*r02*x9449))+x9434+(((-1.0)*gconst1*r00*x9435)));
evalcond[8]=(((cj3*r20*x9447))+(((-1.0)*r21*x9438*x9445))+(((-1.0)*sj1*x9439))+(((-1.0)*x9435*x9440))+(((-1.0)*x9441))+(((-1.0)*gconst1*r20*x9435))+(((-1.0)*cj3*r22*x9449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9450=((-1.0)*r20);
IkReal x9451=x8189;
CheckValue<IkReal> x9453 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9450),IKFAST_ATAN2_MAGTHRESH);
if(!x9453.valid){
continue;
}
IkReal x9452=((-1.0)*(x9453.value));
sj5=gconst1;
cj5=gconst2;
j5=x9452;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9452;
IkReal gconst1=(r21*x9451);
IkReal gconst2=(x9450*x9451);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9454=((-1.0)*r20);
IkReal x9455=x8189;
CheckValue<IkReal> x9457 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9454),IKFAST_ATAN2_MAGTHRESH);
if(!x9457.valid){
continue;
}
IkReal x9456=((-1.0)*(x9457.value));
sj5=gconst1;
cj5=gconst2;
j5=x9456;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9456;
IkReal gconst1=(r21*x9455);
IkReal gconst2=(x9454*x9455);
CheckValue<IkReal> x9465=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9465.valid){
continue;
}
IkReal x9458=x9465.value;
IkReal x9459=(sj3*x9458);
IkReal x9460=(r11*x9459);
IkReal x9461=(r00*x9459);
IkReal x9462=(r01*x9459);
IkReal x9463=(r10*x9459);
IkReal x9464=(r20*r21*x9459);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9460*(r21*r21)))+((r10*r20*r21*x9462))+((r00*r20*r21*x9460))+((r10*x9461*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9466=((-1.0)*r20);
IkReal x9467=x8189;
CheckValue<IkReal> x9469 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9466),IKFAST_ATAN2_MAGTHRESH);
if(!x9469.valid){
continue;
}
IkReal x9468=((-1.0)*(x9469.value));
sj5=gconst1;
cj5=gconst2;
j5=x9468;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9468;
IkReal gconst1=(r21*x9467);
IkReal gconst2=(x9466*x9467);
CheckValue<IkReal> x9477=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9477.valid){
continue;
}
IkReal x9470=x9477.value;
IkReal x9471=(cj3*x9470);
IkReal x9472=(r11*x9471);
IkReal x9473=(r01*x9471);
IkReal x9474=(r00*x9471);
IkReal x9475=(r10*x9471);
IkReal x9476=(r20*r21*x9471);
j4eval[0]=IKsign((((r10*r20*r21*x9473))+((cj3*r02*r12))+((r01*x9472*(r21*r21)))+((r00*r20*r21*x9472))+((r10*x9474*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9478=((-1.0)*r20);
IkReal x9479=x8189;
CheckValue<IkReal> x9481 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9478),IKFAST_ATAN2_MAGTHRESH);
if(!x9481.valid){
continue;
}
IkReal x9480=((-1.0)*(x9481.value));
sj5=gconst1;
cj5=gconst2;
j5=x9480;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9480;
IkReal gconst1=(r21*x9479);
IkReal gconst2=(x9478*x9479);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9482=((-1.0)*r20);
IkReal x9483=x8189;
CheckValue<IkReal> x9485 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9482),IKFAST_ATAN2_MAGTHRESH);
if(!x9485.valid){
continue;
}
IkReal x9484=((-1.0)*(x9485.value));
sj5=gconst1;
cj5=gconst2;
j5=x9484;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9484;
IkReal gconst1=(r21*x9483);
IkReal gconst2=(x9482*x9483);
IkReal x9486=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9490=IKPowWithIntegerCheck(x9486,-1);
if(!x9490.valid){
continue;
}
IkReal x9487=x9490.value;
IkReal x9488=((1.0)*x9487);
IkReal x9489=((((-1.0)*(r02*r02)))+(((-1.0)*x9488*(r00*r00)*(r20*r20)))+(((-1.0)*x9488*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9487)));
j4eval[0]=x9489;
j4eval[1]=IKsign(x9489);
j4eval[2]=r02;
j4eval[3]=x9486;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9491=((-1.0)*r20);
IkReal x9492=x8189;
CheckValue<IkReal> x9494 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9491),IKFAST_ATAN2_MAGTHRESH);
if(!x9494.valid){
continue;
}
IkReal x9493=((-1.0)*(x9494.value));
sj5=gconst1;
cj5=gconst2;
j5=x9493;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9493;
IkReal gconst1=(r21*x9492);
IkReal gconst2=(x9491*x9492);
IkReal x9495=r22*r22;
IkReal x9496=(r02*sj1*sj2);
IkReal x9497=(cj1*cj2*r02);
CheckValue<IkReal> x9501=IKPowWithIntegerCheck(((-1.0)+x9495),-1);
if(!x9501.valid){
continue;
}
IkReal x9498=x9501.value;
if((((1.0)+(((-1.0)*x9495)))) < -0.00001)
continue;
IkReal x9499=IKsqrt(((1.0)+(((-1.0)*x9495))));
IkReal x9500=(r22*x9498*x9499);
j4eval[0]=((IKabs((x9496+(((-1.0)*x9497)))))+(IKabs((((x9497*x9500))+(((-1.0)*x9496*x9500))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9502=(sj1*sj2);
IkReal x9503=(gconst1*r01);
IkReal x9504=(gconst2*r00);
IkReal x9505=((1.0)*cj1*cj2);
CheckValue<IkReal> x9506 = IKatan2WithCheck(IkReal(((((-1.0)*x9504*x9505))+(((-1.0)*x9502*x9503))+((x9502*x9504))+((cj1*cj2*x9503)))),IkReal((((r02*x9502))+(((-1.0)*r02*x9505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9506.valid){
continue;
}
CheckValue<IkReal> x9507=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9506.value)+(((1.5707963267949)*(x9507.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9508=IKsin(j4);
IkReal x9509=IKcos(j4);
IkReal x9510=((1.0)*cj2);
IkReal x9511=((1.0)*x9509);
IkReal x9512=(gconst2*x9509);
IkReal x9513=(gconst1*x9508);
IkReal x9514=((1.0)*x9508);
evalcond[0]=(((r21*x9513))+(((-1.0)*gconst2*r20*x9514))+(((-1.0)*r22*x9511)));
evalcond[1]=((((-1.0)*gconst2*r10*x9514))+((r11*x9513))+(((-1.0)*r12*x9511)));
evalcond[2]=((((-1.0)*r02*x9514))+((r00*x9512))+(((-1.0)*gconst1*r01*x9511)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9511))+((r01*x9513))+(((-1.0)*gconst2*r00*x9514)));
evalcond[4]=((((-1.0)*gconst1*r21*x9511))+((sj1*sj2))+(((-1.0)*cj1*x9510))+(((-1.0)*r22*x9514))+((r20*x9512)));
evalcond[5]=((((-1.0)*gconst1*r11*x9511))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x9514))+(((-1.0)*sj1*x9510))+((r10*x9512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9515=(gconst2*r00);
IkReal x9516=(gconst1*r01);
CheckValue<IkReal> x9517 = IKatan2WithCheck(IkReal(((((-1.0)*x9516))+x9515)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9517.valid){
continue;
}
CheckValue<IkReal> x9518=IKPowWithIntegerCheck(IKsign(((((2.0)*x9515*x9516))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9516*x9516)))+(((-1.0)*(x9515*x9515))))),-1);
if(!x9518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9517.value)+(((1.5707963267949)*(x9518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9519=IKsin(j4);
IkReal x9520=IKcos(j4);
IkReal x9521=((1.0)*cj2);
IkReal x9522=((1.0)*x9520);
IkReal x9523=(gconst2*x9520);
IkReal x9524=(gconst1*x9519);
IkReal x9525=((1.0)*x9519);
evalcond[0]=((((-1.0)*r22*x9522))+((r21*x9524))+(((-1.0)*gconst2*r20*x9525)));
evalcond[1]=((((-1.0)*r12*x9522))+(((-1.0)*gconst2*r10*x9525))+((r11*x9524)));
evalcond[2]=((((-1.0)*r02*x9525))+((r00*x9523))+(((-1.0)*gconst1*r01*x9522)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9522))+((r01*x9524))+(((-1.0)*gconst2*r00*x9525)));
evalcond[4]=(((r20*x9523))+(((-1.0)*r22*x9525))+((sj1*sj2))+(((-1.0)*gconst1*r21*x9522))+(((-1.0)*cj1*x9521)));
evalcond[5]=((((-1.0)*gconst1*r11*x9522))+(((-1.0)*r12*x9525))+((r10*x9523))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x9521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9526=((1.0)*gconst2);
CheckValue<IkReal> x9527 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9526))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9527.valid){
continue;
}
CheckValue<IkReal> x9528=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9526))+(((-1.0)*gconst1*r10)))),-1);
if(!x9528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9527.value)+(((1.5707963267949)*(x9528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9529=IKsin(j4);
IkReal x9530=IKcos(j4);
IkReal x9531=((1.0)*cj2);
IkReal x9532=((1.0)*x9530);
IkReal x9533=(gconst2*x9530);
IkReal x9534=(gconst1*x9529);
IkReal x9535=((1.0)*x9529);
evalcond[0]=((((-1.0)*r22*x9532))+(((-1.0)*gconst2*r20*x9535))+((r21*x9534)));
evalcond[1]=(((r11*x9534))+(((-1.0)*gconst2*r10*x9535))+(((-1.0)*r12*x9532)));
evalcond[2]=((((-1.0)*r02*x9535))+((r00*x9533))+(((-1.0)*gconst1*r01*x9532)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r00*x9535))+(((-1.0)*r02*x9532))+((r01*x9534)));
evalcond[4]=(((r20*x9533))+(((-1.0)*r22*x9535))+((sj1*sj2))+(((-1.0)*gconst1*r21*x9532))+(((-1.0)*cj1*x9531)));
evalcond[5]=(((r10*x9533))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r11*x9532))+(((-1.0)*sj1*x9531))+(((-1.0)*r12*x9535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9536=((-1.0)*r20);
IkReal x9537=x8189;
CheckValue<IkReal> x9539 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9536),IKFAST_ATAN2_MAGTHRESH);
if(!x9539.valid){
continue;
}
IkReal x9538=((-1.0)*(x9539.value));
sj5=gconst1;
cj5=gconst2;
j5=x9538;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9538;
IkReal gconst1=(r21*x9537);
IkReal gconst2=(x9536*x9537);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9540=((-1.0)*r20);
IkReal x9541=x8189;
CheckValue<IkReal> x9543 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9540),IKFAST_ATAN2_MAGTHRESH);
if(!x9543.valid){
continue;
}
IkReal x9542=((-1.0)*(x9543.value));
sj5=gconst1;
cj5=gconst2;
j5=x9542;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9542;
IkReal gconst1=(r21*x9541);
IkReal gconst2=(x9540*x9541);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9544=((-1.0)*r20);
IkReal x9545=x8189;
CheckValue<IkReal> x9547 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9544),IKFAST_ATAN2_MAGTHRESH);
if(!x9547.valid){
continue;
}
IkReal x9546=((-1.0)*(x9547.value));
sj5=gconst1;
cj5=gconst2;
j5=x9546;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9546;
IkReal gconst1=(r21*x9545);
IkReal gconst2=(x9544*x9545);
IkReal x9548=r22*r22;
IkReal x9549=(r02*sj1*sj2);
IkReal x9550=(cj1*cj2*r02);
CheckValue<IkReal> x9554=IKPowWithIntegerCheck(((-1.0)+x9548),-1);
if(!x9554.valid){
continue;
}
IkReal x9551=x9554.value;
if((((1.0)+(((-1.0)*x9548)))) < -0.00001)
continue;
IkReal x9552=IKsqrt(((1.0)+(((-1.0)*x9548))));
IkReal x9553=(r22*x9551*x9552);
j4eval[0]=((IKabs((x9550+(((-1.0)*x9549)))))+(IKabs((((x9549*x9553))+(((-1.0)*x9550*x9553))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9555=(gconst2*r00);
IkReal x9556=(gconst1*r01);
IkReal x9557=(cj1*cj2);
IkReal x9558=((1.0)*sj1*sj2);
CheckValue<IkReal> x9559 = IKatan2WithCheck(IkReal((((sj1*sj2*x9556))+(((-1.0)*x9555*x9558))+((x9555*x9557))+(((-1.0)*x9556*x9557)))),IkReal((((r02*x9557))+(((-1.0)*r02*x9558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9559.valid){
continue;
}
CheckValue<IkReal> x9560=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9559.value)+(((1.5707963267949)*(x9560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9561=IKcos(j4);
IkReal x9562=IKsin(j4);
IkReal x9563=((1.0)*cj2);
IkReal x9564=((1.0)*x9561);
IkReal x9565=(gconst1*x9561);
IkReal x9566=(gconst1*x9562);
IkReal x9567=((1.0)*gconst2*x9562);
evalcond[0]=((((-1.0)*gconst2*r00*x9564))+((r01*x9565))+((r02*x9562)));
evalcond[1]=(((r21*x9566))+(((-1.0)*r20*x9567))+(((-1.0)*r22*x9564)));
evalcond[2]=((((-1.0)*r10*x9567))+((r11*x9566))+(((-1.0)*r12*x9564)));
evalcond[3]=((-1.0)+((r01*x9566))+(((-1.0)*r00*x9567))+(((-1.0)*r02*x9564)));
evalcond[4]=(((r21*x9565))+(((-1.0)*gconst2*r20*x9564))+((sj1*sj2))+(((-1.0)*cj1*x9563))+((r22*x9562)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r10*x9564))+((r12*x9562))+(((-1.0)*sj1*x9563))+((r11*x9565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9568=(gconst1*r01);
IkReal x9569=(gconst2*r00);
CheckValue<IkReal> x9570=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9568*x9569))+(r02*r02)+(x9569*x9569)+(x9568*x9568))),-1);
if(!x9570.valid){
continue;
}
CheckValue<IkReal> x9571 = IKatan2WithCheck(IkReal(((((-1.0)*x9569))+x9568)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9570.value)))+(x9571.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9572=IKcos(j4);
IkReal x9573=IKsin(j4);
IkReal x9574=((1.0)*cj2);
IkReal x9575=((1.0)*x9572);
IkReal x9576=(gconst1*x9572);
IkReal x9577=(gconst1*x9573);
IkReal x9578=((1.0)*gconst2*x9573);
evalcond[0]=(((r01*x9576))+(((-1.0)*gconst2*r00*x9575))+((r02*x9573)));
evalcond[1]=(((r21*x9577))+(((-1.0)*r20*x9578))+(((-1.0)*r22*x9575)));
evalcond[2]=(((r11*x9577))+(((-1.0)*r12*x9575))+(((-1.0)*r10*x9578)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9575))+((r01*x9577))+(((-1.0)*r00*x9578)));
evalcond[4]=((((-1.0)*gconst2*r20*x9575))+((r21*x9576))+((r22*x9573))+((sj1*sj2))+(((-1.0)*cj1*x9574)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x9576))+(((-1.0)*sj1*x9574))+(((-1.0)*gconst2*r10*x9575))+((r12*x9573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9579=((1.0)*gconst2);
CheckValue<IkReal> x9580=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9579)))),-1);
if(!x9580.valid){
continue;
}
CheckValue<IkReal> x9581 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9579))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9580.value)))+(x9581.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9582=IKcos(j4);
IkReal x9583=IKsin(j4);
IkReal x9584=((1.0)*cj2);
IkReal x9585=((1.0)*x9582);
IkReal x9586=(gconst1*x9582);
IkReal x9587=(gconst1*x9583);
IkReal x9588=((1.0)*gconst2*x9583);
evalcond[0]=(((r01*x9586))+(((-1.0)*gconst2*r00*x9585))+((r02*x9583)));
evalcond[1]=((((-1.0)*r22*x9585))+(((-1.0)*r20*x9588))+((r21*x9587)));
evalcond[2]=(((r11*x9587))+(((-1.0)*r12*x9585))+(((-1.0)*r10*x9588)));
evalcond[3]=((-1.0)+((r01*x9587))+(((-1.0)*r00*x9588))+(((-1.0)*r02*x9585)));
evalcond[4]=(((sj1*sj2))+((r22*x9583))+((r21*x9586))+(((-1.0)*cj1*x9584))+(((-1.0)*gconst2*r20*x9585)));
evalcond[5]=(((r11*x9586))+(((-1.0)*sj1*x9584))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r10*x9585))+((r12*x9583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9589=((-1.0)*r20);
IkReal x9590=((-1.0)*r21);
CheckValue<IkReal> x9592 = IKatan2WithCheck(IkReal(x9590),IkReal(x9589),IKFAST_ATAN2_MAGTHRESH);
if(!x9592.valid){
continue;
}
IkReal x9591=((-1.0)*(x9592.value));
sj5=gconst1;
cj5=gconst2;
j5=x9591;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9589);
rxp0_2=(py*r00);
rxp1_0=(py*x9590);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9591;
IkReal gconst1=r21;
IkReal gconst2=x9589;
IkReal x9593=(r00*r20);
IkReal x9594=((1.0)*cj3);
IkReal x9595=(r01*r21);
j4eval[0]=(x9595+x9593);
j4eval[1]=((((-1.0)*x9593*x9594))+(((-1.0)*x9594*x9595)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9596=((-1.0)*r20);
IkReal x9597=((-1.0)*r21);
CheckValue<IkReal> x9599 = IKatan2WithCheck(IkReal(x9597),IkReal(x9596),IKFAST_ATAN2_MAGTHRESH);
if(!x9599.valid){
continue;
}
IkReal x9598=((-1.0)*(x9599.value));
sj5=gconst1;
cj5=gconst2;
j5=x9598;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9596);
rxp0_2=(py*r00);
rxp1_0=(py*x9597);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9598;
IkReal gconst1=r21;
IkReal gconst2=x9596;
IkReal x9600=((1.0)*sj3);
IkReal x9601=(r01*r21);
IkReal x9602=(r00*r20);
j4eval[0]=(x9601+x9602);
j4eval[1]=((((-1.0)*x9600*x9602))+(((-1.0)*x9600*x9601)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9603=((-1.0)*r20);
IkReal x9604=((-1.0)*r21);
CheckValue<IkReal> x9606 = IKatan2WithCheck(IkReal(x9604),IkReal(x9603),IKFAST_ATAN2_MAGTHRESH);
if(!x9606.valid){
continue;
}
IkReal x9605=((-1.0)*(x9606.value));
sj5=gconst1;
cj5=gconst2;
j5=x9605;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9603);
rxp0_2=(py*r00);
rxp1_0=(py*x9604);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9605;
IkReal gconst1=r21;
IkReal gconst2=x9603;
IkReal x9607=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r20*x9607))+(((-1.0)*r01*r21*x9607)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9608=((1.0)*r01);
CheckValue<IkReal> x9609=IKPowWithIntegerCheck(cj3,-1);
if(!x9609.valid){
continue;
}
CheckValue<IkReal> x9610=IKPowWithIntegerCheck(r12,-1);
if(!x9610.valid){
continue;
}
CheckValue<IkReal> x9611=IKPowWithIntegerCheck(((((-1.0)*gconst1*sj3*x9608))+((gconst2*r00*sj3))),-1);
if(!x9611.valid){
continue;
}
if( IKabs(((x9609.value)*(x9610.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9611.value)*(((((-1.0)*cj3*gconst2*x9608))+(((-1.0)*cj3*gconst1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9609.value)*(x9610.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x9611.value)*(((((-1.0)*cj3*gconst2*x9608))+(((-1.0)*cj3*gconst1*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9609.value)*(x9610.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x9611.value)*(((((-1.0)*cj3*gconst2*x9608))+(((-1.0)*cj3*gconst1*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9612=IKsin(j4);
IkReal x9613=IKcos(j4);
IkReal x9614=((1.0)*sj3);
IkReal x9615=(gconst1*r01);
IkReal x9616=(cj3*r00);
IkReal x9617=(sj1*sj2);
IkReal x9618=(gconst2*r21);
IkReal x9619=((1.0)*cj2);
IkReal x9620=(cj3*gconst1);
IkReal x9621=(gconst2*r01);
IkReal x9622=((1.0)*cj3);
IkReal x9623=((1.0)*cj1*sj2);
IkReal x9624=(sj1*x9619);
IkReal x9625=(r12*x9612);
IkReal x9626=(gconst2*x9613);
IkReal x9627=(r21*x9613);
IkReal x9628=((1.0)*gconst2*x9612);
IkReal x9629=(x9623+x9624);
evalcond[0]=((-1.0)*r12*x9613);
evalcond[1]=(((gconst1*r21*x9612))+(((-1.0)*r20*x9628)));
evalcond[2]=((-1.0)+((x9612*x9615))+(((-1.0)*r00*x9628)));
evalcond[3]=((((-1.0)*x9617))+(((-1.0)*x9622*x9625))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x9614*x9625))+(((-1.0)*x9629)));
evalcond[5]=((((-1.0)*x9613*x9614*x9615))+((gconst1*x9616))+((r00*sj3*x9626))+((cj3*x9621)));
evalcond[6]=((((-1.0)*x9613*x9615*x9622))+((x9616*x9626))+(((-1.0)*gconst1*r00*x9614))+(((-1.0)*x9614*x9621)));
evalcond[7]=(((r20*sj3*x9626))+((r20*x9620))+((cj3*x9618))+x9617+(((-1.0)*gconst1*x9614*x9627))+(((-1.0)*cj1*x9619)));
evalcond[8]=(((cj3*r20*x9626))+(((-1.0)*gconst1*r20*x9614))+(((-1.0)*x9614*x9618))+(((-1.0)*x9629))+(((-1.0)*x9620*x9627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9630=(gconst1*r01);
IkReal x9631=((1.0)*gconst2);
CheckValue<IkReal> x9632=IKPowWithIntegerCheck(((((-1.0)*r00*x9631))+x9630),-1);
if(!x9632.valid){
continue;
}
CheckValue<IkReal> x9633=IKPowWithIntegerCheck(((((-1.0)*sj3*x9630))+((gconst2*r00*sj3))),-1);
if(!x9633.valid){
continue;
}
if( IKabs(x9632.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9633.value)*(((((-1.0)*cj3*gconst1*r00))+(((-1.0)*cj3*r01*x9631)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9632.value)+IKsqr(((x9633.value)*(((((-1.0)*cj3*gconst1*r00))+(((-1.0)*cj3*r01*x9631))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9632.value, ((x9633.value)*(((((-1.0)*cj3*gconst1*r00))+(((-1.0)*cj3*r01*x9631))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9634=IKsin(j4);
IkReal x9635=IKcos(j4);
IkReal x9636=((1.0)*sj3);
IkReal x9637=(gconst1*r01);
IkReal x9638=(cj3*r00);
IkReal x9639=(sj1*sj2);
IkReal x9640=(gconst2*r21);
IkReal x9641=((1.0)*cj2);
IkReal x9642=(cj3*gconst1);
IkReal x9643=(gconst2*r01);
IkReal x9644=((1.0)*cj3);
IkReal x9645=((1.0)*cj1*sj2);
IkReal x9646=(sj1*x9641);
IkReal x9647=(r12*x9634);
IkReal x9648=(gconst2*x9635);
IkReal x9649=(r21*x9635);
IkReal x9650=((1.0)*gconst2*x9634);
IkReal x9651=(x9645+x9646);
evalcond[0]=((-1.0)*r12*x9635);
evalcond[1]=((((-1.0)*r20*x9650))+((gconst1*r21*x9634)));
evalcond[2]=((-1.0)+((x9634*x9637))+(((-1.0)*r00*x9650)));
evalcond[3]=((((-1.0)*x9639))+((cj1*cj2))+(((-1.0)*x9644*x9647)));
evalcond[4]=((((-1.0)*x9636*x9647))+(((-1.0)*x9651)));
evalcond[5]=(((gconst1*x9638))+((r00*sj3*x9648))+(((-1.0)*x9635*x9636*x9637))+((cj3*x9643)));
evalcond[6]=(((x9638*x9648))+(((-1.0)*gconst1*r00*x9636))+(((-1.0)*x9635*x9637*x9644))+(((-1.0)*x9636*x9643)));
evalcond[7]=((((-1.0)*cj1*x9641))+((r20*sj3*x9648))+x9639+((r20*x9642))+(((-1.0)*gconst1*x9636*x9649))+((cj3*x9640)));
evalcond[8]=((((-1.0)*gconst1*r20*x9636))+(((-1.0)*x9642*x9649))+((cj3*r20*x9648))+(((-1.0)*x9636*x9640))+(((-1.0)*x9651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9652=(gconst1*r01);
IkReal x9653=(gconst2*r00);
CheckValue<IkReal> x9654=IKPowWithIntegerCheck((x9652+(((-1.0)*x9653))),-1);
if(!x9654.valid){
continue;
}
CheckValue<IkReal> x9655=IKPowWithIntegerCheck((((cj3*x9653))+(((-1.0)*cj3*x9652))),-1);
if(!x9655.valid){
continue;
}
if( IKabs(x9654.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9655.value)*((((gconst1*r00*sj3))+((gconst2*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9654.value)+IKsqr(((x9655.value)*((((gconst1*r00*sj3))+((gconst2*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9654.value, ((x9655.value)*((((gconst1*r00*sj3))+((gconst2*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9656=IKsin(j4);
IkReal x9657=IKcos(j4);
IkReal x9658=((1.0)*sj3);
IkReal x9659=(gconst1*r01);
IkReal x9660=(cj3*r00);
IkReal x9661=(sj1*sj2);
IkReal x9662=(gconst2*r21);
IkReal x9663=((1.0)*cj2);
IkReal x9664=(cj3*gconst1);
IkReal x9665=(gconst2*r01);
IkReal x9666=((1.0)*cj3);
IkReal x9667=((1.0)*cj1*sj2);
IkReal x9668=(sj1*x9663);
IkReal x9669=(r12*x9656);
IkReal x9670=(gconst2*x9657);
IkReal x9671=(r21*x9657);
IkReal x9672=((1.0)*gconst2*x9656);
IkReal x9673=(x9667+x9668);
evalcond[0]=((-1.0)*r12*x9657);
evalcond[1]=(((gconst1*r21*x9656))+(((-1.0)*r20*x9672)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x9672))+((x9656*x9659)));
evalcond[3]=((((-1.0)*x9661))+((cj1*cj2))+(((-1.0)*x9666*x9669)));
evalcond[4]=((((-1.0)*x9673))+(((-1.0)*x9658*x9669)));
evalcond[5]=(((cj3*x9665))+((gconst1*x9660))+((r00*sj3*x9670))+(((-1.0)*x9657*x9658*x9659)));
evalcond[6]=(((x9660*x9670))+(((-1.0)*x9658*x9665))+(((-1.0)*gconst1*r00*x9658))+(((-1.0)*x9657*x9659*x9666)));
evalcond[7]=(((cj3*x9662))+(((-1.0)*cj1*x9663))+((r20*x9664))+(((-1.0)*gconst1*x9658*x9671))+x9661+((r20*sj3*x9670)));
evalcond[8]=((((-1.0)*x9673))+(((-1.0)*gconst1*r20*x9658))+(((-1.0)*x9658*x9662))+(((-1.0)*x9664*x9671))+((cj3*r20*x9670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9674=gconst2*gconst2;
IkReal x9675=gconst1*gconst1;
IkReal x9676=(r10*sj3);
IkReal x9677=(gconst1*gconst2);
IkReal x9678=((1.0)*r01);
IkReal x9679=(cj3*r10);
IkReal x9680=(r12*sj3);
IkReal x9681=(cj3*r11);
IkReal x9682=((1.0)*r00);
IkReal x9683=((1.0)*r11*sj3);
CheckValue<IkReal> x9684=IKPowWithIntegerCheck(IKsign((((r00*x9674*x9679))+((r01*x9675*x9681))+((cj3*r02*r12))+(((-1.0)*x9677*x9681*x9682))+(((-1.0)*x9677*x9678*x9679)))),-1);
if(!x9684.valid){
continue;
}
CheckValue<IkReal> x9685 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*x9678*x9680))+(((-1.0)*gconst1*x9680*x9682)))),IkReal((((r00*x9676*x9677))+((r01*x9674*x9676))+(((-1.0)*r11*sj3*x9677*x9678))+(((-1.0)*r11*sj3*x9675*x9682)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9684.value)))+(x9685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9686=IKsin(j4);
IkReal x9687=IKcos(j4);
IkReal x9688=((1.0)*sj3);
IkReal x9689=(gconst1*sj3);
IkReal x9690=(cj3*r00);
IkReal x9691=(cj3*gconst1);
IkReal x9692=(sj1*sj2);
IkReal x9693=((1.0)*cj2);
IkReal x9694=(gconst2*r21);
IkReal x9695=(gconst2*r01);
IkReal x9696=(gconst2*r11);
IkReal x9697=((1.0)*cj1*sj2);
IkReal x9698=(sj1*x9693);
IkReal x9699=((1.0)*x9687);
IkReal x9700=(r12*x9686);
IkReal x9701=(gconst2*x9687);
IkReal x9702=(gconst1*x9686);
IkReal x9703=((1.0)*cj3*x9686);
IkReal x9704=((1.0)*gconst2*x9686);
IkReal x9705=(x9698+x9697);
evalcond[0]=(((r21*x9702))+(((-1.0)*r22*x9699))+(((-1.0)*r20*x9704)));
evalcond[1]=((((-1.0)*r12*x9699))+((r11*x9702))+(((-1.0)*r10*x9704)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9699))+((r01*x9702))+(((-1.0)*r00*x9704)));
evalcond[3]=((((-1.0)*gconst1*r01*x9687*x9688))+((cj3*x9695))+((gconst1*x9690))+(((-1.0)*r02*x9686*x9688))+((r00*sj3*x9701)));
evalcond[4]=((((-1.0)*r02*x9703))+(((-1.0)*r01*x9691*x9699))+(((-1.0)*gconst1*r00*x9688))+((x9690*x9701))+(((-1.0)*x9688*x9695)));
evalcond[5]=((((-1.0)*gconst1*r21*x9687*x9688))+(((-1.0)*cj1*x9693))+((r20*sj3*x9701))+x9692+((cj3*x9694))+(((-1.0)*r22*x9686*x9688))+((r20*x9691)));
evalcond[6]=((((-1.0)*x9688*x9700))+(((-1.0)*gconst1*r11*x9687*x9688))+((r10*sj3*x9701))+(((-1.0)*x9705))+((cj3*x9696))+((r10*x9691)));
evalcond[7]=((((-1.0)*x9692))+(((-1.0)*r11*x9691*x9699))+(((-1.0)*x9688*x9696))+(((-1.0)*cj3*x9700))+((cj1*cj2))+(((-1.0)*gconst1*r10*x9688))+((cj3*r10*x9701)));
evalcond[8]=((((-1.0)*r22*x9703))+((cj3*r20*x9701))+(((-1.0)*x9705))+(((-1.0)*gconst1*r20*x9688))+(((-1.0)*x9688*x9694))+(((-1.0)*r21*x9691*x9699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9706=gconst2*gconst2;
IkReal x9707=gconst1*gconst1;
IkReal x9708=(gconst1*r00);
IkReal x9709=(r11*sj3);
IkReal x9710=((1.0)*gconst2);
IkReal x9711=(cj3*r12);
IkReal x9712=(cj3*r11);
IkReal x9713=(gconst2*r01);
IkReal x9714=(cj3*r10);
IkReal x9715=(r10*sj3);
CheckValue<IkReal> x9716 = IKatan2WithCheck(IkReal((((x9711*x9713))+((x9708*x9711)))),IkReal((((gconst1*x9712*x9713))+((r00*x9707*x9712))+(((-1.0)*x9708*x9710*x9714))+(((-1.0)*r01*x9706*x9714)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9716.valid){
continue;
}
CheckValue<IkReal> x9717=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x9708*x9709*x9710))+((r01*x9707*x9709))+((r00*x9706*x9715))+(((-1.0)*gconst1*r01*x9710*x9715)))),-1);
if(!x9717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9716.value)+(((1.5707963267949)*(x9717.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9718=IKsin(j4);
IkReal x9719=IKcos(j4);
IkReal x9720=((1.0)*sj3);
IkReal x9721=(gconst1*sj3);
IkReal x9722=(cj3*r00);
IkReal x9723=(cj3*gconst1);
IkReal x9724=(sj1*sj2);
IkReal x9725=((1.0)*cj2);
IkReal x9726=(gconst2*r21);
IkReal x9727=(gconst2*r01);
IkReal x9728=(gconst2*r11);
IkReal x9729=((1.0)*cj1*sj2);
IkReal x9730=(sj1*x9725);
IkReal x9731=((1.0)*x9719);
IkReal x9732=(r12*x9718);
IkReal x9733=(gconst2*x9719);
IkReal x9734=(gconst1*x9718);
IkReal x9735=((1.0)*cj3*x9718);
IkReal x9736=((1.0)*gconst2*x9718);
IkReal x9737=(x9729+x9730);
evalcond[0]=((((-1.0)*r20*x9736))+(((-1.0)*r22*x9731))+((r21*x9734)));
evalcond[1]=(((r11*x9734))+(((-1.0)*r10*x9736))+(((-1.0)*r12*x9731)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9731))+(((-1.0)*r00*x9736))+((r01*x9734)));
evalcond[3]=(((r00*sj3*x9733))+(((-1.0)*r02*x9718*x9720))+((cj3*x9727))+((gconst1*x9722))+(((-1.0)*gconst1*r01*x9719*x9720)));
evalcond[4]=(((x9722*x9733))+(((-1.0)*r02*x9735))+(((-1.0)*r01*x9723*x9731))+(((-1.0)*gconst1*r00*x9720))+(((-1.0)*x9720*x9727)));
evalcond[5]=((((-1.0)*cj1*x9725))+(((-1.0)*gconst1*r21*x9719*x9720))+x9724+((r20*x9723))+(((-1.0)*r22*x9718*x9720))+((r20*sj3*x9733))+((cj3*x9726)));
evalcond[6]=((((-1.0)*gconst1*r11*x9719*x9720))+(((-1.0)*x9737))+((cj3*x9728))+((r10*sj3*x9733))+(((-1.0)*x9720*x9732))+((r10*x9723)));
evalcond[7]=(((cj3*r10*x9733))+(((-1.0)*r11*x9723*x9731))+(((-1.0)*gconst1*r10*x9720))+((cj1*cj2))+(((-1.0)*x9724))+(((-1.0)*x9720*x9728))+(((-1.0)*cj3*x9732)));
evalcond[8]=((((-1.0)*r21*x9723*x9731))+((cj3*r20*x9733))+(((-1.0)*x9737))+(((-1.0)*r22*x9735))+(((-1.0)*gconst1*r20*x9720))+(((-1.0)*x9720*x9726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9738=((1.0)*gconst2);
CheckValue<IkReal> x9739 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9738))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9739.valid){
continue;
}
CheckValue<IkReal> x9740=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9738)))),-1);
if(!x9740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9739.value)+(((1.5707963267949)*(x9740.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9741=IKsin(j4);
IkReal x9742=IKcos(j4);
IkReal x9743=((1.0)*sj3);
IkReal x9744=(gconst1*sj3);
IkReal x9745=(cj3*r00);
IkReal x9746=(cj3*gconst1);
IkReal x9747=(sj1*sj2);
IkReal x9748=((1.0)*cj2);
IkReal x9749=(gconst2*r21);
IkReal x9750=(gconst2*r01);
IkReal x9751=(gconst2*r11);
IkReal x9752=((1.0)*cj1*sj2);
IkReal x9753=(sj1*x9748);
IkReal x9754=((1.0)*x9742);
IkReal x9755=(r12*x9741);
IkReal x9756=(gconst2*x9742);
IkReal x9757=(gconst1*x9741);
IkReal x9758=((1.0)*cj3*x9741);
IkReal x9759=((1.0)*gconst2*x9741);
IkReal x9760=(x9753+x9752);
evalcond[0]=(((r21*x9757))+(((-1.0)*r22*x9754))+(((-1.0)*r20*x9759)));
evalcond[1]=(((r11*x9757))+(((-1.0)*r10*x9759))+(((-1.0)*r12*x9754)));
evalcond[2]=((-1.0)+((r01*x9757))+(((-1.0)*r02*x9754))+(((-1.0)*r00*x9759)));
evalcond[3]=(((gconst1*x9745))+((r00*sj3*x9756))+((cj3*x9750))+(((-1.0)*gconst1*r01*x9742*x9743))+(((-1.0)*r02*x9741*x9743)));
evalcond[4]=((((-1.0)*gconst1*r00*x9743))+(((-1.0)*r02*x9758))+(((-1.0)*x9743*x9750))+(((-1.0)*r01*x9746*x9754))+((x9745*x9756)));
evalcond[5]=((((-1.0)*r22*x9741*x9743))+x9747+(((-1.0)*cj1*x9748))+((r20*sj3*x9756))+((r20*x9746))+(((-1.0)*gconst1*r21*x9742*x9743))+((cj3*x9749)));
evalcond[6]=((((-1.0)*x9743*x9755))+((r10*x9746))+((cj3*x9751))+((r10*sj3*x9756))+(((-1.0)*gconst1*r11*x9742*x9743))+(((-1.0)*x9760)));
evalcond[7]=((((-1.0)*gconst1*r10*x9743))+((cj3*r10*x9756))+(((-1.0)*x9743*x9751))+(((-1.0)*x9747))+(((-1.0)*r11*x9746*x9754))+((cj1*cj2))+(((-1.0)*cj3*x9755)));
evalcond[8]=((((-1.0)*gconst1*r20*x9743))+(((-1.0)*r21*x9746*x9754))+(((-1.0)*r22*x9758))+((cj3*r20*x9756))+(((-1.0)*x9743*x9749))+(((-1.0)*x9760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9761=((-1.0)*r20);
IkReal x9762=x8189;
CheckValue<IkReal> x9764 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9761),IKFAST_ATAN2_MAGTHRESH);
if(!x9764.valid){
continue;
}
IkReal x9763=((-1.0)*(x9764.value));
sj5=gconst1;
cj5=gconst2;
j5=x9763;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9763;
IkReal gconst1=(r21*x9762);
IkReal gconst2=(x9761*x9762);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9765=((-1.0)*r20);
IkReal x9766=x8189;
CheckValue<IkReal> x9768 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9765),IKFAST_ATAN2_MAGTHRESH);
if(!x9768.valid){
continue;
}
IkReal x9767=((-1.0)*(x9768.value));
sj5=gconst1;
cj5=gconst2;
j5=x9767;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9767;
IkReal gconst1=(r21*x9766);
IkReal gconst2=(x9765*x9766);
CheckValue<IkReal> x9776=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9776.valid){
continue;
}
IkReal x9769=x9776.value;
IkReal x9770=(sj3*x9769);
IkReal x9771=(r11*x9770);
IkReal x9772=(r00*x9770);
IkReal x9773=(r01*x9770);
IkReal x9774=(r10*x9770);
IkReal x9775=(r20*r21*x9770);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9771*(r21*r21)))+((r10*x9772*(r20*r20)))+((r00*r20*r21*x9771))+((r10*r20*r21*x9773))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9777=((-1.0)*r20);
IkReal x9778=x8189;
CheckValue<IkReal> x9780 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9777),IKFAST_ATAN2_MAGTHRESH);
if(!x9780.valid){
continue;
}
IkReal x9779=((-1.0)*(x9780.value));
sj5=gconst1;
cj5=gconst2;
j5=x9779;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9779;
IkReal gconst1=(r21*x9778);
IkReal gconst2=(x9777*x9778);
CheckValue<IkReal> x9788=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9788.valid){
continue;
}
IkReal x9781=x9788.value;
IkReal x9782=(cj3*x9781);
IkReal x9783=(r11*x9782);
IkReal x9784=(r01*x9782);
IkReal x9785=(r00*x9782);
IkReal x9786=(r10*x9782);
IkReal x9787=(r20*r21*x9782);
j4eval[0]=IKsign((((cj3*r02*r12))+((r01*x9783*(r21*r21)))+((r10*r20*r21*x9784))+((r00*r20*r21*x9783))+((r10*x9785*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9789=((-1.0)*r20);
IkReal x9790=x8189;
CheckValue<IkReal> x9792 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9789),IKFAST_ATAN2_MAGTHRESH);
if(!x9792.valid){
continue;
}
IkReal x9791=((-1.0)*(x9792.value));
sj5=gconst1;
cj5=gconst2;
j5=x9791;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9791;
IkReal gconst1=(r21*x9790);
IkReal gconst2=(x9789*x9790);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9793=((-1.0)*r20);
IkReal x9794=x8189;
CheckValue<IkReal> x9796 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9793),IKFAST_ATAN2_MAGTHRESH);
if(!x9796.valid){
continue;
}
IkReal x9795=((-1.0)*(x9796.value));
sj5=gconst1;
cj5=gconst2;
j5=x9795;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9795;
IkReal gconst1=(r21*x9794);
IkReal gconst2=(x9793*x9794);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9797=((-1.0)*r20);
IkReal x9798=x8189;
CheckValue<IkReal> x9800 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9797),IKFAST_ATAN2_MAGTHRESH);
if(!x9800.valid){
continue;
}
IkReal x9799=((-1.0)*(x9800.value));
sj5=gconst1;
cj5=gconst2;
j5=x9799;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9799;
IkReal gconst1=(r21*x9798);
IkReal gconst2=(x9797*x9798);
IkReal x9801=r22*r22;
IkReal x9802=(cj1*r12*sj2);
IkReal x9803=(cj2*r12*sj1);
CheckValue<IkReal> x9807=IKPowWithIntegerCheck(((-1.0)+x9801),-1);
if(!x9807.valid){
continue;
}
IkReal x9804=x9807.value;
if((((1.0)+(((-1.0)*x9801)))) < -0.00001)
continue;
IkReal x9805=IKsqrt(((1.0)+(((-1.0)*x9801))));
IkReal x9806=(r22*x9804*x9805);
j4eval[0]=((IKabs((((x9803*x9806))+((x9802*x9806)))))+(IKabs((x9803+x9802))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9808=(cj1*sj2);
IkReal x9809=(cj2*sj1);
IkReal x9810=(gconst1*r11);
IkReal x9811=((1.0)*gconst2*r10);
CheckValue<IkReal> x9812=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*gconst2*r10*x9810))+(x9810*x9810)+(((gconst2*gconst2)*(r10*r10))))),-1);
if(!x9812.valid){
continue;
}
CheckValue<IkReal> x9813 = IKatan2WithCheck(IkReal((((r12*x9809))+((r12*x9808)))),IkReal((((x9809*x9810))+(((-1.0)*x9809*x9811))+((x9808*x9810))+(((-1.0)*x9808*x9811)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9812.value)))+(x9813.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9814=IKsin(j4);
IkReal x9815=IKcos(j4);
IkReal x9816=(gconst1*r11);
IkReal x9817=(gconst1*r21);
IkReal x9818=(gconst1*r01);
IkReal x9819=((1.0)*x9815);
IkReal x9820=(gconst2*x9815);
IkReal x9821=((1.0)*x9814);
evalcond[0]=((((-1.0)*r22*x9819))+(((-1.0)*gconst2*r20*x9821))+((x9814*x9817)));
evalcond[1]=(((x9814*x9816))+(((-1.0)*gconst2*r10*x9821))+(((-1.0)*r12*x9819)));
evalcond[2]=((((-1.0)*x9818*x9819))+(((-1.0)*r02*x9821))+((r00*x9820)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9821))+(((-1.0)*r02*x9819))+((x9814*x9818)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x9821))+(((-1.0)*x9816*x9819))+((r10*x9820)));
evalcond[5]=(((r20*x9820))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9817*x9819))+(((-1.0)*r22*x9821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9822=(gconst1*r01);
IkReal x9823=(gconst2*r00);
CheckValue<IkReal> x9824=IKPowWithIntegerCheck(IKsign(((x9823*x9823)+(x9822*x9822)+(r02*r02)+(((-2.0)*x9822*x9823)))),-1);
if(!x9824.valid){
continue;
}
CheckValue<IkReal> x9825 = IKatan2WithCheck(IkReal((x9823+(((-1.0)*x9822)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9824.value)))+(x9825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9826=IKsin(j4);
IkReal x9827=IKcos(j4);
IkReal x9828=(gconst1*r11);
IkReal x9829=(gconst1*r21);
IkReal x9830=(gconst1*r01);
IkReal x9831=((1.0)*x9827);
IkReal x9832=(gconst2*x9827);
IkReal x9833=((1.0)*x9826);
evalcond[0]=((((-1.0)*r22*x9831))+((x9826*x9829))+(((-1.0)*gconst2*r20*x9833)));
evalcond[1]=(((x9826*x9828))+(((-1.0)*gconst2*r10*x9833))+(((-1.0)*r12*x9831)));
evalcond[2]=(((r00*x9832))+(((-1.0)*r02*x9833))+(((-1.0)*x9830*x9831)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9831))+((x9826*x9830))+(((-1.0)*gconst2*r00*x9833)));
evalcond[4]=(((cj2*sj1))+((r10*x9832))+((cj1*sj2))+(((-1.0)*x9828*x9831))+(((-1.0)*r12*x9833)));
evalcond[5]=((((-1.0)*x9829*x9831))+(((-1.0)*r22*x9833))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x9832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9834 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9834.valid){
continue;
}
CheckValue<IkReal> x9835=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9834.value)+(((1.5707963267949)*(x9835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9836=IKsin(j4);
IkReal x9837=IKcos(j4);
IkReal x9838=(gconst1*r11);
IkReal x9839=(gconst1*r21);
IkReal x9840=(gconst1*r01);
IkReal x9841=((1.0)*x9837);
IkReal x9842=(gconst2*x9837);
IkReal x9843=((1.0)*x9836);
evalcond[0]=((((-1.0)*gconst2*r20*x9843))+(((-1.0)*r22*x9841))+((x9836*x9839)));
evalcond[1]=((((-1.0)*r12*x9841))+(((-1.0)*gconst2*r10*x9843))+((x9836*x9838)));
evalcond[2]=((((-1.0)*x9840*x9841))+(((-1.0)*r02*x9843))+((r00*x9842)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9843))+(((-1.0)*r02*x9841))+((x9836*x9840)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x9843))+((r10*x9842))+((cj1*sj2))+(((-1.0)*x9838*x9841)));
evalcond[5]=((((-1.0)*x9839*x9841))+(((-1.0)*cj1*cj2))+((r20*x9842))+((sj1*sj2))+(((-1.0)*r22*x9843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9844=((-1.0)*r20);
IkReal x9845=x8189;
CheckValue<IkReal> x9847 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9844),IKFAST_ATAN2_MAGTHRESH);
if(!x9847.valid){
continue;
}
IkReal x9846=((-1.0)*(x9847.value));
sj5=gconst1;
cj5=gconst2;
j5=x9846;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9846;
IkReal gconst1=(r21*x9845);
IkReal gconst2=(x9844*x9845);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9848=((-1.0)*r20);
IkReal x9849=x8189;
CheckValue<IkReal> x9851 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9848),IKFAST_ATAN2_MAGTHRESH);
if(!x9851.valid){
continue;
}
IkReal x9850=((-1.0)*(x9851.value));
sj5=gconst1;
cj5=gconst2;
j5=x9850;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9850;
IkReal gconst1=(r21*x9849);
IkReal gconst2=(x9848*x9849);
IkReal x9852=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9856=IKPowWithIntegerCheck(x9852,-1);
if(!x9856.valid){
continue;
}
IkReal x9853=x9856.value;
IkReal x9854=((1.0)*x9853);
IkReal x9855=((((-2.0)*r00*r01*r20*r21*x9853))+(((-1.0)*(r02*r02)))+(((-1.0)*x9854*(r00*r00)*(r20*r20)))+(((-1.0)*x9854*(r01*r01)*(r21*r21))));
j4eval[0]=x9855;
j4eval[1]=IKsign(x9855);
j4eval[2]=r02;
j4eval[3]=x9852;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9857=((-1.0)*r20);
IkReal x9858=x8189;
CheckValue<IkReal> x9860 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9857),IKFAST_ATAN2_MAGTHRESH);
if(!x9860.valid){
continue;
}
IkReal x9859=((-1.0)*(x9860.value));
sj5=gconst1;
cj5=gconst2;
j5=x9859;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9859;
IkReal gconst1=(r21*x9858);
IkReal gconst2=(x9857*x9858);
IkReal x9861=r22*r22;
IkReal x9862=(r02*sj1*sj2);
IkReal x9863=(cj1*cj2*r02);
CheckValue<IkReal> x9867=IKPowWithIntegerCheck(((-1.0)+x9861),-1);
if(!x9867.valid){
continue;
}
IkReal x9864=x9867.value;
if((((1.0)+(((-1.0)*x9861)))) < -0.00001)
continue;
IkReal x9865=IKsqrt(((1.0)+(((-1.0)*x9861))));
IkReal x9866=(r22*x9864*x9865);
j4eval[0]=((IKabs((((x9862*x9866))+(((-1.0)*x9863*x9866)))))+(IKabs(((((-1.0)*x9862))+x9863))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9868=(gconst2*r00);
IkReal x9869=(gconst1*r01);
IkReal x9870=(cj1*cj2);
IkReal x9871=((1.0)*sj1*sj2);
CheckValue<IkReal> x9872 = IKatan2WithCheck(IkReal((((sj1*sj2*x9869))+((x9868*x9870))+(((-1.0)*x9868*x9871))+(((-1.0)*x9869*x9870)))),IkReal((((r02*x9870))+(((-1.0)*r02*x9871)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9872.valid){
continue;
}
CheckValue<IkReal> x9873=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9872.value)+(((1.5707963267949)*(x9873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9874=IKcos(j4);
IkReal x9875=IKsin(j4);
IkReal x9876=((1.0)*x9874);
IkReal x9877=(gconst1*x9874);
IkReal x9878=(gconst1*x9875);
IkReal x9879=((1.0)*gconst2*x9875);
evalcond[0]=(((r02*x9875))+(((-1.0)*gconst2*r00*x9876))+((r01*x9877)));
evalcond[1]=((((-1.0)*r20*x9879))+((r21*x9878))+(((-1.0)*r22*x9876)));
evalcond[2]=((((-1.0)*r10*x9879))+((r11*x9878))+(((-1.0)*r12*x9876)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9876))+((r01*x9878))+(((-1.0)*r00*x9879)));
evalcond[4]=(((cj2*sj1))+((r12*x9875))+((cj1*sj2))+(((-1.0)*gconst2*r10*x9876))+((r11*x9877)));
evalcond[5]=((((-1.0)*gconst2*r20*x9876))+((r21*x9877))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x9875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9880=(gconst1*r01);
IkReal x9881=(gconst2*r00);
CheckValue<IkReal> x9882 = IKatan2WithCheck(IkReal(((((-1.0)*x9881))+x9880)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9882.valid){
continue;
}
CheckValue<IkReal> x9883=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x9881*x9881)))+(((2.0)*x9880*x9881))+(((-1.0)*(x9880*x9880))))),-1);
if(!x9883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9882.value)+(((1.5707963267949)*(x9883.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9884=IKcos(j4);
IkReal x9885=IKsin(j4);
IkReal x9886=((1.0)*x9884);
IkReal x9887=(gconst1*x9884);
IkReal x9888=(gconst1*x9885);
IkReal x9889=((1.0)*gconst2*x9885);
evalcond[0]=((((-1.0)*gconst2*r00*x9886))+((r01*x9887))+((r02*x9885)));
evalcond[1]=((((-1.0)*r22*x9886))+((r21*x9888))+(((-1.0)*r20*x9889)));
evalcond[2]=((((-1.0)*r10*x9889))+((r11*x9888))+(((-1.0)*r12*x9886)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9889))+((r01*x9888))+(((-1.0)*r02*x9886)));
evalcond[4]=(((cj2*sj1))+((r12*x9885))+((cj1*sj2))+((r11*x9887))+(((-1.0)*gconst2*r10*x9886)));
evalcond[5]=(((r21*x9887))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x9886))+((r22*x9885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9890 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9890.valid){
continue;
}
CheckValue<IkReal> x9891=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9890.value)+(((1.5707963267949)*(x9891.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9892=IKcos(j4);
IkReal x9893=IKsin(j4);
IkReal x9894=((1.0)*x9892);
IkReal x9895=(gconst1*x9892);
IkReal x9896=(gconst1*x9893);
IkReal x9897=((1.0)*gconst2*x9893);
evalcond[0]=(((r01*x9895))+((r02*x9893))+(((-1.0)*gconst2*r00*x9894)));
evalcond[1]=((((-1.0)*r20*x9897))+((r21*x9896))+(((-1.0)*r22*x9894)));
evalcond[2]=((((-1.0)*r12*x9894))+((r11*x9896))+(((-1.0)*r10*x9897)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9897))+((r01*x9896))+(((-1.0)*r02*x9894)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x9895))+((r12*x9893))+(((-1.0)*gconst2*r10*x9894)));
evalcond[5]=(((r22*x9893))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x9895))+(((-1.0)*gconst2*r20*x9894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9898=((-1.0)*r20);
IkReal x9899=((-1.0)*r21);
CheckValue<IkReal> x9901 = IKatan2WithCheck(IkReal(x9899),IkReal(x9898),IKFAST_ATAN2_MAGTHRESH);
if(!x9901.valid){
continue;
}
IkReal x9900=((-1.0)*(x9901.value));
sj5=gconst1;
cj5=gconst2;
j5=x9900;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9898);
rxp0_2=(py*r00);
rxp1_0=(py*x9899);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9900;
IkReal gconst1=r21;
IkReal gconst2=x9898;
IkReal x9902=(r00*r20);
IkReal x9903=((1.0)*cj3);
IkReal x9904=(r01*r21);
j4eval[0]=(x9904+x9902);
j4eval[1]=((((-1.0)*x9902*x9903))+(((-1.0)*x9903*x9904)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9905=((-1.0)*r20);
IkReal x9906=((-1.0)*r21);
CheckValue<IkReal> x9908 = IKatan2WithCheck(IkReal(x9906),IkReal(x9905),IKFAST_ATAN2_MAGTHRESH);
if(!x9908.valid){
continue;
}
IkReal x9907=((-1.0)*(x9908.value));
sj5=gconst1;
cj5=gconst2;
j5=x9907;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9905);
rxp0_2=(py*r00);
rxp1_0=(py*x9906);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9907;
IkReal gconst1=r21;
IkReal gconst2=x9905;
IkReal x9909=((1.0)*sj3);
IkReal x9910=(r01*r21);
IkReal x9911=(r00*r20);
j4eval[0]=(x9911+x9910);
j4eval[1]=((((-1.0)*x9909*x9911))+(((-1.0)*x9909*x9910)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9912=((-1.0)*r20);
IkReal x9913=((-1.0)*r21);
CheckValue<IkReal> x9915 = IKatan2WithCheck(IkReal(x9913),IkReal(x9912),IKFAST_ATAN2_MAGTHRESH);
if(!x9915.valid){
continue;
}
IkReal x9914=((-1.0)*(x9915.value));
sj5=gconst1;
cj5=gconst2;
j5=x9914;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9912);
rxp0_2=(py*r00);
rxp1_0=(py*x9913);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9914;
IkReal gconst1=r21;
IkReal gconst2=x9912;
IkReal x9916=((1.0)*sj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r01*r21*x9916))+(((-1.0)*r00*r20*x9916)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9917=((1.0)*r01);
CheckValue<IkReal> x9918=IKPowWithIntegerCheck(r12,-1);
if(!x9918.valid){
continue;
}
CheckValue<IkReal> x9919=IKPowWithIntegerCheck(sj3,-1);
if(!x9919.valid){
continue;
}
CheckValue<IkReal> x9920=IKPowWithIntegerCheck(((((-1.0)*gconst1*sj3*x9917))+((gconst2*r00*sj3))),-1);
if(!x9920.valid){
continue;
}
if( IKabs(((x9918.value)*(x9919.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9920.value)*(((((-1.0)*cj3*gconst2*x9917))+(((-1.0)*cj3*gconst1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9918.value)*(x9919.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x9920.value)*(((((-1.0)*cj3*gconst2*x9917))+(((-1.0)*cj3*gconst1*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9918.value)*(x9919.value)*((((cj2*sj1))+((cj1*sj2))))), ((x9920.value)*(((((-1.0)*cj3*gconst2*x9917))+(((-1.0)*cj3*gconst1*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9921=IKsin(j4);
IkReal x9922=IKcos(j4);
IkReal x9923=(sj1*sj2);
IkReal x9924=((1.0)*sj3);
IkReal x9925=(gconst1*r01);
IkReal x9926=(cj3*r00);
IkReal x9927=((1.0)*cj2);
IkReal x9928=(gconst2*r21);
IkReal x9929=(cj3*gconst1);
IkReal x9930=(cj1*sj2);
IkReal x9931=(gconst2*r01);
IkReal x9932=((1.0)*cj3);
IkReal x9933=(cj1*x9927);
IkReal x9934=(r12*x9921);
IkReal x9935=(gconst2*x9922);
IkReal x9936=(r21*x9922);
IkReal x9937=((1.0)*gconst2*x9921);
evalcond[0]=((-1.0)*r12*x9922);
evalcond[1]=((((-1.0)*r20*x9937))+((gconst1*r21*x9921)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*x9924*x9934))+x9930);
evalcond[3]=((1.0)+(((-1.0)*r00*x9937))+((x9921*x9925)));
evalcond[4]=((((-1.0)*x9933))+x9923+(((-1.0)*x9932*x9934)));
evalcond[5]=(((cj3*x9931))+((gconst1*x9926))+(((-1.0)*x9922*x9924*x9925))+((r00*sj3*x9935)));
evalcond[6]=((((-1.0)*gconst1*r00*x9924))+((x9926*x9935))+(((-1.0)*x9924*x9931))+(((-1.0)*x9922*x9925*x9932)));
evalcond[7]=((((-1.0)*x9933))+((r20*sj3*x9935))+((cj3*x9928))+((r20*x9929))+(((-1.0)*gconst1*x9924*x9936))+x9923);
evalcond[8]=((((-1.0)*x9929*x9936))+(((-1.0)*gconst1*r20*x9924))+(((-1.0)*x9930))+(((-1.0)*sj1*x9927))+((cj3*r20*x9935))+(((-1.0)*x9924*x9928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9938=(gconst1*r01);
IkReal x9939=((1.0)*gconst2);
CheckValue<IkReal> x9940=IKPowWithIntegerCheck(((((-1.0)*r00*x9939))+x9938),-1);
if(!x9940.valid){
continue;
}
CheckValue<IkReal> x9941=IKPowWithIntegerCheck(((((-1.0)*sj3*x9938))+((gconst2*r00*sj3))),-1);
if(!x9941.valid){
continue;
}
if( IKabs(((-1.0)*(x9940.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9941.value)*(((((-1.0)*cj3*r01*x9939))+(((-1.0)*cj3*gconst1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9940.value)))+IKsqr(((x9941.value)*(((((-1.0)*cj3*r01*x9939))+(((-1.0)*cj3*gconst1*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9940.value)), ((x9941.value)*(((((-1.0)*cj3*r01*x9939))+(((-1.0)*cj3*gconst1*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9942=IKsin(j4);
IkReal x9943=IKcos(j4);
IkReal x9944=(sj1*sj2);
IkReal x9945=((1.0)*sj3);
IkReal x9946=(gconst1*r01);
IkReal x9947=(cj3*r00);
IkReal x9948=((1.0)*cj2);
IkReal x9949=(gconst2*r21);
IkReal x9950=(cj3*gconst1);
IkReal x9951=(cj1*sj2);
IkReal x9952=(gconst2*r01);
IkReal x9953=((1.0)*cj3);
IkReal x9954=(cj1*x9948);
IkReal x9955=(r12*x9942);
IkReal x9956=(gconst2*x9943);
IkReal x9957=(r21*x9943);
IkReal x9958=((1.0)*gconst2*x9942);
evalcond[0]=((-1.0)*r12*x9943);
evalcond[1]=((((-1.0)*r20*x9958))+((gconst1*r21*x9942)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*x9945*x9955))+x9951);
evalcond[3]=((1.0)+(((-1.0)*r00*x9958))+((x9942*x9946)));
evalcond[4]=((((-1.0)*x9953*x9955))+(((-1.0)*x9954))+x9944);
evalcond[5]=(((r00*sj3*x9956))+((cj3*x9952))+(((-1.0)*x9943*x9945*x9946))+((gconst1*x9947)));
evalcond[6]=((((-1.0)*x9943*x9946*x9953))+(((-1.0)*x9945*x9952))+((x9947*x9956))+(((-1.0)*gconst1*r00*x9945)));
evalcond[7]=(((r20*x9950))+((r20*sj3*x9956))+(((-1.0)*gconst1*x9945*x9957))+((cj3*x9949))+(((-1.0)*x9954))+x9944);
evalcond[8]=((((-1.0)*x9951))+((cj3*r20*x9956))+(((-1.0)*x9945*x9949))+(((-1.0)*gconst1*r20*x9945))+(((-1.0)*sj1*x9948))+(((-1.0)*x9950*x9957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9959=(gconst1*r01);
IkReal x9960=(gconst2*r00);
CheckValue<IkReal> x9961=IKPowWithIntegerCheck((x9959+(((-1.0)*x9960))),-1);
if(!x9961.valid){
continue;
}
CheckValue<IkReal> x9962=IKPowWithIntegerCheck(((((-1.0)*cj3*x9959))+((cj3*x9960))),-1);
if(!x9962.valid){
continue;
}
if( IKabs(((-1.0)*(x9961.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9962.value)*((((gconst1*r00*sj3))+((gconst2*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9961.value)))+IKsqr(((x9962.value)*((((gconst1*r00*sj3))+((gconst2*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9961.value)), ((x9962.value)*((((gconst1*r00*sj3))+((gconst2*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9963=IKsin(j4);
IkReal x9964=IKcos(j4);
IkReal x9965=(sj1*sj2);
IkReal x9966=((1.0)*sj3);
IkReal x9967=(gconst1*r01);
IkReal x9968=(cj3*r00);
IkReal x9969=((1.0)*cj2);
IkReal x9970=(gconst2*r21);
IkReal x9971=(cj3*gconst1);
IkReal x9972=(cj1*sj2);
IkReal x9973=(gconst2*r01);
IkReal x9974=((1.0)*cj3);
IkReal x9975=(cj1*x9969);
IkReal x9976=(r12*x9963);
IkReal x9977=(gconst2*x9964);
IkReal x9978=(r21*x9964);
IkReal x9979=((1.0)*gconst2*x9963);
evalcond[0]=((-1.0)*r12*x9964);
evalcond[1]=(((gconst1*r21*x9963))+(((-1.0)*r20*x9979)));
evalcond[2]=((((-1.0)*x9966*x9976))+((cj2*sj1))+x9972);
evalcond[3]=((1.0)+(((-1.0)*r00*x9979))+((x9963*x9967)));
evalcond[4]=((((-1.0)*x9974*x9976))+x9965+(((-1.0)*x9975)));
evalcond[5]=(((r00*sj3*x9977))+((gconst1*x9968))+((cj3*x9973))+(((-1.0)*x9964*x9966*x9967)));
evalcond[6]=((((-1.0)*x9966*x9973))+(((-1.0)*x9964*x9967*x9974))+(((-1.0)*gconst1*r00*x9966))+((x9968*x9977)));
evalcond[7]=(((cj3*x9970))+((r20*x9971))+((r20*sj3*x9977))+x9965+(((-1.0)*x9975))+(((-1.0)*gconst1*x9966*x9978)));
evalcond[8]=((((-1.0)*x9966*x9970))+(((-1.0)*sj1*x9969))+(((-1.0)*x9972))+((cj3*r20*x9977))+(((-1.0)*x9971*x9978))+(((-1.0)*gconst1*r20*x9966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9980=gconst2*gconst2;
IkReal x9981=gconst1*gconst1;
IkReal x9982=(r10*sj3);
IkReal x9983=(gconst1*gconst2);
IkReal x9984=((1.0)*r01);
IkReal x9985=(cj3*r10);
IkReal x9986=(r12*sj3);
IkReal x9987=(cj3*r11);
IkReal x9988=((1.0)*r00);
IkReal x9989=((1.0)*r11*sj3);
CheckValue<IkReal> x9990 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*x9986*x9988))+(((-1.0)*gconst2*x9984*x9986)))),IkReal(((((-1.0)*r11*sj3*x9981*x9988))+((r00*x9982*x9983))+((r01*x9980*x9982))+(((-1.0)*r11*sj3*x9983*x9984)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9990.valid){
continue;
}
CheckValue<IkReal> x9991=IKPowWithIntegerCheck(IKsign((((r00*x9980*x9985))+((cj3*r02*r12))+(((-1.0)*x9983*x9984*x9985))+((r01*x9981*x9987))+(((-1.0)*x9983*x9987*x9988)))),-1);
if(!x9991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9990.value)+(((1.5707963267949)*(x9991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9992=IKsin(j4);
IkReal x9993=IKcos(j4);
IkReal x9994=(sj1*sj2);
IkReal x9995=((1.0)*sj3);
IkReal x9996=(gconst1*sj3);
IkReal x9997=(cj3*r00);
IkReal x9998=(cj3*gconst1);
IkReal x9999=((1.0)*cj2);
IkReal x10000=(gconst2*r21);
IkReal x10001=(cj1*sj2);
IkReal x10002=(gconst2*r01);
IkReal x10003=(gconst2*r11);
IkReal x10004=(cj1*x9999);
IkReal x10005=((1.0)*x9993);
IkReal x10006=(r12*x9992);
IkReal x10007=(gconst2*x9993);
IkReal x10008=(gconst1*x9992);
IkReal x10009=((1.0)*cj3*x9992);
IkReal x10010=((1.0)*gconst2*x9992);
evalcond[0]=((((-1.0)*r20*x10010))+(((-1.0)*r22*x10005))+((r21*x10008)));
evalcond[1]=((((-1.0)*r12*x10005))+((r11*x10008))+(((-1.0)*r10*x10010)));
evalcond[2]=((1.0)+(((-1.0)*r02*x10005))+((r01*x10008))+(((-1.0)*r00*x10010)));
evalcond[3]=((((-1.0)*gconst1*r01*x9993*x9995))+((gconst1*x9997))+((r00*sj3*x10007))+((cj3*x10002))+(((-1.0)*r02*x9992*x9995)));
evalcond[4]=((((-1.0)*r02*x10009))+(((-1.0)*x10002*x9995))+(((-1.0)*gconst1*r00*x9995))+((x10007*x9997))+(((-1.0)*r01*x10005*x9998)));
evalcond[5]=(((cj2*sj1))+((r10*x9998))+(((-1.0)*x10006*x9995))+((cj3*x10003))+x10001+(((-1.0)*gconst1*r11*x9993*x9995))+((r10*sj3*x10007)));
evalcond[6]=((((-1.0)*r22*x9992*x9995))+(((-1.0)*gconst1*r21*x9993*x9995))+((cj3*x10000))+((r20*sj3*x10007))+((r20*x9998))+x9994+(((-1.0)*x10004)));
evalcond[7]=((((-1.0)*gconst1*r10*x9995))+(((-1.0)*x10003*x9995))+(((-1.0)*cj3*x10006))+x9994+((cj3*r10*x10007))+(((-1.0)*r11*x10005*x9998))+(((-1.0)*x10004)));
evalcond[8]=((((-1.0)*gconst1*r20*x9995))+(((-1.0)*r22*x10009))+(((-1.0)*x10001))+(((-1.0)*x10000*x9995))+((cj3*r20*x10007))+(((-1.0)*r21*x10005*x9998))+(((-1.0)*sj1*x9999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10011=gconst2*gconst2;
IkReal x10012=gconst1*gconst1;
IkReal x10013=(gconst1*r00);
IkReal x10014=(r11*sj3);
IkReal x10015=((1.0)*gconst2);
IkReal x10016=(cj3*r12);
IkReal x10017=(cj3*r11);
IkReal x10018=(gconst2*r01);
IkReal x10019=(cj3*r10);
IkReal x10020=(r10*sj3);
CheckValue<IkReal> x10021=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x10013*x10014*x10015))+((r00*x10011*x10020))+((r01*x10012*x10014))+(((-1.0)*gconst1*r01*x10015*x10020)))),-1);
if(!x10021.valid){
continue;
}
CheckValue<IkReal> x10022 = IKatan2WithCheck(IkReal((((x10013*x10016))+((x10016*x10018)))),IkReal((((r00*x10012*x10017))+(((-1.0)*r01*x10011*x10019))+((gconst1*x10017*x10018))+(((-1.0)*x10013*x10015*x10019)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10021.value)))+(x10022.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10023=IKsin(j4);
IkReal x10024=IKcos(j4);
IkReal x10025=(sj1*sj2);
IkReal x10026=((1.0)*sj3);
IkReal x10027=(gconst1*sj3);
IkReal x10028=(cj3*r00);
IkReal x10029=(cj3*gconst1);
IkReal x10030=((1.0)*cj2);
IkReal x10031=(gconst2*r21);
IkReal x10032=(cj1*sj2);
IkReal x10033=(gconst2*r01);
IkReal x10034=(gconst2*r11);
IkReal x10035=(cj1*x10030);
IkReal x10036=((1.0)*x10024);
IkReal x10037=(r12*x10023);
IkReal x10038=(gconst2*x10024);
IkReal x10039=(gconst1*x10023);
IkReal x10040=((1.0)*cj3*x10023);
IkReal x10041=((1.0)*gconst2*x10023);
evalcond[0]=(((r21*x10039))+(((-1.0)*r22*x10036))+(((-1.0)*r20*x10041)));
evalcond[1]=((((-1.0)*r10*x10041))+((r11*x10039))+(((-1.0)*r12*x10036)));
evalcond[2]=((1.0)+(((-1.0)*r00*x10041))+(((-1.0)*r02*x10036))+((r01*x10039)));
evalcond[3]=((((-1.0)*gconst1*r01*x10024*x10026))+((gconst1*x10028))+((r00*sj3*x10038))+((cj3*x10033))+(((-1.0)*r02*x10023*x10026)));
evalcond[4]=((((-1.0)*r02*x10040))+(((-1.0)*r01*x10029*x10036))+(((-1.0)*gconst1*r00*x10026))+((x10028*x10038))+(((-1.0)*x10026*x10033)));
evalcond[5]=(((cj2*sj1))+((r10*x10029))+x10032+(((-1.0)*gconst1*r11*x10024*x10026))+((cj3*x10034))+(((-1.0)*x10026*x10037))+((r10*sj3*x10038)));
evalcond[6]=((((-1.0)*gconst1*r21*x10024*x10026))+((r20*x10029))+x10025+((cj3*x10031))+(((-1.0)*x10035))+((r20*sj3*x10038))+(((-1.0)*r22*x10023*x10026)));
evalcond[7]=((((-1.0)*r11*x10029*x10036))+(((-1.0)*gconst1*r10*x10026))+x10025+(((-1.0)*x10035))+(((-1.0)*cj3*x10037))+(((-1.0)*x10026*x10034))+((cj3*r10*x10038)));
evalcond[8]=((((-1.0)*x10032))+(((-1.0)*r21*x10029*x10036))+(((-1.0)*gconst1*r20*x10026))+((cj3*r20*x10038))+(((-1.0)*r22*x10040))+(((-1.0)*x10026*x10031))+(((-1.0)*sj1*x10030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10042 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10042.valid){
continue;
}
CheckValue<IkReal> x10043=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x10043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10042.value)+(((1.5707963267949)*(x10043.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10044=IKsin(j4);
IkReal x10045=IKcos(j4);
IkReal x10046=(sj1*sj2);
IkReal x10047=((1.0)*sj3);
IkReal x10048=(gconst1*sj3);
IkReal x10049=(cj3*r00);
IkReal x10050=(cj3*gconst1);
IkReal x10051=((1.0)*cj2);
IkReal x10052=(gconst2*r21);
IkReal x10053=(cj1*sj2);
IkReal x10054=(gconst2*r01);
IkReal x10055=(gconst2*r11);
IkReal x10056=(cj1*x10051);
IkReal x10057=((1.0)*x10045);
IkReal x10058=(r12*x10044);
IkReal x10059=(gconst2*x10045);
IkReal x10060=(gconst1*x10044);
IkReal x10061=((1.0)*cj3*x10044);
IkReal x10062=((1.0)*gconst2*x10044);
evalcond[0]=((((-1.0)*r20*x10062))+((r21*x10060))+(((-1.0)*r22*x10057)));
evalcond[1]=((((-1.0)*r12*x10057))+(((-1.0)*r10*x10062))+((r11*x10060)));
evalcond[2]=((1.0)+((r01*x10060))+(((-1.0)*r00*x10062))+(((-1.0)*r02*x10057)));
evalcond[3]=((((-1.0)*gconst1*r01*x10045*x10047))+((gconst1*x10049))+(((-1.0)*r02*x10044*x10047))+((r00*sj3*x10059))+((cj3*x10054)));
evalcond[4]=((((-1.0)*gconst1*r00*x10047))+(((-1.0)*r01*x10050*x10057))+(((-1.0)*x10047*x10054))+((x10049*x10059))+(((-1.0)*r02*x10061)));
evalcond[5]=(((cj2*sj1))+((r10*x10050))+((r10*sj3*x10059))+x10053+(((-1.0)*x10047*x10058))+(((-1.0)*gconst1*r11*x10045*x10047))+((cj3*x10055)));
evalcond[6]=(((r20*sj3*x10059))+((r20*x10050))+(((-1.0)*x10056))+(((-1.0)*r22*x10044*x10047))+x10046+(((-1.0)*gconst1*r21*x10045*x10047))+((cj3*x10052)));
evalcond[7]=((((-1.0)*cj3*x10058))+(((-1.0)*x10056))+(((-1.0)*gconst1*r10*x10047))+(((-1.0)*r11*x10050*x10057))+x10046+((cj3*r10*x10059))+(((-1.0)*x10047*x10055)));
evalcond[8]=((((-1.0)*x10053))+((cj3*r20*x10059))+(((-1.0)*sj1*x10051))+(((-1.0)*x10047*x10052))+(((-1.0)*gconst1*r20*x10047))+(((-1.0)*r22*x10061))+(((-1.0)*r21*x10050*x10057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10063=((-1.0)*r20);
IkReal x10064=((-1.0)*px);
CheckValue<IkReal> x10066 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10063),IKFAST_ATAN2_MAGTHRESH);
if(!x10066.valid){
continue;
}
IkReal x10065=((-1.0)*(x10066.value));
sj5=gconst1;
cj5=gconst2;
j5=x10065;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10064);
rxp1_1=(px*r21);
rxp1_2=(r11*x10064);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10065;
IkReal gconst1=r21;
IkReal gconst2=x10063;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10067=((-1.0)*r20);
IkReal x10068=((-1.0)*px);
CheckValue<IkReal> x10070 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10067),IKFAST_ATAN2_MAGTHRESH);
if(!x10070.valid){
continue;
}
IkReal x10069=((-1.0)*(x10070.value));
sj5=gconst1;
cj5=gconst2;
j5=x10069;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10068);
rxp1_1=(px*r21);
rxp1_2=(r11*x10068);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10069;
IkReal gconst1=r21;
IkReal gconst2=x10067;
IkReal x10071=((1.0)*sj3);
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=((((-1.0)*x10071))+((sj3*(r10*r10)))+(((-1.0)*x10071*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10072=((-1.0)*r20);
IkReal x10073=((-1.0)*px);
CheckValue<IkReal> x10075 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10072),IKFAST_ATAN2_MAGTHRESH);
if(!x10075.valid){
continue;
}
IkReal x10074=((-1.0)*(x10075.value));
sj5=gconst1;
cj5=gconst2;
j5=x10074;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10073);
rxp1_1=(px*r21);
rxp1_2=(r11*x10073);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10074;
IkReal gconst1=r21;
IkReal gconst2=x10072;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10076=((-1.0)*r20);
IkReal x10077=((-1.0)*px);
CheckValue<IkReal> x10079 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10076),IKFAST_ATAN2_MAGTHRESH);
if(!x10079.valid){
continue;
}
IkReal x10078=((-1.0)*(x10079.value));
sj5=gconst1;
cj5=gconst2;
j5=x10078;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10077);
rxp1_1=(px*r21);
rxp1_2=(r11*x10077);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x10078;
IkReal gconst1=r21;
IkReal gconst2=x10076;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10080=((-1.0)*r20);
IkReal x10081=((-1.0)*px);
CheckValue<IkReal> x10083 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10080),IKFAST_ATAN2_MAGTHRESH);
if(!x10083.valid){
continue;
}
IkReal x10082=((-1.0)*(x10083.value));
sj5=gconst1;
cj5=gconst2;
j5=x10082;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10081);
rxp1_1=(px*r21);
rxp1_2=(r11*x10081);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x10082;
IkReal gconst1=r21;
IkReal gconst2=x10080;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10084=((-1.0)*r20);
IkReal x10085=((-1.0)*px);
CheckValue<IkReal> x10087 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10084),IKFAST_ATAN2_MAGTHRESH);
if(!x10087.valid){
continue;
}
IkReal x10086=((-1.0)*(x10087.value));
sj5=gconst1;
cj5=gconst2;
j5=x10086;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10085);
rxp1_1=(px*r21);
rxp1_2=(r11*x10085);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x10086;
IkReal gconst1=r21;
IkReal gconst2=x10084;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10090=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x10090.valid){
continue;
}
IkReal x10088=x10090.value;
IkReal x10089=(sj0*x10088);
cj4array[0]=(((cj1*sj2*x10089))+((cj2*sj1*x10089)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10091=IKsin(j4);
IkReal x10092=IKcos(j4);
IkReal x10093=(gconst1*x10091);
IkReal x10094=((1.0)*x10092);
IkReal x10095=((1.0)*gconst2*x10091);
evalcond[0]=((-1.0)*r02*x10091);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x10094)));
evalcond[2]=((((-1.0)*r20*x10095))+((r21*x10093)));
evalcond[3]=(((r11*x10093))+(((-1.0)*r10*x10095)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r21*x10094))+((gconst2*r20*x10092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10097=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x10097.valid){
continue;
}
IkReal x10096=x10097.value;
cj4array[0]=((((-1.0)*sj1*sj2*x10096))+((cj1*cj2*x10096)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10098=IKsin(j4);
IkReal x10099=IKcos(j4);
IkReal x10100=(gconst2*r10);
IkReal x10101=((1.0)*sj0);
IkReal x10102=((1.0)*x10098);
IkReal x10103=(gconst1*x10098);
IkReal x10104=((1.0)*x10099);
evalcond[0]=((-1.0)*r02*x10098);
evalcond[1]=((((-1.0)*r02*x10104))+(((-1.0)*x10101)));
evalcond[2]=(((r21*x10103))+(((-1.0)*gconst2*r20*x10102)));
evalcond[3]=((((-1.0)*x10100*x10102))+((r11*x10103)));
evalcond[4]=((((-1.0)*gconst1*r11*x10104))+(((-1.0)*cj1*sj2*x10101))+((x10099*x10100))+(((-1.0)*cj2*sj1*x10101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10105=IKPowWithIntegerCheck(r02,-1);
if(!x10105.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10105.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10106=IKsin(j4);
IkReal x10107=IKcos(j4);
IkReal x10108=(gconst2*r10);
IkReal x10109=((1.0)*sj0);
IkReal x10110=(gconst1*r11);
IkReal x10111=(gconst1*r21);
IkReal x10112=(gconst2*r20);
IkReal x10113=((1.0)*x10106);
IkReal x10114=((1.0)*x10107);
evalcond[0]=((-1.0)*r02*x10106);
evalcond[1]=(((x10106*x10111))+(((-1.0)*x10112*x10113)));
evalcond[2]=(((x10106*x10110))+(((-1.0)*x10108*x10113)));
evalcond[3]=(((x10107*x10112))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10111*x10114)));
evalcond[4]=((((-1.0)*x10110*x10114))+(((-1.0)*cj1*sj2*x10109))+((x10107*x10108))+(((-1.0)*cj2*sj1*x10109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10115=((-1.0)*r20);
IkReal x10116=((-1.0)*px);
CheckValue<IkReal> x10118 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10115),IKFAST_ATAN2_MAGTHRESH);
if(!x10118.valid){
continue;
}
IkReal x10117=((-1.0)*(x10118.value));
sj5=gconst1;
cj5=gconst2;
j5=x10117;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10116);
rxp1_1=(px*r21);
rxp1_2=(r11*x10116);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x10117;
IkReal gconst1=r21;
IkReal gconst2=x10115;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10119=((-1.0)*r20);
IkReal x10120=((-1.0)*px);
CheckValue<IkReal> x10122 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10119),IKFAST_ATAN2_MAGTHRESH);
if(!x10122.valid){
continue;
}
IkReal x10121=((-1.0)*(x10122.value));
sj5=gconst1;
cj5=gconst2;
j5=x10121;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10120);
rxp1_1=(px*r21);
rxp1_2=(r11*x10120);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x10121;
IkReal gconst1=r21;
IkReal gconst2=x10119;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10123=((-1.0)*r20);
IkReal x10124=((-1.0)*px);
CheckValue<IkReal> x10126 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10123),IKFAST_ATAN2_MAGTHRESH);
if(!x10126.valid){
continue;
}
IkReal x10125=((-1.0)*(x10126.value));
sj5=gconst1;
cj5=gconst2;
j5=x10125;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10124);
rxp1_1=(px*r21);
rxp1_2=(r11*x10124);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x10125;
IkReal gconst1=r21;
IkReal gconst2=x10123;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10129=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10129.valid){
continue;
}
IkReal x10127=x10129.value;
IkReal x10128=(sj0*x10127);
cj4array[0]=(((cj1*sj2*x10128))+((cj2*sj1*x10128)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10130=IKsin(j4);
IkReal x10131=IKcos(j4);
IkReal x10132=((1.0)*gconst2);
IkReal x10133=(gconst1*r21);
evalcond[0]=(r02*x10130);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x10131)));
evalcond[2]=((((-1.0)*r20*x10130*x10132))+((x10130*x10133)));
evalcond[3]=((((-1.0)*r10*x10130*x10132))+((gconst1*r11*x10130)));
evalcond[4]=((((-1.0)*r20*x10131*x10132))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10131*x10133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10135=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x10135.valid){
continue;
}
IkReal x10134=x10135.value;
cj4array[0]=((((-1.0)*sj1*sj2*x10134))+((cj1*cj2*x10134)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10136=IKsin(j4);
IkReal x10137=IKcos(j4);
IkReal x10138=((1.0)*sj0);
IkReal x10139=(gconst1*x10136);
IkReal x10140=((1.0)*x10137);
IkReal x10141=((1.0)*gconst2*x10136);
evalcond[0]=(r02*x10136);
evalcond[1]=((((-1.0)*r02*x10140))+(((-1.0)*x10138)));
evalcond[2]=(((r21*x10139))+(((-1.0)*r20*x10141)));
evalcond[3]=(((r11*x10139))+(((-1.0)*r10*x10141)));
evalcond[4]=((((-1.0)*cj1*sj2*x10138))+((gconst1*r11*x10137))+(((-1.0)*cj2*sj1*x10138))+(((-1.0)*gconst2*r10*x10140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10142=IKPowWithIntegerCheck(r02,-1);
if(!x10142.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10142.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10143=IKsin(j4);
IkReal x10144=IKcos(j4);
IkReal x10145=(gconst1*r21);
IkReal x10146=((1.0)*sj0);
IkReal x10147=(gconst1*r11);
IkReal x10148=((1.0)*gconst2*r10);
IkReal x10149=((1.0)*gconst2*r20);
evalcond[0]=(r02*x10143);
evalcond[1]=((((-1.0)*x10143*x10149))+((x10143*x10145)));
evalcond[2]=((((-1.0)*x10143*x10148))+((x10143*x10147)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10144*x10149))+((x10144*x10145)));
evalcond[4]=((((-1.0)*cj1*sj2*x10146))+(((-1.0)*x10144*x10148))+((x10144*x10147))+(((-1.0)*cj2*sj1*x10146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10151=IKPowWithIntegerCheck(r02,-1);
if(!x10151.valid){
continue;
}
IkReal x10150=x10151.value;
CheckValue<IkReal> x10152=IKPowWithIntegerCheck(cj3,-1);
if(!x10152.valid){
continue;
}
if( IKabs((x10150*(x10152.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x10150)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10150*(x10152.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x10150))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10150*(x10152.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x10150));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10153=IKsin(j4);
IkReal x10154=IKcos(j4);
IkReal x10155=(gconst2*r10);
IkReal x10156=(gconst1*r11);
IkReal x10157=(cj1*cj2);
IkReal x10158=(cj3*gconst1);
IkReal x10159=(sj1*sj2);
IkReal x10160=(gconst2*r20);
IkReal x10161=((1.0)*r21);
IkReal x10162=(gconst2*sj3);
IkReal x10163=((1.0)*sj0);
IkReal x10164=(cj3*gconst2);
IkReal x10165=(sj3*x10154);
IkReal x10166=((1.0)*x10154);
IkReal x10167=((1.0)*cj2*sj1);
IkReal x10168=((1.0)*cj1*sj2);
IkReal x10169=(cj3*x10154);
IkReal x10170=((1.0)*gconst1*sj3);
IkReal x10171=((1.0)*x10153);
IkReal x10172=(r02*x10171);
evalcond[0]=((((-1.0)*x10163))+(((-1.0)*r02*x10166)));
evalcond[1]=((((-1.0)*x10160*x10171))+((gconst1*r21*x10153)));
evalcond[2]=(((x10153*x10156))+cj0+(((-1.0)*x10155*x10171)));
evalcond[3]=((((-1.0)*cj3*x10172))+(((-1.0)*cj0*x10159))+((cj0*x10157)));
evalcond[4]=((((-1.0)*cj0*x10167))+(((-1.0)*cj0*x10168))+(((-1.0)*sj3*x10172)));
evalcond[5]=(((x10160*x10165))+x10159+(((-1.0)*x10157))+((r21*x10164))+(((-1.0)*gconst1*x10161*x10165))+((r20*x10158)));
evalcond[6]=(((x10160*x10169))+(((-1.0)*r20*x10170))+(((-1.0)*x10168))+(((-1.0)*x10167))+(((-1.0)*x10161*x10162))+(((-1.0)*x10154*x10158*x10161)));
evalcond[7]=((((-1.0)*cj2*sj1*x10163))+((x10155*x10165))+((r10*x10158))+((r11*x10164))+(((-1.0)*x10156*x10165))+(((-1.0)*cj1*sj2*x10163)));
evalcond[8]=((((-1.0)*cj3*x10156*x10166))+((x10155*x10169))+(((-1.0)*r11*x10162))+(((-1.0)*r10*x10170))+(((-1.0)*x10159*x10163))+((sj0*x10157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10173=((1.0)*cj3);
CheckValue<IkReal> x10174=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10174.valid){
continue;
}
CheckValue<IkReal> x10175=IKPowWithIntegerCheck(((((-1.0)*gconst1*r21*sj3))+((gconst2*r20*sj3))),-1);
if(!x10175.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10174.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10175.value)*(((((-1.0)*gconst2*r21*x10173))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst1*r20*x10173)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10174.value)))+IKsqr(((x10175.value)*(((((-1.0)*gconst2*r21*x10173))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst1*r20*x10173))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10174.value)), ((x10175.value)*(((((-1.0)*gconst2*r21*x10173))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst1*r20*x10173))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10176=IKsin(j4);
IkReal x10177=IKcos(j4);
IkReal x10178=(gconst2*r10);
IkReal x10179=(gconst1*r11);
IkReal x10180=(cj1*cj2);
IkReal x10181=(cj3*gconst1);
IkReal x10182=(sj1*sj2);
IkReal x10183=(gconst2*r20);
IkReal x10184=((1.0)*r21);
IkReal x10185=(gconst2*sj3);
IkReal x10186=((1.0)*sj0);
IkReal x10187=(cj3*gconst2);
IkReal x10188=(sj3*x10177);
IkReal x10189=((1.0)*x10177);
IkReal x10190=((1.0)*cj2*sj1);
IkReal x10191=((1.0)*cj1*sj2);
IkReal x10192=(cj3*x10177);
IkReal x10193=((1.0)*gconst1*sj3);
IkReal x10194=((1.0)*x10176);
IkReal x10195=(r02*x10194);
evalcond[0]=((((-1.0)*r02*x10189))+(((-1.0)*x10186)));
evalcond[1]=((((-1.0)*x10183*x10194))+((gconst1*r21*x10176)));
evalcond[2]=(cj0+(((-1.0)*x10178*x10194))+((x10176*x10179)));
evalcond[3]=((((-1.0)*cj3*x10195))+(((-1.0)*cj0*x10182))+((cj0*x10180)));
evalcond[4]=((((-1.0)*sj3*x10195))+(((-1.0)*cj0*x10190))+(((-1.0)*cj0*x10191)));
evalcond[5]=((((-1.0)*x10180))+x10182+((r21*x10187))+((x10183*x10188))+((r20*x10181))+(((-1.0)*gconst1*x10184*x10188)));
evalcond[6]=((((-1.0)*x10177*x10181*x10184))+(((-1.0)*r20*x10193))+(((-1.0)*x10191))+(((-1.0)*x10190))+(((-1.0)*x10184*x10185))+((x10183*x10192)));
evalcond[7]=(((x10178*x10188))+(((-1.0)*x10179*x10188))+((r11*x10187))+((r10*x10181))+(((-1.0)*cj1*sj2*x10186))+(((-1.0)*cj2*sj1*x10186)));
evalcond[8]=((((-1.0)*cj3*x10179*x10189))+((x10178*x10192))+((sj0*x10180))+(((-1.0)*x10182*x10186))+(((-1.0)*r11*x10185))+(((-1.0)*r10*x10193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10196=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10196.valid){
continue;
}
CheckValue<IkReal> x10197=IKPowWithIntegerCheck(r02,-1);
if(!x10197.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10196.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10197.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10196.value)))+IKsqr(((-1.0)*sj0*(x10197.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10196.value)), ((-1.0)*sj0*(x10197.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10198=IKsin(j4);
IkReal x10199=IKcos(j4);
IkReal x10200=(gconst2*r10);
IkReal x10201=(gconst1*r11);
IkReal x10202=(cj1*cj2);
IkReal x10203=(cj3*gconst1);
IkReal x10204=(sj1*sj2);
IkReal x10205=(gconst2*r20);
IkReal x10206=((1.0)*r21);
IkReal x10207=(gconst2*sj3);
IkReal x10208=((1.0)*sj0);
IkReal x10209=(cj3*gconst2);
IkReal x10210=(sj3*x10199);
IkReal x10211=((1.0)*x10199);
IkReal x10212=((1.0)*cj2*sj1);
IkReal x10213=((1.0)*cj1*sj2);
IkReal x10214=(cj3*x10199);
IkReal x10215=((1.0)*gconst1*sj3);
IkReal x10216=((1.0)*x10198);
IkReal x10217=(r02*x10216);
evalcond[0]=((((-1.0)*x10208))+(((-1.0)*r02*x10211)));
evalcond[1]=((((-1.0)*x10205*x10216))+((gconst1*r21*x10198)));
evalcond[2]=(cj0+(((-1.0)*x10200*x10216))+((x10198*x10201)));
evalcond[3]=(((cj0*x10202))+(((-1.0)*cj0*x10204))+(((-1.0)*cj3*x10217)));
evalcond[4]=((((-1.0)*sj3*x10217))+(((-1.0)*cj0*x10213))+(((-1.0)*cj0*x10212)));
evalcond[5]=((((-1.0)*x10202))+((r21*x10209))+((x10205*x10210))+x10204+((r20*x10203))+(((-1.0)*gconst1*x10206*x10210)));
evalcond[6]=((((-1.0)*x10212))+(((-1.0)*x10213))+(((-1.0)*x10199*x10203*x10206))+(((-1.0)*r20*x10215))+(((-1.0)*x10206*x10207))+((x10205*x10214)));
evalcond[7]=(((x10200*x10210))+((r10*x10203))+(((-1.0)*x10201*x10210))+(((-1.0)*cj1*sj2*x10208))+(((-1.0)*cj2*sj1*x10208))+((r11*x10209)));
evalcond[8]=(((x10200*x10214))+(((-1.0)*r11*x10207))+(((-1.0)*cj3*x10201*x10211))+(((-1.0)*r10*x10215))+((sj0*x10202))+(((-1.0)*x10204*x10208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10218=gconst1*gconst1;
IkReal x10219=r21*r21;
IkReal x10220=gconst2*gconst2;
IkReal x10221=r20*r20;
IkReal x10222=(gconst2*r20);
IkReal x10223=(cj1*cj2);
IkReal x10224=(sj1*sj2);
IkReal x10225=(gconst1*r21);
IkReal x10226=(cj3*gconst2);
IkReal x10227=(cj3*r20);
CheckValue<IkReal> x10228 = IKatan2WithCheck(IkReal((((r22*x10224))+((gconst1*r22*x10227))+((r21*r22*x10226))+(((-1.0)*r22*x10223)))),IkReal((((r21*x10218*x10227))+(((-1.0)*gconst1*x10221*x10226))+(((-1.0)*x10223*x10225))+((gconst1*x10219*x10226))+((x10224*x10225))+((x10222*x10223))+(((-1.0)*x10222*x10224))+(((-1.0)*r21*x10220*x10227)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10228.valid){
continue;
}
CheckValue<IkReal> x10229=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x10218*x10219))+(((-2.0)*sj3*x10222*x10225))+((sj3*x10220*x10221)))),-1);
if(!x10229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10228.value)+(((1.5707963267949)*(x10229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10230=IKsin(j4);
IkReal x10231=IKcos(j4);
IkReal x10232=((1.0)*sj3);
IkReal x10233=(gconst1*sj3);
IkReal x10234=(cj1*cj2);
IkReal x10235=(cj3*r00);
IkReal x10236=(cj3*gconst1);
IkReal x10237=(sj1*sj2);
IkReal x10238=(gconst2*r01);
IkReal x10239=(gconst2*r21);
IkReal x10240=((1.0)*sj0);
IkReal x10241=(gconst2*r11);
IkReal x10242=((1.0)*x10231);
IkReal x10243=(r12*x10230);
IkReal x10244=(gconst2*x10231);
IkReal x10245=(gconst1*x10230);
IkReal x10246=((1.0)*cj2*sj1);
IkReal x10247=((1.0)*x10230);
IkReal x10248=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*gconst2*r20*x10247))+((r21*x10245))+(((-1.0)*r22*x10242)));
evalcond[1]=((((-1.0)*gconst2*r10*x10247))+cj0+(((-1.0)*r12*x10242))+((r11*x10245)));
evalcond[2]=((((-1.0)*x10240))+(((-1.0)*gconst2*r00*x10247))+((r01*x10245))+(((-1.0)*r02*x10242)));
evalcond[3]=(((r20*sj3*x10244))+(((-1.0)*r22*x10230*x10232))+x10237+(((-1.0)*x10234))+(((-1.0)*gconst1*r21*x10231*x10232))+((cj3*x10239))+((r20*x10236)));
evalcond[4]=((((-1.0)*r21*x10236*x10242))+(((-1.0)*cj3*r22*x10247))+(((-1.0)*x10232*x10239))+(((-1.0)*x10248))+(((-1.0)*x10246))+((cj3*r20*x10244))+(((-1.0)*gconst1*r20*x10232)));
evalcond[5]=((((-1.0)*gconst1*r01*x10231*x10232))+((r00*sj3*x10244))+(((-1.0)*cj0*x10246))+(((-1.0)*cj0*x10248))+((cj3*x10238))+((gconst1*x10235))+(((-1.0)*r02*x10230*x10232)));
evalcond[6]=((((-1.0)*x10232*x10243))+((cj3*x10241))+(((-1.0)*cj1*sj2*x10240))+(((-1.0)*cj2*sj1*x10240))+((r10*sj3*x10244))+(((-1.0)*gconst1*r11*x10231*x10232))+((r10*x10236)));
evalcond[7]=((((-1.0)*r01*x10236*x10242))+(((-1.0)*cj3*r02*x10247))+(((-1.0)*x10232*x10238))+(((-1.0)*cj0*x10237))+(((-1.0)*gconst1*r00*x10232))+((x10235*x10244))+((cj0*x10234)));
evalcond[8]=((((-1.0)*x10237*x10240))+((sj0*x10234))+(((-1.0)*gconst1*r10*x10232))+(((-1.0)*x10232*x10241))+(((-1.0)*r11*x10236*x10242))+(((-1.0)*cj3*x10243))+((cj3*r10*x10244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10249=((1.0)*gconst2);
CheckValue<IkReal> x10250 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10249))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10250.valid){
continue;
}
CheckValue<IkReal> x10251=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10249)))),-1);
if(!x10251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10250.value)+(((1.5707963267949)*(x10251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10252=IKsin(j4);
IkReal x10253=IKcos(j4);
IkReal x10254=((1.0)*sj3);
IkReal x10255=(gconst1*sj3);
IkReal x10256=(cj1*cj2);
IkReal x10257=(cj3*r00);
IkReal x10258=(cj3*gconst1);
IkReal x10259=(sj1*sj2);
IkReal x10260=(gconst2*r01);
IkReal x10261=(gconst2*r21);
IkReal x10262=((1.0)*sj0);
IkReal x10263=(gconst2*r11);
IkReal x10264=((1.0)*x10253);
IkReal x10265=(r12*x10252);
IkReal x10266=(gconst2*x10253);
IkReal x10267=(gconst1*x10252);
IkReal x10268=((1.0)*cj2*sj1);
IkReal x10269=((1.0)*x10252);
IkReal x10270=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*r22*x10264))+(((-1.0)*gconst2*r20*x10269))+((r21*x10267)));
evalcond[1]=(cj0+((r11*x10267))+(((-1.0)*gconst2*r10*x10269))+(((-1.0)*r12*x10264)));
evalcond[2]=((((-1.0)*gconst2*r00*x10269))+(((-1.0)*x10262))+((r01*x10267))+(((-1.0)*r02*x10264)));
evalcond[3]=(((cj3*x10261))+(((-1.0)*gconst1*r21*x10253*x10254))+(((-1.0)*r22*x10252*x10254))+x10259+(((-1.0)*x10256))+((r20*x10258))+((r20*sj3*x10266)));
evalcond[4]=(((cj3*r20*x10266))+(((-1.0)*x10254*x10261))+(((-1.0)*x10270))+(((-1.0)*r21*x10258*x10264))+(((-1.0)*x10268))+(((-1.0)*cj3*r22*x10269))+(((-1.0)*gconst1*r20*x10254)));
evalcond[5]=((((-1.0)*gconst1*r01*x10253*x10254))+((cj3*x10260))+((r00*sj3*x10266))+(((-1.0)*cj0*x10270))+(((-1.0)*cj0*x10268))+((gconst1*x10257))+(((-1.0)*r02*x10252*x10254)));
evalcond[6]=(((cj3*x10263))+((r10*x10258))+(((-1.0)*x10254*x10265))+((r10*sj3*x10266))+(((-1.0)*gconst1*r11*x10253*x10254))+(((-1.0)*cj1*sj2*x10262))+(((-1.0)*cj2*sj1*x10262)));
evalcond[7]=(((cj0*x10256))+(((-1.0)*x10254*x10260))+((x10257*x10266))+(((-1.0)*r01*x10258*x10264))+(((-1.0)*cj0*x10259))+(((-1.0)*gconst1*r00*x10254))+(((-1.0)*cj3*r02*x10269)));
evalcond[8]=((((-1.0)*x10254*x10263))+(((-1.0)*cj3*x10265))+((sj0*x10256))+(((-1.0)*gconst1*r10*x10254))+(((-1.0)*r11*x10258*x10264))+((cj3*r10*x10266))+(((-1.0)*x10259*x10262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10271=((1.0)*gconst2);
CheckValue<IkReal> x10272=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10271)))),-1);
if(!x10272.valid){
continue;
}
CheckValue<IkReal> x10273 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x10271)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10272.value)))+(x10273.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10274=IKsin(j4);
IkReal x10275=IKcos(j4);
IkReal x10276=((1.0)*sj3);
IkReal x10277=(gconst1*sj3);
IkReal x10278=(cj1*cj2);
IkReal x10279=(cj3*r00);
IkReal x10280=(cj3*gconst1);
IkReal x10281=(sj1*sj2);
IkReal x10282=(gconst2*r01);
IkReal x10283=(gconst2*r21);
IkReal x10284=((1.0)*sj0);
IkReal x10285=(gconst2*r11);
IkReal x10286=((1.0)*x10275);
IkReal x10287=(r12*x10274);
IkReal x10288=(gconst2*x10275);
IkReal x10289=(gconst1*x10274);
IkReal x10290=((1.0)*cj2*sj1);
IkReal x10291=((1.0)*x10274);
IkReal x10292=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*r22*x10286))+((r21*x10289))+(((-1.0)*gconst2*r20*x10291)));
evalcond[1]=((((-1.0)*gconst2*r10*x10291))+cj0+((r11*x10289))+(((-1.0)*r12*x10286)));
evalcond[2]=(((r01*x10289))+(((-1.0)*gconst2*r00*x10291))+(((-1.0)*r02*x10286))+(((-1.0)*x10284)));
evalcond[3]=(((r20*x10280))+((cj3*x10283))+(((-1.0)*r22*x10274*x10276))+((r20*sj3*x10288))+x10281+(((-1.0)*gconst1*r21*x10275*x10276))+(((-1.0)*x10278)));
evalcond[4]=(((cj3*r20*x10288))+(((-1.0)*r21*x10280*x10286))+(((-1.0)*x10276*x10283))+(((-1.0)*cj3*r22*x10291))+(((-1.0)*gconst1*r20*x10276))+(((-1.0)*x10292))+(((-1.0)*x10290)));
evalcond[5]=((((-1.0)*cj0*x10290))+(((-1.0)*cj0*x10292))+(((-1.0)*gconst1*r01*x10275*x10276))+((cj3*x10282))+((r00*sj3*x10288))+((gconst1*x10279))+(((-1.0)*r02*x10274*x10276)));
evalcond[6]=((((-1.0)*cj1*sj2*x10284))+((cj3*x10285))+(((-1.0)*cj2*sj1*x10284))+(((-1.0)*x10276*x10287))+(((-1.0)*gconst1*r11*x10275*x10276))+((r10*x10280))+((r10*sj3*x10288)));
evalcond[7]=((((-1.0)*gconst1*r00*x10276))+((x10279*x10288))+(((-1.0)*x10276*x10282))+(((-1.0)*cj0*x10281))+((cj0*x10278))+(((-1.0)*r01*x10280*x10286))+(((-1.0)*cj3*r02*x10291)));
evalcond[8]=(((sj0*x10278))+(((-1.0)*gconst1*r10*x10276))+(((-1.0)*x10281*x10284))+((cj3*r10*x10288))+(((-1.0)*x10276*x10285))+(((-1.0)*cj3*x10287))+(((-1.0)*r11*x10280*x10286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10293=((-1.0)*r21);
IkReal x10295 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10295)==0){
continue;
}
IkReal x10294=pow(x10295,-0.5);
CheckValue<IkReal> x10296 = IKatan2WithCheck(IkReal(x10293),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10296.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10296.value))));
IkReal gconst4=(x10293*x10294);
IkReal gconst5=((1.0)*r20*x10294);
CheckValue<IkReal> x10297 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10297.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10297.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10298=((-1.0)*r21);
CheckValue<IkReal> x10301 = IKatan2WithCheck(IkReal(x10298),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10301.valid){
continue;
}
IkReal x10299=((1.0)*(x10301.value));
IkReal x10300=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10299)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10299)));
IkReal gconst4=(x10298*x10300);
IkReal gconst5=((1.0)*r20*x10300);
IkReal x10302=r22*r22;
IkReal x10303=((1.0)*x10302);
CheckValue<IkReal> x10307=IKPowWithIntegerCheck(((-1.0)+x10302),-1);
if(!x10307.valid){
continue;
}
IkReal x10304=x10307.value;
if((((1.0)+(((-1.0)*x10303)))) < -0.00001)
continue;
IkReal x10305=IKsqrt(((1.0)+(((-1.0)*x10303))));
IkReal x10306=(cj0*x10304*x10305);
j4eval[0]=((IKabs((x10306+(((-1.0)*x10303*x10306)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10308=((-1.0)*r21);
CheckValue<IkReal> x10311 = IKatan2WithCheck(IkReal(x10308),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10311.valid){
continue;
}
IkReal x10309=((1.0)*(x10311.value));
IkReal x10310=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10309)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10309)));
IkReal gconst4=(x10308*x10310);
IkReal gconst5=((1.0)*r20*x10310);
IkReal x10312=r22*r22;
IkReal x10313=((1.0)*x10312);
CheckValue<IkReal> x10317=IKPowWithIntegerCheck(((-1.0)+x10312),-1);
if(!x10317.valid){
continue;
}
IkReal x10314=x10317.value;
if((((1.0)+(((-1.0)*x10313)))) < -0.00001)
continue;
IkReal x10315=IKsqrt(((1.0)+(((-1.0)*x10313))));
IkReal x10316=(sj0*x10314*x10315);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x10313*x10316))+x10316))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10318=((-1.0)*r21);
CheckValue<IkReal> x10321 = IKatan2WithCheck(IkReal(x10318),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10321.valid){
continue;
}
IkReal x10319=((1.0)*(x10321.value));
IkReal x10320=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10319)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10319)));
IkReal gconst4=(x10318*x10320);
IkReal gconst5=((1.0)*r20*x10320);
IkReal x10322=r22*r22;
IkReal x10323=(r12*sj0);
IkReal x10324=(cj0*r02);
CheckValue<IkReal> x10328=IKPowWithIntegerCheck(((-1.0)+x10322),-1);
if(!x10328.valid){
continue;
}
IkReal x10325=x10328.value;
if((((1.0)+(((-1.0)*x10322)))) < -0.00001)
continue;
IkReal x10326=IKsqrt(((1.0)+(((-1.0)*x10322))));
IkReal x10327=(r22*x10325*x10326);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x10323))+(((-1.0)*x10324)))))+(IKabs((((x10323*x10327))+((x10324*x10327))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10329=((-1.0)*r21);
CheckValue<IkReal> x10332 = IKatan2WithCheck(IkReal(x10329),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10332.valid){
continue;
}
IkReal x10330=((1.0)*(x10332.value));
IkReal x10331=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10330)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10330)));
IkReal gconst4=(x10329*x10331);
IkReal gconst5=((1.0)*r20*x10331);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10333=((-1.0)*r21);
CheckValue<IkReal> x10336 = IKatan2WithCheck(IkReal(x10333),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10336.valid){
continue;
}
IkReal x10334=((1.0)*(x10336.value));
IkReal x10335=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10334)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10334)));
IkReal gconst4=(x10333*x10335);
IkReal gconst5=((1.0)*r20*x10335);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10337=((-1.0)*r21);
CheckValue<IkReal> x10340 = IKatan2WithCheck(IkReal(x10337),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10340.valid){
continue;
}
IkReal x10338=((1.0)*(x10340.value));
IkReal x10339=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10338)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10338)));
IkReal gconst4=(x10337*x10339);
IkReal gconst5=((1.0)*r20*x10339);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10341=((-1.0)*r21);
CheckValue<IkReal> x10344 = IKatan2WithCheck(IkReal(x10341),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10344.valid){
continue;
}
IkReal x10342=((1.0)*(x10344.value));
IkReal x10343=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10342)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10342)));
IkReal gconst4=(x10341*x10343);
IkReal gconst5=((1.0)*r20*x10343);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10345=((-1.0)*r21);
CheckValue<IkReal> x10348 = IKatan2WithCheck(IkReal(x10345),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10348.valid){
continue;
}
IkReal x10346=((1.0)*(x10348.value));
IkReal x10347=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10346)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10346)));
IkReal gconst4=(x10345*x10347);
IkReal gconst5=((1.0)*r20*x10347);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10349=((-1.0)*r21);
CheckValue<IkReal> x10352 = IKatan2WithCheck(IkReal(x10349),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10352.valid){
continue;
}
IkReal x10350=((1.0)*(x10352.value));
IkReal x10351=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10350)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10350)));
IkReal gconst4=(x10349*x10351);
IkReal gconst5=((1.0)*r20*x10351);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10353=(gconst5*r10);
IkReal x10354=(gconst4*r11);
CheckValue<IkReal> x10355 = IKatan2WithCheck(IkReal((x10353+(((-1.0)*x10354)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10355.valid){
continue;
}
CheckValue<IkReal> x10356=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10353*x10354))+(x10353*x10353)+(x10354*x10354))),-1);
if(!x10356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10355.value)+(((1.5707963267949)*(x10356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10357=IKsin(j4);
IkReal x10358=IKcos(j4);
IkReal x10359=(gconst4*r11);
IkReal x10360=(gconst5*r10);
IkReal x10361=((1.0)*sj2);
IkReal x10362=(gconst5*r00);
IkReal x10363=(gconst5*r20);
IkReal x10364=((1.0)*x10358);
IkReal x10365=(gconst4*x10357);
IkReal x10366=((1.0)*x10357);
evalcond[0]=(((r21*x10365))+(((-1.0)*x10363*x10366))+(((-1.0)*r22*x10364)));
evalcond[1]=(((r01*x10365))+(((-1.0)*r02*x10364))+(((-1.0)*x10362*x10366)));
evalcond[2]=((((-1.0)*x10359*x10364))+((x10358*x10360))+(((-1.0)*r12*x10366)));
evalcond[3]=((1.0)+(((-1.0)*x10360*x10366))+(((-1.0)*r12*x10364))+((x10357*x10359)));
evalcond[4]=((((-1.0)*gconst4*r01*x10364))+(((-1.0)*r02*x10366))+((x10358*x10362))+((cj1*cj2))+(((-1.0)*sj1*x10361)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x10361))+(((-1.0)*gconst4*r21*x10364))+((x10358*x10363))+(((-1.0)*r22*x10366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10367=((1.0)*gconst5);
CheckValue<IkReal> x10368 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10368.valid){
continue;
}
CheckValue<IkReal> x10369=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10367)))),-1);
if(!x10369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10368.value)+(((1.5707963267949)*(x10369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10370=IKsin(j4);
IkReal x10371=IKcos(j4);
IkReal x10372=(gconst4*r11);
IkReal x10373=(gconst5*r10);
IkReal x10374=((1.0)*sj2);
IkReal x10375=(gconst5*r00);
IkReal x10376=(gconst5*r20);
IkReal x10377=((1.0)*x10371);
IkReal x10378=(gconst4*x10370);
IkReal x10379=((1.0)*x10370);
evalcond[0]=((((-1.0)*x10376*x10379))+(((-1.0)*r22*x10377))+((r21*x10378)));
evalcond[1]=((((-1.0)*x10375*x10379))+((r01*x10378))+(((-1.0)*r02*x10377)));
evalcond[2]=((((-1.0)*x10372*x10377))+((x10371*x10373))+(((-1.0)*r12*x10379)));
evalcond[3]=((1.0)+(((-1.0)*x10373*x10379))+((x10370*x10372))+(((-1.0)*r12*x10377)));
evalcond[4]=((((-1.0)*gconst4*r01*x10377))+(((-1.0)*r02*x10379))+((x10371*x10375))+((cj1*cj2))+(((-1.0)*sj1*x10374)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x10374))+(((-1.0)*gconst4*r21*x10377))+((x10371*x10376))+(((-1.0)*r22*x10379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10380 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10380.valid){
continue;
}
CheckValue<IkReal> x10381=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10380.value)+(((1.5707963267949)*(x10381.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10382=IKsin(j4);
IkReal x10383=IKcos(j4);
IkReal x10384=(gconst4*r11);
IkReal x10385=(gconst5*r10);
IkReal x10386=((1.0)*sj2);
IkReal x10387=(gconst5*r00);
IkReal x10388=(gconst5*r20);
IkReal x10389=((1.0)*x10383);
IkReal x10390=(gconst4*x10382);
IkReal x10391=((1.0)*x10382);
evalcond[0]=(((r21*x10390))+(((-1.0)*x10388*x10391))+(((-1.0)*r22*x10389)));
evalcond[1]=(((r01*x10390))+(((-1.0)*x10387*x10391))+(((-1.0)*r02*x10389)));
evalcond[2]=((((-1.0)*x10384*x10389))+((x10383*x10385))+(((-1.0)*r12*x10391)));
evalcond[3]=((1.0)+(((-1.0)*x10385*x10391))+(((-1.0)*r12*x10389))+((x10382*x10384)));
evalcond[4]=(((x10383*x10387))+(((-1.0)*gconst4*r01*x10389))+(((-1.0)*r02*x10391))+((cj1*cj2))+(((-1.0)*sj1*x10386)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*gconst4*r21*x10389))+((x10383*x10388))+(((-1.0)*r22*x10391))+(((-1.0)*cj1*x10386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10392=((-1.0)*r21);
CheckValue<IkReal> x10395 = IKatan2WithCheck(IkReal(x10392),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10395.valid){
continue;
}
IkReal x10393=((1.0)*(x10395.value));
IkReal x10394=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10393)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10393)));
IkReal gconst4=(x10392*x10394);
IkReal gconst5=((1.0)*r20*x10394);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10396=((-1.0)*r21);
CheckValue<IkReal> x10399 = IKatan2WithCheck(IkReal(x10396),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10399.valid){
continue;
}
IkReal x10397=((1.0)*(x10399.value));
IkReal x10398=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10397)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10397)));
IkReal gconst4=(x10396*x10398);
IkReal gconst5=((1.0)*r20*x10398);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10400=((-1.0)*r21);
CheckValue<IkReal> x10403 = IKatan2WithCheck(IkReal(x10400),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10403.valid){
continue;
}
IkReal x10401=((1.0)*(x10403.value));
IkReal x10402=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10401)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10401)));
IkReal gconst4=(x10400*x10402);
IkReal gconst5=((1.0)*r20*x10402);
IkReal x10404=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10408=IKPowWithIntegerCheck(x10404,-1);
if(!x10408.valid){
continue;
}
IkReal x10405=x10408.value;
IkReal x10406=((1.0)*x10405);
IkReal x10407=((((-1.0)*x10406*(r10*r10)*(r20*r20)))+(((-1.0)*x10406*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10405)));
j4eval[0]=x10407;
j4eval[1]=r12;
j4eval[2]=x10404;
j4eval[3]=IKsign(x10407);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10409=(gconst5*r10);
IkReal x10410=(gconst4*r11);
CheckValue<IkReal> x10411 = IKatan2WithCheck(IkReal((x10410+(((-1.0)*x10409)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10411.valid){
continue;
}
CheckValue<IkReal> x10412=IKPowWithIntegerCheck(IKsign(((((2.0)*x10409*x10410))+(((-1.0)*(x10410*x10410)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10409*x10409))))),-1);
if(!x10412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10411.value)+(((1.5707963267949)*(x10412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10413=IKcos(j4);
IkReal x10414=IKsin(j4);
IkReal x10415=(gconst5*r10);
IkReal x10416=((1.0)*sj2);
IkReal x10417=(gconst5*r00);
IkReal x10418=(gconst5*r20);
IkReal x10419=((1.0)*x10413);
IkReal x10420=(gconst4*x10414);
IkReal x10421=(gconst4*x10413);
IkReal x10422=((1.0)*x10414);
evalcond[0]=((((-1.0)*x10415*x10419))+((r12*x10414))+((r11*x10421)));
evalcond[1]=((((-1.0)*x10418*x10422))+(((-1.0)*r22*x10419))+((r21*x10420)));
evalcond[2]=((((-1.0)*r02*x10419))+((r01*x10420))+(((-1.0)*x10417*x10422)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10419))+((r11*x10420))+(((-1.0)*x10415*x10422)));
evalcond[4]=(((r01*x10421))+(((-1.0)*sj1*x10416))+((r02*x10414))+((cj1*cj2))+(((-1.0)*x10417*x10419)));
evalcond[5]=(((r22*x10414))+(((-1.0)*cj1*x10416))+(((-1.0)*cj2*sj1))+(((-1.0)*x10418*x10419))+((r21*x10421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10423=((1.0)*gconst5);
CheckValue<IkReal> x10424=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10423)))),-1);
if(!x10424.valid){
continue;
}
CheckValue<IkReal> x10425 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10423))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10424.value)))+(x10425.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10426=IKcos(j4);
IkReal x10427=IKsin(j4);
IkReal x10428=(gconst5*r10);
IkReal x10429=((1.0)*sj2);
IkReal x10430=(gconst5*r00);
IkReal x10431=(gconst5*r20);
IkReal x10432=((1.0)*x10426);
IkReal x10433=(gconst4*x10427);
IkReal x10434=(gconst4*x10426);
IkReal x10435=((1.0)*x10427);
evalcond[0]=((((-1.0)*x10428*x10432))+((r12*x10427))+((r11*x10434)));
evalcond[1]=((((-1.0)*x10431*x10435))+(((-1.0)*r22*x10432))+((r21*x10433)));
evalcond[2]=(((r01*x10433))+(((-1.0)*x10430*x10435))+(((-1.0)*r02*x10432)));
evalcond[3]=((1.0)+(((-1.0)*x10428*x10435))+(((-1.0)*r12*x10432))+((r11*x10433)));
evalcond[4]=(((r01*x10434))+(((-1.0)*x10430*x10432))+(((-1.0)*sj1*x10429))+((r02*x10427))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x10429))+(((-1.0)*x10431*x10432))+((r22*x10427))+(((-1.0)*cj2*sj1))+((r21*x10434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10436 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10436.valid){
continue;
}
CheckValue<IkReal> x10437=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10436.value)+(((1.5707963267949)*(x10437.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10438=IKcos(j4);
IkReal x10439=IKsin(j4);
IkReal x10440=(gconst5*r10);
IkReal x10441=((1.0)*sj2);
IkReal x10442=(gconst5*r00);
IkReal x10443=(gconst5*r20);
IkReal x10444=((1.0)*x10438);
IkReal x10445=(gconst4*x10439);
IkReal x10446=(gconst4*x10438);
IkReal x10447=((1.0)*x10439);
evalcond[0]=((((-1.0)*x10440*x10444))+((r11*x10446))+((r12*x10439)));
evalcond[1]=((((-1.0)*x10443*x10447))+((r21*x10445))+(((-1.0)*r22*x10444)));
evalcond[2]=((((-1.0)*x10442*x10447))+(((-1.0)*r02*x10444))+((r01*x10445)));
evalcond[3]=((1.0)+(((-1.0)*x10440*x10447))+(((-1.0)*r12*x10444))+((r11*x10445)));
evalcond[4]=((((-1.0)*x10442*x10444))+((r02*x10439))+(((-1.0)*sj1*x10441))+((r01*x10446))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x10441))+((r22*x10439))+(((-1.0)*cj2*sj1))+(((-1.0)*x10443*x10444))+((r21*x10446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10448=((-1.0)*r21);
CheckValue<IkReal> x10451 = IKatan2WithCheck(IkReal(x10448),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10451.valid){
continue;
}
IkReal x10449=((1.0)*(x10451.value));
IkReal x10450=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10449)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10449)));
IkReal gconst4=(x10448*x10450);
IkReal gconst5=((1.0)*r20*x10450);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10452=((-1.0)*r21);
CheckValue<IkReal> x10455 = IKatan2WithCheck(IkReal(x10452),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10455.valid){
continue;
}
IkReal x10453=((1.0)*(x10455.value));
IkReal x10454=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10453)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10453)));
IkReal gconst4=(x10452*x10454);
IkReal gconst5=((1.0)*r20*x10454);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10456=((-1.0)*r21);
CheckValue<IkReal> x10459 = IKatan2WithCheck(IkReal(x10456),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10459.valid){
continue;
}
IkReal x10457=((1.0)*(x10459.value));
IkReal x10458=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10457)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10457)));
IkReal gconst4=(x10456*x10458);
IkReal gconst5=((1.0)*r20*x10458);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10460=(gconst5*r10);
IkReal x10461=(gconst4*r11);
CheckValue<IkReal> x10462=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10461*x10461)+(x10460*x10460)+(((-2.0)*x10460*x10461)))),-1);
if(!x10462.valid){
continue;
}
CheckValue<IkReal> x10463 = IKatan2WithCheck(IkReal(((((-1.0)*x10461))+x10460)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10462.value)))+(x10463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10464=IKsin(j4);
IkReal x10465=IKcos(j4);
IkReal x10466=(gconst4*r11);
IkReal x10467=((1.0)*cj1);
IkReal x10468=(gconst5*r10);
IkReal x10469=(gconst4*r01);
IkReal x10470=(gconst5*r00);
IkReal x10471=(gconst4*r21);
IkReal x10472=(gconst5*r20);
IkReal x10473=((1.0)*x10465);
IkReal x10474=((1.0)*x10464);
evalcond[0]=(((x10464*x10471))+(((-1.0)*x10472*x10474))+(((-1.0)*r22*x10473)));
evalcond[1]=((((-1.0)*r02*x10473))+(((-1.0)*x10470*x10474))+((x10464*x10469)));
evalcond[2]=((((-1.0)*x10466*x10473))+((x10465*x10468))+(((-1.0)*r12*x10474)));
evalcond[3]=((1.0)+((x10464*x10466))+(((-1.0)*x10468*x10474))+(((-1.0)*r12*x10473)));
evalcond[4]=(((sj1*sj2))+((x10465*x10472))+(((-1.0)*r22*x10474))+(((-1.0)*cj2*x10467))+(((-1.0)*x10471*x10473)));
evalcond[5]=((((-1.0)*r02*x10474))+(((-1.0)*cj2*sj1))+((x10465*x10470))+(((-1.0)*sj2*x10467))+(((-1.0)*x10469*x10473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10475=((1.0)*gconst5);
CheckValue<IkReal> x10476 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10475))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10476.valid){
continue;
}
CheckValue<IkReal> x10477=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10475)))),-1);
if(!x10477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10476.value)+(((1.5707963267949)*(x10477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10478=IKsin(j4);
IkReal x10479=IKcos(j4);
IkReal x10480=(gconst4*r11);
IkReal x10481=((1.0)*cj1);
IkReal x10482=(gconst5*r10);
IkReal x10483=(gconst4*r01);
IkReal x10484=(gconst5*r00);
IkReal x10485=(gconst4*r21);
IkReal x10486=(gconst5*r20);
IkReal x10487=((1.0)*x10479);
IkReal x10488=((1.0)*x10478);
evalcond[0]=(((x10478*x10485))+(((-1.0)*r22*x10487))+(((-1.0)*x10486*x10488)));
evalcond[1]=(((x10478*x10483))+(((-1.0)*x10484*x10488))+(((-1.0)*r02*x10487)));
evalcond[2]=(((x10479*x10482))+(((-1.0)*x10480*x10487))+(((-1.0)*r12*x10488)));
evalcond[3]=((1.0)+((x10478*x10480))+(((-1.0)*r12*x10487))+(((-1.0)*x10482*x10488)));
evalcond[4]=(((x10479*x10486))+(((-1.0)*r22*x10488))+(((-1.0)*x10485*x10487))+((sj1*sj2))+(((-1.0)*cj2*x10481)));
evalcond[5]=((((-1.0)*sj2*x10481))+((x10479*x10484))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x10488))+(((-1.0)*x10483*x10487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10489 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10489.valid){
continue;
}
CheckValue<IkReal> x10490=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10489.value)+(((1.5707963267949)*(x10490.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10491=IKsin(j4);
IkReal x10492=IKcos(j4);
IkReal x10493=(gconst4*r11);
IkReal x10494=((1.0)*cj1);
IkReal x10495=(gconst5*r10);
IkReal x10496=(gconst4*r01);
IkReal x10497=(gconst5*r00);
IkReal x10498=(gconst4*r21);
IkReal x10499=(gconst5*r20);
IkReal x10500=((1.0)*x10492);
IkReal x10501=((1.0)*x10491);
evalcond[0]=((((-1.0)*r22*x10500))+((x10491*x10498))+(((-1.0)*x10499*x10501)));
evalcond[1]=((((-1.0)*x10497*x10501))+((x10491*x10496))+(((-1.0)*r02*x10500)));
evalcond[2]=((((-1.0)*x10493*x10500))+(((-1.0)*r12*x10501))+((x10492*x10495)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10500))+((x10491*x10493))+(((-1.0)*x10495*x10501)));
evalcond[4]=((((-1.0)*r22*x10501))+(((-1.0)*x10498*x10500))+((sj1*sj2))+(((-1.0)*cj2*x10494))+((x10492*x10499)));
evalcond[5]=((((-1.0)*x10496*x10500))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x10501))+((x10492*x10497))+(((-1.0)*sj2*x10494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10502=((-1.0)*r21);
CheckValue<IkReal> x10505 = IKatan2WithCheck(IkReal(x10502),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10505.valid){
continue;
}
IkReal x10503=((1.0)*(x10505.value));
IkReal x10504=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10503)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10503)));
IkReal gconst4=(x10502*x10504);
IkReal gconst5=((1.0)*r20*x10504);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10506=((-1.0)*r21);
CheckValue<IkReal> x10509 = IKatan2WithCheck(IkReal(x10506),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10509.valid){
continue;
}
IkReal x10507=((1.0)*(x10509.value));
IkReal x10508=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10507)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10507)));
IkReal gconst4=(x10506*x10508);
IkReal gconst5=((1.0)*r20*x10508);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10510=((-1.0)*r21);
CheckValue<IkReal> x10513 = IKatan2WithCheck(IkReal(x10510),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10513.valid){
continue;
}
IkReal x10511=((1.0)*(x10513.value));
IkReal x10512=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10511)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10511)));
IkReal gconst4=(x10510*x10512);
IkReal gconst5=((1.0)*r20*x10512);
IkReal x10514=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10518=IKPowWithIntegerCheck(x10514,-1);
if(!x10518.valid){
continue;
}
IkReal x10515=x10518.value;
IkReal x10516=((1.0)*x10515);
IkReal x10517=((((-2.0)*r10*r11*r20*r21*x10515))+(((-1.0)*x10516*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10516*(r11*r11)*(r21*r21))));
j4eval[0]=x10517;
j4eval[1]=r12;
j4eval[2]=x10514;
j4eval[3]=IKsign(x10517);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10519=(gconst5*r10);
IkReal x10520=(gconst4*r11);
CheckValue<IkReal> x10521 = IKatan2WithCheck(IkReal(((((-1.0)*x10519))+x10520)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10521.valid){
continue;
}
CheckValue<IkReal> x10522=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10520*x10520)))+(((2.0)*x10519*x10520))+(((-1.0)*(x10519*x10519)))+(((-1.0)*(r12*r12))))),-1);
if(!x10522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10521.value)+(((1.5707963267949)*(x10522.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10523=IKcos(j4);
IkReal x10524=IKsin(j4);
IkReal x10525=(gconst4*r11);
IkReal x10526=(gconst5*r10);
IkReal x10527=((1.0)*cj1);
IkReal x10528=(gconst5*r00);
IkReal x10529=(gconst5*r20);
IkReal x10530=((1.0)*x10523);
IkReal x10531=(gconst4*x10523);
IkReal x10532=((1.0)*x10524);
IkReal x10533=(gconst4*x10524);
evalcond[0]=(((x10523*x10525))+((r12*x10524))+(((-1.0)*x10526*x10530)));
evalcond[1]=((((-1.0)*r22*x10530))+((r21*x10533))+(((-1.0)*x10529*x10532)));
evalcond[2]=((((-1.0)*r02*x10530))+((r01*x10533))+(((-1.0)*x10528*x10532)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10530))+((x10524*x10525))+(((-1.0)*x10526*x10532)));
evalcond[4]=(((r22*x10524))+((r21*x10531))+((sj1*sj2))+(((-1.0)*x10529*x10530))+(((-1.0)*cj2*x10527)));
evalcond[5]=((((-1.0)*sj2*x10527))+((r02*x10524))+(((-1.0)*cj2*sj1))+((r01*x10531))+(((-1.0)*x10528*x10530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10534=((1.0)*gconst5);
CheckValue<IkReal> x10535=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10534)))),-1);
if(!x10535.valid){
continue;
}
CheckValue<IkReal> x10536 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10534))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10535.value)))+(x10536.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10537=IKcos(j4);
IkReal x10538=IKsin(j4);
IkReal x10539=(gconst4*r11);
IkReal x10540=(gconst5*r10);
IkReal x10541=((1.0)*cj1);
IkReal x10542=(gconst5*r00);
IkReal x10543=(gconst5*r20);
IkReal x10544=((1.0)*x10537);
IkReal x10545=(gconst4*x10537);
IkReal x10546=((1.0)*x10538);
IkReal x10547=(gconst4*x10538);
evalcond[0]=(((x10537*x10539))+((r12*x10538))+(((-1.0)*x10540*x10544)));
evalcond[1]=((((-1.0)*x10543*x10546))+(((-1.0)*r22*x10544))+((r21*x10547)));
evalcond[2]=((((-1.0)*x10542*x10546))+(((-1.0)*r02*x10544))+((r01*x10547)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10544))+((x10538*x10539))+(((-1.0)*x10540*x10546)));
evalcond[4]=((((-1.0)*x10543*x10544))+(((-1.0)*cj2*x10541))+((r22*x10538))+((sj1*sj2))+((r21*x10545)));
evalcond[5]=(((r02*x10538))+(((-1.0)*x10542*x10544))+(((-1.0)*cj2*sj1))+((r01*x10545))+(((-1.0)*sj2*x10541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10548 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10548.valid){
continue;
}
CheckValue<IkReal> x10549=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10548.value)+(((1.5707963267949)*(x10549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10550=IKcos(j4);
IkReal x10551=IKsin(j4);
IkReal x10552=(gconst4*r11);
IkReal x10553=(gconst5*r10);
IkReal x10554=((1.0)*cj1);
IkReal x10555=(gconst5*r00);
IkReal x10556=(gconst5*r20);
IkReal x10557=((1.0)*x10550);
IkReal x10558=(gconst4*x10550);
IkReal x10559=((1.0)*x10551);
IkReal x10560=(gconst4*x10551);
evalcond[0]=(((x10550*x10552))+((r12*x10551))+(((-1.0)*x10553*x10557)));
evalcond[1]=(((r21*x10560))+(((-1.0)*x10556*x10559))+(((-1.0)*r22*x10557)));
evalcond[2]=(((r01*x10560))+(((-1.0)*r02*x10557))+(((-1.0)*x10555*x10559)));
evalcond[3]=((1.0)+((x10551*x10552))+(((-1.0)*r12*x10557))+(((-1.0)*x10553*x10559)));
evalcond[4]=(((r22*x10551))+(((-1.0)*cj2*x10554))+((sj1*sj2))+((r21*x10558))+(((-1.0)*x10556*x10557)));
evalcond[5]=(((r02*x10551))+(((-1.0)*sj2*x10554))+(((-1.0)*cj2*sj1))+(((-1.0)*x10555*x10557))+((r01*x10558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10561=gconst4*gconst4;
IkReal x10562=gconst5*gconst5;
IkReal x10563=(cj3*r22);
IkReal x10564=(gconst5*r11);
IkReal x10565=(r10*sj3);
IkReal x10566=(gconst4*r10);
IkReal x10567=((1.0)*gconst4);
IkReal x10568=((1.0)*cj3);
IkReal x10569=(r20*x10562);
IkReal x10570=(r21*x10561);
CheckValue<IkReal> x10571 = IKatan2WithCheck(IkReal((((x10563*x10564))+((x10563*x10566)))),IkReal((((cj3*r10*x10570))+((cj3*gconst4*r21*x10564))+(((-1.0)*r11*x10568*x10569))+(((-1.0)*gconst5*r20*x10566*x10568)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10571.valid){
continue;
}
CheckValue<IkReal> x10572=IKPowWithIntegerCheck(IKsign((((r11*sj3*x10570))+((r12*r22*sj3))+(((-1.0)*r20*sj3*x10564*x10567))+(((-1.0)*gconst5*r21*x10565*x10567))+((x10565*x10569)))),-1);
if(!x10572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10571.value)+(((1.5707963267949)*(x10572.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10573=IKsin(j4);
IkReal x10574=IKcos(j4);
IkReal x10575=(cj3*gconst4);
IkReal x10576=(sj1*sj2);
IkReal x10577=(gconst5*r10);
IkReal x10578=((1.0)*cj1);
IkReal x10579=(gconst4*sj3);
IkReal x10580=(gconst5*r00);
IkReal x10581=(cj3*gconst5);
IkReal x10582=(sj2*x10578);
IkReal x10583=((1.0)*cj2*sj1);
IkReal x10584=((1.0)*x10574);
IkReal x10585=((1.0)*x10573);
IkReal x10586=(gconst4*x10573);
IkReal x10587=((1.0)*gconst5*sj3);
IkReal x10588=(cj3*x10574);
IkReal x10589=(gconst5*sj3*x10574);
IkReal x10590=(x10583+x10582);
evalcond[0]=((((-1.0)*r22*x10584))+(((-1.0)*gconst5*r20*x10585))+((r21*x10586)));
evalcond[1]=((((-1.0)*r02*x10584))+((r01*x10586))+(((-1.0)*x10580*x10585)));
evalcond[2]=((1.0)+(((-1.0)*x10577*x10585))+((r11*x10586))+(((-1.0)*r12*x10584)));
evalcond[3]=(((r10*x10575))+((r11*x10581))+(((-1.0)*r12*sj3*x10585))+((sj3*x10574*x10577))+(((-1.0)*r11*x10579*x10584)));
evalcond[4]=((((-1.0)*cj3*r12*x10585))+(((-1.0)*r11*x10575*x10584))+(((-1.0)*r10*x10579))+(((-1.0)*r11*x10587))+((x10577*x10588)));
evalcond[5]=(((r20*x10575))+(((-1.0)*cj2*x10578))+(((-1.0)*r22*sj3*x10585))+((r21*x10581))+x10576+(((-1.0)*r21*x10579*x10584))+((r20*x10589)));
evalcond[6]=((((-1.0)*r01*x10579*x10584))+((r00*x10575))+(((-1.0)*x10590))+(((-1.0)*r02*sj3*x10585))+((sj3*x10574*x10580))+((r01*x10581)));
evalcond[7]=((((-1.0)*r01*x10587))+(((-1.0)*cj3*r02*x10585))+(((-1.0)*r00*x10579))+((x10580*x10588))+(((-1.0)*x10576))+((cj1*cj2))+(((-1.0)*r01*x10575*x10584)));
evalcond[8]=((((-1.0)*r21*x10575*x10584))+(((-1.0)*x10590))+(((-1.0)*r21*x10587))+(((-1.0)*r20*x10579))+(((-1.0)*cj3*r22*x10585))+((r20*x10574*x10581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10591=((1.0)*gconst5);
CheckValue<IkReal> x10592 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10591))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10592.valid){
continue;
}
CheckValue<IkReal> x10593=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10591)))),-1);
if(!x10593.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10592.value)+(((1.5707963267949)*(x10593.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10594=IKsin(j4);
IkReal x10595=IKcos(j4);
IkReal x10596=(cj3*gconst4);
IkReal x10597=(sj1*sj2);
IkReal x10598=(gconst5*r10);
IkReal x10599=((1.0)*cj1);
IkReal x10600=(gconst4*sj3);
IkReal x10601=(gconst5*r00);
IkReal x10602=(cj3*gconst5);
IkReal x10603=(sj2*x10599);
IkReal x10604=((1.0)*cj2*sj1);
IkReal x10605=((1.0)*x10595);
IkReal x10606=((1.0)*x10594);
IkReal x10607=(gconst4*x10594);
IkReal x10608=((1.0)*gconst5*sj3);
IkReal x10609=(cj3*x10595);
IkReal x10610=(gconst5*sj3*x10595);
IkReal x10611=(x10603+x10604);
evalcond[0]=(((r21*x10607))+(((-1.0)*gconst5*r20*x10606))+(((-1.0)*r22*x10605)));
evalcond[1]=(((r01*x10607))+(((-1.0)*r02*x10605))+(((-1.0)*x10601*x10606)));
evalcond[2]=((1.0)+(((-1.0)*x10598*x10606))+((r11*x10607))+(((-1.0)*r12*x10605)));
evalcond[3]=(((r11*x10602))+(((-1.0)*r11*x10600*x10605))+((sj3*x10595*x10598))+(((-1.0)*r12*sj3*x10606))+((r10*x10596)));
evalcond[4]=((((-1.0)*cj3*r12*x10606))+(((-1.0)*r11*x10608))+(((-1.0)*r10*x10600))+(((-1.0)*r11*x10596*x10605))+((x10598*x10609)));
evalcond[5]=((((-1.0)*cj2*x10599))+(((-1.0)*r21*x10600*x10605))+((r21*x10602))+((r20*x10596))+((r20*x10610))+x10597+(((-1.0)*r22*sj3*x10606)));
evalcond[6]=(((r01*x10602))+((r00*x10596))+(((-1.0)*r01*x10600*x10605))+(((-1.0)*x10611))+((sj3*x10595*x10601))+(((-1.0)*r02*sj3*x10606)));
evalcond[7]=(((x10601*x10609))+(((-1.0)*r01*x10596*x10605))+(((-1.0)*x10597))+(((-1.0)*r01*x10608))+(((-1.0)*r00*x10600))+(((-1.0)*cj3*r02*x10606))+((cj1*cj2)));
evalcond[8]=(((r20*x10595*x10602))+(((-1.0)*cj3*r22*x10606))+(((-1.0)*r20*x10600))+(((-1.0)*r21*x10596*x10605))+(((-1.0)*r21*x10608))+(((-1.0)*x10611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10612 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10612.valid){
continue;
}
CheckValue<IkReal> x10613=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10612.value)+(((1.5707963267949)*(x10613.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10614=IKsin(j4);
IkReal x10615=IKcos(j4);
IkReal x10616=(cj3*gconst4);
IkReal x10617=(sj1*sj2);
IkReal x10618=(gconst5*r10);
IkReal x10619=((1.0)*cj1);
IkReal x10620=(gconst4*sj3);
IkReal x10621=(gconst5*r00);
IkReal x10622=(cj3*gconst5);
IkReal x10623=(sj2*x10619);
IkReal x10624=((1.0)*cj2*sj1);
IkReal x10625=((1.0)*x10615);
IkReal x10626=((1.0)*x10614);
IkReal x10627=(gconst4*x10614);
IkReal x10628=((1.0)*gconst5*sj3);
IkReal x10629=(cj3*x10615);
IkReal x10630=(gconst5*sj3*x10615);
IkReal x10631=(x10623+x10624);
evalcond[0]=(((r21*x10627))+(((-1.0)*gconst5*r20*x10626))+(((-1.0)*r22*x10625)));
evalcond[1]=((((-1.0)*r02*x10625))+((r01*x10627))+(((-1.0)*x10621*x10626)));
evalcond[2]=((1.0)+(((-1.0)*x10618*x10626))+(((-1.0)*r12*x10625))+((r11*x10627)));
evalcond[3]=(((r10*x10616))+((r11*x10622))+(((-1.0)*r12*sj3*x10626))+(((-1.0)*r11*x10620*x10625))+((sj3*x10615*x10618)));
evalcond[4]=((((-1.0)*r11*x10628))+(((-1.0)*r11*x10616*x10625))+(((-1.0)*cj3*r12*x10626))+(((-1.0)*r10*x10620))+((x10618*x10629)));
evalcond[5]=(((r21*x10622))+(((-1.0)*cj2*x10619))+(((-1.0)*r22*sj3*x10626))+((r20*x10630))+((r20*x10616))+(((-1.0)*r21*x10620*x10625))+x10617);
evalcond[6]=(((r01*x10622))+(((-1.0)*r02*sj3*x10626))+(((-1.0)*r01*x10620*x10625))+(((-1.0)*x10631))+((sj3*x10615*x10621))+((r00*x10616)));
evalcond[7]=((((-1.0)*r01*x10628))+((x10621*x10629))+(((-1.0)*r01*x10616*x10625))+((cj1*cj2))+(((-1.0)*x10617))+(((-1.0)*cj3*r02*x10626))+(((-1.0)*r00*x10620)));
evalcond[8]=(((r20*x10615*x10622))+(((-1.0)*x10631))+(((-1.0)*r21*x10616*x10625))+(((-1.0)*r21*x10628))+(((-1.0)*cj3*r22*x10626))+(((-1.0)*r20*x10620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10632=((-1.0)*r21);
CheckValue<IkReal> x10635 = IKatan2WithCheck(IkReal(x10632),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10635.valid){
continue;
}
IkReal x10633=((1.0)*(x10635.value));
IkReal x10634=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10633)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10633)));
IkReal gconst4=(x10632*x10634);
IkReal gconst5=((1.0)*r20*x10634);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10636=((-1.0)*r21);
CheckValue<IkReal> x10639 = IKatan2WithCheck(IkReal(x10636),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10639.valid){
continue;
}
IkReal x10637=((1.0)*(x10639.value));
IkReal x10638=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10637)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10637)));
IkReal gconst4=(x10636*x10638);
IkReal gconst5=((1.0)*r20*x10638);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10640=((-1.0)*r21);
CheckValue<IkReal> x10643 = IKatan2WithCheck(IkReal(x10640),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10643.valid){
continue;
}
IkReal x10641=((1.0)*(x10643.value));
IkReal x10642=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10641)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10641)));
IkReal gconst4=(x10640*x10642);
IkReal gconst5=((1.0)*r20*x10642);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10644=((-1.0)*r21);
CheckValue<IkReal> x10647 = IKatan2WithCheck(IkReal(x10644),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10647.valid){
continue;
}
IkReal x10645=((1.0)*(x10647.value));
IkReal x10646=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10645)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10645)));
IkReal gconst4=(x10644*x10646);
IkReal gconst5=((1.0)*r20*x10646);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10648=((-1.0)*r21);
CheckValue<IkReal> x10651 = IKatan2WithCheck(IkReal(x10648),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10651.valid){
continue;
}
IkReal x10649=((1.0)*(x10651.value));
IkReal x10650=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10649)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10649)));
IkReal gconst4=(x10648*x10650);
IkReal gconst5=((1.0)*r20*x10650);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10652=((-1.0)*r21);
CheckValue<IkReal> x10655 = IKatan2WithCheck(IkReal(x10652),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10655.valid){
continue;
}
IkReal x10653=((1.0)*(x10655.value));
IkReal x10654=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10653)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10653)));
IkReal gconst4=(x10652*x10654);
IkReal gconst5=((1.0)*r20*x10654);
IkReal x10656=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10660=IKPowWithIntegerCheck(x10656,-1);
if(!x10660.valid){
continue;
}
IkReal x10657=x10660.value;
IkReal x10658=((1.0)*x10657);
IkReal x10659=((((-2.0)*r10*r11*r20*r21*x10657))+(((-1.0)*x10658*(r10*r10)*(r20*r20)))+(((-1.0)*x10658*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x10659;
j4eval[1]=r12;
j4eval[2]=x10656;
j4eval[3]=IKsign(x10659);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10661=(gconst5*r10);
IkReal x10662=(gconst4*r11);
CheckValue<IkReal> x10663=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10662*x10662)))+(((2.0)*x10661*x10662))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10661*x10661))))),-1);
if(!x10663.valid){
continue;
}
CheckValue<IkReal> x10664 = IKatan2WithCheck(IkReal(((((-1.0)*x10662))+x10661)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10663.value)))+(x10664.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10665=IKsin(j4);
IkReal x10666=IKcos(j4);
IkReal x10667=(gconst4*r11);
IkReal x10668=((1.0)*cj1);
IkReal x10669=(gconst5*r10);
IkReal x10670=(gconst4*r01);
IkReal x10671=(gconst5*r00);
IkReal x10672=(gconst4*r21);
IkReal x10673=(gconst5*r20);
IkReal x10674=((1.0)*x10666);
IkReal x10675=((1.0)*x10665);
evalcond[0]=((((-1.0)*x10673*x10675))+(((-1.0)*r22*x10674))+((x10665*x10672)));
evalcond[1]=((((-1.0)*r02*x10674))+(((-1.0)*x10671*x10675))+((x10665*x10670)));
evalcond[2]=(((x10666*x10669))+(((-1.0)*r12*x10675))+(((-1.0)*x10667*x10674)));
evalcond[3]=((-1.0)+(((-1.0)*x10669*x10675))+((x10665*x10667))+(((-1.0)*r12*x10674)));
evalcond[4]=(((x10666*x10671))+(((-1.0)*r02*x10675))+(((-1.0)*cj2*x10668))+((sj1*sj2))+(((-1.0)*x10670*x10674)));
evalcond[5]=(((x10666*x10673))+(((-1.0)*x10672*x10674))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x10675))+(((-1.0)*sj2*x10668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10676=((1.0)*gconst5);
CheckValue<IkReal> x10677 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10676)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10677.valid){
continue;
}
CheckValue<IkReal> x10678=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10676))+(((-1.0)*gconst4*r20)))),-1);
if(!x10678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10677.value)+(((1.5707963267949)*(x10678.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10679=IKsin(j4);
IkReal x10680=IKcos(j4);
IkReal x10681=(gconst4*r11);
IkReal x10682=((1.0)*cj1);
IkReal x10683=(gconst5*r10);
IkReal x10684=(gconst4*r01);
IkReal x10685=(gconst5*r00);
IkReal x10686=(gconst4*r21);
IkReal x10687=(gconst5*r20);
IkReal x10688=((1.0)*x10680);
IkReal x10689=((1.0)*x10679);
evalcond[0]=((((-1.0)*x10687*x10689))+(((-1.0)*r22*x10688))+((x10679*x10686)));
evalcond[1]=((((-1.0)*r02*x10688))+(((-1.0)*x10685*x10689))+((x10679*x10684)));
evalcond[2]=(((x10680*x10683))+(((-1.0)*r12*x10689))+(((-1.0)*x10681*x10688)));
evalcond[3]=((-1.0)+(((-1.0)*x10683*x10689))+(((-1.0)*r12*x10688))+((x10679*x10681)));
evalcond[4]=((((-1.0)*r02*x10689))+(((-1.0)*x10684*x10688))+((x10680*x10685))+((sj1*sj2))+(((-1.0)*cj2*x10682)));
evalcond[5]=((((-1.0)*r22*x10689))+((x10680*x10687))+(((-1.0)*sj2*x10682))+(((-1.0)*cj2*sj1))+(((-1.0)*x10686*x10688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10690=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10690.valid){
continue;
}
CheckValue<IkReal> x10691 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10690.value)))+(x10691.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10692=IKsin(j4);
IkReal x10693=IKcos(j4);
IkReal x10694=(gconst4*r11);
IkReal x10695=((1.0)*cj1);
IkReal x10696=(gconst5*r10);
IkReal x10697=(gconst4*r01);
IkReal x10698=(gconst5*r00);
IkReal x10699=(gconst4*r21);
IkReal x10700=(gconst5*r20);
IkReal x10701=((1.0)*x10693);
IkReal x10702=((1.0)*x10692);
evalcond[0]=(((x10692*x10699))+(((-1.0)*r22*x10701))+(((-1.0)*x10700*x10702)));
evalcond[1]=(((x10692*x10697))+(((-1.0)*x10698*x10702))+(((-1.0)*r02*x10701)));
evalcond[2]=((((-1.0)*r12*x10702))+((x10693*x10696))+(((-1.0)*x10694*x10701)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10701))+((x10692*x10694))+(((-1.0)*x10696*x10702)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj2*x10695))+(((-1.0)*x10697*x10701))+((x10693*x10698))+(((-1.0)*r02*x10702)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r22*x10702))+(((-1.0)*x10699*x10701))+((x10693*x10700))+(((-1.0)*sj2*x10695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10703=((-1.0)*r21);
CheckValue<IkReal> x10706 = IKatan2WithCheck(IkReal(x10703),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10706.valid){
continue;
}
IkReal x10704=((1.0)*(x10706.value));
IkReal x10705=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10704)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10704)));
IkReal gconst4=(x10703*x10705);
IkReal gconst5=((1.0)*r20*x10705);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10707=((-1.0)*r21);
CheckValue<IkReal> x10710 = IKatan2WithCheck(IkReal(x10707),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10710.valid){
continue;
}
IkReal x10708=((1.0)*(x10710.value));
IkReal x10709=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10708)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10708)));
IkReal gconst4=(x10707*x10709);
IkReal gconst5=((1.0)*r20*x10709);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10711=((-1.0)*r21);
CheckValue<IkReal> x10714 = IKatan2WithCheck(IkReal(x10711),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10714.valid){
continue;
}
IkReal x10712=((1.0)*(x10714.value));
IkReal x10713=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10712)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10712)));
IkReal gconst4=(x10711*x10713);
IkReal gconst5=((1.0)*r20*x10713);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10715=(gconst5*r10);
IkReal x10716=(gconst4*r11);
CheckValue<IkReal> x10717 = IKatan2WithCheck(IkReal(((((-1.0)*x10715))+x10716)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10717.valid){
continue;
}
CheckValue<IkReal> x10718=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10715*x10715)+(x10716*x10716)+(((-2.0)*x10715*x10716)))),-1);
if(!x10718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10717.value)+(((1.5707963267949)*(x10718.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10719=IKcos(j4);
IkReal x10720=IKsin(j4);
IkReal x10721=(gconst4*r11);
IkReal x10722=(gconst5*r10);
IkReal x10723=((1.0)*cj1);
IkReal x10724=(gconst5*r00);
IkReal x10725=(gconst5*r20);
IkReal x10726=((1.0)*x10719);
IkReal x10727=(gconst4*x10719);
IkReal x10728=((1.0)*x10720);
IkReal x10729=(gconst4*x10720);
evalcond[0]=(((x10719*x10721))+(((-1.0)*x10722*x10726))+((r12*x10720)));
evalcond[1]=((((-1.0)*r22*x10726))+((r21*x10729))+(((-1.0)*x10725*x10728)));
evalcond[2]=((((-1.0)*r02*x10726))+((r01*x10729))+(((-1.0)*x10724*x10728)));
evalcond[3]=((-1.0)+((x10720*x10721))+(((-1.0)*x10722*x10728))+(((-1.0)*r12*x10726)));
evalcond[4]=(((r02*x10720))+((sj1*sj2))+(((-1.0)*cj2*x10723))+((r01*x10727))+(((-1.0)*x10724*x10726)));
evalcond[5]=(((r22*x10720))+((r21*x10727))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10723))+(((-1.0)*x10725*x10726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10730=((1.0)*gconst5);
CheckValue<IkReal> x10731=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10730))+(((-1.0)*gconst4*r20)))),-1);
if(!x10731.valid){
continue;
}
CheckValue<IkReal> x10732 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10730))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10731.value)))+(x10732.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10733=IKcos(j4);
IkReal x10734=IKsin(j4);
IkReal x10735=(gconst4*r11);
IkReal x10736=(gconst5*r10);
IkReal x10737=((1.0)*cj1);
IkReal x10738=(gconst5*r00);
IkReal x10739=(gconst5*r20);
IkReal x10740=((1.0)*x10733);
IkReal x10741=(gconst4*x10733);
IkReal x10742=((1.0)*x10734);
IkReal x10743=(gconst4*x10734);
evalcond[0]=(((x10733*x10735))+(((-1.0)*x10736*x10740))+((r12*x10734)));
evalcond[1]=((((-1.0)*x10739*x10742))+(((-1.0)*r22*x10740))+((r21*x10743)));
evalcond[2]=((((-1.0)*x10738*x10742))+(((-1.0)*r02*x10740))+((r01*x10743)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10740))+(((-1.0)*x10736*x10742))+((x10734*x10735)));
evalcond[4]=(((r02*x10734))+(((-1.0)*x10738*x10740))+((sj1*sj2))+(((-1.0)*cj2*x10737))+((r01*x10741)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10739*x10740))+(((-1.0)*sj2*x10737))+((r22*x10734))+((r21*x10741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10744=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10744.valid){
continue;
}
CheckValue<IkReal> x10745 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10744.value)))+(x10745.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10746=IKcos(j4);
IkReal x10747=IKsin(j4);
IkReal x10748=(gconst4*r11);
IkReal x10749=(gconst5*r10);
IkReal x10750=((1.0)*cj1);
IkReal x10751=(gconst5*r00);
IkReal x10752=(gconst5*r20);
IkReal x10753=((1.0)*x10746);
IkReal x10754=(gconst4*x10746);
IkReal x10755=((1.0)*x10747);
IkReal x10756=(gconst4*x10747);
evalcond[0]=(((x10746*x10748))+((r12*x10747))+(((-1.0)*x10749*x10753)));
evalcond[1]=((((-1.0)*x10752*x10755))+(((-1.0)*r22*x10753))+((r21*x10756)));
evalcond[2]=((((-1.0)*r02*x10753))+(((-1.0)*x10751*x10755))+((r01*x10756)));
evalcond[3]=((-1.0)+((x10747*x10748))+(((-1.0)*r12*x10753))+(((-1.0)*x10749*x10755)));
evalcond[4]=((((-1.0)*cj2*x10750))+((sj1*sj2))+((r02*x10747))+(((-1.0)*x10751*x10753))+((r01*x10754)));
evalcond[5]=(((r22*x10747))+(((-1.0)*cj2*sj1))+(((-1.0)*x10752*x10753))+((r21*x10754))+(((-1.0)*sj2*x10750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10757=((-1.0)*r21);
CheckValue<IkReal> x10760 = IKatan2WithCheck(IkReal(x10757),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10760.valid){
continue;
}
IkReal x10758=((1.0)*(x10760.value));
IkReal x10759=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10758)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10758)));
IkReal gconst4=(x10757*x10759);
IkReal gconst5=((1.0)*r20*x10759);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10761=((-1.0)*r21);
CheckValue<IkReal> x10764 = IKatan2WithCheck(IkReal(x10761),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10764.valid){
continue;
}
IkReal x10762=((1.0)*(x10764.value));
IkReal x10763=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10762)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10762)));
IkReal gconst4=(x10761*x10763);
IkReal gconst5=((1.0)*r20*x10763);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10765=((-1.0)*r21);
CheckValue<IkReal> x10768 = IKatan2WithCheck(IkReal(x10765),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10768.valid){
continue;
}
IkReal x10766=((1.0)*(x10768.value));
IkReal x10767=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10766)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10766)));
IkReal gconst4=(x10765*x10767);
IkReal gconst5=((1.0)*r20*x10767);
IkReal x10769=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10773=IKPowWithIntegerCheck(x10769,-1);
if(!x10773.valid){
continue;
}
IkReal x10770=x10773.value;
IkReal x10771=((1.0)*x10770);
IkReal x10772=((((-1.0)*x10771*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10771*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10770)));
j4eval[0]=x10772;
j4eval[1]=r12;
j4eval[2]=x10769;
j4eval[3]=IKsign(x10772);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10774=(gconst5*r10);
IkReal x10775=(gconst4*r11);
CheckValue<IkReal> x10776=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10774*x10774)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10775*x10775)))+(((2.0)*x10774*x10775)))),-1);
if(!x10776.valid){
continue;
}
CheckValue<IkReal> x10777 = IKatan2WithCheck(IkReal(((((-1.0)*x10775))+x10774)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10776.value)))+(x10777.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10778=IKsin(j4);
IkReal x10779=IKcos(j4);
IkReal x10780=(gconst4*r11);
IkReal x10781=(gconst5*r10);
IkReal x10782=(gconst4*r01);
IkReal x10783=(gconst5*r00);
IkReal x10784=(gconst4*r21);
IkReal x10785=(gconst5*r20);
IkReal x10786=((1.0)*x10779);
IkReal x10787=((1.0)*x10778);
evalcond[0]=(((x10778*x10784))+(((-1.0)*x10785*x10787))+(((-1.0)*r22*x10786)));
evalcond[1]=((((-1.0)*x10783*x10787))+((x10778*x10782))+(((-1.0)*r02*x10786)));
evalcond[2]=((((-1.0)*x10780*x10786))+((x10779*x10781))+(((-1.0)*r12*x10787)));
evalcond[3]=((-1.0)+((x10778*x10780))+(((-1.0)*r12*x10786))+(((-1.0)*x10781*x10787)));
evalcond[4]=(((cj2*sj1))+((x10779*x10783))+((cj1*sj2))+(((-1.0)*x10782*x10786))+(((-1.0)*r02*x10787)));
evalcond[5]=(((x10779*x10785))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10784*x10786))+(((-1.0)*r22*x10787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10788=((1.0)*gconst5);
CheckValue<IkReal> x10789 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10788))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10789.valid){
continue;
}
CheckValue<IkReal> x10790=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10788))+(((-1.0)*gconst4*r20)))),-1);
if(!x10790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10789.value)+(((1.5707963267949)*(x10790.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10791=IKsin(j4);
IkReal x10792=IKcos(j4);
IkReal x10793=(gconst4*r11);
IkReal x10794=(gconst5*r10);
IkReal x10795=(gconst4*r01);
IkReal x10796=(gconst5*r00);
IkReal x10797=(gconst4*r21);
IkReal x10798=(gconst5*r20);
IkReal x10799=((1.0)*x10792);
IkReal x10800=((1.0)*x10791);
evalcond[0]=((((-1.0)*x10798*x10800))+((x10791*x10797))+(((-1.0)*r22*x10799)));
evalcond[1]=((((-1.0)*r02*x10799))+(((-1.0)*x10796*x10800))+((x10791*x10795)));
evalcond[2]=(((x10792*x10794))+(((-1.0)*x10793*x10799))+(((-1.0)*r12*x10800)));
evalcond[3]=((-1.0)+(((-1.0)*x10794*x10800))+(((-1.0)*r12*x10799))+((x10791*x10793)));
evalcond[4]=(((cj2*sj1))+((x10792*x10796))+((cj1*sj2))+(((-1.0)*r02*x10800))+(((-1.0)*x10795*x10799)));
evalcond[5]=(((x10792*x10798))+(((-1.0)*r22*x10800))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10797*x10799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10801=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10801.valid){
continue;
}
CheckValue<IkReal> x10802 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10801.value)))+(x10802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10803=IKsin(j4);
IkReal x10804=IKcos(j4);
IkReal x10805=(gconst4*r11);
IkReal x10806=(gconst5*r10);
IkReal x10807=(gconst4*r01);
IkReal x10808=(gconst5*r00);
IkReal x10809=(gconst4*r21);
IkReal x10810=(gconst5*r20);
IkReal x10811=((1.0)*x10804);
IkReal x10812=((1.0)*x10803);
evalcond[0]=((((-1.0)*x10810*x10812))+((x10803*x10809))+(((-1.0)*r22*x10811)));
evalcond[1]=((((-1.0)*r02*x10811))+((x10803*x10807))+(((-1.0)*x10808*x10812)));
evalcond[2]=((((-1.0)*x10805*x10811))+(((-1.0)*r12*x10812))+((x10804*x10806)));
evalcond[3]=((-1.0)+((x10803*x10805))+(((-1.0)*x10806*x10812))+(((-1.0)*r12*x10811)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10812))+((cj1*sj2))+((x10804*x10808))+(((-1.0)*x10807*x10811)));
evalcond[5]=(((x10804*x10810))+(((-1.0)*x10809*x10811))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10813=((-1.0)*r21);
CheckValue<IkReal> x10816 = IKatan2WithCheck(IkReal(x10813),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10816.valid){
continue;
}
IkReal x10814=((1.0)*(x10816.value));
IkReal x10815=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10814)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10814)));
IkReal gconst4=(x10813*x10815);
IkReal gconst5=((1.0)*r20*x10815);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10817=((-1.0)*r21);
CheckValue<IkReal> x10820 = IKatan2WithCheck(IkReal(x10817),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10820.valid){
continue;
}
IkReal x10818=((1.0)*(x10820.value));
IkReal x10819=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10818)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10818)));
IkReal gconst4=(x10817*x10819);
IkReal gconst5=((1.0)*r20*x10819);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10821=((-1.0)*r21);
CheckValue<IkReal> x10824 = IKatan2WithCheck(IkReal(x10821),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10824.valid){
continue;
}
IkReal x10822=((1.0)*(x10824.value));
IkReal x10823=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10822)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10822)));
IkReal gconst4=(x10821*x10823);
IkReal gconst5=((1.0)*r20*x10823);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10825=(gconst5*r10);
IkReal x10826=(gconst4*r11);
CheckValue<IkReal> x10827=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10826*x10826)+(x10825*x10825)+(((-2.0)*x10825*x10826)))),-1);
if(!x10827.valid){
continue;
}
CheckValue<IkReal> x10828 = IKatan2WithCheck(IkReal(((((-1.0)*x10825))+x10826)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10827.value)))+(x10828.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10829=IKcos(j4);
IkReal x10830=IKsin(j4);
IkReal x10831=(gconst4*r11);
IkReal x10832=(gconst5*r10);
IkReal x10833=(gconst5*r00);
IkReal x10834=(gconst5*r20);
IkReal x10835=((1.0)*x10829);
IkReal x10836=(gconst4*x10829);
IkReal x10837=((1.0)*x10830);
IkReal x10838=(gconst4*x10830);
evalcond[0]=((((-1.0)*x10832*x10835))+((r12*x10830))+((x10829*x10831)));
evalcond[1]=((((-1.0)*x10834*x10837))+((r21*x10838))+(((-1.0)*r22*x10835)));
evalcond[2]=(((r01*x10838))+(((-1.0)*x10833*x10837))+(((-1.0)*r02*x10835)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10835))+(((-1.0)*x10832*x10837))+((x10830*x10831)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x10830))+((r01*x10836))+(((-1.0)*x10833*x10835)));
evalcond[5]=(((r22*x10830))+(((-1.0)*x10834*x10835))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10839=((1.0)*gconst5);
CheckValue<IkReal> x10840 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10840.valid){
continue;
}
CheckValue<IkReal> x10841=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10839))+(((-1.0)*gconst4*r20)))),-1);
if(!x10841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10840.value)+(((1.5707963267949)*(x10841.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10842=IKcos(j4);
IkReal x10843=IKsin(j4);
IkReal x10844=(gconst4*r11);
IkReal x10845=(gconst5*r10);
IkReal x10846=(gconst5*r00);
IkReal x10847=(gconst5*r20);
IkReal x10848=((1.0)*x10842);
IkReal x10849=(gconst4*x10842);
IkReal x10850=((1.0)*x10843);
IkReal x10851=(gconst4*x10843);
evalcond[0]=((((-1.0)*x10845*x10848))+((x10842*x10844))+((r12*x10843)));
evalcond[1]=(((r21*x10851))+(((-1.0)*r22*x10848))+(((-1.0)*x10847*x10850)));
evalcond[2]=((((-1.0)*r02*x10848))+((r01*x10851))+(((-1.0)*x10846*x10850)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10848))+((x10843*x10844))+(((-1.0)*x10845*x10850)));
evalcond[4]=(((r01*x10849))+((cj2*sj1))+((cj1*sj2))+((r02*x10843))+(((-1.0)*x10846*x10848)));
evalcond[5]=((((-1.0)*x10847*x10848))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10843))+((r21*x10849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10852=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10852.valid){
continue;
}
CheckValue<IkReal> x10853 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10852.value)))+(x10853.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10854=IKcos(j4);
IkReal x10855=IKsin(j4);
IkReal x10856=(gconst4*r11);
IkReal x10857=(gconst5*r10);
IkReal x10858=(gconst5*r00);
IkReal x10859=(gconst5*r20);
IkReal x10860=((1.0)*x10854);
IkReal x10861=(gconst4*x10854);
IkReal x10862=((1.0)*x10855);
IkReal x10863=(gconst4*x10855);
evalcond[0]=(((x10854*x10856))+((r12*x10855))+(((-1.0)*x10857*x10860)));
evalcond[1]=((((-1.0)*r22*x10860))+(((-1.0)*x10859*x10862))+((r21*x10863)));
evalcond[2]=((((-1.0)*x10858*x10862))+((r01*x10863))+(((-1.0)*r02*x10860)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10860))+((x10855*x10856))+(((-1.0)*x10857*x10862)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10858*x10860))+((cj1*sj2))+((r01*x10861))+((r02*x10855)));
evalcond[5]=((((-1.0)*x10859*x10860))+((r21*x10861))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10864=((-1.0)*r21);
IkReal x10865=((-1.0)*px);
CheckValue<IkReal> x10867 = IKatan2WithCheck(IkReal(x10864),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10867.valid){
continue;
}
IkReal x10866=((1.0)*(x10867.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10866)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10865);
rxp1_1=(px*r21);
rxp1_2=(r11*x10865);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10866)));
IkReal gconst4=x10864;
IkReal gconst5=((1.0)*r20);
IkReal x10868=((1.0)*cj3);
IkReal x10869=(r10*r20);
IkReal x10870=(r11*r21);
j4eval[0]=((((-1.0)*x10870))+(((-1.0)*x10869)));
j4eval[1]=(((x10868*x10870))+((x10868*x10869)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10871=((-1.0)*r21);
IkReal x10872=((-1.0)*px);
CheckValue<IkReal> x10874 = IKatan2WithCheck(IkReal(x10871),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10874.valid){
continue;
}
IkReal x10873=((1.0)*(x10874.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10873)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10872);
rxp1_1=(px*r21);
rxp1_2=(r11*x10872);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10873)));
IkReal gconst4=x10871;
IkReal gconst5=((1.0)*r20);
IkReal x10875=((1.0)*r11*r21);
IkReal x10876=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10875))+(((-1.0)*x10876)));
j4eval[1]=(((sj3*x10876))+((sj3*x10875)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10877=((-1.0)*r21);
IkReal x10878=((-1.0)*px);
CheckValue<IkReal> x10880 = IKatan2WithCheck(IkReal(x10877),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10880.valid){
continue;
}
IkReal x10879=((1.0)*(x10880.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10879)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10878);
rxp1_1=(px*r21);
rxp1_2=(r11*x10878);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10879)));
IkReal gconst4=x10877;
IkReal gconst5=((1.0)*r20);
IkReal x10881=((1.0)*sj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((r11*r21*x10881))+((r10*r20*x10881)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10882=((1.0)*r11);
CheckValue<IkReal> x10883=IKPowWithIntegerCheck(r02,-1);
if(!x10883.valid){
continue;
}
CheckValue<IkReal> x10884=IKPowWithIntegerCheck(sj3,-1);
if(!x10884.valid){
continue;
}
CheckValue<IkReal> x10885=IKPowWithIntegerCheck(((((-1.0)*gconst4*sj3*x10882))+((gconst5*r10*sj3))),-1);
if(!x10885.valid){
continue;
}
if( IKabs(((x10883.value)*(x10884.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10885.value)*(((((-1.0)*cj3*gconst5*x10882))+(((-1.0)*cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10883.value)*(x10884.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x10885.value)*(((((-1.0)*cj3*gconst5*x10882))+(((-1.0)*cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10883.value)*(x10884.value)*((((cj2*sj1))+((cj1*sj2))))), ((x10885.value)*(((((-1.0)*cj3*gconst5*x10882))+(((-1.0)*cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10886=IKsin(j4);
IkReal x10887=IKcos(j4);
IkReal x10888=(sj1*sj2);
IkReal x10889=(r10*sj3);
IkReal x10890=((1.0)*gconst4);
IkReal x10891=(r20*sj3);
IkReal x10892=((1.0)*gconst5);
IkReal x10893=(r21*sj3);
IkReal x10894=((1.0)*cj1);
IkReal x10895=(cj2*sj1);
IkReal x10896=(cj3*r20);
IkReal x10897=(cj3*r10);
IkReal x10898=(cj3*gconst5);
IkReal x10899=(cj2*x10894);
IkReal x10900=(gconst5*x10887);
IkReal x10901=(gconst4*x10886);
IkReal x10902=(r11*x10887);
IkReal x10903=((1.0)*r02*x10886);
evalcond[0]=((-1.0)*r02*x10887);
evalcond[1]=((((-1.0)*r20*x10886*x10892))+((r21*x10901)));
evalcond[2]=(((cj1*sj2))+(((-1.0)*sj3*x10903))+x10895);
evalcond[3]=((-1.0)+(((-1.0)*r10*x10886*x10892))+((r11*x10901)));
evalcond[4]=((((-1.0)*x10899))+(((-1.0)*cj3*x10903))+x10888);
evalcond[5]=((((-1.0)*sj3*x10890*x10902))+((gconst4*x10897))+((x10889*x10900))+((r11*x10898)));
evalcond[6]=((((-1.0)*x10889*x10890))+(((-1.0)*cj3*x10890*x10902))+(((-1.0)*r11*sj3*x10892))+((x10897*x10900)));
evalcond[7]=((((-1.0)*x10887*x10890*x10893))+((x10891*x10900))+(((-1.0)*x10899))+((gconst4*x10896))+((r21*x10898))+x10888);
evalcond[8]=((((-1.0)*sj2*x10894))+(((-1.0)*x10895))+(((-1.0)*x10890*x10891))+(((-1.0)*cj3*r21*x10887*x10890))+(((-1.0)*x10892*x10893))+((x10896*x10900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10904=((1.0)*gconst5);
IkReal x10905=(gconst4*r11);
CheckValue<IkReal> x10906=IKPowWithIntegerCheck(((((-1.0)*r10*x10904))+x10905),-1);
if(!x10906.valid){
continue;
}
CheckValue<IkReal> x10907=IKPowWithIntegerCheck(((((-1.0)*sj3*x10905))+((gconst5*r10*sj3))),-1);
if(!x10907.valid){
continue;
}
if( IKabs(x10906.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10907.value)*(((((-1.0)*cj3*r11*x10904))+(((-1.0)*cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10906.value)+IKsqr(((x10907.value)*(((((-1.0)*cj3*r11*x10904))+(((-1.0)*cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10906.value, ((x10907.value)*(((((-1.0)*cj3*r11*x10904))+(((-1.0)*cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10908=IKsin(j4);
IkReal x10909=IKcos(j4);
IkReal x10910=(sj1*sj2);
IkReal x10911=(r10*sj3);
IkReal x10912=((1.0)*gconst4);
IkReal x10913=(r20*sj3);
IkReal x10914=((1.0)*gconst5);
IkReal x10915=(r21*sj3);
IkReal x10916=((1.0)*cj1);
IkReal x10917=(cj2*sj1);
IkReal x10918=(cj3*r20);
IkReal x10919=(cj3*r10);
IkReal x10920=(cj3*gconst5);
IkReal x10921=(cj2*x10916);
IkReal x10922=(gconst5*x10909);
IkReal x10923=(gconst4*x10908);
IkReal x10924=(r11*x10909);
IkReal x10925=((1.0)*r02*x10908);
evalcond[0]=((-1.0)*r02*x10909);
evalcond[1]=(((r21*x10923))+(((-1.0)*r20*x10908*x10914)));
evalcond[2]=((((-1.0)*sj3*x10925))+((cj1*sj2))+x10917);
evalcond[3]=((-1.0)+(((-1.0)*r10*x10908*x10914))+((r11*x10923)));
evalcond[4]=((((-1.0)*x10921))+(((-1.0)*cj3*x10925))+x10910);
evalcond[5]=(((gconst4*x10919))+(((-1.0)*sj3*x10912*x10924))+((x10911*x10922))+((r11*x10920)));
evalcond[6]=((((-1.0)*cj3*x10912*x10924))+(((-1.0)*x10911*x10912))+(((-1.0)*r11*sj3*x10914))+((x10919*x10922)));
evalcond[7]=(((gconst4*x10918))+(((-1.0)*x10921))+((x10913*x10922))+((r21*x10920))+(((-1.0)*x10909*x10912*x10915))+x10910);
evalcond[8]=((((-1.0)*sj2*x10916))+(((-1.0)*x10914*x10915))+(((-1.0)*x10912*x10913))+(((-1.0)*cj3*r21*x10909*x10912))+((x10918*x10922))+(((-1.0)*x10917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10926=(gconst5*r10);
IkReal x10927=(gconst4*r11);
CheckValue<IkReal> x10928=IKPowWithIntegerCheck(((((-1.0)*x10926))+x10927),-1);
if(!x10928.valid){
continue;
}
CheckValue<IkReal> x10929=IKPowWithIntegerCheck(((((-1.0)*cj3*x10927))+((cj3*x10926))),-1);
if(!x10929.valid){
continue;
}
if( IKabs(x10928.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10929.value)*((((gconst4*r10*sj3))+((gconst5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10928.value)+IKsqr(((x10929.value)*((((gconst4*r10*sj3))+((gconst5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10928.value, ((x10929.value)*((((gconst4*r10*sj3))+((gconst5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10930=IKsin(j4);
IkReal x10931=IKcos(j4);
IkReal x10932=(sj1*sj2);
IkReal x10933=(r10*sj3);
IkReal x10934=((1.0)*gconst4);
IkReal x10935=(r20*sj3);
IkReal x10936=((1.0)*gconst5);
IkReal x10937=(r21*sj3);
IkReal x10938=((1.0)*cj1);
IkReal x10939=(cj2*sj1);
IkReal x10940=(cj3*r20);
IkReal x10941=(cj3*r10);
IkReal x10942=(cj3*gconst5);
IkReal x10943=(cj2*x10938);
IkReal x10944=(gconst5*x10931);
IkReal x10945=(gconst4*x10930);
IkReal x10946=(r11*x10931);
IkReal x10947=((1.0)*r02*x10930);
evalcond[0]=((-1.0)*r02*x10931);
evalcond[1]=(((r21*x10945))+(((-1.0)*r20*x10930*x10936)));
evalcond[2]=(((cj1*sj2))+(((-1.0)*sj3*x10947))+x10939);
evalcond[3]=((-1.0)+((r11*x10945))+(((-1.0)*r10*x10930*x10936)));
evalcond[4]=((((-1.0)*cj3*x10947))+(((-1.0)*x10943))+x10932);
evalcond[5]=(((r11*x10942))+((gconst4*x10941))+((x10933*x10944))+(((-1.0)*sj3*x10934*x10946)));
evalcond[6]=((((-1.0)*r11*sj3*x10936))+((x10941*x10944))+(((-1.0)*cj3*x10934*x10946))+(((-1.0)*x10933*x10934)));
evalcond[7]=(((r21*x10942))+((gconst4*x10940))+(((-1.0)*x10943))+(((-1.0)*x10931*x10934*x10937))+((x10935*x10944))+x10932);
evalcond[8]=((((-1.0)*x10939))+(((-1.0)*cj3*r21*x10931*x10934))+(((-1.0)*x10936*x10937))+((x10940*x10944))+(((-1.0)*x10934*x10935))+(((-1.0)*sj2*x10938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10948=gconst4*gconst4;
IkReal x10949=gconst5*gconst5;
IkReal x10950=(cj3*r22);
IkReal x10951=(gconst5*r11);
IkReal x10952=(r10*sj3);
IkReal x10953=(gconst4*r10);
IkReal x10954=((1.0)*gconst4);
IkReal x10955=((1.0)*cj3);
IkReal x10956=(r20*x10949);
IkReal x10957=(r21*x10948);
CheckValue<IkReal> x10958 = IKatan2WithCheck(IkReal((((x10950*x10951))+((x10950*x10953)))),IkReal((((cj3*gconst4*r21*x10951))+((cj3*r10*x10957))+(((-1.0)*gconst5*r20*x10953*x10955))+(((-1.0)*r11*x10955*x10956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10958.valid){
continue;
}
CheckValue<IkReal> x10959=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21*x10952*x10954))+(((-1.0)*r20*sj3*x10951*x10954))+((r11*sj3*x10957))+((r12*r22*sj3))+((x10952*x10956)))),-1);
if(!x10959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10958.value)+(((1.5707963267949)*(x10959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10960=IKsin(j4);
IkReal x10961=IKcos(j4);
IkReal x10962=(sj1*sj2);
IkReal x10963=((1.0)*sj3);
IkReal x10964=(cj3*gconst4);
IkReal x10965=(gconst5*r21);
IkReal x10966=(gconst5*r10);
IkReal x10967=(gconst5*r01);
IkReal x10968=((1.0)*cj1);
IkReal x10969=(gconst4*sj3);
IkReal x10970=(cj2*sj1);
IkReal x10971=(gconst5*r11);
IkReal x10972=(gconst5*r00);
IkReal x10973=(gconst5*r20);
IkReal x10974=(cj2*x10968);
IkReal x10975=((1.0)*x10961);
IkReal x10976=(r12*x10960);
IkReal x10977=(gconst4*x10960);
IkReal x10978=((1.0)*x10960);
IkReal x10979=(cj3*x10961);
IkReal x10980=(gconst5*sj3*x10961);
evalcond[0]=((((-1.0)*x10973*x10978))+(((-1.0)*r22*x10975))+((r21*x10977)));
evalcond[1]=(((r01*x10977))+(((-1.0)*x10972*x10978))+(((-1.0)*r02*x10975)));
evalcond[2]=((-1.0)+((r11*x10977))+(((-1.0)*x10966*x10978))+(((-1.0)*r12*x10975)));
evalcond[3]=(((cj3*x10971))+(((-1.0)*x10963*x10976))+(((-1.0)*gconst4*r11*x10961*x10963))+((r10*x10964))+((sj3*x10961*x10966)));
evalcond[4]=((((-1.0)*x10963*x10971))+((x10966*x10979))+(((-1.0)*r11*x10964*x10975))+(((-1.0)*gconst4*r10*x10963))+(((-1.0)*cj3*x10976)));
evalcond[5]=(((r00*x10964))+((cj1*sj2))+(((-1.0)*r02*x10960*x10963))+(((-1.0)*gconst4*r01*x10961*x10963))+((sj3*x10961*x10972))+x10970+((cj3*x10967)));
evalcond[6]=((((-1.0)*r22*x10960*x10963))+((r20*x10964))+(((-1.0)*gconst4*r21*x10961*x10963))+(((-1.0)*x10974))+((sj3*x10961*x10973))+x10962+((cj3*x10965)));
evalcond[7]=((((-1.0)*gconst4*r00*x10963))+((x10972*x10979))+(((-1.0)*r01*x10964*x10975))+(((-1.0)*x10963*x10967))+(((-1.0)*cj3*r02*x10978))+(((-1.0)*x10974))+x10962);
evalcond[8]=((((-1.0)*x10963*x10965))+(((-1.0)*gconst4*r20*x10963))+(((-1.0)*r21*x10964*x10975))+((x10973*x10979))+(((-1.0)*x10970))+(((-1.0)*sj2*x10968))+(((-1.0)*cj3*r22*x10978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10981=((1.0)*gconst5);
CheckValue<IkReal> x10982 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10981))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10982.valid){
continue;
}
CheckValue<IkReal> x10983=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10981))+(((-1.0)*gconst4*r20)))),-1);
if(!x10983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10982.value)+(((1.5707963267949)*(x10983.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10984=IKsin(j4);
IkReal x10985=IKcos(j4);
IkReal x10986=(sj1*sj2);
IkReal x10987=((1.0)*sj3);
IkReal x10988=(cj3*gconst4);
IkReal x10989=(gconst5*r21);
IkReal x10990=(gconst5*r10);
IkReal x10991=(gconst5*r01);
IkReal x10992=((1.0)*cj1);
IkReal x10993=(gconst4*sj3);
IkReal x10994=(cj2*sj1);
IkReal x10995=(gconst5*r11);
IkReal x10996=(gconst5*r00);
IkReal x10997=(gconst5*r20);
IkReal x10998=(cj2*x10992);
IkReal x10999=((1.0)*x10985);
IkReal x11000=(r12*x10984);
IkReal x11001=(gconst4*x10984);
IkReal x11002=((1.0)*x10984);
IkReal x11003=(cj3*x10985);
IkReal x11004=(gconst5*sj3*x10985);
evalcond[0]=((((-1.0)*r22*x10999))+((r21*x11001))+(((-1.0)*x10997*x11002)));
evalcond[1]=(((r01*x11001))+(((-1.0)*x10996*x11002))+(((-1.0)*r02*x10999)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10999))+(((-1.0)*x10990*x11002))+((r11*x11001)));
evalcond[3]=((((-1.0)*gconst4*r11*x10985*x10987))+((sj3*x10985*x10990))+((cj3*x10995))+(((-1.0)*x10987*x11000))+((r10*x10988)));
evalcond[4]=(((x10990*x11003))+(((-1.0)*r11*x10988*x10999))+(((-1.0)*cj3*x11000))+(((-1.0)*gconst4*r10*x10987))+(((-1.0)*x10987*x10995)));
evalcond[5]=(((r00*x10988))+(((-1.0)*gconst4*r01*x10985*x10987))+((sj3*x10985*x10996))+((cj1*sj2))+((cj3*x10991))+(((-1.0)*r02*x10984*x10987))+x10994);
evalcond[6]=(((sj3*x10985*x10997))+((cj3*x10989))+(((-1.0)*r22*x10984*x10987))+((r20*x10988))+(((-1.0)*x10998))+(((-1.0)*gconst4*r21*x10985*x10987))+x10986);
evalcond[7]=((((-1.0)*cj3*r02*x11002))+(((-1.0)*gconst4*r00*x10987))+((x10996*x11003))+(((-1.0)*x10998))+(((-1.0)*x10987*x10991))+(((-1.0)*r01*x10988*x10999))+x10986);
evalcond[8]=((((-1.0)*r21*x10988*x10999))+(((-1.0)*sj2*x10992))+(((-1.0)*x10994))+(((-1.0)*gconst4*r20*x10987))+((x10997*x11003))+(((-1.0)*x10987*x10989))+(((-1.0)*cj3*r22*x11002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11005=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11005.valid){
continue;
}
CheckValue<IkReal> x11006 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11005.value)))+(x11006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11007=IKsin(j4);
IkReal x11008=IKcos(j4);
IkReal x11009=(sj1*sj2);
IkReal x11010=((1.0)*sj3);
IkReal x11011=(cj3*gconst4);
IkReal x11012=(gconst5*r21);
IkReal x11013=(gconst5*r10);
IkReal x11014=(gconst5*r01);
IkReal x11015=((1.0)*cj1);
IkReal x11016=(gconst4*sj3);
IkReal x11017=(cj2*sj1);
IkReal x11018=(gconst5*r11);
IkReal x11019=(gconst5*r00);
IkReal x11020=(gconst5*r20);
IkReal x11021=(cj2*x11015);
IkReal x11022=((1.0)*x11008);
IkReal x11023=(r12*x11007);
IkReal x11024=(gconst4*x11007);
IkReal x11025=((1.0)*x11007);
IkReal x11026=(cj3*x11008);
IkReal x11027=(gconst5*sj3*x11008);
evalcond[0]=(((r21*x11024))+(((-1.0)*r22*x11022))+(((-1.0)*x11020*x11025)));
evalcond[1]=((((-1.0)*r02*x11022))+((r01*x11024))+(((-1.0)*x11019*x11025)));
evalcond[2]=((-1.0)+(((-1.0)*x11013*x11025))+(((-1.0)*r12*x11022))+((r11*x11024)));
evalcond[3]=(((sj3*x11008*x11013))+((r10*x11011))+(((-1.0)*x11010*x11023))+(((-1.0)*gconst4*r11*x11008*x11010))+((cj3*x11018)));
evalcond[4]=((((-1.0)*cj3*x11023))+((x11013*x11026))+(((-1.0)*x11010*x11018))+(((-1.0)*gconst4*r10*x11010))+(((-1.0)*r11*x11011*x11022)));
evalcond[5]=(((sj3*x11008*x11019))+((cj1*sj2))+(((-1.0)*r02*x11007*x11010))+x11017+(((-1.0)*gconst4*r01*x11008*x11010))+((r00*x11011))+((cj3*x11014)));
evalcond[6]=(((r20*x11011))+x11009+((sj3*x11008*x11020))+(((-1.0)*gconst4*r21*x11008*x11010))+((cj3*x11012))+(((-1.0)*x11021))+(((-1.0)*r22*x11007*x11010)));
evalcond[7]=((((-1.0)*gconst4*r00*x11010))+(((-1.0)*cj3*r02*x11025))+(((-1.0)*r01*x11011*x11022))+(((-1.0)*x11010*x11014))+((x11019*x11026))+x11009+(((-1.0)*x11021)));
evalcond[8]=(((x11020*x11026))+(((-1.0)*gconst4*r20*x11010))+(((-1.0)*r21*x11011*x11022))+(((-1.0)*x11010*x11012))+(((-1.0)*sj2*x11015))+(((-1.0)*cj3*r22*x11025))+(((-1.0)*x11017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11028=((-1.0)*r21);
CheckValue<IkReal> x11031 = IKatan2WithCheck(IkReal(x11028),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11031.valid){
continue;
}
IkReal x11029=((1.0)*(x11031.value));
IkReal x11030=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11029)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11029)));
IkReal gconst4=(x11028*x11030);
IkReal gconst5=((1.0)*r20*x11030);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11032=((-1.0)*r21);
CheckValue<IkReal> x11035 = IKatan2WithCheck(IkReal(x11032),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11035.valid){
continue;
}
IkReal x11033=((1.0)*(x11035.value));
IkReal x11034=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11033)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11033)));
IkReal gconst4=(x11032*x11034);
IkReal gconst5=((1.0)*r20*x11034);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11036=gconst4*gconst4;
IkReal x11037=gconst5*gconst5;
IkReal x11038=(r11*sj3);
IkReal x11039=((1.0)*gconst5);
IkReal x11040=(cj3*r01);
IkReal x11041=(cj3*gconst4*r00);
IkReal x11042=(r10*x11037);
CheckValue<IkReal> x11043=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst4*r00*x11038*x11039))+((r00*sj3*x11042))+((r01*x11036*x11038))+(((-1.0)*gconst4*r01*r10*sj3*x11039)))),-1);
if(!x11043.valid){
continue;
}
CheckValue<IkReal> x11044 = IKatan2WithCheck(IkReal((((gconst5*r12*x11040))+((r12*x11041)))),IkReal(((((-1.0)*x11040*x11042))+(((-1.0)*r10*x11039*x11041))+((cj3*r00*r11*x11036))+((gconst4*gconst5*r11*x11040)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11043.value)))+(x11044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11045=IKsin(j4);
IkReal x11046=IKcos(j4);
IkReal x11047=(cj3*gconst4);
IkReal x11048=(gconst4*r11);
IkReal x11049=(sj1*sj2);
IkReal x11050=((1.0)*cj1);
IkReal x11051=(gconst5*r10);
IkReal x11052=(gconst5*r00);
IkReal x11053=(gconst4*r01);
IkReal x11054=(gconst5*r20);
IkReal x11055=(cj3*gconst5);
IkReal x11056=(gconst4*r21);
IkReal x11057=(sj2*x11050);
IkReal x11058=((1.0)*cj2*sj1);
IkReal x11059=((1.0)*x11046);
IkReal x11060=((1.0)*x11045);
IkReal x11061=((1.0)*gconst5*sj3);
IkReal x11062=(cj3*x11046);
IkReal x11063=((1.0)*gconst4*sj3);
IkReal x11064=(gconst5*sj3*x11046);
IkReal x11065=(x11057+x11058);
evalcond[0]=((((-1.0)*r22*x11059))+((x11045*x11056))+(((-1.0)*x11054*x11060)));
evalcond[1]=((((-1.0)*r12*x11059))+((x11045*x11048))+(((-1.0)*x11051*x11060)));
evalcond[2]=((-1.0)+(((-1.0)*x11052*x11060))+((x11045*x11053))+(((-1.0)*r02*x11059)));
evalcond[3]=((((-1.0)*r02*sj3*x11060))+((r00*x11047))+(((-1.0)*sj3*x11053*x11059))+((r01*x11055))+((sj3*x11046*x11052)));
evalcond[4]=((((-1.0)*r01*x11061))+(((-1.0)*r00*x11063))+(((-1.0)*r01*x11047*x11059))+(((-1.0)*cj3*r02*x11060))+((x11052*x11062)));
evalcond[5]=(((r20*x11047))+(((-1.0)*sj3*x11056*x11059))+(((-1.0)*r22*sj3*x11060))+x11049+((sj3*x11046*x11054))+((r21*x11055))+(((-1.0)*cj2*x11050)));
evalcond[6]=((((-1.0)*x11065))+((r10*x11047))+(((-1.0)*sj3*x11048*x11059))+(((-1.0)*r12*sj3*x11060))+((sj3*x11046*x11051))+((r11*x11055)));
evalcond[7]=((((-1.0)*r10*x11063))+(((-1.0)*r11*x11061))+(((-1.0)*x11049))+(((-1.0)*r11*x11047*x11059))+(((-1.0)*cj3*r12*x11060))+((x11051*x11062))+((cj1*cj2)));
evalcond[8]=((((-1.0)*r21*x11047*x11059))+(((-1.0)*x11065))+((x11054*x11062))+(((-1.0)*cj3*r22*x11060))+(((-1.0)*r21*x11061))+(((-1.0)*r20*x11063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11066=((1.0)*gconst5);
CheckValue<IkReal> x11067=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11066))+(((-1.0)*gconst4*r10)))),-1);
if(!x11067.valid){
continue;
}
CheckValue<IkReal> x11068 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11066)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11067.value)))+(x11068.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11069=IKsin(j4);
IkReal x11070=IKcos(j4);
IkReal x11071=(cj3*gconst4);
IkReal x11072=(gconst4*r11);
IkReal x11073=(sj1*sj2);
IkReal x11074=((1.0)*cj1);
IkReal x11075=(gconst5*r10);
IkReal x11076=(gconst5*r00);
IkReal x11077=(gconst4*r01);
IkReal x11078=(gconst5*r20);
IkReal x11079=(cj3*gconst5);
IkReal x11080=(gconst4*r21);
IkReal x11081=(sj2*x11074);
IkReal x11082=((1.0)*cj2*sj1);
IkReal x11083=((1.0)*x11070);
IkReal x11084=((1.0)*x11069);
IkReal x11085=((1.0)*gconst5*sj3);
IkReal x11086=(cj3*x11070);
IkReal x11087=((1.0)*gconst4*sj3);
IkReal x11088=(gconst5*sj3*x11070);
IkReal x11089=(x11081+x11082);
evalcond[0]=((((-1.0)*r22*x11083))+(((-1.0)*x11078*x11084))+((x11069*x11080)));
evalcond[1]=((((-1.0)*x11075*x11084))+((x11069*x11072))+(((-1.0)*r12*x11083)));
evalcond[2]=((-1.0)+(((-1.0)*x11076*x11084))+((x11069*x11077))+(((-1.0)*r02*x11083)));
evalcond[3]=(((sj3*x11070*x11076))+(((-1.0)*sj3*x11077*x11083))+((r00*x11071))+(((-1.0)*r02*sj3*x11084))+((r01*x11079)));
evalcond[4]=((((-1.0)*r01*x11071*x11083))+((x11076*x11086))+(((-1.0)*r01*x11085))+(((-1.0)*r00*x11087))+(((-1.0)*cj3*r02*x11084)));
evalcond[5]=((((-1.0)*sj3*x11080*x11083))+((sj3*x11070*x11078))+((r21*x11079))+(((-1.0)*r22*sj3*x11084))+x11073+((r20*x11071))+(((-1.0)*cj2*x11074)));
evalcond[6]=(((sj3*x11070*x11075))+(((-1.0)*r12*sj3*x11084))+(((-1.0)*sj3*x11072*x11083))+((r11*x11079))+((r10*x11071))+(((-1.0)*x11089)));
evalcond[7]=((((-1.0)*cj3*r12*x11084))+(((-1.0)*r11*x11071*x11083))+(((-1.0)*r11*x11085))+(((-1.0)*r10*x11087))+((x11075*x11086))+((cj1*cj2))+(((-1.0)*x11073)));
evalcond[8]=((((-1.0)*r21*x11085))+(((-1.0)*r20*x11087))+(((-1.0)*cj3*r22*x11084))+(((-1.0)*r21*x11071*x11083))+(((-1.0)*x11089))+((x11078*x11086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11090 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11090.valid){
continue;
}
CheckValue<IkReal> x11091=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11090.value)+(((1.5707963267949)*(x11091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11092=IKsin(j4);
IkReal x11093=IKcos(j4);
IkReal x11094=(cj3*gconst4);
IkReal x11095=(gconst4*r11);
IkReal x11096=(sj1*sj2);
IkReal x11097=((1.0)*cj1);
IkReal x11098=(gconst5*r10);
IkReal x11099=(gconst5*r00);
IkReal x11100=(gconst4*r01);
IkReal x11101=(gconst5*r20);
IkReal x11102=(cj3*gconst5);
IkReal x11103=(gconst4*r21);
IkReal x11104=(sj2*x11097);
IkReal x11105=((1.0)*cj2*sj1);
IkReal x11106=((1.0)*x11093);
IkReal x11107=((1.0)*x11092);
IkReal x11108=((1.0)*gconst5*sj3);
IkReal x11109=(cj3*x11093);
IkReal x11110=((1.0)*gconst4*sj3);
IkReal x11111=(gconst5*sj3*x11093);
IkReal x11112=(x11104+x11105);
evalcond[0]=(((x11092*x11103))+(((-1.0)*x11101*x11107))+(((-1.0)*r22*x11106)));
evalcond[1]=((((-1.0)*x11098*x11107))+((x11092*x11095))+(((-1.0)*r12*x11106)));
evalcond[2]=((-1.0)+((x11092*x11100))+(((-1.0)*r02*x11106))+(((-1.0)*x11099*x11107)));
evalcond[3]=((((-1.0)*r02*sj3*x11107))+((sj3*x11093*x11099))+((r00*x11094))+(((-1.0)*sj3*x11100*x11106))+((r01*x11102)));
evalcond[4]=((((-1.0)*r01*x11094*x11106))+(((-1.0)*r00*x11110))+(((-1.0)*r01*x11108))+((x11099*x11109))+(((-1.0)*cj3*r02*x11107)));
evalcond[5]=(((sj3*x11093*x11101))+((r20*x11094))+(((-1.0)*sj3*x11103*x11106))+x11096+(((-1.0)*cj2*x11097))+((r21*x11102))+(((-1.0)*r22*sj3*x11107)));
evalcond[6]=(((sj3*x11093*x11098))+(((-1.0)*r12*sj3*x11107))+(((-1.0)*sj3*x11095*x11106))+((r10*x11094))+((r11*x11102))+(((-1.0)*x11112)));
evalcond[7]=((((-1.0)*cj3*r12*x11107))+(((-1.0)*r10*x11110))+(((-1.0)*r11*x11094*x11106))+(((-1.0)*x11096))+((x11098*x11109))+(((-1.0)*r11*x11108))+((cj1*cj2)));
evalcond[8]=((((-1.0)*r21*x11108))+((x11101*x11109))+(((-1.0)*r21*x11094*x11106))+(((-1.0)*cj3*r22*x11107))+(((-1.0)*x11112))+(((-1.0)*r20*x11110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11113=((-1.0)*r21);
CheckValue<IkReal> x11116 = IKatan2WithCheck(IkReal(x11113),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11116.valid){
continue;
}
IkReal x11114=((1.0)*(x11116.value));
IkReal x11115=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11114)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11114)));
IkReal gconst4=(x11113*x11115);
IkReal gconst5=((1.0)*r20*x11115);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11117=((-1.0)*r21);
CheckValue<IkReal> x11120 = IKatan2WithCheck(IkReal(x11117),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11120.valid){
continue;
}
IkReal x11118=((1.0)*(x11120.value));
IkReal x11119=x10294;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11118)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11118)));
IkReal gconst4=(x11117*x11119);
IkReal gconst5=((1.0)*r20*x11119);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11121=gconst4*gconst4;
IkReal x11122=gconst5*gconst5;
IkReal x11123=(r11*sj3);
IkReal x11124=((1.0)*gconst5);
IkReal x11125=(cj3*r01);
IkReal x11126=(cj3*gconst4*r00);
IkReal x11127=(r10*x11122);
CheckValue<IkReal> x11128 = IKatan2WithCheck(IkReal((((gconst5*r12*x11125))+((r12*x11126)))),IkReal(((((-1.0)*r10*x11124*x11126))+((cj3*r00*r11*x11121))+(((-1.0)*x11125*x11127))+((gconst4*gconst5*r11*x11125)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11128.valid){
continue;
}
CheckValue<IkReal> x11129=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*sj3*x11127))+(((-1.0)*gconst4*r00*x11123*x11124))+(((-1.0)*gconst4*r01*r10*sj3*x11124))+((r01*x11121*x11123)))),-1);
if(!x11129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11128.value)+(((1.5707963267949)*(x11129.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11130=IKsin(j4);
IkReal x11131=IKcos(j4);
IkReal x11132=(sj1*sj2);
IkReal x11133=((1.0)*sj3);
IkReal x11134=(cj3*gconst4);
IkReal x11135=(gconst4*r11);
IkReal x11136=(gconst5*r21);
IkReal x11137=((1.0)*cj1);
IkReal x11138=(gconst5*r10);
IkReal x11139=(gconst5*r01);
IkReal x11140=(gconst5*r00);
IkReal x11141=(gconst4*r01);
IkReal x11142=(cj2*sj1);
IkReal x11143=(gconst5*r11);
IkReal x11144=(gconst5*r20);
IkReal x11145=(gconst4*r21);
IkReal x11146=(cj2*x11137);
IkReal x11147=((1.0)*x11131);
IkReal x11148=(r12*x11130);
IkReal x11149=((1.0)*x11130);
IkReal x11150=(cj3*x11131);
IkReal x11151=(gconst5*sj3*x11131);
evalcond[0]=((((-1.0)*r22*x11147))+((x11130*x11145))+(((-1.0)*x11144*x11149)));
evalcond[1]=(((x11130*x11135))+(((-1.0)*r12*x11147))+(((-1.0)*x11138*x11149)));
evalcond[2]=((1.0)+(((-1.0)*x11140*x11149))+((x11130*x11141))+(((-1.0)*r02*x11147)));
evalcond[3]=((((-1.0)*x11131*x11133*x11141))+(((-1.0)*r02*x11130*x11133))+((cj3*x11139))+((sj3*x11131*x11140))+((r00*x11134)));
evalcond[4]=((((-1.0)*cj3*r02*x11149))+(((-1.0)*x11133*x11139))+(((-1.0)*r01*x11134*x11147))+((x11140*x11150))+(((-1.0)*gconst4*r00*x11133)));
evalcond[5]=(((sj3*x11131*x11138))+((cj1*sj2))+(((-1.0)*x11131*x11133*x11135))+x11142+((r10*x11134))+((cj3*x11143))+(((-1.0)*x11133*x11148)));
evalcond[6]=((((-1.0)*x11131*x11133*x11145))+x11132+((r20*x11134))+(((-1.0)*r22*x11130*x11133))+(((-1.0)*x11146))+((cj3*x11136))+((sj3*x11131*x11144)));
evalcond[7]=((((-1.0)*r11*x11134*x11147))+x11132+((x11138*x11150))+(((-1.0)*x11133*x11143))+(((-1.0)*cj3*x11148))+(((-1.0)*gconst4*r10*x11133))+(((-1.0)*x11146)));
evalcond[8]=((((-1.0)*gconst4*r20*x11133))+(((-1.0)*r21*x11134*x11147))+(((-1.0)*x11133*x11136))+(((-1.0)*x11142))+(((-1.0)*cj3*r22*x11149))+(((-1.0)*sj2*x11137))+((x11144*x11150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11152=((1.0)*gconst5);
CheckValue<IkReal> x11153 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11152)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11153.valid){
continue;
}
CheckValue<IkReal> x11154=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11152))+(((-1.0)*gconst4*r20)))),-1);
if(!x11154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11153.value)+(((1.5707963267949)*(x11154.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11155=IKsin(j4);
IkReal x11156=IKcos(j4);
IkReal x11157=(sj1*sj2);
IkReal x11158=((1.0)*sj3);
IkReal x11159=(cj3*gconst4);
IkReal x11160=(gconst4*r11);
IkReal x11161=(gconst5*r21);
IkReal x11162=((1.0)*cj1);
IkReal x11163=(gconst5*r10);
IkReal x11164=(gconst5*r01);
IkReal x11165=(gconst5*r00);
IkReal x11166=(gconst4*r01);
IkReal x11167=(cj2*sj1);
IkReal x11168=(gconst5*r11);
IkReal x11169=(gconst5*r20);
IkReal x11170=(gconst4*r21);
IkReal x11171=(cj2*x11162);
IkReal x11172=((1.0)*x11156);
IkReal x11173=(r12*x11155);
IkReal x11174=((1.0)*x11155);
IkReal x11175=(cj3*x11156);
IkReal x11176=(gconst5*sj3*x11156);
evalcond[0]=((((-1.0)*r22*x11172))+(((-1.0)*x11169*x11174))+((x11155*x11170)));
evalcond[1]=((((-1.0)*x11163*x11174))+(((-1.0)*r12*x11172))+((x11155*x11160)));
evalcond[2]=((1.0)+((x11155*x11166))+(((-1.0)*x11165*x11174))+(((-1.0)*r02*x11172)));
evalcond[3]=(((r00*x11159))+(((-1.0)*r02*x11155*x11158))+((cj3*x11164))+(((-1.0)*x11156*x11158*x11166))+((sj3*x11156*x11165)));
evalcond[4]=((((-1.0)*gconst4*r00*x11158))+(((-1.0)*x11158*x11164))+((x11165*x11175))+(((-1.0)*cj3*r02*x11174))+(((-1.0)*r01*x11159*x11172)));
evalcond[5]=((((-1.0)*x11158*x11173))+((cj1*sj2))+((cj3*x11168))+x11167+((r10*x11159))+(((-1.0)*x11156*x11158*x11160))+((sj3*x11156*x11163)));
evalcond[6]=((((-1.0)*r22*x11155*x11158))+(((-1.0)*x11171))+((cj3*x11161))+x11157+((r20*x11159))+((sj3*x11156*x11169))+(((-1.0)*x11156*x11158*x11170)));
evalcond[7]=((((-1.0)*x11158*x11168))+(((-1.0)*x11171))+((x11163*x11175))+x11157+(((-1.0)*cj3*x11173))+(((-1.0)*r11*x11159*x11172))+(((-1.0)*gconst4*r10*x11158)));
evalcond[8]=((((-1.0)*gconst4*r20*x11158))+((x11169*x11175))+(((-1.0)*x11158*x11161))+(((-1.0)*cj3*r22*x11174))+(((-1.0)*sj2*x11162))+(((-1.0)*x11167))+(((-1.0)*r21*x11159*x11172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11177=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11177.valid){
continue;
}
CheckValue<IkReal> x11178 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11177.value)))+(x11178.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11179=IKsin(j4);
IkReal x11180=IKcos(j4);
IkReal x11181=(sj1*sj2);
IkReal x11182=((1.0)*sj3);
IkReal x11183=(cj3*gconst4);
IkReal x11184=(gconst4*r11);
IkReal x11185=(gconst5*r21);
IkReal x11186=((1.0)*cj1);
IkReal x11187=(gconst5*r10);
IkReal x11188=(gconst5*r01);
IkReal x11189=(gconst5*r00);
IkReal x11190=(gconst4*r01);
IkReal x11191=(cj2*sj1);
IkReal x11192=(gconst5*r11);
IkReal x11193=(gconst5*r20);
IkReal x11194=(gconst4*r21);
IkReal x11195=(cj2*x11186);
IkReal x11196=((1.0)*x11180);
IkReal x11197=(r12*x11179);
IkReal x11198=((1.0)*x11179);
IkReal x11199=(cj3*x11180);
IkReal x11200=(gconst5*sj3*x11180);
evalcond[0]=((((-1.0)*r22*x11196))+((x11179*x11194))+(((-1.0)*x11193*x11198)));
evalcond[1]=((((-1.0)*r12*x11196))+((x11179*x11184))+(((-1.0)*x11187*x11198)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11196))+(((-1.0)*x11189*x11198))+((x11179*x11190)));
evalcond[3]=(((sj3*x11180*x11189))+((cj3*x11188))+((r00*x11183))+(((-1.0)*r02*x11179*x11182))+(((-1.0)*x11180*x11182*x11190)));
evalcond[4]=((((-1.0)*x11182*x11188))+(((-1.0)*gconst4*r00*x11182))+(((-1.0)*r01*x11183*x11196))+(((-1.0)*cj3*r02*x11198))+((x11189*x11199)));
evalcond[5]=(((cj3*x11192))+(((-1.0)*x11182*x11197))+((cj1*sj2))+((sj3*x11180*x11187))+x11191+(((-1.0)*x11180*x11182*x11184))+((r10*x11183)));
evalcond[6]=(((r20*x11183))+(((-1.0)*x11195))+((cj3*x11185))+((sj3*x11180*x11193))+x11181+(((-1.0)*x11180*x11182*x11194))+(((-1.0)*r22*x11179*x11182)));
evalcond[7]=((((-1.0)*gconst4*r10*x11182))+(((-1.0)*x11195))+(((-1.0)*x11182*x11192))+(((-1.0)*r11*x11183*x11196))+(((-1.0)*cj3*x11197))+x11181+((x11187*x11199)));
evalcond[8]=((((-1.0)*cj3*r22*x11198))+(((-1.0)*sj2*x11186))+(((-1.0)*x11182*x11185))+(((-1.0)*r21*x11183*x11196))+((x11193*x11199))+(((-1.0)*x11191))+(((-1.0)*gconst4*r20*x11182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11201=((-1.0)*r21);
IkReal x11202=((-1.0)*px);
CheckValue<IkReal> x11204 = IKatan2WithCheck(IkReal(x11201),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11204.valid){
continue;
}
IkReal x11203=((1.0)*(x11204.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11203)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11202);
rxp1_1=(px*r21);
rxp1_2=(r11*x11202);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11203)));
IkReal gconst4=x11201;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11205=((-1.0)*r21);
IkReal x11206=((-1.0)*px);
CheckValue<IkReal> x11208 = IKatan2WithCheck(IkReal(x11205),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11208.valid){
continue;
}
IkReal x11207=((1.0)*(x11208.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11207)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11206);
rxp1_1=(px*r21);
rxp1_2=(r11*x11206);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11207)));
IkReal gconst4=x11205;
IkReal gconst5=((1.0)*r20);
IkReal x11209=((1.0)*sj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=(((x11209*(r21*r21)))+(((-1.0)*x11209*(r10*r10)))+x11209);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11210=((-1.0)*r21);
IkReal x11211=((-1.0)*px);
CheckValue<IkReal> x11213 = IKatan2WithCheck(IkReal(x11210),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11213.valid){
continue;
}
IkReal x11212=((1.0)*(x11213.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11212)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11211);
rxp1_1=(px*r21);
rxp1_2=(r11*x11211);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11212)));
IkReal gconst4=x11210;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11214=((-1.0)*r21);
IkReal x11215=((-1.0)*px);
CheckValue<IkReal> x11217 = IKatan2WithCheck(IkReal(x11214),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11217.valid){
continue;
}
IkReal x11216=((1.0)*(x11217.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11216)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11215);
rxp1_1=(px*r21);
rxp1_2=(r11*x11215);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11216)));
IkReal gconst4=x11214;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11218=((-1.0)*r21);
IkReal x11219=((-1.0)*px);
CheckValue<IkReal> x11221 = IKatan2WithCheck(IkReal(x11218),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11221.valid){
continue;
}
IkReal x11220=((1.0)*(x11221.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11220)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11219);
rxp1_1=(px*r21);
rxp1_2=(r11*x11219);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11220)));
IkReal gconst4=x11218;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11222=((-1.0)*r21);
IkReal x11223=((-1.0)*px);
CheckValue<IkReal> x11225 = IKatan2WithCheck(IkReal(x11222),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11225.valid){
continue;
}
IkReal x11224=((1.0)*(x11225.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11224)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11223);
rxp1_1=(px*r21);
rxp1_2=(r11*x11223);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11224)));
IkReal gconst4=x11222;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11228=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11228.valid){
continue;
}
IkReal x11226=x11228.value;
IkReal x11227=(sj0*x11226);
cj4array[0]=(((cj1*sj2*x11227))+((cj2*sj1*x11227)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11229=IKsin(j4);
IkReal x11230=IKcos(j4);
IkReal x11231=(gconst5*r20);
IkReal x11232=(gconst4*x11229);
IkReal x11233=((1.0)*x11230);
IkReal x11234=((1.0)*x11229);
evalcond[0]=((-1.0)*r02*x11229);
evalcond[1]=((((-1.0)*r02*x11233))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x11231*x11234))+((r21*x11232)));
evalcond[3]=(((r11*x11232))+(((-1.0)*gconst5*r10*x11234)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11230*x11231))+(((-1.0)*gconst4*r21*x11233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11236=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11236.valid){
continue;
}
IkReal x11235=x11236.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11235))+((cj1*cj2*x11235)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11237=IKsin(j4);
IkReal x11238=IKcos(j4);
IkReal x11239=(gconst5*r10);
IkReal x11240=((1.0)*sj0);
IkReal x11241=(gconst4*x11237);
IkReal x11242=((1.0)*x11238);
IkReal x11243=((1.0)*x11237);
evalcond[0]=((-1.0)*r02*x11237);
evalcond[1]=((((-1.0)*r02*x11242))+(((-1.0)*x11240)));
evalcond[2]=((((-1.0)*gconst5*r20*x11243))+((r21*x11241)));
evalcond[3]=(((r11*x11241))+(((-1.0)*x11239*x11243)));
evalcond[4]=((((-1.0)*cj1*sj2*x11240))+(((-1.0)*cj2*sj1*x11240))+((x11238*x11239))+(((-1.0)*gconst4*r11*x11242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11244=IKPowWithIntegerCheck(r02,-1);
if(!x11244.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11244.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11245=IKsin(j4);
IkReal x11246=IKcos(j4);
IkReal x11247=((1.0)*sj0);
IkReal x11248=(gconst5*x11246);
IkReal x11249=(gconst4*x11245);
IkReal x11250=((1.0)*gconst4*x11246);
IkReal x11251=((1.0)*gconst5*x11245);
evalcond[0]=((-1.0)*r02*x11245);
evalcond[1]=(((r21*x11249))+(((-1.0)*r20*x11251)));
evalcond[2]=(((r11*x11249))+(((-1.0)*r10*x11251)));
evalcond[3]=(((r20*x11248))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11250)));
evalcond[4]=((((-1.0)*cj1*sj2*x11247))+(((-1.0)*cj2*sj1*x11247))+(((-1.0)*r11*x11250))+((r10*x11248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11252=((-1.0)*r21);
IkReal x11253=((-1.0)*px);
CheckValue<IkReal> x11255 = IKatan2WithCheck(IkReal(x11252),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11255.valid){
continue;
}
IkReal x11254=((1.0)*(x11255.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11254)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11253);
rxp1_1=(px*r21);
rxp1_2=(r11*x11253);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11254)));
IkReal gconst4=x11252;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11256=((-1.0)*r21);
IkReal x11257=((-1.0)*px);
CheckValue<IkReal> x11259 = IKatan2WithCheck(IkReal(x11256),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11259.valid){
continue;
}
IkReal x11258=((1.0)*(x11259.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11258)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11257);
rxp1_1=(px*r21);
rxp1_2=(r11*x11257);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11258)));
IkReal gconst4=x11256;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11260=((-1.0)*r21);
IkReal x11261=((-1.0)*px);
CheckValue<IkReal> x11263 = IKatan2WithCheck(IkReal(x11260),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11263.valid){
continue;
}
IkReal x11262=((1.0)*(x11263.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11262)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11261);
rxp1_1=(px*r21);
rxp1_2=(r11*x11261);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11262)));
IkReal gconst4=x11260;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11266=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11266.valid){
continue;
}
IkReal x11264=x11266.value;
IkReal x11265=(sj0*x11264);
cj4array[0]=(((cj2*sj1*x11265))+((cj1*sj2*x11265)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11267=IKsin(j4);
IkReal x11268=IKcos(j4);
IkReal x11269=(gconst5*r20);
IkReal x11270=(gconst4*x11267);
IkReal x11271=((1.0)*x11268);
IkReal x11272=((1.0)*x11267);
evalcond[0]=(r02*x11267);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11271)));
evalcond[2]=(((r21*x11270))+(((-1.0)*x11269*x11272)));
evalcond[3]=((((-1.0)*gconst5*r10*x11272))+((r11*x11270)));
evalcond[4]=(((gconst4*r21*x11268))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11269*x11271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11274=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11274.valid){
continue;
}
IkReal x11273=x11274.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11273))+((cj1*cj2*x11273)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11275=IKsin(j4);
IkReal x11276=IKcos(j4);
IkReal x11277=(gconst4*r11);
IkReal x11278=((1.0)*sj0);
IkReal x11279=(gconst5*r10);
IkReal x11280=((1.0)*x11276);
IkReal x11281=((1.0)*x11275);
evalcond[0]=(r02*x11275);
evalcond[1]=((((-1.0)*r02*x11280))+(((-1.0)*x11278)));
evalcond[2]=((((-1.0)*gconst5*r20*x11281))+((gconst4*r21*x11275)));
evalcond[3]=(((x11275*x11277))+(((-1.0)*x11279*x11281)));
evalcond[4]=(((x11276*x11277))+(((-1.0)*cj2*sj1*x11278))+(((-1.0)*cj1*sj2*x11278))+(((-1.0)*x11279*x11280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11282=IKPowWithIntegerCheck(r02,-1);
if(!x11282.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11282.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11283=IKsin(j4);
IkReal x11284=IKcos(j4);
IkReal x11285=(gconst4*r11);
IkReal x11286=((1.0)*cj1);
IkReal x11287=(gconst4*r21);
IkReal x11288=((1.0)*gconst5*x11284);
IkReal x11289=((1.0)*gconst5*x11283);
evalcond[0]=(r02*x11283);
evalcond[1]=((((-1.0)*r20*x11289))+((x11283*x11287)));
evalcond[2]=((((-1.0)*r10*x11289))+((x11283*x11285)));
evalcond[3]=(((x11284*x11287))+((sj1*sj2))+(((-1.0)*r20*x11288))+(((-1.0)*cj2*x11286)));
evalcond[4]=(((x11284*x11285))+(((-1.0)*r10*x11288))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x11286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11290=((-1.0)*r21);
IkReal x11291=((-1.0)*px);
CheckValue<IkReal> x11293 = IKatan2WithCheck(IkReal(x11290),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11293.valid){
continue;
}
IkReal x11292=((1.0)*(x11293.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11292)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11291);
rxp1_1=(px*r21);
rxp1_2=(r11*x11291);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11292)));
IkReal gconst4=x11290;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11294=((-1.0)*r21);
IkReal x11295=((-1.0)*px);
CheckValue<IkReal> x11297 = IKatan2WithCheck(IkReal(x11294),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11297.valid){
continue;
}
IkReal x11296=((1.0)*(x11297.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11296)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11295);
rxp1_1=(px*r21);
rxp1_2=(r11*x11295);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11296)));
IkReal gconst4=x11294;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11298=((-1.0)*r21);
IkReal x11299=((-1.0)*px);
CheckValue<IkReal> x11301 = IKatan2WithCheck(IkReal(x11298),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11301.valid){
continue;
}
IkReal x11300=((1.0)*(x11301.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11300)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11299);
rxp1_1=(px*r21);
rxp1_2=(r11*x11299);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11300)));
IkReal gconst4=x11298;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11304=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11304.valid){
continue;
}
IkReal x11302=x11304.value;
IkReal x11303=(sj0*x11302);
cj4array[0]=((((-1.0)*cj1*cj2*x11303))+((sj1*sj2*x11303)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11305=IKsin(j4);
IkReal x11306=IKcos(j4);
IkReal x11307=(gconst5*r20);
IkReal x11308=(gconst4*x11305);
IkReal x11309=((1.0)*x11306);
IkReal x11310=((1.0)*x11305);
evalcond[0]=((-1.0)*r02*x11305);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11309)));
evalcond[2]=((((-1.0)*x11307*x11310))+((r21*x11308)));
evalcond[3]=(((r11*x11308))+(((-1.0)*gconst5*r10*x11310)));
evalcond[4]=(((x11306*x11307))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r21*x11309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11312=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11312.valid){
continue;
}
IkReal x11311=x11312.value;
cj4array[0]=(((cj2*sj1*x11311))+((cj1*sj2*x11311)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11313=IKsin(j4);
IkReal x11314=IKcos(j4);
IkReal x11315=(gconst5*r10);
IkReal x11316=((1.0)*sj0);
IkReal x11317=(gconst4*x11313);
IkReal x11318=((1.0)*x11314);
IkReal x11319=((1.0)*x11313);
evalcond[0]=((-1.0)*r02*x11313);
evalcond[1]=((((-1.0)*r02*x11318))+(((-1.0)*x11316)));
evalcond[2]=(((r21*x11317))+(((-1.0)*gconst5*r20*x11319)));
evalcond[3]=(((r11*x11317))+(((-1.0)*x11315*x11319)));
evalcond[4]=(((cj1*cj2*sj0))+((x11314*x11315))+(((-1.0)*sj1*sj2*x11316))+(((-1.0)*gconst4*r11*x11318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11320=IKPowWithIntegerCheck(r02,-1);
if(!x11320.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11320.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11321=IKsin(j4);
IkReal x11322=IKcos(j4);
IkReal x11323=((1.0)*sj1);
IkReal x11324=(gconst5*x11322);
IkReal x11325=(gconst4*x11321);
IkReal x11326=((1.0)*gconst4*x11322);
IkReal x11327=((1.0)*gconst5*x11321);
evalcond[0]=((-1.0)*r02*x11321);
evalcond[1]=((((-1.0)*r20*x11327))+((r21*x11325)));
evalcond[2]=((((-1.0)*r10*x11327))+((r11*x11325)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*r21*x11326))+((r20*x11324))+(((-1.0)*cj2*x11323)));
evalcond[4]=(((cj1*cj2*sj0))+((r10*x11324))+(((-1.0)*r11*x11326))+(((-1.0)*sj0*sj2*x11323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11328=((-1.0)*r21);
IkReal x11329=((-1.0)*px);
CheckValue<IkReal> x11331 = IKatan2WithCheck(IkReal(x11328),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11331.valid){
continue;
}
IkReal x11330=((1.0)*(x11331.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11330)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11329);
rxp1_1=(px*r21);
rxp1_2=(r11*x11329);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11330)));
IkReal gconst4=x11328;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11332=((-1.0)*r21);
IkReal x11333=((-1.0)*px);
CheckValue<IkReal> x11335 = IKatan2WithCheck(IkReal(x11332),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11335.valid){
continue;
}
IkReal x11334=((1.0)*(x11335.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11334)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11333);
rxp1_1=(px*r21);
rxp1_2=(r11*x11333);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11334)));
IkReal gconst4=x11332;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11336=((-1.0)*r21);
IkReal x11337=((-1.0)*px);
CheckValue<IkReal> x11339 = IKatan2WithCheck(IkReal(x11336),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11339.valid){
continue;
}
IkReal x11338=((1.0)*(x11339.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11338)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11337);
rxp1_1=(px*r21);
rxp1_2=(r11*x11337);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11338)));
IkReal gconst4=x11336;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11342=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11342.valid){
continue;
}
IkReal x11340=x11342.value;
IkReal x11341=(sj0*x11340);
cj4array[0]=(((sj1*sj2*x11341))+(((-1.0)*cj1*cj2*x11341)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11343=IKsin(j4);
IkReal x11344=IKcos(j4);
IkReal x11345=(gconst5*r20);
IkReal x11346=(gconst4*x11343);
IkReal x11347=((1.0)*x11344);
IkReal x11348=((1.0)*x11343);
evalcond[0]=(r02*x11343);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11347)));
evalcond[2]=((((-1.0)*x11345*x11348))+((r21*x11346)));
evalcond[3]=(((r11*x11346))+(((-1.0)*gconst5*r10*x11348)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x11345*x11347))+((gconst4*r21*x11344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11350=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11350.valid){
continue;
}
IkReal x11349=x11350.value;
cj4array[0]=(((cj1*sj2*x11349))+((cj2*sj1*x11349)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11351=IKsin(j4);
IkReal x11352=IKcos(j4);
IkReal x11353=(gconst4*r11);
IkReal x11354=((1.0)*sj0);
IkReal x11355=(gconst5*r10);
IkReal x11356=((1.0)*x11352);
IkReal x11357=((1.0)*x11351);
evalcond[0]=(r02*x11351);
evalcond[1]=((((-1.0)*x11354))+(((-1.0)*r02*x11356)));
evalcond[2]=((((-1.0)*gconst5*r20*x11357))+((gconst4*r21*x11351)));
evalcond[3]=(((x11351*x11353))+(((-1.0)*x11355*x11357)));
evalcond[4]=(((cj1*cj2*sj0))+((x11352*x11353))+(((-1.0)*x11355*x11356))+(((-1.0)*sj1*sj2*x11354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11358=IKPowWithIntegerCheck(r02,-1);
if(!x11358.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11358.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11359=IKsin(j4);
IkReal x11360=IKcos(j4);
IkReal x11361=(gconst4*r11);
IkReal x11362=((1.0)*sj1);
IkReal x11363=(gconst4*r21);
IkReal x11364=((1.0)*gconst5*x11360);
IkReal x11365=((1.0)*gconst5*x11359);
evalcond[0]=(r02*x11359);
evalcond[1]=(((x11359*x11363))+(((-1.0)*r20*x11365)));
evalcond[2]=((((-1.0)*r10*x11365))+((x11359*x11361)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11362))+(((-1.0)*r20*x11364))+((x11360*x11363)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x11362))+(((-1.0)*r10*x11364))+((x11360*x11361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11367=IKPowWithIntegerCheck(r02,-1);
if(!x11367.valid){
continue;
}
IkReal x11366=x11367.value;
CheckValue<IkReal> x11368=IKPowWithIntegerCheck(cj3,-1);
if(!x11368.valid){
continue;
}
if( IKabs((x11366*(x11368.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11366)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11366*(x11368.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11366))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11366*(x11368.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11366));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11369=IKsin(j4);
IkReal x11370=IKcos(j4);
IkReal x11371=(r10*sj3);
IkReal x11372=((1.0)*gconst4);
IkReal x11373=(r20*sj3);
IkReal x11374=(cj1*cj2);
IkReal x11375=(sj1*sj2);
IkReal x11376=((1.0)*gconst5);
IkReal x11377=(cj3*r20);
IkReal x11378=((1.0)*sj0);
IkReal x11379=((1.0)*r02);
IkReal x11380=(cj3*r10);
IkReal x11381=(cj3*gconst5);
IkReal x11382=(gconst5*x11370);
IkReal x11383=(gconst4*x11369);
IkReal x11384=(r11*x11370);
IkReal x11385=((1.0)*cj2*sj1);
IkReal x11386=(r21*x11370);
IkReal x11387=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x11378))+(((-1.0)*x11370*x11379)));
evalcond[1]=((((-1.0)*r20*x11369*x11376))+((r21*x11383)));
evalcond[2]=((((-1.0)*r10*x11369*x11376))+((r11*x11383))+cj0);
evalcond[3]=((((-1.0)*cj0*x11375))+(((-1.0)*cj3*x11369*x11379))+((cj0*x11374)));
evalcond[4]=((((-1.0)*cj0*x11387))+(((-1.0)*cj0*x11385))+(((-1.0)*sj3*x11369*x11379)));
evalcond[5]=((((-1.0)*x11374))+((x11373*x11382))+x11375+(((-1.0)*sj3*x11372*x11386))+((gconst4*x11377))+((r21*x11381)));
evalcond[6]=((((-1.0)*x11385))+(((-1.0)*x11387))+(((-1.0)*cj3*x11372*x11386))+(((-1.0)*r21*sj3*x11376))+(((-1.0)*x11372*x11373))+((x11377*x11382)));
evalcond[7]=(((r11*x11381))+((gconst4*x11380))+(((-1.0)*sj3*x11372*x11384))+(((-1.0)*cj1*sj2*x11378))+(((-1.0)*cj2*sj1*x11378))+((x11371*x11382)));
evalcond[8]=((((-1.0)*x11375*x11378))+((sj0*x11374))+((x11380*x11382))+(((-1.0)*cj3*x11372*x11384))+(((-1.0)*x11371*x11372))+(((-1.0)*r11*sj3*x11376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11388=((1.0)*gconst5);
IkReal x11389=((1.0)*gconst4);
CheckValue<IkReal> x11390=IKPowWithIntegerCheck(((((-1.0)*r10*x11388))+((gconst4*r11))),-1);
if(!x11390.valid){
continue;
}
CheckValue<IkReal> x11391=IKPowWithIntegerCheck((((gconst5*r20*sj3))+(((-1.0)*r21*sj3*x11389))),-1);
if(!x11391.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11390.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11391.value)*(((((-1.0)*cj3*r21*x11388))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*cj3*r20*x11389)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11390.value)))+IKsqr(((x11391.value)*(((((-1.0)*cj3*r21*x11388))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*cj3*r20*x11389))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11390.value)), ((x11391.value)*(((((-1.0)*cj3*r21*x11388))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*cj3*r20*x11389))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11392=IKsin(j4);
IkReal x11393=IKcos(j4);
IkReal x11394=(r10*sj3);
IkReal x11395=((1.0)*gconst4);
IkReal x11396=(r20*sj3);
IkReal x11397=(cj1*cj2);
IkReal x11398=(sj1*sj2);
IkReal x11399=((1.0)*gconst5);
IkReal x11400=(cj3*r20);
IkReal x11401=((1.0)*sj0);
IkReal x11402=((1.0)*r02);
IkReal x11403=(cj3*r10);
IkReal x11404=(cj3*gconst5);
IkReal x11405=(gconst5*x11393);
IkReal x11406=(gconst4*x11392);
IkReal x11407=(r11*x11393);
IkReal x11408=((1.0)*cj2*sj1);
IkReal x11409=(r21*x11393);
IkReal x11410=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x11401))+(((-1.0)*x11393*x11402)));
evalcond[1]=(((r21*x11406))+(((-1.0)*r20*x11392*x11399)));
evalcond[2]=(cj0+(((-1.0)*r10*x11392*x11399))+((r11*x11406)));
evalcond[3]=((((-1.0)*cj3*x11392*x11402))+(((-1.0)*cj0*x11398))+((cj0*x11397)));
evalcond[4]=((((-1.0)*sj3*x11392*x11402))+(((-1.0)*cj0*x11408))+(((-1.0)*cj0*x11410)));
evalcond[5]=(((r21*x11404))+x11398+(((-1.0)*x11397))+((gconst4*x11400))+(((-1.0)*sj3*x11395*x11409))+((x11396*x11405)));
evalcond[6]=((((-1.0)*r21*sj3*x11399))+((x11400*x11405))+(((-1.0)*x11408))+(((-1.0)*x11410))+(((-1.0)*x11395*x11396))+(((-1.0)*cj3*x11395*x11409)));
evalcond[7]=((((-1.0)*cj1*sj2*x11401))+((r11*x11404))+((x11394*x11405))+((gconst4*x11403))+(((-1.0)*sj3*x11395*x11407))+(((-1.0)*cj2*sj1*x11401)));
evalcond[8]=(((sj0*x11397))+(((-1.0)*r11*sj3*x11399))+(((-1.0)*x11394*x11395))+((x11403*x11405))+(((-1.0)*cj3*x11395*x11407))+(((-1.0)*x11398*x11401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11411=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11411.valid){
continue;
}
CheckValue<IkReal> x11412=IKPowWithIntegerCheck(r02,-1);
if(!x11412.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11411.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11412.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11411.value)))+IKsqr(((-1.0)*sj0*(x11412.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11411.value)), ((-1.0)*sj0*(x11412.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11413=IKsin(j4);
IkReal x11414=IKcos(j4);
IkReal x11415=(r10*sj3);
IkReal x11416=((1.0)*gconst4);
IkReal x11417=(r20*sj3);
IkReal x11418=(cj1*cj2);
IkReal x11419=(sj1*sj2);
IkReal x11420=((1.0)*gconst5);
IkReal x11421=(cj3*r20);
IkReal x11422=((1.0)*sj0);
IkReal x11423=((1.0)*r02);
IkReal x11424=(cj3*r10);
IkReal x11425=(cj3*gconst5);
IkReal x11426=(gconst5*x11414);
IkReal x11427=(gconst4*x11413);
IkReal x11428=(r11*x11414);
IkReal x11429=((1.0)*cj2*sj1);
IkReal x11430=(r21*x11414);
IkReal x11431=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x11422))+(((-1.0)*x11414*x11423)));
evalcond[1]=(((r21*x11427))+(((-1.0)*r20*x11413*x11420)));
evalcond[2]=(cj0+((r11*x11427))+(((-1.0)*r10*x11413*x11420)));
evalcond[3]=(((cj0*x11418))+(((-1.0)*cj0*x11419))+(((-1.0)*cj3*x11413*x11423)));
evalcond[4]=((((-1.0)*cj0*x11429))+(((-1.0)*cj0*x11431))+(((-1.0)*sj3*x11413*x11423)));
evalcond[5]=(x11419+((gconst4*x11421))+(((-1.0)*sj3*x11416*x11430))+(((-1.0)*x11418))+((r21*x11425))+((x11417*x11426)));
evalcond[6]=((((-1.0)*cj3*x11416*x11430))+(((-1.0)*x11416*x11417))+((x11421*x11426))+(((-1.0)*x11429))+(((-1.0)*x11431))+(((-1.0)*r21*sj3*x11420)));
evalcond[7]=(((gconst4*x11424))+(((-1.0)*sj3*x11416*x11428))+(((-1.0)*cj2*sj1*x11422))+((r11*x11425))+(((-1.0)*cj1*sj2*x11422))+((x11415*x11426)));
evalcond[8]=((((-1.0)*cj3*x11416*x11428))+(((-1.0)*x11415*x11416))+((sj0*x11418))+(((-1.0)*x11419*x11422))+((x11424*x11426))+(((-1.0)*r11*sj3*x11420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11432=((1.0)*sj0);
IkReal x11433=((1.0)*gconst4);
CheckValue<IkReal> x11434 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11432))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x11433))+((cj0*gconst5*r00))+(((-1.0)*gconst4*r11*x11432))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11434.valid){
continue;
}
CheckValue<IkReal> x11435=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x11433)))),-1);
if(!x11435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11434.value)+(((1.5707963267949)*(x11435.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11436=IKsin(j4);
IkReal x11437=IKcos(j4);
IkReal x11438=(gconst4*r11);
IkReal x11439=(cj1*cj2);
IkReal x11440=(sj1*sj2);
IkReal x11441=(cj3*gconst4);
IkReal x11442=(gconst5*r10);
IkReal x11443=(gconst5*r00);
IkReal x11444=((1.0)*sj0);
IkReal x11445=(gconst4*sj3);
IkReal x11446=(cj3*gconst5);
IkReal x11447=((1.0)*x11437);
IkReal x11448=((1.0)*x11436);
IkReal x11449=((1.0)*gconst5*sj3);
IkReal x11450=((1.0)*cj2*sj1);
IkReal x11451=((1.0)*cj1*sj2);
IkReal x11452=(cj3*x11437);
IkReal x11453=(gconst4*x11436);
IkReal x11454=(gconst5*sj3*x11437);
evalcond[0]=(((r21*x11453))+(((-1.0)*gconst5*r20*x11448))+(((-1.0)*r22*x11447)));
evalcond[1]=((((-1.0)*r12*x11447))+cj0+((x11436*x11438))+(((-1.0)*x11442*x11448)));
evalcond[2]=((((-1.0)*x11444))+((r01*x11453))+(((-1.0)*r02*x11447))+(((-1.0)*x11443*x11448)));
evalcond[3]=(x11440+((r20*x11454))+(((-1.0)*r22*sj3*x11448))+(((-1.0)*x11439))+((r20*x11441))+(((-1.0)*r21*x11445*x11447))+((r21*x11446)));
evalcond[4]=((((-1.0)*r21*x11449))+(((-1.0)*r21*x11441*x11447))+(((-1.0)*cj3*r22*x11448))+(((-1.0)*r20*x11445))+((r20*x11437*x11446))+(((-1.0)*x11451))+(((-1.0)*x11450)));
evalcond[5]=(((r00*x11441))+(((-1.0)*r02*sj3*x11448))+(((-1.0)*cj0*x11450))+(((-1.0)*cj0*x11451))+((sj3*x11437*x11443))+(((-1.0)*r01*x11445*x11447))+((r01*x11446)));
evalcond[6]=((((-1.0)*sj3*x11438*x11447))+(((-1.0)*cj1*sj2*x11444))+((r11*x11446))+((r10*x11441))+(((-1.0)*r12*sj3*x11448))+((sj3*x11437*x11442))+(((-1.0)*cj2*sj1*x11444)));
evalcond[7]=((((-1.0)*r00*x11445))+(((-1.0)*r01*x11441*x11447))+((x11443*x11452))+((cj0*x11439))+(((-1.0)*r01*x11449))+(((-1.0)*cj0*x11440))+(((-1.0)*cj3*r02*x11448)));
evalcond[8]=((((-1.0)*r11*x11449))+(((-1.0)*x11440*x11444))+((x11442*x11452))+(((-1.0)*cj3*x11438*x11447))+(((-1.0)*r10*x11445))+((sj0*x11439))+(((-1.0)*cj3*r12*x11448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11455=((1.0)*gconst5);
CheckValue<IkReal> x11456=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11455))+(((-1.0)*gconst4*r10)))),-1);
if(!x11456.valid){
continue;
}
CheckValue<IkReal> x11457 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11455))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11456.value)))+(x11457.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11458=IKsin(j4);
IkReal x11459=IKcos(j4);
IkReal x11460=(gconst4*r11);
IkReal x11461=(cj1*cj2);
IkReal x11462=(sj1*sj2);
IkReal x11463=(cj3*gconst4);
IkReal x11464=(gconst5*r10);
IkReal x11465=(gconst5*r00);
IkReal x11466=((1.0)*sj0);
IkReal x11467=(gconst4*sj3);
IkReal x11468=(cj3*gconst5);
IkReal x11469=((1.0)*x11459);
IkReal x11470=((1.0)*x11458);
IkReal x11471=((1.0)*gconst5*sj3);
IkReal x11472=((1.0)*cj2*sj1);
IkReal x11473=((1.0)*cj1*sj2);
IkReal x11474=(cj3*x11459);
IkReal x11475=(gconst4*x11458);
IkReal x11476=(gconst5*sj3*x11459);
evalcond[0]=((((-1.0)*gconst5*r20*x11470))+(((-1.0)*r22*x11469))+((r21*x11475)));
evalcond[1]=((((-1.0)*r12*x11469))+(((-1.0)*x11464*x11470))+cj0+((x11458*x11460)));
evalcond[2]=((((-1.0)*x11466))+(((-1.0)*r02*x11469))+(((-1.0)*x11465*x11470))+((r01*x11475)));
evalcond[3]=(x11462+(((-1.0)*r22*sj3*x11470))+((r20*x11476))+((r20*x11463))+(((-1.0)*r21*x11467*x11469))+((r21*x11468))+(((-1.0)*x11461)));
evalcond[4]=((((-1.0)*r21*x11471))+(((-1.0)*r21*x11463*x11469))+(((-1.0)*x11473))+(((-1.0)*x11472))+(((-1.0)*cj3*r22*x11470))+(((-1.0)*r20*x11467))+((r20*x11459*x11468)));
evalcond[5]=(((r01*x11468))+((sj3*x11459*x11465))+(((-1.0)*r02*sj3*x11470))+(((-1.0)*r01*x11467*x11469))+(((-1.0)*cj0*x11472))+(((-1.0)*cj0*x11473))+((r00*x11463)));
evalcond[6]=(((sj3*x11459*x11464))+(((-1.0)*cj1*sj2*x11466))+((r11*x11468))+((r10*x11463))+(((-1.0)*r12*sj3*x11470))+(((-1.0)*cj2*sj1*x11466))+(((-1.0)*sj3*x11460*x11469)));
evalcond[7]=((((-1.0)*r00*x11467))+((x11465*x11474))+(((-1.0)*r01*x11471))+(((-1.0)*r01*x11463*x11469))+((cj0*x11461))+(((-1.0)*cj0*x11462))+(((-1.0)*cj3*r02*x11470)));
evalcond[8]=((((-1.0)*r11*x11471))+(((-1.0)*r10*x11467))+(((-1.0)*cj3*x11460*x11469))+(((-1.0)*x11462*x11466))+(((-1.0)*cj3*r12*x11470))+((x11464*x11474))+((sj0*x11461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11477=((1.0)*gconst5);
CheckValue<IkReal> x11478 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11477))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11478.valid){
continue;
}
CheckValue<IkReal> x11479=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11477)))),-1);
if(!x11479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11478.value)+(((1.5707963267949)*(x11479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11480=IKsin(j4);
IkReal x11481=IKcos(j4);
IkReal x11482=(gconst4*r11);
IkReal x11483=(cj1*cj2);
IkReal x11484=(sj1*sj2);
IkReal x11485=(cj3*gconst4);
IkReal x11486=(gconst5*r10);
IkReal x11487=(gconst5*r00);
IkReal x11488=((1.0)*sj0);
IkReal x11489=(gconst4*sj3);
IkReal x11490=(cj3*gconst5);
IkReal x11491=((1.0)*x11481);
IkReal x11492=((1.0)*x11480);
IkReal x11493=((1.0)*gconst5*sj3);
IkReal x11494=((1.0)*cj2*sj1);
IkReal x11495=((1.0)*cj1*sj2);
IkReal x11496=(cj3*x11481);
IkReal x11497=(gconst4*x11480);
IkReal x11498=(gconst5*sj3*x11481);
evalcond[0]=(((r21*x11497))+(((-1.0)*gconst5*r20*x11492))+(((-1.0)*r22*x11491)));
evalcond[1]=(cj0+((x11480*x11482))+(((-1.0)*r12*x11491))+(((-1.0)*x11486*x11492)));
evalcond[2]=((((-1.0)*r02*x11491))+(((-1.0)*x11487*x11492))+(((-1.0)*x11488))+((r01*x11497)));
evalcond[3]=(((r20*x11485))+x11484+((r21*x11490))+(((-1.0)*r22*sj3*x11492))+(((-1.0)*x11483))+((r20*x11498))+(((-1.0)*r21*x11489*x11491)));
evalcond[4]=((((-1.0)*x11495))+(((-1.0)*x11494))+((r20*x11481*x11490))+(((-1.0)*cj3*r22*x11492))+(((-1.0)*r21*x11485*x11491))+(((-1.0)*r20*x11489))+(((-1.0)*r21*x11493)));
evalcond[5]=(((sj3*x11481*x11487))+((r00*x11485))+(((-1.0)*r01*x11489*x11491))+(((-1.0)*r02*sj3*x11492))+(((-1.0)*cj0*x11494))+(((-1.0)*cj0*x11495))+((r01*x11490)));
evalcond[6]=((((-1.0)*cj1*sj2*x11488))+((sj3*x11481*x11486))+(((-1.0)*sj3*x11482*x11491))+((r11*x11490))+(((-1.0)*cj2*sj1*x11488))+(((-1.0)*r12*sj3*x11492))+((r10*x11485)));
evalcond[7]=((((-1.0)*r00*x11489))+((cj0*x11483))+(((-1.0)*cj3*r02*x11492))+(((-1.0)*r01*x11485*x11491))+(((-1.0)*cj0*x11484))+((x11487*x11496))+(((-1.0)*r01*x11493)));
evalcond[8]=((((-1.0)*cj3*x11482*x11491))+(((-1.0)*r10*x11489))+(((-1.0)*r11*x11493))+((sj0*x11483))+(((-1.0)*x11484*x11488))+((x11486*x11496))+(((-1.0)*cj3*r12*x11492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11499=((-1.0)*r10);
IkReal x11501 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11501)==0){
continue;
}
IkReal x11500=pow(x11501,-0.5);
CheckValue<IkReal> x11502 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11499),IKFAST_ATAN2_MAGTHRESH);
if(!x11502.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11502.value));
IkReal gconst7=(r11*x11500);
IkReal gconst8=(x11499*x11500);
CheckValue<IkReal> x11503 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11503.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11503.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11504=((-1.0)*r10);
IkReal x11505=x11500;
CheckValue<IkReal> x11507 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11504),IKFAST_ATAN2_MAGTHRESH);
if(!x11507.valid){
continue;
}
IkReal x11506=((-1.0)*(x11507.value));
sj5=gconst7;
cj5=gconst8;
j5=x11506;
IkReal gconst6=x11506;
IkReal gconst7=(r11*x11505);
IkReal gconst8=(x11504*x11505);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11508=((1.0)*sj0);
IkReal x11509=((1.0)*gconst7);
CheckValue<IkReal> x11510 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11508))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst7*r11*x11508))+((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x11509))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11510.valid){
continue;
}
CheckValue<IkReal> x11511=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11509))+(((-1.0)*gconst8*r21)))),-1);
if(!x11511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11510.value)+(((1.5707963267949)*(x11511.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11512=IKsin(j4);
IkReal x11513=IKcos(j4);
IkReal x11514=((1.0)*sj3);
IkReal x11515=(gconst7*r00);
IkReal x11516=(cj3*gconst8);
IkReal x11517=(cj1*cj2);
IkReal x11518=(cj3*gconst7);
IkReal x11519=(gconst7*sj3);
IkReal x11520=(sj1*sj2);
IkReal x11521=((1.0)*sj0);
IkReal x11522=((1.0)*x11513);
IkReal x11523=(r12*x11512);
IkReal x11524=((1.0)*x11512);
IkReal x11525=(gconst7*x11512);
IkReal x11526=((1.0)*cj2*sj1);
IkReal x11527=((1.0)*cj1*sj2);
IkReal x11528=(gconst8*sj3*x11513);
evalcond[0]=((((-1.0)*gconst8*r20*x11524))+((r21*x11525))+(((-1.0)*r22*x11522)));
evalcond[1]=(cj0+((r11*x11525))+(((-1.0)*gconst8*r10*x11524))+(((-1.0)*r12*x11522)));
evalcond[2]=((((-1.0)*r02*x11522))+(((-1.0)*gconst8*r00*x11524))+((r01*x11525))+(((-1.0)*x11521)));
evalcond[3]=((((-1.0)*x11517))+x11520+((r20*x11518))+(((-1.0)*r22*x11512*x11514))+((r20*x11528))+((r21*x11516))+(((-1.0)*gconst7*r21*x11513*x11514)));
evalcond[4]=((((-1.0)*r21*x11518*x11522))+(((-1.0)*gconst7*r20*x11514))+((r20*x11513*x11516))+(((-1.0)*cj3*r22*x11524))+(((-1.0)*x11526))+(((-1.0)*x11527))+(((-1.0)*gconst8*r21*x11514)));
evalcond[5]=(((r01*x11516))+((cj3*x11515))+(((-1.0)*gconst7*r01*x11513*x11514))+(((-1.0)*r02*x11512*x11514))+(((-1.0)*cj0*x11527))+(((-1.0)*cj0*x11526))+((r00*x11528)));
evalcond[6]=((((-1.0)*cj2*sj1*x11521))+(((-1.0)*gconst7*r11*x11513*x11514))+(((-1.0)*x11514*x11523))+(((-1.0)*cj1*sj2*x11521))+((r10*x11528))+((r10*x11518))+((r11*x11516)));
evalcond[7]=((((-1.0)*r01*x11518*x11522))+((cj0*x11517))+((r00*x11513*x11516))+(((-1.0)*gconst8*r01*x11514))+(((-1.0)*cj3*r02*x11524))+(((-1.0)*cj0*x11520))+(((-1.0)*x11514*x11515)));
evalcond[8]=(((r10*x11513*x11516))+(((-1.0)*gconst7*r10*x11514))+(((-1.0)*r11*x11518*x11522))+((sj0*x11517))+(((-1.0)*x11520*x11521))+(((-1.0)*cj3*x11523))+(((-1.0)*gconst8*r11*x11514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11529=((1.0)*gconst8);
CheckValue<IkReal> x11530=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11529)))),-1);
if(!x11530.valid){
continue;
}
CheckValue<IkReal> x11531 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11529))+((cj0*gconst7*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11530.value)))+(x11531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11532=IKsin(j4);
IkReal x11533=IKcos(j4);
IkReal x11534=((1.0)*sj3);
IkReal x11535=(gconst7*r00);
IkReal x11536=(cj3*gconst8);
IkReal x11537=(cj1*cj2);
IkReal x11538=(cj3*gconst7);
IkReal x11539=(gconst7*sj3);
IkReal x11540=(sj1*sj2);
IkReal x11541=((1.0)*sj0);
IkReal x11542=((1.0)*x11533);
IkReal x11543=(r12*x11532);
IkReal x11544=((1.0)*x11532);
IkReal x11545=(gconst7*x11532);
IkReal x11546=((1.0)*cj2*sj1);
IkReal x11547=((1.0)*cj1*sj2);
IkReal x11548=(gconst8*sj3*x11533);
evalcond[0]=(((r21*x11545))+(((-1.0)*gconst8*r20*x11544))+(((-1.0)*r22*x11542)));
evalcond[1]=(cj0+((r11*x11545))+(((-1.0)*r12*x11542))+(((-1.0)*gconst8*r10*x11544)));
evalcond[2]=(((r01*x11545))+(((-1.0)*r02*x11542))+(((-1.0)*x11541))+(((-1.0)*gconst8*r00*x11544)));
evalcond[3]=(x11540+((r21*x11536))+(((-1.0)*gconst7*r21*x11533*x11534))+((r20*x11548))+(((-1.0)*r22*x11532*x11534))+((r20*x11538))+(((-1.0)*x11537)));
evalcond[4]=((((-1.0)*gconst8*r21*x11534))+(((-1.0)*gconst7*r20*x11534))+((r20*x11533*x11536))+(((-1.0)*x11547))+(((-1.0)*x11546))+(((-1.0)*cj3*r22*x11544))+(((-1.0)*r21*x11538*x11542)));
evalcond[5]=((((-1.0)*cj0*x11547))+(((-1.0)*cj0*x11546))+((r00*x11548))+(((-1.0)*gconst7*r01*x11533*x11534))+(((-1.0)*r02*x11532*x11534))+((r01*x11536))+((cj3*x11535)));
evalcond[6]=(((r10*x11548))+(((-1.0)*cj2*sj1*x11541))+(((-1.0)*gconst7*r11*x11533*x11534))+(((-1.0)*x11534*x11543))+(((-1.0)*cj1*sj2*x11541))+((r11*x11536))+((r10*x11538)));
evalcond[7]=(((r00*x11533*x11536))+(((-1.0)*gconst8*r01*x11534))+(((-1.0)*cj3*r02*x11544))+(((-1.0)*cj0*x11540))+(((-1.0)*r01*x11538*x11542))+(((-1.0)*x11534*x11535))+((cj0*x11537)));
evalcond[8]=((((-1.0)*r11*x11538*x11542))+((r10*x11533*x11536))+(((-1.0)*cj3*x11543))+(((-1.0)*x11540*x11541))+(((-1.0)*gconst8*r11*x11534))+((sj0*x11537))+(((-1.0)*gconst7*r10*x11534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11549=((-1.0)*r11);
IkReal x11551 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11551)==0){
continue;
}
IkReal x11550=pow(x11551,-0.5);
CheckValue<IkReal> x11552 = IKatan2WithCheck(IkReal(x11549),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11552.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11552.value))));
IkReal gconst10=(x11549*x11550);
IkReal gconst11=((1.0)*r10*x11550);
CheckValue<IkReal> x11553 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11553.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11553.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11554=((-1.0)*r11);
CheckValue<IkReal> x11557 = IKatan2WithCheck(IkReal(x11554),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11557.valid){
continue;
}
IkReal x11555=((1.0)*(x11557.value));
IkReal x11556=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11555)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11555)));
IkReal gconst10=(x11554*x11556);
IkReal gconst11=((1.0)*r10*x11556);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11558=((-1.0)*r11);
CheckValue<IkReal> x11561 = IKatan2WithCheck(IkReal(x11558),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11561.valid){
continue;
}
IkReal x11559=((1.0)*(x11561.value));
IkReal x11560=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11559)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11559)));
IkReal gconst10=(x11558*x11560);
IkReal gconst11=((1.0)*r10*x11560);
IkReal x11562=r12*r12;
IkReal x11563=((1.0)*sj0);
IkReal x11564=(cj0*r02);
IkReal x11565=x11550;
j4eval[0]=((IKabs(((((-1.0)*x11564))+(((-1.0)*r12*x11563)))))+(IKabs((((sj0*x11562*x11565))+((r12*x11564*x11565))+(((-1.0)*x11563*x11565))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11566=((-1.0)*r11);
CheckValue<IkReal> x11569 = IKatan2WithCheck(IkReal(x11566),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11569.valid){
continue;
}
IkReal x11567=((1.0)*(x11569.value));
IkReal x11568=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11567)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11567)));
IkReal gconst10=(x11566*x11568);
IkReal gconst11=((1.0)*r10*x11568);
CheckValue<IkReal> x11573=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11573.valid){
continue;
}
IkReal x11570=x11573.value;
IkReal x11571=(sj3*x11570);
IkReal x11572=((1.0)*x11571);
j4eval[0]=IKsign((((sj3*(r22*r22)))+((x11572*(r11*r11)*(r21*r21)))+((x11572*(r10*r10)*(r20*r20)))+(((2.0)*r10*r11*r20*r21*x11571))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11574=((-1.0)*r11);
CheckValue<IkReal> x11577 = IKatan2WithCheck(IkReal(x11574),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11577.valid){
continue;
}
IkReal x11575=((1.0)*(x11577.value));
IkReal x11576=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11575)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11575)));
IkReal gconst10=(x11574*x11576);
IkReal gconst11=((1.0)*r10*x11576);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11578=((-1.0)*r11);
CheckValue<IkReal> x11581 = IKatan2WithCheck(IkReal(x11578),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11581.valid){
continue;
}
IkReal x11579=((1.0)*(x11581.value));
IkReal x11580=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11579)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11579)));
IkReal gconst10=(x11578*x11580);
IkReal gconst11=((1.0)*r10*x11580);
IkReal x11582=r12*r12;
IkReal x11583=((1.0)*sj0);
IkReal x11584=(cj0*r02);
IkReal x11585=x11550;
j4eval[0]=((IKabs(((((-1.0)*x11583*x11585))+((r12*x11584*x11585))+((sj0*x11582*x11585)))))+(IKabs(((((-1.0)*x11584))+(((-1.0)*r12*x11583))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11586=((-1.0)*r11);
CheckValue<IkReal> x11589 = IKatan2WithCheck(IkReal(x11586),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11589.valid){
continue;
}
IkReal x11587=((1.0)*(x11589.value));
IkReal x11588=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11587)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11587)));
IkReal gconst10=(x11586*x11588);
IkReal gconst11=((1.0)*r10*x11588);
IkReal x11590=((1.0)*r22);
IkReal x11591=(cj1*sj2);
IkReal x11592=(cj2*sj1);
IkReal x11593=x11550;
IkReal x11594=(r12*r22*x11593);
j4eval[0]=((IKabs(((((-1.0)*x11590*x11592))+(((-1.0)*x11590*x11591)))))+(IKabs((((x11592*x11594))+((x11591*x11594))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11595=((-1.0)*r11);
CheckValue<IkReal> x11598 = IKatan2WithCheck(IkReal(x11595),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11598.valid){
continue;
}
IkReal x11596=((1.0)*(x11598.value));
IkReal x11597=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11596)));
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11596)));
IkReal gconst10=(x11595*x11597);
IkReal gconst11=((1.0)*r10*x11597);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11599=((-1.0)*r11);
CheckValue<IkReal> x11602 = IKatan2WithCheck(IkReal(x11599),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11602.valid){
continue;
}
IkReal x11600=((1.0)*(x11602.value));
IkReal x11601=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11600)));
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11600)));
IkReal gconst10=(x11599*x11601);
IkReal gconst11=((1.0)*r10*x11601);
IkReal x11603=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11607=IKPowWithIntegerCheck(x11603,-1);
if(!x11607.valid){
continue;
}
IkReal x11604=x11607.value;
IkReal x11605=((1.0)*x11604);
IkReal x11606=((((-1.0)*x11605*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x11604))+(((-1.0)*(r02*r02)))+(((-1.0)*x11605*(r00*r00)*(r10*r10))));
j4eval[0]=x11606;
j4eval[1]=IKsign(x11606);
j4eval[2]=r02;
j4eval[3]=x11603;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11608=((-1.0)*r11);
CheckValue<IkReal> x11611 = IKatan2WithCheck(IkReal(x11608),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11611.valid){
continue;
}
IkReal x11609=((1.0)*(x11611.value));
IkReal x11610=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11609)));
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11609)));
IkReal gconst10=(x11608*x11610);
IkReal gconst11=((1.0)*r10*x11610);
IkReal x11612=r12*r12;
CheckValue<IkReal> x11615=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11612))),-1);
if(!x11615.valid){
continue;
}
IkReal x11613=x11615.value;
IkReal x11614=((1.0)*x11613);
j4eval[0]=IKsign((x11612+(((2.0)*x11613*(r10*r10)*(r11*r11)))+((x11614*(r10*r10*r10*r10)))+((x11614*(r11*r11*r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11616=(sj1*sj2);
IkReal x11617=(gconst11*r10);
IkReal x11618=(gconst10*r11);
IkReal x11619=(cj1*cj2);
CheckValue<IkReal> x11620 = IKatan2WithCheck(IkReal((((r12*x11619))+(((-1.0)*r12*x11616)))),IkReal((((x11616*x11617))+(((-1.0)*x11616*x11618))+(((-1.0)*x11617*x11619))+((x11618*x11619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11620.valid){
continue;
}
CheckValue<IkReal> x11621=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11617*x11617)+(x11618*x11618)+(((-2.0)*x11617*x11618)))),-1);
if(!x11621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11620.value)+(((1.5707963267949)*(x11621.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11622=IKsin(j4);
IkReal x11623=IKcos(j4);
IkReal x11624=((1.0)*sj2);
IkReal x11625=((1.0)*x11623);
IkReal x11626=(gconst10*x11622);
IkReal x11627=(gconst11*x11623);
IkReal x11628=((1.0)*x11622);
IkReal x11629=(gconst11*x11628);
evalcond[0]=(((r21*x11626))+(((-1.0)*r22*x11625))+(((-1.0)*r20*x11629)));
evalcond[1]=(((r11*x11626))+(((-1.0)*r12*x11625))+(((-1.0)*r10*x11629)));
evalcond[2]=((((-1.0)*gconst10*r01*x11625))+((r00*x11627))+(((-1.0)*r02*x11628)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11629))+((r01*x11626))+(((-1.0)*r02*x11625)));
evalcond[4]=((((-1.0)*sj1*x11624))+(((-1.0)*r12*x11628))+(((-1.0)*gconst10*r11*x11625))+((cj1*cj2))+((r10*x11627)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r22*x11628))+(((-1.0)*cj1*x11624))+((r20*x11627))+(((-1.0)*gconst10*r21*x11625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11630=(gconst11*r00);
IkReal x11631=(gconst10*r01);
CheckValue<IkReal> x11632=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11631*x11631)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11630*x11630)))+(((2.0)*x11630*x11631)))),-1);
if(!x11632.valid){
continue;
}
CheckValue<IkReal> x11633 = IKatan2WithCheck(IkReal((x11630+(((-1.0)*x11631)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11632.value)))+(x11633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11634=IKsin(j4);
IkReal x11635=IKcos(j4);
IkReal x11636=((1.0)*sj2);
IkReal x11637=((1.0)*x11635);
IkReal x11638=(gconst10*x11634);
IkReal x11639=(gconst11*x11635);
IkReal x11640=((1.0)*x11634);
IkReal x11641=(gconst11*x11640);
evalcond[0]=((((-1.0)*r22*x11637))+((r21*x11638))+(((-1.0)*r20*x11641)));
evalcond[1]=(((r11*x11638))+(((-1.0)*r10*x11641))+(((-1.0)*r12*x11637)));
evalcond[2]=(((r00*x11639))+(((-1.0)*gconst10*r01*x11637))+(((-1.0)*r02*x11640)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11637))+(((-1.0)*r00*x11641))+((r01*x11638)));
evalcond[4]=((((-1.0)*r12*x11640))+((r10*x11639))+(((-1.0)*gconst10*r11*x11637))+((cj1*cj2))+(((-1.0)*sj1*x11636)));
evalcond[5]=((((-1.0)*gconst10*r21*x11637))+(((-1.0)*r22*x11640))+(((-1.0)*cj2*sj1))+((r20*x11639))+(((-1.0)*cj1*x11636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11642 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11642.valid){
continue;
}
CheckValue<IkReal> x11643=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11642.value)+(((1.5707963267949)*(x11643.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11644=IKsin(j4);
IkReal x11645=IKcos(j4);
IkReal x11646=((1.0)*sj2);
IkReal x11647=((1.0)*x11645);
IkReal x11648=(gconst10*x11644);
IkReal x11649=(gconst11*x11645);
IkReal x11650=((1.0)*x11644);
IkReal x11651=(gconst11*x11650);
evalcond[0]=((((-1.0)*r22*x11647))+((r21*x11648))+(((-1.0)*r20*x11651)));
evalcond[1]=((((-1.0)*r12*x11647))+((r11*x11648))+(((-1.0)*r10*x11651)));
evalcond[2]=((((-1.0)*r02*x11650))+(((-1.0)*gconst10*r01*x11647))+((r00*x11649)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11651))+((r01*x11648))+(((-1.0)*r02*x11647)));
evalcond[4]=((((-1.0)*r12*x11650))+((r10*x11649))+((cj1*cj2))+(((-1.0)*gconst10*r11*x11647))+(((-1.0)*sj1*x11646)));
evalcond[5]=((((-1.0)*gconst10*r21*x11647))+(((-1.0)*r22*x11650))+(((-1.0)*cj2*sj1))+((r20*x11649))+(((-1.0)*cj1*x11646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11652=((-1.0)*r11);
CheckValue<IkReal> x11655 = IKatan2WithCheck(IkReal(x11652),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11655.valid){
continue;
}
IkReal x11653=((1.0)*(x11655.value));
IkReal x11654=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11653)));
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11653)));
IkReal gconst10=(x11652*x11654);
IkReal gconst11=((1.0)*r10*x11654);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11656=((-1.0)*r11);
CheckValue<IkReal> x11659 = IKatan2WithCheck(IkReal(x11656),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11659.valid){
continue;
}
IkReal x11657=((1.0)*(x11659.value));
IkReal x11658=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11657)));
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11657)));
IkReal gconst10=(x11656*x11658);
IkReal gconst11=((1.0)*r10*x11658);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11660=((-1.0)*r11);
CheckValue<IkReal> x11663 = IKatan2WithCheck(IkReal(x11660),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11663.valid){
continue;
}
IkReal x11661=((1.0)*(x11663.value));
IkReal x11662=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11661)));
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11661)));
IkReal gconst10=(x11660*x11662);
IkReal gconst11=((1.0)*r10*x11662);
IkReal x11664=r12*r12;
CheckValue<IkReal> x11667=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11664))),-1);
if(!x11667.valid){
continue;
}
IkReal x11665=x11667.value;
IkReal x11666=((1.0)*x11665);
j4eval[0]=IKsign((x11664+(((2.0)*x11665*(r10*r10)*(r11*r11)))+((x11666*(r10*r10*r10*r10)))+((x11666*(r11*r11*r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11668=(sj1*sj2);
IkReal x11669=(gconst10*r11);
IkReal x11670=(gconst11*r10);
IkReal x11671=((1.0)*cj1*cj2);
CheckValue<IkReal> x11672 = IKatan2WithCheck(IkReal((((r12*x11668))+(((-1.0)*r12*x11671)))),IkReal(((((-1.0)*x11668*x11670))+(((-1.0)*x11669*x11671))+((cj1*cj2*x11670))+((x11668*x11669)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11672.valid){
continue;
}
CheckValue<IkReal> x11673=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11669*x11669)+(((-2.0)*x11669*x11670))+(x11670*x11670))),-1);
if(!x11673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11672.value)+(((1.5707963267949)*(x11673.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11674=IKsin(j4);
IkReal x11675=IKcos(j4);
IkReal x11676=((1.0)*cj2);
IkReal x11677=((1.0)*x11675);
IkReal x11678=(gconst10*x11674);
IkReal x11679=((1.0)*x11674);
IkReal x11680=(gconst11*x11675);
IkReal x11681=(gconst11*x11679);
evalcond[0]=((((-1.0)*r20*x11681))+((r21*x11678))+(((-1.0)*r22*x11677)));
evalcond[1]=(((r11*x11678))+(((-1.0)*r10*x11681))+(((-1.0)*r12*x11677)));
evalcond[2]=(((r00*x11680))+(((-1.0)*r02*x11679))+(((-1.0)*gconst10*r01*x11677)));
evalcond[3]=((1.0)+(((-1.0)*r00*x11681))+((r01*x11678))+(((-1.0)*r02*x11677)));
evalcond[4]=((((-1.0)*gconst10*r11*x11677))+(((-1.0)*cj1*x11676))+((r10*x11680))+((sj1*sj2))+(((-1.0)*r12*x11679)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r21*x11677))+(((-1.0)*r22*x11679))+(((-1.0)*sj1*x11676))+((r20*x11680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11682=(gconst11*r00);
IkReal x11683=(gconst10*r01);
CheckValue<IkReal> x11684 = IKatan2WithCheck(IkReal(((((-1.0)*x11683))+x11682)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11684.valid){
continue;
}
CheckValue<IkReal> x11685=IKPowWithIntegerCheck(IKsign(((x11683*x11683)+(((-2.0)*x11682*x11683))+(r02*r02)+(x11682*x11682))),-1);
if(!x11685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11684.value)+(((1.5707963267949)*(x11685.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11686=IKsin(j4);
IkReal x11687=IKcos(j4);
IkReal x11688=((1.0)*cj2);
IkReal x11689=((1.0)*x11687);
IkReal x11690=(gconst10*x11686);
IkReal x11691=((1.0)*x11686);
IkReal x11692=(gconst11*x11687);
IkReal x11693=(gconst11*x11691);
evalcond[0]=((((-1.0)*r20*x11693))+(((-1.0)*r22*x11689))+((r21*x11690)));
evalcond[1]=((((-1.0)*r12*x11689))+((r11*x11690))+(((-1.0)*r10*x11693)));
evalcond[2]=(((r00*x11692))+(((-1.0)*r02*x11691))+(((-1.0)*gconst10*r01*x11689)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11689))+((r01*x11690))+(((-1.0)*r00*x11693)));
evalcond[4]=((((-1.0)*cj1*x11688))+((sj1*sj2))+(((-1.0)*gconst10*r11*x11689))+((r10*x11692))+(((-1.0)*r12*x11691)));
evalcond[5]=((((-1.0)*r22*x11691))+(((-1.0)*sj1*x11688))+(((-1.0)*gconst10*r21*x11689))+(((-1.0)*cj1*sj2))+((r20*x11692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11694=((1.0)*gconst11);
CheckValue<IkReal> x11695=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11694))+(((-1.0)*gconst10*r20)))),-1);
if(!x11695.valid){
continue;
}
CheckValue<IkReal> x11696 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11695.value)))+(x11696.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11697=IKsin(j4);
IkReal x11698=IKcos(j4);
IkReal x11699=((1.0)*cj2);
IkReal x11700=((1.0)*x11698);
IkReal x11701=(gconst10*x11697);
IkReal x11702=((1.0)*x11697);
IkReal x11703=(gconst11*x11698);
IkReal x11704=(gconst11*x11702);
evalcond[0]=((((-1.0)*r22*x11700))+((r21*x11701))+(((-1.0)*r20*x11704)));
evalcond[1]=(((r11*x11701))+(((-1.0)*r12*x11700))+(((-1.0)*r10*x11704)));
evalcond[2]=(((r00*x11703))+(((-1.0)*gconst10*r01*x11700))+(((-1.0)*r02*x11702)));
evalcond[3]=((1.0)+((r01*x11701))+(((-1.0)*r02*x11700))+(((-1.0)*r00*x11704)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x11699))+(((-1.0)*gconst10*r11*x11700))+((r10*x11703))+(((-1.0)*r12*x11702)));
evalcond[5]=((((-1.0)*gconst10*r21*x11700))+(((-1.0)*r22*x11702))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11699))+((r20*x11703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11705=((-1.0)*r11);
IkReal x11706=((-1.0)*r10);
CheckValue<IkReal> x11708 = IKatan2WithCheck(IkReal(x11705),IkReal(x11706),IKFAST_ATAN2_MAGTHRESH);
if(!x11708.valid){
continue;
}
IkReal x11707=((1.0)*(x11708.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11707)));
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11706);
rxp1_1=(px*r21);
rxp1_2=(px*x11705);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11707)));
IkReal gconst10=x11705;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11709=((-1.0)*r11);
IkReal x11710=((-1.0)*r10);
CheckValue<IkReal> x11712 = IKatan2WithCheck(IkReal(x11709),IkReal(x11710),IKFAST_ATAN2_MAGTHRESH);
if(!x11712.valid){
continue;
}
IkReal x11711=((1.0)*(x11712.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11711)));
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11710);
rxp1_1=(px*r21);
rxp1_2=(px*x11709);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11711)));
IkReal gconst10=x11709;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11713=((-1.0)*r11);
IkReal x11714=((-1.0)*r10);
CheckValue<IkReal> x11716 = IKatan2WithCheck(IkReal(x11713),IkReal(x11714),IKFAST_ATAN2_MAGTHRESH);
if(!x11716.valid){
continue;
}
IkReal x11715=((1.0)*(x11716.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11715)));
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11714);
rxp1_1=(px*r21);
rxp1_2=(px*x11713);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11715)));
IkReal gconst10=x11713;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11719=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11719.valid){
continue;
}
IkReal x11717=x11719.value;
IkReal x11718=(sj0*x11717);
cj4array[0]=((((-1.0)*cj1*cj2*x11718))+((sj1*sj2*x11718)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11720=IKsin(j4);
IkReal x11721=IKcos(j4);
IkReal x11722=(gconst10*r21);
IkReal x11723=(gconst11*r20);
IkReal x11724=((1.0)*x11720);
IkReal x11725=((1.0)*x11721);
evalcond[0]=((-1.0)*r02*x11720);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11725)));
evalcond[2]=((((-1.0)*x11723*x11724))+((x11720*x11722)));
evalcond[3]=(((gconst10*r11*x11720))+(((-1.0)*gconst11*r10*x11724)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x11721*x11723))+(((-1.0)*x11722*x11725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11727=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11727.valid){
continue;
}
IkReal x11726=x11727.value;
cj4array[0]=(((cj1*sj2*x11726))+((cj2*sj1*x11726)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11728=IKsin(j4);
IkReal x11729=IKcos(j4);
IkReal x11730=((1.0)*sj0);
IkReal x11731=(gconst10*x11728);
IkReal x11732=((1.0)*x11729);
IkReal x11733=((1.0)*gconst11*x11728);
evalcond[0]=((-1.0)*r02*x11728);
evalcond[1]=((((-1.0)*x11730))+(((-1.0)*r02*x11732)));
evalcond[2]=((((-1.0)*r20*x11733))+((r21*x11731)));
evalcond[3]=(((r11*x11731))+(((-1.0)*r10*x11733)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*gconst10*r11*x11732))+((gconst11*r10*x11729))+(((-1.0)*sj1*sj2*x11730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11734=IKPowWithIntegerCheck(r02,-1);
if(!x11734.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11734.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11735=IKsin(j4);
IkReal x11736=IKcos(j4);
IkReal x11737=((1.0)*sj1);
IkReal x11738=(gconst10*x11735);
IkReal x11739=(gconst11*x11736);
IkReal x11740=((1.0)*gconst11*x11735);
IkReal x11741=((1.0)*gconst10*x11736);
evalcond[0]=((-1.0)*r02*x11735);
evalcond[1]=((((-1.0)*r20*x11740))+((r21*x11738)));
evalcond[2]=(((r11*x11738))+(((-1.0)*r10*x11740)));
evalcond[3]=((((-1.0)*r21*x11741))+(((-1.0)*cj2*x11737))+(((-1.0)*cj1*sj2))+((r20*x11739)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x11737))+(((-1.0)*r11*x11741))+((r10*x11739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11742=((1.0)*gconst11);
CheckValue<IkReal> x11743 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x11742))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*cj0*r00*x11742)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11743.valid){
continue;
}
CheckValue<IkReal> x11744=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11743.value)+(((1.5707963267949)*(x11744.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11745=IKsin(j4);
IkReal x11746=IKcos(j4);
IkReal x11747=(cj1*cj2);
IkReal x11748=((1.0)*sj1);
IkReal x11749=(gconst10*x11745);
IkReal x11750=((1.0)*x11746);
IkReal x11751=(gconst11*x11746);
IkReal x11752=((1.0)*x11745);
IkReal x11753=(gconst11*x11752);
evalcond[0]=(((r21*x11749))+(((-1.0)*r20*x11753)));
evalcond[1]=((((-1.0)*r12*x11750))+cj0+(((-1.0)*r10*x11753))+((r11*x11749)));
evalcond[2]=((((-1.0)*gconst10*r21*x11750))+(((-1.0)*cj2*x11748))+(((-1.0)*cj1*sj2))+((r20*x11751)));
evalcond[3]=((((-1.0)*sj0))+((r01*x11749))+(((-1.0)*r02*x11750))+(((-1.0)*r00*x11753)));
evalcond[4]=((((-1.0)*gconst10*r01*x11750))+(((-1.0)*cj0*sj2*x11748))+((cj0*x11747))+(((-1.0)*r02*x11752))+((r00*x11751)));
evalcond[5]=((((-1.0)*r12*x11752))+(((-1.0)*sj0*sj2*x11748))+((sj0*x11747))+((r10*x11751))+(((-1.0)*gconst10*r11*x11750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11754=(gconst11*r20);
IkReal x11755=(cj2*sj1);
IkReal x11756=(cj1*sj2);
IkReal x11757=((1.0)*r22);
IkReal x11758=(gconst10*r21);
CheckValue<IkReal> x11759 = IKatan2WithCheck(IkReal(((((-1.0)*x11755*x11757))+(((-1.0)*x11756*x11757)))),IkReal((((x11754*x11756))+((x11754*x11755))+(((-1.0)*x11755*x11758))+(((-1.0)*x11756*x11758)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11759.valid){
continue;
}
CheckValue<IkReal> x11760=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x11758*x11758)+(((-2.0)*x11754*x11758))+(x11754*x11754))),-1);
if(!x11760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11759.value)+(((1.5707963267949)*(x11760.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11761=IKsin(j4);
IkReal x11762=IKcos(j4);
IkReal x11763=(cj1*cj2);
IkReal x11764=((1.0)*sj1);
IkReal x11765=((1.0)*x11762);
IkReal x11766=(gconst10*x11761);
IkReal x11767=((1.0)*x11761);
IkReal x11768=(gconst11*x11762);
IkReal x11769=(gconst11*x11767);
evalcond[0]=((((-1.0)*r22*x11765))+((r21*x11766))+(((-1.0)*r20*x11769)));
evalcond[1]=((((-1.0)*r12*x11765))+((r11*x11766))+cj0+(((-1.0)*r10*x11769)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x11765))+(((-1.0)*r00*x11769))+((r01*x11766)));
evalcond[3]=(((r20*x11768))+(((-1.0)*gconst10*r21*x11765))+(((-1.0)*cj2*x11764))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x11767)));
evalcond[4]=((((-1.0)*gconst10*r01*x11765))+((cj0*x11763))+(((-1.0)*cj0*sj2*x11764))+(((-1.0)*r02*x11767))+((r00*x11768)));
evalcond[5]=((((-1.0)*r12*x11767))+((r10*x11768))+((sj0*x11763))+(((-1.0)*gconst10*r11*x11765))+(((-1.0)*sj0*sj2*x11764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11770=((1.0)*sj0);
IkReal x11771=((1.0)*gconst10);
CheckValue<IkReal> x11772=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x11771)))),-1);
if(!x11772.valid){
continue;
}
CheckValue<IkReal> x11773 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11770))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst11*r00))+(((-1.0)*gconst10*r11*x11770))+(((-1.0)*cj0*r01*x11771))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11772.value)))+(x11773.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11774=IKsin(j4);
IkReal x11775=IKcos(j4);
IkReal x11776=(cj1*cj2);
IkReal x11777=((1.0)*sj1);
IkReal x11778=((1.0)*x11775);
IkReal x11779=(gconst10*x11774);
IkReal x11780=((1.0)*x11774);
IkReal x11781=(gconst11*x11775);
IkReal x11782=(gconst11*x11780);
evalcond[0]=((((-1.0)*r20*x11782))+(((-1.0)*r22*x11778))+((r21*x11779)));
evalcond[1]=(cj0+(((-1.0)*r12*x11778))+((r11*x11779))+(((-1.0)*r10*x11782)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x11778))+(((-1.0)*r00*x11782))+((r01*x11779)));
evalcond[3]=((((-1.0)*gconst10*r21*x11778))+((r20*x11781))+(((-1.0)*cj2*x11777))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x11780)));
evalcond[4]=((((-1.0)*cj0*sj2*x11777))+(((-1.0)*gconst10*r01*x11778))+(((-1.0)*r02*x11780))+((cj0*x11776))+((r00*x11781)));
evalcond[5]=(((sj0*x11776))+(((-1.0)*r12*x11780))+((r10*x11781))+(((-1.0)*gconst10*r11*x11778))+(((-1.0)*sj0*sj2*x11777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11783=((1.0)*gconst11);
CheckValue<IkReal> x11784=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x11783)))),-1);
if(!x11784.valid){
continue;
}
CheckValue<IkReal> x11785 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11783))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11784.value)))+(x11785.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11786=IKsin(j4);
IkReal x11787=IKcos(j4);
IkReal x11788=(cj1*cj2);
IkReal x11789=((1.0)*sj1);
IkReal x11790=((1.0)*x11787);
IkReal x11791=(gconst10*x11786);
IkReal x11792=((1.0)*x11786);
IkReal x11793=(gconst11*x11787);
IkReal x11794=(gconst11*x11792);
evalcond[0]=((((-1.0)*r20*x11794))+(((-1.0)*r22*x11790))+((r21*x11791)));
evalcond[1]=(cj0+((r11*x11791))+(((-1.0)*r10*x11794))+(((-1.0)*r12*x11790)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x11794))+(((-1.0)*r02*x11790))+((r01*x11791)));
evalcond[3]=(((r20*x11793))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11789))+(((-1.0)*r22*x11792))+(((-1.0)*gconst10*r21*x11790)));
evalcond[4]=(((cj0*x11788))+(((-1.0)*gconst10*r01*x11790))+(((-1.0)*cj0*sj2*x11789))+(((-1.0)*r02*x11792))+((r00*x11793)));
evalcond[5]=((((-1.0)*gconst10*r11*x11790))+(((-1.0)*sj0*sj2*x11789))+((r10*x11793))+(((-1.0)*r12*x11792))+((sj0*x11788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11795=((-1.0)*r11);
CheckValue<IkReal> x11798 = IKatan2WithCheck(IkReal(x11795),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11798.valid){
continue;
}
IkReal x11796=((1.0)*(x11798.value));
IkReal x11797=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11796)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11796)));
IkReal gconst10=(x11795*x11797);
IkReal gconst11=((1.0)*r10*x11797);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11799=((-1.0)*r11);
CheckValue<IkReal> x11802 = IKatan2WithCheck(IkReal(x11799),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11802.valid){
continue;
}
IkReal x11800=((1.0)*(x11802.value));
IkReal x11801=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11800)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11800)));
IkReal gconst10=(x11799*x11801);
IkReal gconst11=((1.0)*r10*x11801);
IkReal x11803=r12*r12;
IkReal x11804=((1.0)*sj0);
IkReal x11805=(cj0*r02);
IkReal x11806=x11550;
j4eval[0]=((IKabs(((((-1.0)*r12*x11804))+(((-1.0)*x11805)))))+(IKabs((((sj0*x11803*x11806))+((r12*x11805*x11806))+(((-1.0)*x11804*x11806))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11807=((-1.0)*r11);
CheckValue<IkReal> x11810 = IKatan2WithCheck(IkReal(x11807),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11810.valid){
continue;
}
IkReal x11808=((1.0)*(x11810.value));
IkReal x11809=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11808)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11808)));
IkReal gconst10=(x11807*x11809);
IkReal gconst11=((1.0)*r10*x11809);
IkReal x11811=((1.0)+(((-1.0)*(r12*r12))));
IkReal x11812=(cj1*r22*sj2);
IkReal x11813=(cj2*r22*sj1);
CheckValue<IkReal> x11819=IKPowWithIntegerCheck(x11811,-1);
if(!x11819.valid){
continue;
}
IkReal x11814=x11819.value;
IkReal x11815=((1.0)*x11814);
IkReal x11816=x11550;
IkReal x11817=(r12*x11816);
IkReal x11818=((((-1.0)*x11815*(r10*r10)*(r20*r20)))+(((-1.0)*x11815*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x11814))+(((-1.0)*(r22*r22))));
j4eval[0]=x11818;
j4eval[1]=((IKabs(((((-1.0)*x11812))+(((-1.0)*x11813)))))+(IKabs((((x11812*x11817))+((x11813*x11817))))));
j4eval[2]=IKsign(x11818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11820=((-1.0)*r11);
CheckValue<IkReal> x11823 = IKatan2WithCheck(IkReal(x11820),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11823.valid){
continue;
}
IkReal x11821=((1.0)*(x11823.value));
IkReal x11822=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11821)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11821)));
IkReal gconst10=(x11820*x11822);
IkReal gconst11=((1.0)*r10*x11822);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11824=((-1.0)*r11);
CheckValue<IkReal> x11827 = IKatan2WithCheck(IkReal(x11824),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11827.valid){
continue;
}
IkReal x11825=((1.0)*(x11827.value));
IkReal x11826=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11825)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11825)));
IkReal gconst10=(x11824*x11826);
IkReal gconst11=((1.0)*r10*x11826);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11828=((-1.0)*r11);
CheckValue<IkReal> x11831 = IKatan2WithCheck(IkReal(x11828),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11831.valid){
continue;
}
IkReal x11829=((1.0)*(x11831.value));
IkReal x11830=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11829)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11829)));
IkReal gconst10=(x11828*x11830);
IkReal gconst11=((1.0)*r10*x11830);
IkReal x11832=r12*r12;
IkReal x11833=(r02*sj1*sj2);
CheckValue<IkReal> x11838=IKPowWithIntegerCheck(((-1.0)+x11832),-1);
if(!x11838.valid){
continue;
}
IkReal x11834=x11838.value;
IkReal x11835=((1.0)*cj1*cj2*r02);
if((((1.0)+(((-1.0)*x11832)))) < -0.00001)
continue;
IkReal x11836=IKsqrt(((1.0)+(((-1.0)*x11832))));
IkReal x11837=(r12*x11834*x11836);
j4eval[0]=((IKabs(((((-1.0)*x11835))+x11833)))+(IKabs(((((-1.0)*x11835*x11837))+((x11833*x11837))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11839=((1.0)*gconst10);
IkReal x11840=(cj1*cj2);
IkReal x11841=(gconst11*r00);
IkReal x11842=(sj1*sj2);
CheckValue<IkReal> x11843 = IKatan2WithCheck(IkReal((((x11841*x11842))+(((-1.0)*x11840*x11841))+(((-1.0)*r01*x11839*x11842))+((gconst10*r01*x11840)))),IkReal(((((-1.0)*r02*x11840))+((r02*x11842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11843.valid){
continue;
}
CheckValue<IkReal> x11844=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11839))+(((-1.0)*gconst11*r21)))),-1);
if(!x11844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11843.value)+(((1.5707963267949)*(x11844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11845=IKcos(j4);
IkReal x11846=IKsin(j4);
IkReal x11847=((1.0)*sj1);
IkReal x11848=((1.0)*x11845);
IkReal x11849=(gconst10*x11845);
IkReal x11850=(gconst10*x11846);
IkReal x11851=((1.0)*gconst11*x11846);
evalcond[0]=((((-1.0)*gconst11*r00*x11848))+((r01*x11849))+((r02*x11846)));
evalcond[1]=(((r21*x11850))+(((-1.0)*r20*x11851))+(((-1.0)*r22*x11848)));
evalcond[2]=(((r11*x11850))+(((-1.0)*r12*x11848))+(((-1.0)*r10*x11851)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11848))+((r01*x11850))+(((-1.0)*r00*x11851)));
evalcond[4]=((((-1.0)*gconst11*r10*x11848))+(((-1.0)*sj2*x11847))+((r11*x11849))+((r12*x11846))+((cj1*cj2)));
evalcond[5]=(((r21*x11849))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11847))+((r22*x11846))+(((-1.0)*gconst11*r20*x11848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11852=(gconst10*r01);
IkReal x11853=(gconst11*r00);
CheckValue<IkReal> x11854=IKPowWithIntegerCheck(IKsign(((x11853*x11853)+(x11852*x11852)+(r02*r02)+(((-2.0)*x11852*x11853)))),-1);
if(!x11854.valid){
continue;
}
CheckValue<IkReal> x11855 = IKatan2WithCheck(IkReal(((((-1.0)*x11853))+x11852)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11854.value)))+(x11855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11856=IKcos(j4);
IkReal x11857=IKsin(j4);
IkReal x11858=((1.0)*sj1);
IkReal x11859=((1.0)*x11856);
IkReal x11860=(gconst10*x11856);
IkReal x11861=(gconst10*x11857);
IkReal x11862=((1.0)*gconst11*x11857);
evalcond[0]=((((-1.0)*gconst11*r00*x11859))+((r01*x11860))+((r02*x11857)));
evalcond[1]=((((-1.0)*r20*x11862))+(((-1.0)*r22*x11859))+((r21*x11861)));
evalcond[2]=(((r11*x11861))+(((-1.0)*r12*x11859))+(((-1.0)*r10*x11862)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11859))+((r01*x11861))+(((-1.0)*r00*x11862)));
evalcond[4]=((((-1.0)*sj2*x11858))+(((-1.0)*gconst11*r10*x11859))+((r12*x11857))+((r11*x11860))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r20*x11859))+(((-1.0)*cj2*x11858))+((r22*x11857))+((r21*x11860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11863 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11863.valid){
continue;
}
CheckValue<IkReal> x11864=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11863.value)+(((1.5707963267949)*(x11864.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11865=IKcos(j4);
IkReal x11866=IKsin(j4);
IkReal x11867=((1.0)*sj1);
IkReal x11868=((1.0)*x11865);
IkReal x11869=(gconst10*x11865);
IkReal x11870=(gconst10*x11866);
IkReal x11871=((1.0)*gconst11*x11866);
evalcond[0]=(((r02*x11866))+((r01*x11869))+(((-1.0)*gconst11*r00*x11868)));
evalcond[1]=((((-1.0)*r22*x11868))+(((-1.0)*r20*x11871))+((r21*x11870)));
evalcond[2]=((((-1.0)*r10*x11871))+((r11*x11870))+(((-1.0)*r12*x11868)));
evalcond[3]=((-1.0)+((r01*x11870))+(((-1.0)*r00*x11871))+(((-1.0)*r02*x11868)));
evalcond[4]=((((-1.0)*sj2*x11867))+((r12*x11866))+((r11*x11869))+((cj1*cj2))+(((-1.0)*gconst11*r10*x11868)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11867))+((r22*x11866))+(((-1.0)*gconst11*r20*x11868))+((r21*x11869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11872=((-1.0)*r11);
CheckValue<IkReal> x11875 = IKatan2WithCheck(IkReal(x11872),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11875.valid){
continue;
}
IkReal x11873=((1.0)*(x11875.value));
IkReal x11874=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11873)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11873)));
IkReal gconst10=(x11872*x11874);
IkReal gconst11=((1.0)*r10*x11874);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11876=((-1.0)*r11);
CheckValue<IkReal> x11879 = IKatan2WithCheck(IkReal(x11876),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11879.valid){
continue;
}
IkReal x11877=((1.0)*(x11879.value));
IkReal x11878=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11877)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11877)));
IkReal gconst10=(x11876*x11878);
IkReal gconst11=((1.0)*r10*x11878);
IkReal x11880=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11884=IKPowWithIntegerCheck(x11880,-1);
if(!x11884.valid){
continue;
}
IkReal x11881=x11884.value;
IkReal x11882=((1.0)*x11881);
IkReal x11883=((((-1.0)*x11882*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x11881))+(((-1.0)*(r02*r02)))+(((-1.0)*x11882*(r00*r00)*(r10*r10))));
j4eval[0]=x11883;
j4eval[1]=r02;
j4eval[2]=x11880;
j4eval[3]=IKsign(x11883);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11885=((-1.0)*r11);
CheckValue<IkReal> x11888 = IKatan2WithCheck(IkReal(x11885),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11888.valid){
continue;
}
IkReal x11886=((1.0)*(x11888.value));
IkReal x11887=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11886)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11886)));
IkReal gconst10=(x11885*x11887);
IkReal gconst11=((1.0)*r10*x11887);
IkReal x11889=r12*r12;
IkReal x11890=(cj1*cj2*r02);
CheckValue<IkReal> x11895=IKPowWithIntegerCheck(((-1.0)+x11889),-1);
if(!x11895.valid){
continue;
}
IkReal x11891=x11895.value;
IkReal x11892=((1.0)*r02*sj1*sj2);
if((((1.0)+(((-1.0)*x11889)))) < -0.00001)
continue;
IkReal x11893=IKsqrt(((1.0)+(((-1.0)*x11889))));
IkReal x11894=(r12*x11891*x11893);
j4eval[0]=((IKabs(((((-1.0)*x11892))+x11890)))+(IKabs((((x11890*x11894))+(((-1.0)*x11892*x11894))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11896=(sj1*sj2);
IkReal x11897=((1.0)*gconst10);
IkReal x11898=(cj1*cj2);
IkReal x11899=(gconst11*r00);
CheckValue<IkReal> x11900 = IKatan2WithCheck(IkReal((((x11898*x11899))+((gconst10*r01*x11896))+(((-1.0)*r01*x11897*x11898))+(((-1.0)*x11896*x11899)))),IkReal(((((-1.0)*r02*x11896))+((r02*x11898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11900.valid){
continue;
}
CheckValue<IkReal> x11901=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11897))+(((-1.0)*gconst11*r21)))),-1);
if(!x11901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11900.value)+(((1.5707963267949)*(x11901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11902=IKcos(j4);
IkReal x11903=IKsin(j4);
IkReal x11904=((1.0)*cj2);
IkReal x11905=((1.0)*x11902);
IkReal x11906=(gconst10*x11902);
IkReal x11907=(gconst10*x11903);
IkReal x11908=((1.0)*gconst11*x11903);
evalcond[0]=(((r01*x11906))+(((-1.0)*gconst11*r00*x11905))+((r02*x11903)));
evalcond[1]=((((-1.0)*r22*x11905))+(((-1.0)*r20*x11908))+((r21*x11907)));
evalcond[2]=((((-1.0)*r12*x11905))+(((-1.0)*r10*x11908))+((r11*x11907)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11905))+(((-1.0)*r00*x11908))+((r01*x11907)));
evalcond[4]=(((r12*x11903))+(((-1.0)*cj1*x11904))+((sj1*sj2))+(((-1.0)*gconst11*r10*x11905))+((r11*x11906)));
evalcond[5]=(((r22*x11903))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11904))+((r21*x11906))+(((-1.0)*gconst11*r20*x11905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11909=(gconst10*r01);
IkReal x11910=(gconst11*r00);
CheckValue<IkReal> x11911=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11909*x11909)))+(((2.0)*x11909*x11910))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11910*x11910))))),-1);
if(!x11911.valid){
continue;
}
CheckValue<IkReal> x11912 = IKatan2WithCheck(IkReal((x11909+(((-1.0)*x11910)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11911.value)))+(x11912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11913=IKcos(j4);
IkReal x11914=IKsin(j4);
IkReal x11915=((1.0)*cj2);
IkReal x11916=((1.0)*x11913);
IkReal x11917=(gconst10*x11913);
IkReal x11918=(gconst10*x11914);
IkReal x11919=((1.0)*gconst11*x11914);
evalcond[0]=((((-1.0)*gconst11*r00*x11916))+((r01*x11917))+((r02*x11914)));
evalcond[1]=((((-1.0)*r22*x11916))+(((-1.0)*r20*x11919))+((r21*x11918)));
evalcond[2]=(((r11*x11918))+(((-1.0)*r12*x11916))+(((-1.0)*r10*x11919)));
evalcond[3]=((1.0)+((r01*x11918))+(((-1.0)*r02*x11916))+(((-1.0)*r00*x11919)));
evalcond[4]=(((r11*x11917))+(((-1.0)*cj1*x11915))+((sj1*sj2))+(((-1.0)*gconst11*r10*x11916))+((r12*x11914)));
evalcond[5]=(((r22*x11914))+(((-1.0)*cj1*sj2))+((r21*x11917))+(((-1.0)*sj1*x11915))+(((-1.0)*gconst11*r20*x11916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11920=((1.0)*gconst11);
CheckValue<IkReal> x11921=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11920)))),-1);
if(!x11921.valid){
continue;
}
CheckValue<IkReal> x11922 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11921.value)))+(x11922.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11923=IKcos(j4);
IkReal x11924=IKsin(j4);
IkReal x11925=((1.0)*cj2);
IkReal x11926=((1.0)*x11923);
IkReal x11927=(gconst10*x11923);
IkReal x11928=(gconst10*x11924);
IkReal x11929=((1.0)*gconst11*x11924);
evalcond[0]=(((r02*x11924))+(((-1.0)*gconst11*r00*x11926))+((r01*x11927)));
evalcond[1]=((((-1.0)*r20*x11929))+((r21*x11928))+(((-1.0)*r22*x11926)));
evalcond[2]=((((-1.0)*r10*x11929))+((r11*x11928))+(((-1.0)*r12*x11926)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11926))+(((-1.0)*r00*x11929))+((r01*x11928)));
evalcond[4]=((((-1.0)*cj1*x11925))+((sj1*sj2))+((r11*x11927))+(((-1.0)*gconst11*r10*x11926))+((r12*x11924)));
evalcond[5]=(((r21*x11927))+(((-1.0)*gconst11*r20*x11926))+(((-1.0)*cj1*sj2))+((r22*x11924))+(((-1.0)*sj1*x11925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11930=((-1.0)*r11);
IkReal x11931=((-1.0)*r10);
CheckValue<IkReal> x11933 = IKatan2WithCheck(IkReal(x11930),IkReal(x11931),IKFAST_ATAN2_MAGTHRESH);
if(!x11933.valid){
continue;
}
IkReal x11932=((1.0)*(x11933.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11932)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11931);
rxp1_1=(px*r21);
rxp1_2=(px*x11930);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11932)));
IkReal gconst10=x11930;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11934=((-1.0)*r11);
IkReal x11935=((-1.0)*r10);
CheckValue<IkReal> x11937 = IKatan2WithCheck(IkReal(x11934),IkReal(x11935),IKFAST_ATAN2_MAGTHRESH);
if(!x11937.valid){
continue;
}
IkReal x11936=((1.0)*(x11937.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11936)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11935);
rxp1_1=(px*r21);
rxp1_2=(px*x11934);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11936)));
IkReal gconst10=x11934;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11938=((-1.0)*r11);
IkReal x11939=((-1.0)*r10);
CheckValue<IkReal> x11941 = IKatan2WithCheck(IkReal(x11938),IkReal(x11939),IKFAST_ATAN2_MAGTHRESH);
if(!x11941.valid){
continue;
}
IkReal x11940=((1.0)*(x11941.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11940)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11939);
rxp1_1=(px*r21);
rxp1_2=(px*x11938);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11940)));
IkReal gconst10=x11938;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11944=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x11944.valid){
continue;
}
IkReal x11942=x11944.value;
IkReal x11943=(sj0*x11942);
cj4array[0]=(((sj1*sj2*x11943))+(((-1.0)*cj1*cj2*x11943)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11945=IKsin(j4);
IkReal x11946=IKcos(j4);
IkReal x11947=(gconst10*r21);
IkReal x11948=((1.0)*x11946);
IkReal x11949=((1.0)*gconst11*x11945);
evalcond[0]=(r02*x11945);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11948)));
evalcond[2]=(((x11945*x11947))+(((-1.0)*r20*x11949)));
evalcond[3]=(((gconst10*r11*x11945))+(((-1.0)*r10*x11949)));
evalcond[4]=(((x11946*x11947))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r20*x11948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11951=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11951.valid){
continue;
}
IkReal x11950=x11951.value;
cj4array[0]=(((cj1*sj2*x11950))+((cj2*sj1*x11950)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11952=IKsin(j4);
IkReal x11953=IKcos(j4);
IkReal x11954=((1.0)*sj0);
IkReal x11955=(gconst10*x11952);
IkReal x11956=((1.0)*x11953);
IkReal x11957=((1.0)*gconst11*x11952);
evalcond[0]=(r02*x11952);
evalcond[1]=((((-1.0)*r02*x11956))+(((-1.0)*x11954)));
evalcond[2]=((((-1.0)*r20*x11957))+((r21*x11955)));
evalcond[3]=(((r11*x11955))+(((-1.0)*r10*x11957)));
evalcond[4]=(((cj1*cj2*sj0))+((gconst10*r11*x11953))+(((-1.0)*sj1*sj2*x11954))+(((-1.0)*gconst11*r10*x11956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11958=IKPowWithIntegerCheck(r02,-1);
if(!x11958.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11958.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11959=IKsin(j4);
IkReal x11960=IKcos(j4);
IkReal x11961=(gconst10*r21);
IkReal x11962=((1.0)*sj1);
IkReal x11963=(gconst10*r11);
IkReal x11964=((1.0)*gconst11*x11959);
IkReal x11965=((1.0)*gconst11*x11960);
evalcond[0]=(r02*x11959);
evalcond[1]=(((x11959*x11961))+(((-1.0)*r20*x11964)));
evalcond[2]=((((-1.0)*r10*x11964))+((x11959*x11963)));
evalcond[3]=((((-1.0)*r20*x11965))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11962))+((x11960*x11961)));
evalcond[4]=((((-1.0)*r10*x11965))+((cj1*cj2*sj0))+((x11960*x11963))+(((-1.0)*sj0*sj2*x11962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11966=((1.0)*gconst11);
CheckValue<IkReal> x11967 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x11966))+(((-1.0)*r10*sj0*x11966))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11967.valid){
continue;
}
CheckValue<IkReal> x11968=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11967.value)+(((1.5707963267949)*(x11968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11969=IKsin(j4);
IkReal x11970=IKcos(j4);
IkReal x11971=(cj1*cj2);
IkReal x11972=((1.0)*gconst11);
IkReal x11973=((1.0)*sj1);
IkReal x11974=(gconst10*x11970);
IkReal x11975=(gconst10*x11969);
IkReal x11976=((1.0)*x11970);
evalcond[0]=((((-1.0)*r20*x11969*x11972))+((r21*x11975)));
evalcond[1]=((((-1.0)*r12*x11976))+cj0+((r11*x11975))+(((-1.0)*r10*x11969*x11972)));
evalcond[2]=((((-1.0)*r20*x11970*x11972))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11973))+((r21*x11974)));
evalcond[3]=((((-1.0)*sj0))+((r01*x11975))+(((-1.0)*r00*x11969*x11972))+(((-1.0)*r02*x11976)));
evalcond[4]=((((-1.0)*cj0*sj2*x11973))+((r01*x11974))+(((-1.0)*r00*x11970*x11972))+((cj0*x11971))+((r02*x11969)));
evalcond[5]=(((r11*x11974))+((r12*x11969))+(((-1.0)*r10*x11970*x11972))+((sj0*x11971))+(((-1.0)*sj0*sj2*x11973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11977=(gconst11*r20);
IkReal x11978=(cj2*sj1);
IkReal x11979=(cj1*sj2);
IkReal x11980=(gconst10*r21);
IkReal x11981=((1.0)*r22);
CheckValue<IkReal> x11982 = IKatan2WithCheck(IkReal(((((-1.0)*x11979*x11981))+(((-1.0)*x11978*x11981)))),IkReal((((x11977*x11979))+((x11977*x11978))+(((-1.0)*x11979*x11980))+(((-1.0)*x11978*x11980)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11982.valid){
continue;
}
CheckValue<IkReal> x11983=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11980*x11980)))+(((2.0)*x11977*x11980))+(((-1.0)*(x11977*x11977)))+(((-1.0)*r22*x11981)))),-1);
if(!x11983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11982.value)+(((1.5707963267949)*(x11983.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11984=IKsin(j4);
IkReal x11985=IKcos(j4);
IkReal x11986=(cj1*cj2);
IkReal x11987=((1.0)*sj1);
IkReal x11988=((1.0)*x11985);
IkReal x11989=(gconst10*x11985);
IkReal x11990=(gconst10*x11984);
IkReal x11991=((1.0)*gconst11*x11984);
evalcond[0]=(((r21*x11990))+(((-1.0)*r20*x11991))+(((-1.0)*r22*x11988)));
evalcond[1]=((((-1.0)*r12*x11988))+cj0+(((-1.0)*r10*x11991))+((r11*x11990)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x11988))+((r01*x11990))+(((-1.0)*r00*x11991)));
evalcond[3]=(((r21*x11989))+(((-1.0)*cj2*x11987))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r20*x11988))+((r22*x11984)));
evalcond[4]=(((cj0*x11986))+((r02*x11984))+(((-1.0)*gconst11*r00*x11988))+((r01*x11989))+(((-1.0)*cj0*sj2*x11987)));
evalcond[5]=((((-1.0)*sj0*sj2*x11987))+(((-1.0)*gconst11*r10*x11988))+((r12*x11984))+((r11*x11989))+((sj0*x11986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11992=((1.0)*sj0);
IkReal x11993=((1.0)*gconst10);
CheckValue<IkReal> x11994=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11993))+(((-1.0)*gconst11*r21)))),-1);
if(!x11994.valid){
continue;
}
CheckValue<IkReal> x11995 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11992)))),IkReal(((((-1.0)*cj0*r01*x11993))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*gconst10*r11*x11992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11994.value)))+(x11995.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11996=IKsin(j4);
IkReal x11997=IKcos(j4);
IkReal x11998=(cj1*cj2);
IkReal x11999=((1.0)*sj1);
IkReal x12000=((1.0)*x11997);
IkReal x12001=(gconst10*x11997);
IkReal x12002=(gconst10*x11996);
IkReal x12003=((1.0)*gconst11*x11996);
evalcond[0]=(((r21*x12002))+(((-1.0)*r22*x12000))+(((-1.0)*r20*x12003)));
evalcond[1]=((((-1.0)*r10*x12003))+cj0+(((-1.0)*r12*x12000))+((r11*x12002)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x12003))+((r01*x12002))+(((-1.0)*r02*x12000)));
evalcond[3]=((((-1.0)*cj2*x11999))+(((-1.0)*cj1*sj2))+((r22*x11996))+((r21*x12001))+(((-1.0)*gconst11*r20*x12000)));
evalcond[4]=((((-1.0)*cj0*sj2*x11999))+(((-1.0)*gconst11*r00*x12000))+((r01*x12001))+((cj0*x11998))+((r02*x11996)));
evalcond[5]=(((sj0*x11998))+(((-1.0)*sj0*sj2*x11999))+(((-1.0)*gconst11*r10*x12000))+((r11*x12001))+((r12*x11996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12004=((1.0)*gconst11);
CheckValue<IkReal> x12005 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12004))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12005.valid){
continue;
}
CheckValue<IkReal> x12006=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12004)))),-1);
if(!x12006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12005.value)+(((1.5707963267949)*(x12006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12007=IKsin(j4);
IkReal x12008=IKcos(j4);
IkReal x12009=(cj1*cj2);
IkReal x12010=((1.0)*sj1);
IkReal x12011=((1.0)*x12008);
IkReal x12012=(gconst10*x12008);
IkReal x12013=(gconst10*x12007);
IkReal x12014=((1.0)*gconst11*x12007);
evalcond[0]=(((r21*x12013))+(((-1.0)*r22*x12011))+(((-1.0)*r20*x12014)));
evalcond[1]=(cj0+((r11*x12013))+(((-1.0)*r12*x12011))+(((-1.0)*r10*x12014)));
evalcond[2]=((((-1.0)*r02*x12011))+(((-1.0)*sj0))+((r01*x12013))+(((-1.0)*r00*x12014)));
evalcond[3]=((((-1.0)*gconst11*r20*x12011))+((r21*x12012))+(((-1.0)*cj1*sj2))+((r22*x12007))+(((-1.0)*cj2*x12010)));
evalcond[4]=((((-1.0)*gconst11*r00*x12011))+((cj0*x12009))+(((-1.0)*cj0*sj2*x12010))+((r01*x12012))+((r02*x12007)));
evalcond[5]=((((-1.0)*gconst11*r10*x12011))+((r11*x12012))+(((-1.0)*sj0*sj2*x12010))+((sj0*x12009))+((r12*x12007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12015=((-1.0)*r11);
CheckValue<IkReal> x12018 = IKatan2WithCheck(IkReal(x12015),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12018.valid){
continue;
}
IkReal x12016=((1.0)*(x12018.value));
IkReal x12017=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12016)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12016)));
IkReal gconst10=(x12015*x12017);
IkReal gconst11=((1.0)*r10*x12017);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12019=gconst10*gconst10;
IkReal x12020=gconst11*gconst11;
IkReal x12021=(gconst10*r21);
IkReal x12022=(cj3*r00);
IkReal x12023=(r00*sj3);
IkReal x12024=((1.0)*gconst11);
IkReal x12025=(gconst10*r20);
IkReal x12026=(r01*sj3);
IkReal x12027=(cj3*gconst11*r01);
IkReal x12028=(r21*x12019);
IkReal x12029=(r20*x12020);
CheckValue<IkReal> x12030 = IKatan2WithCheck(IkReal((((gconst10*r22*x12022))+((r22*x12027)))),IkReal((((x12021*x12027))+(((-1.0)*cj3*r01*x12029))+(((-1.0)*x12022*x12024*x12025))+((x12022*x12028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12030.valid){
continue;
}
CheckValue<IkReal> x12031=IKPowWithIntegerCheck(IKsign((((x12023*x12029))+(((-1.0)*x12021*x12023*x12024))+((x12026*x12028))+((r02*r22*sj3))+(((-1.0)*x12024*x12025*x12026)))),-1);
if(!x12031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12030.value)+(((1.5707963267949)*(x12031.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12032=IKsin(j4);
IkReal x12033=IKcos(j4);
IkReal x12034=((1.0)*sj3);
IkReal x12035=(cj3*gconst10);
IkReal x12036=(sj1*sj2);
IkReal x12037=(cj3*gconst11);
IkReal x12038=(gconst11*sj3);
IkReal x12039=((1.0)*cj2);
IkReal x12040=(gconst10*sj3);
IkReal x12041=((1.0)*cj1*sj2);
IkReal x12042=(sj1*x12039);
IkReal x12043=((1.0)*x12033);
IkReal x12044=(r12*x12032);
IkReal x12045=(r00*x12033);
IkReal x12046=(gconst10*x12032);
IkReal x12047=(r10*x12033);
IkReal x12048=(r20*x12033);
IkReal x12049=((1.0)*gconst11*x12032);
IkReal x12050=((1.0)*cj3*x12032);
IkReal x12051=(x12041+x12042);
evalcond[0]=((((-1.0)*r20*x12049))+((r21*x12046))+(((-1.0)*r22*x12043)));
evalcond[1]=((((-1.0)*r12*x12043))+((r11*x12046))+(((-1.0)*r10*x12049)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x12049))+((r01*x12046))+(((-1.0)*r02*x12043)));
evalcond[3]=(((x12038*x12045))+((r01*x12037))+((r00*x12035))+(((-1.0)*r02*x12032*x12034))+(((-1.0)*gconst10*r01*x12033*x12034)));
evalcond[4]=((((-1.0)*r01*x12035*x12043))+(((-1.0)*r02*x12050))+(((-1.0)*gconst10*r00*x12034))+((x12037*x12045))+(((-1.0)*gconst11*r01*x12034)));
evalcond[5]=((((-1.0)*cj1*x12039))+((x12038*x12048))+((r20*x12035))+x12036+(((-1.0)*r22*x12032*x12034))+((r21*x12037))+(((-1.0)*gconst10*r21*x12033*x12034)));
evalcond[6]=(((x12038*x12047))+(((-1.0)*x12051))+(((-1.0)*x12034*x12044))+((r10*x12035))+((r11*x12037))+(((-1.0)*gconst10*r11*x12033*x12034)));
evalcond[7]=((((-1.0)*x12036))+(((-1.0)*gconst10*r10*x12034))+((x12037*x12047))+((cj1*cj2))+(((-1.0)*gconst11*r11*x12034))+(((-1.0)*r11*x12035*x12043))+(((-1.0)*cj3*x12044)));
evalcond[8]=((((-1.0)*x12051))+(((-1.0)*gconst11*r21*x12034))+(((-1.0)*gconst10*r20*x12034))+(((-1.0)*r21*x12035*x12043))+((x12037*x12048))+(((-1.0)*r22*x12050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12052 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12052.valid){
continue;
}
CheckValue<IkReal> x12053=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12052.value)+(((1.5707963267949)*(x12053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12054=IKsin(j4);
IkReal x12055=IKcos(j4);
IkReal x12056=((1.0)*sj3);
IkReal x12057=(cj3*gconst10);
IkReal x12058=(sj1*sj2);
IkReal x12059=(cj3*gconst11);
IkReal x12060=(gconst11*sj3);
IkReal x12061=((1.0)*cj2);
IkReal x12062=(gconst10*sj3);
IkReal x12063=((1.0)*cj1*sj2);
IkReal x12064=(sj1*x12061);
IkReal x12065=((1.0)*x12055);
IkReal x12066=(r12*x12054);
IkReal x12067=(r00*x12055);
IkReal x12068=(gconst10*x12054);
IkReal x12069=(r10*x12055);
IkReal x12070=(r20*x12055);
IkReal x12071=((1.0)*gconst11*x12054);
IkReal x12072=((1.0)*cj3*x12054);
IkReal x12073=(x12063+x12064);
evalcond[0]=(((r21*x12068))+(((-1.0)*r20*x12071))+(((-1.0)*r22*x12065)));
evalcond[1]=((((-1.0)*r10*x12071))+(((-1.0)*r12*x12065))+((r11*x12068)));
evalcond[2]=((-1.0)+((r01*x12068))+(((-1.0)*r02*x12065))+(((-1.0)*r00*x12071)));
evalcond[3]=(((x12060*x12067))+((r01*x12059))+((r00*x12057))+(((-1.0)*gconst10*r01*x12055*x12056))+(((-1.0)*r02*x12054*x12056)));
evalcond[4]=((((-1.0)*r02*x12072))+(((-1.0)*gconst11*r01*x12056))+(((-1.0)*gconst10*r00*x12056))+((x12059*x12067))+(((-1.0)*r01*x12057*x12065)));
evalcond[5]=(((x12060*x12070))+((r20*x12057))+x12058+(((-1.0)*r22*x12054*x12056))+(((-1.0)*gconst10*r21*x12055*x12056))+(((-1.0)*cj1*x12061))+((r21*x12059)));
evalcond[6]=(((r10*x12057))+((x12060*x12069))+(((-1.0)*x12073))+((r11*x12059))+(((-1.0)*x12056*x12066))+(((-1.0)*gconst10*r11*x12055*x12056)));
evalcond[7]=((((-1.0)*x12058))+(((-1.0)*gconst10*r10*x12056))+(((-1.0)*gconst11*r11*x12056))+((cj1*cj2))+(((-1.0)*r11*x12057*x12065))+((x12059*x12069))+(((-1.0)*cj3*x12066)));
evalcond[8]=((((-1.0)*gconst11*r21*x12056))+(((-1.0)*gconst10*r20*x12056))+((x12059*x12070))+(((-1.0)*x12073))+(((-1.0)*r21*x12057*x12065))+(((-1.0)*r22*x12072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12074=((-1.0)*r11);
CheckValue<IkReal> x12077 = IKatan2WithCheck(IkReal(x12074),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12077.valid){
continue;
}
IkReal x12075=((1.0)*(x12077.value));
IkReal x12076=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12075)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12075)));
IkReal gconst10=(x12074*x12076);
IkReal gconst11=((1.0)*r10*x12076);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12078=gconst10*gconst10;
IkReal x12079=gconst11*gconst11;
IkReal x12080=(gconst10*r21);
IkReal x12081=(cj3*r00);
IkReal x12082=(r00*sj3);
IkReal x12083=((1.0)*gconst11);
IkReal x12084=(gconst10*r20);
IkReal x12085=(r01*sj3);
IkReal x12086=(cj3*gconst11*r01);
IkReal x12087=(r21*x12078);
IkReal x12088=(r20*x12079);
CheckValue<IkReal> x12089=IKPowWithIntegerCheck(IKsign((((x12082*x12088))+(((-1.0)*x12083*x12084*x12085))+(((-1.0)*x12080*x12082*x12083))+((x12085*x12087))+((r02*r22*sj3)))),-1);
if(!x12089.valid){
continue;
}
CheckValue<IkReal> x12090 = IKatan2WithCheck(IkReal((((gconst10*r22*x12081))+((r22*x12086)))),IkReal((((x12081*x12087))+(((-1.0)*x12081*x12083*x12084))+((x12080*x12086))+(((-1.0)*cj3*r01*x12088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12089.value)))+(x12090.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12091=IKsin(j4);
IkReal x12092=IKcos(j4);
IkReal x12093=(sj1*sj2);
IkReal x12094=((1.0)*sj3);
IkReal x12095=(cj3*gconst10);
IkReal x12096=(gconst11*r01);
IkReal x12097=(cj3*gconst11);
IkReal x12098=(gconst11*sj3);
IkReal x12099=((1.0)*cj2);
IkReal x12100=(cj1*sj2);
IkReal x12101=(gconst10*sj3);
IkReal x12102=(cj1*x12099);
IkReal x12103=((1.0)*x12092);
IkReal x12104=(r12*x12091);
IkReal x12105=(r00*x12092);
IkReal x12106=(gconst10*x12091);
IkReal x12107=(r10*x12092);
IkReal x12108=(r20*x12092);
IkReal x12109=((1.0)*gconst11*x12091);
IkReal x12110=((1.0)*cj3*x12091);
evalcond[0]=((((-1.0)*r22*x12103))+(((-1.0)*r20*x12109))+((r21*x12106)));
evalcond[1]=((((-1.0)*r12*x12103))+(((-1.0)*r10*x12109))+((r11*x12106)));
evalcond[2]=((1.0)+(((-1.0)*r00*x12109))+((r01*x12106))+(((-1.0)*r02*x12103)));
evalcond[3]=(((r00*x12095))+(((-1.0)*gconst10*r01*x12092*x12094))+((x12098*x12105))+((cj3*x12096))+(((-1.0)*r02*x12091*x12094)));
evalcond[4]=((((-1.0)*gconst10*r00*x12094))+((x12097*x12105))+(((-1.0)*r02*x12110))+(((-1.0)*x12094*x12096))+(((-1.0)*r01*x12095*x12103)));
evalcond[5]=(((r11*x12097))+((cj2*sj1))+(((-1.0)*gconst10*r11*x12092*x12094))+(((-1.0)*x12094*x12104))+((x12098*x12107))+x12100+((r10*x12095)));
evalcond[6]=((((-1.0)*gconst10*r21*x12092*x12094))+((x12098*x12108))+x12093+((r20*x12095))+(((-1.0)*x12102))+(((-1.0)*r22*x12091*x12094))+((r21*x12097)));
evalcond[7]=((((-1.0)*r11*x12095*x12103))+(((-1.0)*gconst10*r10*x12094))+x12093+((x12097*x12107))+(((-1.0)*gconst11*r11*x12094))+(((-1.0)*x12102))+(((-1.0)*cj3*x12104)));
evalcond[8]=((((-1.0)*r22*x12110))+(((-1.0)*sj1*x12099))+(((-1.0)*r21*x12095*x12103))+(((-1.0)*gconst11*r21*x12094))+((x12097*x12108))+(((-1.0)*gconst10*r20*x12094))+(((-1.0)*x12100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12111=((1.0)*gconst11);
CheckValue<IkReal> x12112=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12111))+(((-1.0)*gconst10*r20)))),-1);
if(!x12112.valid){
continue;
}
CheckValue<IkReal> x12113 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12112.value)))+(x12113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12114=IKsin(j4);
IkReal x12115=IKcos(j4);
IkReal x12116=(sj1*sj2);
IkReal x12117=((1.0)*sj3);
IkReal x12118=(cj3*gconst10);
IkReal x12119=(gconst11*r01);
IkReal x12120=(cj3*gconst11);
IkReal x12121=(gconst11*sj3);
IkReal x12122=((1.0)*cj2);
IkReal x12123=(cj1*sj2);
IkReal x12124=(gconst10*sj3);
IkReal x12125=(cj1*x12122);
IkReal x12126=((1.0)*x12115);
IkReal x12127=(r12*x12114);
IkReal x12128=(r00*x12115);
IkReal x12129=(gconst10*x12114);
IkReal x12130=(r10*x12115);
IkReal x12131=(r20*x12115);
IkReal x12132=((1.0)*gconst11*x12114);
IkReal x12133=((1.0)*cj3*x12114);
evalcond[0]=((((-1.0)*r20*x12132))+((r21*x12129))+(((-1.0)*r22*x12126)));
evalcond[1]=((((-1.0)*r12*x12126))+(((-1.0)*r10*x12132))+((r11*x12129)));
evalcond[2]=((1.0)+((r01*x12129))+(((-1.0)*r02*x12126))+(((-1.0)*r00*x12132)));
evalcond[3]=(((cj3*x12119))+((r00*x12118))+(((-1.0)*gconst10*r01*x12115*x12117))+(((-1.0)*r02*x12114*x12117))+((x12121*x12128)));
evalcond[4]=((((-1.0)*gconst10*r00*x12117))+((x12120*x12128))+(((-1.0)*r02*x12133))+(((-1.0)*r01*x12118*x12126))+(((-1.0)*x12117*x12119)));
evalcond[5]=(((cj2*sj1))+((r10*x12118))+(((-1.0)*gconst10*r11*x12115*x12117))+x12123+(((-1.0)*x12117*x12127))+((x12121*x12130))+((r11*x12120)));
evalcond[6]=((((-1.0)*x12125))+((r20*x12118))+((r21*x12120))+x12116+(((-1.0)*r22*x12114*x12117))+(((-1.0)*gconst10*r21*x12115*x12117))+((x12121*x12131)));
evalcond[7]=((((-1.0)*cj3*x12127))+(((-1.0)*x12125))+((x12120*x12130))+x12116+(((-1.0)*gconst10*r10*x12117))+(((-1.0)*r11*x12118*x12126))+(((-1.0)*gconst11*r11*x12117)));
evalcond[8]=((((-1.0)*sj1*x12122))+(((-1.0)*r21*x12118*x12126))+((x12120*x12131))+(((-1.0)*gconst11*r21*x12117))+(((-1.0)*r22*x12133))+(((-1.0)*gconst10*r20*x12117))+(((-1.0)*x12123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12134=((-1.0)*r11);
IkReal x12135=((-1.0)*r10);
CheckValue<IkReal> x12137 = IKatan2WithCheck(IkReal(x12134),IkReal(x12135),IKFAST_ATAN2_MAGTHRESH);
if(!x12137.valid){
continue;
}
IkReal x12136=((1.0)*(x12137.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12136)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12135);
rxp1_1=(px*r21);
rxp1_2=(px*x12134);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12136)));
IkReal gconst10=x12134;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12138=((-1.0)*r11);
IkReal x12139=((-1.0)*r10);
CheckValue<IkReal> x12141 = IKatan2WithCheck(IkReal(x12138),IkReal(x12139),IKFAST_ATAN2_MAGTHRESH);
if(!x12141.valid){
continue;
}
IkReal x12140=((1.0)*(x12141.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12140)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12139);
rxp1_1=(px*r21);
rxp1_2=(px*x12138);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12140)));
IkReal gconst10=x12138;
IkReal gconst11=((1.0)*r10);
IkReal x12142=((1.0)*sj3);
j4eval[0]=-1.0;
j4eval[1]=(((r10*r20*x12142))+((r11*r21*x12142)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12143=((-1.0)*r11);
IkReal x12144=((-1.0)*r10);
CheckValue<IkReal> x12146 = IKatan2WithCheck(IkReal(x12143),IkReal(x12144),IKFAST_ATAN2_MAGTHRESH);
if(!x12146.valid){
continue;
}
IkReal x12145=((1.0)*(x12146.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12145)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12144);
rxp1_1=(px*r21);
rxp1_2=(px*x12143);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12145)));
IkReal gconst10=x12143;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12147=((-1.0)*r11);
IkReal x12148=((-1.0)*r10);
CheckValue<IkReal> x12150 = IKatan2WithCheck(IkReal(x12147),IkReal(x12148),IKFAST_ATAN2_MAGTHRESH);
if(!x12150.valid){
continue;
}
IkReal x12149=((1.0)*(x12150.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12149)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12148);
rxp1_1=(px*r21);
rxp1_2=(px*x12147);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12149)));
IkReal gconst10=x12147;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12151=((-1.0)*r11);
IkReal x12152=((-1.0)*r10);
CheckValue<IkReal> x12154 = IKatan2WithCheck(IkReal(x12151),IkReal(x12152),IKFAST_ATAN2_MAGTHRESH);
if(!x12154.valid){
continue;
}
IkReal x12153=((1.0)*(x12154.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12153)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12152);
rxp1_1=(px*r21);
rxp1_2=(px*x12151);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12153)));
IkReal gconst10=x12151;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12155=((-1.0)*r11);
IkReal x12156=((-1.0)*r10);
CheckValue<IkReal> x12158 = IKatan2WithCheck(IkReal(x12155),IkReal(x12156),IKFAST_ATAN2_MAGTHRESH);
if(!x12158.valid){
continue;
}
IkReal x12157=((1.0)*(x12158.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12157)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12156);
rxp1_1=(px*r21);
rxp1_2=(px*x12155);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12157)));
IkReal gconst10=x12155;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12161=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x12161.valid){
continue;
}
IkReal x12159=x12161.value;
IkReal x12160=(sj0*x12159);
cj4array[0]=(((cj1*sj2*x12160))+((cj2*sj1*x12160)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12162=IKsin(j4);
IkReal x12163=IKcos(j4);
IkReal x12164=(gconst10*r21);
IkReal x12165=(gconst11*r20);
IkReal x12166=((1.0)*x12162);
IkReal x12167=((1.0)*x12163);
evalcond[0]=((-1.0)*r02*x12162);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12167)));
evalcond[2]=((((-1.0)*x12165*x12166))+((x12162*x12164)));
evalcond[3]=((((-1.0)*gconst11*r10*x12166))+((gconst10*r11*x12162)));
evalcond[4]=((((-1.0)*x12164*x12167))+((x12163*x12165))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12169=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12169.valid){
continue;
}
IkReal x12168=x12169.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12168))+((cj1*cj2*x12168)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12170=IKsin(j4);
IkReal x12171=IKcos(j4);
IkReal x12172=((1.0)*sj0);
IkReal x12173=(gconst10*x12170);
IkReal x12174=((1.0)*x12171);
IkReal x12175=((1.0)*gconst11*x12170);
evalcond[0]=((-1.0)*r02*x12170);
evalcond[1]=((((-1.0)*x12172))+(((-1.0)*r02*x12174)));
evalcond[2]=(((r21*x12173))+(((-1.0)*r20*x12175)));
evalcond[3]=((((-1.0)*r10*x12175))+((r11*x12173)));
evalcond[4]=(((gconst11*r10*x12171))+(((-1.0)*gconst10*r11*x12174))+(((-1.0)*cj1*sj2*x12172))+(((-1.0)*cj2*sj1*x12172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12176=IKPowWithIntegerCheck(r02,-1);
if(!x12176.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12176.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12177=IKsin(j4);
IkReal x12178=IKcos(j4);
IkReal x12179=(gconst10*r21);
IkReal x12180=((1.0)*sj0);
IkReal x12181=(gconst10*r11);
IkReal x12182=(gconst11*x12178);
IkReal x12183=((1.0)*x12178);
IkReal x12184=((1.0)*gconst11*x12177);
evalcond[0]=((-1.0)*r02*x12177);
evalcond[1]=(((x12177*x12179))+(((-1.0)*r20*x12184)));
evalcond[2]=(((x12177*x12181))+(((-1.0)*r10*x12184)));
evalcond[3]=((((-1.0)*x12179*x12183))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x12182)));
evalcond[4]=((((-1.0)*cj1*sj2*x12180))+(((-1.0)*cj2*sj1*x12180))+((r10*x12182))+(((-1.0)*x12181*x12183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12185=((-1.0)*r11);
IkReal x12186=((-1.0)*r10);
CheckValue<IkReal> x12188 = IKatan2WithCheck(IkReal(x12185),IkReal(x12186),IKFAST_ATAN2_MAGTHRESH);
if(!x12188.valid){
continue;
}
IkReal x12187=((1.0)*(x12188.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12187)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12186);
rxp1_1=(px*r21);
rxp1_2=(px*x12185);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12187)));
IkReal gconst10=x12185;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12189=((-1.0)*r11);
IkReal x12190=((-1.0)*r10);
CheckValue<IkReal> x12192 = IKatan2WithCheck(IkReal(x12189),IkReal(x12190),IKFAST_ATAN2_MAGTHRESH);
if(!x12192.valid){
continue;
}
IkReal x12191=((1.0)*(x12192.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12191)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12190);
rxp1_1=(px*r21);
rxp1_2=(px*x12189);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12191)));
IkReal gconst10=x12189;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12193=((-1.0)*r11);
IkReal x12194=((-1.0)*r10);
CheckValue<IkReal> x12196 = IKatan2WithCheck(IkReal(x12193),IkReal(x12194),IKFAST_ATAN2_MAGTHRESH);
if(!x12196.valid){
continue;
}
IkReal x12195=((1.0)*(x12196.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12195)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12194);
rxp1_1=(px*r21);
rxp1_2=(px*x12193);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12195)));
IkReal gconst10=x12193;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12199=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12199.valid){
continue;
}
IkReal x12197=x12199.value;
IkReal x12198=(sj0*x12197);
cj4array[0]=(((cj2*sj1*x12198))+((cj1*sj2*x12198)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12200=IKsin(j4);
IkReal x12201=IKcos(j4);
IkReal x12202=(gconst10*r21);
IkReal x12203=((1.0)*x12201);
IkReal x12204=((1.0)*gconst11*x12200);
evalcond[0]=(r02*x12200);
evalcond[1]=((((-1.0)*r02*x12203))+(((-1.0)*sj0)));
evalcond[2]=(((x12200*x12202))+(((-1.0)*r20*x12204)));
evalcond[3]=((((-1.0)*r10*x12204))+((gconst10*r11*x12200)));
evalcond[4]=(((x12201*x12202))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12206=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12206.valid){
continue;
}
IkReal x12205=x12206.value;
cj4array[0]=(((cj1*cj2*x12205))+(((-1.0)*sj1*sj2*x12205)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12207=IKsin(j4);
IkReal x12208=IKcos(j4);
IkReal x12209=((1.0)*sj0);
IkReal x12210=(gconst10*x12207);
IkReal x12211=((1.0)*x12208);
IkReal x12212=((1.0)*gconst11*x12207);
evalcond[0]=(r02*x12207);
evalcond[1]=((((-1.0)*r02*x12211))+(((-1.0)*x12209)));
evalcond[2]=(((r21*x12210))+(((-1.0)*r20*x12212)));
evalcond[3]=((((-1.0)*r10*x12212))+((r11*x12210)));
evalcond[4]=((((-1.0)*gconst11*r10*x12211))+(((-1.0)*cj2*sj1*x12209))+(((-1.0)*cj1*sj2*x12209))+((gconst10*r11*x12208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12213=IKPowWithIntegerCheck(r02,-1);
if(!x12213.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12213.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12214=IKsin(j4);
IkReal x12215=IKcos(j4);
IkReal x12216=(gconst10*r21);
IkReal x12217=((1.0)*cj1);
IkReal x12218=(gconst10*r11);
IkReal x12219=((1.0)*gconst11*x12214);
IkReal x12220=((1.0)*gconst11*x12215);
evalcond[0]=(r02*x12214);
evalcond[1]=(((x12214*x12216))+(((-1.0)*r20*x12219)));
evalcond[2]=(((x12214*x12218))+(((-1.0)*r10*x12219)));
evalcond[3]=(((x12215*x12216))+((sj1*sj2))+(((-1.0)*cj2*x12217))+(((-1.0)*r20*x12220)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x12215*x12218))+(((-1.0)*sj0*sj2*x12217))+(((-1.0)*r10*x12220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12222=IKPowWithIntegerCheck(r02,-1);
if(!x12222.valid){
continue;
}
IkReal x12221=x12222.value;
CheckValue<IkReal> x12223=IKPowWithIntegerCheck(cj3,-1);
if(!x12223.valid){
continue;
}
if( IKabs((x12221*(x12223.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12221)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12221*(x12223.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12221))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12221*(x12223.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12221));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12224=IKsin(j4);
IkReal x12225=IKcos(j4);
IkReal x12226=(gconst10*r10);
IkReal x12227=(cj1*cj2);
IkReal x12228=(gconst11*r20);
IkReal x12229=(sj1*sj2);
IkReal x12230=(cj3*gconst11);
IkReal x12231=(gconst11*r10);
IkReal x12232=((1.0)*sj3);
IkReal x12233=(gconst10*r20);
IkReal x12234=((1.0)*sj0);
IkReal x12235=((1.0)*x12224);
IkReal x12236=(sj3*x12225);
IkReal x12237=(gconst10*x12224);
IkReal x12238=((1.0)*cj2*sj1);
IkReal x12239=((1.0)*cj1*sj2);
IkReal x12240=(cj3*x12225);
IkReal x12241=((1.0)*gconst10*r11);
IkReal x12242=((1.0)*gconst10*r21);
evalcond[0]=((((-1.0)*r02*x12225))+(((-1.0)*x12234)));
evalcond[1]=(((r21*x12237))+(((-1.0)*x12228*x12235)));
evalcond[2]=(cj0+((r11*x12237))+(((-1.0)*x12231*x12235)));
evalcond[3]=((((-1.0)*cj3*r02*x12235))+((cj0*x12227))+(((-1.0)*cj0*x12229)));
evalcond[4]=((((-1.0)*cj0*x12239))+(((-1.0)*cj0*x12238))+(((-1.0)*r02*x12224*x12232)));
evalcond[5]=(((cj3*x12233))+x12229+((x12228*x12236))+(((-1.0)*x12227))+((r21*x12230))+(((-1.0)*gconst10*r21*x12225*x12232)));
evalcond[6]=(((x12228*x12240))+(((-1.0)*x12238))+(((-1.0)*x12239))+(((-1.0)*x12232*x12233))+(((-1.0)*gconst11*r21*x12232))+(((-1.0)*x12240*x12242)));
evalcond[7]=((((-1.0)*cj1*sj2*x12234))+((x12231*x12236))+((r11*x12230))+(((-1.0)*cj2*sj1*x12234))+((cj3*x12226))+(((-1.0)*gconst10*r11*x12225*x12232)));
evalcond[8]=((((-1.0)*gconst11*r11*x12232))+(((-1.0)*x12229*x12234))+((sj0*x12227))+((r10*x12225*x12230))+(((-1.0)*x12226*x12232))+(((-1.0)*x12240*x12241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12243=((1.0)*r21);
CheckValue<IkReal> x12244=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12244.valid){
continue;
}
CheckValue<IkReal> x12245=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x12243))+((gconst11*r20*sj3))),-1);
if(!x12245.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12244.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12245.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj3*gconst11*x12243))+(((-1.0)*cj3*gconst10*r20))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12244.value)))+IKsqr(((x12245.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj3*gconst11*x12243))+(((-1.0)*cj3*gconst10*r20))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12244.value)), ((x12245.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj3*gconst11*x12243))+(((-1.0)*cj3*gconst10*r20))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12246=IKsin(j4);
IkReal x12247=IKcos(j4);
IkReal x12248=(gconst10*r10);
IkReal x12249=(cj1*cj2);
IkReal x12250=(gconst11*r20);
IkReal x12251=(sj1*sj2);
IkReal x12252=(cj3*gconst11);
IkReal x12253=(gconst11*r10);
IkReal x12254=((1.0)*sj3);
IkReal x12255=(gconst10*r20);
IkReal x12256=((1.0)*sj0);
IkReal x12257=((1.0)*x12246);
IkReal x12258=(sj3*x12247);
IkReal x12259=(gconst10*x12246);
IkReal x12260=((1.0)*cj2*sj1);
IkReal x12261=((1.0)*cj1*sj2);
IkReal x12262=(cj3*x12247);
IkReal x12263=((1.0)*gconst10*r11);
IkReal x12264=((1.0)*gconst10*r21);
evalcond[0]=((((-1.0)*r02*x12247))+(((-1.0)*x12256)));
evalcond[1]=((((-1.0)*x12250*x12257))+((r21*x12259)));
evalcond[2]=(cj0+((r11*x12259))+(((-1.0)*x12253*x12257)));
evalcond[3]=((((-1.0)*cj3*r02*x12257))+(((-1.0)*cj0*x12251))+((cj0*x12249)));
evalcond[4]=((((-1.0)*cj0*x12260))+(((-1.0)*cj0*x12261))+(((-1.0)*r02*x12246*x12254)));
evalcond[5]=(((cj3*x12255))+x12251+((x12250*x12258))+(((-1.0)*gconst10*r21*x12247*x12254))+(((-1.0)*x12249))+((r21*x12252)));
evalcond[6]=((((-1.0)*x12254*x12255))+((x12250*x12262))+(((-1.0)*gconst11*r21*x12254))+(((-1.0)*x12262*x12264))+(((-1.0)*x12261))+(((-1.0)*x12260)));
evalcond[7]=(((x12253*x12258))+((r11*x12252))+(((-1.0)*cj2*sj1*x12256))+(((-1.0)*gconst10*r11*x12247*x12254))+(((-1.0)*cj1*sj2*x12256))+((cj3*x12248)));
evalcond[8]=((((-1.0)*x12251*x12256))+(((-1.0)*gconst11*r11*x12254))+((sj0*x12249))+(((-1.0)*x12248*x12254))+((r10*x12247*x12252))+(((-1.0)*x12262*x12263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12265=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12265.valid){
continue;
}
CheckValue<IkReal> x12266=IKPowWithIntegerCheck(r02,-1);
if(!x12266.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12265.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12266.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12265.value)))+IKsqr(((-1.0)*sj0*(x12266.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12265.value)), ((-1.0)*sj0*(x12266.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12267=IKsin(j4);
IkReal x12268=IKcos(j4);
IkReal x12269=(gconst10*r10);
IkReal x12270=(cj1*cj2);
IkReal x12271=(gconst11*r20);
IkReal x12272=(sj1*sj2);
IkReal x12273=(cj3*gconst11);
IkReal x12274=(gconst11*r10);
IkReal x12275=((1.0)*sj3);
IkReal x12276=(gconst10*r20);
IkReal x12277=((1.0)*sj0);
IkReal x12278=((1.0)*x12267);
IkReal x12279=(sj3*x12268);
IkReal x12280=(gconst10*x12267);
IkReal x12281=((1.0)*cj2*sj1);
IkReal x12282=((1.0)*cj1*sj2);
IkReal x12283=(cj3*x12268);
IkReal x12284=((1.0)*gconst10*r11);
IkReal x12285=((1.0)*gconst10*r21);
evalcond[0]=((((-1.0)*x12277))+(((-1.0)*r02*x12268)));
evalcond[1]=((((-1.0)*x12271*x12278))+((r21*x12280)));
evalcond[2]=(cj0+((r11*x12280))+(((-1.0)*x12274*x12278)));
evalcond[3]=((((-1.0)*cj3*r02*x12278))+(((-1.0)*cj0*x12272))+((cj0*x12270)));
evalcond[4]=((((-1.0)*r02*x12267*x12275))+(((-1.0)*cj0*x12282))+(((-1.0)*cj0*x12281)));
evalcond[5]=((((-1.0)*x12270))+((r21*x12273))+x12272+((cj3*x12276))+(((-1.0)*gconst10*r21*x12268*x12275))+((x12271*x12279)));
evalcond[6]=(((x12271*x12283))+(((-1.0)*gconst11*r21*x12275))+(((-1.0)*x12275*x12276))+(((-1.0)*x12281))+(((-1.0)*x12282))+(((-1.0)*x12283*x12285)));
evalcond[7]=((((-1.0)*cj2*sj1*x12277))+((cj3*x12269))+(((-1.0)*gconst10*r11*x12268*x12275))+(((-1.0)*cj1*sj2*x12277))+((r11*x12273))+((x12274*x12279)));
evalcond[8]=((((-1.0)*x12269*x12275))+(((-1.0)*x12272*x12277))+((r10*x12268*x12273))+(((-1.0)*gconst11*r11*x12275))+((sj0*x12270))+(((-1.0)*x12283*x12284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12286=((-1.0)*r11);
CheckValue<IkReal> x12289 = IKatan2WithCheck(IkReal(x12286),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12289.valid){
continue;
}
IkReal x12287=((1.0)*(x12289.value));
IkReal x12288=x11550;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12287)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12287)));
IkReal gconst10=(x12286*x12288);
IkReal gconst11=((1.0)*r10*x12288);
IkReal x12290=r12*r12;
IkReal x12291=((1.0)*sj0);
IkReal x12292=(cj0*r02);
IkReal x12293=x11550;
j4eval[0]=((IKabs(((((-1.0)*x12292))+(((-1.0)*r12*x12291)))))+(IKabs(((((-1.0)*x12291*x12293))+((r12*x12292*x12293))+((sj0*x12290*x12293))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12294=(cj1*sj2);
IkReal x12295=(cj2*sj1);
IkReal x12296=(gconst10*r20);
IkReal x12297=(cj3*gconst11);
IkReal x12298=(r12*sj3);
IkReal x12299=(gconst11*r21);
IkReal x12300=((1.0)*r20);
IkReal x12301=(cj3*gconst10*r21);
CheckValue<IkReal> x12302=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11*x12301))+((r11*x12296*x12297))+((gconst10*r10*r21*x12297))+(((-1.0)*gconst11*r10*x12297*x12300))),-1);
if(!x12302.valid){
continue;
}
CheckValue<IkReal> x12303=IKPowWithIntegerCheck((((r20*x12297))+(((-1.0)*x12301))),-1);
if(!x12303.valid){
continue;
}
if( IKabs(((x12302.value)*((((r12*x12295))+((r12*x12294))+((cj0*x12301))+(((-1.0)*cj0*x12297*x12300))+((x12298*x12299))+((x12296*x12298)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12303.value)*((x12295+x12294+((sj3*x12299))+((sj3*x12296)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12302.value)*((((r12*x12295))+((r12*x12294))+((cj0*x12301))+(((-1.0)*cj0*x12297*x12300))+((x12298*x12299))+((x12296*x12298))))))+IKsqr(((x12303.value)*((x12295+x12294+((sj3*x12299))+((sj3*x12296))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12302.value)*((((r12*x12295))+((r12*x12294))+((cj0*x12301))+(((-1.0)*cj0*x12297*x12300))+((x12298*x12299))+((x12296*x12298))))), ((x12303.value)*((x12295+x12294+((sj3*x12299))+((sj3*x12296))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12304=IKsin(j4);
IkReal x12305=IKcos(j4);
IkReal x12306=((1.0)*sj3);
IkReal x12307=(cj3*gconst10);
IkReal x12308=(cj1*cj2);
IkReal x12309=(gconst11*r20);
IkReal x12310=(sj1*sj2);
IkReal x12311=(gconst11*r00);
IkReal x12312=(cj3*gconst11);
IkReal x12313=(gconst11*r10);
IkReal x12314=((1.0)*sj0);
IkReal x12315=(r12*x12304);
IkReal x12316=((1.0)*x12304);
IkReal x12317=(sj3*x12305);
IkReal x12318=(gconst10*x12304);
IkReal x12319=((1.0)*x12305);
IkReal x12320=((1.0)*cj2*sj1);
IkReal x12321=((1.0)*cj1*sj2);
IkReal x12322=(cj3*x12305);
IkReal x12323=(gconst10*x12305);
evalcond[0]=((((-1.0)*x12309*x12316))+((r21*x12318)));
evalcond[1]=(cj0+((r11*x12318))+(((-1.0)*r12*x12319))+(((-1.0)*x12313*x12316)));
evalcond[2]=((((-1.0)*x12311*x12316))+(((-1.0)*r02*x12319))+((r01*x12318))+(((-1.0)*x12314)));
evalcond[3]=((((-1.0)*r21*x12306*x12323))+(((-1.0)*x12308))+x12310+((r20*x12307))+((x12309*x12317))+((r21*x12312)));
evalcond[4]=((((-1.0)*r21*x12307*x12319))+(((-1.0)*x12320))+(((-1.0)*x12321))+(((-1.0)*gconst11*r21*x12306))+(((-1.0)*gconst10*r20*x12306))+((x12309*x12322)));
evalcond[5]=((((-1.0)*r01*x12306*x12323))+(((-1.0)*cj0*x12321))+(((-1.0)*cj0*x12320))+((x12311*x12317))+((r00*x12307))+(((-1.0)*r02*x12304*x12306))+((r01*x12312)));
evalcond[6]=((((-1.0)*cj2*sj1*x12314))+(((-1.0)*x12306*x12315))+((r10*x12307))+((r11*x12312))+(((-1.0)*r11*x12306*x12323))+((x12313*x12317))+(((-1.0)*cj1*sj2*x12314)));
evalcond[7]=(((x12311*x12322))+(((-1.0)*r01*x12307*x12319))+(((-1.0)*gconst10*r00*x12306))+(((-1.0)*gconst11*r01*x12306))+((cj0*x12308))+(((-1.0)*cj3*r02*x12316))+(((-1.0)*cj0*x12310)));
evalcond[8]=((((-1.0)*r11*x12307*x12319))+(((-1.0)*gconst10*r10*x12306))+(((-1.0)*x12310*x12314))+(((-1.0)*gconst11*r11*x12306))+((sj0*x12308))+((r10*x12305*x12312))+(((-1.0)*cj3*x12315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12324=((1.0)*sj0);
IkReal x12325=((1.0)*gconst10);
CheckValue<IkReal> x12326 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12324)))),IkReal(((((-1.0)*cj0*r01*x12325))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*gconst10*r11*x12324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12326.valid){
continue;
}
CheckValue<IkReal> x12327=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12325))+(((-1.0)*gconst11*r21)))),-1);
if(!x12327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12326.value)+(((1.5707963267949)*(x12327.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12328=IKsin(j4);
IkReal x12329=IKcos(j4);
IkReal x12330=((1.0)*sj3);
IkReal x12331=(cj3*gconst10);
IkReal x12332=(cj1*cj2);
IkReal x12333=(gconst11*r20);
IkReal x12334=(sj1*sj2);
IkReal x12335=(gconst11*r00);
IkReal x12336=(cj3*gconst11);
IkReal x12337=(gconst11*r10);
IkReal x12338=((1.0)*sj0);
IkReal x12339=(r12*x12328);
IkReal x12340=((1.0)*x12328);
IkReal x12341=(sj3*x12329);
IkReal x12342=(gconst10*x12328);
IkReal x12343=((1.0)*x12329);
IkReal x12344=((1.0)*cj2*sj1);
IkReal x12345=((1.0)*cj1*sj2);
IkReal x12346=(cj3*x12329);
IkReal x12347=(gconst10*x12329);
evalcond[0]=(((r21*x12342))+(((-1.0)*x12333*x12340)));
evalcond[1]=((((-1.0)*x12337*x12340))+cj0+(((-1.0)*r12*x12343))+((r11*x12342)));
evalcond[2]=((((-1.0)*r02*x12343))+(((-1.0)*x12335*x12340))+(((-1.0)*x12338))+((r01*x12342)));
evalcond[3]=(((x12333*x12341))+((r20*x12331))+x12334+((r21*x12336))+(((-1.0)*x12332))+(((-1.0)*r21*x12330*x12347)));
evalcond[4]=(((x12333*x12346))+(((-1.0)*gconst10*r20*x12330))+(((-1.0)*r21*x12331*x12343))+(((-1.0)*x12344))+(((-1.0)*x12345))+(((-1.0)*gconst11*r21*x12330)));
evalcond[5]=((((-1.0)*r02*x12328*x12330))+((x12335*x12341))+((r01*x12336))+((r00*x12331))+(((-1.0)*cj0*x12345))+(((-1.0)*cj0*x12344))+(((-1.0)*r01*x12330*x12347)));
evalcond[6]=(((x12337*x12341))+(((-1.0)*cj1*sj2*x12338))+(((-1.0)*cj2*sj1*x12338))+(((-1.0)*x12330*x12339))+(((-1.0)*r11*x12330*x12347))+((r10*x12331))+((r11*x12336)));
evalcond[7]=(((cj0*x12332))+(((-1.0)*gconst11*r01*x12330))+(((-1.0)*r01*x12331*x12343))+((x12335*x12346))+(((-1.0)*cj0*x12334))+(((-1.0)*gconst10*r00*x12330))+(((-1.0)*cj3*r02*x12340)));
evalcond[8]=((((-1.0)*gconst10*r10*x12330))+(((-1.0)*x12334*x12338))+((r10*x12329*x12336))+(((-1.0)*gconst11*r11*x12330))+(((-1.0)*cj3*x12339))+(((-1.0)*r11*x12331*x12343))+((sj0*x12332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12348=gconst10*gconst10;
IkReal x12349=r21*r21;
IkReal x12350=gconst11*gconst11;
IkReal x12351=r20*r20;
IkReal x12352=((1.0)*cj3);
IkReal x12353=(gconst10*gconst11);
IkReal x12354=(sj1*sj2);
IkReal x12355=(cj1*cj2);
IkReal x12356=(gconst10*r21);
IkReal x12357=(r20*r21);
IkReal x12358=(cj3*r22);
IkReal x12359=(gconst11*r20);
CheckValue<IkReal> x12360 = IKatan2WithCheck(IkReal((((gconst11*r21*x12358))+((r22*x12354))+(((-1.0)*r22*x12355))+((gconst10*r20*x12358)))),IkReal((((x12355*x12359))+((cj3*x12348*x12357))+((x12354*x12356))+((cj3*x12349*x12353))+(((-1.0)*x12354*x12359))+(((-1.0)*x12351*x12352*x12353))+(((-1.0)*x12355*x12356))+(((-1.0)*x12350*x12352*x12357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12360.valid){
continue;
}
CheckValue<IkReal> x12361=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x12353*x12357))+((sj3*x12350*x12351))+((sj3*x12348*x12349)))),-1);
if(!x12361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12360.value)+(((1.5707963267949)*(x12361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12362=IKsin(j4);
IkReal x12363=IKcos(j4);
IkReal x12364=((1.0)*sj3);
IkReal x12365=(cj3*gconst10);
IkReal x12366=(cj1*cj2);
IkReal x12367=(gconst11*r20);
IkReal x12368=(sj1*sj2);
IkReal x12369=(gconst11*r00);
IkReal x12370=(cj3*gconst11);
IkReal x12371=(gconst11*r10);
IkReal x12372=((1.0)*sj0);
IkReal x12373=(gconst10*sj3);
IkReal x12374=((1.0)*x12363);
IkReal x12375=(r12*x12362);
IkReal x12376=((1.0)*x12362);
IkReal x12377=(sj3*x12363);
IkReal x12378=(gconst10*x12362);
IkReal x12379=((1.0)*cj2*sj1);
IkReal x12380=((1.0)*cj1*sj2);
IkReal x12381=(cj3*x12363);
evalcond[0]=((((-1.0)*r22*x12374))+((r21*x12378))+(((-1.0)*x12367*x12376)));
evalcond[1]=(((r11*x12378))+cj0+(((-1.0)*r12*x12374))+(((-1.0)*x12371*x12376)));
evalcond[2]=((((-1.0)*x12372))+(((-1.0)*x12369*x12376))+(((-1.0)*r02*x12374))+((r01*x12378)));
evalcond[3]=((((-1.0)*gconst10*r21*x12363*x12364))+x12368+((x12367*x12377))+((r21*x12370))+(((-1.0)*r22*x12362*x12364))+(((-1.0)*x12366))+((r20*x12365)));
evalcond[4]=((((-1.0)*x12379))+(((-1.0)*r21*x12365*x12374))+(((-1.0)*cj3*r22*x12376))+((x12367*x12381))+(((-1.0)*x12380))+(((-1.0)*gconst11*r21*x12364))+(((-1.0)*gconst10*r20*x12364)));
evalcond[5]=((((-1.0)*gconst10*r01*x12363*x12364))+(((-1.0)*cj0*x12380))+((x12369*x12377))+(((-1.0)*cj0*x12379))+(((-1.0)*r02*x12362*x12364))+((r00*x12365))+((r01*x12370)));
evalcond[6]=(((r11*x12370))+(((-1.0)*cj2*sj1*x12372))+((r10*x12365))+(((-1.0)*gconst10*r11*x12363*x12364))+((x12371*x12377))+(((-1.0)*x12364*x12375))+(((-1.0)*cj1*sj2*x12372)));
evalcond[7]=((((-1.0)*cj0*x12368))+((x12369*x12381))+(((-1.0)*cj3*r02*x12376))+(((-1.0)*r01*x12365*x12374))+(((-1.0)*gconst10*r00*x12364))+((cj0*x12366))+(((-1.0)*gconst11*r01*x12364)));
evalcond[8]=((((-1.0)*x12368*x12372))+(((-1.0)*gconst11*r11*x12364))+(((-1.0)*cj3*x12375))+(((-1.0)*gconst10*r10*x12364))+(((-1.0)*r11*x12365*x12374))+((r10*x12363*x12370))+((sj0*x12366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12382=((1.0)*sj0);
IkReal x12383=((1.0)*gconst10);
CheckValue<IkReal> x12384=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12383))+(((-1.0)*gconst11*r21)))),-1);
if(!x12384.valid){
continue;
}
CheckValue<IkReal> x12385 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12382)))),IkReal(((((-1.0)*gconst10*r11*x12382))+(((-1.0)*cj0*r01*x12383))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12384.value)))+(x12385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12386=IKsin(j4);
IkReal x12387=IKcos(j4);
IkReal x12388=((1.0)*sj3);
IkReal x12389=(cj3*gconst10);
IkReal x12390=(cj1*cj2);
IkReal x12391=(gconst11*r20);
IkReal x12392=(sj1*sj2);
IkReal x12393=(gconst11*r00);
IkReal x12394=(cj3*gconst11);
IkReal x12395=(gconst11*r10);
IkReal x12396=((1.0)*sj0);
IkReal x12397=(gconst10*sj3);
IkReal x12398=((1.0)*x12387);
IkReal x12399=(r12*x12386);
IkReal x12400=((1.0)*x12386);
IkReal x12401=(sj3*x12387);
IkReal x12402=(gconst10*x12386);
IkReal x12403=((1.0)*cj2*sj1);
IkReal x12404=((1.0)*cj1*sj2);
IkReal x12405=(cj3*x12387);
evalcond[0]=((((-1.0)*x12391*x12400))+(((-1.0)*r22*x12398))+((r21*x12402)));
evalcond[1]=((((-1.0)*x12395*x12400))+(((-1.0)*r12*x12398))+cj0+((r11*x12402)));
evalcond[2]=((((-1.0)*r02*x12398))+(((-1.0)*x12393*x12400))+(((-1.0)*x12396))+((r01*x12402)));
evalcond[3]=((((-1.0)*r22*x12386*x12388))+x12392+((x12391*x12401))+((r20*x12389))+((r21*x12394))+(((-1.0)*gconst10*r21*x12387*x12388))+(((-1.0)*x12390)));
evalcond[4]=((((-1.0)*x12404))+(((-1.0)*x12403))+(((-1.0)*cj3*r22*x12400))+(((-1.0)*gconst10*r20*x12388))+(((-1.0)*gconst11*r21*x12388))+((x12391*x12405))+(((-1.0)*r21*x12389*x12398)));
evalcond[5]=(((r00*x12389))+((r01*x12394))+(((-1.0)*r02*x12386*x12388))+((x12393*x12401))+(((-1.0)*gconst10*r01*x12387*x12388))+(((-1.0)*cj0*x12403))+(((-1.0)*cj0*x12404)));
evalcond[6]=((((-1.0)*gconst10*r11*x12387*x12388))+((r11*x12394))+(((-1.0)*cj1*sj2*x12396))+((r10*x12389))+(((-1.0)*cj2*sj1*x12396))+((x12395*x12401))+(((-1.0)*x12388*x12399)));
evalcond[7]=((((-1.0)*gconst11*r01*x12388))+(((-1.0)*cj0*x12392))+((x12393*x12405))+(((-1.0)*gconst10*r00*x12388))+((cj0*x12390))+(((-1.0)*r01*x12389*x12398))+(((-1.0)*cj3*r02*x12400)));
evalcond[8]=((((-1.0)*gconst11*r11*x12388))+(((-1.0)*r11*x12389*x12398))+(((-1.0)*gconst10*r10*x12388))+((r10*x12387*x12394))+(((-1.0)*cj3*x12399))+((sj0*x12390))+(((-1.0)*x12392*x12396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12406=((1.0)*gconst11);
CheckValue<IkReal> x12407=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12406)))),-1);
if(!x12407.valid){
continue;
}
CheckValue<IkReal> x12408 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12406))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12407.value)))+(x12408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12409=IKsin(j4);
IkReal x12410=IKcos(j4);
IkReal x12411=((1.0)*sj3);
IkReal x12412=(cj3*gconst10);
IkReal x12413=(cj1*cj2);
IkReal x12414=(gconst11*r20);
IkReal x12415=(sj1*sj2);
IkReal x12416=(gconst11*r00);
IkReal x12417=(cj3*gconst11);
IkReal x12418=(gconst11*r10);
IkReal x12419=((1.0)*sj0);
IkReal x12420=(gconst10*sj3);
IkReal x12421=((1.0)*x12410);
IkReal x12422=(r12*x12409);
IkReal x12423=((1.0)*x12409);
IkReal x12424=(sj3*x12410);
IkReal x12425=(gconst10*x12409);
IkReal x12426=((1.0)*cj2*sj1);
IkReal x12427=((1.0)*cj1*sj2);
IkReal x12428=(cj3*x12410);
evalcond[0]=((((-1.0)*x12414*x12423))+((r21*x12425))+(((-1.0)*r22*x12421)));
evalcond[1]=((((-1.0)*x12418*x12423))+cj0+((r11*x12425))+(((-1.0)*r12*x12421)));
evalcond[2]=((((-1.0)*x12419))+(((-1.0)*x12416*x12423))+((r01*x12425))+(((-1.0)*r02*x12421)));
evalcond[3]=(((r21*x12417))+((r20*x12412))+(((-1.0)*gconst10*r21*x12410*x12411))+(((-1.0)*x12413))+(((-1.0)*r22*x12409*x12411))+x12415+((x12414*x12424)));
evalcond[4]=((((-1.0)*cj3*r22*x12423))+(((-1.0)*gconst10*r20*x12411))+(((-1.0)*x12427))+(((-1.0)*x12426))+(((-1.0)*r21*x12412*x12421))+(((-1.0)*gconst11*r21*x12411))+((x12414*x12428)));
evalcond[5]=((((-1.0)*cj0*x12426))+(((-1.0)*cj0*x12427))+(((-1.0)*r02*x12409*x12411))+((r00*x12412))+((r01*x12417))+((x12416*x12424))+(((-1.0)*gconst10*r01*x12410*x12411)));
evalcond[6]=(((r10*x12412))+(((-1.0)*cj2*sj1*x12419))+((r11*x12417))+((x12418*x12424))+(((-1.0)*x12411*x12422))+(((-1.0)*cj1*sj2*x12419))+(((-1.0)*gconst10*r11*x12410*x12411)));
evalcond[7]=((((-1.0)*gconst10*r00*x12411))+(((-1.0)*gconst11*r01*x12411))+(((-1.0)*cj3*r02*x12423))+((cj0*x12413))+(((-1.0)*cj0*x12415))+((x12416*x12428))+(((-1.0)*r01*x12412*x12421)));
evalcond[8]=((((-1.0)*gconst11*r11*x12411))+(((-1.0)*cj3*x12422))+(((-1.0)*r11*x12412*x12421))+(((-1.0)*x12415*x12419))+((r10*x12410*x12417))+(((-1.0)*gconst10*r10*x12411))+((sj0*x12413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12429=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12429;
j4eval[1]=IKsign(x12429);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12430=((1.0)*cj5);
IkReal x12431=((((-1.0)*r01*x12430))+(((-1.0)*r00*sj5)));
j4eval[0]=x12431;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12430))))));
j4eval[2]=IKsign(x12431);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12432=cj5*cj5;
IkReal x12433=(r11*sj3);
IkReal x12434=(r10*sj3);
IkReal x12435=((1.0)*cj5*sj5);
IkReal x12436=(((r21*x12433))+(((-1.0)*r21*x12434*x12435))+(((-1.0)*r21*x12432*x12433))+((r20*x12432*x12434))+((r12*r22*sj3))+(((-1.0)*r20*x12433*x12435)));
j4eval[0]=x12436;
j4eval[1]=IKsign(x12436);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x12437=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12437;
j4eval[1]=IKsign(x12437);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x12438=((1.0)*cj5);
IkReal x12439=((((-1.0)*r01*x12438))+(((-1.0)*r00*sj5)));
j4eval[0]=x12439;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12438)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12439);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x12440=cj5*cj5;
IkReal x12441=r11*r11;
IkReal x12442=(r11*sj5);
IkReal x12443=(cj5*r10);
IkReal x12444=((((-1.0)*x12440*x12441))+(r12*r12)+((x12440*(r10*r10)))+(((-2.0)*x12442*x12443))+x12441);
j4eval[0]=x12444;
j4eval[1]=IKsign(x12444);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12442))+x12443))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12445=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12445);
rxp1_1=(px*r21);
rxp1_2=(r11*x12445);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12446=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12446);
rxp1_1=(px*r21);
rxp1_2=(r11*x12446);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12447=IKPowWithIntegerCheck(r02,-1);
if(!x12447.valid){
continue;
}
CheckValue<IkReal> x12448=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12448.valid){
continue;
}
if( IKabs(((x12447.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12448.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12447.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x12448.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12447.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x12448.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12449=IKsin(j4);
IkReal x12450=IKcos(j4);
IkReal x12451=(cj5*r20);
IkReal x12452=((1.0)*sj2);
IkReal x12453=(cj5*r10);
IkReal x12454=((1.0)*x12449);
IkReal x12455=(sj5*x12449);
IkReal x12456=((1.0)*sj5*x12450);
evalcond[0]=((-1.0)*r02*x12450);
evalcond[1]=((((-1.0)*x12451*x12454))+((r21*x12455)));
evalcond[2]=((((-1.0)*r02*x12454))+(((-1.0)*sj1*x12452))+((cj1*cj2)));
evalcond[3]=((((-1.0)*r11*x12456))+((x12450*x12453)));
evalcond[4]=((1.0)+((r11*x12455))+(((-1.0)*x12453*x12454)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x12450*x12451))+(((-1.0)*cj1*x12452))+(((-1.0)*r21*x12456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12457=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12457.valid){
continue;
}
CheckValue<IkReal> x12458=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12458.valid){
continue;
}
if( IKabs(((-1.0)*(x12457.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12458.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12457.value)))+IKsqr(((x12458.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12457.value)), ((x12458.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12459=IKsin(j4);
IkReal x12460=IKcos(j4);
IkReal x12461=(cj5*r20);
IkReal x12462=((1.0)*sj2);
IkReal x12463=(cj5*r10);
IkReal x12464=((1.0)*x12459);
IkReal x12465=(sj5*x12459);
IkReal x12466=((1.0)*sj5*x12460);
evalcond[0]=((-1.0)*r02*x12460);
evalcond[1]=((((-1.0)*x12461*x12464))+((r21*x12465)));
evalcond[2]=((((-1.0)*r02*x12464))+((cj1*cj2))+(((-1.0)*sj1*x12462)));
evalcond[3]=(((x12460*x12463))+(((-1.0)*r11*x12466)));
evalcond[4]=((1.0)+(((-1.0)*x12463*x12464))+((r11*x12465)));
evalcond[5]=((((-1.0)*r21*x12466))+(((-1.0)*cj2*sj1))+((x12460*x12461))+(((-1.0)*cj1*x12462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12467=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12467);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12467);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12468=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12468);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12468);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12469=((1.0)*cj2);
CheckValue<IkReal> x12470=IKPowWithIntegerCheck(r22,-1);
if(!x12470.valid){
continue;
}
CheckValue<IkReal> x12471=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12471.valid){
continue;
}
if( IKabs(((x12470.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12469)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12471.value)*((((sj1*sj2))+(((-1.0)*cj1*x12469)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12470.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12469))))))+IKsqr(((x12471.value)*((((sj1*sj2))+(((-1.0)*cj1*x12469))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12470.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12469))))), ((x12471.value)*((((sj1*sj2))+(((-1.0)*cj1*x12469))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12472=IKsin(j4);
IkReal x12473=IKcos(j4);
IkReal x12474=(cj5*r00);
IkReal x12475=((1.0)*sj1);
IkReal x12476=(cj5*r10);
IkReal x12477=((1.0)*x12472);
IkReal x12478=(sj5*x12472);
IkReal x12479=((1.0)*sj5*x12473);
evalcond[0]=((-1.0)*r22*x12473);
evalcond[1]=(((r01*x12478))+(((-1.0)*x12474*x12477)));
evalcond[2]=((((-1.0)*r11*x12479))+((x12473*x12476)));
evalcond[3]=((1.0)+(((-1.0)*x12476*x12477))+((r11*x12478)));
evalcond[4]=((((-1.0)*r22*x12477))+(((-1.0)*cj2*x12475))+(((-1.0)*cj1*sj2)));
evalcond[5]=(((x12473*x12474))+((cj1*cj2))+(((-1.0)*r01*x12479))+(((-1.0)*sj2*x12475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12480=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12480.valid){
continue;
}
CheckValue<IkReal> x12481=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12481.valid){
continue;
}
if( IKabs(((-1.0)*(x12480.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12481.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12480.value)))+IKsqr(((x12481.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12480.value)), ((x12481.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12482=IKsin(j4);
IkReal x12483=IKcos(j4);
IkReal x12484=(cj5*r00);
IkReal x12485=((1.0)*sj1);
IkReal x12486=(cj5*r10);
IkReal x12487=((1.0)*x12482);
IkReal x12488=(sj5*x12482);
IkReal x12489=((1.0)*sj5*x12483);
evalcond[0]=((-1.0)*r22*x12483);
evalcond[1]=((((-1.0)*x12484*x12487))+((r01*x12488)));
evalcond[2]=(((x12483*x12486))+(((-1.0)*r11*x12489)));
evalcond[3]=((1.0)+((r11*x12488))+(((-1.0)*x12486*x12487)));
evalcond[4]=((((-1.0)*r22*x12487))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12485)));
evalcond[5]=(((x12483*x12484))+(((-1.0)*r01*x12489))+((cj1*cj2))+(((-1.0)*sj2*x12485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12490=cj5*cj5;
IkReal x12491=r11*r11;
IkReal x12492=(cj5*r10);
IkReal x12493=(r11*sj5);
CheckValue<IkReal> x12494=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x12492*x12493))+x12491+(((-1.0)*x12490*x12491))+((x12490*(r10*r10))))),-1);
if(!x12494.valid){
continue;
}
CheckValue<IkReal> x12495 = IKatan2WithCheck(IkReal((x12492+(((-1.0)*x12493)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12494.value)))+(x12495.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12496=IKsin(j4);
IkReal x12497=IKcos(j4);
IkReal x12498=(cj5*r10);
IkReal x12499=(r01*sj5);
IkReal x12500=((1.0)*sj1);
IkReal x12501=(cj5*r00);
IkReal x12502=(cj5*r20);
IkReal x12503=((1.0)*x12497);
IkReal x12504=((1.0)*x12496);
IkReal x12505=(sj5*x12496);
evalcond[0]=((((-1.0)*r22*x12503))+((r21*x12505))+(((-1.0)*x12502*x12504)));
evalcond[1]=((((-1.0)*r02*x12503))+((x12496*x12499))+(((-1.0)*x12501*x12504)));
evalcond[2]=((((-1.0)*r11*sj5*x12503))+(((-1.0)*r12*x12504))+((x12497*x12498)));
evalcond[3]=((1.0)+(((-1.0)*x12498*x12504))+((r11*x12505))+(((-1.0)*r12*x12503)));
evalcond[4]=((((-1.0)*r02*x12504))+((cj1*cj2))+((x12497*x12501))+(((-1.0)*sj2*x12500))+(((-1.0)*x12499*x12503)));
evalcond[5]=((((-1.0)*r22*x12504))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x12503))+(((-1.0)*cj2*x12500))+((x12497*x12502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12506=((1.0)*cj5);
CheckValue<IkReal> x12507=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12506))+(((-1.0)*r00*sj5)))),-1);
if(!x12507.valid){
continue;
}
CheckValue<IkReal> x12508 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12506)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12507.value)))+(x12508.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12509=IKsin(j4);
IkReal x12510=IKcos(j4);
IkReal x12511=(cj5*r10);
IkReal x12512=(r01*sj5);
IkReal x12513=((1.0)*sj1);
IkReal x12514=(cj5*r00);
IkReal x12515=(cj5*r20);
IkReal x12516=((1.0)*x12510);
IkReal x12517=((1.0)*x12509);
IkReal x12518=(sj5*x12509);
evalcond[0]=((((-1.0)*r22*x12516))+((r21*x12518))+(((-1.0)*x12515*x12517)));
evalcond[1]=((((-1.0)*x12514*x12517))+((x12509*x12512))+(((-1.0)*r02*x12516)));
evalcond[2]=((((-1.0)*r12*x12517))+((x12510*x12511))+(((-1.0)*r11*sj5*x12516)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12516))+(((-1.0)*x12511*x12517))+((r11*x12518)));
evalcond[4]=(((x12510*x12514))+(((-1.0)*r02*x12517))+(((-1.0)*x12512*x12516))+(((-1.0)*sj2*x12513))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x12517))+((x12510*x12515))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x12516))+(((-1.0)*cj2*x12513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12519=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12519.valid){
continue;
}
CheckValue<IkReal> x12520 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12519.value)))+(x12520.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12521=IKsin(j4);
IkReal x12522=IKcos(j4);
IkReal x12523=(cj5*r10);
IkReal x12524=(r01*sj5);
IkReal x12525=((1.0)*sj1);
IkReal x12526=(cj5*r00);
IkReal x12527=(cj5*r20);
IkReal x12528=((1.0)*x12522);
IkReal x12529=((1.0)*x12521);
IkReal x12530=(sj5*x12521);
evalcond[0]=(((r21*x12530))+(((-1.0)*r22*x12528))+(((-1.0)*x12527*x12529)));
evalcond[1]=(((x12521*x12524))+(((-1.0)*r02*x12528))+(((-1.0)*x12526*x12529)));
evalcond[2]=(((x12522*x12523))+(((-1.0)*r12*x12529))+(((-1.0)*r11*sj5*x12528)));
evalcond[3]=((1.0)+((r11*x12530))+(((-1.0)*x12523*x12529))+(((-1.0)*r12*x12528)));
evalcond[4]=(((x12522*x12526))+(((-1.0)*x12524*x12528))+(((-1.0)*r02*x12529))+((cj1*cj2))+(((-1.0)*sj2*x12525)));
evalcond[5]=((((-1.0)*cj2*x12525))+((x12522*x12527))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x12529))+(((-1.0)*r21*sj5*x12528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12531=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12531;
j4eval[1]=IKsign(x12531);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12532=((1.0)*cj5);
IkReal x12533=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12532)));
j4eval[0]=x12533;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12532))+((r21*sj5))))));
j4eval[2]=IKsign(x12533);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12534=(cj5*r10);
IkReal x12535=(sj1*sj2);
IkReal x12536=(r11*sj5);
IkReal x12537=((1.0)*cj1*cj2);
IkReal x12538=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12538;
j4eval[1]=((IKabs(((((-1.0)*r12*x12537))+((r12*x12535)))))+(IKabs(((((-1.0)*x12535*x12536))+(((-1.0)*x12534*x12537))+((x12534*x12535))+((cj1*cj2*x12536))))));
j4eval[2]=IKsign(x12538);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12539=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12539);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12539);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12540=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12540);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12540);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12541=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x12541))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x12541)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12542=((1.0)*cj5);
CheckValue<IkReal> x12543=IKPowWithIntegerCheck(((((-1.0)*r10*x12542))+((r11*sj5))),-1);
if(!x12543.valid){
continue;
}
CheckValue<IkReal> x12544=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12542))),-1);
if(!x12544.valid){
continue;
}
if( IKabs(((-1.0)*(x12543.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12544.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12543.value)))+IKsqr(((x12544.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12543.value)), ((x12544.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12545=IKsin(j4);
IkReal x12546=IKcos(j4);
IkReal x12547=((1.0)*sj1);
IkReal x12548=((1.0)*cj5*r00);
IkReal x12549=(sj5*x12546);
IkReal x12550=((1.0)*cj5*r10);
IkReal x12551=(sj5*x12545);
evalcond[0]=((-1.0)*r22*x12546);
evalcond[1]=((((-1.0)*x12545*x12548))+((r01*x12551)));
evalcond[2]=((((-1.0)*cj1*sj2))+((r22*x12545))+(((-1.0)*cj2*x12547)));
evalcond[3]=(((r11*x12549))+(((-1.0)*x12546*x12550)));
evalcond[4]=((1.0)+(((-1.0)*x12545*x12550))+((r11*x12551)));
evalcond[5]=(((r01*x12549))+(((-1.0)*x12546*x12548))+(((-1.0)*sj2*x12547))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12552=IKPowWithIntegerCheck(r22,-1);
if(!x12552.valid){
continue;
}
CheckValue<IkReal> x12553=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12553.valid){
continue;
}
if( IKabs(((x12552.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12553.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12552.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12553.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12552.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12553.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12554=IKsin(j4);
IkReal x12555=IKcos(j4);
IkReal x12556=((1.0)*sj1);
IkReal x12557=((1.0)*cj5*r00);
IkReal x12558=(sj5*x12555);
IkReal x12559=((1.0)*cj5*r10);
IkReal x12560=(sj5*x12554);
evalcond[0]=((-1.0)*r22*x12555);
evalcond[1]=((((-1.0)*x12554*x12557))+((r01*x12560)));
evalcond[2]=((((-1.0)*cj1*sj2))+((r22*x12554))+(((-1.0)*cj2*x12556)));
evalcond[3]=((((-1.0)*x12555*x12559))+((r11*x12558)));
evalcond[4]=((1.0)+((r11*x12560))+(((-1.0)*x12554*x12559)));
evalcond[5]=(((r01*x12558))+(((-1.0)*x12555*x12557))+((cj1*cj2))+(((-1.0)*sj2*x12556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12561=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12561;
j4eval[1]=IKsign(x12561);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12562=((1.0)*cj5);
IkReal x12563=((((-1.0)*r11*x12562))+(((-1.0)*r10*sj5)));
j4eval[0]=x12563;
j4eval[1]=IKsign(x12563);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x12562))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12564=cj5*cj5;
IkReal x12565=(r01*r11);
IkReal x12566=(r01*sj5);
IkReal x12567=((1.0)*r00);
IkReal x12568=((((-1.0)*r02*r12))+(((-1.0)*x12565))+((cj5*r10*x12566))+((x12564*x12565))+(((-1.0)*r10*x12564*x12567))+((cj5*r00*r11*sj5)));
j4eval[0]=x12568;
j4eval[1]=IKsign(x12568);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj5*x12567))+x12566))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12569=cj5*cj5;
IkReal x12570=(r01*r11);
IkReal x12571=(r01*sj5);
IkReal x12572=((1.0)*r00);
CheckValue<IkReal> x12573 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12572))+x12571)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12573.valid){
continue;
}
CheckValue<IkReal> x12574=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((x12569*x12570))+((cj5*r10*x12571))+(((-1.0)*x12570))+(((-1.0)*r10*x12569*x12572))+((cj5*r00*r11*sj5)))),-1);
if(!x12574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12573.value)+(((1.5707963267949)*(x12574.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12575=IKcos(j4);
IkReal x12576=IKsin(j4);
IkReal x12577=(cj5*r00);
IkReal x12578=(cj5*r10);
IkReal x12579=(cj5*r20);
IkReal x12580=((1.0)*x12575);
IkReal x12581=((1.0)*x12576);
IkReal x12582=(sj5*x12575);
IkReal x12583=(sj5*x12576);
evalcond[0]=(((r01*x12582))+((r02*x12576))+(((-1.0)*x12577*x12580)));
evalcond[1]=((((-1.0)*x12578*x12580))+((r12*x12576))+((r11*x12582)));
evalcond[2]=((((-1.0)*x12579*x12581))+(((-1.0)*r22*x12580))+((r21*x12583)));
evalcond[3]=(((r01*x12583))+(((-1.0)*r02*x12580))+(((-1.0)*x12577*x12581)));
evalcond[4]=((-1.0)+((r22*x12576))+(((-1.0)*x12579*x12580))+((r21*x12582)));
evalcond[5]=((1.0)+(((-1.0)*x12578*x12581))+(((-1.0)*r12*x12580))+((r11*x12583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12584=((1.0)*cj5);
CheckValue<IkReal> x12585 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x12584)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12585.valid){
continue;
}
CheckValue<IkReal> x12586=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12584)))),-1);
if(!x12586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12585.value)+(((1.5707963267949)*(x12586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12587=IKcos(j4);
IkReal x12588=IKsin(j4);
IkReal x12589=(cj5*r00);
IkReal x12590=(cj5*r10);
IkReal x12591=(cj5*r20);
IkReal x12592=((1.0)*x12587);
IkReal x12593=((1.0)*x12588);
IkReal x12594=(sj5*x12587);
IkReal x12595=(sj5*x12588);
evalcond[0]=(((r01*x12594))+((r02*x12588))+(((-1.0)*x12589*x12592)));
evalcond[1]=(((r12*x12588))+(((-1.0)*x12590*x12592))+((r11*x12594)));
evalcond[2]=((((-1.0)*x12591*x12593))+(((-1.0)*r22*x12592))+((r21*x12595)));
evalcond[3]=(((r01*x12595))+(((-1.0)*r02*x12592))+(((-1.0)*x12589*x12593)));
evalcond[4]=((-1.0)+(((-1.0)*x12591*x12592))+((r21*x12594))+((r22*x12588)));
evalcond[5]=((1.0)+(((-1.0)*x12590*x12593))+(((-1.0)*r12*x12592))+((r11*x12595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12596=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12596.valid){
continue;
}
CheckValue<IkReal> x12597 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12596.value)))+(x12597.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12598=IKcos(j4);
IkReal x12599=IKsin(j4);
IkReal x12600=(cj5*r00);
IkReal x12601=(cj5*r10);
IkReal x12602=(cj5*r20);
IkReal x12603=((1.0)*x12598);
IkReal x12604=((1.0)*x12599);
IkReal x12605=(sj5*x12598);
IkReal x12606=(sj5*x12599);
evalcond[0]=(((r01*x12605))+(((-1.0)*x12600*x12603))+((r02*x12599)));
evalcond[1]=(((r12*x12599))+((r11*x12605))+(((-1.0)*x12601*x12603)));
evalcond[2]=((((-1.0)*r22*x12603))+((r21*x12606))+(((-1.0)*x12602*x12604)));
evalcond[3]=(((r01*x12606))+(((-1.0)*x12600*x12604))+(((-1.0)*r02*x12603)));
evalcond[4]=((-1.0)+((r22*x12599))+((r21*x12605))+(((-1.0)*x12602*x12603)));
evalcond[5]=((1.0)+((r11*x12606))+(((-1.0)*x12601*x12604))+(((-1.0)*r12*x12603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12607=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12607;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x12607);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12608=((1.0)*cj5);
IkReal x12609=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12608)));
j4eval[0]=x12609;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12608))))));
j4eval[2]=IKsign(x12609);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12610=cj5*cj5;
IkReal x12611=(r01*r11);
IkReal x12612=(r01*sj5);
IkReal x12613=((1.0)*r00);
IkReal x12614=((((-1.0)*r02*r12))+(((-1.0)*r10*x12610*x12613))+((cj5*r10*x12612))+(((-1.0)*x12611))+((x12610*x12611))+((cj5*r00*r11*sj5)));
j4eval[0]=x12614;
j4eval[1]=IKsign(x12614);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj5*x12613))+x12612))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12615=cj5*cj5;
IkReal x12616=(r01*r11);
IkReal x12617=(r01*sj5);
IkReal x12618=((1.0)*r00);
CheckValue<IkReal> x12619 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12618))+x12617)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12619.valid){
continue;
}
CheckValue<IkReal> x12620=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((x12615*x12616))+((cj5*r10*x12617))+(((-1.0)*r10*x12615*x12618))+(((-1.0)*x12616))+((cj5*r00*r11*sj5)))),-1);
if(!x12620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12619.value)+(((1.5707963267949)*(x12620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12621=IKcos(j4);
IkReal x12622=IKsin(j4);
IkReal x12623=(cj5*r00);
IkReal x12624=(cj5*r10);
IkReal x12625=(cj5*r20);
IkReal x12626=((1.0)*x12621);
IkReal x12627=((1.0)*x12622);
IkReal x12628=(sj5*x12621);
IkReal x12629=(sj5*x12622);
evalcond[0]=(((r02*x12622))+(((-1.0)*x12623*x12626))+((r01*x12628)));
evalcond[1]=(((r12*x12622))+((r11*x12628))+(((-1.0)*x12624*x12626)));
evalcond[2]=((((-1.0)*x12625*x12627))+(((-1.0)*r22*x12626))+((r21*x12629)));
evalcond[3]=((((-1.0)*r02*x12626))+(((-1.0)*x12623*x12627))+((r01*x12629)));
evalcond[4]=((1.0)+(((-1.0)*x12625*x12626))+((r22*x12622))+((r21*x12628)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12626))+((r11*x12629))+(((-1.0)*x12624*x12627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12630=((1.0)*cj5);
CheckValue<IkReal> x12631 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12630)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12631.valid){
continue;
}
CheckValue<IkReal> x12632=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12630)))),-1);
if(!x12632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12631.value)+(((1.5707963267949)*(x12632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12633=IKcos(j4);
IkReal x12634=IKsin(j4);
IkReal x12635=(cj5*r00);
IkReal x12636=(cj5*r10);
IkReal x12637=(cj5*r20);
IkReal x12638=((1.0)*x12633);
IkReal x12639=((1.0)*x12634);
IkReal x12640=(sj5*x12633);
IkReal x12641=(sj5*x12634);
evalcond[0]=(((r01*x12640))+((r02*x12634))+(((-1.0)*x12635*x12638)));
evalcond[1]=((((-1.0)*x12636*x12638))+((r12*x12634))+((r11*x12640)));
evalcond[2]=((((-1.0)*x12637*x12639))+(((-1.0)*r22*x12638))+((r21*x12641)));
evalcond[3]=(((r01*x12641))+(((-1.0)*x12635*x12639))+(((-1.0)*r02*x12638)));
evalcond[4]=((1.0)+(((-1.0)*x12637*x12638))+((r22*x12634))+((r21*x12640)));
evalcond[5]=((1.0)+(((-1.0)*x12636*x12639))+((r11*x12641))+(((-1.0)*r12*x12638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12642 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12642.valid){
continue;
}
CheckValue<IkReal> x12643=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12642.value)+(((1.5707963267949)*(x12643.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12644=IKcos(j4);
IkReal x12645=IKsin(j4);
IkReal x12646=(cj5*r00);
IkReal x12647=(cj5*r10);
IkReal x12648=(cj5*r20);
IkReal x12649=((1.0)*x12644);
IkReal x12650=((1.0)*x12645);
IkReal x12651=(sj5*x12644);
IkReal x12652=(sj5*x12645);
evalcond[0]=(((r02*x12645))+((r01*x12651))+(((-1.0)*x12646*x12649)));
evalcond[1]=(((r12*x12645))+((r11*x12651))+(((-1.0)*x12647*x12649)));
evalcond[2]=(((r21*x12652))+(((-1.0)*r22*x12649))+(((-1.0)*x12648*x12650)));
evalcond[3]=((((-1.0)*r02*x12649))+(((-1.0)*x12646*x12650))+((r01*x12652)));
evalcond[4]=((1.0)+((r21*x12651))+(((-1.0)*x12648*x12649))+((r22*x12645)));
evalcond[5]=((1.0)+(((-1.0)*x12647*x12650))+((r11*x12652))+(((-1.0)*r12*x12649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12653=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12653;
j4eval[1]=IKsign(x12653);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12654=((1.0)*cj5);
IkReal x12655=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12654)));
j4eval[0]=x12655;
j4eval[1]=IKsign(x12655);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x12654))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12656=cj5*cj5;
IkReal x12657=(r01*r11);
IkReal x12658=(r01*sj5);
IkReal x12659=((1.0)*r00);
IkReal x12660=(((cj5*r10*x12658))+(((-1.0)*r02*r12))+(((-1.0)*r10*x12656*x12659))+((x12656*x12657))+(((-1.0)*x12657))+((cj5*r00*r11*sj5)));
j4eval[0]=x12660;
j4eval[1]=IKsign(x12660);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj5*x12659))+x12658))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12661=cj5*cj5;
IkReal x12662=(r01*r11);
IkReal x12663=(r01*sj5);
IkReal x12664=((1.0)*r00);
CheckValue<IkReal> x12665 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12664))+x12663)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12665.valid){
continue;
}
CheckValue<IkReal> x12666=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((cj5*r10*x12663))+(((-1.0)*r10*x12661*x12664))+((x12661*x12662))+(((-1.0)*x12662))+((cj5*r00*r11*sj5)))),-1);
if(!x12666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12665.value)+(((1.5707963267949)*(x12666.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12667=IKcos(j4);
IkReal x12668=IKsin(j4);
IkReal x12669=(cj5*r00);
IkReal x12670=(cj5*r10);
IkReal x12671=(cj5*r20);
IkReal x12672=((1.0)*x12667);
IkReal x12673=((1.0)*x12668);
IkReal x12674=(sj5*x12667);
IkReal x12675=(sj5*x12668);
evalcond[0]=((((-1.0)*x12669*x12672))+((r02*x12668))+((r01*x12674)));
evalcond[1]=(((r12*x12668))+(((-1.0)*x12670*x12672))+((r11*x12674)));
evalcond[2]=(((r21*x12675))+(((-1.0)*r22*x12672))+(((-1.0)*x12671*x12673)));
evalcond[3]=((((-1.0)*x12669*x12673))+(((-1.0)*r02*x12672))+((r01*x12675)));
evalcond[4]=((-1.0)+((r21*x12674))+((r22*x12668))+(((-1.0)*x12671*x12672)));
evalcond[5]=((1.0)+(((-1.0)*x12670*x12673))+(((-1.0)*r12*x12672))+((r11*x12675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12676=((1.0)*cj5);
CheckValue<IkReal> x12677=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12676)))),-1);
if(!x12677.valid){
continue;
}
CheckValue<IkReal> x12678 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x12676)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12677.value)))+(x12678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12679=IKcos(j4);
IkReal x12680=IKsin(j4);
IkReal x12681=(cj5*r00);
IkReal x12682=(cj5*r10);
IkReal x12683=(cj5*r20);
IkReal x12684=((1.0)*x12679);
IkReal x12685=((1.0)*x12680);
IkReal x12686=(sj5*x12679);
IkReal x12687=(sj5*x12680);
evalcond[0]=(((r01*x12686))+((r02*x12680))+(((-1.0)*x12681*x12684)));
evalcond[1]=(((r12*x12680))+((r11*x12686))+(((-1.0)*x12682*x12684)));
evalcond[2]=(((r21*x12687))+(((-1.0)*r22*x12684))+(((-1.0)*x12683*x12685)));
evalcond[3]=(((r01*x12687))+(((-1.0)*r02*x12684))+(((-1.0)*x12681*x12685)));
evalcond[4]=((-1.0)+((r21*x12686))+((r22*x12680))+(((-1.0)*x12683*x12684)));
evalcond[5]=((1.0)+((r11*x12687))+(((-1.0)*r12*x12684))+(((-1.0)*x12682*x12685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12688=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12688.valid){
continue;
}
CheckValue<IkReal> x12689 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12688.value)))+(x12689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12690=IKcos(j4);
IkReal x12691=IKsin(j4);
IkReal x12692=(cj5*r00);
IkReal x12693=(cj5*r10);
IkReal x12694=(cj5*r20);
IkReal x12695=((1.0)*x12690);
IkReal x12696=((1.0)*x12691);
IkReal x12697=(sj5*x12690);
IkReal x12698=(sj5*x12691);
evalcond[0]=(((r02*x12691))+(((-1.0)*x12692*x12695))+((r01*x12697)));
evalcond[1]=(((r11*x12697))+((r12*x12691))+(((-1.0)*x12693*x12695)));
evalcond[2]=((((-1.0)*r22*x12695))+((r21*x12698))+(((-1.0)*x12694*x12696)));
evalcond[3]=((((-1.0)*r02*x12695))+(((-1.0)*x12692*x12696))+((r01*x12698)));
evalcond[4]=((-1.0)+((r22*x12691))+((r21*x12697))+(((-1.0)*x12694*x12695)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12695))+((r11*x12698))+(((-1.0)*x12693*x12696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12699=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12699;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x12699);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12700=((1.0)*cj5);
IkReal x12701=((((-1.0)*r01*x12700))+(((-1.0)*r00*sj5)));
j4eval[0]=x12701;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12700))+((r11*sj5))))));
j4eval[2]=IKsign(x12701);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12702=cj5*cj5;
IkReal x12703=(r01*r11);
IkReal x12704=(r01*sj5);
IkReal x12705=((1.0)*r00);
IkReal x12706=((((-1.0)*r02*r12))+(((-1.0)*r10*x12702*x12705))+((x12702*x12703))+((cj5*r10*x12704))+(((-1.0)*x12703))+((cj5*r00*r11*sj5)));
j4eval[0]=x12706;
j4eval[1]=IKsign(x12706);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj5*x12705))+x12704))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12707=cj5*cj5;
IkReal x12708=(r01*r11);
IkReal x12709=(r01*sj5);
IkReal x12710=((1.0)*r00);
CheckValue<IkReal> x12711=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((x12707*x12708))+(((-1.0)*r10*x12707*x12710))+((cj5*r10*x12709))+(((-1.0)*x12708))+((cj5*r00*r11*sj5)))),-1);
if(!x12711.valid){
continue;
}
CheckValue<IkReal> x12712 = IKatan2WithCheck(IkReal((x12709+(((-1.0)*cj5*x12710)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12711.value)))+(x12712.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12713=IKcos(j4);
IkReal x12714=IKsin(j4);
IkReal x12715=(cj5*r00);
IkReal x12716=(cj5*r10);
IkReal x12717=(cj5*r20);
IkReal x12718=((1.0)*x12713);
IkReal x12719=((1.0)*x12714);
IkReal x12720=(sj5*x12713);
IkReal x12721=(sj5*x12714);
evalcond[0]=((((-1.0)*x12715*x12718))+((r02*x12714))+((r01*x12720)));
evalcond[1]=((((-1.0)*x12716*x12718))+((r12*x12714))+((r11*x12720)));
evalcond[2]=(((r21*x12721))+(((-1.0)*r22*x12718))+(((-1.0)*x12717*x12719)));
evalcond[3]=((((-1.0)*x12715*x12719))+((r01*x12721))+(((-1.0)*r02*x12718)));
evalcond[4]=((1.0)+((r22*x12714))+((r21*x12720))+(((-1.0)*x12717*x12718)));
evalcond[5]=((1.0)+(((-1.0)*x12716*x12719))+(((-1.0)*r12*x12718))+((r11*x12721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12722=((1.0)*cj5);
CheckValue<IkReal> x12723=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12722))+(((-1.0)*r00*sj5)))),-1);
if(!x12723.valid){
continue;
}
CheckValue<IkReal> x12724 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12722))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12723.value)))+(x12724.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12725=IKcos(j4);
IkReal x12726=IKsin(j4);
IkReal x12727=(cj5*r00);
IkReal x12728=(cj5*r10);
IkReal x12729=(cj5*r20);
IkReal x12730=((1.0)*x12725);
IkReal x12731=((1.0)*x12726);
IkReal x12732=(sj5*x12725);
IkReal x12733=(sj5*x12726);
evalcond[0]=((((-1.0)*x12727*x12730))+((r02*x12726))+((r01*x12732)));
evalcond[1]=(((r11*x12732))+(((-1.0)*x12728*x12730))+((r12*x12726)));
evalcond[2]=((((-1.0)*x12729*x12731))+((r21*x12733))+(((-1.0)*r22*x12730)));
evalcond[3]=((((-1.0)*x12727*x12731))+(((-1.0)*r02*x12730))+((r01*x12733)));
evalcond[4]=((1.0)+(((-1.0)*x12729*x12730))+((r21*x12732))+((r22*x12726)));
evalcond[5]=((1.0)+((r11*x12733))+(((-1.0)*x12728*x12731))+(((-1.0)*r12*x12730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12734 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12734.valid){
continue;
}
CheckValue<IkReal> x12735=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12734.value)+(((1.5707963267949)*(x12735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12736=IKcos(j4);
IkReal x12737=IKsin(j4);
IkReal x12738=(cj5*r00);
IkReal x12739=(cj5*r10);
IkReal x12740=(cj5*r20);
IkReal x12741=((1.0)*x12736);
IkReal x12742=((1.0)*x12737);
IkReal x12743=(sj5*x12736);
IkReal x12744=(sj5*x12737);
evalcond[0]=(((r02*x12737))+(((-1.0)*x12738*x12741))+((r01*x12743)));
evalcond[1]=(((r11*x12743))+((r12*x12737))+(((-1.0)*x12739*x12741)));
evalcond[2]=((((-1.0)*x12740*x12742))+(((-1.0)*r22*x12741))+((r21*x12744)));
evalcond[3]=((((-1.0)*r02*x12741))+(((-1.0)*x12738*x12742))+((r01*x12744)));
evalcond[4]=((1.0)+(((-1.0)*x12740*x12741))+((r21*x12743))+((r22*x12737)));
evalcond[5]=((1.0)+((r11*x12744))+(((-1.0)*r12*x12741))+(((-1.0)*x12739*x12742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12745=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12745;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x12745);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12746=((1.0)*cj5);
IkReal x12747=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12746)));
j4eval[0]=x12747;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x12746)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12747);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12748=cj5*cj5;
IkReal x12749=(r01*r11);
IkReal x12750=(r01*sj5);
IkReal x12751=((1.0)*r00);
IkReal x12752=((((-1.0)*x12749))+(((-1.0)*r02*r12))+(((-1.0)*r10*x12748*x12751))+((cj5*r10*x12750))+((x12748*x12749))+((cj5*r00*r11*sj5)));
j4eval[0]=x12752;
j4eval[1]=IKsign(x12752);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj5*x12751))+x12750))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12753=cj5*cj5;
IkReal x12754=(r01*r11);
IkReal x12755=(r01*sj5);
IkReal x12756=((1.0)*r00);
CheckValue<IkReal> x12757=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+(((-1.0)*x12754))+((x12753*x12754))+((cj5*r10*x12755))+((cj5*r00*r11*sj5))+(((-1.0)*r10*x12753*x12756)))),-1);
if(!x12757.valid){
continue;
}
CheckValue<IkReal> x12758 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12756))+x12755)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12757.value)))+(x12758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12759=IKcos(j4);
IkReal x12760=IKsin(j4);
IkReal x12761=(cj5*r00);
IkReal x12762=(cj5*r10);
IkReal x12763=(cj5*r20);
IkReal x12764=((1.0)*x12759);
IkReal x12765=((1.0)*x12760);
IkReal x12766=(sj5*x12759);
IkReal x12767=(sj5*x12760);
evalcond[0]=(((r02*x12760))+((r01*x12766))+(((-1.0)*x12761*x12764)));
evalcond[1]=(((r12*x12760))+(((-1.0)*x12762*x12764))+((r11*x12766)));
evalcond[2]=(((r21*x12767))+(((-1.0)*x12763*x12765))+(((-1.0)*r22*x12764)));
evalcond[3]=((((-1.0)*r02*x12764))+((r01*x12767))+(((-1.0)*x12761*x12765)));
evalcond[4]=((1.0)+((r21*x12766))+(((-1.0)*x12763*x12764))+((r22*x12760)));
evalcond[5]=((1.0)+(((-1.0)*x12762*x12765))+(((-1.0)*r12*x12764))+((r11*x12767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12768=((1.0)*cj5);
CheckValue<IkReal> x12769=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12768))+(((-1.0)*r00*sj5)))),-1);
if(!x12769.valid){
continue;
}
CheckValue<IkReal> x12770 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12768))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12769.value)))+(x12770.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12771=IKcos(j4);
IkReal x12772=IKsin(j4);
IkReal x12773=(cj5*r00);
IkReal x12774=(cj5*r10);
IkReal x12775=(cj5*r20);
IkReal x12776=((1.0)*x12771);
IkReal x12777=((1.0)*x12772);
IkReal x12778=(sj5*x12771);
IkReal x12779=(sj5*x12772);
evalcond[0]=(((r01*x12778))+(((-1.0)*x12773*x12776))+((r02*x12772)));
evalcond[1]=((((-1.0)*x12774*x12776))+((r12*x12772))+((r11*x12778)));
evalcond[2]=((((-1.0)*r22*x12776))+((r21*x12779))+(((-1.0)*x12775*x12777)));
evalcond[3]=(((r01*x12779))+(((-1.0)*x12773*x12777))+(((-1.0)*r02*x12776)));
evalcond[4]=((1.0)+((r21*x12778))+((r22*x12772))+(((-1.0)*x12775*x12776)));
evalcond[5]=((1.0)+(((-1.0)*x12774*x12777))+(((-1.0)*r12*x12776))+((r11*x12779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12780 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12780.valid){
continue;
}
CheckValue<IkReal> x12781=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12780.value)+(((1.5707963267949)*(x12781.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12782=IKcos(j4);
IkReal x12783=IKsin(j4);
IkReal x12784=(cj5*r00);
IkReal x12785=(cj5*r10);
IkReal x12786=(cj5*r20);
IkReal x12787=((1.0)*x12782);
IkReal x12788=((1.0)*x12783);
IkReal x12789=(sj5*x12782);
IkReal x12790=(sj5*x12783);
evalcond[0]=(((r01*x12789))+(((-1.0)*x12784*x12787))+((r02*x12783)));
evalcond[1]=(((r11*x12789))+((r12*x12783))+(((-1.0)*x12785*x12787)));
evalcond[2]=((((-1.0)*x12786*x12788))+(((-1.0)*r22*x12787))+((r21*x12790)));
evalcond[3]=((((-1.0)*x12784*x12788))+((r01*x12790))+(((-1.0)*r02*x12787)));
evalcond[4]=((1.0)+(((-1.0)*x12786*x12787))+((r21*x12789))+((r22*x12783)));
evalcond[5]=((1.0)+((r11*x12790))+(((-1.0)*x12785*x12788))+(((-1.0)*r12*x12787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12791=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12791;
j4eval[1]=IKsign(x12791);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12792=((1.0)*cj5);
IkReal x12793=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12792)));
j4eval[0]=x12793;
j4eval[1]=IKsign(x12793);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x12792))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12794=cj5*cj5;
IkReal x12795=(r01*r11);
IkReal x12796=(r01*sj5);
IkReal x12797=((1.0)*r00);
IkReal x12798=(((cj5*r10*x12796))+(((-1.0)*r02*r12))+((x12794*x12795))+(((-1.0)*r10*x12794*x12797))+(((-1.0)*x12795))+((cj5*r00*r11*sj5)));
j4eval[0]=x12798;
j4eval[1]=IKsign(x12798);
j4eval[2]=((IKabs((x12796+(((-1.0)*cj5*x12797)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12799=cj5*cj5;
IkReal x12800=(r01*r11);
IkReal x12801=(r01*sj5);
IkReal x12802=((1.0)*r00);
CheckValue<IkReal> x12803 = IKatan2WithCheck(IkReal((x12801+(((-1.0)*cj5*x12802)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12803.valid){
continue;
}
CheckValue<IkReal> x12804=IKPowWithIntegerCheck(IKsign((((x12799*x12800))+(((-1.0)*r02*r12))+(((-1.0)*r10*x12799*x12802))+(((-1.0)*x12800))+((cj5*r10*x12801))+((cj5*r00*r11*sj5)))),-1);
if(!x12804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12803.value)+(((1.5707963267949)*(x12804.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12805=IKcos(j4);
IkReal x12806=IKsin(j4);
IkReal x12807=(cj5*r00);
IkReal x12808=(cj5*r10);
IkReal x12809=(cj5*r20);
IkReal x12810=((1.0)*x12805);
IkReal x12811=((1.0)*x12806);
IkReal x12812=(sj5*x12805);
IkReal x12813=(sj5*x12806);
evalcond[0]=(((r02*x12806))+((r01*x12812))+(((-1.0)*x12807*x12810)));
evalcond[1]=(((r12*x12806))+((r11*x12812))+(((-1.0)*x12808*x12810)));
evalcond[2]=((((-1.0)*x12809*x12811))+((r21*x12813))+(((-1.0)*r22*x12810)));
evalcond[3]=((((-1.0)*r02*x12810))+((r01*x12813))+(((-1.0)*x12807*x12811)));
evalcond[4]=((-1.0)+(((-1.0)*x12809*x12810))+((r21*x12812))+((r22*x12806)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12810))+((r11*x12813))+(((-1.0)*x12808*x12811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12814=((1.0)*cj5);
CheckValue<IkReal> x12815 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x12814)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12815.valid){
continue;
}
CheckValue<IkReal> x12816=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12814)))),-1);
if(!x12816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12815.value)+(((1.5707963267949)*(x12816.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12817=IKcos(j4);
IkReal x12818=IKsin(j4);
IkReal x12819=(cj5*r00);
IkReal x12820=(cj5*r10);
IkReal x12821=(cj5*r20);
IkReal x12822=((1.0)*x12817);
IkReal x12823=((1.0)*x12818);
IkReal x12824=(sj5*x12817);
IkReal x12825=(sj5*x12818);
evalcond[0]=(((r01*x12824))+((r02*x12818))+(((-1.0)*x12819*x12822)));
evalcond[1]=(((r12*x12818))+((r11*x12824))+(((-1.0)*x12820*x12822)));
evalcond[2]=((((-1.0)*r22*x12822))+((r21*x12825))+(((-1.0)*x12821*x12823)));
evalcond[3]=((((-1.0)*r02*x12822))+((r01*x12825))+(((-1.0)*x12819*x12823)));
evalcond[4]=((-1.0)+((r21*x12824))+(((-1.0)*x12821*x12822))+((r22*x12818)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12822))+((r11*x12825))+(((-1.0)*x12820*x12823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12826=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12826.valid){
continue;
}
CheckValue<IkReal> x12827 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12826.value)))+(x12827.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12828=IKcos(j4);
IkReal x12829=IKsin(j4);
IkReal x12830=(cj5*r00);
IkReal x12831=(cj5*r10);
IkReal x12832=(cj5*r20);
IkReal x12833=((1.0)*x12828);
IkReal x12834=((1.0)*x12829);
IkReal x12835=(sj5*x12828);
IkReal x12836=(sj5*x12829);
evalcond[0]=(((r02*x12829))+((r01*x12835))+(((-1.0)*x12830*x12833)));
evalcond[1]=(((r11*x12835))+((r12*x12829))+(((-1.0)*x12831*x12833)));
evalcond[2]=(((r21*x12836))+(((-1.0)*x12832*x12834))+(((-1.0)*r22*x12833)));
evalcond[3]=((((-1.0)*r02*x12833))+((r01*x12836))+(((-1.0)*x12830*x12834)));
evalcond[4]=((-1.0)+((r21*x12835))+(((-1.0)*x12832*x12833))+((r22*x12829)));
evalcond[5]=((1.0)+((r11*x12836))+(((-1.0)*r12*x12833))+(((-1.0)*x12831*x12834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12837=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12837;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x12837);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12838=((1.0)*cj5);
IkReal x12839=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12838)));
j4eval[0]=x12839;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12838))))));
j4eval[2]=IKsign(x12839);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12840=cj5*cj5;
IkReal x12841=(r01*r11);
IkReal x12842=(r01*sj5);
IkReal x12843=((1.0)*r00);
IkReal x12844=(((x12840*x12841))+(((-1.0)*r02*r12))+(((-1.0)*x12841))+(((-1.0)*r10*x12840*x12843))+((cj5*r10*x12842))+((cj5*r00*r11*sj5)));
j4eval[0]=x12844;
j4eval[1]=IKsign(x12844);
j4eval[2]=((IKabs(r02))+(IKabs((x12842+(((-1.0)*cj5*x12843))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12845=cj5*cj5;
IkReal x12846=(r01*r11);
IkReal x12847=(r01*sj5);
IkReal x12848=((1.0)*r00);
CheckValue<IkReal> x12849=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+(((-1.0)*r10*x12845*x12848))+(((-1.0)*x12846))+((x12845*x12846))+((cj5*r10*x12847))+((cj5*r00*r11*sj5)))),-1);
if(!x12849.valid){
continue;
}
CheckValue<IkReal> x12850 = IKatan2WithCheck(IkReal((x12847+(((-1.0)*cj5*x12848)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12849.value)))+(x12850.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12851=IKcos(j4);
IkReal x12852=IKsin(j4);
IkReal x12853=(cj5*r00);
IkReal x12854=(cj5*r10);
IkReal x12855=(cj5*r20);
IkReal x12856=((1.0)*x12851);
IkReal x12857=((1.0)*x12852);
IkReal x12858=(sj5*x12851);
IkReal x12859=(sj5*x12852);
evalcond[0]=((((-1.0)*x12853*x12856))+((r01*x12858))+((r02*x12852)));
evalcond[1]=((((-1.0)*x12854*x12856))+((r11*x12858))+((r12*x12852)));
evalcond[2]=((((-1.0)*r22*x12856))+(((-1.0)*x12855*x12857))+((r21*x12859)));
evalcond[3]=((((-1.0)*x12853*x12857))+(((-1.0)*r02*x12856))+((r01*x12859)));
evalcond[4]=((1.0)+((r22*x12852))+(((-1.0)*x12855*x12856))+((r21*x12858)));
evalcond[5]=((1.0)+(((-1.0)*x12854*x12857))+(((-1.0)*r12*x12856))+((r11*x12859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12860=((1.0)*cj5);
CheckValue<IkReal> x12861 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12860))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12861.valid){
continue;
}
CheckValue<IkReal> x12862=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12860))+(((-1.0)*r00*sj5)))),-1);
if(!x12862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12861.value)+(((1.5707963267949)*(x12862.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12863=IKcos(j4);
IkReal x12864=IKsin(j4);
IkReal x12865=(cj5*r00);
IkReal x12866=(cj5*r10);
IkReal x12867=(cj5*r20);
IkReal x12868=((1.0)*x12863);
IkReal x12869=((1.0)*x12864);
IkReal x12870=(sj5*x12863);
IkReal x12871=(sj5*x12864);
evalcond[0]=(((r01*x12870))+(((-1.0)*x12865*x12868))+((r02*x12864)));
evalcond[1]=(((r12*x12864))+((r11*x12870))+(((-1.0)*x12866*x12868)));
evalcond[2]=((((-1.0)*r22*x12868))+(((-1.0)*x12867*x12869))+((r21*x12871)));
evalcond[3]=(((r01*x12871))+(((-1.0)*x12865*x12869))+(((-1.0)*r02*x12868)));
evalcond[4]=((1.0)+(((-1.0)*x12867*x12868))+((r21*x12870))+((r22*x12864)));
evalcond[5]=((1.0)+((r11*x12871))+(((-1.0)*x12866*x12869))+(((-1.0)*r12*x12868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12872 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12872.valid){
continue;
}
CheckValue<IkReal> x12873=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12872.value)+(((1.5707963267949)*(x12873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12874=IKcos(j4);
IkReal x12875=IKsin(j4);
IkReal x12876=(cj5*r00);
IkReal x12877=(cj5*r10);
IkReal x12878=(cj5*r20);
IkReal x12879=((1.0)*x12874);
IkReal x12880=((1.0)*x12875);
IkReal x12881=(sj5*x12874);
IkReal x12882=(sj5*x12875);
evalcond[0]=(((r01*x12881))+((r02*x12875))+(((-1.0)*x12876*x12879)));
evalcond[1]=(((r12*x12875))+(((-1.0)*x12877*x12879))+((r11*x12881)));
evalcond[2]=((((-1.0)*r22*x12879))+(((-1.0)*x12878*x12880))+((r21*x12882)));
evalcond[3]=((((-1.0)*r02*x12879))+((r01*x12882))+(((-1.0)*x12876*x12880)));
evalcond[4]=((1.0)+((r22*x12875))+(((-1.0)*x12878*x12879))+((r21*x12881)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12879))+(((-1.0)*x12877*x12880))+((r11*x12882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12883=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12883;
j4eval[1]=IKsign(x12883);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12884=((1.0)*cj5);
IkReal x12885=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12884)));
j4eval[0]=x12885;
j4eval[1]=IKsign(x12885);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x12884))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12886=cj5*cj5;
IkReal x12887=(r01*r11);
IkReal x12888=(r01*sj5);
IkReal x12889=((1.0)*r00);
IkReal x12890=((((-1.0)*x12887))+(((-1.0)*r02*r12))+((x12886*x12887))+(((-1.0)*r10*x12886*x12889))+((cj5*r10*x12888))+((cj5*r00*r11*sj5)));
j4eval[0]=x12890;
j4eval[1]=IKsign(x12890);
j4eval[2]=((IKabs(r02))+(IKabs((x12888+(((-1.0)*cj5*x12889))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12891=cj5*cj5;
IkReal x12892=(r01*r11);
IkReal x12893=(r01*sj5);
IkReal x12894=((1.0)*r00);
CheckValue<IkReal> x12895=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12892))+((cj5*r10*x12893))+(((-1.0)*r02*r12))+((x12891*x12892))+(((-1.0)*r10*x12891*x12894))+((cj5*r00*r11*sj5)))),-1);
if(!x12895.valid){
continue;
}
CheckValue<IkReal> x12896 = IKatan2WithCheck(IkReal((x12893+(((-1.0)*cj5*x12894)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12895.value)))+(x12896.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12897=IKcos(j4);
IkReal x12898=IKsin(j4);
IkReal x12899=(cj5*r00);
IkReal x12900=(cj5*r10);
IkReal x12901=(cj5*r20);
IkReal x12902=((1.0)*x12897);
IkReal x12903=((1.0)*x12898);
IkReal x12904=(sj5*x12897);
IkReal x12905=(sj5*x12898);
evalcond[0]=(((r01*x12904))+(((-1.0)*x12899*x12902))+((r02*x12898)));
evalcond[1]=(((r12*x12898))+(((-1.0)*x12900*x12902))+((r11*x12904)));
evalcond[2]=((((-1.0)*x12901*x12903))+((r21*x12905))+(((-1.0)*r22*x12902)));
evalcond[3]=(((r01*x12905))+(((-1.0)*x12899*x12903))+(((-1.0)*r02*x12902)));
evalcond[4]=((-1.0)+((r22*x12898))+(((-1.0)*x12901*x12902))+((r21*x12904)));
evalcond[5]=((1.0)+(((-1.0)*x12900*x12903))+(((-1.0)*r12*x12902))+((r11*x12905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12906=((1.0)*cj5);
CheckValue<IkReal> x12907=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12906)))),-1);
if(!x12907.valid){
continue;
}
CheckValue<IkReal> x12908 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x12906))+((r01*sj5)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12907.value)))+(x12908.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12909=IKcos(j4);
IkReal x12910=IKsin(j4);
IkReal x12911=(cj5*r00);
IkReal x12912=(cj5*r10);
IkReal x12913=(cj5*r20);
IkReal x12914=((1.0)*x12909);
IkReal x12915=((1.0)*x12910);
IkReal x12916=(sj5*x12909);
IkReal x12917=(sj5*x12910);
evalcond[0]=((((-1.0)*x12911*x12914))+((r02*x12910))+((r01*x12916)));
evalcond[1]=((((-1.0)*x12912*x12914))+((r12*x12910))+((r11*x12916)));
evalcond[2]=(((r21*x12917))+(((-1.0)*r22*x12914))+(((-1.0)*x12913*x12915)));
evalcond[3]=((((-1.0)*x12911*x12915))+(((-1.0)*r02*x12914))+((r01*x12917)));
evalcond[4]=((-1.0)+((r21*x12916))+(((-1.0)*x12913*x12914))+((r22*x12910)));
evalcond[5]=((1.0)+(((-1.0)*x12912*x12915))+(((-1.0)*r12*x12914))+((r11*x12917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12918=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12918.valid){
continue;
}
CheckValue<IkReal> x12919 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12918.value)))+(x12919.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12920=IKcos(j4);
IkReal x12921=IKsin(j4);
IkReal x12922=(cj5*r00);
IkReal x12923=(cj5*r10);
IkReal x12924=(cj5*r20);
IkReal x12925=((1.0)*x12920);
IkReal x12926=((1.0)*x12921);
IkReal x12927=(sj5*x12920);
IkReal x12928=(sj5*x12921);
evalcond[0]=(((r02*x12921))+((r01*x12927))+(((-1.0)*x12922*x12925)));
evalcond[1]=(((r11*x12927))+(((-1.0)*x12923*x12925))+((r12*x12921)));
evalcond[2]=(((r21*x12928))+(((-1.0)*r22*x12925))+(((-1.0)*x12924*x12926)));
evalcond[3]=((((-1.0)*r02*x12925))+((r01*x12928))+(((-1.0)*x12922*x12926)));
evalcond[4]=((-1.0)+((r21*x12927))+((r22*x12921))+(((-1.0)*x12924*x12925)));
evalcond[5]=((1.0)+((r11*x12928))+(((-1.0)*r12*x12925))+(((-1.0)*x12923*x12926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12929=(cj5*r10);
IkReal x12930=(sj1*sj2);
IkReal x12931=(r11*sj5);
IkReal x12932=((1.0)*cj1*cj2);
CheckValue<IkReal> x12933=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12933.valid){
continue;
}
CheckValue<IkReal> x12934 = IKatan2WithCheck(IkReal(((((-1.0)*x12929*x12932))+((x12929*x12930))+((cj1*cj2*x12931))+(((-1.0)*x12930*x12931)))),IkReal((((r12*x12930))+(((-1.0)*r12*x12932)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12933.value)))+(x12934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12935=IKcos(j4);
IkReal x12936=IKsin(j4);
IkReal x12937=(cj5*r00);
IkReal x12938=(cj5*r10);
IkReal x12939=(r21*sj5);
IkReal x12940=((1.0)*sj1);
IkReal x12941=(cj5*r20);
IkReal x12942=((1.0)*x12935);
IkReal x12943=((1.0)*x12936);
IkReal x12944=(sj5*x12936);
IkReal x12945=(sj5*x12935);
evalcond[0]=(((r12*x12936))+((r11*x12945))+(((-1.0)*x12938*x12942)));
evalcond[1]=((((-1.0)*r22*x12942))+((x12936*x12939))+(((-1.0)*x12941*x12943)));
evalcond[2]=((((-1.0)*x12937*x12943))+((r01*x12944))+(((-1.0)*r02*x12942)));
evalcond[3]=((1.0)+((r11*x12944))+(((-1.0)*x12938*x12943))+(((-1.0)*r12*x12942)));
evalcond[4]=((((-1.0)*x12937*x12942))+((r02*x12936))+((r01*x12945))+((cj1*cj2))+(((-1.0)*sj2*x12940)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12940))+((x12935*x12939))+((r22*x12936))+(((-1.0)*x12941*x12942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12946=((1.0)*cj5);
CheckValue<IkReal> x12947=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12946)))),-1);
if(!x12947.valid){
continue;
}
CheckValue<IkReal> x12948 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12947.value)))+(x12948.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12949=IKcos(j4);
IkReal x12950=IKsin(j4);
IkReal x12951=(cj5*r00);
IkReal x12952=(cj5*r10);
IkReal x12953=(r21*sj5);
IkReal x12954=((1.0)*sj1);
IkReal x12955=(cj5*r20);
IkReal x12956=((1.0)*x12949);
IkReal x12957=((1.0)*x12950);
IkReal x12958=(sj5*x12950);
IkReal x12959=(sj5*x12949);
evalcond[0]=((((-1.0)*x12952*x12956))+((r12*x12950))+((r11*x12959)));
evalcond[1]=((((-1.0)*x12955*x12957))+(((-1.0)*r22*x12956))+((x12950*x12953)));
evalcond[2]=(((r01*x12958))+(((-1.0)*x12951*x12957))+(((-1.0)*r02*x12956)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12956))+(((-1.0)*x12952*x12957))+((r11*x12958)));
evalcond[4]=(((r01*x12959))+(((-1.0)*x12951*x12956))+((r02*x12950))+((cj1*cj2))+(((-1.0)*sj2*x12954)));
evalcond[5]=((((-1.0)*x12955*x12956))+((r22*x12950))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12954))+((x12949*x12953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12960=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12960.valid){
continue;
}
CheckValue<IkReal> x12961 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12960.value)))+(x12961.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12962=IKcos(j4);
IkReal x12963=IKsin(j4);
IkReal x12964=(cj5*r00);
IkReal x12965=(cj5*r10);
IkReal x12966=(r21*sj5);
IkReal x12967=((1.0)*sj1);
IkReal x12968=(cj5*r20);
IkReal x12969=((1.0)*x12962);
IkReal x12970=((1.0)*x12963);
IkReal x12971=(sj5*x12963);
IkReal x12972=(sj5*x12962);
evalcond[0]=((((-1.0)*x12965*x12969))+((r11*x12972))+((r12*x12963)));
evalcond[1]=((((-1.0)*r22*x12969))+((x12963*x12966))+(((-1.0)*x12968*x12970)));
evalcond[2]=(((r01*x12971))+(((-1.0)*r02*x12969))+(((-1.0)*x12964*x12970)));
evalcond[3]=((1.0)+(((-1.0)*x12965*x12970))+(((-1.0)*r12*x12969))+((r11*x12971)));
evalcond[4]=(((r01*x12972))+((r02*x12963))+(((-1.0)*sj2*x12967))+((cj1*cj2))+(((-1.0)*x12964*x12969)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x12962*x12966))+((r22*x12963))+(((-1.0)*cj2*x12967))+(((-1.0)*x12968*x12969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12973=((-1.0)*r00);
IkReal x12975 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12975)==0){
continue;
}
IkReal x12974=pow(x12975,-0.5);
CheckValue<IkReal> x12976 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12973),IKFAST_ATAN2_MAGTHRESH);
if(!x12976.valid){
continue;
}
IkReal gconst18=((-1.0)*(x12976.value));
IkReal gconst19=(r01*x12974);
IkReal gconst20=(x12973*x12974);
CheckValue<IkReal> x12977 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12977.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12977.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12978=((-1.0)*r00);
IkReal x12979=x12974;
CheckValue<IkReal> x12981 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12978),IKFAST_ATAN2_MAGTHRESH);
if(!x12981.valid){
continue;
}
IkReal x12980=((-1.0)*(x12981.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x12980;
IkReal gconst18=x12980;
IkReal gconst19=(r01*x12979);
IkReal gconst20=(x12978*x12979);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12982=((-1.0)*r00);
IkReal x12983=x12974;
CheckValue<IkReal> x12985 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12982),IKFAST_ATAN2_MAGTHRESH);
if(!x12985.valid){
continue;
}
IkReal x12984=((-1.0)*(x12985.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x12984;
IkReal gconst18=x12984;
IkReal gconst19=(r01*x12983);
IkReal gconst20=(x12982*x12983);
CheckValue<IkReal> x12993=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x12993.valid){
continue;
}
IkReal x12986=x12993.value;
IkReal x12987=(sj3*x12986);
IkReal x12988=(r11*x12987);
IkReal x12989=(r21*x12987);
IkReal x12990=(r20*x12987);
IkReal x12991=(r10*x12987);
IkReal x12992=(r00*r01*x12987);
j4eval[0]=IKsign((((r21*x12988*(r01*r01)))+((r10*x12990*(r00*r00)))+((r00*r01*r20*x12988))+((r12*r22*sj3))+((r00*r01*r10*x12989))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12994=((-1.0)*r00);
IkReal x12995=x12974;
CheckValue<IkReal> x12997 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12994),IKFAST_ATAN2_MAGTHRESH);
if(!x12997.valid){
continue;
}
IkReal x12996=((-1.0)*(x12997.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x12996;
IkReal gconst18=x12996;
IkReal gconst19=(r01*x12995);
IkReal gconst20=(x12994*x12995);
CheckValue<IkReal> x13005=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13005.valid){
continue;
}
IkReal x12998=x13005.value;
IkReal x12999=(cj3*x12998);
IkReal x13000=(r21*x12999);
IkReal x13001=(r10*x12999);
IkReal x13002=(r11*x12999);
IkReal x13003=(r20*x12999);
IkReal x13004=(r00*r01*x12999);
j4eval[0]=IKsign((((cj3*r12*r22))+((r11*x13000*(r01*r01)))+((r00*r01*r10*x13000))+((r00*r01*r20*x13002))+((r20*x13001*(r00*r00)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13006=((-1.0)*r00);
IkReal x13007=x12974;
CheckValue<IkReal> x13009 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13006),IKFAST_ATAN2_MAGTHRESH);
if(!x13009.valid){
continue;
}
IkReal x13008=((-1.0)*(x13009.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13008;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x13008;
IkReal gconst19=(r01*x13007);
IkReal gconst20=(x13006*x13007);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13010=((-1.0)*r00);
IkReal x13011=x12974;
CheckValue<IkReal> x13013 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13010),IKFAST_ATAN2_MAGTHRESH);
if(!x13013.valid){
continue;
}
IkReal x13012=((-1.0)*(x13013.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13012;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x13012;
IkReal gconst19=(r01*x13011);
IkReal gconst20=(x13010*x13011);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13014=((-1.0)*r00);
IkReal x13015=x12974;
CheckValue<IkReal> x13017 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13014),IKFAST_ATAN2_MAGTHRESH);
if(!x13017.valid){
continue;
}
IkReal x13016=((-1.0)*(x13017.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13016;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x13016;
IkReal gconst19=(r01*x13015);
IkReal gconst20=(x13014*x13015);
IkReal x13018=r02*r02;
IkReal x13019=(sj1*sj2);
IkReal x13020=((1.0)*cj1*cj2);
CheckValue<IkReal> x13024=IKPowWithIntegerCheck(((-1.0)+x13018),-1);
if(!x13024.valid){
continue;
}
IkReal x13021=x13024.value;
if((((1.0)+(((-1.0)*x13018)))) < -0.00001)
continue;
IkReal x13022=IKsqrt(((1.0)+(((-1.0)*x13018))));
IkReal x13023=(r02*r22*x13021*x13022);
j4eval[0]=((IKabs((((x13019*x13023))+(((-1.0)*x13020*x13023)))))+(IKabs(((((-1.0)*r22*x13020))+((r22*x13019))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13025=(sj1*sj2);
IkReal x13026=(gconst20*r20);
IkReal x13027=(gconst19*r21);
IkReal x13028=((1.0)*cj1*cj2);
CheckValue<IkReal> x13029 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13028))+((r22*x13025)))),IkReal((((cj1*cj2*x13026))+(((-1.0)*x13025*x13026))+(((-1.0)*x13027*x13028))+((x13025*x13027)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13029.valid){
continue;
}
CheckValue<IkReal> x13030=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x13027*x13027)+(((-2.0)*x13026*x13027))+(x13026*x13026))),-1);
if(!x13030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13029.value)+(((1.5707963267949)*(x13030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13031=IKsin(j4);
IkReal x13032=IKcos(j4);
IkReal x13033=(gconst19*r21);
IkReal x13034=((1.0)*cj2);
IkReal x13035=(gconst19*r01);
IkReal x13036=(gconst19*r11);
IkReal x13037=((1.0)*x13032);
IkReal x13038=(gconst20*x13032);
IkReal x13039=((1.0)*x13031);
IkReal x13040=(gconst20*x13039);
evalcond[0]=((((-1.0)*r20*x13040))+((x13031*x13033))+(((-1.0)*r22*x13037)));
evalcond[1]=((((-1.0)*r02*x13037))+((x13031*x13035))+(((-1.0)*r00*x13040)));
evalcond[2]=((((-1.0)*x13036*x13037))+(((-1.0)*r12*x13039))+((r10*x13038)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13040))+((x13031*x13036))+(((-1.0)*r12*x13037)));
evalcond[4]=((((-1.0)*x13033*x13037))+((sj1*sj2))+(((-1.0)*r22*x13039))+(((-1.0)*cj1*x13034))+((r20*x13038)));
evalcond[5]=((((-1.0)*x13035*x13037))+(((-1.0)*r02*x13039))+(((-1.0)*cj1*sj2))+((r00*x13038))+(((-1.0)*sj1*x13034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13041=(gconst20*r10);
IkReal x13042=(gconst19*r11);
CheckValue<IkReal> x13043=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13041*x13042))+(x13041*x13041)+(x13042*x13042))),-1);
if(!x13043.valid){
continue;
}
CheckValue<IkReal> x13044 = IKatan2WithCheck(IkReal(((((-1.0)*x13042))+x13041)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13043.value)))+(x13044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13045=IKsin(j4);
IkReal x13046=IKcos(j4);
IkReal x13047=(gconst19*r21);
IkReal x13048=((1.0)*cj2);
IkReal x13049=(gconst19*r01);
IkReal x13050=(gconst19*r11);
IkReal x13051=((1.0)*x13046);
IkReal x13052=(gconst20*x13046);
IkReal x13053=((1.0)*x13045);
IkReal x13054=(gconst20*x13053);
evalcond[0]=((((-1.0)*r20*x13054))+(((-1.0)*r22*x13051))+((x13045*x13047)));
evalcond[1]=((((-1.0)*r00*x13054))+((x13045*x13049))+(((-1.0)*r02*x13051)));
evalcond[2]=((((-1.0)*r12*x13053))+((r10*x13052))+(((-1.0)*x13050*x13051)));
evalcond[3]=((1.0)+((x13045*x13050))+(((-1.0)*r10*x13054))+(((-1.0)*r12*x13051)));
evalcond[4]=(((r20*x13052))+(((-1.0)*x13047*x13051))+((sj1*sj2))+(((-1.0)*r22*x13053))+(((-1.0)*cj1*x13048)));
evalcond[5]=((((-1.0)*sj1*x13048))+(((-1.0)*x13049*x13051))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13053))+((r00*x13052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13055 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13055.valid){
continue;
}
CheckValue<IkReal> x13056=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13055.value)+(((1.5707963267949)*(x13056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13057=IKsin(j4);
IkReal x13058=IKcos(j4);
IkReal x13059=(gconst19*r21);
IkReal x13060=((1.0)*cj2);
IkReal x13061=(gconst19*r01);
IkReal x13062=(gconst19*r11);
IkReal x13063=((1.0)*x13058);
IkReal x13064=(gconst20*x13058);
IkReal x13065=((1.0)*x13057);
IkReal x13066=(gconst20*x13065);
evalcond[0]=((((-1.0)*r20*x13066))+((x13057*x13059))+(((-1.0)*r22*x13063)));
evalcond[1]=((((-1.0)*r00*x13066))+((x13057*x13061))+(((-1.0)*r02*x13063)));
evalcond[2]=((((-1.0)*x13062*x13063))+(((-1.0)*r12*x13065))+((r10*x13064)));
evalcond[3]=((1.0)+((x13057*x13062))+(((-1.0)*r10*x13066))+(((-1.0)*r12*x13063)));
evalcond[4]=(((r20*x13064))+((sj1*sj2))+(((-1.0)*x13059*x13063))+(((-1.0)*r22*x13065))+(((-1.0)*cj1*x13060)));
evalcond[5]=((((-1.0)*x13061*x13063))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13065))+((r00*x13064))+(((-1.0)*sj1*x13060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13067=((-1.0)*r00);
IkReal x13068=x12974;
CheckValue<IkReal> x13070 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13067),IKFAST_ATAN2_MAGTHRESH);
if(!x13070.valid){
continue;
}
IkReal x13069=((-1.0)*(x13070.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13069;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x13069;
IkReal gconst19=(r01*x13068);
IkReal gconst20=(x13067*x13068);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13071=((-1.0)*r00);
IkReal x13072=x12974;
CheckValue<IkReal> x13074 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13071),IKFAST_ATAN2_MAGTHRESH);
if(!x13074.valid){
continue;
}
IkReal x13073=((-1.0)*(x13074.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13073;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x13073;
IkReal gconst19=(r01*x13072);
IkReal gconst20=(x13071*x13072);
IkReal x13075=((1.0)+(((-1.0)*(r02*r02))));
CheckValue<IkReal> x13079=IKPowWithIntegerCheck(x13075,-1);
if(!x13079.valid){
continue;
}
IkReal x13076=x13079.value;
IkReal x13077=((1.0)*x13076);
IkReal x13078=((((-1.0)*x13077*(r00*r00)*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13077*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x13076)));
j4eval[0]=x13078;
j4eval[1]=IKsign(x13078);
j4eval[2]=r12;
j4eval[3]=x13075;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13080=((-1.0)*r00);
IkReal x13081=x12974;
CheckValue<IkReal> x13083 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13080),IKFAST_ATAN2_MAGTHRESH);
if(!x13083.valid){
continue;
}
IkReal x13082=((-1.0)*(x13083.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13082;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x13082;
IkReal gconst19=(r01*x13081);
IkReal gconst20=(x13080*x13081);
IkReal x13084=r02*r02;
IkReal x13085=(cj1*r12*sj2);
IkReal x13086=(cj2*r12*sj1);
CheckValue<IkReal> x13090=IKPowWithIntegerCheck(((-1.0)+x13084),-1);
if(!x13090.valid){
continue;
}
IkReal x13087=x13090.value;
if((((1.0)+(((-1.0)*x13084)))) < -0.00001)
continue;
IkReal x13088=IKsqrt(((1.0)+(((-1.0)*x13084))));
IkReal x13089=((1.0)*r02*x13087*x13088);
j4eval[0]=((IKabs(((((-1.0)*x13086*x13089))+(((-1.0)*x13085*x13089)))))+(IKabs((x13086+x13085))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13091=(cj2*sj1);
IkReal x13092=(cj1*sj2);
IkReal x13093=(gconst20*r10);
IkReal x13094=((1.0)*gconst19*r11);
CheckValue<IkReal> x13095 = IKatan2WithCheck(IkReal((((x13092*x13093))+((x13091*x13093))+(((-1.0)*x13092*x13094))+(((-1.0)*x13091*x13094)))),IkReal((((r12*x13091))+((r12*x13092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13095.valid){
continue;
}
CheckValue<IkReal> x13096=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13095.value)+(((1.5707963267949)*(x13096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13097=IKcos(j4);
IkReal x13098=IKsin(j4);
IkReal x13099=(gconst20*r20);
IkReal x13100=(gconst19*r21);
IkReal x13101=(gconst20*r10);
IkReal x13102=((1.0)*cj2);
IkReal x13103=(gconst20*r00);
IkReal x13104=((1.0)*x13097);
IkReal x13105=((1.0)*x13098);
IkReal x13106=(gconst19*x13097);
IkReal x13107=(gconst19*x13098);
evalcond[0]=((((-1.0)*x13101*x13104))+((r12*x13098))+((r11*x13106)));
evalcond[1]=(((x13098*x13100))+(((-1.0)*x13099*x13105))+(((-1.0)*r22*x13104)));
evalcond[2]=(((r01*x13107))+(((-1.0)*x13103*x13105))+(((-1.0)*r02*x13104)));
evalcond[3]=((1.0)+(((-1.0)*x13101*x13105))+(((-1.0)*r12*x13104))+((r11*x13107)));
evalcond[4]=(((x13097*x13100))+(((-1.0)*x13099*x13104))+((sj1*sj2))+((r22*x13098))+(((-1.0)*cj1*x13102)));
evalcond[5]=(((r02*x13098))+((r01*x13106))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13102))+(((-1.0)*x13103*x13104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13108=(gconst20*r10);
IkReal x13109=(gconst19*r11);
CheckValue<IkReal> x13110 = IKatan2WithCheck(IkReal(((((-1.0)*x13108))+x13109)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13110.valid){
continue;
}
CheckValue<IkReal> x13111=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13108*x13108)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13109*x13109)))+(((2.0)*x13108*x13109)))),-1);
if(!x13111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13110.value)+(((1.5707963267949)*(x13111.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13112=IKcos(j4);
IkReal x13113=IKsin(j4);
IkReal x13114=(gconst20*r20);
IkReal x13115=(gconst19*r21);
IkReal x13116=(gconst20*r10);
IkReal x13117=((1.0)*cj2);
IkReal x13118=(gconst20*r00);
IkReal x13119=((1.0)*x13112);
IkReal x13120=((1.0)*x13113);
IkReal x13121=(gconst19*x13112);
IkReal x13122=(gconst19*x13113);
evalcond[0]=(((r12*x13113))+(((-1.0)*x13116*x13119))+((r11*x13121)));
evalcond[1]=((((-1.0)*x13114*x13120))+((x13113*x13115))+(((-1.0)*r22*x13119)));
evalcond[2]=(((r01*x13122))+(((-1.0)*x13118*x13120))+(((-1.0)*r02*x13119)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13119))+((r11*x13122))+(((-1.0)*x13116*x13120)));
evalcond[4]=(((r22*x13113))+((sj1*sj2))+(((-1.0)*x13114*x13119))+((x13112*x13115))+(((-1.0)*cj1*x13117)));
evalcond[5]=(((r02*x13113))+(((-1.0)*cj1*sj2))+((r01*x13121))+(((-1.0)*x13118*x13119))+(((-1.0)*sj1*x13117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13123 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13123.valid){
continue;
}
CheckValue<IkReal> x13124=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13123.value)+(((1.5707963267949)*(x13124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13125=IKcos(j4);
IkReal x13126=IKsin(j4);
IkReal x13127=(gconst20*r20);
IkReal x13128=(gconst19*r21);
IkReal x13129=(gconst20*r10);
IkReal x13130=((1.0)*cj2);
IkReal x13131=(gconst20*r00);
IkReal x13132=((1.0)*x13125);
IkReal x13133=((1.0)*x13126);
IkReal x13134=(gconst19*x13125);
IkReal x13135=(gconst19*x13126);
evalcond[0]=((((-1.0)*x13129*x13132))+((r12*x13126))+((r11*x13134)));
evalcond[1]=((((-1.0)*r22*x13132))+((x13126*x13128))+(((-1.0)*x13127*x13133)));
evalcond[2]=(((r01*x13135))+(((-1.0)*x13131*x13133))+(((-1.0)*r02*x13132)));
evalcond[3]=((1.0)+(((-1.0)*x13129*x13133))+((r11*x13135))+(((-1.0)*r12*x13132)));
evalcond[4]=((((-1.0)*cj1*x13130))+((sj1*sj2))+((r22*x13126))+((x13125*x13128))+(((-1.0)*x13127*x13132)));
evalcond[5]=(((r01*x13134))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13130))+((r02*x13126))+(((-1.0)*x13131*x13132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13136=((-1.0)*r00);
IkReal x13137=x12974;
CheckValue<IkReal> x13139 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13136),IKFAST_ATAN2_MAGTHRESH);
if(!x13139.valid){
continue;
}
IkReal x13138=((-1.0)*(x13139.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13138;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x13138;
IkReal gconst19=(r01*x13137);
IkReal gconst20=(x13136*x13137);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13140=((-1.0)*r00);
IkReal x13141=x12974;
CheckValue<IkReal> x13143 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13140),IKFAST_ATAN2_MAGTHRESH);
if(!x13143.valid){
continue;
}
IkReal x13142=((-1.0)*(x13143.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13142;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x13142;
IkReal gconst19=(r01*x13141);
IkReal gconst20=(x13140*x13141);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13144=((-1.0)*r00);
IkReal x13145=x12974;
CheckValue<IkReal> x13147 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13144),IKFAST_ATAN2_MAGTHRESH);
if(!x13147.valid){
continue;
}
IkReal x13146=((-1.0)*(x13147.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13146;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x13146;
IkReal gconst19=(r01*x13145);
IkReal gconst20=(x13144*x13145);
IkReal x13148=r02*r02;
IkReal x13149=(r12*sj1*sj2);
IkReal x13150=(cj1*cj2*r12);
CheckValue<IkReal> x13154=IKPowWithIntegerCheck(((-1.0)+x13148),-1);
if(!x13154.valid){
continue;
}
IkReal x13151=x13154.value;
if((((1.0)+(((-1.0)*x13148)))) < -0.00001)
continue;
IkReal x13152=IKsqrt(((1.0)+(((-1.0)*x13148))));
IkReal x13153=(r02*x13151*x13152);
j4eval[0]=((IKabs((x13150+(((-1.0)*x13149)))))+(IKabs((((x13149*x13153))+(((-1.0)*x13150*x13153))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13155=(gconst20*r10);
IkReal x13156=(cj1*cj2);
IkReal x13157=(gconst19*r11);
IkReal x13158=((1.0)*sj1*sj2);
CheckValue<IkReal> x13159 = IKatan2WithCheck(IkReal(((((-1.0)*x13156*x13157))+((sj1*sj2*x13157))+((x13155*x13156))+(((-1.0)*x13155*x13158)))),IkReal(((((-1.0)*r12*x13158))+((r12*x13156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13159.valid){
continue;
}
CheckValue<IkReal> x13160=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13159.value)+(((1.5707963267949)*(x13160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13161=IKsin(j4);
IkReal x13162=IKcos(j4);
IkReal x13163=((1.0)*sj2);
IkReal x13164=((1.0)*x13162);
IkReal x13165=(gconst19*x13161);
IkReal x13166=(gconst20*x13162);
IkReal x13167=((1.0)*x13161);
IkReal x13168=(gconst20*x13167);
evalcond[0]=((((-1.0)*r20*x13168))+(((-1.0)*r22*x13164))+((r21*x13165)));
evalcond[1]=((((-1.0)*r00*x13168))+((r01*x13165))+(((-1.0)*r02*x13164)));
evalcond[2]=((((-1.0)*r12*x13167))+(((-1.0)*gconst19*r11*x13164))+((r10*x13166)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13164))+((r11*x13165))+(((-1.0)*r10*x13168)));
evalcond[4]=(((r00*x13166))+(((-1.0)*sj1*x13163))+(((-1.0)*gconst19*r01*x13164))+((cj1*cj2))+(((-1.0)*r02*x13167)));
evalcond[5]=(((r20*x13166))+(((-1.0)*cj1*x13163))+(((-1.0)*gconst19*r21*x13164))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x13167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13169=(gconst20*r10);
IkReal x13170=(gconst19*r11);
CheckValue<IkReal> x13171=IKPowWithIntegerCheck(IKsign(((((-2.0)*x13169*x13170))+(r12*r12)+(x13169*x13169)+(x13170*x13170))),-1);
if(!x13171.valid){
continue;
}
CheckValue<IkReal> x13172 = IKatan2WithCheck(IkReal(((((-1.0)*x13170))+x13169)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13171.value)))+(x13172.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13173=IKsin(j4);
IkReal x13174=IKcos(j4);
IkReal x13175=((1.0)*sj2);
IkReal x13176=((1.0)*x13174);
IkReal x13177=(gconst19*x13173);
IkReal x13178=(gconst20*x13174);
IkReal x13179=((1.0)*x13173);
IkReal x13180=(gconst20*x13179);
evalcond[0]=((((-1.0)*r20*x13180))+(((-1.0)*r22*x13176))+((r21*x13177)));
evalcond[1]=(((r01*x13177))+(((-1.0)*r02*x13176))+(((-1.0)*r00*x13180)));
evalcond[2]=((((-1.0)*gconst19*r11*x13176))+(((-1.0)*r12*x13179))+((r10*x13178)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13180))+(((-1.0)*r12*x13176))+((r11*x13177)));
evalcond[4]=(((r00*x13178))+(((-1.0)*gconst19*r01*x13176))+(((-1.0)*sj1*x13175))+(((-1.0)*r02*x13179))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x13175))+(((-1.0)*gconst19*r21*x13176))+((r20*x13178))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x13179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13181 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13181.valid){
continue;
}
CheckValue<IkReal> x13182=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13181.value)+(((1.5707963267949)*(x13182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13183=IKsin(j4);
IkReal x13184=IKcos(j4);
IkReal x13185=((1.0)*sj2);
IkReal x13186=((1.0)*x13184);
IkReal x13187=(gconst19*x13183);
IkReal x13188=(gconst20*x13184);
IkReal x13189=((1.0)*x13183);
IkReal x13190=(gconst20*x13189);
evalcond[0]=(((r21*x13187))+(((-1.0)*r22*x13186))+(((-1.0)*r20*x13190)));
evalcond[1]=((((-1.0)*r02*x13186))+((r01*x13187))+(((-1.0)*r00*x13190)));
evalcond[2]=((((-1.0)*r12*x13189))+((r10*x13188))+(((-1.0)*gconst19*r11*x13186)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13190))+(((-1.0)*r12*x13186))+((r11*x13187)));
evalcond[4]=((((-1.0)*r02*x13189))+((r00*x13188))+(((-1.0)*sj1*x13185))+((cj1*cj2))+(((-1.0)*gconst19*r01*x13186)));
evalcond[5]=((((-1.0)*r22*x13189))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst19*r21*x13186))+(((-1.0)*cj1*x13185))+((r20*x13188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13191=((-1.0)*r00);
IkReal x13192=x12974;
CheckValue<IkReal> x13194 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13191),IKFAST_ATAN2_MAGTHRESH);
if(!x13194.valid){
continue;
}
IkReal x13193=((-1.0)*(x13194.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13193;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x13193;
IkReal gconst19=(r01*x13192);
IkReal gconst20=(x13191*x13192);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13195=((-1.0)*r00);
IkReal x13196=x12974;
CheckValue<IkReal> x13198 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13195),IKFAST_ATAN2_MAGTHRESH);
if(!x13198.valid){
continue;
}
IkReal x13197=((-1.0)*(x13198.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13197;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x13197;
IkReal gconst19=(r01*x13196);
IkReal gconst20=(x13195*x13196);
IkReal x13199=((1.0)+(((-1.0)*(r02*r02))));
CheckValue<IkReal> x13203=IKPowWithIntegerCheck(x13199,-1);
if(!x13203.valid){
continue;
}
IkReal x13200=x13203.value;
IkReal x13201=((1.0)*x13200);
IkReal x13202=((((-1.0)*x13201*(r01*r01)*(r11*r11)))+(((-1.0)*x13201*(r00*r00)*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-2.0)*r00*r01*r10*r11*x13200)));
j4eval[0]=x13202;
j4eval[1]=IKsign(x13202);
j4eval[2]=r12;
j4eval[3]=x13199;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13204=((-1.0)*r00);
IkReal x13205=x12974;
CheckValue<IkReal> x13207 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13204),IKFAST_ATAN2_MAGTHRESH);
if(!x13207.valid){
continue;
}
IkReal x13206=((-1.0)*(x13207.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13206;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x13206;
IkReal gconst19=(r01*x13205);
IkReal gconst20=(x13204*x13205);
IkReal x13208=r02*r02;
IkReal x13209=(cj1*cj2*r12);
IkReal x13210=(r12*sj1*sj2);
CheckValue<IkReal> x13214=IKPowWithIntegerCheck(((-1.0)+x13208),-1);
if(!x13214.valid){
continue;
}
IkReal x13211=x13214.value;
if((((1.0)+(((-1.0)*x13208)))) < -0.00001)
continue;
IkReal x13212=IKsqrt(((1.0)+(((-1.0)*x13208))));
IkReal x13213=(r02*x13211*x13212);
j4eval[0]=((IKabs((x13210+(((-1.0)*x13209)))))+(IKabs(((((-1.0)*x13210*x13213))+((x13209*x13213))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13215=(sj1*sj2);
IkReal x13216=(gconst20*r10);
IkReal x13217=(cj1*cj2);
IkReal x13218=(gconst19*r11);
CheckValue<IkReal> x13219=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13219.valid){
continue;
}
CheckValue<IkReal> x13220 = IKatan2WithCheck(IkReal((((x13215*x13216))+(((-1.0)*x13215*x13218))+((x13217*x13218))+(((-1.0)*x13216*x13217)))),IkReal((((r12*x13215))+(((-1.0)*r12*x13217)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13219.value)))+(x13220.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13221=IKcos(j4);
IkReal x13222=IKsin(j4);
IkReal x13223=(gconst20*r20);
IkReal x13224=(gconst19*r21);
IkReal x13225=(gconst20*r10);
IkReal x13226=(gconst19*r11);
IkReal x13227=((1.0)*sj2);
IkReal x13228=(gconst19*r01);
IkReal x13229=(gconst20*r00);
IkReal x13230=((1.0)*x13221);
IkReal x13231=((1.0)*x13222);
evalcond[0]=((((-1.0)*x13225*x13230))+((x13221*x13226))+((r12*x13222)));
evalcond[1]=((((-1.0)*x13223*x13231))+((x13222*x13224))+(((-1.0)*r22*x13230)));
evalcond[2]=((((-1.0)*x13229*x13231))+(((-1.0)*r02*x13230))+((x13222*x13228)));
evalcond[3]=((1.0)+(((-1.0)*x13225*x13231))+(((-1.0)*r12*x13230))+((x13222*x13226)));
evalcond[4]=(((r02*x13222))+(((-1.0)*x13229*x13230))+((x13221*x13228))+(((-1.0)*sj1*x13227))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x13227))+((r22*x13222))+(((-1.0)*cj2*sj1))+((x13221*x13224))+(((-1.0)*x13223*x13230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13232=(gconst20*r10);
IkReal x13233=(gconst19*r11);
CheckValue<IkReal> x13234=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13233*x13233)))+(((-1.0)*(x13232*x13232)))+(((-1.0)*(r12*r12)))+(((2.0)*x13232*x13233)))),-1);
if(!x13234.valid){
continue;
}
CheckValue<IkReal> x13235 = IKatan2WithCheck(IkReal((x13233+(((-1.0)*x13232)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13234.value)))+(x13235.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13236=IKcos(j4);
IkReal x13237=IKsin(j4);
IkReal x13238=(gconst20*r20);
IkReal x13239=(gconst19*r21);
IkReal x13240=(gconst20*r10);
IkReal x13241=(gconst19*r11);
IkReal x13242=((1.0)*sj2);
IkReal x13243=(gconst19*r01);
IkReal x13244=(gconst20*r00);
IkReal x13245=((1.0)*x13236);
IkReal x13246=((1.0)*x13237);
evalcond[0]=(((x13236*x13241))+((r12*x13237))+(((-1.0)*x13240*x13245)));
evalcond[1]=((((-1.0)*r22*x13245))+((x13237*x13239))+(((-1.0)*x13238*x13246)));
evalcond[2]=(((x13237*x13243))+(((-1.0)*r02*x13245))+(((-1.0)*x13244*x13246)));
evalcond[3]=((1.0)+((x13237*x13241))+(((-1.0)*r12*x13245))+(((-1.0)*x13240*x13246)));
evalcond[4]=(((x13236*x13243))+((r02*x13237))+(((-1.0)*x13244*x13245))+((cj1*cj2))+(((-1.0)*sj1*x13242)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x13236*x13239))+((r22*x13237))+(((-1.0)*x13238*x13245))+(((-1.0)*cj1*x13242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13247 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13247.valid){
continue;
}
CheckValue<IkReal> x13248=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13247.value)+(((1.5707963267949)*(x13248.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13249=IKcos(j4);
IkReal x13250=IKsin(j4);
IkReal x13251=(gconst20*r20);
IkReal x13252=(gconst19*r21);
IkReal x13253=(gconst20*r10);
IkReal x13254=(gconst19*r11);
IkReal x13255=((1.0)*sj2);
IkReal x13256=(gconst19*r01);
IkReal x13257=(gconst20*r00);
IkReal x13258=((1.0)*x13249);
IkReal x13259=((1.0)*x13250);
evalcond[0]=(((x13249*x13254))+((r12*x13250))+(((-1.0)*x13253*x13258)));
evalcond[1]=((((-1.0)*r22*x13258))+((x13250*x13252))+(((-1.0)*x13251*x13259)));
evalcond[2]=((((-1.0)*x13257*x13259))+(((-1.0)*r02*x13258))+((x13250*x13256)));
evalcond[3]=((1.0)+((x13250*x13254))+(((-1.0)*r12*x13258))+(((-1.0)*x13253*x13259)));
evalcond[4]=(((x13249*x13256))+(((-1.0)*x13257*x13258))+((r02*x13250))+((cj1*cj2))+(((-1.0)*sj1*x13255)));
evalcond[5]=(((x13249*x13252))+(((-1.0)*cj2*sj1))+((r22*x13250))+(((-1.0)*x13251*x13258))+(((-1.0)*cj1*x13255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13260=((-1.0)*r00);
IkReal x13261=((-1.0)*r01);
CheckValue<IkReal> x13263 = IKatan2WithCheck(IkReal(x13261),IkReal(x13260),IKFAST_ATAN2_MAGTHRESH);
if(!x13263.valid){
continue;
}
IkReal x13262=((-1.0)*(x13263.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13262;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(pz*x13260);
rxp1_0=(pz*r11);
rxp1_1=(pz*x13261);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst18=x13262;
IkReal gconst19=r01;
IkReal gconst20=x13260;
IkReal x13264=(r01*r11);
IkReal x13265=(r00*r10);
IkReal x13266=((1.0)*cj3);
j4eval[0]=(x13265+x13264);
j4eval[1]=((((-1.0)*x13265*x13266))+(((-1.0)*x13264*x13266)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13267=((-1.0)*r00);
IkReal x13268=((-1.0)*r01);
CheckValue<IkReal> x13270 = IKatan2WithCheck(IkReal(x13268),IkReal(x13267),IKFAST_ATAN2_MAGTHRESH);
if(!x13270.valid){
continue;
}
IkReal x13269=((-1.0)*(x13270.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13269;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(pz*x13267);
rxp1_0=(pz*r11);
rxp1_1=(pz*x13268);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst18=x13269;
IkReal gconst19=r01;
IkReal gconst20=x13267;
IkReal x13271=(r00*r10);
IkReal x13272=((1.0)*sj3);
IkReal x13273=(r01*r11);
j4eval[0]=(x13271+x13273);
j4eval[1]=((((-1.0)*x13272*x13273))+(((-1.0)*x13271*x13272)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13274=((-1.0)*r00);
IkReal x13275=((-1.0)*r01);
CheckValue<IkReal> x13277 = IKatan2WithCheck(IkReal(x13275),IkReal(x13274),IKFAST_ATAN2_MAGTHRESH);
if(!x13277.valid){
continue;
}
IkReal x13276=((-1.0)*(x13277.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13276;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(pz*x13274);
rxp1_0=(pz*r11);
rxp1_1=(pz*x13275);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst18=x13276;
IkReal gconst19=r01;
IkReal gconst20=x13274;
IkReal x13278=((1.0)*sj3);
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r01*r11*x13278))+(((-1.0)*r00*r10*x13278)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13279=((1.0)*r11);
CheckValue<IkReal> x13280=IKPowWithIntegerCheck(r22,-1);
if(!x13280.valid){
continue;
}
CheckValue<IkReal> x13281=IKPowWithIntegerCheck(sj3,-1);
if(!x13281.valid){
continue;
}
CheckValue<IkReal> x13282=IKPowWithIntegerCheck(((((-1.0)*gconst19*sj3*x13279))+((gconst20*r10*sj3))),-1);
if(!x13282.valid){
continue;
}
if( IKabs(((x13280.value)*(x13281.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13282.value)*(((((-1.0)*cj3*gconst20*x13279))+(((-1.0)*cj3*gconst19*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13280.value)*(x13281.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x13282.value)*(((((-1.0)*cj3*gconst20*x13279))+(((-1.0)*cj3*gconst19*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13280.value)*(x13281.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x13282.value)*(((((-1.0)*cj3*gconst20*x13279))+(((-1.0)*cj3*gconst19*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13283=IKsin(j4);
IkReal x13284=IKcos(j4);
IkReal x13285=(cj3*gconst19);
IkReal x13286=(gconst20*r10);
IkReal x13287=(cj3*gconst20);
IkReal x13288=((1.0)*cj2);
IkReal x13289=((1.0)*sj2);
IkReal x13290=(gconst19*sj3);
IkReal x13291=(cj1*x13289);
IkReal x13292=(sj1*x13288);
IkReal x13293=((1.0)*x13284);
IkReal x13294=((1.0)*x13283);
IkReal x13295=((1.0)*gconst20*sj3);
IkReal x13296=(gconst19*x13283);
IkReal x13297=(gconst20*sj3*x13284);
IkReal x13298=(x13292+x13291);
evalcond[0]=((-1.0)*r22*x13284);
evalcond[1]=((((-1.0)*gconst20*r00*x13294))+((r01*x13296)));
evalcond[2]=((1.0)+((r11*x13296))+(((-1.0)*x13286*x13294)));
evalcond[3]=((((-1.0)*cj1*x13288))+((sj1*sj2))+(((-1.0)*r22*sj3*x13294)));
evalcond[4]=((((-1.0)*cj3*r22*x13294))+(((-1.0)*x13298)));
evalcond[5]=(((sj3*x13284*x13286))+((r11*x13287))+((r10*x13285))+(((-1.0)*r11*x13290*x13293)));
evalcond[6]=((((-1.0)*r10*x13290))+(((-1.0)*r11*x13285*x13293))+(((-1.0)*r11*x13295))+((cj3*x13284*x13286)));
evalcond[7]=((((-1.0)*r01*x13290*x13293))+((r01*x13287))+((r00*x13285))+(((-1.0)*x13298))+((r00*x13297)));
evalcond[8]=((((-1.0)*sj1*x13289))+(((-1.0)*r01*x13285*x13293))+((r00*x13284*x13287))+((cj1*cj2))+(((-1.0)*r00*x13290))+(((-1.0)*r01*x13295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13299=(gconst20*r10);
IkReal x13300=((1.0)*r11);
CheckValue<IkReal> x13301=IKPowWithIntegerCheck(((((-1.0)*x13299))+((gconst19*r11))),-1);
if(!x13301.valid){
continue;
}
CheckValue<IkReal> x13302=IKPowWithIntegerCheck((((sj3*x13299))+(((-1.0)*gconst19*sj3*x13300))),-1);
if(!x13302.valid){
continue;
}
if( IKabs(((-1.0)*(x13301.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13302.value)*(((((-1.0)*cj3*gconst20*x13300))+(((-1.0)*cj3*gconst19*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13301.value)))+IKsqr(((x13302.value)*(((((-1.0)*cj3*gconst20*x13300))+(((-1.0)*cj3*gconst19*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13301.value)), ((x13302.value)*(((((-1.0)*cj3*gconst20*x13300))+(((-1.0)*cj3*gconst19*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13303=IKsin(j4);
IkReal x13304=IKcos(j4);
IkReal x13305=(cj3*gconst19);
IkReal x13306=(gconst20*r10);
IkReal x13307=(cj3*gconst20);
IkReal x13308=((1.0)*cj2);
IkReal x13309=((1.0)*sj2);
IkReal x13310=(gconst19*sj3);
IkReal x13311=(cj1*x13309);
IkReal x13312=(sj1*x13308);
IkReal x13313=((1.0)*x13304);
IkReal x13314=((1.0)*x13303);
IkReal x13315=((1.0)*gconst20*sj3);
IkReal x13316=(gconst19*x13303);
IkReal x13317=(gconst20*sj3*x13304);
IkReal x13318=(x13312+x13311);
evalcond[0]=((-1.0)*r22*x13304);
evalcond[1]=((((-1.0)*gconst20*r00*x13314))+((r01*x13316)));
evalcond[2]=((1.0)+((r11*x13316))+(((-1.0)*x13306*x13314)));
evalcond[3]=((((-1.0)*r22*sj3*x13314))+(((-1.0)*cj1*x13308))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj3*r22*x13314))+(((-1.0)*x13318)));
evalcond[5]=(((r10*x13305))+(((-1.0)*r11*x13310*x13313))+((r11*x13307))+((sj3*x13304*x13306)));
evalcond[6]=((((-1.0)*r10*x13310))+((cj3*x13304*x13306))+(((-1.0)*r11*x13305*x13313))+(((-1.0)*r11*x13315)));
evalcond[7]=(((r00*x13317))+((r00*x13305))+((r01*x13307))+(((-1.0)*r01*x13310*x13313))+(((-1.0)*x13318)));
evalcond[8]=((((-1.0)*sj1*x13309))+((r00*x13304*x13307))+(((-1.0)*r01*x13305*x13313))+(((-1.0)*r00*x13310))+((cj1*cj2))+(((-1.0)*r01*x13315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13319=(gconst20*r10);
IkReal x13320=(gconst19*r11);
CheckValue<IkReal> x13321=IKPowWithIntegerCheck(((((-1.0)*x13319))+x13320),-1);
if(!x13321.valid){
continue;
}
CheckValue<IkReal> x13322=IKPowWithIntegerCheck((((cj3*x13319))+(((-1.0)*cj3*x13320))),-1);
if(!x13322.valid){
continue;
}
if( IKabs(((-1.0)*(x13321.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13322.value)*((((gconst19*r10*sj3))+((gconst20*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13321.value)))+IKsqr(((x13322.value)*((((gconst19*r10*sj3))+((gconst20*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13321.value)), ((x13322.value)*((((gconst19*r10*sj3))+((gconst20*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13323=IKsin(j4);
IkReal x13324=IKcos(j4);
IkReal x13325=(cj3*gconst19);
IkReal x13326=(gconst20*r10);
IkReal x13327=(cj3*gconst20);
IkReal x13328=((1.0)*cj2);
IkReal x13329=((1.0)*sj2);
IkReal x13330=(gconst19*sj3);
IkReal x13331=(cj1*x13329);
IkReal x13332=(sj1*x13328);
IkReal x13333=((1.0)*x13324);
IkReal x13334=((1.0)*x13323);
IkReal x13335=((1.0)*gconst20*sj3);
IkReal x13336=(gconst19*x13323);
IkReal x13337=(gconst20*sj3*x13324);
IkReal x13338=(x13331+x13332);
evalcond[0]=((-1.0)*r22*x13324);
evalcond[1]=(((r01*x13336))+(((-1.0)*gconst20*r00*x13334)));
evalcond[2]=((1.0)+(((-1.0)*x13326*x13334))+((r11*x13336)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x13328))+(((-1.0)*r22*sj3*x13334)));
evalcond[4]=((((-1.0)*x13338))+(((-1.0)*cj3*r22*x13334)));
evalcond[5]=((((-1.0)*r11*x13330*x13333))+((r10*x13325))+((sj3*x13324*x13326))+((r11*x13327)));
evalcond[6]=((((-1.0)*r11*x13335))+((cj3*x13324*x13326))+(((-1.0)*r10*x13330))+(((-1.0)*r11*x13325*x13333)));
evalcond[7]=((((-1.0)*x13338))+(((-1.0)*r01*x13330*x13333))+((r00*x13337))+((r00*x13325))+((r01*x13327)));
evalcond[8]=((((-1.0)*sj1*x13329))+(((-1.0)*r00*x13330))+(((-1.0)*r01*x13325*x13333))+(((-1.0)*r01*x13335))+((r00*x13324*x13327))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13339=gconst20*gconst20;
IkReal x13340=gconst19*gconst19;
IkReal x13341=(cj3*r20);
IkReal x13342=(r20*sj3);
IkReal x13343=((1.0)*r10*sj3);
IkReal x13344=(r21*x13340);
IkReal x13345=((1.0)*gconst20*r11);
IkReal x13346=(gconst19*gconst20*r10);
CheckValue<IkReal> x13347 = IKatan2WithCheck(IkReal(((((-1.0)*r22*sj3*x13345))+(((-1.0)*gconst19*r22*x13343)))),IkReal((((r11*x13339*x13342))+((x13342*x13346))+(((-1.0)*x13343*x13344))+(((-1.0)*gconst19*r21*sj3*x13345)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13347.valid){
continue;
}
CheckValue<IkReal> x13348=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*cj3*r21*x13346))+((r10*x13339*x13341))+(((-1.0)*gconst19*x13341*x13345))+((cj3*r11*x13344)))),-1);
if(!x13348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13347.value)+(((1.5707963267949)*(x13348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13349=IKsin(j4);
IkReal x13350=IKcos(j4);
IkReal x13351=(r00*sj3);
IkReal x13352=(gconst19*r21);
IkReal x13353=(cj3*gconst19);
IkReal x13354=(sj1*sj2);
IkReal x13355=((1.0)*cj2);
IkReal x13356=(r20*sj3);
IkReal x13357=(cj3*gconst20);
IkReal x13358=(r10*sj3);
IkReal x13359=(gconst19*sj3);
IkReal x13360=((1.0)*gconst19);
IkReal x13361=((1.0)*cj1*sj2);
IkReal x13362=(sj1*x13355);
IkReal x13363=((1.0)*x13350);
IkReal x13364=((1.0)*x13349);
IkReal x13365=(gconst20*x13350);
IkReal x13366=((1.0)*gconst20*sj3);
IkReal x13367=(gconst19*x13349);
IkReal x13368=(x13362+x13361);
evalcond[0]=((((-1.0)*r22*x13363))+(((-1.0)*gconst20*r20*x13364))+((x13349*x13352)));
evalcond[1]=(((r01*x13367))+(((-1.0)*r02*x13363))+(((-1.0)*gconst20*r00*x13364)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13363))+((r11*x13367))+(((-1.0)*gconst20*r10*x13364)));
evalcond[3]=(((r10*x13353))+((x13358*x13365))+(((-1.0)*r11*x13359*x13363))+(((-1.0)*r12*sj3*x13364))+((r11*x13357)));
evalcond[4]=((((-1.0)*r11*x13353*x13363))+(((-1.0)*cj3*r12*x13364))+((r10*x13350*x13357))+(((-1.0)*x13358*x13360))+(((-1.0)*r11*x13366)));
evalcond[5]=(((r20*x13353))+((x13356*x13365))+(((-1.0)*r22*sj3*x13364))+((r21*x13357))+(((-1.0)*cj1*x13355))+x13354+(((-1.0)*sj3*x13352*x13363)));
evalcond[6]=((((-1.0)*r01*x13359*x13363))+((r01*x13357))+((r00*x13353))+((x13351*x13365))+(((-1.0)*x13368))+(((-1.0)*r02*sj3*x13364)));
evalcond[7]=((((-1.0)*r01*x13353*x13363))+(((-1.0)*cj3*r02*x13364))+(((-1.0)*x13351*x13360))+(((-1.0)*r01*x13366))+(((-1.0)*x13354))+((cj1*cj2))+((r00*x13350*x13357)));
evalcond[8]=((((-1.0)*x13356*x13360))+(((-1.0)*cj3*r22*x13364))+(((-1.0)*r21*x13366))+(((-1.0)*cj3*x13352*x13363))+(((-1.0)*x13368))+((r20*x13350*x13357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13369=gconst19*gconst19;
IkReal x13370=gconst20*gconst20;
IkReal x13371=(r21*sj3);
IkReal x13372=(cj3*r11);
IkReal x13373=(gconst19*gconst20);
IkReal x13374=((1.0)*r10);
IkReal x13375=(cj3*r10);
IkReal x13376=(r20*x13370);
CheckValue<IkReal> x13377 = IKatan2WithCheck(IkReal((((gconst19*r22*x13375))+((gconst20*r22*x13372)))),IkReal((((r21*x13369*x13375))+(((-1.0)*x13372*x13376))+(((-1.0)*cj3*r20*x13373*x13374))+((r21*x13372*x13373)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13377.valid){
continue;
}
CheckValue<IkReal> x13378=IKPowWithIntegerCheck(IKsign((((r10*sj3*x13376))+((r12*r22*sj3))+(((-1.0)*x13371*x13373*x13374))+((r11*x13369*x13371))+(((-1.0)*r11*r20*sj3*x13373)))),-1);
if(!x13378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13377.value)+(((1.5707963267949)*(x13378.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13379=IKsin(j4);
IkReal x13380=IKcos(j4);
IkReal x13381=(r00*sj3);
IkReal x13382=(gconst19*r21);
IkReal x13383=(cj3*gconst19);
IkReal x13384=(sj1*sj2);
IkReal x13385=((1.0)*cj2);
IkReal x13386=(r20*sj3);
IkReal x13387=(cj3*gconst20);
IkReal x13388=(r10*sj3);
IkReal x13389=(gconst19*sj3);
IkReal x13390=((1.0)*gconst19);
IkReal x13391=((1.0)*cj1*sj2);
IkReal x13392=(sj1*x13385);
IkReal x13393=((1.0)*x13380);
IkReal x13394=((1.0)*x13379);
IkReal x13395=(gconst20*x13380);
IkReal x13396=((1.0)*gconst20*sj3);
IkReal x13397=(gconst19*x13379);
IkReal x13398=(x13392+x13391);
evalcond[0]=((((-1.0)*r22*x13393))+(((-1.0)*gconst20*r20*x13394))+((x13379*x13382)));
evalcond[1]=(((r01*x13397))+(((-1.0)*gconst20*r00*x13394))+(((-1.0)*r02*x13393)));
evalcond[2]=((1.0)+((r11*x13397))+(((-1.0)*gconst20*r10*x13394))+(((-1.0)*r12*x13393)));
evalcond[3]=(((x13388*x13395))+((r11*x13387))+((r10*x13383))+(((-1.0)*r11*x13389*x13393))+(((-1.0)*r12*sj3*x13394)));
evalcond[4]=(((r10*x13380*x13387))+(((-1.0)*r11*x13383*x13393))+(((-1.0)*cj3*r12*x13394))+(((-1.0)*x13388*x13390))+(((-1.0)*r11*x13396)));
evalcond[5]=(((r20*x13383))+(((-1.0)*sj3*x13382*x13393))+((x13386*x13395))+(((-1.0)*r22*sj3*x13394))+(((-1.0)*cj1*x13385))+x13384+((r21*x13387)));
evalcond[6]=(((r01*x13387))+((r00*x13383))+((x13381*x13395))+(((-1.0)*x13398))+(((-1.0)*r01*x13389*x13393))+(((-1.0)*r02*sj3*x13394)));
evalcond[7]=(((r00*x13380*x13387))+(((-1.0)*x13384))+(((-1.0)*r01*x13383*x13393))+(((-1.0)*r01*x13396))+(((-1.0)*x13381*x13390))+((cj1*cj2))+(((-1.0)*cj3*r02*x13394)));
evalcond[8]=((((-1.0)*cj3*r22*x13394))+(((-1.0)*x13386*x13390))+(((-1.0)*cj3*x13382*x13393))+(((-1.0)*r21*x13396))+((r20*x13380*x13387))+(((-1.0)*x13398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13399 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13399.valid){
continue;
}
CheckValue<IkReal> x13400=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13399.value)+(((1.5707963267949)*(x13400.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13401=IKsin(j4);
IkReal x13402=IKcos(j4);
IkReal x13403=(r00*sj3);
IkReal x13404=(gconst19*r21);
IkReal x13405=(cj3*gconst19);
IkReal x13406=(sj1*sj2);
IkReal x13407=((1.0)*cj2);
IkReal x13408=(r20*sj3);
IkReal x13409=(cj3*gconst20);
IkReal x13410=(r10*sj3);
IkReal x13411=(gconst19*sj3);
IkReal x13412=((1.0)*gconst19);
IkReal x13413=((1.0)*cj1*sj2);
IkReal x13414=(sj1*x13407);
IkReal x13415=((1.0)*x13402);
IkReal x13416=((1.0)*x13401);
IkReal x13417=(gconst20*x13402);
IkReal x13418=((1.0)*gconst20*sj3);
IkReal x13419=(gconst19*x13401);
IkReal x13420=(x13413+x13414);
evalcond[0]=((((-1.0)*r22*x13415))+(((-1.0)*gconst20*r20*x13416))+((x13401*x13404)));
evalcond[1]=((((-1.0)*r02*x13415))+((r01*x13419))+(((-1.0)*gconst20*r00*x13416)));
evalcond[2]=((1.0)+(((-1.0)*gconst20*r10*x13416))+(((-1.0)*r12*x13415))+((r11*x13419)));
evalcond[3]=(((x13410*x13417))+((r11*x13409))+((r10*x13405))+(((-1.0)*r12*sj3*x13416))+(((-1.0)*r11*x13411*x13415)));
evalcond[4]=((((-1.0)*r11*x13418))+(((-1.0)*x13410*x13412))+(((-1.0)*r11*x13405*x13415))+(((-1.0)*cj3*r12*x13416))+((r10*x13402*x13409)));
evalcond[5]=(x13406+((x13408*x13417))+(((-1.0)*sj3*x13404*x13415))+(((-1.0)*cj1*x13407))+((r21*x13409))+(((-1.0)*r22*sj3*x13416))+((r20*x13405)));
evalcond[6]=(((x13403*x13417))+((r01*x13409))+((r00*x13405))+(((-1.0)*x13420))+(((-1.0)*r01*x13411*x13415))+(((-1.0)*r02*sj3*x13416)));
evalcond[7]=((((-1.0)*r01*x13418))+(((-1.0)*x13403*x13412))+(((-1.0)*cj3*r02*x13416))+(((-1.0)*r01*x13405*x13415))+(((-1.0)*x13406))+((cj1*cj2))+((r00*x13402*x13409)));
evalcond[8]=((((-1.0)*r21*x13418))+(((-1.0)*x13408*x13412))+((r20*x13402*x13409))+(((-1.0)*cj3*r22*x13416))+(((-1.0)*x13420))+(((-1.0)*cj3*x13404*x13415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13421=((-1.0)*r01);
IkReal x13423 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13423)==0){
continue;
}
IkReal x13422=pow(x13423,-0.5);
CheckValue<IkReal> x13424 = IKatan2WithCheck(IkReal(x13421),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13424.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13424.value))));
IkReal gconst22=(x13421*x13422);
IkReal gconst23=((1.0)*r00*x13422);
CheckValue<IkReal> x13425 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13425.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13425.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13426=((-1.0)*r01);
CheckValue<IkReal> x13429 = IKatan2WithCheck(IkReal(x13426),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13429.valid){
continue;
}
IkReal x13427=((1.0)*(x13429.value));
IkReal x13428=x13422;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13427)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13427)));
IkReal gconst22=(x13426*x13428);
IkReal gconst23=((1.0)*r00*x13428);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13430=((-1.0)*r01);
CheckValue<IkReal> x13433 = IKatan2WithCheck(IkReal(x13430),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13433.valid){
continue;
}
IkReal x13431=((1.0)*(x13433.value));
IkReal x13432=x13422;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13431)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13431)));
IkReal gconst22=(x13430*x13432);
IkReal gconst23=((1.0)*r00*x13432);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13434=gconst22*gconst22;
IkReal x13435=gconst23*gconst23;
IkReal x13436=(r11*sj3);
IkReal x13437=(gconst22*gconst23);
IkReal x13438=((1.0)*r20);
IkReal x13439=(cj3*r11);
IkReal x13440=(r10*sj3);
IkReal x13441=(cj3*r10);
IkReal x13442=(r21*x13434);
CheckValue<IkReal> x13443=IKPowWithIntegerCheck(IKsign((((r20*x13435*x13440))+(((-1.0)*x13436*x13437*x13438))+((x13436*x13442))+((r12*r22*sj3))+(((-1.0)*r21*x13437*x13440)))),-1);
if(!x13443.valid){
continue;
}
CheckValue<IkReal> x13444 = IKatan2WithCheck(IkReal((((gconst22*r22*x13441))+((gconst23*r22*x13439)))),IkReal((((r21*x13437*x13439))+(((-1.0)*x13437*x13438*x13441))+(((-1.0)*x13435*x13438*x13439))+((x13441*x13442)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13443.value)))+(x13444.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13445=IKsin(j4);
IkReal x13446=IKcos(j4);
IkReal x13447=((1.0)*r22);
IkReal x13448=((1.0)*sj3);
IkReal x13449=((1.0)*cj1);
IkReal x13450=(sj1*sj2);
IkReal x13451=(gconst22*r20);
IkReal x13452=(gconst23*r21);
IkReal x13453=(gconst22*r00);
IkReal x13454=(gconst22*r10);
IkReal x13455=(gconst23*r10);
IkReal x13456=((1.0)*r02);
IkReal x13457=((1.0)*gconst22);
IkReal x13458=(gconst23*r11);
IkReal x13459=(gconst23*r01);
IkReal x13460=(gconst23*r00);
IkReal x13461=(sj2*x13449);
IkReal x13462=((1.0)*cj2*sj1);
IkReal x13463=(r12*x13445);
IkReal x13464=(cj3*x13445);
IkReal x13465=(cj3*x13446);
IkReal x13466=(gconst22*x13446);
IkReal x13467=(sj3*x13446);
IkReal x13468=((1.0)*x13445);
IkReal x13469=(gconst22*x13445);
IkReal x13470=(gconst23*r20*x13446);
IkReal x13471=(x13461+x13462);
evalcond[0]=((((-1.0)*gconst23*r20*x13468))+((r21*x13469))+(((-1.0)*x13446*x13447)));
evalcond[1]=((((-1.0)*x13460*x13468))+(((-1.0)*x13446*x13456))+((r01*x13469)));
evalcond[2]=((1.0)+((r11*x13469))+(((-1.0)*x13455*x13468))+(((-1.0)*r12*x13446)));
evalcond[3]=((((-1.0)*x13448*x13463))+((x13455*x13467))+(((-1.0)*r11*x13448*x13466))+((cj3*x13458))+((cj3*x13454)));
evalcond[4]=((((-1.0)*r11*x13457*x13465))+(((-1.0)*cj3*x13463))+(((-1.0)*x13448*x13458))+(((-1.0)*x13448*x13454))+((x13455*x13465)));
evalcond[5]=(x13450+(((-1.0)*sj3*x13445*x13447))+((gconst23*r20*x13467))+(((-1.0)*r21*x13448*x13466))+(((-1.0)*cj2*x13449))+((cj3*x13451))+((cj3*x13452)));
evalcond[6]=(((x13460*x13467))+(((-1.0)*x13471))+(((-1.0)*r01*x13448*x13466))+((cj3*x13459))+((cj3*x13453))+(((-1.0)*r02*x13445*x13448)));
evalcond[7]=(((x13460*x13465))+(((-1.0)*x13448*x13459))+(((-1.0)*x13448*x13453))+(((-1.0)*x13456*x13464))+(((-1.0)*x13450))+((cj1*cj2))+(((-1.0)*r01*x13457*x13465)));
evalcond[8]=((((-1.0)*x13447*x13464))+((gconst23*r20*x13465))+(((-1.0)*x13448*x13452))+(((-1.0)*x13448*x13451))+(((-1.0)*x13471))+(((-1.0)*r21*x13457*x13465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13472=((1.0)*gconst23);
CheckValue<IkReal> x13473 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x13472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13473.valid){
continue;
}
CheckValue<IkReal> x13474=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13472)))),-1);
if(!x13474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13473.value)+(((1.5707963267949)*(x13474.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13475=IKsin(j4);
IkReal x13476=IKcos(j4);
IkReal x13477=((1.0)*r22);
IkReal x13478=((1.0)*sj3);
IkReal x13479=((1.0)*cj1);
IkReal x13480=(sj1*sj2);
IkReal x13481=(gconst22*r20);
IkReal x13482=(gconst23*r21);
IkReal x13483=(gconst22*r00);
IkReal x13484=(gconst22*r10);
IkReal x13485=(gconst23*r10);
IkReal x13486=((1.0)*r02);
IkReal x13487=((1.0)*gconst22);
IkReal x13488=(gconst23*r11);
IkReal x13489=(gconst23*r01);
IkReal x13490=(gconst23*r00);
IkReal x13491=(sj2*x13479);
IkReal x13492=((1.0)*cj2*sj1);
IkReal x13493=(r12*x13475);
IkReal x13494=(cj3*x13475);
IkReal x13495=(cj3*x13476);
IkReal x13496=(gconst22*x13476);
IkReal x13497=(sj3*x13476);
IkReal x13498=((1.0)*x13475);
IkReal x13499=(gconst22*x13475);
IkReal x13500=(gconst23*r20*x13476);
IkReal x13501=(x13491+x13492);
evalcond[0]=((((-1.0)*gconst23*r20*x13498))+(((-1.0)*x13476*x13477))+((r21*x13499)));
evalcond[1]=((((-1.0)*x13490*x13498))+((r01*x13499))+(((-1.0)*x13476*x13486)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13476))+(((-1.0)*x13485*x13498))+((r11*x13499)));
evalcond[3]=(((cj3*x13488))+((cj3*x13484))+(((-1.0)*r11*x13478*x13496))+(((-1.0)*x13478*x13493))+((x13485*x13497)));
evalcond[4]=((((-1.0)*r11*x13487*x13495))+((x13485*x13495))+(((-1.0)*x13478*x13488))+(((-1.0)*x13478*x13484))+(((-1.0)*cj3*x13493)));
evalcond[5]=(x13480+((cj3*x13482))+((cj3*x13481))+(((-1.0)*sj3*x13475*x13477))+(((-1.0)*r21*x13478*x13496))+((gconst23*r20*x13497))+(((-1.0)*cj2*x13479)));
evalcond[6]=(((x13490*x13497))+((cj3*x13489))+((cj3*x13483))+(((-1.0)*r02*x13475*x13478))+(((-1.0)*x13501))+(((-1.0)*r01*x13478*x13496)));
evalcond[7]=((((-1.0)*x13480))+((x13490*x13495))+(((-1.0)*r01*x13487*x13495))+(((-1.0)*x13486*x13494))+(((-1.0)*x13478*x13489))+(((-1.0)*x13478*x13483))+((cj1*cj2)));
evalcond[8]=((((-1.0)*x13477*x13494))+(((-1.0)*x13478*x13481))+(((-1.0)*x13478*x13482))+(((-1.0)*x13501))+(((-1.0)*r21*x13487*x13495))+((gconst23*r20*x13495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13502=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13502.valid){
continue;
}
CheckValue<IkReal> x13503 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13502.value)))+(x13503.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13504=IKsin(j4);
IkReal x13505=IKcos(j4);
IkReal x13506=((1.0)*r22);
IkReal x13507=((1.0)*sj3);
IkReal x13508=((1.0)*cj1);
IkReal x13509=(sj1*sj2);
IkReal x13510=(gconst22*r20);
IkReal x13511=(gconst23*r21);
IkReal x13512=(gconst22*r00);
IkReal x13513=(gconst22*r10);
IkReal x13514=(gconst23*r10);
IkReal x13515=((1.0)*r02);
IkReal x13516=((1.0)*gconst22);
IkReal x13517=(gconst23*r11);
IkReal x13518=(gconst23*r01);
IkReal x13519=(gconst23*r00);
IkReal x13520=(sj2*x13508);
IkReal x13521=((1.0)*cj2*sj1);
IkReal x13522=(r12*x13504);
IkReal x13523=(cj3*x13504);
IkReal x13524=(cj3*x13505);
IkReal x13525=(gconst22*x13505);
IkReal x13526=(sj3*x13505);
IkReal x13527=((1.0)*x13504);
IkReal x13528=(gconst22*x13504);
IkReal x13529=(gconst23*r20*x13505);
IkReal x13530=(x13520+x13521);
evalcond[0]=(((r21*x13528))+(((-1.0)*gconst23*r20*x13527))+(((-1.0)*x13505*x13506)));
evalcond[1]=(((r01*x13528))+(((-1.0)*x13505*x13515))+(((-1.0)*x13519*x13527)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13505))+((r11*x13528))+(((-1.0)*x13514*x13527)));
evalcond[3]=((((-1.0)*x13507*x13522))+((cj3*x13517))+((cj3*x13513))+(((-1.0)*r11*x13507*x13525))+((x13514*x13526)));
evalcond[4]=((((-1.0)*x13507*x13513))+(((-1.0)*x13507*x13517))+(((-1.0)*r11*x13516*x13524))+((x13514*x13524))+(((-1.0)*cj3*x13522)));
evalcond[5]=(x13509+((gconst23*r20*x13526))+(((-1.0)*cj2*x13508))+((cj3*x13511))+((cj3*x13510))+(((-1.0)*r21*x13507*x13525))+(((-1.0)*sj3*x13504*x13506)));
evalcond[6]=((((-1.0)*r01*x13507*x13525))+((x13519*x13526))+(((-1.0)*r02*x13504*x13507))+(((-1.0)*x13530))+((cj3*x13518))+((cj3*x13512)));
evalcond[7]=((((-1.0)*x13515*x13523))+((x13519*x13524))+(((-1.0)*x13509))+(((-1.0)*x13507*x13512))+(((-1.0)*x13507*x13518))+(((-1.0)*r01*x13516*x13524))+((cj1*cj2)));
evalcond[8]=(((gconst23*r20*x13524))+(((-1.0)*x13506*x13523))+(((-1.0)*x13507*x13510))+(((-1.0)*x13507*x13511))+(((-1.0)*x13530))+(((-1.0)*r21*x13516*x13524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13532 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13532)==0){
continue;
}
IkReal x13531=pow(x13532,-0.5);
CheckValue<IkReal> x13533 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13533.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13533.value));
IkReal gconst25=((-1.0)*r21*x13531);
IkReal gconst26=(r20*x13531);
CheckValue<IkReal> x13534 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13534.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13534.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13537 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13537.valid){
continue;
}
IkReal x13535=((-1.0)*(x13537.value));
IkReal x13536=x13531;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13535;
IkReal gconst24=x13535;
IkReal gconst25=((-1.0)*r21*x13536);
IkReal gconst26=(r20*x13536);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13540 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13540.valid){
continue;
}
IkReal x13538=((-1.0)*(x13540.value));
IkReal x13539=x13531;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13538;
IkReal gconst24=x13538;
IkReal gconst25=((-1.0)*r21*x13539);
IkReal gconst26=(r20*x13539);
CheckValue<IkReal> x13548=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13548.valid){
continue;
}
IkReal x13541=x13548.value;
IkReal x13542=(sj3*x13541);
IkReal x13543=(r11*x13542);
IkReal x13544=(r00*x13542);
IkReal x13545=(r01*x13542);
IkReal x13546=(r10*x13542);
IkReal x13547=(r20*r21*x13542);
j4eval[0]=IKsign((((r10*x13544*(r20*r20)))+((r02*r12*sj3))+((r00*r20*r21*x13543))+((r10*r20*r21*x13545))+((r01*x13543*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13551 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13551.valid){
continue;
}
IkReal x13549=((-1.0)*(x13551.value));
IkReal x13550=x13531;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13549;
IkReal gconst24=x13549;
IkReal gconst25=((-1.0)*r21*x13550);
IkReal gconst26=(r20*x13550);
CheckValue<IkReal> x13559=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13559.valid){
continue;
}
IkReal x13552=x13559.value;
IkReal x13553=(cj3*x13552);
IkReal x13554=(r11*x13553);
IkReal x13555=(r01*x13553);
IkReal x13556=(r00*x13553);
IkReal x13557=(r10*x13553);
IkReal x13558=(r20*r21*x13553);
j4eval[0]=IKsign((((cj3*r02*r12))+((r00*r20*r21*x13554))+((r01*x13554*(r21*r21)))+((r10*x13556*(r20*r20)))+((r10*r20*r21*x13555))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13562 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13562.valid){
continue;
}
IkReal x13560=((-1.0)*(x13562.value));
IkReal x13561=x13531;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13560;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst24=x13560;
IkReal gconst25=((-1.0)*r21*x13561);
IkReal gconst26=(r20*x13561);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13565 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13565.valid){
continue;
}
IkReal x13563=((-1.0)*(x13565.value));
IkReal x13564=x13531;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13563;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst24=x13563;
IkReal gconst25=((-1.0)*r21*x13564);
IkReal gconst26=(r20*x13564);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13568 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13568.valid){
continue;
}
IkReal x13566=((-1.0)*(x13568.value));
IkReal x13567=x13531;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13566;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst24=x13566;
IkReal gconst25=((-1.0)*r21*x13567);
IkReal gconst26=(r20*x13567);
IkReal x13569=r22*r22;
IkReal x13570=(r12*sj1*sj2);
CheckValue<IkReal> x13575=IKPowWithIntegerCheck(((-1.0)+x13569),-1);
if(!x13575.valid){
continue;
}
IkReal x13571=x13575.value;
IkReal x13572=((1.0)*cj1*cj2*r12);
if((((1.0)+(((-1.0)*x13569)))) < -0.00001)
continue;
IkReal x13573=IKsqrt(((1.0)+(((-1.0)*x13569))));
IkReal x13574=(r22*x13571*x13573);
j4eval[0]=((IKabs(((((-1.0)*x13572*x13574))+((x13570*x13574)))))+(IKabs((x13570+(((-1.0)*x13572))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13576=(cj1*cj2);
IkReal x13577=(sj1*sj2);
IkReal x13578=(gconst25*r11);
IkReal x13579=((1.0)*gconst26);
CheckValue<IkReal> x13580 = IKatan2WithCheck(IkReal(((((-1.0)*x13577*x13578))+((x13576*x13578))+((gconst26*r10*x13577))+(((-1.0)*r10*x13576*x13579)))),IkReal((((r12*x13577))+(((-1.0)*r12*x13576)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13580.valid){
continue;
}
CheckValue<IkReal> x13581=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13579))+(((-1.0)*gconst25*r00)))),-1);
if(!x13581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13580.value)+(((1.5707963267949)*(x13581.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13582=IKsin(j4);
IkReal x13583=IKcos(j4);
IkReal x13584=(gconst26*r10);
IkReal x13585=(gconst25*r11);
IkReal x13586=((1.0)*cj2);
IkReal x13587=(gconst25*r01);
IkReal x13588=(gconst26*r00);
IkReal x13589=(gconst26*r20);
IkReal x13590=(gconst25*r21);
IkReal x13591=((1.0)*x13583);
IkReal x13592=((1.0)*x13582);
evalcond[0]=((((-1.0)*x13589*x13592))+((x13582*x13590))+(((-1.0)*r22*x13591)));
evalcond[1]=(((x13582*x13587))+(((-1.0)*x13588*x13592))+(((-1.0)*r02*x13591)));
evalcond[2]=(((x13583*x13584))+(((-1.0)*x13585*x13591))+(((-1.0)*r12*x13592)));
evalcond[3]=((1.0)+((x13582*x13585))+(((-1.0)*r12*x13591))+(((-1.0)*x13584*x13592)));
evalcond[4]=(((x13583*x13589))+((sj1*sj2))+(((-1.0)*cj1*x13586))+(((-1.0)*x13590*x13591))+(((-1.0)*r22*x13592)));
evalcond[5]=(((x13583*x13588))+(((-1.0)*sj1*x13586))+(((-1.0)*cj1*sj2))+(((-1.0)*x13587*x13591))+(((-1.0)*r02*x13592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13593=(gconst25*r11);
IkReal x13594=(gconst26*r10);
CheckValue<IkReal> x13595=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13594*x13594)+(((-2.0)*x13593*x13594))+(x13593*x13593))),-1);
if(!x13595.valid){
continue;
}
CheckValue<IkReal> x13596 = IKatan2WithCheck(IkReal((x13594+(((-1.0)*x13593)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13595.value)))+(x13596.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13597=IKsin(j4);
IkReal x13598=IKcos(j4);
IkReal x13599=(gconst26*r10);
IkReal x13600=(gconst25*r11);
IkReal x13601=((1.0)*cj2);
IkReal x13602=(gconst25*r01);
IkReal x13603=(gconst26*r00);
IkReal x13604=(gconst26*r20);
IkReal x13605=(gconst25*r21);
IkReal x13606=((1.0)*x13598);
IkReal x13607=((1.0)*x13597);
evalcond[0]=((((-1.0)*x13604*x13607))+(((-1.0)*r22*x13606))+((x13597*x13605)));
evalcond[1]=((((-1.0)*r02*x13606))+(((-1.0)*x13603*x13607))+((x13597*x13602)));
evalcond[2]=(((x13598*x13599))+(((-1.0)*r12*x13607))+(((-1.0)*x13600*x13606)));
evalcond[3]=((1.0)+(((-1.0)*x13599*x13607))+(((-1.0)*r12*x13606))+((x13597*x13600)));
evalcond[4]=(((x13598*x13604))+(((-1.0)*x13605*x13606))+(((-1.0)*cj1*x13601))+((sj1*sj2))+(((-1.0)*r22*x13607)));
evalcond[5]=((((-1.0)*r02*x13607))+((x13598*x13603))+(((-1.0)*sj1*x13601))+(((-1.0)*cj1*sj2))+(((-1.0)*x13602*x13606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13608=((1.0)*gconst26);
CheckValue<IkReal> x13609 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst25*r21))+(((-1.0)*r20*x13608)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13609.valid){
continue;
}
CheckValue<IkReal> x13610=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13608))+(((-1.0)*gconst25*r00)))),-1);
if(!x13610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13609.value)+(((1.5707963267949)*(x13610.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13611=IKsin(j4);
IkReal x13612=IKcos(j4);
IkReal x13613=(gconst26*r10);
IkReal x13614=(gconst25*r11);
IkReal x13615=((1.0)*cj2);
IkReal x13616=(gconst25*r01);
IkReal x13617=(gconst26*r00);
IkReal x13618=(gconst26*r20);
IkReal x13619=(gconst25*r21);
IkReal x13620=((1.0)*x13612);
IkReal x13621=((1.0)*x13611);
evalcond[0]=((((-1.0)*r22*x13620))+((x13611*x13619))+(((-1.0)*x13618*x13621)));
evalcond[1]=((((-1.0)*x13617*x13621))+((x13611*x13616))+(((-1.0)*r02*x13620)));
evalcond[2]=(((x13612*x13613))+(((-1.0)*r12*x13621))+(((-1.0)*x13614*x13620)));
evalcond[3]=((1.0)+(((-1.0)*x13613*x13621))+(((-1.0)*r12*x13620))+((x13611*x13614)));
evalcond[4]=((((-1.0)*cj1*x13615))+((x13612*x13618))+((sj1*sj2))+(((-1.0)*r22*x13621))+(((-1.0)*x13619*x13620)));
evalcond[5]=(((x13612*x13617))+(((-1.0)*x13616*x13620))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13621))+(((-1.0)*sj1*x13615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13624 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13624.valid){
continue;
}
IkReal x13622=((-1.0)*(x13624.value));
IkReal x13623=x13531;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13622;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst24=x13622;
IkReal gconst25=((-1.0)*r21*x13623);
IkReal gconst26=(r20*x13623);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13627 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13627.valid){
continue;
}
IkReal x13625=((-1.0)*(x13627.value));
IkReal x13626=x13531;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13625;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst24=x13625;
IkReal gconst25=((-1.0)*r21*x13626);
IkReal gconst26=(r20*x13626);
IkReal x13628=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13632=IKPowWithIntegerCheck(x13628,-1);
if(!x13632.valid){
continue;
}
IkReal x13629=x13632.value;
IkReal x13630=((1.0)*x13629);
IkReal x13631=((((-1.0)*x13630*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x13629))+(((-1.0)*(r12*r12)))+(((-1.0)*x13630*(r11*r11)*(r21*r21))));
j4eval[0]=x13631;
j4eval[1]=IKsign(x13631);
j4eval[2]=r12;
j4eval[3]=x13628;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13635 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13635.valid){
continue;
}
IkReal x13633=((-1.0)*(x13635.value));
IkReal x13634=x13531;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13633;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst24=x13633;
IkReal gconst25=((-1.0)*r21*x13634);
IkReal gconst26=(r20*x13634);
IkReal x13636=r22*r22;
IkReal x13637=(cj1*cj2*r12);
CheckValue<IkReal> x13642=IKPowWithIntegerCheck(((-1.0)+x13636),-1);
if(!x13642.valid){
continue;
}
IkReal x13638=x13642.value;
IkReal x13639=((1.0)*r12*sj1*sj2);
if((((1.0)+(((-1.0)*x13636)))) < -0.00001)
continue;
IkReal x13640=IKsqrt(((1.0)+(((-1.0)*x13636))));
IkReal x13641=(r22*x13638*x13640);
j4eval[0]=((IKabs(((((-1.0)*x13639*x13641))+((x13637*x13641)))))+(IKabs((x13637+(((-1.0)*x13639))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13643=(sj1*sj2);
IkReal x13644=(gconst25*r11);
IkReal x13645=(cj1*cj2);
IkReal x13646=(gconst26*r10);
CheckValue<IkReal> x13647=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst26*r01))+(((-1.0)*gconst25*r00)))),-1);
if(!x13647.valid){
continue;
}
CheckValue<IkReal> x13648 = IKatan2WithCheck(IkReal(((((-1.0)*x13644*x13645))+(((-1.0)*x13643*x13646))+((x13645*x13646))+((x13643*x13644)))),IkReal((((r12*x13645))+(((-1.0)*r12*x13643)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13647.value)))+(x13648.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13649=IKcos(j4);
IkReal x13650=IKsin(j4);
IkReal x13651=((1.0)*cj1);
IkReal x13652=(gconst26*r10);
IkReal x13653=(gconst25*r11);
IkReal x13654=(gconst26*r20);
IkReal x13655=(gconst26*r00);
IkReal x13656=((1.0)*x13649);
IkReal x13657=((1.0)*x13650);
IkReal x13658=(gconst25*x13649);
IkReal x13659=(gconst25*x13650);
evalcond[0]=(((r12*x13650))+(((-1.0)*x13652*x13656))+((x13649*x13653)));
evalcond[1]=((((-1.0)*r22*x13656))+(((-1.0)*x13654*x13657))+((r21*x13659)));
evalcond[2]=(((r01*x13659))+(((-1.0)*r02*x13656))+(((-1.0)*x13655*x13657)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13656))+((x13650*x13653))+(((-1.0)*x13652*x13657)));
evalcond[4]=((((-1.0)*cj2*x13651))+((sj1*sj2))+(((-1.0)*x13654*x13656))+((r21*x13658))+((r22*x13650)));
evalcond[5]=(((r01*x13658))+(((-1.0)*cj2*sj1))+(((-1.0)*x13655*x13656))+((r02*x13650))+(((-1.0)*sj2*x13651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13660=(gconst25*r11);
IkReal x13661=(gconst26*r10);
CheckValue<IkReal> x13662 = IKatan2WithCheck(IkReal((x13660+(((-1.0)*x13661)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13662.valid){
continue;
}
CheckValue<IkReal> x13663=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13660*x13660)))+(((-1.0)*(x13661*x13661)))+(((2.0)*x13660*x13661))+(((-1.0)*(r12*r12))))),-1);
if(!x13663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13662.value)+(((1.5707963267949)*(x13663.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13664=IKcos(j4);
IkReal x13665=IKsin(j4);
IkReal x13666=((1.0)*cj1);
IkReal x13667=(gconst26*r10);
IkReal x13668=(gconst25*r11);
IkReal x13669=(gconst26*r20);
IkReal x13670=(gconst26*r00);
IkReal x13671=((1.0)*x13664);
IkReal x13672=((1.0)*x13665);
IkReal x13673=(gconst25*x13664);
IkReal x13674=(gconst25*x13665);
evalcond[0]=(((x13664*x13668))+((r12*x13665))+(((-1.0)*x13667*x13671)));
evalcond[1]=((((-1.0)*x13669*x13672))+((r21*x13674))+(((-1.0)*r22*x13671)));
evalcond[2]=(((r01*x13674))+(((-1.0)*x13670*x13672))+(((-1.0)*r02*x13671)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13671))+(((-1.0)*x13667*x13672))+((x13665*x13668)));
evalcond[4]=((((-1.0)*cj2*x13666))+(((-1.0)*x13669*x13671))+((r22*x13665))+((sj1*sj2))+((r21*x13673)));
evalcond[5]=((((-1.0)*sj2*x13666))+(((-1.0)*cj2*sj1))+((r02*x13665))+((r01*x13673))+(((-1.0)*x13670*x13671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13675=((1.0)*gconst26);
CheckValue<IkReal> x13676=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13675))+(((-1.0)*gconst25*r00)))),-1);
if(!x13676.valid){
continue;
}
CheckValue<IkReal> x13677 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13675))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13676.value)))+(x13677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13678=IKcos(j4);
IkReal x13679=IKsin(j4);
IkReal x13680=((1.0)*cj1);
IkReal x13681=(gconst26*r10);
IkReal x13682=(gconst25*r11);
IkReal x13683=(gconst26*r20);
IkReal x13684=(gconst26*r00);
IkReal x13685=((1.0)*x13678);
IkReal x13686=((1.0)*x13679);
IkReal x13687=(gconst25*x13678);
IkReal x13688=(gconst25*x13679);
evalcond[0]=(((r12*x13679))+(((-1.0)*x13681*x13685))+((x13678*x13682)));
evalcond[1]=((((-1.0)*r22*x13685))+((r21*x13688))+(((-1.0)*x13683*x13686)));
evalcond[2]=((((-1.0)*x13684*x13686))+((r01*x13688))+(((-1.0)*r02*x13685)));
evalcond[3]=((1.0)+((x13679*x13682))+(((-1.0)*r12*x13685))+(((-1.0)*x13681*x13686)));
evalcond[4]=((((-1.0)*cj2*x13680))+((r22*x13679))+((sj1*sj2))+((r21*x13687))+(((-1.0)*x13683*x13685)));
evalcond[5]=((((-1.0)*sj2*x13680))+((r02*x13679))+(((-1.0)*cj2*sj1))+(((-1.0)*x13684*x13685))+((r01*x13687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13691 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13691.valid){
continue;
}
IkReal x13689=((-1.0)*(x13691.value));
IkReal x13690=x13531;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13689;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst24=x13689;
IkReal gconst25=((-1.0)*r21*x13690);
IkReal gconst26=(r20*x13690);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13694 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13694.valid){
continue;
}
IkReal x13692=((-1.0)*(x13694.value));
IkReal x13693=x13531;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13692;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst24=x13692;
IkReal gconst25=((-1.0)*r21*x13693);
IkReal gconst26=(r20*x13693);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13697 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13697.valid){
continue;
}
IkReal x13695=((-1.0)*(x13697.value));
IkReal x13696=x13531;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13695;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst24=x13695;
IkReal gconst25=((-1.0)*r21*x13696);
IkReal gconst26=(r20*x13696);
IkReal x13698=r22*r22;
IkReal x13699=(r02*sj1*sj2);
IkReal x13700=(cj1*cj2*r02);
CheckValue<IkReal> x13704=IKPowWithIntegerCheck(((-1.0)+x13698),-1);
if(!x13704.valid){
continue;
}
IkReal x13701=x13704.value;
if((((1.0)+(((-1.0)*x13698)))) < -0.00001)
continue;
IkReal x13702=IKsqrt(((1.0)+(((-1.0)*x13698))));
IkReal x13703=(r22*x13701*x13702);
j4eval[0]=((IKabs((x13700+(((-1.0)*x13699)))))+(IKabs(((((-1.0)*x13700*x13703))+((x13699*x13703))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13705=(gconst25*r01);
IkReal x13706=(gconst26*r00);
IkReal x13707=(cj1*cj2);
IkReal x13708=((1.0)*sj1*sj2);
CheckValue<IkReal> x13709=IKPowWithIntegerCheck(IKsign(((((-2.0)*x13705*x13706))+(x13706*x13706)+(x13705*x13705)+(r02*r02))),-1);
if(!x13709.valid){
continue;
}
CheckValue<IkReal> x13710 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x13708))+((r02*x13707)))),IkReal((((x13705*x13707))+(((-1.0)*x13705*x13708))+(((-1.0)*x13706*x13707))+((sj1*sj2*x13706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13709.value)))+(x13710.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13711=IKsin(j4);
IkReal x13712=IKcos(j4);
IkReal x13713=(gconst26*r10);
IkReal x13714=(gconst25*r11);
IkReal x13715=((1.0)*sj1);
IkReal x13716=(gconst25*r01);
IkReal x13717=(gconst26*r00);
IkReal x13718=(gconst26*r20);
IkReal x13719=(gconst25*r21);
IkReal x13720=((1.0)*x13712);
IkReal x13721=((1.0)*x13711);
evalcond[0]=((((-1.0)*r22*x13720))+(((-1.0)*x13718*x13721))+((x13711*x13719)));
evalcond[1]=((((-1.0)*r02*x13720))+(((-1.0)*x13717*x13721))+((x13711*x13716)));
evalcond[2]=((((-1.0)*x13714*x13720))+(((-1.0)*r12*x13721))+((x13712*x13713)));
evalcond[3]=((1.0)+(((-1.0)*x13713*x13721))+(((-1.0)*r12*x13720))+((x13711*x13714)));
evalcond[4]=((((-1.0)*sj2*x13715))+(((-1.0)*r02*x13721))+((x13712*x13717))+((cj1*cj2))+(((-1.0)*x13716*x13720)));
evalcond[5]=((((-1.0)*r22*x13721))+(((-1.0)*cj2*x13715))+(((-1.0)*cj1*sj2))+(((-1.0)*x13719*x13720))+((x13712*x13718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13722=(gconst25*r11);
IkReal x13723=(gconst26*r10);
CheckValue<IkReal> x13724 = IKatan2WithCheck(IkReal((x13723+(((-1.0)*x13722)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13724.valid){
continue;
}
CheckValue<IkReal> x13725=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13722*x13722)+(((-2.0)*x13722*x13723))+(x13723*x13723))),-1);
if(!x13725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13724.value)+(((1.5707963267949)*(x13725.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13726=IKsin(j4);
IkReal x13727=IKcos(j4);
IkReal x13728=(gconst26*r10);
IkReal x13729=(gconst25*r11);
IkReal x13730=((1.0)*sj1);
IkReal x13731=(gconst25*r01);
IkReal x13732=(gconst26*r00);
IkReal x13733=(gconst26*r20);
IkReal x13734=(gconst25*r21);
IkReal x13735=((1.0)*x13727);
IkReal x13736=((1.0)*x13726);
evalcond[0]=((((-1.0)*x13733*x13736))+(((-1.0)*r22*x13735))+((x13726*x13734)));
evalcond[1]=((((-1.0)*r02*x13735))+((x13726*x13731))+(((-1.0)*x13732*x13736)));
evalcond[2]=((((-1.0)*r12*x13736))+((x13727*x13728))+(((-1.0)*x13729*x13735)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13735))+((x13726*x13729))+(((-1.0)*x13728*x13736)));
evalcond[4]=((((-1.0)*r02*x13736))+(((-1.0)*sj2*x13730))+(((-1.0)*x13731*x13735))+((x13727*x13732))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x13736))+(((-1.0)*x13734*x13735))+(((-1.0)*cj1*sj2))+((x13727*x13733))+(((-1.0)*cj2*x13730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13737=((1.0)*gconst26);
CheckValue<IkReal> x13738 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13737))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13738.valid){
continue;
}
CheckValue<IkReal> x13739=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13737))+(((-1.0)*gconst25*r00)))),-1);
if(!x13739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13738.value)+(((1.5707963267949)*(x13739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13740=IKsin(j4);
IkReal x13741=IKcos(j4);
IkReal x13742=(gconst26*r10);
IkReal x13743=(gconst25*r11);
IkReal x13744=((1.0)*sj1);
IkReal x13745=(gconst25*r01);
IkReal x13746=(gconst26*r00);
IkReal x13747=(gconst26*r20);
IkReal x13748=(gconst25*r21);
IkReal x13749=((1.0)*x13741);
IkReal x13750=((1.0)*x13740);
evalcond[0]=((((-1.0)*r22*x13749))+((x13740*x13748))+(((-1.0)*x13747*x13750)));
evalcond[1]=((((-1.0)*x13746*x13750))+(((-1.0)*r02*x13749))+((x13740*x13745)));
evalcond[2]=((((-1.0)*r12*x13750))+(((-1.0)*x13743*x13749))+((x13741*x13742)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13749))+((x13740*x13743))+(((-1.0)*x13742*x13750)));
evalcond[4]=((((-1.0)*x13745*x13749))+(((-1.0)*sj2*x13744))+((cj1*cj2))+(((-1.0)*r02*x13750))+((x13741*x13746)));
evalcond[5]=((((-1.0)*r22*x13750))+(((-1.0)*cj2*x13744))+(((-1.0)*cj1*sj2))+(((-1.0)*x13748*x13749))+((x13741*x13747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13753 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13753.valid){
continue;
}
IkReal x13751=((-1.0)*(x13753.value));
IkReal x13752=x13531;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13751;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst24=x13751;
IkReal gconst25=((-1.0)*r21*x13752);
IkReal gconst26=(r20*x13752);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13756 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13756.valid){
continue;
}
IkReal x13754=((-1.0)*(x13756.value));
IkReal x13755=x13531;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13754;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst24=x13754;
IkReal gconst25=((-1.0)*r21*x13755);
IkReal gconst26=(r20*x13755);
IkReal x13757=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13761=IKPowWithIntegerCheck(x13757,-1);
if(!x13761.valid){
continue;
}
IkReal x13758=x13761.value;
IkReal x13759=((1.0)*x13758);
IkReal x13760=((((-2.0)*r10*r11*r20*r21*x13758))+(((-1.0)*x13759*(r11*r11)*(r21*r21)))+(((-1.0)*x13759*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12))));
j4eval[0]=x13760;
j4eval[1]=IKsign(x13760);
j4eval[2]=r12;
j4eval[3]=x13757;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13764 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13764.valid){
continue;
}
IkReal x13762=((-1.0)*(x13764.value));
IkReal x13763=x13531;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13762;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst24=x13762;
IkReal gconst25=((-1.0)*r21*x13763);
IkReal gconst26=(r20*x13763);
IkReal x13765=r22*r22;
IkReal x13766=(cj1*r12*sj2);
IkReal x13767=(cj2*r12*sj1);
CheckValue<IkReal> x13771=IKPowWithIntegerCheck(((-1.0)+x13765),-1);
if(!x13771.valid){
continue;
}
IkReal x13768=x13771.value;
if((((1.0)+(((-1.0)*x13765)))) < -0.00001)
continue;
IkReal x13769=IKsqrt(((1.0)+(((-1.0)*x13765))));
IkReal x13770=(r22*x13768*x13769);
j4eval[0]=((IKabs((x13766+x13767)))+(IKabs((((x13766*x13770))+((x13767*x13770))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13772=(cj2*sj1);
IkReal x13773=(gconst26*r10);
IkReal x13774=(cj1*sj2);
IkReal x13775=((1.0)*gconst25*r11);
CheckValue<IkReal> x13776 = IKatan2WithCheck(IkReal((((x13772*x13773))+(((-1.0)*x13772*x13775))+(((-1.0)*x13774*x13775))+((x13773*x13774)))),IkReal((((r12*x13772))+((r12*x13774)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13776.valid){
continue;
}
CheckValue<IkReal> x13777=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst26*r01))+(((-1.0)*gconst25*r00)))),-1);
if(!x13777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13776.value)+(((1.5707963267949)*(x13777.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13778=IKcos(j4);
IkReal x13779=IKsin(j4);
IkReal x13780=((1.0)*sj2);
IkReal x13781=(gconst26*r10);
IkReal x13782=(gconst25*r11);
IkReal x13783=(gconst26*r20);
IkReal x13784=(gconst26*r00);
IkReal x13785=((1.0)*x13778);
IkReal x13786=((1.0)*x13779);
IkReal x13787=(gconst25*x13778);
IkReal x13788=(gconst25*x13779);
evalcond[0]=((((-1.0)*x13781*x13785))+((x13778*x13782))+((r12*x13779)));
evalcond[1]=((((-1.0)*x13783*x13786))+((r21*x13788))+(((-1.0)*r22*x13785)));
evalcond[2]=((((-1.0)*x13784*x13786))+((r01*x13788))+(((-1.0)*r02*x13785)));
evalcond[3]=((1.0)+((x13779*x13782))+(((-1.0)*r12*x13785))+(((-1.0)*x13781*x13786)));
evalcond[4]=((((-1.0)*x13784*x13785))+((r01*x13787))+(((-1.0)*sj1*x13780))+((cj1*cj2))+((r02*x13779)));
evalcond[5]=((((-1.0)*x13783*x13785))+(((-1.0)*cj1*x13780))+(((-1.0)*cj2*sj1))+((r21*x13787))+((r22*x13779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13789=(gconst25*r11);
IkReal x13790=(gconst26*r10);
CheckValue<IkReal> x13791=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13790*x13790)))+(((-1.0)*(x13789*x13789)))+(((-1.0)*(r12*r12)))+(((2.0)*x13789*x13790)))),-1);
if(!x13791.valid){
continue;
}
CheckValue<IkReal> x13792 = IKatan2WithCheck(IkReal((x13789+(((-1.0)*x13790)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13791.value)))+(x13792.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13793=IKcos(j4);
IkReal x13794=IKsin(j4);
IkReal x13795=((1.0)*sj2);
IkReal x13796=(gconst26*r10);
IkReal x13797=(gconst25*r11);
IkReal x13798=(gconst26*r20);
IkReal x13799=(gconst26*r00);
IkReal x13800=((1.0)*x13793);
IkReal x13801=((1.0)*x13794);
IkReal x13802=(gconst25*x13793);
IkReal x13803=(gconst25*x13794);
evalcond[0]=((((-1.0)*x13796*x13800))+((x13793*x13797))+((r12*x13794)));
evalcond[1]=(((r21*x13803))+(((-1.0)*r22*x13800))+(((-1.0)*x13798*x13801)));
evalcond[2]=(((r01*x13803))+(((-1.0)*x13799*x13801))+(((-1.0)*r02*x13800)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13800))+((x13794*x13797))+(((-1.0)*x13796*x13801)));
evalcond[4]=(((r01*x13802))+(((-1.0)*sj1*x13795))+(((-1.0)*x13799*x13800))+((r02*x13794))+((cj1*cj2)));
evalcond[5]=(((r21*x13802))+(((-1.0)*cj1*x13795))+(((-1.0)*cj2*sj1))+((r22*x13794))+(((-1.0)*x13798*x13800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13804=((1.0)*gconst26);
CheckValue<IkReal> x13805=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13804))+(((-1.0)*gconst25*r00)))),-1);
if(!x13805.valid){
continue;
}
CheckValue<IkReal> x13806 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst25*r21))+(((-1.0)*r20*x13804)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13805.value)))+(x13806.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13807=IKcos(j4);
IkReal x13808=IKsin(j4);
IkReal x13809=((1.0)*sj2);
IkReal x13810=(gconst26*r10);
IkReal x13811=(gconst25*r11);
IkReal x13812=(gconst26*r20);
IkReal x13813=(gconst26*r00);
IkReal x13814=((1.0)*x13807);
IkReal x13815=((1.0)*x13808);
IkReal x13816=(gconst25*x13807);
IkReal x13817=(gconst25*x13808);
evalcond[0]=(((r12*x13808))+(((-1.0)*x13810*x13814))+((x13807*x13811)));
evalcond[1]=((((-1.0)*r22*x13814))+((r21*x13817))+(((-1.0)*x13812*x13815)));
evalcond[2]=(((r01*x13817))+(((-1.0)*x13813*x13815))+(((-1.0)*r02*x13814)));
evalcond[3]=((1.0)+(((-1.0)*x13810*x13815))+(((-1.0)*r12*x13814))+((x13808*x13811)));
evalcond[4]=(((r01*x13816))+(((-1.0)*sj1*x13809))+((cj1*cj2))+(((-1.0)*x13813*x13814))+((r02*x13808)));
evalcond[5]=(((r21*x13816))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x13809))+((r22*x13808))+(((-1.0)*x13812*x13814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13818=((-1.0)*px);
CheckValue<IkReal> x13820 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13820.valid){
continue;
}
IkReal x13819=((-1.0)*(x13820.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13819;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13818);
rxp1_1=(px*r21);
rxp1_2=(r11*x13818);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst24=x13819;
IkReal gconst25=((-1.0)*r21);
IkReal gconst26=r20;
IkReal x13821=(r10*r20);
IkReal x13822=(r11*r21);
j4eval[0]=((((-1.0)*x13821))+(((-1.0)*x13822)));
j4eval[1]=(((cj3*x13821))+((cj3*x13822)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13823=((-1.0)*px);
CheckValue<IkReal> x13825 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13825.valid){
continue;
}
IkReal x13824=((-1.0)*(x13825.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13824;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13823);
rxp1_1=(px*r21);
rxp1_2=(r11*x13823);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst24=x13824;
IkReal gconst25=((-1.0)*r21);
IkReal gconst26=r20;
IkReal x13826=(r11*r21);
IkReal x13827=(r10*r20);
j4eval[0]=((((-1.0)*x13826))+(((-1.0)*x13827)));
j4eval[1]=(((sj3*x13827))+((sj3*x13826)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13828=((-1.0)*px);
CheckValue<IkReal> x13830 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13830.valid){
continue;
}
IkReal x13829=((-1.0)*(x13830.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13829;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13828);
rxp1_1=(px*r21);
rxp1_2=(r11*x13828);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst24=x13829;
IkReal gconst25=((-1.0)*r21);
IkReal gconst26=r20;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r11*r21*sj3))+((r10*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13831=((1.0)*gconst25);
CheckValue<IkReal> x13832=IKPowWithIntegerCheck(cj3,-1);
if(!x13832.valid){
continue;
}
CheckValue<IkReal> x13833=IKPowWithIntegerCheck(r02,-1);
if(!x13833.valid){
continue;
}
CheckValue<IkReal> x13834=IKPowWithIntegerCheck((((gconst26*r10*sj3))+(((-1.0)*r11*sj3*x13831))),-1);
if(!x13834.valid){
continue;
}
if( IKabs(((x13832.value)*(x13833.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13834.value)*(((((-1.0)*cj3*r10*x13831))+(((-1.0)*cj3*gconst26*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13832.value)*(x13833.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13834.value)*(((((-1.0)*cj3*r10*x13831))+(((-1.0)*cj3*gconst26*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13832.value)*(x13833.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13834.value)*(((((-1.0)*cj3*r10*x13831))+(((-1.0)*cj3*gconst26*r11))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13835=IKsin(j4);
IkReal x13836=IKcos(j4);
IkReal x13837=(cj3*r11);
IkReal x13838=(r21*sj3);
IkReal x13839=((1.0)*r10);
IkReal x13840=(cj3*r21);
IkReal x13841=(sj1*sj2);
IkReal x13842=(cj3*gconst25);
IkReal x13843=((1.0)*cj2);
IkReal x13844=(gconst25*sj3);
IkReal x13845=(r11*sj3);
IkReal x13846=((1.0)*gconst26);
IkReal x13847=((1.0)*r20);
IkReal x13848=((1.0)*cj1*sj2);
IkReal x13849=(sj1*x13843);
IkReal x13850=(gconst26*x13835);
IkReal x13851=(gconst25*x13835);
IkReal x13852=((1.0)*gconst25*x13836);
IkReal x13853=((1.0)*r02*x13835);
IkReal x13854=(gconst26*r20*x13836);
IkReal x13855=(gconst26*r10*x13836);
IkReal x13856=(x13849+x13848);
evalcond[0]=((-1.0)*r02*x13836);
evalcond[1]=((((-1.0)*r20*x13835*x13846))+((r21*x13851)));
evalcond[2]=((1.0)+(((-1.0)*x13839*x13850))+((r11*x13851)));
evalcond[3]=((((-1.0)*cj3*x13853))+((cj1*cj2))+(((-1.0)*x13841)));
evalcond[4]=((((-1.0)*sj3*x13853))+(((-1.0)*x13856)));
evalcond[5]=(((gconst26*x13837))+((sj3*x13855))+(((-1.0)*r11*x13836*x13844))+((r10*x13842)));
evalcond[6]=((((-1.0)*x13839*x13844))+(((-1.0)*x13845*x13846))+((cj3*x13855))+(((-1.0)*x13837*x13852)));
evalcond[7]=(((gconst26*x13840))+x13841+(((-1.0)*x13838*x13852))+((sj3*x13854))+(((-1.0)*cj1*x13843))+((r20*x13842)));
evalcond[8]=((((-1.0)*x13838*x13846))+(((-1.0)*x13844*x13847))+(((-1.0)*x13840*x13852))+((cj3*x13854))+(((-1.0)*x13856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13857=((1.0)*gconst25);
IkReal x13858=((1.0)*gconst26);
CheckValue<IkReal> x13859=IKPowWithIntegerCheck((((gconst25*r11))+(((-1.0)*r10*x13858))),-1);
if(!x13859.valid){
continue;
}
CheckValue<IkReal> x13860=IKPowWithIntegerCheck((((gconst26*r10*sj3))+(((-1.0)*r11*sj3*x13857))),-1);
if(!x13860.valid){
continue;
}
if( IKabs(((-1.0)*(x13859.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13860.value)*(((((-1.0)*cj3*r10*x13857))+(((-1.0)*cj3*r11*x13858)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13859.value)))+IKsqr(((x13860.value)*(((((-1.0)*cj3*r10*x13857))+(((-1.0)*cj3*r11*x13858))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13859.value)), ((x13860.value)*(((((-1.0)*cj3*r10*x13857))+(((-1.0)*cj3*r11*x13858))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13861=IKsin(j4);
IkReal x13862=IKcos(j4);
IkReal x13863=(cj3*r11);
IkReal x13864=(r21*sj3);
IkReal x13865=((1.0)*r10);
IkReal x13866=(cj3*r21);
IkReal x13867=(sj1*sj2);
IkReal x13868=(cj3*gconst25);
IkReal x13869=((1.0)*cj2);
IkReal x13870=(gconst25*sj3);
IkReal x13871=(r11*sj3);
IkReal x13872=((1.0)*gconst26);
IkReal x13873=((1.0)*r20);
IkReal x13874=((1.0)*cj1*sj2);
IkReal x13875=(sj1*x13869);
IkReal x13876=(gconst26*x13861);
IkReal x13877=(gconst25*x13861);
IkReal x13878=((1.0)*gconst25*x13862);
IkReal x13879=((1.0)*r02*x13861);
IkReal x13880=(gconst26*r20*x13862);
IkReal x13881=(gconst26*r10*x13862);
IkReal x13882=(x13874+x13875);
evalcond[0]=((-1.0)*r02*x13862);
evalcond[1]=((((-1.0)*r20*x13861*x13872))+((r21*x13877)));
evalcond[2]=((1.0)+((r11*x13877))+(((-1.0)*x13865*x13876)));
evalcond[3]=((((-1.0)*x13867))+(((-1.0)*cj3*x13879))+((cj1*cj2)));
evalcond[4]=((((-1.0)*sj3*x13879))+(((-1.0)*x13882)));
evalcond[5]=((((-1.0)*r11*x13862*x13870))+((sj3*x13881))+((r10*x13868))+((gconst26*x13863)));
evalcond[6]=(((cj3*x13881))+(((-1.0)*x13871*x13872))+(((-1.0)*x13865*x13870))+(((-1.0)*x13863*x13878)));
evalcond[7]=(((sj3*x13880))+x13867+(((-1.0)*x13864*x13878))+((r20*x13868))+(((-1.0)*cj1*x13869))+((gconst26*x13866)));
evalcond[8]=(((cj3*x13880))+(((-1.0)*x13870*x13873))+(((-1.0)*x13864*x13872))+(((-1.0)*x13882))+(((-1.0)*x13866*x13878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13883=(gconst25*r11);
IkReal x13884=(gconst26*r10);
CheckValue<IkReal> x13885=IKPowWithIntegerCheck((x13883+(((-1.0)*x13884))),-1);
if(!x13885.valid){
continue;
}
CheckValue<IkReal> x13886=IKPowWithIntegerCheck((((cj3*x13884))+(((-1.0)*cj3*x13883))),-1);
if(!x13886.valid){
continue;
}
if( IKabs(((-1.0)*(x13885.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13886.value)*((((gconst26*r11*sj3))+((gconst25*r10*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13885.value)))+IKsqr(((x13886.value)*((((gconst26*r11*sj3))+((gconst25*r10*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13885.value)), ((x13886.value)*((((gconst26*r11*sj3))+((gconst25*r10*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13887=IKsin(j4);
IkReal x13888=IKcos(j4);
IkReal x13889=(cj3*r11);
IkReal x13890=(r21*sj3);
IkReal x13891=((1.0)*r10);
IkReal x13892=(cj3*r21);
IkReal x13893=(sj1*sj2);
IkReal x13894=(cj3*gconst25);
IkReal x13895=((1.0)*cj2);
IkReal x13896=(gconst25*sj3);
IkReal x13897=(r11*sj3);
IkReal x13898=((1.0)*gconst26);
IkReal x13899=((1.0)*r20);
IkReal x13900=((1.0)*cj1*sj2);
IkReal x13901=(sj1*x13895);
IkReal x13902=(gconst26*x13887);
IkReal x13903=(gconst25*x13887);
IkReal x13904=((1.0)*gconst25*x13888);
IkReal x13905=((1.0)*r02*x13887);
IkReal x13906=(gconst26*r20*x13888);
IkReal x13907=(gconst26*r10*x13888);
IkReal x13908=(x13900+x13901);
evalcond[0]=((-1.0)*r02*x13888);
evalcond[1]=((((-1.0)*r20*x13887*x13898))+((r21*x13903)));
evalcond[2]=((1.0)+((r11*x13903))+(((-1.0)*x13891*x13902)));
evalcond[3]=((((-1.0)*x13893))+((cj1*cj2))+(((-1.0)*cj3*x13905)));
evalcond[4]=((((-1.0)*sj3*x13905))+(((-1.0)*x13908)));
evalcond[5]=(((r10*x13894))+(((-1.0)*r11*x13888*x13896))+((sj3*x13907))+((gconst26*x13889)));
evalcond[6]=((((-1.0)*x13889*x13904))+((cj3*x13907))+(((-1.0)*x13897*x13898))+(((-1.0)*x13891*x13896)));
evalcond[7]=(x13893+(((-1.0)*cj1*x13895))+((r20*x13894))+((sj3*x13906))+(((-1.0)*x13890*x13904))+((gconst26*x13892)));
evalcond[8]=((((-1.0)*x13892*x13904))+(((-1.0)*x13896*x13899))+((cj3*x13906))+(((-1.0)*x13890*x13898))+(((-1.0)*x13908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13909=gconst26*gconst26;
IkReal x13910=gconst25*gconst25;
IkReal x13911=(cj3*r11);
IkReal x13912=((1.0)*gconst25);
IkReal x13913=(gconst26*r00);
IkReal x13914=(r10*sj3);
IkReal x13915=(cj3*r10);
IkReal x13916=(r11*sj3);
IkReal x13917=(gconst26*r01);
IkReal x13918=(r01*x13910);
IkReal x13919=(r00*x13909);
CheckValue<IkReal> x13920=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((x13915*x13919))+(((-1.0)*x13911*x13912*x13913))+(((-1.0)*x13912*x13915*x13917))+((x13911*x13918)))),-1);
if(!x13920.valid){
continue;
}
CheckValue<IkReal> x13921 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x13912*x13914))+(((-1.0)*gconst26*r02*x13916)))),IkReal(((((-1.0)*x13912*x13916*x13917))+(((-1.0)*x13914*x13918))+((gconst25*x13913*x13914))+((x13916*x13919)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13920.value)))+(x13921.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13922=IKsin(j4);
IkReal x13923=IKcos(j4);
IkReal x13924=(gconst25*r11);
IkReal x13925=(gconst25*r21);
IkReal x13926=(gconst26*r10);
IkReal x13927=(sj1*sj2);
IkReal x13928=(cj3*gconst25);
IkReal x13929=((1.0)*cj2);
IkReal x13930=(gconst26*sj3);
IkReal x13931=(gconst25*sj3);
IkReal x13932=(gconst26*r20);
IkReal x13933=(cj3*gconst26);
IkReal x13934=((1.0)*cj1*sj2);
IkReal x13935=(sj1*x13929);
IkReal x13936=((1.0)*x13923);
IkReal x13937=((1.0)*x13922);
IkReal x13938=(r00*x13923);
IkReal x13939=(cj3*x13923);
IkReal x13940=(x13935+x13934);
evalcond[0]=(((x13922*x13925))+(((-1.0)*r22*x13936))+(((-1.0)*x13932*x13937)));
evalcond[1]=(((gconst25*r01*x13922))+(((-1.0)*gconst26*r00*x13937))+(((-1.0)*r02*x13936)));
evalcond[2]=((1.0)+(((-1.0)*x13926*x13937))+(((-1.0)*r12*x13936))+((x13922*x13924)));
evalcond[3]=(((r11*x13933))+(((-1.0)*sj3*x13924*x13936))+(((-1.0)*r12*sj3*x13937))+((r10*x13928))+((sj3*x13923*x13926)));
evalcond[4]=((((-1.0)*cj3*x13924*x13936))+((x13926*x13939))+(((-1.0)*cj3*r12*x13937))+(((-1.0)*r11*x13930))+(((-1.0)*r10*x13931)));
evalcond[5]=(((r20*x13928))+((r21*x13933))+(((-1.0)*r22*sj3*x13937))+x13927+(((-1.0)*sj3*x13925*x13936))+((r20*x13923*x13930))+(((-1.0)*cj1*x13929)));
evalcond[6]=((((-1.0)*r02*sj3*x13937))+((r01*x13933))+((x13930*x13938))+(((-1.0)*r01*x13931*x13936))+(((-1.0)*x13940))+((r00*x13928)));
evalcond[7]=((((-1.0)*r00*x13931))+(((-1.0)*r01*x13930))+(((-1.0)*x13927))+((x13933*x13938))+(((-1.0)*cj3*r02*x13937))+((cj1*cj2))+(((-1.0)*r01*x13928*x13936)));
evalcond[8]=((((-1.0)*cj3*r22*x13937))+((x13932*x13939))+(((-1.0)*r21*x13930))+(((-1.0)*cj3*x13925*x13936))+(((-1.0)*x13940))+(((-1.0)*r20*x13931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13941=gconst26*gconst26;
IkReal x13942=gconst25*gconst25;
IkReal x13943=(r01*r10);
IkReal x13944=(cj3*r11);
IkReal x13945=(gconst25*gconst26);
IkReal x13946=(cj3*r10);
IkReal x13947=(r00*x13941);
IkReal x13948=((1.0)*sj3*x13945);
CheckValue<IkReal> x13949 = IKatan2WithCheck(IkReal((((gconst25*r02*x13946))+((gconst26*r02*x13944)))),IkReal(((((-1.0)*x13944*x13947))+((cj3*x13942*x13943))+(((-1.0)*r00*x13945*x13946))+((r01*x13944*x13945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13949.valid){
continue;
}
CheckValue<IkReal> x13950=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r10*sj3*x13947))+(((-1.0)*x13943*x13948))+(((-1.0)*r00*r11*x13948))+((r01*r11*sj3*x13942)))),-1);
if(!x13950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13949.value)+(((1.5707963267949)*(x13950.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13951=IKsin(j4);
IkReal x13952=IKcos(j4);
IkReal x13953=(gconst25*r11);
IkReal x13954=(gconst25*r21);
IkReal x13955=(gconst26*r10);
IkReal x13956=(sj1*sj2);
IkReal x13957=(cj3*gconst25);
IkReal x13958=((1.0)*cj2);
IkReal x13959=(gconst26*sj3);
IkReal x13960=(gconst25*sj3);
IkReal x13961=(gconst26*r20);
IkReal x13962=(cj3*gconst26);
IkReal x13963=((1.0)*cj1*sj2);
IkReal x13964=(sj1*x13958);
IkReal x13965=((1.0)*x13952);
IkReal x13966=((1.0)*x13951);
IkReal x13967=(r00*x13952);
IkReal x13968=(cj3*x13952);
IkReal x13969=(x13963+x13964);
evalcond[0]=(((x13951*x13954))+(((-1.0)*r22*x13965))+(((-1.0)*x13961*x13966)));
evalcond[1]=((((-1.0)*r02*x13965))+(((-1.0)*gconst26*r00*x13966))+((gconst25*r01*x13951)));
evalcond[2]=((1.0)+((x13951*x13953))+(((-1.0)*r12*x13965))+(((-1.0)*x13955*x13966)));
evalcond[3]=(((sj3*x13952*x13955))+(((-1.0)*r12*sj3*x13966))+((r11*x13962))+(((-1.0)*sj3*x13953*x13965))+((r10*x13957)));
evalcond[4]=((((-1.0)*cj3*x13953*x13965))+((x13955*x13968))+(((-1.0)*r10*x13960))+(((-1.0)*r11*x13959))+(((-1.0)*cj3*r12*x13966)));
evalcond[5]=((((-1.0)*r22*sj3*x13966))+((r20*x13952*x13959))+x13956+(((-1.0)*cj1*x13958))+((r21*x13962))+(((-1.0)*sj3*x13954*x13965))+((r20*x13957)));
evalcond[6]=(((x13959*x13967))+((r00*x13957))+(((-1.0)*r01*x13960*x13965))+(((-1.0)*r02*sj3*x13966))+(((-1.0)*x13969))+((r01*x13962)));
evalcond[7]=((((-1.0)*r01*x13957*x13965))+((x13962*x13967))+(((-1.0)*r01*x13959))+(((-1.0)*cj3*r02*x13966))+((cj1*cj2))+(((-1.0)*r00*x13960))+(((-1.0)*x13956)));
evalcond[8]=((((-1.0)*r21*x13959))+(((-1.0)*cj3*r22*x13966))+((x13961*x13968))+(((-1.0)*x13969))+(((-1.0)*cj3*x13954*x13965))+(((-1.0)*r20*x13960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13970=((1.0)*gconst26);
CheckValue<IkReal> x13971=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13970))+(((-1.0)*gconst25*r00)))),-1);
if(!x13971.valid){
continue;
}
CheckValue<IkReal> x13972 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13970))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13971.value)))+(x13972.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13973=IKsin(j4);
IkReal x13974=IKcos(j4);
IkReal x13975=(gconst25*r11);
IkReal x13976=(gconst25*r21);
IkReal x13977=(gconst26*r10);
IkReal x13978=(sj1*sj2);
IkReal x13979=(cj3*gconst25);
IkReal x13980=((1.0)*cj2);
IkReal x13981=(gconst26*sj3);
IkReal x13982=(gconst25*sj3);
IkReal x13983=(gconst26*r20);
IkReal x13984=(cj3*gconst26);
IkReal x13985=((1.0)*cj1*sj2);
IkReal x13986=(sj1*x13980);
IkReal x13987=((1.0)*x13974);
IkReal x13988=((1.0)*x13973);
IkReal x13989=(r00*x13974);
IkReal x13990=(cj3*x13974);
IkReal x13991=(x13986+x13985);
evalcond[0]=((((-1.0)*x13983*x13988))+(((-1.0)*r22*x13987))+((x13973*x13976)));
evalcond[1]=(((gconst25*r01*x13973))+(((-1.0)*r02*x13987))+(((-1.0)*gconst26*r00*x13988)));
evalcond[2]=((1.0)+(((-1.0)*x13977*x13988))+(((-1.0)*r12*x13987))+((x13973*x13975)));
evalcond[3]=(((sj3*x13974*x13977))+((r11*x13984))+((r10*x13979))+(((-1.0)*sj3*x13975*x13987))+(((-1.0)*r12*sj3*x13988)));
evalcond[4]=((((-1.0)*r11*x13981))+(((-1.0)*cj3*x13975*x13987))+(((-1.0)*r10*x13982))+((x13977*x13990))+(((-1.0)*cj3*r12*x13988)));
evalcond[5]=(((r20*x13974*x13981))+x13978+((r21*x13984))+(((-1.0)*cj1*x13980))+((r20*x13979))+(((-1.0)*r22*sj3*x13988))+(((-1.0)*sj3*x13976*x13987)));
evalcond[6]=(((r01*x13984))+((x13981*x13989))+(((-1.0)*r01*x13982*x13987))+((r00*x13979))+(((-1.0)*x13991))+(((-1.0)*r02*sj3*x13988)));
evalcond[7]=((((-1.0)*r00*x13982))+(((-1.0)*r01*x13981))+(((-1.0)*x13978))+(((-1.0)*r01*x13979*x13987))+((x13984*x13989))+((cj1*cj2))+(((-1.0)*cj3*r02*x13988)));
evalcond[8]=((((-1.0)*r21*x13981))+((x13983*x13990))+(((-1.0)*r20*x13982))+(((-1.0)*cj3*r22*x13988))+(((-1.0)*cj3*x13976*x13987))+(((-1.0)*x13991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13993 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13993)==0){
continue;
}
IkReal x13992=pow(x13993,-0.5);
CheckValue<IkReal> x13994 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13994.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13994.value))));
IkReal gconst28=((1.0)*r21*x13992);
IkReal gconst29=((-1.0)*r20*x13992);
CheckValue<IkReal> x13995 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13995.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13995.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13998 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13998.valid){
continue;
}
IkReal x13996=((1.0)*(x13998.value));
IkReal x13997=x13992;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13996)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13996)));
IkReal gconst28=((1.0)*r21*x13997);
IkReal gconst29=((-1.0)*r20*x13997);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14001 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14001.valid){
continue;
}
IkReal x13999=((1.0)*(x14001.value));
IkReal x14000=x13992;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13999)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13999)));
IkReal gconst28=((1.0)*r21*x14000);
IkReal gconst29=((-1.0)*r20*x14000);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14004 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14004.valid){
continue;
}
IkReal x14002=((1.0)*(x14004.value));
IkReal x14003=x13992;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x14002)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x14002)));
IkReal gconst28=((1.0)*r21*x14003);
IkReal gconst29=((-1.0)*r20*x14003);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14007 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14007.valid){
continue;
}
IkReal x14005=((1.0)*(x14007.value));
IkReal x14006=x13992;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x14005)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x14005)));
IkReal gconst28=((1.0)*r21*x14006);
IkReal gconst29=((-1.0)*r20*x14006);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14010 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14010.valid){
continue;
}
IkReal x14008=((1.0)*(x14010.value));
IkReal x14009=x13992;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x14008)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x14008)));
IkReal gconst28=((1.0)*r21*x14009);
IkReal gconst29=((-1.0)*r20*x14009);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x14013 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14013.valid){
continue;
}
IkReal x14011=((1.0)*(x14013.value));
IkReal x14012=x13992;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x14011)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x14011)));
IkReal gconst28=((1.0)*r21*x14012);
IkReal gconst29=((-1.0)*r20*x14012);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14014=(gconst29*r10);
IkReal x14015=(gconst28*r11);
CheckValue<IkReal> x14016 = IKatan2WithCheck(IkReal(((((-1.0)*x14015))+x14014)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x14016.valid){
continue;
}
CheckValue<IkReal> x14017=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x14015*x14015)+(((-2.0)*x14014*x14015))+(x14014*x14014))),-1);
if(!x14017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14016.value)+(((1.5707963267949)*(x14017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14018=IKsin(j4);
IkReal x14019=IKcos(j4);
IkReal x14020=(gconst28*r11);
IkReal x14021=((1.0)*sj1);
IkReal x14022=((1.0)*x14019);
IkReal x14023=(gconst29*x14019);
IkReal x14024=(gconst28*x14018);
IkReal x14025=((1.0)*x14018);
IkReal x14026=(gconst29*x14025);
evalcond[0]=((((-1.0)*r20*x14026))+((r21*x14024))+(((-1.0)*r22*x14022)));
evalcond[1]=(((r01*x14024))+(((-1.0)*r00*x14026))+(((-1.0)*r02*x14022)));
evalcond[2]=(((r10*x14023))+(((-1.0)*x14020*x14022))+(((-1.0)*r12*x14025)));
evalcond[3]=((1.0)+((x14018*x14020))+(((-1.0)*r12*x14022))+(((-1.0)*r10*x14026)));
evalcond[4]=(((r00*x14023))+(((-1.0)*gconst28*r01*x14022))+(((-1.0)*r02*x14025))+((cj1*cj2))+(((-1.0)*sj2*x14021)));
evalcond[5]=(((r20*x14023))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r21*x14022))+(((-1.0)*r22*x14025))+(((-1.0)*cj2*x14021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14027=((1.0)*gconst29);
CheckValue<IkReal> x14028 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14027))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14028.valid){
continue;
}
CheckValue<IkReal> x14029=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14027))+(((-1.0)*gconst28*r00)))),-1);
if(!x14029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14028.value)+(((1.5707963267949)*(x14029.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14030=IKsin(j4);
IkReal x14031=IKcos(j4);
IkReal x14032=(gconst28*r11);
IkReal x14033=((1.0)*sj1);
IkReal x14034=((1.0)*x14031);
IkReal x14035=(gconst29*x14031);
IkReal x14036=(gconst28*x14030);
IkReal x14037=((1.0)*x14030);
IkReal x14038=(gconst29*x14037);
evalcond[0]=((((-1.0)*r20*x14038))+((r21*x14036))+(((-1.0)*r22*x14034)));
evalcond[1]=(((r01*x14036))+(((-1.0)*r00*x14038))+(((-1.0)*r02*x14034)));
evalcond[2]=(((r10*x14035))+(((-1.0)*x14032*x14034))+(((-1.0)*r12*x14037)));
evalcond[3]=((1.0)+((x14030*x14032))+(((-1.0)*r12*x14034))+(((-1.0)*r10*x14038)));
evalcond[4]=(((r00*x14035))+(((-1.0)*gconst28*r01*x14034))+(((-1.0)*r02*x14037))+((cj1*cj2))+(((-1.0)*sj2*x14033)));
evalcond[5]=((((-1.0)*cj2*x14033))+((r20*x14035))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r21*x14034))+(((-1.0)*r22*x14037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14039=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x14039.valid){
continue;
}
CheckValue<IkReal> x14040 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14039.value)))+(x14040.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14041=IKsin(j4);
IkReal x14042=IKcos(j4);
IkReal x14043=(gconst28*r11);
IkReal x14044=((1.0)*sj1);
IkReal x14045=((1.0)*x14042);
IkReal x14046=(gconst29*x14042);
IkReal x14047=(gconst28*x14041);
IkReal x14048=((1.0)*x14041);
IkReal x14049=(gconst29*x14048);
evalcond[0]=((((-1.0)*r20*x14049))+((r21*x14047))+(((-1.0)*r22*x14045)));
evalcond[1]=(((r01*x14047))+(((-1.0)*r00*x14049))+(((-1.0)*r02*x14045)));
evalcond[2]=((((-1.0)*x14043*x14045))+((r10*x14046))+(((-1.0)*r12*x14048)));
evalcond[3]=((1.0)+(((-1.0)*r10*x14049))+(((-1.0)*r12*x14045))+((x14041*x14043)));
evalcond[4]=(((r00*x14046))+(((-1.0)*gconst28*r01*x14045))+(((-1.0)*r02*x14048))+((cj1*cj2))+(((-1.0)*sj2*x14044)));
evalcond[5]=((((-1.0)*cj2*x14044))+(((-1.0)*cj1*sj2))+((r20*x14046))+(((-1.0)*gconst28*r21*x14045))+(((-1.0)*r22*x14048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14052 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14052.valid){
continue;
}
IkReal x14050=((1.0)*(x14052.value));
IkReal x14051=x13992;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x14050)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x14050)));
IkReal gconst28=((1.0)*r21*x14051);
IkReal gconst29=((-1.0)*r20*x14051);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14055 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14055.valid){
continue;
}
IkReal x14053=((1.0)*(x14055.value));
IkReal x14054=x13992;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x14053)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x14053)));
IkReal gconst28=((1.0)*r21*x14054);
IkReal gconst29=((-1.0)*r20*x14054);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x14058 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14058.valid){
continue;
}
IkReal x14056=((1.0)*(x14058.value));
IkReal x14057=x13992;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x14056)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x14056)));
IkReal gconst28=((1.0)*r21*x14057);
IkReal gconst29=((-1.0)*r20*x14057);
IkReal x14059=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x14063=IKPowWithIntegerCheck(x14059,-1);
if(!x14063.valid){
continue;
}
IkReal x14060=x14063.value;
IkReal x14061=((1.0)*x14060);
IkReal x14062=((((-2.0)*r10*r11*r20*r21*x14060))+(((-1.0)*x14061*(r11*r11)*(r21*r21)))+(((-1.0)*x14061*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12))));
j4eval[0]=x14062;
j4eval[1]=r12;
j4eval[2]=x14059;
j4eval[3]=IKsign(x14062);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14064=(gconst28*r11);
IkReal x14065=(gconst29*r10);
CheckValue<IkReal> x14066=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x14065*x14065)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x14064*x14064)))+(((2.0)*x14064*x14065)))),-1);
if(!x14066.valid){
continue;
}
CheckValue<IkReal> x14067 = IKatan2WithCheck(IkReal(((((-1.0)*x14065))+x14064)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14066.value)))+(x14067.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14068=IKcos(j4);
IkReal x14069=IKsin(j4);
IkReal x14070=(gconst29*r10);
IkReal x14071=(gconst29*r20);
IkReal x14072=(gconst28*r21);
IkReal x14073=((1.0)*sj1);
IkReal x14074=(gconst29*r00);
IkReal x14075=((1.0)*x14068);
IkReal x14076=((1.0)*x14069);
IkReal x14077=(gconst28*x14068);
IkReal x14078=(gconst28*x14069);
evalcond[0]=(((r11*x14077))+(((-1.0)*x14070*x14075))+((r12*x14069)));
evalcond[1]=((((-1.0)*r22*x14075))+((x14069*x14072))+(((-1.0)*x14071*x14076)));
evalcond[2]=(((r01*x14078))+(((-1.0)*x14074*x14076))+(((-1.0)*r02*x14075)));
evalcond[3]=((1.0)+(((-1.0)*r12*x14075))+((r11*x14078))+(((-1.0)*x14070*x14076)));
evalcond[4]=(((r02*x14069))+((r01*x14077))+(((-1.0)*x14074*x14075))+((cj1*cj2))+(((-1.0)*sj2*x14073)));
evalcond[5]=(((r22*x14069))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x14073))+((x14068*x14072))+(((-1.0)*x14071*x14075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14079=((1.0)*gconst29);
CheckValue<IkReal> x14080=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14079))+(((-1.0)*gconst28*r00)))),-1);
if(!x14080.valid){
continue;
}
CheckValue<IkReal> x14081 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14079))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14080.value)))+(x14081.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14082=IKcos(j4);
IkReal x14083=IKsin(j4);
IkReal x14084=(gconst29*r10);
IkReal x14085=(gconst29*r20);
IkReal x14086=(gconst28*r21);
IkReal x14087=((1.0)*sj1);
IkReal x14088=(gconst29*r00);
IkReal x14089=((1.0)*x14082);
IkReal x14090=((1.0)*x14083);
IkReal x14091=(gconst28*x14082);
IkReal x14092=(gconst28*x14083);
evalcond[0]=((((-1.0)*x14084*x14089))+((r12*x14083))+((r11*x14091)));
evalcond[1]=((((-1.0)*r22*x14089))+(((-1.0)*x14085*x14090))+((x14083*x14086)));
evalcond[2]=((((-1.0)*r02*x14089))+(((-1.0)*x14088*x14090))+((r01*x14092)));
evalcond[3]=((1.0)+(((-1.0)*r12*x14089))+(((-1.0)*x14084*x14090))+((r11*x14092)));
evalcond[4]=((((-1.0)*sj2*x14087))+(((-1.0)*x14088*x14089))+((r02*x14083))+((cj1*cj2))+((r01*x14091)));
evalcond[5]=((((-1.0)*x14085*x14089))+((x14082*x14086))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x14087))+((r22*x14083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14093=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x14093.valid){
continue;
}
CheckValue<IkReal> x14094 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14093.value)))+(x14094.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14095=IKcos(j4);
IkReal x14096=IKsin(j4);
IkReal x14097=(gconst29*r10);
IkReal x14098=(gconst29*r20);
IkReal x14099=(gconst28*r21);
IkReal x14100=((1.0)*sj1);
IkReal x14101=(gconst29*r00);
IkReal x14102=((1.0)*x14095);
IkReal x14103=((1.0)*x14096);
IkReal x14104=(gconst28*x14095);
IkReal x14105=(gconst28*x14096);
evalcond[0]=((((-1.0)*x14097*x14102))+((r12*x14096))+((r11*x14104)));
evalcond[1]=(((x14096*x14099))+(((-1.0)*r22*x14102))+(((-1.0)*x14098*x14103)));
evalcond[2]=(((r01*x14105))+(((-1.0)*x14101*x14103))+(((-1.0)*r02*x14102)));
evalcond[3]=((1.0)+(((-1.0)*x14097*x14103))+(((-1.0)*r12*x14102))+((r11*x14105)));
evalcond[4]=(((r01*x14104))+(((-1.0)*x14101*x14102))+((r02*x14096))+(((-1.0)*sj2*x14100))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x14100))+(((-1.0)*cj1*sj2))+((x14095*x14099))+((r22*x14096))+(((-1.0)*x14098*x14102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14108 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14108.valid){
continue;
}
IkReal x14106=((1.0)*(x14108.value));
IkReal x14107=x13992;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x14106)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x14106)));
IkReal gconst28=((1.0)*r21*x14107);
IkReal gconst29=((-1.0)*r20*x14107);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14111 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14111.valid){
continue;
}
IkReal x14109=((1.0)*(x14111.value));
IkReal x14110=x13992;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x14109)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x14109)));
IkReal gconst28=((1.0)*r21*x14110);
IkReal gconst29=((-1.0)*r20*x14110);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x14114 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14114.valid){
continue;
}
IkReal x14112=((1.0)*(x14114.value));
IkReal x14113=x13992;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x14112)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x14112)));
IkReal gconst28=((1.0)*r21*x14113);
IkReal gconst29=((-1.0)*r20*x14113);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14115=(gconst29*r10);
IkReal x14116=(gconst28*r11);
CheckValue<IkReal> x14117=IKPowWithIntegerCheck(IKsign(((x14115*x14115)+(r12*r12)+(((-2.0)*x14115*x14116))+(x14116*x14116))),-1);
if(!x14117.valid){
continue;
}
CheckValue<IkReal> x14118 = IKatan2WithCheck(IkReal(((((-1.0)*x14116))+x14115)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x14118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14117.value)))+(x14118.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14119=IKsin(j4);
IkReal x14120=IKcos(j4);
IkReal x14121=(gconst28*r11);
IkReal x14122=((1.0)*cj2);
IkReal x14123=((1.0)*x14120);
IkReal x14124=(gconst29*x14120);
IkReal x14125=(gconst28*x14119);
IkReal x14126=((1.0)*x14119);
IkReal x14127=(gconst29*x14126);
evalcond[0]=(((r21*x14125))+(((-1.0)*r20*x14127))+(((-1.0)*r22*x14123)));
evalcond[1]=((((-1.0)*r00*x14127))+((r01*x14125))+(((-1.0)*r02*x14123)));
evalcond[2]=((((-1.0)*r12*x14126))+(((-1.0)*x14121*x14123))+((r10*x14124)));
evalcond[3]=((1.0)+(((-1.0)*r10*x14127))+(((-1.0)*r12*x14123))+((x14119*x14121)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x14122))+(((-1.0)*gconst28*r21*x14123))+(((-1.0)*r22*x14126))+((r20*x14124)));
evalcond[5]=(((r00*x14124))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14122))+(((-1.0)*r02*x14126))+(((-1.0)*gconst28*r01*x14123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14128=((1.0)*gconst29);
CheckValue<IkReal> x14129=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14128))+(((-1.0)*gconst28*r00)))),-1);
if(!x14129.valid){
continue;
}
CheckValue<IkReal> x14130 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14128))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14129.value)))+(x14130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14131=IKsin(j4);
IkReal x14132=IKcos(j4);
IkReal x14133=(gconst28*r11);
IkReal x14134=((1.0)*cj2);
IkReal x14135=((1.0)*x14132);
IkReal x14136=(gconst29*x14132);
IkReal x14137=(gconst28*x14131);
IkReal x14138=((1.0)*x14131);
IkReal x14139=(gconst29*x14138);
evalcond[0]=(((r21*x14137))+(((-1.0)*r20*x14139))+(((-1.0)*r22*x14135)));
evalcond[1]=((((-1.0)*r02*x14135))+(((-1.0)*r00*x14139))+((r01*x14137)));
evalcond[2]=((((-1.0)*x14133*x14135))+((r10*x14136))+(((-1.0)*r12*x14138)));
evalcond[3]=((1.0)+(((-1.0)*r12*x14135))+(((-1.0)*r10*x14139))+((x14131*x14133)));
evalcond[4]=((((-1.0)*cj1*x14134))+(((-1.0)*gconst28*r21*x14135))+((r20*x14136))+((sj1*sj2))+(((-1.0)*r22*x14138)));
evalcond[5]=((((-1.0)*sj1*x14134))+(((-1.0)*r02*x14138))+(((-1.0)*gconst28*r01*x14135))+(((-1.0)*cj1*sj2))+((r00*x14136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14140=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x14140.valid){
continue;
}
CheckValue<IkReal> x14141 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14140.value)))+(x14141.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14142=IKsin(j4);
IkReal x14143=IKcos(j4);
IkReal x14144=(gconst28*r11);
IkReal x14145=((1.0)*cj2);
IkReal x14146=((1.0)*x14143);
IkReal x14147=(gconst29*x14143);
IkReal x14148=(gconst28*x14142);
IkReal x14149=((1.0)*x14142);
IkReal x14150=(gconst29*x14149);
evalcond[0]=((((-1.0)*r22*x14146))+((r21*x14148))+(((-1.0)*r20*x14150)));
evalcond[1]=(((r01*x14148))+(((-1.0)*r02*x14146))+(((-1.0)*r00*x14150)));
evalcond[2]=(((r10*x14147))+(((-1.0)*x14144*x14146))+(((-1.0)*r12*x14149)));
evalcond[3]=((1.0)+((x14142*x14144))+(((-1.0)*r12*x14146))+(((-1.0)*r10*x14150)));
evalcond[4]=((((-1.0)*r22*x14149))+((sj1*sj2))+(((-1.0)*cj1*x14145))+(((-1.0)*gconst28*r21*x14146))+((r20*x14147)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r00*x14147))+(((-1.0)*gconst28*r01*x14146))+(((-1.0)*r02*x14149))+(((-1.0)*sj1*x14145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14153 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14153.valid){
continue;
}
IkReal x14151=((1.0)*(x14153.value));
IkReal x14152=x13992;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x14151)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x14151)));
IkReal gconst28=((1.0)*r21*x14152);
IkReal gconst29=((-1.0)*r20*x14152);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14156 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14156.valid){
continue;
}
IkReal x14154=((1.0)*(x14156.value));
IkReal x14155=x13992;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x14154)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x14154)));
IkReal gconst28=((1.0)*r21*x14155);
IkReal gconst29=((-1.0)*r20*x14155);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x14159 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14159.valid){
continue;
}
IkReal x14157=((1.0)*(x14159.value));
IkReal x14158=x13992;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x14157)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x14157)));
IkReal gconst28=((1.0)*r21*x14158);
IkReal gconst29=((-1.0)*r20*x14158);
IkReal x14160=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x14164=IKPowWithIntegerCheck(x14160,-1);
if(!x14164.valid){
continue;
}
IkReal x14161=x14164.value;
IkReal x14162=((1.0)*x14161);
IkReal x14163=((((-2.0)*r10*r11*r20*r21*x14161))+(((-1.0)*x14162*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x14162*(r11*r11)*(r21*r21))));
j4eval[0]=x14163;
j4eval[1]=r12;
j4eval[2]=x14160;
j4eval[3]=IKsign(x14163);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14165=(gconst28*r11);
IkReal x14166=(gconst29*r10);
CheckValue<IkReal> x14167 = IKatan2WithCheck(IkReal((x14165+(((-1.0)*x14166)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14167.valid){
continue;
}
CheckValue<IkReal> x14168=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x14166*x14166)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x14165*x14165)))+(((2.0)*x14165*x14166)))),-1);
if(!x14168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14167.value)+(((1.5707963267949)*(x14168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14169=IKcos(j4);
IkReal x14170=IKsin(j4);
IkReal x14171=(gconst29*r10);
IkReal x14172=(gconst29*r20);
IkReal x14173=(gconst28*r21);
IkReal x14174=((1.0)*cj2);
IkReal x14175=(gconst29*r00);
IkReal x14176=((1.0)*x14169);
IkReal x14177=((1.0)*x14170);
IkReal x14178=(gconst28*x14169);
IkReal x14179=(gconst28*x14170);
evalcond[0]=(((r11*x14178))+((r12*x14170))+(((-1.0)*x14171*x14176)));
evalcond[1]=(((x14170*x14173))+(((-1.0)*r22*x14176))+(((-1.0)*x14172*x14177)));
evalcond[2]=(((r01*x14179))+(((-1.0)*r02*x14176))+(((-1.0)*x14175*x14177)));
evalcond[3]=((1.0)+((r11*x14179))+(((-1.0)*r12*x14176))+(((-1.0)*x14171*x14177)));
evalcond[4]=(((r22*x14170))+((sj1*sj2))+(((-1.0)*cj1*x14174))+(((-1.0)*x14172*x14176))+((x14169*x14173)));
evalcond[5]=(((r01*x14178))+(((-1.0)*sj1*x14174))+(((-1.0)*cj1*sj2))+(((-1.0)*x14175*x14176))+((r02*x14170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14180=((1.0)*gconst29);
CheckValue<IkReal> x14181 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14180))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14181.valid){
continue;
}
CheckValue<IkReal> x14182=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x14180)))),-1);
if(!x14182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14181.value)+(((1.5707963267949)*(x14182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14183=IKcos(j4);
IkReal x14184=IKsin(j4);
IkReal x14185=(gconst29*r10);
IkReal x14186=(gconst29*r20);
IkReal x14187=(gconst28*r21);
IkReal x14188=((1.0)*cj2);
IkReal x14189=(gconst29*r00);
IkReal x14190=((1.0)*x14183);
IkReal x14191=((1.0)*x14184);
IkReal x14192=(gconst28*x14183);
IkReal x14193=(gconst28*x14184);
evalcond[0]=(((r12*x14184))+(((-1.0)*x14185*x14190))+((r11*x14192)));
evalcond[1]=((((-1.0)*r22*x14190))+((x14184*x14187))+(((-1.0)*x14186*x14191)));
evalcond[2]=((((-1.0)*r02*x14190))+((r01*x14193))+(((-1.0)*x14189*x14191)));
evalcond[3]=((1.0)+(((-1.0)*r12*x14190))+(((-1.0)*x14185*x14191))+((r11*x14193)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x14188))+(((-1.0)*x14186*x14190))+((r22*x14184))+((x14183*x14187)));
evalcond[5]=(((r02*x14184))+(((-1.0)*cj1*sj2))+((r01*x14192))+(((-1.0)*sj1*x14188))+(((-1.0)*x14189*x14190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14194=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x14194.valid){
continue;
}
CheckValue<IkReal> x14195 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14194.value)))+(x14195.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14196=IKcos(j4);
IkReal x14197=IKsin(j4);
IkReal x14198=(gconst29*r10);
IkReal x14199=(gconst29*r20);
IkReal x14200=(gconst28*r21);
IkReal x14201=((1.0)*cj2);
IkReal x14202=(gconst29*r00);
IkReal x14203=((1.0)*x14196);
IkReal x14204=((1.0)*x14197);
IkReal x14205=(gconst28*x14196);
IkReal x14206=(gconst28*x14197);
evalcond[0]=((((-1.0)*x14198*x14203))+((r12*x14197))+((r11*x14205)));
evalcond[1]=((((-1.0)*x14199*x14204))+((x14197*x14200))+(((-1.0)*r22*x14203)));
evalcond[2]=((((-1.0)*r02*x14203))+((r01*x14206))+(((-1.0)*x14202*x14204)));
evalcond[3]=((1.0)+(((-1.0)*x14198*x14204))+(((-1.0)*r12*x14203))+((r11*x14206)));
evalcond[4]=((((-1.0)*x14199*x14203))+((sj1*sj2))+((r22*x14197))+((x14196*x14200))+(((-1.0)*cj1*x14201)));
evalcond[5]=(((r02*x14197))+(((-1.0)*sj1*x14201))+(((-1.0)*cj1*sj2))+((r01*x14205))+(((-1.0)*x14202*x14203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14207=gconst28*gconst28;
IkReal x14208=gconst29*gconst29;
IkReal x14209=(r10*sj3);
IkReal x14210=(gconst29*r11);
IkReal x14211=(cj3*r22);
IkReal x14212=((1.0)*gconst28);
IkReal x14213=(cj3*r10);
IkReal x14214=(r20*x14208);
IkReal x14215=(r21*x14207);
CheckValue<IkReal> x14216 = IKatan2WithCheck(IkReal((((gconst28*r10*x14211))+((x14210*x14211)))),IkReal((((cj3*gconst28*r21*x14210))+((x14213*x14215))+(((-1.0)*cj3*r11*x14214))+(((-1.0)*gconst29*r20*x14212*x14213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14216.valid){
continue;
}
CheckValue<IkReal> x14217=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst29*r21*x14209*x14212))+((x14209*x14214))+((r12*r22*sj3))+((r11*sj3*x14215))+(((-1.0)*r20*sj3*x14210*x14212)))),-1);
if(!x14217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14216.value)+(((1.5707963267949)*(x14217.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14218=IKsin(j4);
IkReal x14219=IKcos(j4);
IkReal x14220=(gconst29*r20);
IkReal x14221=(cj3*gconst29);
IkReal x14222=(gconst28*r21);
IkReal x14223=((1.0)*sj3);
IkReal x14224=(sj1*sj2);
IkReal x14225=((1.0)*cj2);
IkReal x14226=(gconst28*r00);
IkReal x14227=(gconst28*r11);
IkReal x14228=(gconst28*r01);
IkReal x14229=(gconst28*r20);
IkReal x14230=(gconst28*r10);
IkReal x14231=(gconst29*sj3);
IkReal x14232=((1.0)*cj1*sj2);
IkReal x14233=(sj1*x14225);
IkReal x14234=((1.0)*x14219);
IkReal x14235=((1.0)*x14218);
IkReal x14236=(r10*x14219);
IkReal x14237=(r00*x14219);
IkReal x14238=(x14233+x14232);
evalcond[0]=(((x14218*x14222))+(((-1.0)*r22*x14234))+(((-1.0)*x14220*x14235)));
evalcond[1]=(((x14218*x14228))+(((-1.0)*gconst29*r00*x14235))+(((-1.0)*r02*x14234)));
evalcond[2]=((1.0)+(((-1.0)*gconst29*r10*x14235))+((x14218*x14227))+(((-1.0)*r12*x14234)));
evalcond[3]=(((x14231*x14236))+(((-1.0)*x14219*x14223*x14227))+(((-1.0)*r12*x14218*x14223))+((cj3*x14230))+((r11*x14221)));
evalcond[4]=((((-1.0)*x14223*x14230))+(((-1.0)*gconst29*r11*x14223))+(((-1.0)*cj3*r12*x14235))+((x14221*x14236))+(((-1.0)*cj3*x14227*x14234)));
evalcond[5]=((((-1.0)*cj1*x14225))+(((-1.0)*x14219*x14222*x14223))+((sj3*x14219*x14220))+((cj3*x14229))+((r21*x14221))+(((-1.0)*r22*x14218*x14223))+x14224);
evalcond[6]=(((x14231*x14237))+(((-1.0)*x14238))+(((-1.0)*x14219*x14223*x14228))+((cj3*x14226))+(((-1.0)*r02*x14218*x14223))+((r01*x14221)));
evalcond[7]=((((-1.0)*gconst29*r01*x14223))+(((-1.0)*cj3*r02*x14235))+(((-1.0)*cj3*x14228*x14234))+(((-1.0)*x14223*x14226))+((x14221*x14237))+((cj1*cj2))+(((-1.0)*x14224)));
evalcond[8]=((((-1.0)*x14238))+((cj3*x14219*x14220))+(((-1.0)*gconst29*r21*x14223))+(((-1.0)*x14223*x14229))+(((-1.0)*cj3*x14222*x14234))+(((-1.0)*cj3*r22*x14235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14239=((1.0)*gconst29);
CheckValue<IkReal> x14240 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14239))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14240.valid){
continue;
}
CheckValue<IkReal> x14241=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14239))+(((-1.0)*gconst28*r00)))),-1);
if(!x14241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14240.value)+(((1.5707963267949)*(x14241.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14242=IKsin(j4);
IkReal x14243=IKcos(j4);
IkReal x14244=(gconst29*r20);
IkReal x14245=(cj3*gconst29);
IkReal x14246=(gconst28*r21);
IkReal x14247=((1.0)*sj3);
IkReal x14248=(sj1*sj2);
IkReal x14249=((1.0)*cj2);
IkReal x14250=(gconst28*r00);
IkReal x14251=(gconst28*r11);
IkReal x14252=(gconst28*r01);
IkReal x14253=(gconst28*r20);
IkReal x14254=(gconst28*r10);
IkReal x14255=(gconst29*sj3);
IkReal x14256=((1.0)*cj1*sj2);
IkReal x14257=(sj1*x14249);
IkReal x14258=((1.0)*x14243);
IkReal x14259=((1.0)*x14242);
IkReal x14260=(r10*x14243);
IkReal x14261=(r00*x14243);
IkReal x14262=(x14257+x14256);
evalcond[0]=((((-1.0)*r22*x14258))+(((-1.0)*x14244*x14259))+((x14242*x14246)));
evalcond[1]=((((-1.0)*gconst29*r00*x14259))+((x14242*x14252))+(((-1.0)*r02*x14258)));
evalcond[2]=((1.0)+(((-1.0)*gconst29*r10*x14259))+(((-1.0)*r12*x14258))+((x14242*x14251)));
evalcond[3]=(((cj3*x14254))+(((-1.0)*r12*x14242*x14247))+((r11*x14245))+(((-1.0)*x14243*x14247*x14251))+((x14255*x14260)));
evalcond[4]=((((-1.0)*cj3*r12*x14259))+(((-1.0)*x14247*x14254))+((x14245*x14260))+(((-1.0)*gconst29*r11*x14247))+(((-1.0)*cj3*x14251*x14258)));
evalcond[5]=(((r21*x14245))+(((-1.0)*x14243*x14246*x14247))+(((-1.0)*cj1*x14249))+((cj3*x14253))+((sj3*x14243*x14244))+(((-1.0)*r22*x14242*x14247))+x14248);
evalcond[6]=((((-1.0)*x14262))+((cj3*x14250))+(((-1.0)*r02*x14242*x14247))+(((-1.0)*x14243*x14247*x14252))+((r01*x14245))+((x14255*x14261)));
evalcond[7]=((((-1.0)*x14248))+(((-1.0)*x14247*x14250))+((x14245*x14261))+(((-1.0)*cj3*r02*x14259))+(((-1.0)*gconst29*r01*x14247))+((cj1*cj2))+(((-1.0)*cj3*x14252*x14258)));
evalcond[8]=((((-1.0)*x14262))+(((-1.0)*x14247*x14253))+(((-1.0)*cj3*x14246*x14258))+(((-1.0)*cj3*r22*x14259))+(((-1.0)*gconst29*r21*x14247))+((cj3*x14243*x14244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14263=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x14263.valid){
continue;
}
CheckValue<IkReal> x14264 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14263.value)))+(x14264.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14265=IKsin(j4);
IkReal x14266=IKcos(j4);
IkReal x14267=(gconst29*r20);
IkReal x14268=(cj3*gconst29);
IkReal x14269=(gconst28*r21);
IkReal x14270=((1.0)*sj3);
IkReal x14271=(sj1*sj2);
IkReal x14272=((1.0)*cj2);
IkReal x14273=(gconst28*r00);
IkReal x14274=(gconst28*r11);
IkReal x14275=(gconst28*r01);
IkReal x14276=(gconst28*r20);
IkReal x14277=(gconst28*r10);
IkReal x14278=(gconst29*sj3);
IkReal x14279=((1.0)*cj1*sj2);
IkReal x14280=(sj1*x14272);
IkReal x14281=((1.0)*x14266);
IkReal x14282=((1.0)*x14265);
IkReal x14283=(r10*x14266);
IkReal x14284=(r00*x14266);
IkReal x14285=(x14279+x14280);
evalcond[0]=((((-1.0)*r22*x14281))+(((-1.0)*x14267*x14282))+((x14265*x14269)));
evalcond[1]=((((-1.0)*gconst29*r00*x14282))+((x14265*x14275))+(((-1.0)*r02*x14281)));
evalcond[2]=((1.0)+(((-1.0)*gconst29*r10*x14282))+((x14265*x14274))+(((-1.0)*r12*x14281)));
evalcond[3]=(((cj3*x14277))+(((-1.0)*r12*x14265*x14270))+((r11*x14268))+(((-1.0)*x14266*x14270*x14274))+((x14278*x14283)));
evalcond[4]=((((-1.0)*cj3*x14274*x14281))+(((-1.0)*x14270*x14277))+((x14268*x14283))+(((-1.0)*gconst29*r11*x14270))+(((-1.0)*cj3*r12*x14282)));
evalcond[5]=((((-1.0)*x14266*x14269*x14270))+((r21*x14268))+((cj3*x14276))+(((-1.0)*cj1*x14272))+(((-1.0)*r22*x14265*x14270))+((sj3*x14266*x14267))+x14271);
evalcond[6]=(((cj3*x14273))+(((-1.0)*x14285))+(((-1.0)*r02*x14265*x14270))+(((-1.0)*x14266*x14270*x14275))+((x14278*x14284))+((r01*x14268)));
evalcond[7]=((((-1.0)*x14271))+(((-1.0)*cj3*r02*x14282))+(((-1.0)*x14270*x14273))+(((-1.0)*gconst29*r01*x14270))+((x14268*x14284))+(((-1.0)*cj3*x14275*x14281))+((cj1*cj2)));
evalcond[8]=((((-1.0)*cj3*r22*x14282))+(((-1.0)*x14270*x14276))+(((-1.0)*x14285))+((cj3*x14266*x14267))+(((-1.0)*gconst29*r21*x14270))+(((-1.0)*cj3*x14269*x14281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14286=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14286);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14286);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14287=(cj5*r10);
IkReal x14288=(r11*sj5);
j4eval[0]=((((-1.0)*x14287))+x14288);
j4eval[1]=((((-1.0)*cj3*x14288))+((cj3*x14287)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14289=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14289);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14289);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14290=(cj5*r10);
IkReal x14291=(r11*sj5);
j4eval[0]=((((-1.0)*x14290))+x14291);
j4eval[1]=(((sj3*x14290))+(((-1.0)*sj3*x14291)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14292=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14292);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14292);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14293=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14293);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14293);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14294=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14294);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14294);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14295=IKPowWithIntegerCheck(r22,-1);
if(!x14295.valid){
continue;
}
CheckValue<IkReal> x14296=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x14296.valid){
continue;
}
if( IKabs(((x14295.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14296.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14295.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14296.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14295.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14296.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14297=IKsin(j4);
IkReal x14298=IKcos(j4);
IkReal x14299=((1.0)*cj2);
IkReal x14300=(cj5*x14298);
IkReal x14301=(sj5*x14297);
IkReal x14302=((1.0)*sj5*x14298);
IkReal x14303=((1.0)*cj5*x14297);
evalcond[0]=((-1.0)*r22*x14298);
evalcond[1]=(((r01*x14301))+(((-1.0)*r00*x14303)));
evalcond[2]=((((-1.0)*r22*x14297))+((sj1*sj2))+(((-1.0)*cj1*x14299)));
evalcond[3]=((((-1.0)*r11*x14302))+((r10*x14300)));
evalcond[4]=((1.0)+((r11*x14301))+(((-1.0)*r10*x14303)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r00*x14300))+(((-1.0)*r01*x14302))+(((-1.0)*sj1*x14299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14304=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x14304.valid){
continue;
}
CheckValue<IkReal> x14305=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x14305.valid){
continue;
}
if( IKabs(((-1.0)*(x14304.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14305.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14304.value)))+IKsqr(((x14305.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14304.value)), ((x14305.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14306=IKsin(j4);
IkReal x14307=IKcos(j4);
IkReal x14308=((1.0)*cj2);
IkReal x14309=(cj5*x14307);
IkReal x14310=(sj5*x14306);
IkReal x14311=((1.0)*sj5*x14307);
IkReal x14312=((1.0)*cj5*x14306);
evalcond[0]=((-1.0)*r22*x14307);
evalcond[1]=(((r01*x14310))+(((-1.0)*r00*x14312)));
evalcond[2]=((((-1.0)*cj1*x14308))+((sj1*sj2))+(((-1.0)*r22*x14306)));
evalcond[3]=((((-1.0)*r11*x14311))+((r10*x14309)));
evalcond[4]=((1.0)+((r11*x14310))+(((-1.0)*r10*x14312)));
evalcond[5]=((((-1.0)*sj1*x14308))+(((-1.0)*r01*x14311))+(((-1.0)*cj1*sj2))+((r00*x14309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14313=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14313);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14313);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14314=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14314);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14314);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14315=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x14315)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x14315)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14316=((1.0)*cj5);
CheckValue<IkReal> x14317=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x14316))),-1);
if(!x14317.valid){
continue;
}
CheckValue<IkReal> x14318=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x14316))),-1);
if(!x14318.valid){
continue;
}
if( IKabs(((-1.0)*(x14317.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14318.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14317.value)))+IKsqr(((x14318.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14317.value)), ((x14318.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14319=IKsin(j4);
IkReal x14320=IKcos(j4);
IkReal x14321=((1.0)*cj5);
IkReal x14322=((1.0)*cj2);
IkReal x14323=(sj5*x14320);
IkReal x14324=(sj5*x14319);
evalcond[0]=((-1.0)*r22*x14320);
evalcond[1]=(((sj1*sj2))+(((-1.0)*cj1*x14322))+((r22*x14319)));
evalcond[2]=(((r01*x14324))+(((-1.0)*r00*x14319*x14321)));
evalcond[3]=((((-1.0)*r10*x14320*x14321))+((r11*x14323)));
evalcond[4]=((1.0)+(((-1.0)*r10*x14319*x14321))+((r11*x14324)));
evalcond[5]=(((r01*x14323))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x14320*x14321))+(((-1.0)*sj1*x14322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14325=IKPowWithIntegerCheck(r22,-1);
if(!x14325.valid){
continue;
}
CheckValue<IkReal> x14326=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14326.valid){
continue;
}
if( IKabs(((x14325.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14326.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14325.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x14326.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14325.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x14326.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14327=IKsin(j4);
IkReal x14328=IKcos(j4);
IkReal x14329=((1.0)*cj5);
IkReal x14330=((1.0)*cj2);
IkReal x14331=(sj5*x14328);
IkReal x14332=(sj5*x14327);
evalcond[0]=((-1.0)*r22*x14328);
evalcond[1]=((((-1.0)*cj1*x14330))+((sj1*sj2))+((r22*x14327)));
evalcond[2]=((((-1.0)*r00*x14327*x14329))+((r01*x14332)));
evalcond[3]=((((-1.0)*r10*x14328*x14329))+((r11*x14331)));
evalcond[4]=((1.0)+((r11*x14332))+(((-1.0)*r10*x14327*x14329)));
evalcond[5]=((((-1.0)*r00*x14328*x14329))+(((-1.0)*sj1*x14330))+(((-1.0)*cj1*sj2))+((r01*x14331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14333=((1.0)*r11);
CheckValue<IkReal> x14334=IKPowWithIntegerCheck(r22,-1);
if(!x14334.valid){
continue;
}
CheckValue<IkReal> x14335=IKPowWithIntegerCheck(sj3,-1);
if(!x14335.valid){
continue;
}
CheckValue<IkReal> x14336=IKPowWithIntegerCheck((((cj5*r10*sj3))+(((-1.0)*sj3*sj5*x14333))),-1);
if(!x14336.valid){
continue;
}
if( IKabs(((x14334.value)*(x14335.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14336.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14333)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14334.value)*(x14335.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14336.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14333))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14334.value)*(x14335.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14336.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14333))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14337=IKsin(j4);
IkReal x14338=IKcos(j4);
IkReal x14339=(r11*sj5);
IkReal x14340=(sj1*sj2);
IkReal x14341=(cj5*r00);
IkReal x14342=(cj3*cj5);
IkReal x14343=((1.0)*cj2);
IkReal x14344=(cj3*sj5);
IkReal x14345=(cj5*r10);
IkReal x14346=((1.0)*sj3);
IkReal x14347=(r01*sj5);
IkReal x14348=((1.0)*cj1*sj2);
IkReal x14349=(sj1*x14343);
IkReal x14350=(cj3*x14338);
IkReal x14351=(sj3*x14338);
IkReal x14352=((1.0)*cj5*x14337);
IkReal x14353=((1.0)*r22*x14337);
IkReal x14354=(x14349+x14348);
evalcond[0]=((-1.0)*r22*x14338);
evalcond[1]=((((-1.0)*x14337*x14341))+((x14337*x14347)));
evalcond[2]=((1.0)+((x14337*x14339))+(((-1.0)*x14337*x14345)));
evalcond[3]=((((-1.0)*r22*x14337*x14346))+(((-1.0)*cj1*x14343))+x14340);
evalcond[4]=((((-1.0)*x14354))+(((-1.0)*cj3*x14353)));
evalcond[5]=(((x14345*x14351))+((r11*x14342))+((r10*x14344))+(((-1.0)*x14338*x14339*x14346)));
evalcond[6]=(((r10*x14338*x14342))+(((-1.0)*x14339*x14350))+(((-1.0)*r10*sj5*x14346))+(((-1.0)*cj5*r11*x14346)));
evalcond[7]=((((-1.0)*x14354))+(((-1.0)*x14338*x14346*x14347))+((r00*x14344))+((r01*x14342))+((x14341*x14351)));
evalcond[8]=((((-1.0)*r01*x14338*x14344))+(((-1.0)*x14340))+(((-1.0)*cj5*r01*x14346))+((x14341*x14350))+((cj1*cj2))+(((-1.0)*r00*sj5*x14346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14355=(cj5*r10);
IkReal x14356=((1.0)*r11);
CheckValue<IkReal> x14357=IKPowWithIntegerCheck(((((-1.0)*x14355))+((r11*sj5))),-1);
if(!x14357.valid){
continue;
}
CheckValue<IkReal> x14358=IKPowWithIntegerCheck((((sj3*x14355))+(((-1.0)*sj3*sj5*x14356))),-1);
if(!x14358.valid){
continue;
}
if( IKabs(((-1.0)*(x14357.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14358.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14356)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14357.value)))+IKsqr(((x14358.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14356))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14357.value)), ((x14358.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14356))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14359=IKsin(j4);
IkReal x14360=IKcos(j4);
IkReal x14361=(r11*sj5);
IkReal x14362=(sj1*sj2);
IkReal x14363=(cj5*r00);
IkReal x14364=(cj3*cj5);
IkReal x14365=((1.0)*cj2);
IkReal x14366=(cj3*sj5);
IkReal x14367=(cj5*r10);
IkReal x14368=((1.0)*sj3);
IkReal x14369=(r01*sj5);
IkReal x14370=((1.0)*cj1*sj2);
IkReal x14371=(sj1*x14365);
IkReal x14372=(cj3*x14360);
IkReal x14373=(sj3*x14360);
IkReal x14374=((1.0)*cj5*x14359);
IkReal x14375=((1.0)*r22*x14359);
IkReal x14376=(x14370+x14371);
evalcond[0]=((-1.0)*r22*x14360);
evalcond[1]=((((-1.0)*x14359*x14363))+((x14359*x14369)));
evalcond[2]=((1.0)+(((-1.0)*x14359*x14367))+((x14359*x14361)));
evalcond[3]=((((-1.0)*cj1*x14365))+(((-1.0)*r22*x14359*x14368))+x14362);
evalcond[4]=((((-1.0)*cj3*x14375))+(((-1.0)*x14376)));
evalcond[5]=(((r10*x14366))+((x14367*x14373))+((r11*x14364))+(((-1.0)*x14360*x14361*x14368)));
evalcond[6]=((((-1.0)*r10*sj5*x14368))+((r10*x14360*x14364))+(((-1.0)*x14361*x14372))+(((-1.0)*cj5*r11*x14368)));
evalcond[7]=(((x14363*x14373))+(((-1.0)*x14360*x14368*x14369))+((r01*x14364))+((r00*x14366))+(((-1.0)*x14376)));
evalcond[8]=(((x14363*x14372))+(((-1.0)*cj5*r01*x14368))+(((-1.0)*r01*x14360*x14366))+(((-1.0)*x14362))+((cj1*cj2))+(((-1.0)*r00*sj5*x14368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14377=(r11*sj5);
IkReal x14378=(cj5*r10);
CheckValue<IkReal> x14379=IKPowWithIntegerCheck(((((-1.0)*x14378))+x14377),-1);
if(!x14379.valid){
continue;
}
CheckValue<IkReal> x14380=IKPowWithIntegerCheck((((cj3*x14378))+(((-1.0)*cj3*x14377))),-1);
if(!x14380.valid){
continue;
}
if( IKabs(((-1.0)*(x14379.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14380.value)*((((cj5*r11*sj3))+((r10*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14379.value)))+IKsqr(((x14380.value)*((((cj5*r11*sj3))+((r10*sj3*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14379.value)), ((x14380.value)*((((cj5*r11*sj3))+((r10*sj3*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14381=IKsin(j4);
IkReal x14382=IKcos(j4);
IkReal x14383=(r11*sj5);
IkReal x14384=(sj1*sj2);
IkReal x14385=(cj5*r00);
IkReal x14386=(cj3*cj5);
IkReal x14387=((1.0)*cj2);
IkReal x14388=(cj3*sj5);
IkReal x14389=(cj5*r10);
IkReal x14390=((1.0)*sj3);
IkReal x14391=(r01*sj5);
IkReal x14392=((1.0)*cj1*sj2);
IkReal x14393=(sj1*x14387);
IkReal x14394=(cj3*x14382);
IkReal x14395=(sj3*x14382);
IkReal x14396=((1.0)*cj5*x14381);
IkReal x14397=((1.0)*r22*x14381);
IkReal x14398=(x14392+x14393);
evalcond[0]=((-1.0)*r22*x14382);
evalcond[1]=((((-1.0)*x14381*x14385))+((x14381*x14391)));
evalcond[2]=((1.0)+(((-1.0)*x14381*x14389))+((x14381*x14383)));
evalcond[3]=((((-1.0)*cj1*x14387))+x14384+(((-1.0)*r22*x14381*x14390)));
evalcond[4]=((((-1.0)*cj3*x14397))+(((-1.0)*x14398)));
evalcond[5]=((((-1.0)*x14382*x14383*x14390))+((r10*x14388))+((r11*x14386))+((x14389*x14395)));
evalcond[6]=(((r10*x14382*x14386))+(((-1.0)*r10*sj5*x14390))+(((-1.0)*x14383*x14394))+(((-1.0)*cj5*r11*x14390)));
evalcond[7]=(((r00*x14388))+((r01*x14386))+(((-1.0)*x14382*x14390*x14391))+((x14385*x14395))+(((-1.0)*x14398)));
evalcond[8]=((((-1.0)*x14384))+(((-1.0)*r00*sj5*x14390))+((x14385*x14394))+((cj1*cj2))+(((-1.0)*cj5*r01*x14390))+(((-1.0)*r01*x14382*x14388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14399=cj5*cj5;
IkReal x14400=(r11*sj3);
IkReal x14401=(cj3*r11);
IkReal x14402=(cj3*r10);
IkReal x14403=(r10*sj3);
IkReal x14404=((1.0)*x14402);
IkReal x14405=(cj5*r20*sj5);
IkReal x14406=(r21*x14399);
IkReal x14407=(cj5*r21*sj5);
IkReal x14408=(r20*x14399);
CheckValue<IkReal> x14409=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14403*x14407))+((r21*x14400))+(((-1.0)*x14400*x14406))+(((-1.0)*x14400*x14405))+((r12*r22*sj3))+((x14403*x14408)))),-1);
if(!x14409.valid){
continue;
}
CheckValue<IkReal> x14410 = IKatan2WithCheck(IkReal((((cj5*r22*x14401))+((r22*sj5*x14402)))),IkReal((((r21*x14402))+((x14401*x14407))+(((-1.0)*x14404*x14406))+(((-1.0)*x14404*x14405))+(((-1.0)*x14401*x14408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14409.value)))+(x14410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14411=IKsin(j4);
IkReal x14412=IKcos(j4);
IkReal x14413=(r11*sj5);
IkReal x14414=(cj5*r10);
IkReal x14415=(sj1*sj2);
IkReal x14416=(cj3*cj5);
IkReal x14417=((1.0)*cj2);
IkReal x14418=((1.0)*sj3);
IkReal x14419=(r00*sj5);
IkReal x14420=(cj3*sj5);
IkReal x14421=(r21*sj5);
IkReal x14422=(r01*sj5);
IkReal x14423=((1.0)*cj1*sj2);
IkReal x14424=(sj1*x14417);
IkReal x14425=((1.0)*x14412);
IkReal x14426=((1.0)*x14411);
IkReal x14427=(cj5*sj3*x14412);
IkReal x14428=(x14424+x14423);
evalcond[0]=(((x14411*x14421))+(((-1.0)*r22*x14425))+(((-1.0)*cj5*r20*x14426)));
evalcond[1]=(((x14411*x14422))+(((-1.0)*cj5*r00*x14426))+(((-1.0)*r02*x14425)));
evalcond[2]=((1.0)+(((-1.0)*x14414*x14426))+((x14411*x14413))+(((-1.0)*r12*x14425)));
evalcond[3]=(((r11*x14416))+((r10*x14420))+(((-1.0)*r12*x14411*x14418))+((sj3*x14412*x14414))+(((-1.0)*x14412*x14413*x14418)));
evalcond[4]=(((cj3*x14412*x14414))+(((-1.0)*r10*sj5*x14418))+(((-1.0)*cj5*r11*x14418))+(((-1.0)*cj3*x14413*x14425))+(((-1.0)*cj3*r12*x14426)));
evalcond[5]=((((-1.0)*cj1*x14417))+((r21*x14416))+(((-1.0)*x14412*x14418*x14421))+((r20*x14427))+((r20*x14420))+(((-1.0)*r22*x14411*x14418))+x14415);
evalcond[6]=((((-1.0)*x14412*x14418*x14422))+((r00*x14427))+((cj3*x14419))+((r01*x14416))+(((-1.0)*r02*x14411*x14418))+(((-1.0)*x14428)));
evalcond[7]=((((-1.0)*x14415))+(((-1.0)*x14418*x14419))+((r00*x14412*x14416))+(((-1.0)*r01*x14420*x14425))+((cj1*cj2))+(((-1.0)*cj5*r01*x14418))+(((-1.0)*cj3*r02*x14426)));
evalcond[8]=((((-1.0)*r21*x14420*x14425))+(((-1.0)*r20*sj5*x14418))+(((-1.0)*cj3*r22*x14426))+(((-1.0)*cj5*r21*x14418))+((r20*x14412*x14416))+(((-1.0)*x14428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14429=((1.0)*cj5);
CheckValue<IkReal> x14430=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x14429)))),-1);
if(!x14430.valid){
continue;
}
CheckValue<IkReal> x14431 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14429)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14430.value)))+(x14431.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14432=IKsin(j4);
IkReal x14433=IKcos(j4);
IkReal x14434=(r11*sj5);
IkReal x14435=(cj5*r10);
IkReal x14436=(sj1*sj2);
IkReal x14437=(cj3*cj5);
IkReal x14438=((1.0)*cj2);
IkReal x14439=((1.0)*sj3);
IkReal x14440=(r00*sj5);
IkReal x14441=(cj3*sj5);
IkReal x14442=(r21*sj5);
IkReal x14443=(r01*sj5);
IkReal x14444=((1.0)*cj1*sj2);
IkReal x14445=(sj1*x14438);
IkReal x14446=((1.0)*x14433);
IkReal x14447=((1.0)*x14432);
IkReal x14448=(cj5*sj3*x14433);
IkReal x14449=(x14444+x14445);
evalcond[0]=(((x14432*x14442))+(((-1.0)*cj5*r20*x14447))+(((-1.0)*r22*x14446)));
evalcond[1]=(((x14432*x14443))+(((-1.0)*cj5*r00*x14447))+(((-1.0)*r02*x14446)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14446))+(((-1.0)*x14435*x14447))+((x14432*x14434)));
evalcond[3]=((((-1.0)*r12*x14432*x14439))+((r11*x14437))+((r10*x14441))+((sj3*x14433*x14435))+(((-1.0)*x14433*x14434*x14439)));
evalcond[4]=(((cj3*x14433*x14435))+(((-1.0)*cj3*x14434*x14446))+(((-1.0)*cj3*r12*x14447))+(((-1.0)*r10*sj5*x14439))+(((-1.0)*cj5*r11*x14439)));
evalcond[5]=(((r21*x14437))+((r20*x14448))+((r20*x14441))+(((-1.0)*cj1*x14438))+x14436+(((-1.0)*r22*x14432*x14439))+(((-1.0)*x14433*x14439*x14442)));
evalcond[6]=((((-1.0)*x14449))+(((-1.0)*r02*x14432*x14439))+((r00*x14448))+((r01*x14437))+((cj3*x14440))+(((-1.0)*x14433*x14439*x14443)));
evalcond[7]=((((-1.0)*cj3*r02*x14447))+(((-1.0)*x14439*x14440))+((r00*x14433*x14437))+(((-1.0)*cj5*r01*x14439))+(((-1.0)*r01*x14441*x14446))+(((-1.0)*x14436))+((cj1*cj2)));
evalcond[8]=((((-1.0)*x14449))+(((-1.0)*r20*sj5*x14439))+(((-1.0)*cj5*r21*x14439))+(((-1.0)*r21*x14441*x14446))+((r20*x14433*x14437))+(((-1.0)*cj3*r22*x14447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14450=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14450.valid){
continue;
}
CheckValue<IkReal> x14451 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14450.value)))+(x14451.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14452=IKsin(j4);
IkReal x14453=IKcos(j4);
IkReal x14454=(r11*sj5);
IkReal x14455=(cj5*r10);
IkReal x14456=(sj1*sj2);
IkReal x14457=(cj3*cj5);
IkReal x14458=((1.0)*cj2);
IkReal x14459=((1.0)*sj3);
IkReal x14460=(r00*sj5);
IkReal x14461=(cj3*sj5);
IkReal x14462=(r21*sj5);
IkReal x14463=(r01*sj5);
IkReal x14464=((1.0)*cj1*sj2);
IkReal x14465=(sj1*x14458);
IkReal x14466=((1.0)*x14453);
IkReal x14467=((1.0)*x14452);
IkReal x14468=(cj5*sj3*x14453);
IkReal x14469=(x14464+x14465);
evalcond[0]=(((x14452*x14462))+(((-1.0)*cj5*r20*x14467))+(((-1.0)*r22*x14466)));
evalcond[1]=((((-1.0)*cj5*r00*x14467))+((x14452*x14463))+(((-1.0)*r02*x14466)));
evalcond[2]=((1.0)+((x14452*x14454))+(((-1.0)*r12*x14466))+(((-1.0)*x14455*x14467)));
evalcond[3]=((((-1.0)*r12*x14452*x14459))+((sj3*x14453*x14455))+((r10*x14461))+((r11*x14457))+(((-1.0)*x14453*x14454*x14459)));
evalcond[4]=((((-1.0)*cj5*r11*x14459))+(((-1.0)*cj3*x14454*x14466))+(((-1.0)*cj3*r12*x14467))+(((-1.0)*r10*sj5*x14459))+((cj3*x14453*x14455)));
evalcond[5]=((((-1.0)*r22*x14452*x14459))+(((-1.0)*cj1*x14458))+x14456+(((-1.0)*x14453*x14459*x14462))+((r20*x14461))+((r20*x14468))+((r21*x14457)));
evalcond[6]=(((cj3*x14460))+((r00*x14468))+(((-1.0)*r02*x14452*x14459))+((r01*x14457))+(((-1.0)*x14453*x14459*x14463))+(((-1.0)*x14469)));
evalcond[7]=(((r00*x14453*x14457))+(((-1.0)*cj5*r01*x14459))+(((-1.0)*x14456))+(((-1.0)*cj3*r02*x14467))+(((-1.0)*r01*x14461*x14466))+((cj1*cj2))+(((-1.0)*x14459*x14460)));
evalcond[8]=((((-1.0)*r21*x14461*x14466))+(((-1.0)*r20*sj5*x14459))+(((-1.0)*cj5*r21*x14459))+(((-1.0)*x14469))+((r20*x14453*x14457))+(((-1.0)*cj3*r22*x14467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x14470=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14470;
j4eval[1]=IKsign(x14470);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x14471=((1.0)*cj5);
IkReal x14472=((((-1.0)*r21*x14471))+(((-1.0)*r20*sj5)));
j4eval[0]=x14472;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x14471))+((r01*sj5))))));
j4eval[2]=IKsign(x14472);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x14473=cj5*cj5;
IkReal x14474=(r11*sj3);
IkReal x14475=(r10*sj3);
IkReal x14476=((1.0)*cj5*sj5);
IkReal x14477=((((-1.0)*r21*x14475*x14476))+(((-1.0)*r21*x14473*x14474))+((r21*x14474))+(((-1.0)*r20*x14474*x14476))+((r20*x14473*x14475))+((r12*r22*sj3)));
j4eval[0]=x14477;
j4eval[1]=IKsign(x14477);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x14478=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14478;
j4eval[1]=IKsign(x14478);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x14479=((1.0)*cj5);
IkReal x14480=((((-1.0)*r21*x14479))+(((-1.0)*r20*sj5)));
j4eval[0]=x14480;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x14479))+((r01*sj5))))));
j4eval[2]=IKsign(x14480);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x14481=cj5*cj5;
IkReal x14482=r11*r11;
IkReal x14483=(cj5*r10);
IkReal x14484=(r11*sj5);
IkReal x14485=((((-1.0)*x14482))+(((2.0)*x14483*x14484))+(((-1.0)*x14481*(r10*r10)))+(((-1.0)*(r12*r12)))+((x14481*x14482)));
j4eval[0]=x14485;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x14484))+x14483))));
j4eval[2]=IKsign(x14485);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14486=cj5*cj5;
IkReal x14487=r11*r11;
IkReal x14488=(cj5*r10);
IkReal x14489=(r11*sj5);
CheckValue<IkReal> x14490 = IKatan2WithCheck(IkReal(((((-1.0)*x14489))+x14488)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x14490.valid){
continue;
}
CheckValue<IkReal> x14491=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14486*(r10*r10)))+((x14486*x14487))+(((-1.0)*x14487))+(((-1.0)*(r12*r12)))+(((2.0)*x14488*x14489)))),-1);
if(!x14491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14490.value)+(((1.5707963267949)*(x14491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14492=IKsin(j4);
IkReal x14493=IKcos(j4);
IkReal x14494=(cj5*r10);
IkReal x14495=(r01*sj5);
IkReal x14496=((1.0)*cj2);
IkReal x14497=(cj5*r00);
IkReal x14498=(cj5*r20);
IkReal x14499=((1.0)*x14493);
IkReal x14500=((1.0)*x14492);
IkReal x14501=(sj5*x14492);
evalcond[0]=((((-1.0)*r22*x14499))+((r21*x14501))+(((-1.0)*x14498*x14500)));
evalcond[1]=((((-1.0)*r02*x14499))+(((-1.0)*x14497*x14500))+((x14492*x14495)));
evalcond[2]=((((-1.0)*r12*x14500))+((x14493*x14494))+(((-1.0)*r11*sj5*x14499)));
evalcond[3]=((-1.0)+(((-1.0)*x14494*x14500))+(((-1.0)*r12*x14499))+((r11*x14501)));
evalcond[4]=((((-1.0)*r02*x14500))+((sj1*sj2))+((x14493*x14497))+(((-1.0)*cj1*x14496))+(((-1.0)*x14495*x14499)));
evalcond[5]=((((-1.0)*sj1*x14496))+(((-1.0)*r21*sj5*x14499))+(((-1.0)*cj1*sj2))+((x14493*x14498))+(((-1.0)*r22*x14500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14502=((1.0)*cj5);
CheckValue<IkReal> x14503=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14502))+(((-1.0)*r20*sj5)))),-1);
if(!x14503.valid){
continue;
}
CheckValue<IkReal> x14504 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14502)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14503.value)))+(x14504.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14505=IKsin(j4);
IkReal x14506=IKcos(j4);
IkReal x14507=(cj5*r10);
IkReal x14508=(r01*sj5);
IkReal x14509=((1.0)*cj2);
IkReal x14510=(cj5*r00);
IkReal x14511=(cj5*r20);
IkReal x14512=((1.0)*x14506);
IkReal x14513=((1.0)*x14505);
IkReal x14514=(sj5*x14505);
evalcond[0]=((((-1.0)*r22*x14512))+(((-1.0)*x14511*x14513))+((r21*x14514)));
evalcond[1]=(((x14505*x14508))+(((-1.0)*x14510*x14513))+(((-1.0)*r02*x14512)));
evalcond[2]=(((x14506*x14507))+(((-1.0)*r12*x14513))+(((-1.0)*r11*sj5*x14512)));
evalcond[3]=((-1.0)+(((-1.0)*x14507*x14513))+((r11*x14514))+(((-1.0)*r12*x14512)));
evalcond[4]=((((-1.0)*cj1*x14509))+((sj1*sj2))+(((-1.0)*r02*x14513))+((x14506*x14510))+(((-1.0)*x14508*x14512)));
evalcond[5]=((((-1.0)*r22*x14513))+(((-1.0)*sj1*x14509))+(((-1.0)*cj1*sj2))+((x14506*x14511))+(((-1.0)*r21*sj5*x14512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14515 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14515.valid){
continue;
}
CheckValue<IkReal> x14516=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14515.value)+(((1.5707963267949)*(x14516.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14517=IKsin(j4);
IkReal x14518=IKcos(j4);
IkReal x14519=(cj5*r10);
IkReal x14520=(r01*sj5);
IkReal x14521=((1.0)*cj2);
IkReal x14522=(cj5*r00);
IkReal x14523=(cj5*r20);
IkReal x14524=((1.0)*x14518);
IkReal x14525=((1.0)*x14517);
IkReal x14526=(sj5*x14517);
evalcond[0]=((((-1.0)*x14523*x14525))+(((-1.0)*r22*x14524))+((r21*x14526)));
evalcond[1]=(((x14517*x14520))+(((-1.0)*x14522*x14525))+(((-1.0)*r02*x14524)));
evalcond[2]=((((-1.0)*r11*sj5*x14524))+((x14518*x14519))+(((-1.0)*r12*x14525)));
evalcond[3]=((-1.0)+(((-1.0)*x14519*x14525))+((r11*x14526))+(((-1.0)*r12*x14524)));
evalcond[4]=((((-1.0)*x14520*x14524))+(((-1.0)*cj1*x14521))+((sj1*sj2))+((x14518*x14522))+(((-1.0)*r02*x14525)));
evalcond[5]=((((-1.0)*r22*x14525))+(((-1.0)*cj1*sj2))+((x14518*x14523))+(((-1.0)*r21*sj5*x14524))+(((-1.0)*sj1*x14521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14527=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14527;
j4eval[1]=IKsign(x14527);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14528=((1.0)*cj5);
IkReal x14529=((((-1.0)*r21*x14528))+(((-1.0)*r20*sj5)));
j4eval[0]=x14529;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x14528))))));
j4eval[2]=IKsign(x14529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14530=cj5*cj5;
IkReal x14531=r11*r11;
IkReal x14532=(r11*sj5);
IkReal x14533=(cj5*r10);
IkReal x14534=((r12*r12)+((x14530*(r10*r10)))+x14531+(((-2.0)*x14532*x14533))+(((-1.0)*x14530*x14531)));
j4eval[0]=x14534;
j4eval[1]=IKsign(x14534);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x14533))+x14532))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14535=cj5*cj5;
IkReal x14536=r11*r11;
IkReal x14537=(cj5*r10);
IkReal x14538=(r11*sj5);
CheckValue<IkReal> x14539=IKPowWithIntegerCheck(IKsign(((r12*r12)+x14536+((x14535*(r10*r10)))+(((-2.0)*x14537*x14538))+(((-1.0)*x14535*x14536)))),-1);
if(!x14539.valid){
continue;
}
CheckValue<IkReal> x14540 = IKatan2WithCheck(IkReal(((((-1.0)*x14537))+x14538)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14539.value)))+(x14540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14541=IKcos(j4);
IkReal x14542=IKsin(j4);
IkReal x14543=(cj5*r00);
IkReal x14544=(cj5*r10);
IkReal x14545=(r21*sj5);
IkReal x14546=((1.0)*cj2);
IkReal x14547=(cj5*r20);
IkReal x14548=((1.0)*x14541);
IkReal x14549=((1.0)*x14542);
IkReal x14550=(sj5*x14542);
IkReal x14551=(sj5*x14541);
evalcond[0]=(((r12*x14542))+(((-1.0)*x14544*x14548))+((r11*x14551)));
evalcond[1]=(((x14542*x14545))+(((-1.0)*x14547*x14549))+(((-1.0)*r22*x14548)));
evalcond[2]=((((-1.0)*x14543*x14549))+(((-1.0)*r02*x14548))+((r01*x14550)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14548))+(((-1.0)*x14544*x14549))+((r11*x14550)));
evalcond[4]=(((r02*x14542))+((sj1*sj2))+(((-1.0)*cj1*x14546))+(((-1.0)*x14543*x14548))+((r01*x14551)));
evalcond[5]=(((x14541*x14545))+(((-1.0)*sj1*x14546))+(((-1.0)*x14547*x14548))+(((-1.0)*cj1*sj2))+((r22*x14542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14552=((1.0)*cj5);
CheckValue<IkReal> x14553=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14552))+(((-1.0)*r20*sj5)))),-1);
if(!x14553.valid){
continue;
}
CheckValue<IkReal> x14554 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14553.value)))+(x14554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14555=IKcos(j4);
IkReal x14556=IKsin(j4);
IkReal x14557=(cj5*r00);
IkReal x14558=(cj5*r10);
IkReal x14559=(r21*sj5);
IkReal x14560=((1.0)*cj2);
IkReal x14561=(cj5*r20);
IkReal x14562=((1.0)*x14555);
IkReal x14563=((1.0)*x14556);
IkReal x14564=(sj5*x14556);
IkReal x14565=(sj5*x14555);
evalcond[0]=(((r12*x14556))+((r11*x14565))+(((-1.0)*x14558*x14562)));
evalcond[1]=((((-1.0)*r22*x14562))+((x14556*x14559))+(((-1.0)*x14561*x14563)));
evalcond[2]=(((r01*x14564))+(((-1.0)*r02*x14562))+(((-1.0)*x14557*x14563)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14562))+((r11*x14564))+(((-1.0)*x14558*x14563)));
evalcond[4]=(((r01*x14565))+(((-1.0)*cj1*x14560))+((sj1*sj2))+((r02*x14556))+(((-1.0)*x14557*x14562)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x14555*x14559))+(((-1.0)*x14561*x14562))+(((-1.0)*sj1*x14560))+((r22*x14556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14566 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14566.valid){
continue;
}
CheckValue<IkReal> x14567=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14566.value)+(((1.5707963267949)*(x14567.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14568=IKcos(j4);
IkReal x14569=IKsin(j4);
IkReal x14570=(cj5*r00);
IkReal x14571=(cj5*r10);
IkReal x14572=(r21*sj5);
IkReal x14573=((1.0)*cj2);
IkReal x14574=(cj5*r20);
IkReal x14575=((1.0)*x14568);
IkReal x14576=((1.0)*x14569);
IkReal x14577=(sj5*x14569);
IkReal x14578=(sj5*x14568);
evalcond[0]=((((-1.0)*x14571*x14575))+((r11*x14578))+((r12*x14569)));
evalcond[1]=((((-1.0)*r22*x14575))+(((-1.0)*x14574*x14576))+((x14569*x14572)));
evalcond[2]=((((-1.0)*x14570*x14576))+(((-1.0)*r02*x14575))+((r01*x14577)));
evalcond[3]=((-1.0)+(((-1.0)*x14571*x14576))+(((-1.0)*r12*x14575))+((r11*x14577)));
evalcond[4]=((((-1.0)*x14570*x14575))+(((-1.0)*cj1*x14573))+((sj1*sj2))+((r02*x14569))+((r01*x14578)));
evalcond[5]=(((x14568*x14572))+(((-1.0)*cj1*sj2))+(((-1.0)*x14574*x14575))+(((-1.0)*sj1*x14573))+((r22*x14569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14580 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14580)==0){
continue;
}
IkReal x14579=pow(x14580,-0.5);
CheckValue<IkReal> x14581 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14581.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14581.value));
IkReal gconst37=((-1.0)*r01*x14579);
IkReal gconst38=(r00*x14579);
CheckValue<IkReal> x14582 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14582.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14582.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14585 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14585.valid){
continue;
}
IkReal x14583=((-1.0)*(x14585.value));
IkReal x14584=x14579;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14583;
IkReal gconst36=x14583;
IkReal gconst37=((-1.0)*r01*x14584);
IkReal gconst38=(r00*x14584);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14588 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14588.valid){
continue;
}
IkReal x14586=((-1.0)*(x14588.value));
IkReal x14587=x14579;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14586;
IkReal gconst36=x14586;
IkReal gconst37=((-1.0)*r01*x14587);
IkReal gconst38=(r00*x14587);
CheckValue<IkReal> x14596=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14596.valid){
continue;
}
IkReal x14589=x14596.value;
IkReal x14590=(sj3*x14589);
IkReal x14591=(r11*x14590);
IkReal x14592=(r21*x14590);
IkReal x14593=(r20*x14590);
IkReal x14594=(r10*x14590);
IkReal x14595=(r00*r01*x14590);
j4eval[0]=IKsign((((r00*r01*r10*x14592))+((r00*r01*r20*x14591))+((r12*r22*sj3))+((r21*x14591*(r01*r01)))+((r10*x14593*(r00*r00)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14599 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14599.valid){
continue;
}
IkReal x14597=((-1.0)*(x14599.value));
IkReal x14598=x14579;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14597;
IkReal gconst36=x14597;
IkReal gconst37=((-1.0)*r01*x14598);
IkReal gconst38=(r00*x14598);
CheckValue<IkReal> x14607=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14607.valid){
continue;
}
IkReal x14600=x14607.value;
IkReal x14601=(cj3*x14600);
IkReal x14602=(r21*x14601);
IkReal x14603=(r10*x14601);
IkReal x14604=(r11*x14601);
IkReal x14605=(r20*x14601);
IkReal x14606=(r00*r01*x14601);
j4eval[0]=IKsign((((cj3*r12*r22))+((r00*r01*r20*x14604))+((r11*x14602*(r01*r01)))+((r00*r01*r10*x14602))+((r20*x14603*(r00*r00)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14608=gconst38*gconst38;
IkReal x14609=gconst37*gconst37;
IkReal x14610=((1.0)*r21);
IkReal x14611=(r20*sj3);
IkReal x14612=(r10*sj3);
IkReal x14613=(cj3*r20);
IkReal x14614=(gconst37*gconst38*r10);
IkReal x14615=((1.0)*gconst38*r11);
CheckValue<IkReal> x14616=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*gconst37*x14613*x14615))+(((-1.0)*cj3*x14610*x14614))+((r10*x14608*x14613))+((cj3*r11*r21*x14609)))),-1);
if(!x14616.valid){
continue;
}
CheckValue<IkReal> x14617 = IKatan2WithCheck(IkReal(((((-1.0)*r22*sj3*x14615))+(((-1.0)*gconst37*r22*x14612)))),IkReal(((((-1.0)*x14609*x14610*x14612))+((r11*x14608*x14611))+(((-1.0)*gconst37*gconst38*r11*sj3*x14610))+((x14611*x14614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14616.value)))+(x14617.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14618=IKsin(j4);
IkReal x14619=IKcos(j4);
IkReal x14620=(sj1*sj2);
IkReal x14621=(cj3*gconst38);
IkReal x14622=(cj3*gconst37);
IkReal x14623=(gconst38*r10);
IkReal x14624=((1.0)*cj1);
IkReal x14625=(gconst38*r00);
IkReal x14626=(r21*sj3);
IkReal x14627=((1.0)*gconst38);
IkReal x14628=(cj2*sj1);
IkReal x14629=(r01*sj3);
IkReal x14630=(r11*sj3);
IkReal x14631=(cj2*x14624);
IkReal x14632=((1.0)*x14619);
IkReal x14633=((1.0)*x14618);
IkReal x14634=(r20*x14619);
IkReal x14635=(sj3*x14619);
IkReal x14636=((1.0)*gconst37*sj3);
IkReal x14637=(gconst37*x14618);
evalcond[0]=((((-1.0)*r22*x14632))+(((-1.0)*r20*x14618*x14627))+((r21*x14637)));
evalcond[1]=(((r01*x14637))+(((-1.0)*x14625*x14633))+(((-1.0)*r02*x14632)));
evalcond[2]=((-1.0)+(((-1.0)*x14623*x14633))+((r11*x14637))+(((-1.0)*r12*x14632)));
evalcond[3]=(((x14623*x14635))+((r11*x14621))+((r10*x14622))+(((-1.0)*r12*sj3*x14633))+(((-1.0)*gconst37*x14630*x14632)));
evalcond[4]=((((-1.0)*x14627*x14630))+(((-1.0)*r11*x14622*x14632))+((r10*x14619*x14621))+(((-1.0)*cj3*r12*x14633))+(((-1.0)*r10*x14636)));
evalcond[5]=((((-1.0)*gconst37*x14629*x14632))+(((-1.0)*r02*sj3*x14633))+((cj1*sj2))+((x14625*x14635))+x14628+((r00*x14622))+((r01*x14621)));
evalcond[6]=(((r21*x14621))+(((-1.0)*gconst37*x14626*x14632))+((r20*x14622))+(((-1.0)*r22*sj3*x14633))+((gconst38*sj3*x14634))+(((-1.0)*x14631))+x14620);
evalcond[7]=((((-1.0)*cj3*r02*x14633))+(((-1.0)*r01*x14622*x14632))+(((-1.0)*x14631))+(((-1.0)*r00*x14636))+x14620+((r00*x14619*x14621))+(((-1.0)*x14627*x14629)));
evalcond[8]=(((x14621*x14634))+(((-1.0)*r20*x14636))+(((-1.0)*sj2*x14624))+(((-1.0)*cj3*r22*x14633))+(((-1.0)*r21*x14622*x14632))+(((-1.0)*x14628))+(((-1.0)*x14626*x14627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14638=gconst38*gconst38;
IkReal x14639=gconst37*gconst37;
IkReal x14640=(gconst37*r10);
IkReal x14641=(cj3*r22);
IkReal x14642=((1.0)*gconst38);
IkReal x14643=(r21*sj3);
IkReal x14644=(gconst38*r11);
IkReal x14645=(cj3*r20);
IkReal x14646=(cj3*r21);
IkReal x14647=(r20*sj3);
CheckValue<IkReal> x14648=IKPowWithIntegerCheck(IKsign((((r10*x14638*x14647))+((r11*x14639*x14643))+(((-1.0)*gconst37*r11*x14642*x14647))+(((-1.0)*x14640*x14642*x14643))+((r12*r22*sj3)))),-1);
if(!x14648.valid){
continue;
}
CheckValue<IkReal> x14649 = IKatan2WithCheck(IkReal((((x14641*x14644))+((x14640*x14641)))),IkReal((((r10*x14639*x14646))+((gconst37*x14644*x14646))+(((-1.0)*r11*x14638*x14645))+(((-1.0)*x14640*x14642*x14645)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14648.value)))+(x14649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14650=IKsin(j4);
IkReal x14651=IKcos(j4);
IkReal x14652=(sj1*sj2);
IkReal x14653=(cj3*gconst38);
IkReal x14654=(cj3*gconst37);
IkReal x14655=(gconst38*r10);
IkReal x14656=((1.0)*cj1);
IkReal x14657=(gconst38*r00);
IkReal x14658=(r21*sj3);
IkReal x14659=((1.0)*gconst38);
IkReal x14660=(cj2*sj1);
IkReal x14661=(r01*sj3);
IkReal x14662=(r11*sj3);
IkReal x14663=(cj2*x14656);
IkReal x14664=((1.0)*x14651);
IkReal x14665=((1.0)*x14650);
IkReal x14666=(r20*x14651);
IkReal x14667=(sj3*x14651);
IkReal x14668=((1.0)*gconst37*sj3);
IkReal x14669=(gconst37*x14650);
evalcond[0]=((((-1.0)*r22*x14664))+((r21*x14669))+(((-1.0)*r20*x14650*x14659)));
evalcond[1]=((((-1.0)*x14657*x14665))+((r01*x14669))+(((-1.0)*r02*x14664)));
evalcond[2]=((-1.0)+(((-1.0)*x14655*x14665))+(((-1.0)*r12*x14664))+((r11*x14669)));
evalcond[3]=(((r10*x14654))+((x14655*x14667))+(((-1.0)*r12*sj3*x14665))+(((-1.0)*gconst37*x14662*x14664))+((r11*x14653)));
evalcond[4]=((((-1.0)*r11*x14654*x14664))+(((-1.0)*cj3*r12*x14665))+(((-1.0)*x14659*x14662))+(((-1.0)*r10*x14668))+((r10*x14651*x14653)));
evalcond[5]=(((x14657*x14667))+(((-1.0)*gconst37*x14661*x14664))+((cj1*sj2))+((r00*x14654))+((r01*x14653))+x14660+(((-1.0)*r02*sj3*x14665)));
evalcond[6]=((((-1.0)*r22*sj3*x14665))+(((-1.0)*gconst37*x14658*x14664))+x14652+((r21*x14653))+((r20*x14654))+((gconst38*sj3*x14666))+(((-1.0)*x14663)));
evalcond[7]=((((-1.0)*x14659*x14661))+(((-1.0)*r01*x14654*x14664))+(((-1.0)*cj3*r02*x14665))+((r00*x14651*x14653))+x14652+(((-1.0)*r00*x14668))+(((-1.0)*x14663)));
evalcond[8]=((((-1.0)*x14658*x14659))+(((-1.0)*x14660))+(((-1.0)*cj3*r22*x14665))+((x14653*x14666))+(((-1.0)*sj2*x14656))+(((-1.0)*r20*x14668))+(((-1.0)*r21*x14654*x14664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14670=((1.0)*gconst38);
CheckValue<IkReal> x14671 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14670))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14671.valid){
continue;
}
CheckValue<IkReal> x14672=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14670)))),-1);
if(!x14672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14671.value)+(((1.5707963267949)*(x14672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14673=IKsin(j4);
IkReal x14674=IKcos(j4);
IkReal x14675=(sj1*sj2);
IkReal x14676=(cj3*gconst38);
IkReal x14677=(cj3*gconst37);
IkReal x14678=(gconst38*r10);
IkReal x14679=((1.0)*cj1);
IkReal x14680=(gconst38*r00);
IkReal x14681=(r21*sj3);
IkReal x14682=((1.0)*gconst38);
IkReal x14683=(cj2*sj1);
IkReal x14684=(r01*sj3);
IkReal x14685=(r11*sj3);
IkReal x14686=(cj2*x14679);
IkReal x14687=((1.0)*x14674);
IkReal x14688=((1.0)*x14673);
IkReal x14689=(r20*x14674);
IkReal x14690=(sj3*x14674);
IkReal x14691=((1.0)*gconst37*sj3);
IkReal x14692=(gconst37*x14673);
evalcond[0]=((((-1.0)*r20*x14673*x14682))+(((-1.0)*r22*x14687))+((r21*x14692)));
evalcond[1]=(((r01*x14692))+(((-1.0)*r02*x14687))+(((-1.0)*x14680*x14688)));
evalcond[2]=((-1.0)+(((-1.0)*x14678*x14688))+((r11*x14692))+(((-1.0)*r12*x14687)));
evalcond[3]=((((-1.0)*r12*sj3*x14688))+((r10*x14677))+((x14678*x14690))+(((-1.0)*gconst37*x14685*x14687))+((r11*x14676)));
evalcond[4]=(((r10*x14674*x14676))+(((-1.0)*x14682*x14685))+(((-1.0)*r11*x14677*x14687))+(((-1.0)*cj3*r12*x14688))+(((-1.0)*r10*x14691)));
evalcond[5]=(((x14680*x14690))+(((-1.0)*r02*sj3*x14688))+((cj1*sj2))+((r00*x14677))+((r01*x14676))+x14683+(((-1.0)*gconst37*x14684*x14687)));
evalcond[6]=(((r20*x14677))+((r21*x14676))+((gconst38*sj3*x14689))+(((-1.0)*x14686))+(((-1.0)*r22*sj3*x14688))+x14675+(((-1.0)*gconst37*x14681*x14687)));
evalcond[7]=((((-1.0)*r00*x14691))+(((-1.0)*x14682*x14684))+(((-1.0)*x14686))+(((-1.0)*r01*x14677*x14687))+x14675+((r00*x14674*x14676))+(((-1.0)*cj3*r02*x14688)));
evalcond[8]=(((x14676*x14689))+(((-1.0)*sj2*x14679))+(((-1.0)*r21*x14677*x14687))+(((-1.0)*r20*x14691))+(((-1.0)*x14681*x14682))+(((-1.0)*cj3*r22*x14688))+(((-1.0)*x14683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14694 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14694)==0){
continue;
}
IkReal x14693=pow(x14694,-0.5);
CheckValue<IkReal> x14695 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14695.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14695.value))));
IkReal gconst40=((1.0)*r01*x14693);
IkReal gconst41=((-1.0)*r00*x14693);
CheckValue<IkReal> x14696 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14696.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14696.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14699 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14699.valid){
continue;
}
IkReal x14697=((1.0)*(x14699.value));
IkReal x14698=x14693;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14697)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14697)));
IkReal gconst40=((1.0)*r01*x14698);
IkReal gconst41=((-1.0)*r00*x14698);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14702 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14702.valid){
continue;
}
IkReal x14700=((1.0)*(x14702.value));
IkReal x14701=x14693;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14700)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14700)));
IkReal gconst40=((1.0)*r01*x14701);
IkReal gconst41=((-1.0)*r00*x14701);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14703=gconst40*gconst40;
IkReal x14704=gconst41*gconst41;
IkReal x14705=(r11*sj3);
IkReal x14706=(gconst40*gconst41);
IkReal x14707=((1.0)*r20);
IkReal x14708=(cj3*r10);
IkReal x14709=(cj3*r11);
IkReal x14710=(r10*sj3);
IkReal x14711=(r21*x14703);
CheckValue<IkReal> x14712=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14706*x14710))+((r12*r22*sj3))+(((-1.0)*x14705*x14706*x14707))+((x14705*x14711))+((r20*x14704*x14710)))),-1);
if(!x14712.valid){
continue;
}
CheckValue<IkReal> x14713 = IKatan2WithCheck(IkReal((((gconst40*r22*x14708))+((gconst41*r22*x14709)))),IkReal(((((-1.0)*x14706*x14707*x14708))+((r21*x14706*x14709))+(((-1.0)*x14704*x14707*x14709))+((x14708*x14711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14712.value)))+(x14713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14714=IKsin(j4);
IkReal x14715=IKcos(j4);
IkReal x14716=(sj1*sj2);
IkReal x14717=(gconst40*sj3);
IkReal x14718=(cj3*gconst41);
IkReal x14719=(gconst41*r20);
IkReal x14720=(gconst41*sj3);
IkReal x14721=((1.0)*cj2);
IkReal x14722=(cj1*sj2);
IkReal x14723=(cj3*gconst40);
IkReal x14724=(cj1*x14721);
IkReal x14725=((1.0)*x14715);
IkReal x14726=((1.0)*x14714);
IkReal x14727=(r00*x14715);
IkReal x14728=(r10*x14715);
IkReal x14729=(gconst40*x14714);
evalcond[0]=(((r21*x14729))+(((-1.0)*x14719*x14726))+(((-1.0)*r22*x14725)));
evalcond[1]=(((r01*x14729))+(((-1.0)*gconst41*r00*x14726))+(((-1.0)*r02*x14725)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14725))+((r11*x14729))+(((-1.0)*gconst41*r10*x14726)));
evalcond[3]=(((r11*x14718))+((x14720*x14728))+(((-1.0)*r12*sj3*x14726))+(((-1.0)*r11*x14717*x14725))+((r10*x14723)));
evalcond[4]=((((-1.0)*r10*x14717))+((x14718*x14728))+(((-1.0)*r11*x14720))+(((-1.0)*cj3*r12*x14726))+(((-1.0)*r11*x14723*x14725)));
evalcond[5]=(((r00*x14723))+((cj2*sj1))+(((-1.0)*r01*x14717*x14725))+((x14720*x14727))+(((-1.0)*r02*sj3*x14726))+((r01*x14718))+x14722);
evalcond[6]=(((r21*x14718))+((r20*x14723))+(((-1.0)*r21*x14717*x14725))+(((-1.0)*r22*sj3*x14726))+x14716+(((-1.0)*x14724))+((sj3*x14715*x14719)));
evalcond[7]=(((x14718*x14727))+(((-1.0)*r00*x14717))+x14716+(((-1.0)*x14724))+(((-1.0)*r01*x14723*x14725))+(((-1.0)*r01*x14720))+(((-1.0)*cj3*r02*x14726)));
evalcond[8]=((((-1.0)*x14722))+(((-1.0)*sj1*x14721))+((r20*x14715*x14718))+(((-1.0)*cj3*r22*x14726))+(((-1.0)*r21*x14720))+(((-1.0)*r20*x14717))+(((-1.0)*r21*x14723*x14725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14730=((1.0)*gconst41);
CheckValue<IkReal> x14731 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14730))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14731.valid){
continue;
}
CheckValue<IkReal> x14732=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14730))+(((-1.0)*gconst40*r20)))),-1);
if(!x14732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14731.value)+(((1.5707963267949)*(x14732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14733=IKsin(j4);
IkReal x14734=IKcos(j4);
IkReal x14735=(sj1*sj2);
IkReal x14736=(gconst40*sj3);
IkReal x14737=(cj3*gconst41);
IkReal x14738=(gconst41*r20);
IkReal x14739=(gconst41*sj3);
IkReal x14740=((1.0)*cj2);
IkReal x14741=(cj1*sj2);
IkReal x14742=(cj3*gconst40);
IkReal x14743=(cj1*x14740);
IkReal x14744=((1.0)*x14734);
IkReal x14745=((1.0)*x14733);
IkReal x14746=(r00*x14734);
IkReal x14747=(r10*x14734);
IkReal x14748=(gconst40*x14733);
evalcond[0]=((((-1.0)*x14738*x14745))+((r21*x14748))+(((-1.0)*r22*x14744)));
evalcond[1]=((((-1.0)*r02*x14744))+(((-1.0)*gconst41*r00*x14745))+((r01*x14748)));
evalcond[2]=((-1.0)+((r11*x14748))+(((-1.0)*gconst41*r10*x14745))+(((-1.0)*r12*x14744)));
evalcond[3]=((((-1.0)*r11*x14736*x14744))+((r10*x14742))+(((-1.0)*r12*sj3*x14745))+((x14739*x14747))+((r11*x14737)));
evalcond[4]=((((-1.0)*r10*x14736))+((x14737*x14747))+(((-1.0)*r11*x14742*x14744))+(((-1.0)*r11*x14739))+(((-1.0)*cj3*r12*x14745)));
evalcond[5]=(((cj2*sj1))+((r01*x14737))+(((-1.0)*r01*x14736*x14744))+((r00*x14742))+x14741+((x14739*x14746))+(((-1.0)*r02*sj3*x14745)));
evalcond[6]=((((-1.0)*r21*x14736*x14744))+(((-1.0)*x14743))+x14735+((r20*x14742))+(((-1.0)*r22*sj3*x14745))+((sj3*x14734*x14738))+((r21*x14737)));
evalcond[7]=(((x14737*x14746))+(((-1.0)*r01*x14742*x14744))+(((-1.0)*x14743))+x14735+(((-1.0)*cj3*r02*x14745))+(((-1.0)*r01*x14739))+(((-1.0)*r00*x14736)));
evalcond[8]=((((-1.0)*cj3*r22*x14745))+(((-1.0)*r20*x14736))+(((-1.0)*x14741))+(((-1.0)*sj1*x14740))+(((-1.0)*r21*x14739))+(((-1.0)*r21*x14742*x14744))+((r20*x14734*x14737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14749 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14749.valid){
continue;
}
CheckValue<IkReal> x14750=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14749.value)+(((1.5707963267949)*(x14750.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14751=IKsin(j4);
IkReal x14752=IKcos(j4);
IkReal x14753=(sj1*sj2);
IkReal x14754=(gconst40*sj3);
IkReal x14755=(cj3*gconst41);
IkReal x14756=(gconst41*r20);
IkReal x14757=(gconst41*sj3);
IkReal x14758=((1.0)*cj2);
IkReal x14759=(cj1*sj2);
IkReal x14760=(cj3*gconst40);
IkReal x14761=(cj1*x14758);
IkReal x14762=((1.0)*x14752);
IkReal x14763=((1.0)*x14751);
IkReal x14764=(r00*x14752);
IkReal x14765=(r10*x14752);
IkReal x14766=(gconst40*x14751);
evalcond[0]=((((-1.0)*x14756*x14763))+(((-1.0)*r22*x14762))+((r21*x14766)));
evalcond[1]=((((-1.0)*r02*x14762))+((r01*x14766))+(((-1.0)*gconst41*r00*x14763)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14763))+(((-1.0)*r12*x14762))+((r11*x14766)));
evalcond[3]=(((r10*x14760))+(((-1.0)*r12*sj3*x14763))+(((-1.0)*r11*x14754*x14762))+((x14757*x14765))+((r11*x14755)));
evalcond[4]=(((x14755*x14765))+(((-1.0)*r11*x14760*x14762))+(((-1.0)*cj3*r12*x14763))+(((-1.0)*r11*x14757))+(((-1.0)*r10*x14754)));
evalcond[5]=(((cj2*sj1))+((r00*x14760))+(((-1.0)*r02*sj3*x14763))+(((-1.0)*r01*x14754*x14762))+x14759+((x14757*x14764))+((r01*x14755)));
evalcond[6]=(((sj3*x14752*x14756))+(((-1.0)*r21*x14754*x14762))+((r20*x14760))+(((-1.0)*r22*sj3*x14763))+x14753+((r21*x14755))+(((-1.0)*x14761)));
evalcond[7]=((((-1.0)*r01*x14757))+((x14755*x14764))+(((-1.0)*cj3*r02*x14763))+(((-1.0)*r01*x14760*x14762))+x14753+(((-1.0)*r00*x14754))+(((-1.0)*x14761)));
evalcond[8]=((((-1.0)*sj1*x14758))+(((-1.0)*r21*x14760*x14762))+(((-1.0)*r20*x14754))+(((-1.0)*cj3*r22*x14763))+(((-1.0)*r21*x14757))+((r20*x14752*x14755))+(((-1.0)*x14759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14767=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14767);
rxp1_1=(px*r21);
rxp1_2=(r11*x14767);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14768=(cj5*r10);
IkReal x14769=(r11*sj5);
j4eval[0]=((((-1.0)*x14768))+x14769);
j4eval[1]=(((cj3*x14768))+(((-1.0)*cj3*x14769)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14770=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14770);
rxp1_1=(px*r21);
rxp1_2=(r11*x14770);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14771=(cj5*r10);
IkReal x14772=(r11*sj5);
j4eval[0]=((((-1.0)*x14771))+x14772);
j4eval[1]=(((sj3*x14771))+(((-1.0)*sj3*x14772)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14773=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14773);
rxp1_1=(px*r21);
rxp1_2=(r11*x14773);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14774=((1.0)*r11);
CheckValue<IkReal> x14775=IKPowWithIntegerCheck(r02,-1);
if(!x14775.valid){
continue;
}
CheckValue<IkReal> x14776=IKPowWithIntegerCheck(sj3,-1);
if(!x14776.valid){
continue;
}
CheckValue<IkReal> x14777=IKPowWithIntegerCheck((((cj5*r10*sj3))+(((-1.0)*sj3*sj5*x14774))),-1);
if(!x14777.valid){
continue;
}
if( IKabs(((x14775.value)*(x14776.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14777.value)*(((((-1.0)*cj3*cj5*x14774))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14775.value)*(x14776.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x14777.value)*(((((-1.0)*cj3*cj5*x14774))+(((-1.0)*cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14775.value)*(x14776.value)*((((cj2*sj1))+((cj1*sj2))))), ((x14777.value)*(((((-1.0)*cj3*cj5*x14774))+(((-1.0)*cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14778=IKsin(j4);
IkReal x14779=IKcos(j4);
IkReal x14780=(sj1*sj2);
IkReal x14781=((1.0)*r11);
IkReal x14782=(cj3*sj5);
IkReal x14783=(cj5*r10);
IkReal x14784=(cj5*sj3);
IkReal x14785=((1.0)*cj2);
IkReal x14786=(cj1*sj2);
IkReal x14787=((1.0)*sj5);
IkReal x14788=(cj3*cj5);
IkReal x14789=((1.0)*r21);
IkReal x14790=(cj1*x14785);
IkReal x14791=((1.0)*x14778);
IkReal x14792=(r20*x14779);
IkReal x14793=(sj5*x14778);
IkReal x14794=(sj3*x14779);
evalcond[0]=((-1.0)*r02*x14779);
evalcond[1]=(((r21*x14793))+(((-1.0)*cj5*r20*x14791)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*r02*sj3*x14791))+x14786);
evalcond[3]=((-1.0)+((r11*x14793))+(((-1.0)*x14783*x14791)));
evalcond[4]=((((-1.0)*cj3*r02*x14791))+x14780+(((-1.0)*x14790)));
evalcond[5]=(((r10*x14782))+((x14783*x14794))+((r11*x14788))+(((-1.0)*sj5*x14781*x14794)));
evalcond[6]=((((-1.0)*x14779*x14781*x14782))+(((-1.0)*r10*sj3*x14787))+(((-1.0)*x14781*x14784))+((cj3*x14779*x14783)));
evalcond[7]=(((x14784*x14792))+((r20*x14782))+((r21*x14788))+x14780+(((-1.0)*r21*x14787*x14794))+(((-1.0)*x14790)));
evalcond[8]=(((x14788*x14792))+(((-1.0)*x14786))+(((-1.0)*sj1*x14785))+(((-1.0)*x14784*x14789))+(((-1.0)*x14779*x14782*x14789))+(((-1.0)*r20*sj3*x14787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14795=(cj5*r10);
IkReal x14796=((1.0)*r11);
CheckValue<IkReal> x14797=IKPowWithIntegerCheck(((((-1.0)*x14795))+((r11*sj5))),-1);
if(!x14797.valid){
continue;
}
CheckValue<IkReal> x14798=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x14796))+((sj3*x14795))),-1);
if(!x14798.valid){
continue;
}
if( IKabs(x14797.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14798.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14796)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14797.value)+IKsqr(((x14798.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14796))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14797.value, ((x14798.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14796))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14799=IKsin(j4);
IkReal x14800=IKcos(j4);
IkReal x14801=(sj1*sj2);
IkReal x14802=((1.0)*r11);
IkReal x14803=(cj3*sj5);
IkReal x14804=(cj5*r10);
IkReal x14805=(cj5*sj3);
IkReal x14806=((1.0)*cj2);
IkReal x14807=(cj1*sj2);
IkReal x14808=((1.0)*sj5);
IkReal x14809=(cj3*cj5);
IkReal x14810=((1.0)*r21);
IkReal x14811=(cj1*x14806);
IkReal x14812=((1.0)*x14799);
IkReal x14813=(r20*x14800);
IkReal x14814=(sj5*x14799);
IkReal x14815=(sj3*x14800);
evalcond[0]=((-1.0)*r02*x14800);
evalcond[1]=(((r21*x14814))+(((-1.0)*cj5*r20*x14812)));
evalcond[2]=(((cj2*sj1))+x14807+(((-1.0)*r02*sj3*x14812)));
evalcond[3]=((-1.0)+(((-1.0)*x14804*x14812))+((r11*x14814)));
evalcond[4]=(x14801+(((-1.0)*cj3*r02*x14812))+(((-1.0)*x14811)));
evalcond[5]=(((r10*x14803))+((r11*x14809))+(((-1.0)*sj5*x14802*x14815))+((x14804*x14815)));
evalcond[6]=((((-1.0)*r10*sj3*x14808))+((cj3*x14800*x14804))+(((-1.0)*x14802*x14805))+(((-1.0)*x14800*x14802*x14803)));
evalcond[7]=(((r21*x14809))+x14801+(((-1.0)*x14811))+(((-1.0)*r21*x14808*x14815))+((x14805*x14813))+((r20*x14803)));
evalcond[8]=((((-1.0)*x14800*x14803*x14810))+((x14809*x14813))+(((-1.0)*x14807))+(((-1.0)*r20*sj3*x14808))+(((-1.0)*sj1*x14806))+(((-1.0)*x14805*x14810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14816=(r11*sj5);
IkReal x14817=(cj5*r10);
CheckValue<IkReal> x14818=IKPowWithIntegerCheck((x14816+(((-1.0)*x14817))),-1);
if(!x14818.valid){
continue;
}
CheckValue<IkReal> x14819=IKPowWithIntegerCheck(((((-1.0)*cj3*x14816))+((cj3*x14817))),-1);
if(!x14819.valid){
continue;
}
if( IKabs(x14818.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14819.value)*((((cj5*r11*sj3))+((r10*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14818.value)+IKsqr(((x14819.value)*((((cj5*r11*sj3))+((r10*sj3*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14818.value, ((x14819.value)*((((cj5*r11*sj3))+((r10*sj3*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14820=IKsin(j4);
IkReal x14821=IKcos(j4);
IkReal x14822=(sj1*sj2);
IkReal x14823=((1.0)*r11);
IkReal x14824=(cj3*sj5);
IkReal x14825=(cj5*r10);
IkReal x14826=(cj5*sj3);
IkReal x14827=((1.0)*cj2);
IkReal x14828=(cj1*sj2);
IkReal x14829=((1.0)*sj5);
IkReal x14830=(cj3*cj5);
IkReal x14831=((1.0)*r21);
IkReal x14832=(cj1*x14827);
IkReal x14833=((1.0)*x14820);
IkReal x14834=(r20*x14821);
IkReal x14835=(sj5*x14820);
IkReal x14836=(sj3*x14821);
evalcond[0]=((-1.0)*r02*x14821);
evalcond[1]=(((r21*x14835))+(((-1.0)*cj5*r20*x14833)));
evalcond[2]=(((cj2*sj1))+x14828+(((-1.0)*r02*sj3*x14833)));
evalcond[3]=((-1.0)+((r11*x14835))+(((-1.0)*x14825*x14833)));
evalcond[4]=((((-1.0)*cj3*r02*x14833))+x14822+(((-1.0)*x14832)));
evalcond[5]=(((r10*x14824))+((r11*x14830))+(((-1.0)*sj5*x14823*x14836))+((x14825*x14836)));
evalcond[6]=((((-1.0)*x14823*x14826))+(((-1.0)*x14821*x14823*x14824))+((cj3*x14821*x14825))+(((-1.0)*r10*sj3*x14829)));
evalcond[7]=((((-1.0)*r21*x14829*x14836))+x14822+((r21*x14830))+(((-1.0)*x14832))+((r20*x14824))+((x14826*x14834)));
evalcond[8]=((((-1.0)*sj1*x14827))+(((-1.0)*x14821*x14824*x14831))+((x14830*x14834))+(((-1.0)*x14826*x14831))+(((-1.0)*x14828))+(((-1.0)*r20*sj3*x14829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14837=cj5*cj5;
IkReal x14838=(r11*sj3);
IkReal x14839=(cj3*r11);
IkReal x14840=(cj3*r10);
IkReal x14841=(r10*sj3);
IkReal x14842=((1.0)*x14840);
IkReal x14843=(cj5*r20*sj5);
IkReal x14844=(r21*x14837);
IkReal x14845=(cj5*r21*sj5);
IkReal x14846=(r20*x14837);
CheckValue<IkReal> x14847 = IKatan2WithCheck(IkReal((((r22*sj5*x14840))+((cj5*r22*x14839)))),IkReal(((((-1.0)*x14842*x14844))+(((-1.0)*x14842*x14843))+((x14839*x14845))+(((-1.0)*x14839*x14846))+((r21*x14840)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14847.valid){
continue;
}
CheckValue<IkReal> x14848=IKPowWithIntegerCheck(IKsign((((x14841*x14846))+((r21*x14838))+((r12*r22*sj3))+(((-1.0)*x14841*x14845))+(((-1.0)*x14838*x14843))+(((-1.0)*x14838*x14844)))),-1);
if(!x14848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14847.value)+(((1.5707963267949)*(x14848.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14849=IKsin(j4);
IkReal x14850=IKcos(j4);
IkReal x14851=(sj1*sj2);
IkReal x14852=(r11*sj5);
IkReal x14853=(cj5*r10);
IkReal x14854=(cj3*cj5);
IkReal x14855=((1.0)*sj3);
IkReal x14856=(r00*sj5);
IkReal x14857=(cj3*sj5);
IkReal x14858=((1.0)*cj2);
IkReal x14859=(r21*sj5);
IkReal x14860=(cj1*sj2);
IkReal x14861=(r01*sj5);
IkReal x14862=(cj1*x14858);
IkReal x14863=((1.0)*x14850);
IkReal x14864=((1.0)*x14849);
IkReal x14865=(cj5*sj3*x14850);
evalcond[0]=(((x14849*x14859))+(((-1.0)*cj5*r20*x14864))+(((-1.0)*r22*x14863)));
evalcond[1]=((((-1.0)*r02*x14863))+(((-1.0)*cj5*r00*x14864))+((x14849*x14861)));
evalcond[2]=((-1.0)+((x14849*x14852))+(((-1.0)*x14853*x14864))+(((-1.0)*r12*x14863)));
evalcond[3]=(((sj3*x14850*x14853))+(((-1.0)*r12*x14849*x14855))+(((-1.0)*x14850*x14852*x14855))+((r11*x14854))+((r10*x14857)));
evalcond[4]=((((-1.0)*cj3*x14852*x14863))+(((-1.0)*cj3*r12*x14864))+(((-1.0)*cj5*r11*x14855))+((cj3*x14850*x14853))+(((-1.0)*r10*sj5*x14855)));
evalcond[5]=(((cj2*sj1))+x14860+(((-1.0)*x14850*x14855*x14861))+(((-1.0)*r02*x14849*x14855))+((cj3*x14856))+((r00*x14865))+((r01*x14854)));
evalcond[6]=(((r21*x14854))+(((-1.0)*r22*x14849*x14855))+(((-1.0)*x14850*x14855*x14859))+((r20*x14857))+((r20*x14865))+x14851+(((-1.0)*x14862)));
evalcond[7]=((((-1.0)*r01*x14857*x14863))+x14851+(((-1.0)*cj5*r01*x14855))+((r00*x14850*x14854))+(((-1.0)*x14862))+(((-1.0)*x14855*x14856))+(((-1.0)*cj3*r02*x14864)));
evalcond[8]=((((-1.0)*cj5*r21*x14855))+((r20*x14850*x14854))+(((-1.0)*sj1*x14858))+(((-1.0)*r21*x14857*x14863))+(((-1.0)*cj3*r22*x14864))+(((-1.0)*r20*sj5*x14855))+(((-1.0)*x14860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14866=((1.0)*cj5);
CheckValue<IkReal> x14867 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14866)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14867.valid){
continue;
}
CheckValue<IkReal> x14868=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14866))+(((-1.0)*r20*sj5)))),-1);
if(!x14868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14867.value)+(((1.5707963267949)*(x14868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14869=IKsin(j4);
IkReal x14870=IKcos(j4);
IkReal x14871=(sj1*sj2);
IkReal x14872=(r11*sj5);
IkReal x14873=(cj5*r10);
IkReal x14874=(cj3*cj5);
IkReal x14875=((1.0)*sj3);
IkReal x14876=(r00*sj5);
IkReal x14877=(cj3*sj5);
IkReal x14878=((1.0)*cj2);
IkReal x14879=(r21*sj5);
IkReal x14880=(cj1*sj2);
IkReal x14881=(r01*sj5);
IkReal x14882=(cj1*x14878);
IkReal x14883=((1.0)*x14870);
IkReal x14884=((1.0)*x14869);
IkReal x14885=(cj5*sj3*x14870);
evalcond[0]=((((-1.0)*r22*x14883))+(((-1.0)*cj5*r20*x14884))+((x14869*x14879)));
evalcond[1]=((((-1.0)*r02*x14883))+(((-1.0)*cj5*r00*x14884))+((x14869*x14881)));
evalcond[2]=((-1.0)+(((-1.0)*x14873*x14884))+(((-1.0)*r12*x14883))+((x14869*x14872)));
evalcond[3]=(((r11*x14874))+((r10*x14877))+(((-1.0)*r12*x14869*x14875))+((sj3*x14870*x14873))+(((-1.0)*x14870*x14872*x14875)));
evalcond[4]=((((-1.0)*r10*sj5*x14875))+(((-1.0)*cj3*x14872*x14883))+((cj3*x14870*x14873))+(((-1.0)*cj3*r12*x14884))+(((-1.0)*cj5*r11*x14875)));
evalcond[5]=(((cj2*sj1))+x14880+((r00*x14885))+((r01*x14874))+(((-1.0)*x14870*x14875*x14881))+((cj3*x14876))+(((-1.0)*r02*x14869*x14875)));
evalcond[6]=((((-1.0)*r22*x14869*x14875))+x14871+((r21*x14874))+(((-1.0)*x14870*x14875*x14879))+(((-1.0)*x14882))+((r20*x14877))+((r20*x14885)));
evalcond[7]=((((-1.0)*x14875*x14876))+(((-1.0)*cj5*r01*x14875))+x14871+(((-1.0)*r01*x14877*x14883))+(((-1.0)*x14882))+(((-1.0)*cj3*r02*x14884))+((r00*x14870*x14874)));
evalcond[8]=(((r20*x14870*x14874))+(((-1.0)*r20*sj5*x14875))+(((-1.0)*cj5*r21*x14875))+(((-1.0)*x14880))+(((-1.0)*r21*x14877*x14883))+(((-1.0)*sj1*x14878))+(((-1.0)*cj3*r22*x14884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14886 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14886.valid){
continue;
}
CheckValue<IkReal> x14887=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14886.value)+(((1.5707963267949)*(x14887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14888=IKsin(j4);
IkReal x14889=IKcos(j4);
IkReal x14890=(sj1*sj2);
IkReal x14891=(r11*sj5);
IkReal x14892=(cj5*r10);
IkReal x14893=(cj3*cj5);
IkReal x14894=((1.0)*sj3);
IkReal x14895=(r00*sj5);
IkReal x14896=(cj3*sj5);
IkReal x14897=((1.0)*cj2);
IkReal x14898=(r21*sj5);
IkReal x14899=(cj1*sj2);
IkReal x14900=(r01*sj5);
IkReal x14901=(cj1*x14897);
IkReal x14902=((1.0)*x14889);
IkReal x14903=((1.0)*x14888);
IkReal x14904=(cj5*sj3*x14889);
evalcond[0]=((((-1.0)*r22*x14902))+(((-1.0)*cj5*r20*x14903))+((x14888*x14898)));
evalcond[1]=((((-1.0)*r02*x14902))+((x14888*x14900))+(((-1.0)*cj5*r00*x14903)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14902))+(((-1.0)*x14892*x14903))+((x14888*x14891)));
evalcond[3]=(((r10*x14896))+(((-1.0)*x14889*x14891*x14894))+((r11*x14893))+((sj3*x14889*x14892))+(((-1.0)*r12*x14888*x14894)));
evalcond[4]=((((-1.0)*cj5*r11*x14894))+(((-1.0)*cj3*r12*x14903))+(((-1.0)*r10*sj5*x14894))+(((-1.0)*cj3*x14891*x14902))+((cj3*x14889*x14892)));
evalcond[5]=(((cj2*sj1))+((r00*x14904))+(((-1.0)*x14889*x14894*x14900))+((r01*x14893))+x14899+(((-1.0)*r02*x14888*x14894))+((cj3*x14895)));
evalcond[6]=((((-1.0)*x14889*x14894*x14898))+(((-1.0)*x14901))+x14890+((r21*x14893))+(((-1.0)*r22*x14888*x14894))+((r20*x14904))+((r20*x14896)));
evalcond[7]=((((-1.0)*cj5*r01*x14894))+((r00*x14889*x14893))+(((-1.0)*cj3*r02*x14903))+(((-1.0)*x14901))+x14890+(((-1.0)*x14894*x14895))+(((-1.0)*r01*x14896*x14902)));
evalcond[8]=((((-1.0)*sj1*x14897))+(((-1.0)*r20*sj5*x14894))+(((-1.0)*cj3*r22*x14903))+(((-1.0)*r21*x14896*x14902))+(((-1.0)*cj5*r21*x14894))+((r20*x14889*x14893))+(((-1.0)*x14899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14905=((-1.0)*r00);
IkReal x14907 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14907)==0){
continue;
}
IkReal x14906=pow(x14907,-0.5);
CheckValue<IkReal> x14908 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14905),IKFAST_ATAN2_MAGTHRESH);
if(!x14908.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14908.value));
IkReal gconst13=(r01*x14906);
IkReal gconst14=(x14905*x14906);
CheckValue<IkReal> x14909 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14909.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14909.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14910=((-1.0)*r00);
IkReal x14911=x14906;
CheckValue<IkReal> x14913 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14910),IKFAST_ATAN2_MAGTHRESH);
if(!x14913.valid){
continue;
}
IkReal x14912=((-1.0)*(x14913.value));
sj5=gconst13;
cj5=gconst14;
j5=x14912;
IkReal gconst12=x14912;
IkReal gconst13=(r01*x14911);
IkReal gconst14=(x14910*x14911);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14914=((1.0)*sj0);
IkReal x14915=((1.0)*cj0);
CheckValue<IkReal> x14916 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14915))+(((-1.0)*r12*x14914)))),IkReal((((cj0*gconst14*r00))+(((-1.0)*gconst13*r01*x14915))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r11*x14914)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14916.valid){
continue;
}
CheckValue<IkReal> x14917=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14916.value)+(((1.5707963267949)*(x14917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14918=IKsin(j4);
IkReal x14919=IKcos(j4);
IkReal x14920=(gconst13*r21);
IkReal x14921=(cj3*gconst14);
IkReal x14922=((1.0)*sj3);
IkReal x14923=(gconst13*r10);
IkReal x14924=(sj1*sj2);
IkReal x14925=(gconst14*sj3);
IkReal x14926=((1.0)*sj0);
IkReal x14927=((1.0)*cj2);
IkReal x14928=(gconst13*r00);
IkReal x14929=((1.0)*cj3);
IkReal x14930=(cj1*sj2);
IkReal x14931=(cj1*cj2);
IkReal x14932=(gconst13*r11);
IkReal x14933=(gconst13*r20);
IkReal x14934=((1.0)*cj0);
IkReal x14935=(gconst13*r01);
IkReal x14936=((1.0)*x14919);
IkReal x14937=(r12*x14918);
IkReal x14938=(r00*x14919);
IkReal x14939=(gconst13*x14918);
IkReal x14940=(r10*x14919);
IkReal x14941=(r22*x14918);
IkReal x14942=(r20*x14919);
IkReal x14943=(r02*x14918);
IkReal x14944=((1.0)*gconst14*x14918);
evalcond[0]=(((x14918*x14920))+(((-1.0)*r20*x14944))+(((-1.0)*r22*x14936)));
evalcond[1]=(((x14918*x14932))+cj0+(((-1.0)*r12*x14936))+(((-1.0)*r10*x14944)));
evalcond[2]=(((x14918*x14935))+(((-1.0)*r00*x14944))+(((-1.0)*x14926))+(((-1.0)*r02*x14936)));
evalcond[3]=((((-1.0)*x14922*x14941))+x14924+((r21*x14921))+((cj3*x14933))+(((-1.0)*cj1*x14927))+(((-1.0)*x14919*x14920*x14922))+((x14925*x14942)));
evalcond[4]=((((-1.0)*x14930))+(((-1.0)*gconst14*r21*x14922))+(((-1.0)*x14929*x14941))+(((-1.0)*sj1*x14927))+(((-1.0)*x14919*x14920*x14929))+(((-1.0)*x14922*x14933))+((x14921*x14942)));
evalcond[5]=((((-1.0)*x14922*x14943))+((r01*x14921))+(((-1.0)*x14919*x14922*x14935))+(((-1.0)*x14930*x14934))+((cj3*x14928))+(((-1.0)*cj0*sj1*x14927))+((x14925*x14938)));
evalcond[6]=((((-1.0)*x14919*x14922*x14932))+((cj3*x14923))+(((-1.0)*cj2*sj1*x14926))+((r11*x14921))+((x14925*x14940))+(((-1.0)*x14922*x14937))+(((-1.0)*x14926*x14930)));
evalcond[7]=((((-1.0)*x14922*x14928))+((x14921*x14938))+((cj0*x14931))+(((-1.0)*x14929*x14943))+(((-1.0)*x14919*x14929*x14935))+(((-1.0)*gconst14*r01*x14922))+(((-1.0)*x14924*x14934)));
evalcond[8]=((((-1.0)*x14922*x14923))+((sj0*x14931))+(((-1.0)*x14919*x14929*x14932))+(((-1.0)*x14924*x14926))+(((-1.0)*x14929*x14937))+(((-1.0)*gconst14*r11*x14922))+((x14921*x14940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14945=((1.0)*gconst14);
CheckValue<IkReal> x14946 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14945))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14946.valid){
continue;
}
CheckValue<IkReal> x14947=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14945)))),-1);
if(!x14947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14946.value)+(((1.5707963267949)*(x14947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14948=IKsin(j4);
IkReal x14949=IKcos(j4);
IkReal x14950=(gconst13*r21);
IkReal x14951=(cj3*gconst14);
IkReal x14952=((1.0)*sj3);
IkReal x14953=(gconst13*r10);
IkReal x14954=(sj1*sj2);
IkReal x14955=(gconst14*sj3);
IkReal x14956=((1.0)*sj0);
IkReal x14957=((1.0)*cj2);
IkReal x14958=(gconst13*r00);
IkReal x14959=((1.0)*cj3);
IkReal x14960=(cj1*sj2);
IkReal x14961=(cj1*cj2);
IkReal x14962=(gconst13*r11);
IkReal x14963=(gconst13*r20);
IkReal x14964=((1.0)*cj0);
IkReal x14965=(gconst13*r01);
IkReal x14966=((1.0)*x14949);
IkReal x14967=(r12*x14948);
IkReal x14968=(r00*x14949);
IkReal x14969=(gconst13*x14948);
IkReal x14970=(r10*x14949);
IkReal x14971=(r22*x14948);
IkReal x14972=(r20*x14949);
IkReal x14973=(r02*x14948);
IkReal x14974=((1.0)*gconst14*x14948);
evalcond[0]=((((-1.0)*r22*x14966))+((x14948*x14950))+(((-1.0)*r20*x14974)));
evalcond[1]=((((-1.0)*r10*x14974))+cj0+(((-1.0)*r12*x14966))+((x14948*x14962)));
evalcond[2]=((((-1.0)*r02*x14966))+(((-1.0)*x14956))+(((-1.0)*r00*x14974))+((x14948*x14965)));
evalcond[3]=(((cj3*x14963))+x14954+(((-1.0)*x14952*x14971))+((x14955*x14972))+(((-1.0)*x14949*x14950*x14952))+(((-1.0)*cj1*x14957))+((r21*x14951)));
evalcond[4]=((((-1.0)*x14959*x14971))+(((-1.0)*gconst14*r21*x14952))+(((-1.0)*x14960))+(((-1.0)*sj1*x14957))+(((-1.0)*x14952*x14963))+((x14951*x14972))+(((-1.0)*x14949*x14950*x14959)));
evalcond[5]=((((-1.0)*x14949*x14952*x14965))+(((-1.0)*x14952*x14973))+((x14955*x14968))+((r01*x14951))+(((-1.0)*cj0*sj1*x14957))+(((-1.0)*x14960*x14964))+((cj3*x14958)));
evalcond[6]=((((-1.0)*x14949*x14952*x14962))+(((-1.0)*x14952*x14967))+((x14955*x14970))+(((-1.0)*cj2*sj1*x14956))+(((-1.0)*x14956*x14960))+((cj3*x14953))+((r11*x14951)));
evalcond[7]=((((-1.0)*x14959*x14973))+(((-1.0)*x14954*x14964))+(((-1.0)*x14949*x14959*x14965))+(((-1.0)*x14952*x14958))+((x14951*x14968))+(((-1.0)*gconst14*r01*x14952))+((cj0*x14961)));
evalcond[8]=((((-1.0)*x14954*x14956))+(((-1.0)*x14949*x14959*x14962))+((x14951*x14970))+(((-1.0)*x14952*x14953))+((sj0*x14961))+(((-1.0)*gconst14*r11*x14952))+(((-1.0)*x14959*x14967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14975=((-1.0)*r01);
IkReal x14977 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14977)==0){
continue;
}
IkReal x14976=pow(x14977,-0.5);
CheckValue<IkReal> x14978 = IKatan2WithCheck(IkReal(x14975),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14978.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14978.value))));
IkReal gconst16=(x14975*x14976);
IkReal gconst17=((1.0)*r00*x14976);
CheckValue<IkReal> x14979 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14979.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14979.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14980=((-1.0)*r01);
CheckValue<IkReal> x14983 = IKatan2WithCheck(IkReal(x14980),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14983.valid){
continue;
}
IkReal x14981=((1.0)*(x14983.value));
IkReal x14982=x14976;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14981)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14981)));
IkReal gconst16=(x14980*x14982);
IkReal gconst17=((1.0)*r00*x14982);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14984=((-1.0)*r01);
CheckValue<IkReal> x14987 = IKatan2WithCheck(IkReal(x14984),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14987.valid){
continue;
}
IkReal x14985=((1.0)*(x14987.value));
IkReal x14986=x14976;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14985)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14985)));
IkReal gconst16=(x14984*x14986);
IkReal gconst17=((1.0)*r00*x14986);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14988=((-1.0)*r01);
CheckValue<IkReal> x14991 = IKatan2WithCheck(IkReal(x14988),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14991.valid){
continue;
}
IkReal x14989=((1.0)*(x14991.value));
IkReal x14990=x14976;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14989)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14989)));
IkReal gconst16=(x14988*x14990);
IkReal gconst17=((1.0)*r00*x14990);
IkReal x14992=r02*r02;
IkReal x14993=(r12*sj0);
IkReal x14994=((1.0)*cj0);
IkReal x14995=x14976;
j4eval[0]=((IKabs((((r02*x14993*x14995))+((cj0*x14992*x14995))+(((-1.0)*x14994*x14995)))))+(IKabs(((((-1.0)*r02*x14994))+(((-1.0)*x14993))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14996=((-1.0)*r01);
CheckValue<IkReal> x14999 = IKatan2WithCheck(IkReal(x14996),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14999.valid){
continue;
}
IkReal x14997=((1.0)*(x14999.value));
IkReal x14998=x14976;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14997)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14997)));
IkReal gconst16=(x14996*x14998);
IkReal gconst17=((1.0)*r00*x14998);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15000=((-1.0)*r01);
CheckValue<IkReal> x15003 = IKatan2WithCheck(IkReal(x15000),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x15003.valid){
continue;
}
IkReal x15001=((1.0)*(x15003.value));
IkReal x15002=x14976;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15001)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15001)));
IkReal gconst16=(x15000*x15002);
IkReal gconst17=((1.0)*r00*x15002);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15004=gconst16*gconst16;
IkReal x15005=gconst17*gconst17;
IkReal x15006=(cj3*r22);
IkReal x15007=(gconst16*r10);
IkReal x15008=(r21*sj3);
IkReal x15009=(gconst17*r11);
IkReal x15010=((1.0)*gconst17);
IkReal x15011=(cj3*r21);
IkReal x15012=((1.0)*r11*r20);
CheckValue<IkReal> x15013 = IKatan2WithCheck(IkReal((((x15006*x15009))+((x15006*x15007)))),IkReal((((r10*x15004*x15011))+((gconst16*x15009*x15011))+(((-1.0)*cj3*x15005*x15012))+(((-1.0)*cj3*r20*x15007*x15010)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15013.valid){
continue;
}
CheckValue<IkReal> x15014=IKPowWithIntegerCheck(IKsign((((r11*x15004*x15008))+((r10*r20*sj3*x15005))+(((-1.0)*gconst16*r20*sj3*x15009))+((r12*r22*sj3))+(((-1.0)*x15007*x15008*x15010)))),-1);
if(!x15014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15013.value)+(((1.5707963267949)*(x15014.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15015=IKsin(j4);
IkReal x15016=IKcos(j4);
IkReal x15017=(sj1*sj2);
IkReal x15018=((1.0)*sj3);
IkReal x15019=(gconst16*r01);
IkReal x15020=(gconst17*r01);
IkReal x15021=(gconst16*sj3);
IkReal x15022=(cj3*gconst16);
IkReal x15023=(gconst17*r20);
IkReal x15024=((1.0)*cj2);
IkReal x15025=(cj1*sj2);
IkReal x15026=(cj3*gconst17);
IkReal x15027=(cj1*x15024);
IkReal x15028=((1.0)*x15016);
IkReal x15029=(r12*x15015);
IkReal x15030=((1.0)*x15015);
IkReal x15031=(gconst17*x15016);
IkReal x15032=(gconst16*x15015);
evalcond[0]=(((r21*x15032))+(((-1.0)*x15023*x15030))+(((-1.0)*r22*x15028)));
evalcond[1]=((((-1.0)*r02*x15028))+((x15015*x15019))+(((-1.0)*gconst17*r00*x15030)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x15028))+((r11*x15032))+(((-1.0)*gconst17*r10*x15030)));
evalcond[3]=(((r10*x15022))+(((-1.0)*x15018*x15029))+(((-1.0)*gconst16*r11*x15016*x15018))+((r10*sj3*x15031))+((r11*x15026)));
evalcond[4]=((((-1.0)*gconst17*r11*x15018))+(((-1.0)*gconst16*r10*x15018))+(((-1.0)*cj3*x15029))+(((-1.0)*r11*x15022*x15028))+((r10*x15016*x15026)));
evalcond[5]=(((r00*sj3*x15031))+((cj2*sj1))+((r00*x15022))+(((-1.0)*x15016*x15018*x15019))+(((-1.0)*r02*x15015*x15018))+x15025+((cj3*x15020)));
evalcond[6]=((((-1.0)*r22*x15015*x15018))+((r21*x15026))+x15017+((sj3*x15016*x15023))+(((-1.0)*x15027))+(((-1.0)*gconst16*r21*x15016*x15018))+((r20*x15022)));
evalcond[7]=((((-1.0)*cj3*r02*x15030))+x15017+(((-1.0)*cj3*x15019*x15028))+(((-1.0)*x15027))+(((-1.0)*x15018*x15020))+(((-1.0)*gconst16*r00*x15018))+((r00*x15016*x15026)));
evalcond[8]=((((-1.0)*x15025))+(((-1.0)*gconst17*r21*x15018))+(((-1.0)*cj3*r22*x15030))+(((-1.0)*sj1*x15024))+(((-1.0)*gconst16*r20*x15018))+((cj3*x15016*x15023))+(((-1.0)*r21*x15022*x15028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15033=((1.0)*gconst17);
CheckValue<IkReal> x15034=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x15033)))),-1);
if(!x15034.valid){
continue;
}
CheckValue<IkReal> x15035 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst16*r01))+(((-1.0)*r00*x15033)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15034.value)))+(x15035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15036=IKsin(j4);
IkReal x15037=IKcos(j4);
IkReal x15038=(sj1*sj2);
IkReal x15039=((1.0)*sj3);
IkReal x15040=(gconst16*r01);
IkReal x15041=(gconst17*r01);
IkReal x15042=(gconst16*sj3);
IkReal x15043=(cj3*gconst16);
IkReal x15044=(gconst17*r20);
IkReal x15045=((1.0)*cj2);
IkReal x15046=(cj1*sj2);
IkReal x15047=(cj3*gconst17);
IkReal x15048=(cj1*x15045);
IkReal x15049=((1.0)*x15037);
IkReal x15050=(r12*x15036);
IkReal x15051=((1.0)*x15036);
IkReal x15052=(gconst17*x15037);
IkReal x15053=(gconst16*x15036);
evalcond[0]=((((-1.0)*r22*x15049))+((r21*x15053))+(((-1.0)*x15044*x15051)));
evalcond[1]=((((-1.0)*gconst17*r00*x15051))+(((-1.0)*r02*x15049))+((x15036*x15040)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x15051))+((r11*x15053))+(((-1.0)*r12*x15049)));
evalcond[3]=(((r11*x15047))+(((-1.0)*x15039*x15050))+(((-1.0)*gconst16*r11*x15037*x15039))+((r10*x15043))+((r10*sj3*x15052)));
evalcond[4]=((((-1.0)*gconst16*r10*x15039))+((r10*x15037*x15047))+(((-1.0)*gconst17*r11*x15039))+(((-1.0)*cj3*x15050))+(((-1.0)*r11*x15043*x15049)));
evalcond[5]=(((cj2*sj1))+((r00*sj3*x15052))+(((-1.0)*r02*x15036*x15039))+((cj3*x15041))+((r00*x15043))+x15046+(((-1.0)*x15037*x15039*x15040)));
evalcond[6]=((((-1.0)*r22*x15036*x15039))+(((-1.0)*x15048))+((sj3*x15037*x15044))+(((-1.0)*gconst16*r21*x15037*x15039))+x15038+((r20*x15043))+((r21*x15047)));
evalcond[7]=((((-1.0)*x15048))+(((-1.0)*cj3*x15040*x15049))+((r00*x15037*x15047))+x15038+(((-1.0)*cj3*r02*x15051))+(((-1.0)*gconst16*r00*x15039))+(((-1.0)*x15039*x15041)));
evalcond[8]=((((-1.0)*gconst17*r21*x15039))+(((-1.0)*sj1*x15045))+(((-1.0)*gconst16*r20*x15039))+(((-1.0)*cj3*r22*x15051))+(((-1.0)*r21*x15043*x15049))+(((-1.0)*x15046))+((cj3*x15037*x15044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15054=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x15054.valid){
continue;
}
CheckValue<IkReal> x15055 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15054.value)))+(x15055.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15056=IKsin(j4);
IkReal x15057=IKcos(j4);
IkReal x15058=(sj1*sj2);
IkReal x15059=((1.0)*sj3);
IkReal x15060=(gconst16*r01);
IkReal x15061=(gconst17*r01);
IkReal x15062=(gconst16*sj3);
IkReal x15063=(cj3*gconst16);
IkReal x15064=(gconst17*r20);
IkReal x15065=((1.0)*cj2);
IkReal x15066=(cj1*sj2);
IkReal x15067=(cj3*gconst17);
IkReal x15068=(cj1*x15065);
IkReal x15069=((1.0)*x15057);
IkReal x15070=(r12*x15056);
IkReal x15071=((1.0)*x15056);
IkReal x15072=(gconst17*x15057);
IkReal x15073=(gconst16*x15056);
evalcond[0]=((((-1.0)*r22*x15069))+((r21*x15073))+(((-1.0)*x15064*x15071)));
evalcond[1]=((((-1.0)*gconst17*r00*x15071))+(((-1.0)*r02*x15069))+((x15056*x15060)));
evalcond[2]=((-1.0)+((r11*x15073))+(((-1.0)*r12*x15069))+(((-1.0)*gconst17*r10*x15071)));
evalcond[3]=((((-1.0)*gconst16*r11*x15057*x15059))+((r11*x15067))+((r10*sj3*x15072))+((r10*x15063))+(((-1.0)*x15059*x15070)));
evalcond[4]=((((-1.0)*cj3*x15070))+(((-1.0)*gconst17*r11*x15059))+((r10*x15057*x15067))+(((-1.0)*gconst16*r10*x15059))+(((-1.0)*r11*x15063*x15069)));
evalcond[5]=(((cj2*sj1))+((r00*x15063))+(((-1.0)*x15057*x15059*x15060))+x15066+((cj3*x15061))+(((-1.0)*r02*x15056*x15059))+((r00*sj3*x15072)));
evalcond[6]=(((r21*x15067))+((r20*x15063))+x15058+(((-1.0)*gconst16*r21*x15057*x15059))+(((-1.0)*r22*x15056*x15059))+((sj3*x15057*x15064))+(((-1.0)*x15068)));
evalcond[7]=((((-1.0)*gconst16*r00*x15059))+x15058+(((-1.0)*cj3*r02*x15071))+((r00*x15057*x15067))+(((-1.0)*x15059*x15061))+(((-1.0)*cj3*x15060*x15069))+(((-1.0)*x15068)));
evalcond[8]=((((-1.0)*gconst16*r20*x15059))+((cj3*x15057*x15064))+(((-1.0)*r21*x15063*x15069))+(((-1.0)*x15066))+(((-1.0)*cj3*r22*x15071))+(((-1.0)*gconst17*r21*x15059))+(((-1.0)*sj1*x15065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15074=((-1.0)*r01);
CheckValue<IkReal> x15077 = IKatan2WithCheck(IkReal(x15074),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x15077.valid){
continue;
}
IkReal x15075=((1.0)*(x15077.value));
IkReal x15076=x14976;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15075)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15075)));
IkReal gconst16=(x15074*x15076);
IkReal gconst17=((1.0)*r00*x15076);
IkReal x15078=r02*r02;
IkReal x15079=(r12*sj0);
IkReal x15080=((1.0)*cj0);
IkReal x15081=x14976;
j4eval[0]=((IKabs((((cj0*x15078*x15081))+(((-1.0)*x15080*x15081))+((r02*x15079*x15081)))))+(IKabs(((((-1.0)*r02*x15080))+(((-1.0)*x15079))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15082=(cj3*r20);
IkReal x15083=(cj1*sj2);
IkReal x15084=(gconst16*gconst17);
IkReal x15085=(cj2*sj1);
IkReal x15086=(cj3*r21);
IkReal x15087=(gconst17*r21*sj3);
IkReal x15088=(gconst16*r20*sj3);
CheckValue<IkReal> x15089=IKPowWithIntegerCheck(((((-1.0)*r10*x15082*(gconst17*gconst17)))+((r11*x15082*x15084))+((r10*x15084*x15086))+(((-1.0)*r11*x15086*(gconst16*gconst16)))),-1);
if(!x15089.valid){
continue;
}
CheckValue<IkReal> x15090=IKPowWithIntegerCheck(((((-1.0)*gconst16*x15086))+((gconst17*x15082))),-1);
if(!x15090.valid){
continue;
}
if( IKabs(((x15089.value)*((((r12*x15085))+((r12*x15087))+((r12*x15083))+((r12*x15088))+(((-1.0)*cj0*gconst17*x15082))+((cj0*gconst16*x15086)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15090.value)*((x15088+x15085+x15087+x15083)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15089.value)*((((r12*x15085))+((r12*x15087))+((r12*x15083))+((r12*x15088))+(((-1.0)*cj0*gconst17*x15082))+((cj0*gconst16*x15086))))))+IKsqr(((x15090.value)*((x15088+x15085+x15087+x15083))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15089.value)*((((r12*x15085))+((r12*x15087))+((r12*x15083))+((r12*x15088))+(((-1.0)*cj0*gconst17*x15082))+((cj0*gconst16*x15086))))), ((x15090.value)*((x15088+x15085+x15087+x15083))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15091=IKsin(j4);
IkReal x15092=IKcos(j4);
IkReal x15093=((1.0)*sj3);
IkReal x15094=(gconst16*r01);
IkReal x15095=(gconst17*r01);
IkReal x15096=(gconst17*r20);
IkReal x15097=(cj3*gconst17);
IkReal x15098=(sj1*sj2);
IkReal x15099=((1.0)*cj2);
IkReal x15100=(cj3*gconst16);
IkReal x15101=(gconst17*sj3);
IkReal x15102=((1.0)*sj0);
IkReal x15103=((1.0)*gconst16);
IkReal x15104=(cj1*cj2);
IkReal x15105=(r12*x15091);
IkReal x15106=((1.0)*x15091);
IkReal x15107=(cj3*x15092);
IkReal x15108=(gconst16*x15092);
IkReal x15109=(r00*x15092);
IkReal x15110=(gconst16*x15091);
IkReal x15111=(r10*x15092);
IkReal x15112=((1.0)*cj1*sj2);
IkReal x15113=((1.0)*x15092);
evalcond[0]=((((-1.0)*x15096*x15106))+((r21*x15110)));
evalcond[1]=(cj0+(((-1.0)*gconst17*r10*x15106))+((r11*x15110))+(((-1.0)*r12*x15113)));
evalcond[2]=((((-1.0)*gconst17*r00*x15106))+(((-1.0)*r02*x15113))+(((-1.0)*x15102))+((x15091*x15094)));
evalcond[3]=((((-1.0)*r21*x15093*x15108))+((sj3*x15092*x15096))+((r21*x15097))+x15098+((r20*x15100))+(((-1.0)*cj1*x15099)));
evalcond[4]=((((-1.0)*sj1*x15099))+(((-1.0)*gconst17*r21*x15093))+(((-1.0)*x15112))+(((-1.0)*gconst16*r20*x15093))+(((-1.0)*r21*x15100*x15113))+((x15096*x15107)));
evalcond[5]=((((-1.0)*r02*x15091*x15093))+(((-1.0)*cj0*sj1*x15099))+((r00*x15100))+((cj3*x15095))+(((-1.0)*cj0*x15112))+(((-1.0)*x15092*x15093*x15094))+((x15101*x15109)));
evalcond[6]=((((-1.0)*r11*x15093*x15108))+(((-1.0)*sj0*sj1*x15099))+(((-1.0)*cj1*sj2*x15102))+((r11*x15097))+((r10*x15100))+(((-1.0)*x15093*x15105))+((x15101*x15111)));
evalcond[7]=((((-1.0)*x15093*x15095))+((cj0*x15104))+(((-1.0)*cj0*x15098))+((x15097*x15109))+(((-1.0)*x15094*x15107))+(((-1.0)*cj3*r02*x15106))+(((-1.0)*gconst16*r00*x15093)));
evalcond[8]=((((-1.0)*gconst16*r10*x15093))+(((-1.0)*gconst17*r11*x15093))+(((-1.0)*cj3*x15105))+(((-1.0)*x15098*x15102))+((x15097*x15111))+((sj0*x15104))+(((-1.0)*r11*x15100*x15113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15114=((1.0)*sj0);
IkReal x15115=((1.0)*cj0);
CheckValue<IkReal> x15116=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x15116.valid){
continue;
}
CheckValue<IkReal> x15117 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15115))+(((-1.0)*r12*x15114)))),IkReal(((((-1.0)*gconst16*r01*x15115))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x15114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15116.value)))+(x15117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15118=IKsin(j4);
IkReal x15119=IKcos(j4);
IkReal x15120=((1.0)*sj3);
IkReal x15121=(gconst16*r01);
IkReal x15122=(gconst17*r01);
IkReal x15123=(gconst17*r20);
IkReal x15124=(cj3*gconst17);
IkReal x15125=(sj1*sj2);
IkReal x15126=((1.0)*cj2);
IkReal x15127=(cj3*gconst16);
IkReal x15128=(gconst17*sj3);
IkReal x15129=((1.0)*sj0);
IkReal x15130=((1.0)*gconst16);
IkReal x15131=(cj1*cj2);
IkReal x15132=(r12*x15118);
IkReal x15133=((1.0)*x15118);
IkReal x15134=(cj3*x15119);
IkReal x15135=(gconst16*x15119);
IkReal x15136=(r00*x15119);
IkReal x15137=(gconst16*x15118);
IkReal x15138=(r10*x15119);
IkReal x15139=((1.0)*cj1*sj2);
IkReal x15140=((1.0)*x15119);
evalcond[0]=((((-1.0)*x15123*x15133))+((r21*x15137)));
evalcond[1]=(cj0+(((-1.0)*gconst17*r10*x15133))+((r11*x15137))+(((-1.0)*r12*x15140)));
evalcond[2]=((((-1.0)*x15129))+(((-1.0)*r02*x15140))+((x15118*x15121))+(((-1.0)*gconst17*r00*x15133)));
evalcond[3]=(((r20*x15127))+((r21*x15124))+(((-1.0)*cj1*x15126))+x15125+(((-1.0)*r21*x15120*x15135))+((sj3*x15119*x15123)));
evalcond[4]=((((-1.0)*gconst16*r20*x15120))+(((-1.0)*x15139))+(((-1.0)*r21*x15127*x15140))+(((-1.0)*gconst17*r21*x15120))+(((-1.0)*sj1*x15126))+((x15123*x15134)));
evalcond[5]=((((-1.0)*x15119*x15120*x15121))+((x15128*x15136))+(((-1.0)*cj0*sj1*x15126))+((r00*x15127))+(((-1.0)*cj0*x15139))+(((-1.0)*r02*x15118*x15120))+((cj3*x15122)));
evalcond[6]=((((-1.0)*x15120*x15132))+((x15128*x15138))+(((-1.0)*r11*x15120*x15135))+(((-1.0)*cj1*sj2*x15129))+((r10*x15127))+((r11*x15124))+(((-1.0)*sj0*sj1*x15126)));
evalcond[7]=((((-1.0)*gconst16*r00*x15120))+((x15124*x15136))+(((-1.0)*cj0*x15125))+(((-1.0)*cj3*r02*x15133))+(((-1.0)*x15121*x15134))+((cj0*x15131))+(((-1.0)*x15120*x15122)));
evalcond[8]=((((-1.0)*gconst17*r11*x15120))+(((-1.0)*cj3*x15132))+(((-1.0)*gconst16*r10*x15120))+((x15124*x15138))+((sj0*x15131))+(((-1.0)*x15125*x15129))+(((-1.0)*r11*x15127*x15140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15141=((1.0)*sj0);
IkReal x15142=((1.0)*cj0);
CheckValue<IkReal> x15143=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x15143.valid){
continue;
}
CheckValue<IkReal> x15144 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15142))+(((-1.0)*r12*x15141)))),IkReal(((((-1.0)*gconst16*r01*x15142))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x15141)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15143.value)))+(x15144.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15145=IKsin(j4);
IkReal x15146=IKcos(j4);
IkReal x15147=((1.0)*sj3);
IkReal x15148=(gconst16*r01);
IkReal x15149=(gconst17*r01);
IkReal x15150=(gconst17*r20);
IkReal x15151=(cj3*gconst16);
IkReal x15152=(sj1*sj2);
IkReal x15153=(gconst16*sj3);
IkReal x15154=((1.0)*cj2);
IkReal x15155=(gconst17*r00);
IkReal x15156=(gconst17*r10);
IkReal x15157=(cj3*gconst17);
IkReal x15158=((1.0)*sj0);
IkReal x15159=(cj1*cj2);
IkReal x15160=((1.0)*x15146);
IkReal x15161=(r12*x15145);
IkReal x15162=((1.0)*x15145);
IkReal x15163=(cj3*x15146);
IkReal x15164=(gconst16*x15145);
IkReal x15165=((1.0)*cj1*sj2);
IkReal x15166=(sj3*x15146);
evalcond[0]=((((-1.0)*x15150*x15162))+((r21*x15164))+(((-1.0)*r22*x15160)));
evalcond[1]=(cj0+((r11*x15164))+(((-1.0)*x15156*x15162))+(((-1.0)*r12*x15160)));
evalcond[2]=((((-1.0)*x15158))+(((-1.0)*x15155*x15162))+(((-1.0)*r02*x15160))+((x15145*x15148)));
evalcond[3]=((((-1.0)*cj1*x15154))+(((-1.0)*r22*x15145*x15147))+((r21*x15157))+x15152+(((-1.0)*gconst16*r21*x15146*x15147))+((x15150*x15166))+((r20*x15151)));
evalcond[4]=((((-1.0)*cj3*r22*x15162))+(((-1.0)*r21*x15151*x15160))+(((-1.0)*x15165))+(((-1.0)*gconst16*r20*x15147))+(((-1.0)*sj1*x15154))+((x15150*x15163))+(((-1.0)*gconst17*r21*x15147)));
evalcond[5]=((((-1.0)*cj0*x15165))+(((-1.0)*x15146*x15147*x15148))+(((-1.0)*r02*x15145*x15147))+(((-1.0)*cj0*sj1*x15154))+((cj3*x15149))+((r00*x15151))+((x15155*x15166)));
evalcond[6]=((((-1.0)*x15147*x15161))+(((-1.0)*gconst16*r11*x15146*x15147))+(((-1.0)*cj1*sj2*x15158))+((x15156*x15166))+((r10*x15151))+((r11*x15157))+(((-1.0)*sj0*sj1*x15154)));
evalcond[7]=((((-1.0)*cj3*r02*x15162))+(((-1.0)*x15147*x15149))+(((-1.0)*cj0*x15152))+((cj0*x15159))+((x15155*x15163))+(((-1.0)*gconst16*r00*x15147))+(((-1.0)*cj3*x15148*x15160)));
evalcond[8]=((((-1.0)*gconst16*r10*x15147))+((sj0*x15159))+(((-1.0)*cj3*x15161))+((x15156*x15163))+(((-1.0)*r11*x15151*x15160))+(((-1.0)*x15152*x15158))+(((-1.0)*gconst17*r11*x15147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15167=((1.0)*gconst17);
CheckValue<IkReal> x15168=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x15167)))),-1);
if(!x15168.valid){
continue;
}
CheckValue<IkReal> x15169 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x15167))+((gconst16*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15168.value)))+(x15169.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15170=IKsin(j4);
IkReal x15171=IKcos(j4);
IkReal x15172=((1.0)*sj3);
IkReal x15173=(gconst16*r01);
IkReal x15174=(gconst17*r01);
IkReal x15175=(gconst17*r20);
IkReal x15176=(cj3*gconst16);
IkReal x15177=(sj1*sj2);
IkReal x15178=(gconst16*sj3);
IkReal x15179=((1.0)*cj2);
IkReal x15180=(gconst17*r00);
IkReal x15181=(gconst17*r10);
IkReal x15182=(cj3*gconst17);
IkReal x15183=((1.0)*sj0);
IkReal x15184=(cj1*cj2);
IkReal x15185=((1.0)*x15171);
IkReal x15186=(r12*x15170);
IkReal x15187=((1.0)*x15170);
IkReal x15188=(cj3*x15171);
IkReal x15189=(gconst16*x15170);
IkReal x15190=((1.0)*cj1*sj2);
IkReal x15191=(sj3*x15171);
evalcond[0]=((((-1.0)*x15175*x15187))+((r21*x15189))+(((-1.0)*r22*x15185)));
evalcond[1]=(cj0+((r11*x15189))+(((-1.0)*r12*x15185))+(((-1.0)*x15181*x15187)));
evalcond[2]=((((-1.0)*r02*x15185))+(((-1.0)*x15183))+(((-1.0)*x15180*x15187))+((x15170*x15173)));
evalcond[3]=(((x15175*x15191))+(((-1.0)*gconst16*r21*x15171*x15172))+((r20*x15176))+(((-1.0)*cj1*x15179))+x15177+((r21*x15182))+(((-1.0)*r22*x15170*x15172)));
evalcond[4]=((((-1.0)*sj1*x15179))+(((-1.0)*gconst16*r20*x15172))+(((-1.0)*cj3*r22*x15187))+((x15175*x15188))+(((-1.0)*x15190))+(((-1.0)*r21*x15176*x15185))+(((-1.0)*gconst17*r21*x15172)));
evalcond[5]=((((-1.0)*r02*x15170*x15172))+(((-1.0)*cj0*x15190))+((cj3*x15174))+(((-1.0)*cj0*sj1*x15179))+((x15180*x15191))+((r00*x15176))+(((-1.0)*x15171*x15172*x15173)));
evalcond[6]=((((-1.0)*sj0*sj1*x15179))+((r10*x15176))+(((-1.0)*x15172*x15186))+(((-1.0)*gconst16*r11*x15171*x15172))+(((-1.0)*cj1*sj2*x15183))+((r11*x15182))+((x15181*x15191)));
evalcond[7]=((((-1.0)*cj3*x15173*x15185))+(((-1.0)*gconst16*r00*x15172))+((cj0*x15184))+(((-1.0)*cj0*x15177))+(((-1.0)*x15172*x15174))+((x15180*x15188))+(((-1.0)*cj3*r02*x15187)));
evalcond[8]=(((sj0*x15184))+(((-1.0)*gconst16*r10*x15172))+(((-1.0)*r11*x15176*x15185))+((x15181*x15188))+(((-1.0)*x15177*x15183))+(((-1.0)*cj3*x15186))+(((-1.0)*gconst17*r11*x15172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15192=((1.0)*gconst17);
CheckValue<IkReal> x15193=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x15192)))),-1);
if(!x15193.valid){
continue;
}
CheckValue<IkReal> x15194 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x15192))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15193.value)))+(x15194.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15195=IKsin(j4);
IkReal x15196=IKcos(j4);
IkReal x15197=((1.0)*sj3);
IkReal x15198=(gconst16*r01);
IkReal x15199=(gconst17*r01);
IkReal x15200=(gconst17*r20);
IkReal x15201=(cj3*gconst16);
IkReal x15202=(sj1*sj2);
IkReal x15203=(gconst16*sj3);
IkReal x15204=((1.0)*cj2);
IkReal x15205=(gconst17*r00);
IkReal x15206=(gconst17*r10);
IkReal x15207=(cj3*gconst17);
IkReal x15208=((1.0)*sj0);
IkReal x15209=(cj1*cj2);
IkReal x15210=((1.0)*x15196);
IkReal x15211=(r12*x15195);
IkReal x15212=((1.0)*x15195);
IkReal x15213=(cj3*x15196);
IkReal x15214=(gconst16*x15195);
IkReal x15215=((1.0)*cj1*sj2);
IkReal x15216=(sj3*x15196);
evalcond[0]=((((-1.0)*r22*x15210))+((r21*x15214))+(((-1.0)*x15200*x15212)));
evalcond[1]=(cj0+((r11*x15214))+(((-1.0)*r12*x15210))+(((-1.0)*x15206*x15212)));
evalcond[2]=((((-1.0)*r02*x15210))+((x15195*x15198))+(((-1.0)*x15208))+(((-1.0)*x15205*x15212)));
evalcond[3]=(((r20*x15201))+(((-1.0)*cj1*x15204))+x15202+(((-1.0)*gconst16*r21*x15196*x15197))+((r21*x15207))+(((-1.0)*r22*x15195*x15197))+((x15200*x15216)));
evalcond[4]=((((-1.0)*gconst17*r21*x15197))+(((-1.0)*sj1*x15204))+(((-1.0)*r21*x15201*x15210))+(((-1.0)*cj3*r22*x15212))+(((-1.0)*x15215))+(((-1.0)*gconst16*r20*x15197))+((x15200*x15213)));
evalcond[5]=(((cj3*x15199))+(((-1.0)*cj0*sj1*x15204))+(((-1.0)*r02*x15195*x15197))+((x15205*x15216))+((r00*x15201))+(((-1.0)*cj0*x15215))+(((-1.0)*x15196*x15197*x15198)));
evalcond[6]=(((r10*x15201))+(((-1.0)*sj0*sj1*x15204))+((r11*x15207))+(((-1.0)*x15197*x15211))+((x15206*x15216))+(((-1.0)*cj1*sj2*x15208))+(((-1.0)*gconst16*r11*x15196*x15197)));
evalcond[7]=((((-1.0)*x15197*x15199))+(((-1.0)*cj3*x15198*x15210))+((x15205*x15213))+(((-1.0)*cj3*r02*x15212))+((cj0*x15209))+(((-1.0)*gconst16*r00*x15197))+(((-1.0)*cj0*x15202)));
evalcond[8]=((((-1.0)*r11*x15201*x15210))+((x15206*x15213))+(((-1.0)*cj3*x15211))+(((-1.0)*x15202*x15208))+(((-1.0)*gconst17*r11*x15197))+(((-1.0)*gconst16*r10*x15197))+((sj0*x15209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x15217=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x15217;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15217);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x15218=((1.0)*cj5);
IkReal x15219=((((-1.0)*r10*sj5))+(((-1.0)*r11*x15218)));
j4eval[0]=x15219;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x15218))+((r21*sj5))))));
j4eval[2]=IKsign(x15219);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x15220=cj5*cj5;
IkReal x15221=(r21*sj3);
IkReal x15222=(r20*sj3);
IkReal x15223=((1.0)*cj5*sj5);
IkReal x15224=((((-1.0)*r00*x15221*x15223))+(((-1.0)*r01*x15222*x15223))+(((-1.0)*r01*x15220*x15221))+((r00*x15220*x15222))+((r02*r22*sj3))+((r01*x15221)));
j4eval[0]=x15224;
j4eval[1]=IKsign(x15224);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x15225=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x15225;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15225);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x15226=((1.0)*cj5);
IkReal x15227=((((-1.0)*r10*sj5))+(((-1.0)*r11*x15226)));
j4eval[0]=x15227;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x15226))))));
j4eval[2]=IKsign(x15227);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x15228=cj5*cj5;
IkReal x15229=r01*r01;
IkReal x15230=(r01*sj5);
IkReal x15231=(cj5*r00);
IkReal x15232=((((-1.0)*x15229))+((x15228*x15229))+(((-1.0)*x15228*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x15230*x15231)));
j4eval[0]=x15232;
j4eval[1]=IKsign(x15232);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x15230))+x15231))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15233=cj5*cj5;
IkReal x15234=r01*r01;
IkReal x15235=(r01*sj5);
IkReal x15236=(cj5*r00);
CheckValue<IkReal> x15237 = IKatan2WithCheck(IkReal(((((-1.0)*x15235))+x15236)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15237.valid){
continue;
}
CheckValue<IkReal> x15238=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15234))+(((-1.0)*(r02*r02)))+(((-1.0)*x15233*(r00*r00)))+(((2.0)*x15235*x15236))+((x15233*x15234)))),-1);
if(!x15238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15237.value)+(((1.5707963267949)*(x15238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15239=IKsin(j4);
IkReal x15240=IKcos(j4);
IkReal x15241=(cj5*r10);
IkReal x15242=(r01*sj5);
IkReal x15243=((1.0)*sj1);
IkReal x15244=(cj5*r00);
IkReal x15245=(cj5*r20);
IkReal x15246=((1.0)*x15240);
IkReal x15247=((1.0)*x15239);
IkReal x15248=(sj5*x15239);
evalcond[0]=(((r21*x15248))+(((-1.0)*r22*x15246))+(((-1.0)*x15245*x15247)));
evalcond[1]=((((-1.0)*r12*x15246))+(((-1.0)*x15241*x15247))+((r11*x15248)));
evalcond[2]=((((-1.0)*x15242*x15246))+(((-1.0)*r02*x15247))+((x15240*x15244)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x15246))+(((-1.0)*x15244*x15247))+((x15239*x15242)));
evalcond[4]=((((-1.0)*sj2*x15243))+(((-1.0)*r12*x15247))+((x15240*x15241))+((cj1*cj2))+(((-1.0)*r11*sj5*x15246)));
evalcond[5]=((((-1.0)*cj2*x15243))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x15247))+((x15240*x15245))+(((-1.0)*r21*sj5*x15246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15249=((1.0)*cj5);
CheckValue<IkReal> x15250 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15249)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15250.valid){
continue;
}
CheckValue<IkReal> x15251=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15249)))),-1);
if(!x15251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15250.value)+(((1.5707963267949)*(x15251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15252=IKsin(j4);
IkReal x15253=IKcos(j4);
IkReal x15254=(cj5*r10);
IkReal x15255=(r01*sj5);
IkReal x15256=((1.0)*sj1);
IkReal x15257=(cj5*r00);
IkReal x15258=(cj5*r20);
IkReal x15259=((1.0)*x15253);
IkReal x15260=((1.0)*x15252);
IkReal x15261=(sj5*x15252);
evalcond[0]=((((-1.0)*r22*x15259))+(((-1.0)*x15258*x15260))+((r21*x15261)));
evalcond[1]=((((-1.0)*r12*x15259))+(((-1.0)*x15254*x15260))+((r11*x15261)));
evalcond[2]=((((-1.0)*r02*x15260))+(((-1.0)*x15255*x15259))+((x15253*x15257)));
evalcond[3]=((-1.0)+(((-1.0)*x15257*x15260))+(((-1.0)*r02*x15259))+((x15252*x15255)));
evalcond[4]=((((-1.0)*r11*sj5*x15259))+((cj1*cj2))+((x15253*x15254))+(((-1.0)*sj2*x15256))+(((-1.0)*r12*x15260)));
evalcond[5]=((((-1.0)*r22*x15260))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x15259))+((x15253*x15258))+(((-1.0)*cj2*x15256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15262=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15262.valid){
continue;
}
CheckValue<IkReal> x15263 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15262.value)))+(x15263.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15264=IKsin(j4);
IkReal x15265=IKcos(j4);
IkReal x15266=(cj5*r10);
IkReal x15267=(r01*sj5);
IkReal x15268=((1.0)*sj1);
IkReal x15269=(cj5*r00);
IkReal x15270=(cj5*r20);
IkReal x15271=((1.0)*x15265);
IkReal x15272=((1.0)*x15264);
IkReal x15273=(sj5*x15264);
evalcond[0]=((((-1.0)*x15270*x15272))+(((-1.0)*r22*x15271))+((r21*x15273)));
evalcond[1]=(((r11*x15273))+(((-1.0)*r12*x15271))+(((-1.0)*x15266*x15272)));
evalcond[2]=(((x15265*x15269))+(((-1.0)*r02*x15272))+(((-1.0)*x15267*x15271)));
evalcond[3]=((-1.0)+((x15264*x15267))+(((-1.0)*r02*x15271))+(((-1.0)*x15269*x15272)));
evalcond[4]=((((-1.0)*sj2*x15268))+((x15265*x15266))+(((-1.0)*r12*x15272))+(((-1.0)*r11*sj5*x15271))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x15268))+((x15265*x15270))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x15272))+(((-1.0)*r21*sj5*x15271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15274=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x15274;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15274);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15275=((1.0)*cj5);
IkReal x15276=((((-1.0)*r10*sj5))+(((-1.0)*r11*x15275)));
j4eval[0]=x15276;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x15275))+((r21*sj5))))));
j4eval[2]=IKsign(x15276);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15277=cj5*cj5;
IkReal x15278=r01*r01;
IkReal x15279=(cj5*r00);
IkReal x15280=(r01*sj5);
IkReal x15281=((((-1.0)*x15277*x15278))+((x15277*(r00*r00)))+x15278+(r02*r02)+(((-2.0)*x15279*x15280)));
j4eval[0]=x15281;
j4eval[1]=IKsign(x15281);
j4eval[2]=((IKabs(r02))+(IKabs((x15280+(((-1.0)*x15279))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15282=cj5*cj5;
IkReal x15283=r01*r01;
IkReal x15284=(r01*sj5);
IkReal x15285=(cj5*r00);
CheckValue<IkReal> x15286 = IKatan2WithCheck(IkReal((x15284+(((-1.0)*x15285)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15286.valid){
continue;
}
CheckValue<IkReal> x15287=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15282*x15283))+x15283+(((-2.0)*x15284*x15285))+((x15282*(r00*r00)))+(r02*r02))),-1);
if(!x15287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15286.value)+(((1.5707963267949)*(x15287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15288=IKcos(j4);
IkReal x15289=IKsin(j4);
IkReal x15290=(cj5*r00);
IkReal x15291=(cj5*r10);
IkReal x15292=(r21*sj5);
IkReal x15293=((1.0)*sj1);
IkReal x15294=(cj5*r20);
IkReal x15295=((1.0)*x15288);
IkReal x15296=((1.0)*x15289);
IkReal x15297=(sj5*x15289);
IkReal x15298=(sj5*x15288);
evalcond[0]=((((-1.0)*x15290*x15295))+((r02*x15289))+((r01*x15298)));
evalcond[1]=((((-1.0)*x15294*x15296))+(((-1.0)*r22*x15295))+((x15289*x15292)));
evalcond[2]=((((-1.0)*x15291*x15296))+((r11*x15297))+(((-1.0)*r12*x15295)));
evalcond[3]=((-1.0)+(((-1.0)*x15290*x15296))+((r01*x15297))+(((-1.0)*r02*x15295)));
evalcond[4]=((((-1.0)*sj2*x15293))+(((-1.0)*x15291*x15295))+((r11*x15298))+((cj1*cj2))+((r12*x15289)));
evalcond[5]=(((r22*x15289))+(((-1.0)*x15294*x15295))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x15293))+((x15288*x15292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15299=((1.0)*cj5);
CheckValue<IkReal> x15300=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15299)))),-1);
if(!x15300.valid){
continue;
}
CheckValue<IkReal> x15301 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x15299))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15300.value)))+(x15301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15302=IKcos(j4);
IkReal x15303=IKsin(j4);
IkReal x15304=(cj5*r00);
IkReal x15305=(cj5*r10);
IkReal x15306=(r21*sj5);
IkReal x15307=((1.0)*sj1);
IkReal x15308=(cj5*r20);
IkReal x15309=((1.0)*x15302);
IkReal x15310=((1.0)*x15303);
IkReal x15311=(sj5*x15303);
IkReal x15312=(sj5*x15302);
evalcond[0]=(((r02*x15303))+((r01*x15312))+(((-1.0)*x15304*x15309)));
evalcond[1]=(((x15303*x15306))+(((-1.0)*x15308*x15310))+(((-1.0)*r22*x15309)));
evalcond[2]=(((r11*x15311))+(((-1.0)*r12*x15309))+(((-1.0)*x15305*x15310)));
evalcond[3]=((-1.0)+((r01*x15311))+(((-1.0)*r02*x15309))+(((-1.0)*x15304*x15310)));
evalcond[4]=(((r11*x15312))+((cj1*cj2))+(((-1.0)*sj2*x15307))+(((-1.0)*x15305*x15309))+((r12*x15303)));
evalcond[5]=(((x15302*x15306))+(((-1.0)*cj2*x15307))+(((-1.0)*cj1*sj2))+(((-1.0)*x15308*x15309))+((r22*x15303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15313=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15313.valid){
continue;
}
CheckValue<IkReal> x15314 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15313.value)))+(x15314.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15315=IKcos(j4);
IkReal x15316=IKsin(j4);
IkReal x15317=(cj5*r00);
IkReal x15318=(cj5*r10);
IkReal x15319=(r21*sj5);
IkReal x15320=((1.0)*sj1);
IkReal x15321=(cj5*r20);
IkReal x15322=((1.0)*x15315);
IkReal x15323=((1.0)*x15316);
IkReal x15324=(sj5*x15316);
IkReal x15325=(sj5*x15315);
evalcond[0]=(((r01*x15325))+(((-1.0)*x15317*x15322))+((r02*x15316)));
evalcond[1]=(((x15316*x15319))+(((-1.0)*x15321*x15323))+(((-1.0)*r22*x15322)));
evalcond[2]=(((r11*x15324))+(((-1.0)*x15318*x15323))+(((-1.0)*r12*x15322)));
evalcond[3]=((-1.0)+((r01*x15324))+(((-1.0)*x15317*x15323))+(((-1.0)*r02*x15322)));
evalcond[4]=(((r11*x15325))+(((-1.0)*x15318*x15322))+((r12*x15316))+(((-1.0)*sj2*x15320))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x15321*x15322))+(((-1.0)*cj2*x15320))+(((-1.0)*cj1*sj2))+((r22*x15316))+((x15315*x15319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15327 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x15327)==0){
continue;
}
IkReal x15326=pow(x15327,-0.5);
CheckValue<IkReal> x15328 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x15328.valid){
continue;
}
IkReal gconst48=((-1.0)*(x15328.value));
IkReal gconst49=((-1.0)*r21*x15326);
IkReal gconst50=(r20*x15326);
CheckValue<IkReal> x15329 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x15329.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15329.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15332 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x15332.valid){
continue;
}
IkReal x15330=((-1.0)*(x15332.value));
IkReal x15331=x15326;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x15330;
IkReal gconst48=x15330;
IkReal gconst49=((-1.0)*r21*x15331);
IkReal gconst50=(r20*x15331);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15335 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x15335.valid){
continue;
}
IkReal x15333=((-1.0)*(x15335.value));
IkReal x15334=x15326;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x15333;
IkReal gconst48=x15333;
IkReal gconst49=((-1.0)*r21*x15334);
IkReal gconst50=(r20*x15334);
CheckValue<IkReal> x15343=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x15343.valid){
continue;
}
IkReal x15336=x15343.value;
IkReal x15337=(sj3*x15336);
IkReal x15338=(r11*x15337);
IkReal x15339=(r00*x15337);
IkReal x15340=(r01*x15337);
IkReal x15341=(r10*x15337);
IkReal x15342=(r20*r21*x15337);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x15338*(r21*r21)))+((r10*r20*r21*x15340))+((r10*x15339*(r20*r20)))+((r00*r20*r21*x15338))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15346 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x15346.valid){
continue;
}
IkReal x15344=((-1.0)*(x15346.value));
IkReal x15345=x15326;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x15344;
IkReal gconst48=x15344;
IkReal gconst49=((-1.0)*r21*x15345);
IkReal gconst50=(r20*x15345);
CheckValue<IkReal> x15354=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x15354.valid){
continue;
}
IkReal x15347=x15354.value;
IkReal x15348=(cj3*x15347);
IkReal x15349=(r11*x15348);
IkReal x15350=(r01*x15348);
IkReal x15351=(r00*x15348);
IkReal x15352=(r10*x15348);
IkReal x15353=(r20*r21*x15348);
j4eval[0]=IKsign((((r10*x15351*(r20*r20)))+((cj3*r02*r12))+((r00*r20*r21*x15349))+((r10*r20*r21*x15350))+((r01*x15349*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15355=gconst50*gconst50;
IkReal x15356=gconst49*gconst49;
IkReal x15357=(cj3*r00);
IkReal x15358=(r01*sj3);
IkReal x15359=(cj3*r01);
IkReal x15360=((1.0)*gconst49);
IkReal x15361=(gconst50*r10);
IkReal x15362=(r00*sj3);
IkReal x15363=(r10*x15355);
IkReal x15364=(r11*x15356);
IkReal x15365=(gconst50*r11*x15360);
CheckValue<IkReal> x15366 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x15360*x15362))+(((-1.0)*gconst50*r12*x15358)))),IkReal(((((-1.0)*x15362*x15364))+((x15358*x15363))+((gconst49*x15361*x15362))+(((-1.0)*x15358*x15365)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15366.valid){
continue;
}
CheckValue<IkReal> x15367=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((x15359*x15364))+((x15357*x15363))+(((-1.0)*x15357*x15365))+(((-1.0)*x15359*x15360*x15361)))),-1);
if(!x15367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15366.value)+(((1.5707963267949)*(x15367.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15368=IKsin(j4);
IkReal x15369=IKcos(j4);
IkReal x15370=(gconst50*r20);
IkReal x15371=(gconst49*r21);
IkReal x15372=(cj3*gconst50);
IkReal x15373=(gconst49*sj3);
IkReal x15374=(gconst50*r10);
IkReal x15375=((1.0)*cj2);
IkReal x15376=((1.0)*sj2);
IkReal x15377=(gconst50*r00);
IkReal x15378=(gconst49*r01);
IkReal x15379=(cj3*gconst49);
IkReal x15380=(cj1*x15376);
IkReal x15381=(sj1*x15375);
IkReal x15382=((1.0)*x15369);
IkReal x15383=((1.0)*x15368);
IkReal x15384=(sj3*x15369);
IkReal x15385=((1.0)*gconst50*sj3);
IkReal x15386=(x15380+x15381);
evalcond[0]=(((x15368*x15371))+(((-1.0)*r22*x15382))+(((-1.0)*x15370*x15383)));
evalcond[1]=(((gconst49*r11*x15368))+(((-1.0)*r12*x15382))+(((-1.0)*x15374*x15383)));
evalcond[2]=((-1.0)+((x15368*x15378))+(((-1.0)*r02*x15382))+(((-1.0)*x15377*x15383)));
evalcond[3]=(((x15377*x15384))+((r00*x15379))+(((-1.0)*r01*x15373*x15382))+((r01*x15372))+(((-1.0)*r02*sj3*x15383)));
evalcond[4]=(((r00*x15369*x15372))+(((-1.0)*r00*x15373))+(((-1.0)*cj3*r02*x15383))+(((-1.0)*r01*x15385))+(((-1.0)*cj3*x15378*x15382)));
evalcond[5]=(((r20*x15379))+(((-1.0)*cj1*x15375))+((x15370*x15384))+((r21*x15372))+((sj1*sj2))+(((-1.0)*sj3*x15371*x15382))+(((-1.0)*r22*sj3*x15383)));
evalcond[6]=((((-1.0)*r11*x15373*x15382))+(((-1.0)*r12*sj3*x15383))+(((-1.0)*x15386))+((r10*x15379))+((x15374*x15384))+((r11*x15372)));
evalcond[7]=(((r10*x15369*x15372))+(((-1.0)*r11*x15379*x15382))+(((-1.0)*r11*x15385))+((cj1*cj2))+(((-1.0)*r10*x15373))+(((-1.0)*sj1*x15376))+(((-1.0)*cj3*r12*x15383)));
evalcond[8]=((((-1.0)*r21*x15385))+((cj3*x15369*x15370))+(((-1.0)*x15386))+(((-1.0)*r20*x15373))+(((-1.0)*cj3*r22*x15383))+(((-1.0)*cj3*x15371*x15382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15387=gconst49*gconst49;
IkReal x15388=gconst50*gconst50;
IkReal x15389=(cj3*r12);
IkReal x15390=(gconst49*r00);
IkReal x15391=(r01*r11);
IkReal x15392=(r00*r11);
IkReal x15393=(cj3*gconst50);
IkReal x15394=((1.0)*r01*r10);
IkReal x15395=(gconst49*gconst50*sj3);
CheckValue<IkReal> x15396 = IKatan2WithCheck(IkReal((((gconst50*r01*x15389))+((x15389*x15390)))),IkReal((((gconst49*x15391*x15393))+((cj3*x15387*x15392))+(((-1.0)*cj3*x15388*x15394))+(((-1.0)*r10*x15390*x15393)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15396.valid){
continue;
}
CheckValue<IkReal> x15397=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x15394*x15395))+(((-1.0)*gconst50*r11*sj3*x15390))+((sj3*x15387*x15391))+((r00*r10*sj3*x15388)))),-1);
if(!x15397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15396.value)+(((1.5707963267949)*(x15397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15398=IKsin(j4);
IkReal x15399=IKcos(j4);
IkReal x15400=(gconst50*r20);
IkReal x15401=(gconst49*r21);
IkReal x15402=(cj3*gconst50);
IkReal x15403=(gconst49*sj3);
IkReal x15404=(gconst50*r10);
IkReal x15405=((1.0)*cj2);
IkReal x15406=((1.0)*sj2);
IkReal x15407=(gconst50*r00);
IkReal x15408=(gconst49*r01);
IkReal x15409=(cj3*gconst49);
IkReal x15410=(cj1*x15406);
IkReal x15411=(sj1*x15405);
IkReal x15412=((1.0)*x15399);
IkReal x15413=((1.0)*x15398);
IkReal x15414=(sj3*x15399);
IkReal x15415=((1.0)*gconst50*sj3);
IkReal x15416=(x15410+x15411);
evalcond[0]=((((-1.0)*r22*x15412))+(((-1.0)*x15400*x15413))+((x15398*x15401)));
evalcond[1]=(((gconst49*r11*x15398))+(((-1.0)*x15404*x15413))+(((-1.0)*r12*x15412)));
evalcond[2]=((-1.0)+(((-1.0)*x15407*x15413))+((x15398*x15408))+(((-1.0)*r02*x15412)));
evalcond[3]=(((x15407*x15414))+((r00*x15409))+(((-1.0)*r02*sj3*x15413))+((r01*x15402))+(((-1.0)*r01*x15403*x15412)));
evalcond[4]=((((-1.0)*r01*x15415))+(((-1.0)*r00*x15403))+(((-1.0)*cj3*x15408*x15412))+(((-1.0)*cj3*r02*x15413))+((r00*x15399*x15402)));
evalcond[5]=((((-1.0)*sj3*x15401*x15412))+((x15400*x15414))+((sj1*sj2))+((r20*x15409))+(((-1.0)*cj1*x15405))+(((-1.0)*r22*sj3*x15413))+((r21*x15402)));
evalcond[6]=((((-1.0)*r11*x15403*x15412))+((x15404*x15414))+((r10*x15409))+(((-1.0)*r12*sj3*x15413))+((r11*x15402))+(((-1.0)*x15416)));
evalcond[7]=((((-1.0)*cj3*r12*x15413))+((r10*x15399*x15402))+(((-1.0)*r11*x15415))+(((-1.0)*r10*x15403))+((cj1*cj2))+(((-1.0)*sj1*x15406))+(((-1.0)*r11*x15409*x15412)));
evalcond[8]=((((-1.0)*cj3*x15401*x15412))+(((-1.0)*r21*x15415))+((cj3*x15399*x15400))+(((-1.0)*cj3*r22*x15413))+(((-1.0)*r20*x15403))+(((-1.0)*x15416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15417=((1.0)*gconst50);
CheckValue<IkReal> x15418=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x15417)))),-1);
if(!x15418.valid){
continue;
}
CheckValue<IkReal> x15419 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x15417)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15418.value)))+(x15419.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15420=IKsin(j4);
IkReal x15421=IKcos(j4);
IkReal x15422=(gconst50*r20);
IkReal x15423=(gconst49*r21);
IkReal x15424=(cj3*gconst50);
IkReal x15425=(gconst49*sj3);
IkReal x15426=(gconst50*r10);
IkReal x15427=((1.0)*cj2);
IkReal x15428=((1.0)*sj2);
IkReal x15429=(gconst50*r00);
IkReal x15430=(gconst49*r01);
IkReal x15431=(cj3*gconst49);
IkReal x15432=(cj1*x15428);
IkReal x15433=(sj1*x15427);
IkReal x15434=((1.0)*x15421);
IkReal x15435=((1.0)*x15420);
IkReal x15436=(sj3*x15421);
IkReal x15437=((1.0)*gconst50*sj3);
IkReal x15438=(x15432+x15433);
evalcond[0]=(((x15420*x15423))+(((-1.0)*r22*x15434))+(((-1.0)*x15422*x15435)));
evalcond[1]=(((gconst49*r11*x15420))+(((-1.0)*r12*x15434))+(((-1.0)*x15426*x15435)));
evalcond[2]=((-1.0)+((x15420*x15430))+(((-1.0)*x15429*x15435))+(((-1.0)*r02*x15434)));
evalcond[3]=((((-1.0)*r01*x15425*x15434))+(((-1.0)*r02*sj3*x15435))+((x15429*x15436))+((r01*x15424))+((r00*x15431)));
evalcond[4]=((((-1.0)*cj3*x15430*x15434))+(((-1.0)*r00*x15425))+(((-1.0)*cj3*r02*x15435))+(((-1.0)*r01*x15437))+((r00*x15421*x15424)));
evalcond[5]=((((-1.0)*r22*sj3*x15435))+((r21*x15424))+((sj1*sj2))+((x15422*x15436))+(((-1.0)*cj1*x15427))+((r20*x15431))+(((-1.0)*sj3*x15423*x15434)));
evalcond[6]=((((-1.0)*r11*x15425*x15434))+((r10*x15431))+(((-1.0)*r12*sj3*x15435))+((r11*x15424))+(((-1.0)*x15438))+((x15426*x15436)));
evalcond[7]=((((-1.0)*r10*x15425))+(((-1.0)*r11*x15437))+((r10*x15421*x15424))+(((-1.0)*sj1*x15428))+(((-1.0)*r11*x15431*x15434))+(((-1.0)*cj3*r12*x15435))+((cj1*cj2)));
evalcond[8]=((((-1.0)*cj3*r22*x15435))+(((-1.0)*x15438))+(((-1.0)*r20*x15425))+(((-1.0)*cj3*x15423*x15434))+(((-1.0)*r21*x15437))+((cj3*x15421*x15422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15440 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x15440)==0){
continue;
}
IkReal x15439=pow(x15440,-0.5);
CheckValue<IkReal> x15441 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x15441.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x15441.value))));
IkReal gconst52=((1.0)*r21*x15439);
IkReal gconst53=((-1.0)*r20*x15439);
CheckValue<IkReal> x15442 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x15442.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15442.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x15445 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x15445.valid){
continue;
}
IkReal x15443=((1.0)*(x15445.value));
IkReal x15444=x15439;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x15443)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x15443)));
IkReal gconst52=((1.0)*r21*x15444);
IkReal gconst53=((-1.0)*r20*x15444);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15448 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x15448.valid){
continue;
}
IkReal x15446=((1.0)*(x15448.value));
IkReal x15447=x15439;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x15446)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x15446)));
IkReal gconst52=((1.0)*r21*x15447);
IkReal gconst53=((-1.0)*r20*x15447);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15449=gconst52*gconst52;
IkReal x15450=gconst53*gconst53;
IkReal x15451=(r01*sj3);
IkReal x15452=(cj3*r00);
IkReal x15453=(cj3*r01);
IkReal x15454=(r00*sj3);
IkReal x15455=(gconst52*gconst53*r11);
IkReal x15456=(r10*x15450);
IkReal x15457=(r11*x15449);
IkReal x15458=((1.0)*gconst52*gconst53*r10);
CheckValue<IkReal> x15459 = IKatan2WithCheck(IkReal((((gconst52*r12*x15452))+((gconst53*r12*x15453)))),IkReal(((((-1.0)*x15453*x15456))+(((-1.0)*x15452*x15458))+((x15453*x15455))+((x15452*x15457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15459.valid){
continue;
}
CheckValue<IkReal> x15460=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x15451*x15457))+((x15454*x15456))+(((-1.0)*x15451*x15458))+(((-1.0)*x15454*x15455)))),-1);
if(!x15460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15459.value)+(((1.5707963267949)*(x15460.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15461=IKsin(j4);
IkReal x15462=IKcos(j4);
IkReal x15463=((1.0)*sj3);
IkReal x15464=((1.0)*cj1);
IkReal x15465=(cj3*r20);
IkReal x15466=(cj3*gconst52);
IkReal x15467=(gconst53*r11);
IkReal x15468=(sj1*sj2);
IkReal x15469=(gconst53*r01);
IkReal x15470=(gconst52*sj3);
IkReal x15471=(gconst53*r21);
IkReal x15472=(sj2*x15464);
IkReal x15473=((1.0)*cj2*sj1);
IkReal x15474=((1.0)*x15462);
IkReal x15475=(r12*x15461);
IkReal x15476=(gconst53*x15462);
IkReal x15477=(gconst52*x15461);
IkReal x15478=((1.0)*x15461);
IkReal x15479=(x15472+x15473);
evalcond[0]=((((-1.0)*r22*x15474))+((r21*x15477))+(((-1.0)*gconst53*r20*x15478)));
evalcond[1]=((((-1.0)*gconst53*r10*x15478))+((r11*x15477))+(((-1.0)*r12*x15474)));
evalcond[2]=((-1.0)+(((-1.0)*gconst53*r00*x15478))+((r01*x15477))+(((-1.0)*r02*x15474)));
evalcond[3]=((((-1.0)*r02*x15461*x15463))+((r00*x15466))+((cj3*x15469))+(((-1.0)*gconst52*r01*x15462*x15463))+((r00*sj3*x15476)));
evalcond[4]=((((-1.0)*cj3*r02*x15478))+((cj3*r00*x15476))+(((-1.0)*gconst52*r00*x15463))+(((-1.0)*x15463*x15469))+(((-1.0)*r01*x15466*x15474)));
evalcond[5]=((((-1.0)*gconst52*r21*x15462*x15463))+(((-1.0)*cj2*x15464))+((gconst52*x15465))+((r20*sj3*x15476))+x15468+((cj3*x15471))+(((-1.0)*r22*x15461*x15463)));
evalcond[6]=((((-1.0)*x15479))+(((-1.0)*gconst52*r11*x15462*x15463))+((r10*sj3*x15476))+(((-1.0)*x15463*x15475))+((cj3*x15467))+((r10*x15466)));
evalcond[7]=((((-1.0)*cj3*x15475))+(((-1.0)*x15468))+(((-1.0)*x15463*x15467))+(((-1.0)*gconst52*r10*x15463))+((cj1*cj2))+((cj3*r10*x15476))+(((-1.0)*r11*x15466*x15474)));
evalcond[8]=((((-1.0)*r21*x15466*x15474))+(((-1.0)*x15479))+(((-1.0)*cj3*r22*x15478))+((x15465*x15476))+(((-1.0)*x15463*x15471))+(((-1.0)*gconst52*r20*x15463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15480=((1.0)*gconst53);
CheckValue<IkReal> x15481 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x15480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15481.valid){
continue;
}
CheckValue<IkReal> x15482=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst52*r10))+(((-1.0)*r11*x15480)))),-1);
if(!x15482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15481.value)+(((1.5707963267949)*(x15482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15483=IKsin(j4);
IkReal x15484=IKcos(j4);
IkReal x15485=((1.0)*sj3);
IkReal x15486=((1.0)*cj1);
IkReal x15487=(cj3*r20);
IkReal x15488=(cj3*gconst52);
IkReal x15489=(gconst53*r11);
IkReal x15490=(sj1*sj2);
IkReal x15491=(gconst53*r01);
IkReal x15492=(gconst52*sj3);
IkReal x15493=(gconst53*r21);
IkReal x15494=(sj2*x15486);
IkReal x15495=((1.0)*cj2*sj1);
IkReal x15496=((1.0)*x15484);
IkReal x15497=(r12*x15483);
IkReal x15498=(gconst53*x15484);
IkReal x15499=(gconst52*x15483);
IkReal x15500=((1.0)*x15483);
IkReal x15501=(x15494+x15495);
evalcond[0]=((((-1.0)*gconst53*r20*x15500))+((r21*x15499))+(((-1.0)*r22*x15496)));
evalcond[1]=((((-1.0)*gconst53*r10*x15500))+((r11*x15499))+(((-1.0)*r12*x15496)));
evalcond[2]=((-1.0)+((r01*x15499))+(((-1.0)*r02*x15496))+(((-1.0)*gconst53*r00*x15500)));
evalcond[3]=((((-1.0)*gconst52*r01*x15484*x15485))+((cj3*x15491))+((r00*sj3*x15498))+(((-1.0)*r02*x15483*x15485))+((r00*x15488)));
evalcond[4]=((((-1.0)*gconst52*r00*x15485))+(((-1.0)*x15485*x15491))+(((-1.0)*r01*x15488*x15496))+((cj3*r00*x15498))+(((-1.0)*cj3*r02*x15500)));
evalcond[5]=(((gconst52*x15487))+(((-1.0)*r22*x15483*x15485))+((cj3*x15493))+(((-1.0)*gconst52*r21*x15484*x15485))+x15490+(((-1.0)*cj2*x15486))+((r20*sj3*x15498)));
evalcond[6]=((((-1.0)*x15485*x15497))+(((-1.0)*x15501))+((r10*sj3*x15498))+((r10*x15488))+(((-1.0)*gconst52*r11*x15484*x15485))+((cj3*x15489)));
evalcond[7]=(((cj3*r10*x15498))+(((-1.0)*gconst52*r10*x15485))+(((-1.0)*r11*x15488*x15496))+(((-1.0)*x15485*x15489))+(((-1.0)*cj3*x15497))+((cj1*cj2))+(((-1.0)*x15490)));
evalcond[8]=((((-1.0)*cj3*r22*x15500))+(((-1.0)*x15485*x15493))+(((-1.0)*x15501))+((x15487*x15498))+(((-1.0)*gconst52*r20*x15485))+(((-1.0)*r21*x15488*x15496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15502 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15502.valid){
continue;
}
CheckValue<IkReal> x15503=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x15503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15502.value)+(((1.5707963267949)*(x15503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15504=IKsin(j4);
IkReal x15505=IKcos(j4);
IkReal x15506=((1.0)*sj3);
IkReal x15507=((1.0)*cj1);
IkReal x15508=(cj3*r20);
IkReal x15509=(cj3*gconst52);
IkReal x15510=(gconst53*r11);
IkReal x15511=(sj1*sj2);
IkReal x15512=(gconst53*r01);
IkReal x15513=(gconst52*sj3);
IkReal x15514=(gconst53*r21);
IkReal x15515=(sj2*x15507);
IkReal x15516=((1.0)*cj2*sj1);
IkReal x15517=((1.0)*x15505);
IkReal x15518=(r12*x15504);
IkReal x15519=(gconst53*x15505);
IkReal x15520=(gconst52*x15504);
IkReal x15521=((1.0)*x15504);
IkReal x15522=(x15516+x15515);
evalcond[0]=((((-1.0)*r22*x15517))+((r21*x15520))+(((-1.0)*gconst53*r20*x15521)));
evalcond[1]=((((-1.0)*r12*x15517))+(((-1.0)*gconst53*r10*x15521))+((r11*x15520)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15517))+((r01*x15520))+(((-1.0)*gconst53*r00*x15521)));
evalcond[3]=(((r00*x15509))+(((-1.0)*r02*x15504*x15506))+(((-1.0)*gconst52*r01*x15505*x15506))+((cj3*x15512))+((r00*sj3*x15519)));
evalcond[4]=((((-1.0)*gconst52*r00*x15506))+(((-1.0)*x15506*x15512))+(((-1.0)*r01*x15509*x15517))+((cj3*r00*x15519))+(((-1.0)*cj3*r02*x15521)));
evalcond[5]=((((-1.0)*gconst52*r21*x15505*x15506))+((gconst52*x15508))+(((-1.0)*cj2*x15507))+((cj3*x15514))+x15511+((r20*sj3*x15519))+(((-1.0)*r22*x15504*x15506)));
evalcond[6]=((((-1.0)*gconst52*r11*x15505*x15506))+((r10*x15509))+(((-1.0)*x15506*x15518))+(((-1.0)*x15522))+((r10*sj3*x15519))+((cj3*x15510)));
evalcond[7]=((((-1.0)*r11*x15509*x15517))+(((-1.0)*gconst52*r10*x15506))+(((-1.0)*x15506*x15510))+((cj3*r10*x15519))+(((-1.0)*cj3*x15518))+((cj1*cj2))+(((-1.0)*x15511)));
evalcond[8]=((((-1.0)*r21*x15509*x15517))+(((-1.0)*cj3*r22*x15521))+((x15508*x15519))+(((-1.0)*x15506*x15514))+(((-1.0)*gconst52*r20*x15506))+(((-1.0)*x15522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15523=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15523);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15523);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x15524=(cj5*r00);
IkReal x15525=(r01*sj5);
j4eval[0]=((((-1.0)*x15524))+x15525);
j4eval[1]=((((-1.0)*cj3*x15525))+((cj3*x15524)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15526=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15526);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15526);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x15527=(cj5*r00);
IkReal x15528=(r01*sj5);
j4eval[0]=((((-1.0)*x15527))+x15528);
j4eval[1]=((((-1.0)*sj3*x15528))+((sj3*x15527)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15529=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15529);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15529);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=(((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15530=((1.0)*cj3);
CheckValue<IkReal> x15531=IKPowWithIntegerCheck(r22,-1);
if(!x15531.valid){
continue;
}
CheckValue<IkReal> x15532=IKPowWithIntegerCheck(sj3,-1);
if(!x15532.valid){
continue;
}
CheckValue<IkReal> x15533=IKPowWithIntegerCheck((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))),-1);
if(!x15533.valid){
continue;
}
if( IKabs(((x15531.value)*(x15532.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15533.value)*(((((-1.0)*r00*sj5*x15530))+(((-1.0)*cj5*r01*x15530)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15531.value)*(x15532.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15533.value)*(((((-1.0)*r00*sj5*x15530))+(((-1.0)*cj5*r01*x15530))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15531.value)*(x15532.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15533.value)*(((((-1.0)*r00*sj5*x15530))+(((-1.0)*cj5*r01*x15530))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15534=IKsin(j4);
IkReal x15535=IKcos(j4);
IkReal x15536=(sj1*sj2);
IkReal x15537=(r11*sj5);
IkReal x15538=((1.0)*cj3);
IkReal x15539=(cj3*cj5);
IkReal x15540=((1.0)*cj2);
IkReal x15541=(cj3*sj5);
IkReal x15542=(cj5*sj3);
IkReal x15543=((1.0)*sj3);
IkReal x15544=((1.0)*cj1*sj2);
IkReal x15545=(sj1*x15540);
IkReal x15546=(r22*x15534);
IkReal x15547=(r10*x15535);
IkReal x15548=(sj5*x15543);
IkReal x15549=(r01*x15535);
IkReal x15550=(cj5*r00*x15535);
IkReal x15551=((1.0)*cj5*x15534);
IkReal x15552=(x15544+x15545);
evalcond[0]=((-1.0)*r22*x15535);
evalcond[1]=(((x15534*x15537))+(((-1.0)*r10*x15551)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x15551))+((r01*sj5*x15534)));
evalcond[3]=((((-1.0)*x15543*x15546))+x15536+(((-1.0)*cj1*x15540)));
evalcond[4]=((((-1.0)*x15538*x15546))+(((-1.0)*x15552)));
evalcond[5]=(((r00*x15535*x15542))+(((-1.0)*x15548*x15549))+((r01*x15539))+((r00*x15541)));
evalcond[6]=((((-1.0)*r01*x15542))+((r00*x15535*x15539))+(((-1.0)*sj5*x15538*x15549))+(((-1.0)*r00*x15548)));
evalcond[7]=(((x15542*x15547))+((r10*x15541))+(((-1.0)*x15535*x15537*x15543))+((r11*x15539))+(((-1.0)*x15552)));
evalcond[8]=((((-1.0)*x15535*x15537*x15538))+(((-1.0)*r11*x15542))+(((-1.0)*x15536))+((x15539*x15547))+((cj1*cj2))+(((-1.0)*r10*x15548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15553=((1.0)*cj3);
IkReal x15554=(cj5*r00);
IkReal x15555=(r01*sj5);
CheckValue<IkReal> x15556=IKPowWithIntegerCheck(((((-1.0)*x15554))+x15555),-1);
if(!x15556.valid){
continue;
}
CheckValue<IkReal> x15557=IKPowWithIntegerCheck((((sj3*x15554))+(((-1.0)*sj3*x15555))),-1);
if(!x15557.valid){
continue;
}
if( IKabs(x15556.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15557.value)*(((((-1.0)*cj5*r01*x15553))+(((-1.0)*r00*sj5*x15553)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15556.value)+IKsqr(((x15557.value)*(((((-1.0)*cj5*r01*x15553))+(((-1.0)*r00*sj5*x15553))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15556.value, ((x15557.value)*(((((-1.0)*cj5*r01*x15553))+(((-1.0)*r00*sj5*x15553))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15558=IKsin(j4);
IkReal x15559=IKcos(j4);
IkReal x15560=(sj1*sj2);
IkReal x15561=(r11*sj5);
IkReal x15562=((1.0)*cj3);
IkReal x15563=(cj3*cj5);
IkReal x15564=((1.0)*cj2);
IkReal x15565=(cj3*sj5);
IkReal x15566=(cj5*sj3);
IkReal x15567=((1.0)*sj3);
IkReal x15568=((1.0)*cj1*sj2);
IkReal x15569=(sj1*x15564);
IkReal x15570=(r22*x15558);
IkReal x15571=(r10*x15559);
IkReal x15572=(sj5*x15567);
IkReal x15573=(r01*x15559);
IkReal x15574=(cj5*r00*x15559);
IkReal x15575=((1.0)*cj5*x15558);
IkReal x15576=(x15568+x15569);
evalcond[0]=((-1.0)*r22*x15559);
evalcond[1]=((((-1.0)*r10*x15575))+((x15558*x15561)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x15575))+((r01*sj5*x15558)));
evalcond[3]=((((-1.0)*cj1*x15564))+(((-1.0)*x15567*x15570))+x15560);
evalcond[4]=((((-1.0)*x15562*x15570))+(((-1.0)*x15576)));
evalcond[5]=(((r00*x15559*x15566))+(((-1.0)*x15572*x15573))+((r01*x15563))+((r00*x15565)));
evalcond[6]=(((r00*x15559*x15563))+(((-1.0)*r00*x15572))+(((-1.0)*sj5*x15562*x15573))+(((-1.0)*r01*x15566)));
evalcond[7]=(((x15566*x15571))+((r10*x15565))+((r11*x15563))+(((-1.0)*x15559*x15561*x15567))+(((-1.0)*x15576)));
evalcond[8]=((((-1.0)*r11*x15566))+((x15563*x15571))+(((-1.0)*r10*x15572))+((cj1*cj2))+(((-1.0)*x15559*x15561*x15562))+(((-1.0)*x15560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15577=(cj5*r00);
IkReal x15578=(r01*sj5);
CheckValue<IkReal> x15579=IKPowWithIntegerCheck((x15578+(((-1.0)*x15577))),-1);
if(!x15579.valid){
continue;
}
CheckValue<IkReal> x15580=IKPowWithIntegerCheck(((((-1.0)*cj3*x15578))+((cj3*x15577))),-1);
if(!x15580.valid){
continue;
}
if( IKabs(x15579.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15580.value)*((((cj5*r01*sj3))+((r00*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15579.value)+IKsqr(((x15580.value)*((((cj5*r01*sj3))+((r00*sj3*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15579.value, ((x15580.value)*((((cj5*r01*sj3))+((r00*sj3*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15581=IKsin(j4);
IkReal x15582=IKcos(j4);
IkReal x15583=(sj1*sj2);
IkReal x15584=(r11*sj5);
IkReal x15585=((1.0)*cj3);
IkReal x15586=(cj3*cj5);
IkReal x15587=((1.0)*cj2);
IkReal x15588=(cj3*sj5);
IkReal x15589=(cj5*sj3);
IkReal x15590=((1.0)*sj3);
IkReal x15591=((1.0)*cj1*sj2);
IkReal x15592=(sj1*x15587);
IkReal x15593=(r22*x15581);
IkReal x15594=(r10*x15582);
IkReal x15595=(sj5*x15590);
IkReal x15596=(r01*x15582);
IkReal x15597=(cj5*r00*x15582);
IkReal x15598=((1.0)*cj5*x15581);
IkReal x15599=(x15592+x15591);
evalcond[0]=((-1.0)*r22*x15582);
evalcond[1]=(((x15581*x15584))+(((-1.0)*r10*x15598)));
evalcond[2]=((-1.0)+((r01*sj5*x15581))+(((-1.0)*r00*x15598)));
evalcond[3]=((((-1.0)*cj1*x15587))+(((-1.0)*x15590*x15593))+x15583);
evalcond[4]=((((-1.0)*x15585*x15593))+(((-1.0)*x15599)));
evalcond[5]=(((r01*x15586))+((r00*x15582*x15589))+(((-1.0)*x15595*x15596))+((r00*x15588)));
evalcond[6]=(((r00*x15582*x15586))+(((-1.0)*r00*x15595))+(((-1.0)*sj5*x15585*x15596))+(((-1.0)*r01*x15589)));
evalcond[7]=(((r11*x15586))+((r10*x15588))+(((-1.0)*x15599))+((x15589*x15594))+(((-1.0)*x15582*x15584*x15590)));
evalcond[8]=((((-1.0)*x15583))+(((-1.0)*x15582*x15584*x15585))+(((-1.0)*r10*x15595))+((cj1*cj2))+(((-1.0)*r11*x15589))+((x15586*x15594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15600=cj5*cj5;
IkReal x15601=(r21*sj3);
IkReal x15602=(cj3*r20);
IkReal x15603=(cj5*r01);
IkReal x15604=(r20*sj3);
IkReal x15605=(cj3*r22);
IkReal x15606=(cj3*r00*r21);
IkReal x15607=((1.0)*x15600);
IkReal x15608=((1.0)*cj5*r00*sj5);
CheckValue<IkReal> x15609 = IKatan2WithCheck(IkReal((((r00*sj5*x15605))+((x15603*x15605)))),IkReal(((((-1.0)*x15606*x15607))+(((-1.0)*x15602*x15608))+x15606+(((-1.0)*r01*x15602*x15607))+((cj3*r21*sj5*x15603)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15609.valid){
continue;
}
CheckValue<IkReal> x15610=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x15601*x15607))+(((-1.0)*sj5*x15603*x15604))+(((-1.0)*x15601*x15608))+((r00*x15600*x15604))+((r01*x15601))+((r02*r22*sj3)))),-1);
if(!x15610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15609.value)+(((1.5707963267949)*(x15610.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15611=IKsin(j4);
IkReal x15612=IKcos(j4);
IkReal x15613=(cj3*r00);
IkReal x15614=(sj1*sj2);
IkReal x15615=(r20*sj3);
IkReal x15616=(r00*sj3);
IkReal x15617=(r11*sj5);
IkReal x15618=(cj3*cj5);
IkReal x15619=((1.0)*cj2);
IkReal x15620=(r21*sj5);
IkReal x15621=(r10*sj5);
IkReal x15622=((1.0)*sj3);
IkReal x15623=(cj3*r20);
IkReal x15624=(r01*sj5);
IkReal x15625=((1.0)*sj5);
IkReal x15626=((1.0)*cj1*sj2);
IkReal x15627=(sj1*x15619);
IkReal x15628=((1.0)*x15612);
IkReal x15629=((1.0)*x15611);
IkReal x15630=(cj5*x15612);
IkReal x15631=(x15627+x15626);
evalcond[0]=((((-1.0)*cj5*r20*x15629))+((x15611*x15620))+(((-1.0)*r22*x15628)));
evalcond[1]=((((-1.0)*r12*x15628))+(((-1.0)*cj5*r10*x15629))+((x15611*x15617)));
evalcond[2]=((-1.0)+(((-1.0)*cj5*r00*x15629))+(((-1.0)*r02*x15628))+((x15611*x15624)));
evalcond[3]=((((-1.0)*x15612*x15622*x15624))+(((-1.0)*r02*x15611*x15622))+((r01*x15618))+((x15616*x15630))+((sj5*x15613)));
evalcond[4]=((((-1.0)*x15616*x15625))+(((-1.0)*cj5*r01*x15622))+(((-1.0)*cj3*x15624*x15628))+((x15613*x15630))+(((-1.0)*cj3*r02*x15629)));
evalcond[5]=(((r21*x15618))+(((-1.0)*cj1*x15619))+(((-1.0)*x15612*x15620*x15622))+(((-1.0)*r22*x15611*x15622))+x15614+((x15615*x15630))+((sj5*x15623)));
evalcond[6]=(((r10*sj3*x15630))+(((-1.0)*r12*x15611*x15622))+((cj3*x15621))+((r11*x15618))+(((-1.0)*x15612*x15617*x15622))+(((-1.0)*x15631)));
evalcond[7]=(((r10*x15612*x15618))+(((-1.0)*cj5*r11*x15622))+(((-1.0)*cj3*x15617*x15628))+(((-1.0)*x15614))+(((-1.0)*cj3*r12*x15629))+(((-1.0)*x15621*x15622))+((cj1*cj2)));
evalcond[8]=((((-1.0)*cj3*r22*x15629))+(((-1.0)*x15615*x15625))+((r20*x15612*x15618))+(((-1.0)*cj3*x15620*x15628))+(((-1.0)*cj5*r21*x15622))+(((-1.0)*x15631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15632=((1.0)*cj5);
CheckValue<IkReal> x15633 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15632)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15633.valid){
continue;
}
CheckValue<IkReal> x15634=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15632)))),-1);
if(!x15634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15633.value)+(((1.5707963267949)*(x15634.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15635=IKsin(j4);
IkReal x15636=IKcos(j4);
IkReal x15637=(cj3*r00);
IkReal x15638=(sj1*sj2);
IkReal x15639=(r20*sj3);
IkReal x15640=(r00*sj3);
IkReal x15641=(r11*sj5);
IkReal x15642=(cj3*cj5);
IkReal x15643=((1.0)*cj2);
IkReal x15644=(r21*sj5);
IkReal x15645=(r10*sj5);
IkReal x15646=((1.0)*sj3);
IkReal x15647=(cj3*r20);
IkReal x15648=(r01*sj5);
IkReal x15649=((1.0)*sj5);
IkReal x15650=((1.0)*cj1*sj2);
IkReal x15651=(sj1*x15643);
IkReal x15652=((1.0)*x15636);
IkReal x15653=((1.0)*x15635);
IkReal x15654=(cj5*x15636);
IkReal x15655=(x15650+x15651);
evalcond[0]=((((-1.0)*cj5*r20*x15653))+(((-1.0)*r22*x15652))+((x15635*x15644)));
evalcond[1]=((((-1.0)*r12*x15652))+(((-1.0)*cj5*r10*x15653))+((x15635*x15641)));
evalcond[2]=((-1.0)+(((-1.0)*cj5*r00*x15653))+(((-1.0)*r02*x15652))+((x15635*x15648)));
evalcond[3]=(((r01*x15642))+(((-1.0)*x15636*x15646*x15648))+((x15640*x15654))+(((-1.0)*r02*x15635*x15646))+((sj5*x15637)));
evalcond[4]=((((-1.0)*cj5*r01*x15646))+((x15637*x15654))+(((-1.0)*cj3*x15648*x15652))+(((-1.0)*cj3*r02*x15653))+(((-1.0)*x15640*x15649)));
evalcond[5]=((((-1.0)*cj1*x15643))+x15638+((r21*x15642))+(((-1.0)*x15636*x15644*x15646))+((sj5*x15647))+(((-1.0)*r22*x15635*x15646))+((x15639*x15654)));
evalcond[6]=(((r10*sj3*x15654))+(((-1.0)*r12*x15635*x15646))+((cj3*x15645))+(((-1.0)*x15636*x15641*x15646))+((r11*x15642))+(((-1.0)*x15655)));
evalcond[7]=((((-1.0)*cj3*r12*x15653))+(((-1.0)*cj5*r11*x15646))+(((-1.0)*x15645*x15646))+(((-1.0)*x15638))+((cj1*cj2))+(((-1.0)*cj3*x15641*x15652))+((r10*x15636*x15642)));
evalcond[8]=(((r20*x15636*x15642))+(((-1.0)*x15639*x15649))+(((-1.0)*cj3*x15644*x15652))+(((-1.0)*x15655))+(((-1.0)*cj3*r22*x15653))+(((-1.0)*cj5*r21*x15646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15656=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15656.valid){
continue;
}
CheckValue<IkReal> x15657 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15656.value)))+(x15657.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15658=IKsin(j4);
IkReal x15659=IKcos(j4);
IkReal x15660=(cj3*r00);
IkReal x15661=(sj1*sj2);
IkReal x15662=(r20*sj3);
IkReal x15663=(r00*sj3);
IkReal x15664=(r11*sj5);
IkReal x15665=(cj3*cj5);
IkReal x15666=((1.0)*cj2);
IkReal x15667=(r21*sj5);
IkReal x15668=(r10*sj5);
IkReal x15669=((1.0)*sj3);
IkReal x15670=(cj3*r20);
IkReal x15671=(r01*sj5);
IkReal x15672=((1.0)*sj5);
IkReal x15673=((1.0)*cj1*sj2);
IkReal x15674=(sj1*x15666);
IkReal x15675=((1.0)*x15659);
IkReal x15676=((1.0)*x15658);
IkReal x15677=(cj5*x15659);
IkReal x15678=(x15674+x15673);
evalcond[0]=(((x15658*x15667))+(((-1.0)*r22*x15675))+(((-1.0)*cj5*r20*x15676)));
evalcond[1]=(((x15658*x15664))+(((-1.0)*r12*x15675))+(((-1.0)*cj5*r10*x15676)));
evalcond[2]=((-1.0)+((x15658*x15671))+(((-1.0)*cj5*r00*x15676))+(((-1.0)*r02*x15675)));
evalcond[3]=(((x15663*x15677))+((sj5*x15660))+((r01*x15665))+(((-1.0)*r02*x15658*x15669))+(((-1.0)*x15659*x15669*x15671)));
evalcond[4]=((((-1.0)*x15663*x15672))+((x15660*x15677))+(((-1.0)*cj3*x15671*x15675))+(((-1.0)*cj3*r02*x15676))+(((-1.0)*cj5*r01*x15669)));
evalcond[5]=(((sj5*x15670))+((x15662*x15677))+x15661+(((-1.0)*r22*x15658*x15669))+((r21*x15665))+(((-1.0)*cj1*x15666))+(((-1.0)*x15659*x15667*x15669)));
evalcond[6]=((((-1.0)*x15678))+((cj3*x15668))+((r11*x15665))+((r10*sj3*x15677))+(((-1.0)*r12*x15658*x15669))+(((-1.0)*x15659*x15664*x15669)));
evalcond[7]=(((r10*x15659*x15665))+(((-1.0)*cj3*r12*x15676))+(((-1.0)*cj3*x15664*x15675))+(((-1.0)*x15661))+((cj1*cj2))+(((-1.0)*cj5*r11*x15669))+(((-1.0)*x15668*x15669)));
evalcond[8]=((((-1.0)*cj3*x15667*x15675))+(((-1.0)*x15678))+((r20*x15659*x15665))+(((-1.0)*x15662*x15672))+(((-1.0)*cj5*r21*x15669))+(((-1.0)*cj3*r22*x15676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15679=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15679;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15679);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15680=((1.0)*cj5);
IkReal x15681=((((-1.0)*r21*x15680))+(((-1.0)*r20*sj5)));
j4eval[0]=x15681;
j4eval[1]=((IKabs(((((-1.0)*r10*x15680))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15681);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15682=cj5*cj5;
IkReal x15683=(r21*sj3);
IkReal x15684=(r20*sj3);
IkReal x15685=((1.0)*cj5*sj5);
IkReal x15686=(((r00*x15682*x15684))+((r01*x15683))+(((-1.0)*r01*x15684*x15685))+(((-1.0)*r01*x15682*x15683))+((r02*r22*sj3))+(((-1.0)*r00*x15683*x15685)));
j4eval[0]=x15686;
j4eval[1]=IKsign(x15686);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x15687=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15687;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15687);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x15688=((1.0)*cj5);
IkReal x15689=((((-1.0)*r21*x15688))+(((-1.0)*r20*sj5)));
j4eval[0]=x15689;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15688))+((r11*sj5))))));
j4eval[2]=IKsign(x15689);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x15690=cj5*cj5;
IkReal x15691=r01*r01;
IkReal x15692=(cj5*r00);
IkReal x15693=(r01*sj5);
IkReal x15694=(((x15690*(r00*r00)))+(((-2.0)*x15692*x15693))+x15691+(r02*r02)+(((-1.0)*x15690*x15691)));
j4eval[0]=x15694;
j4eval[1]=((IKabs(r02))+(IKabs((x15692+(((-1.0)*x15693))))));
j4eval[2]=IKsign(x15694);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15695=cj5*cj5;
IkReal x15696=r01*r01;
IkReal x15697=(r01*sj5);
IkReal x15698=(cj5*r00);
CheckValue<IkReal> x15699 = IKatan2WithCheck(IkReal((x15698+(((-1.0)*x15697)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15699.valid){
continue;
}
CheckValue<IkReal> x15700=IKPowWithIntegerCheck(IKsign(((((-2.0)*x15697*x15698))+(((-1.0)*x15695*x15696))+((x15695*(r00*r00)))+x15696+(r02*r02))),-1);
if(!x15700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15699.value)+(((1.5707963267949)*(x15700.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15701=IKsin(j4);
IkReal x15702=IKcos(j4);
IkReal x15703=(cj5*r10);
IkReal x15704=(r01*sj5);
IkReal x15705=((1.0)*cj2);
IkReal x15706=(cj5*r00);
IkReal x15707=(cj5*r20);
IkReal x15708=((1.0)*x15702);
IkReal x15709=((1.0)*x15701);
IkReal x15710=(sj5*x15701);
evalcond[0]=((((-1.0)*x15707*x15709))+(((-1.0)*r22*x15708))+((r21*x15710)));
evalcond[1]=((((-1.0)*r12*x15708))+(((-1.0)*x15703*x15709))+((r11*x15710)));
evalcond[2]=((((-1.0)*x15704*x15708))+((x15702*x15706))+(((-1.0)*r02*x15709)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15708))+(((-1.0)*x15706*x15709))+((x15701*x15704)));
evalcond[4]=((((-1.0)*cj1*x15705))+((x15702*x15703))+(((-1.0)*r12*x15709))+((sj1*sj2))+(((-1.0)*r11*sj5*x15708)));
evalcond[5]=((((-1.0)*r22*x15709))+((x15702*x15707))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x15708))+(((-1.0)*sj1*x15705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15711=((1.0)*cj5);
CheckValue<IkReal> x15712 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15711))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15712.valid){
continue;
}
CheckValue<IkReal> x15713=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15711))+(((-1.0)*r20*sj5)))),-1);
if(!x15713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15712.value)+(((1.5707963267949)*(x15713.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15714=IKsin(j4);
IkReal x15715=IKcos(j4);
IkReal x15716=(cj5*r10);
IkReal x15717=(r01*sj5);
IkReal x15718=((1.0)*cj2);
IkReal x15719=(cj5*r00);
IkReal x15720=(cj5*r20);
IkReal x15721=((1.0)*x15715);
IkReal x15722=((1.0)*x15714);
IkReal x15723=(sj5*x15714);
evalcond[0]=(((r21*x15723))+(((-1.0)*r22*x15721))+(((-1.0)*x15720*x15722)));
evalcond[1]=(((r11*x15723))+(((-1.0)*x15716*x15722))+(((-1.0)*r12*x15721)));
evalcond[2]=((((-1.0)*r02*x15722))+(((-1.0)*x15717*x15721))+((x15715*x15719)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15721))+((x15714*x15717))+(((-1.0)*x15719*x15722)));
evalcond[4]=((((-1.0)*r11*sj5*x15721))+((sj1*sj2))+(((-1.0)*r12*x15722))+((x15715*x15716))+(((-1.0)*cj1*x15718)));
evalcond[5]=((((-1.0)*r21*sj5*x15721))+(((-1.0)*sj1*x15718))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x15722))+((x15715*x15720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15724 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15724.valid){
continue;
}
CheckValue<IkReal> x15725=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15724.value)+(((1.5707963267949)*(x15725.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15726=IKsin(j4);
IkReal x15727=IKcos(j4);
IkReal x15728=(cj5*r10);
IkReal x15729=(r01*sj5);
IkReal x15730=((1.0)*cj2);
IkReal x15731=(cj5*r00);
IkReal x15732=(cj5*r20);
IkReal x15733=((1.0)*x15727);
IkReal x15734=((1.0)*x15726);
IkReal x15735=(sj5*x15726);
evalcond[0]=((((-1.0)*x15732*x15734))+((r21*x15735))+(((-1.0)*r22*x15733)));
evalcond[1]=(((r11*x15735))+(((-1.0)*r12*x15733))+(((-1.0)*x15728*x15734)));
evalcond[2]=((((-1.0)*r02*x15734))+((x15727*x15731))+(((-1.0)*x15729*x15733)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15733))+(((-1.0)*x15731*x15734))+((x15726*x15729)));
evalcond[4]=((((-1.0)*r11*sj5*x15733))+((sj1*sj2))+(((-1.0)*r12*x15734))+((x15727*x15728))+(((-1.0)*cj1*x15730)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x15733))+(((-1.0)*sj1*x15730))+(((-1.0)*r22*x15734))+((x15727*x15732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15736=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15736;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15736);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15737=((1.0)*cj5);
IkReal x15738=((((-1.0)*r21*x15737))+(((-1.0)*r20*sj5)));
j4eval[0]=x15738;
j4eval[1]=((IKabs(((((-1.0)*r10*x15737))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15738);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15739=(sj1*sj2);
IkReal x15740=(r01*sj5);
IkReal x15741=(cj1*cj2);
IkReal x15742=((1.0)*cj5);
IkReal x15743=((((-1.0)*r21*x15742))+(((-1.0)*r20*sj5)));
j4eval[0]=x15743;
j4eval[1]=((IKabs((((x15739*x15740))+(((-1.0)*r00*x15739*x15742))+((cj5*r00*x15741))+(((-1.0)*x15740*x15741)))))+(IKabs((((r02*x15741))+(((-1.0)*r02*x15739))))));
j4eval[2]=IKsign(x15743);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15744=(sj1*sj2);
IkReal x15745=(r01*sj5);
IkReal x15746=(cj1*cj2);
IkReal x15747=((1.0)*cj5);
CheckValue<IkReal> x15748 = IKatan2WithCheck(IkReal(((((-1.0)*x15745*x15746))+((cj5*r00*x15746))+(((-1.0)*r00*x15744*x15747))+((x15744*x15745)))),IkReal(((((-1.0)*r02*x15744))+((r02*x15746)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15748.valid){
continue;
}
CheckValue<IkReal> x15749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15747))+(((-1.0)*r20*sj5)))),-1);
if(!x15749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15748.value)+(((1.5707963267949)*(x15749.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15750=IKcos(j4);
IkReal x15751=IKsin(j4);
IkReal x15752=(cj5*r00);
IkReal x15753=(cj5*r10);
IkReal x15754=(r21*sj5);
IkReal x15755=((1.0)*cj2);
IkReal x15756=(cj5*r20);
IkReal x15757=((1.0)*x15750);
IkReal x15758=((1.0)*x15751);
IkReal x15759=(sj5*x15751);
IkReal x15760=(sj5*x15750);
evalcond[0]=(((r02*x15751))+((r01*x15760))+(((-1.0)*x15752*x15757)));
evalcond[1]=((((-1.0)*x15756*x15758))+(((-1.0)*r22*x15757))+((x15751*x15754)));
evalcond[2]=((((-1.0)*x15753*x15758))+((r11*x15759))+(((-1.0)*r12*x15757)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15757))+((r01*x15759))+(((-1.0)*x15752*x15758)));
evalcond[4]=((((-1.0)*cj1*x15755))+((sj1*sj2))+(((-1.0)*x15753*x15757))+((r12*x15751))+((r11*x15760)));
evalcond[5]=(((r22*x15751))+(((-1.0)*x15756*x15757))+((x15750*x15754))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x15755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15761=((1.0)*cj5);
CheckValue<IkReal> x15762=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15761))+(((-1.0)*r20*sj5)))),-1);
if(!x15762.valid){
continue;
}
CheckValue<IkReal> x15763 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15762.value)))+(x15763.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15764=IKcos(j4);
IkReal x15765=IKsin(j4);
IkReal x15766=(cj5*r00);
IkReal x15767=(cj5*r10);
IkReal x15768=(r21*sj5);
IkReal x15769=((1.0)*cj2);
IkReal x15770=(cj5*r20);
IkReal x15771=((1.0)*x15764);
IkReal x15772=((1.0)*x15765);
IkReal x15773=(sj5*x15765);
IkReal x15774=(sj5*x15764);
evalcond[0]=(((r02*x15765))+((r01*x15774))+(((-1.0)*x15766*x15771)));
evalcond[1]=(((x15765*x15768))+(((-1.0)*r22*x15771))+(((-1.0)*x15770*x15772)));
evalcond[2]=(((r11*x15773))+(((-1.0)*r12*x15771))+(((-1.0)*x15767*x15772)));
evalcond[3]=((1.0)+((r01*x15773))+(((-1.0)*r02*x15771))+(((-1.0)*x15766*x15772)));
evalcond[4]=((((-1.0)*cj1*x15769))+((sj1*sj2))+((r12*x15765))+((r11*x15774))+(((-1.0)*x15767*x15771)));
evalcond[5]=(((r22*x15765))+(((-1.0)*cj1*sj2))+(((-1.0)*x15770*x15771))+((x15764*x15768))+(((-1.0)*sj1*x15769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15775 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15775.valid){
continue;
}
CheckValue<IkReal> x15776=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15775.value)+(((1.5707963267949)*(x15776.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15777=IKcos(j4);
IkReal x15778=IKsin(j4);
IkReal x15779=(cj5*r00);
IkReal x15780=(cj5*r10);
IkReal x15781=(r21*sj5);
IkReal x15782=((1.0)*cj2);
IkReal x15783=(cj5*r20);
IkReal x15784=((1.0)*x15777);
IkReal x15785=((1.0)*x15778);
IkReal x15786=(sj5*x15778);
IkReal x15787=(sj5*x15777);
evalcond[0]=(((r01*x15787))+((r02*x15778))+(((-1.0)*x15779*x15784)));
evalcond[1]=(((x15778*x15781))+(((-1.0)*r22*x15784))+(((-1.0)*x15783*x15785)));
evalcond[2]=(((r11*x15786))+(((-1.0)*r12*x15784))+(((-1.0)*x15780*x15785)));
evalcond[3]=((1.0)+((r01*x15786))+(((-1.0)*r02*x15784))+(((-1.0)*x15779*x15785)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x15782))+((r12*x15778))+((r11*x15787))+(((-1.0)*x15780*x15784)));
evalcond[5]=(((r22*x15778))+((x15777*x15781))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x15782))+(((-1.0)*x15783*x15784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15789 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15789)==0){
continue;
}
IkReal x15788=pow(x15789,-0.5);
CheckValue<IkReal> x15790 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15790.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15790.value));
IkReal gconst61=((-1.0)*r11*x15788);
IkReal gconst62=(r10*x15788);
CheckValue<IkReal> x15791 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15791.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15791.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15794 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15794.valid){
continue;
}
IkReal x15792=((-1.0)*(x15794.value));
IkReal x15793=x15788;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15792;
IkReal gconst60=x15792;
IkReal gconst61=((-1.0)*r11*x15793);
IkReal gconst62=(r10*x15793);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15797 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15797.valid){
continue;
}
IkReal x15795=((-1.0)*(x15797.value));
IkReal x15796=x15788;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15795;
IkReal gconst60=x15795;
IkReal gconst61=((-1.0)*r11*x15796);
IkReal gconst62=(r10*x15796);
CheckValue<IkReal> x15805=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15805.valid){
continue;
}
IkReal x15798=x15805.value;
IkReal x15799=(sj3*x15798);
IkReal x15800=(r20*x15799);
IkReal x15801=(r00*x15799);
IkReal x15802=(r01*x15799);
IkReal x15803=(r21*x15799);
IkReal x15804=(r10*r11*x15799);
j4eval[0]=IKsign((((r10*r11*r21*x15801))+((r00*x15800*(r10*r10)))+((r01*r10*r11*x15800))+((r02*r22*sj3))+((r21*x15802*(r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15808 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15808.valid){
continue;
}
IkReal x15806=((-1.0)*(x15808.value));
IkReal x15807=x15788;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15806;
IkReal gconst60=x15806;
IkReal gconst61=((-1.0)*r11*x15807);
IkReal gconst62=(r10*x15807);
CheckValue<IkReal> x15816=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15816.valid){
continue;
}
IkReal x15809=x15816.value;
IkReal x15810=(cj3*x15809);
IkReal x15811=(r00*x15810);
IkReal x15812=(r21*x15810);
IkReal x15813=(r20*x15810);
IkReal x15814=(r01*x15810);
IkReal x15815=(r10*r11*x15810);
j4eval[0]=IKsign((((r20*x15811*(r10*r10)))+((r01*r10*r11*x15813))+((r10*r11*r21*x15811))+((r01*x15812*(r11*r11)))+((cj3*r02*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15817=gconst61*gconst61;
IkReal x15818=gconst62*gconst62;
IkReal x15819=(r00*r20);
IkReal x15820=(gconst61*gconst62);
IkReal x15821=((1.0)*r01);
IkReal x15822=(r22*sj3);
IkReal x15823=((1.0)*r00);
IkReal x15824=(cj3*r21);
IkReal x15825=((1.0)*r21*sj3);
CheckValue<IkReal> x15826=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15820*x15823*x15824))+(((-1.0)*cj3*r20*x15820*x15821))+((cj3*r02*r22))+((r01*x15817*x15824))+((cj3*x15818*x15819)))),-1);
if(!x15826.valid){
continue;
}
CheckValue<IkReal> x15827 = IKatan2WithCheck(IkReal(((((-1.0)*gconst61*x15822*x15823))+(((-1.0)*gconst62*x15821*x15822)))),IkReal((((sj3*x15819*x15820))+(((-1.0)*r21*sj3*x15820*x15821))+((r01*r20*sj3*x15818))+(((-1.0)*r21*sj3*x15817*x15823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15826.value)))+(x15827.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15828=IKsin(j4);
IkReal x15829=IKcos(j4);
IkReal x15830=(sj1*sj2);
IkReal x15831=((1.0)*cj1);
IkReal x15832=(gconst61*sj3);
IkReal x15833=(cj3*r20);
IkReal x15834=(cj3*gconst62);
IkReal x15835=(cj2*sj1);
IkReal x15836=(cj3*gconst61);
IkReal x15837=(cj2*x15831);
IkReal x15838=((1.0)*x15829);
IkReal x15839=((1.0)*x15828);
IkReal x15840=(gconst61*x15828);
IkReal x15841=(r10*x15829);
IkReal x15842=(gconst62*x15829);
IkReal x15843=((1.0)*gconst62*sj3);
evalcond[0]=(((r21*x15840))+(((-1.0)*gconst62*r20*x15839))+(((-1.0)*r22*x15838)));
evalcond[1]=(((r11*x15840))+(((-1.0)*r12*x15838))+(((-1.0)*gconst62*r10*x15839)));
evalcond[2]=((1.0)+((r01*x15840))+(((-1.0)*gconst62*r00*x15839))+(((-1.0)*r02*x15838)));
evalcond[3]=((((-1.0)*r02*sj3*x15839))+((r01*x15834))+((r00*x15836))+(((-1.0)*r01*x15832*x15838))+((r00*sj3*x15842)));
evalcond[4]=((((-1.0)*r01*x15836*x15838))+(((-1.0)*r00*x15832))+(((-1.0)*cj3*r02*x15839))+(((-1.0)*r01*x15843))+((r00*x15829*x15834)));
evalcond[5]=(((r10*x15836))+((cj1*sj2))+((r11*x15834))+((gconst62*sj3*x15841))+(((-1.0)*r11*x15832*x15838))+(((-1.0)*r12*sj3*x15839))+x15835);
evalcond[6]=(((gconst61*x15833))+(((-1.0)*r22*sj3*x15839))+(((-1.0)*r21*x15832*x15838))+((r20*sj3*x15842))+(((-1.0)*x15837))+x15830+((r21*x15834)));
evalcond[7]=((((-1.0)*r11*x15843))+(((-1.0)*cj3*r12*x15839))+(((-1.0)*r11*x15836*x15838))+((x15834*x15841))+(((-1.0)*x15837))+(((-1.0)*r10*x15832))+x15830);
evalcond[8]=((((-1.0)*r21*x15843))+(((-1.0)*r21*x15836*x15838))+(((-1.0)*cj3*r22*x15839))+(((-1.0)*sj2*x15831))+((x15833*x15842))+(((-1.0)*x15835))+(((-1.0)*r20*x15832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15844=gconst61*gconst61;
IkReal x15845=gconst62*gconst62;
IkReal x15846=(cj3*r22);
IkReal x15847=(gconst62*r01);
IkReal x15848=(gconst61*r00);
IkReal x15849=((1.0)*r20);
IkReal x15850=(cj3*r21);
IkReal x15851=(r21*sj3);
CheckValue<IkReal> x15852=IKPowWithIntegerCheck(IKsign((((r01*x15844*x15851))+(((-1.0)*gconst62*x15848*x15851))+((r00*r20*sj3*x15845))+((r02*r22*sj3))+(((-1.0)*gconst61*sj3*x15847*x15849)))),-1);
if(!x15852.valid){
continue;
}
CheckValue<IkReal> x15853 = IKatan2WithCheck(IkReal((((x15846*x15848))+((x15846*x15847)))),IkReal(((((-1.0)*cj3*r01*x15845*x15849))+(((-1.0)*cj3*gconst62*x15848*x15849))+((gconst61*x15847*x15850))+((r00*x15844*x15850)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15852.value)))+(x15853.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15854=IKsin(j4);
IkReal x15855=IKcos(j4);
IkReal x15856=(sj1*sj2);
IkReal x15857=((1.0)*cj1);
IkReal x15858=(gconst61*sj3);
IkReal x15859=(cj3*r20);
IkReal x15860=(cj3*gconst62);
IkReal x15861=(cj2*sj1);
IkReal x15862=(cj3*gconst61);
IkReal x15863=(cj2*x15857);
IkReal x15864=((1.0)*x15855);
IkReal x15865=((1.0)*x15854);
IkReal x15866=(gconst61*x15854);
IkReal x15867=(r10*x15855);
IkReal x15868=(gconst62*x15855);
IkReal x15869=((1.0)*gconst62*sj3);
evalcond[0]=(((r21*x15866))+(((-1.0)*r22*x15864))+(((-1.0)*gconst62*r20*x15865)));
evalcond[1]=((((-1.0)*gconst62*r10*x15865))+((r11*x15866))+(((-1.0)*r12*x15864)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15864))+(((-1.0)*gconst62*r00*x15865))+((r01*x15866)));
evalcond[3]=(((r00*sj3*x15868))+(((-1.0)*r02*sj3*x15865))+((r00*x15862))+((r01*x15860))+(((-1.0)*r01*x15858*x15864)));
evalcond[4]=((((-1.0)*r00*x15858))+(((-1.0)*r01*x15869))+(((-1.0)*cj3*r02*x15865))+(((-1.0)*r01*x15862*x15864))+((r00*x15855*x15860)));
evalcond[5]=(((cj1*sj2))+((r11*x15860))+(((-1.0)*r11*x15858*x15864))+((gconst62*sj3*x15867))+(((-1.0)*r12*sj3*x15865))+((r10*x15862))+x15861);
evalcond[6]=(((r21*x15860))+((gconst61*x15859))+((r20*sj3*x15868))+(((-1.0)*x15863))+(((-1.0)*r22*sj3*x15865))+(((-1.0)*r21*x15858*x15864))+x15856);
evalcond[7]=((((-1.0)*r10*x15858))+(((-1.0)*x15863))+(((-1.0)*cj3*r12*x15865))+(((-1.0)*r11*x15862*x15864))+((x15860*x15867))+x15856+(((-1.0)*r11*x15869)));
evalcond[8]=((((-1.0)*x15861))+(((-1.0)*sj2*x15857))+(((-1.0)*cj3*r22*x15865))+((x15859*x15868))+(((-1.0)*r21*x15869))+(((-1.0)*r20*x15858))+(((-1.0)*r21*x15862*x15864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15870=((1.0)*gconst62);
CheckValue<IkReal> x15871 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15870))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15871.valid){
continue;
}
CheckValue<IkReal> x15872=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15870))+(((-1.0)*gconst61*r20)))),-1);
if(!x15872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15871.value)+(((1.5707963267949)*(x15872.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15873=IKsin(j4);
IkReal x15874=IKcos(j4);
IkReal x15875=(sj1*sj2);
IkReal x15876=((1.0)*cj1);
IkReal x15877=(gconst61*sj3);
IkReal x15878=(cj3*r20);
IkReal x15879=(cj3*gconst62);
IkReal x15880=(cj2*sj1);
IkReal x15881=(cj3*gconst61);
IkReal x15882=(cj2*x15876);
IkReal x15883=((1.0)*x15874);
IkReal x15884=((1.0)*x15873);
IkReal x15885=(gconst61*x15873);
IkReal x15886=(r10*x15874);
IkReal x15887=(gconst62*x15874);
IkReal x15888=((1.0)*gconst62*sj3);
evalcond[0]=((((-1.0)*gconst62*r20*x15884))+(((-1.0)*r22*x15883))+((r21*x15885)));
evalcond[1]=((((-1.0)*gconst62*r10*x15884))+((r11*x15885))+(((-1.0)*r12*x15883)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15884))+(((-1.0)*r02*x15883))+((r01*x15885)));
evalcond[3]=(((r00*sj3*x15887))+((r01*x15879))+((r00*x15881))+(((-1.0)*r01*x15877*x15883))+(((-1.0)*r02*sj3*x15884)));
evalcond[4]=((((-1.0)*r00*x15877))+((r00*x15874*x15879))+(((-1.0)*r01*x15881*x15883))+(((-1.0)*cj3*r02*x15884))+(((-1.0)*r01*x15888)));
evalcond[5]=(((r11*x15879))+((r10*x15881))+(((-1.0)*r11*x15877*x15883))+((cj1*sj2))+(((-1.0)*r12*sj3*x15884))+((gconst62*sj3*x15886))+x15880);
evalcond[6]=((((-1.0)*r21*x15877*x15883))+((r20*sj3*x15887))+((r21*x15879))+(((-1.0)*x15882))+((gconst61*x15878))+(((-1.0)*r22*sj3*x15884))+x15875);
evalcond[7]=(((x15879*x15886))+(((-1.0)*r11*x15881*x15883))+(((-1.0)*r11*x15888))+(((-1.0)*cj3*r12*x15884))+(((-1.0)*x15882))+x15875+(((-1.0)*r10*x15877)));
evalcond[8]=((((-1.0)*sj2*x15876))+(((-1.0)*r20*x15877))+(((-1.0)*cj3*r22*x15884))+(((-1.0)*x15880))+(((-1.0)*r21*x15881*x15883))+(((-1.0)*r21*x15888))+((x15878*x15887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15890 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15890)==0){
continue;
}
IkReal x15889=pow(x15890,-0.5);
CheckValue<IkReal> x15891 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15891.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15891.value))));
IkReal gconst64=((1.0)*r11*x15889);
IkReal gconst65=((-1.0)*r10*x15889);
CheckValue<IkReal> x15892 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15892.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15892.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15895 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15895.valid){
continue;
}
IkReal x15893=((1.0)*(x15895.value));
IkReal x15894=x15889;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15893)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15893)));
IkReal gconst64=((1.0)*r11*x15894);
IkReal gconst65=((-1.0)*r10*x15894);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15896=gconst64*gconst64;
IkReal x15897=gconst65*gconst65;
IkReal x15898=(gconst65*r01);
IkReal x15899=(cj3*r22);
IkReal x15900=(gconst64*r00);
IkReal x15901=(cj3*r21);
IkReal x15902=((1.0)*gconst64*sj3);
IkReal x15903=((1.0)*cj3*r20);
CheckValue<IkReal> x15904 = IKatan2WithCheck(IkReal((((x15898*x15899))+((x15899*x15900)))),IkReal((((r00*x15896*x15901))+(((-1.0)*gconst65*x15900*x15903))+((gconst64*x15898*x15901))+(((-1.0)*r01*x15897*x15903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15904.valid){
continue;
}
CheckValue<IkReal> x15905=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15898*x15902))+((r01*r21*sj3*x15896))+(((-1.0)*gconst65*r21*sj3*x15900))+((r00*r20*sj3*x15897))+((r02*r22*sj3)))),-1);
if(!x15905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15904.value)+(((1.5707963267949)*(x15905.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15906=IKsin(j4);
IkReal x15907=IKcos(j4);
IkReal x15908=(sj1*sj2);
IkReal x15909=((1.0)*sj3);
IkReal x15910=(cj3*gconst64);
IkReal x15911=(gconst65*r11);
IkReal x15912=((1.0)*cj2);
IkReal x15913=(gconst65*r21);
IkReal x15914=(cj1*sj2);
IkReal x15915=(gconst64*r01);
IkReal x15916=(gconst65*r01);
IkReal x15917=(gconst64*sj3);
IkReal x15918=(cj1*x15912);
IkReal x15919=((1.0)*x15907);
IkReal x15920=(r12*x15906);
IkReal x15921=((1.0)*x15906);
IkReal x15922=(gconst64*x15906);
IkReal x15923=(cj3*gconst65*x15907);
IkReal x15924=(gconst65*sj3*x15907);
evalcond[0]=(((r21*x15922))+(((-1.0)*gconst65*r20*x15921))+(((-1.0)*r22*x15919)));
evalcond[1]=(((r11*x15922))+(((-1.0)*r12*x15919))+(((-1.0)*gconst65*r10*x15921)));
evalcond[2]=((1.0)+(((-1.0)*gconst65*r00*x15921))+((x15906*x15915))+(((-1.0)*r02*x15919)));
evalcond[3]=(((r00*x15910))+((r00*x15924))+((cj3*x15916))+(((-1.0)*r02*x15906*x15909))+(((-1.0)*x15907*x15909*x15915)));
evalcond[4]=((((-1.0)*r01*x15910*x15919))+(((-1.0)*gconst64*r00*x15909))+(((-1.0)*cj3*r02*x15921))+((r00*x15923))+(((-1.0)*x15909*x15916)));
evalcond[5]=(((r10*x15924))+((cj2*sj1))+(((-1.0)*x15909*x15920))+(((-1.0)*gconst64*r11*x15907*x15909))+((cj3*x15911))+((r10*x15910))+x15914);
evalcond[6]=(((r20*x15924))+(((-1.0)*gconst64*r21*x15907*x15909))+(((-1.0)*r22*x15906*x15909))+((cj3*x15913))+(((-1.0)*x15918))+((r20*x15910))+x15908);
evalcond[7]=(((r10*x15923))+(((-1.0)*cj3*x15920))+(((-1.0)*x15909*x15911))+(((-1.0)*x15918))+(((-1.0)*r11*x15910*x15919))+(((-1.0)*gconst64*r10*x15909))+x15908);
evalcond[8]=(((r20*x15923))+(((-1.0)*cj3*r22*x15921))+(((-1.0)*x15914))+(((-1.0)*r21*x15910*x15919))+(((-1.0)*x15909*x15913))+(((-1.0)*sj1*x15912))+(((-1.0)*gconst64*r20*x15909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15925=((1.0)*gconst65);
CheckValue<IkReal> x15926=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15925))+(((-1.0)*gconst64*r20)))),-1);
if(!x15926.valid){
continue;
}
CheckValue<IkReal> x15927 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15925))+((gconst64*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15926.value)))+(x15927.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15928=IKsin(j4);
IkReal x15929=IKcos(j4);
IkReal x15930=(sj1*sj2);
IkReal x15931=((1.0)*sj3);
IkReal x15932=(cj3*gconst64);
IkReal x15933=(gconst65*r11);
IkReal x15934=((1.0)*cj2);
IkReal x15935=(gconst65*r21);
IkReal x15936=(cj1*sj2);
IkReal x15937=(gconst64*r01);
IkReal x15938=(gconst65*r01);
IkReal x15939=(gconst64*sj3);
IkReal x15940=(cj1*x15934);
IkReal x15941=((1.0)*x15929);
IkReal x15942=(r12*x15928);
IkReal x15943=((1.0)*x15928);
IkReal x15944=(gconst64*x15928);
IkReal x15945=(cj3*gconst65*x15929);
IkReal x15946=(gconst65*sj3*x15929);
evalcond[0]=((((-1.0)*r22*x15941))+(((-1.0)*gconst65*r20*x15943))+((r21*x15944)));
evalcond[1]=((((-1.0)*r12*x15941))+(((-1.0)*gconst65*r10*x15943))+((r11*x15944)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15941))+((x15928*x15937))+(((-1.0)*gconst65*r00*x15943)));
evalcond[3]=(((r00*x15946))+(((-1.0)*x15929*x15931*x15937))+((r00*x15932))+((cj3*x15938))+(((-1.0)*r02*x15928*x15931)));
evalcond[4]=(((r00*x15945))+(((-1.0)*r01*x15932*x15941))+(((-1.0)*x15931*x15938))+(((-1.0)*gconst64*r00*x15931))+(((-1.0)*cj3*r02*x15943)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*gconst64*r11*x15929*x15931))+((cj3*x15933))+(((-1.0)*x15931*x15942))+((r10*x15946))+x15936+((r10*x15932)));
evalcond[6]=((((-1.0)*x15940))+((r20*x15946))+((cj3*x15935))+((r20*x15932))+(((-1.0)*r22*x15928*x15931))+(((-1.0)*gconst64*r21*x15929*x15931))+x15930);
evalcond[7]=((((-1.0)*x15931*x15933))+(((-1.0)*x15940))+((r10*x15945))+(((-1.0)*gconst64*r10*x15931))+(((-1.0)*r11*x15932*x15941))+(((-1.0)*cj3*x15942))+x15930);
evalcond[8]=((((-1.0)*r21*x15932*x15941))+(((-1.0)*x15931*x15935))+(((-1.0)*x15936))+(((-1.0)*cj3*r22*x15943))+((r20*x15945))+(((-1.0)*sj1*x15934))+(((-1.0)*gconst64*r20*x15931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15947=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15947);
rxp0_2=(py*r00);
rxp1_0=(r21*x15947);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15948=(cj5*r00);
IkReal x15949=(r01*sj5);
j4eval[0]=((((-1.0)*x15948))+x15949);
j4eval[1]=(((cj3*x15948))+(((-1.0)*cj3*x15949)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15950=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15950);
rxp0_2=(py*r00);
rxp1_0=(r21*x15950);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15951=(cj5*r00);
IkReal x15952=(r01*sj5);
j4eval[0]=((((-1.0)*x15951))+x15952);
j4eval[1]=(((sj3*x15951))+(((-1.0)*sj3*x15952)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15953=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15953);
rxp0_2=(py*r00);
rxp1_0=(r21*x15953);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15954=((1.0)*r01);
CheckValue<IkReal> x15955=IKPowWithIntegerCheck(r12,-1);
if(!x15955.valid){
continue;
}
CheckValue<IkReal> x15956=IKPowWithIntegerCheck(sj3,-1);
if(!x15956.valid){
continue;
}
CheckValue<IkReal> x15957=IKPowWithIntegerCheck((((cj5*r00*sj3))+(((-1.0)*sj3*sj5*x15954))),-1);
if(!x15957.valid){
continue;
}
if( IKabs(((x15955.value)*(x15956.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15957.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15954)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15955.value)*(x15956.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x15957.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15954))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15955.value)*(x15956.value)*((((cj2*sj1))+((cj1*sj2))))), ((x15957.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15954))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15958=IKsin(j4);
IkReal x15959=IKcos(j4);
IkReal x15960=(sj1*sj2);
IkReal x15961=((1.0)*sj3);
IkReal x15962=(cj3*r00);
IkReal x15963=(cj3*cj5);
IkReal x15964=((1.0)*cj2);
IkReal x15965=(r21*sj5);
IkReal x15966=(cj1*sj2);
IkReal x15967=(cj3*r20);
IkReal x15968=(r01*sj5);
IkReal x15969=((1.0)*cj3);
IkReal x15970=(cj1*x15964);
IkReal x15971=(r12*x15958);
IkReal x15972=(cj5*x15959);
IkReal x15973=((1.0)*cj5*x15958);
evalcond[0]=((-1.0)*r12*x15959);
evalcond[1]=(((x15958*x15965))+(((-1.0)*r20*x15973)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*x15961*x15971))+x15966);
evalcond[3]=((1.0)+((x15958*x15968))+(((-1.0)*r00*x15973)));
evalcond[4]=((((-1.0)*x15970))+(((-1.0)*x15969*x15971))+x15960);
evalcond[5]=(((r01*x15963))+((r00*sj3*x15972))+((sj5*x15962))+(((-1.0)*x15959*x15961*x15968)));
evalcond[6]=((((-1.0)*r00*sj5*x15961))+((x15962*x15972))+(((-1.0)*x15959*x15968*x15969))+(((-1.0)*cj5*r01*x15961)));
evalcond[7]=(((r20*sj3*x15972))+(((-1.0)*x15970))+((sj5*x15967))+((r21*x15963))+(((-1.0)*x15959*x15961*x15965))+x15960);
evalcond[8]=((((-1.0)*cj5*r21*x15961))+(((-1.0)*sj1*x15964))+(((-1.0)*r20*sj5*x15961))+(((-1.0)*x15966))+(((-1.0)*x15959*x15965*x15969))+((r20*x15959*x15963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15974=((1.0)*r01);
IkReal x15975=(cj5*r00);
CheckValue<IkReal> x15976=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15975))),-1);
if(!x15976.valid){
continue;
}
CheckValue<IkReal> x15977=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x15974))+((sj3*x15975))),-1);
if(!x15977.valid){
continue;
}
if( IKabs(((-1.0)*(x15976.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15977.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15974)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15976.value)))+IKsqr(((x15977.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15974))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15976.value)), ((x15977.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15974))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15978=IKsin(j4);
IkReal x15979=IKcos(j4);
IkReal x15980=(sj1*sj2);
IkReal x15981=((1.0)*sj3);
IkReal x15982=(cj3*r00);
IkReal x15983=(cj3*cj5);
IkReal x15984=((1.0)*cj2);
IkReal x15985=(r21*sj5);
IkReal x15986=(cj1*sj2);
IkReal x15987=(cj3*r20);
IkReal x15988=(r01*sj5);
IkReal x15989=((1.0)*cj3);
IkReal x15990=(cj1*x15984);
IkReal x15991=(r12*x15978);
IkReal x15992=(cj5*x15979);
IkReal x15993=((1.0)*cj5*x15978);
evalcond[0]=((-1.0)*r12*x15979);
evalcond[1]=((((-1.0)*r20*x15993))+((x15978*x15985)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*x15981*x15991))+x15986);
evalcond[3]=((1.0)+(((-1.0)*r00*x15993))+((x15978*x15988)));
evalcond[4]=((((-1.0)*x15990))+(((-1.0)*x15989*x15991))+x15980);
evalcond[5]=((((-1.0)*x15979*x15981*x15988))+((sj5*x15982))+((r00*sj3*x15992))+((r01*x15983)));
evalcond[6]=((((-1.0)*x15979*x15988*x15989))+((x15982*x15992))+(((-1.0)*r00*sj5*x15981))+(((-1.0)*cj5*r01*x15981)));
evalcond[7]=((((-1.0)*x15990))+((r20*sj3*x15992))+(((-1.0)*x15979*x15981*x15985))+((sj5*x15987))+((r21*x15983))+x15980);
evalcond[8]=((((-1.0)*x15986))+(((-1.0)*r20*sj5*x15981))+((r20*x15979*x15983))+(((-1.0)*cj5*r21*x15981))+(((-1.0)*sj1*x15984))+(((-1.0)*x15979*x15985*x15989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15994=(r01*sj5);
IkReal x15995=(cj5*r00);
CheckValue<IkReal> x15996=IKPowWithIntegerCheck(((((-1.0)*x15995))+x15994),-1);
if(!x15996.valid){
continue;
}
CheckValue<IkReal> x15997=IKPowWithIntegerCheck((((cj3*x15995))+(((-1.0)*cj3*x15994))),-1);
if(!x15997.valid){
continue;
}
if( IKabs(((-1.0)*(x15996.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15997.value)*((((cj5*r01*sj3))+((r00*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15996.value)))+IKsqr(((x15997.value)*((((cj5*r01*sj3))+((r00*sj3*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15996.value)), ((x15997.value)*((((cj5*r01*sj3))+((r00*sj3*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15998=IKsin(j4);
IkReal x15999=IKcos(j4);
IkReal x16000=(sj1*sj2);
IkReal x16001=((1.0)*sj3);
IkReal x16002=(cj3*r00);
IkReal x16003=(cj3*cj5);
IkReal x16004=((1.0)*cj2);
IkReal x16005=(r21*sj5);
IkReal x16006=(cj1*sj2);
IkReal x16007=(cj3*r20);
IkReal x16008=(r01*sj5);
IkReal x16009=((1.0)*cj3);
IkReal x16010=(cj1*x16004);
IkReal x16011=(r12*x15998);
IkReal x16012=(cj5*x15999);
IkReal x16013=((1.0)*cj5*x15998);
evalcond[0]=((-1.0)*r12*x15999);
evalcond[1]=((((-1.0)*r20*x16013))+((x15998*x16005)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*x16001*x16011))+x16006);
evalcond[3]=((1.0)+(((-1.0)*r00*x16013))+((x15998*x16008)));
evalcond[4]=((((-1.0)*x16010))+x16000+(((-1.0)*x16009*x16011)));
evalcond[5]=(((sj5*x16002))+((r01*x16003))+(((-1.0)*x15999*x16001*x16008))+((r00*sj3*x16012)));
evalcond[6]=((((-1.0)*r00*sj5*x16001))+((x16002*x16012))+(((-1.0)*cj5*r01*x16001))+(((-1.0)*x15999*x16008*x16009)));
evalcond[7]=((((-1.0)*x16010))+((sj5*x16007))+((r21*x16003))+x16000+(((-1.0)*x15999*x16001*x16005))+((r20*sj3*x16012)));
evalcond[8]=(((r20*x15999*x16003))+(((-1.0)*sj1*x16004))+(((-1.0)*x15999*x16005*x16009))+(((-1.0)*cj5*r21*x16001))+(((-1.0)*r20*sj5*x16001))+(((-1.0)*x16006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16014=cj5*cj5;
IkReal x16015=(r21*sj3);
IkReal x16016=(cj3*r20);
IkReal x16017=(cj5*r01);
IkReal x16018=(r20*sj3);
IkReal x16019=(cj3*r22);
IkReal x16020=(cj3*r00*r21);
IkReal x16021=((1.0)*x16014);
IkReal x16022=((1.0)*cj5*r00*sj5);
CheckValue<IkReal> x16023 = IKatan2WithCheck(IkReal((((r00*sj5*x16019))+((x16017*x16019)))),IkReal((((cj3*r21*sj5*x16017))+(((-1.0)*x16016*x16022))+x16020+(((-1.0)*r01*x16016*x16021))+(((-1.0)*x16020*x16021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16023.valid){
continue;
}
CheckValue<IkReal> x16024=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj5*x16017*x16018))+(((-1.0)*x16015*x16022))+((r00*x16014*x16018))+((r01*x16015))+(((-1.0)*r01*x16015*x16021))+((r02*r22*sj3)))),-1);
if(!x16024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16023.value)+(((1.5707963267949)*(x16024.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16025=IKsin(j4);
IkReal x16026=IKcos(j4);
IkReal x16027=(sj1*sj2);
IkReal x16028=(cj3*r00);
IkReal x16029=(r20*sj3);
IkReal x16030=(r00*sj3);
IkReal x16031=(r11*sj5);
IkReal x16032=(cj3*cj5);
IkReal x16033=((1.0)*cj2);
IkReal x16034=(r21*sj5);
IkReal x16035=(r10*sj5);
IkReal x16036=(cj1*sj2);
IkReal x16037=((1.0)*sj3);
IkReal x16038=(cj3*r20);
IkReal x16039=(r01*sj5);
IkReal x16040=((1.0)*sj5);
IkReal x16041=(cj1*x16033);
IkReal x16042=((1.0)*x16026);
IkReal x16043=((1.0)*x16025);
IkReal x16044=(cj5*x16026);
evalcond[0]=((((-1.0)*r22*x16042))+((x16025*x16034))+(((-1.0)*cj5*r20*x16043)));
evalcond[1]=((((-1.0)*r12*x16042))+(((-1.0)*cj5*r10*x16043))+((x16025*x16031)));
evalcond[2]=((1.0)+((x16025*x16039))+(((-1.0)*r02*x16042))+(((-1.0)*cj5*r00*x16043)));
evalcond[3]=((((-1.0)*x16026*x16037*x16039))+(((-1.0)*r02*x16025*x16037))+((x16030*x16044))+((sj5*x16028))+((r01*x16032)));
evalcond[4]=((((-1.0)*cj3*x16039*x16042))+((x16028*x16044))+(((-1.0)*x16030*x16040))+(((-1.0)*cj3*r02*x16043))+(((-1.0)*cj5*r01*x16037)));
evalcond[5]=(((cj2*sj1))+((r11*x16032))+(((-1.0)*r12*x16025*x16037))+((cj3*x16035))+x16036+((r10*sj3*x16044))+(((-1.0)*x16026*x16031*x16037)));
evalcond[6]=(((sj5*x16038))+(((-1.0)*x16041))+(((-1.0)*x16026*x16034*x16037))+(((-1.0)*r22*x16025*x16037))+((x16029*x16044))+x16027+((r21*x16032)));
evalcond[7]=((((-1.0)*cj5*r11*x16037))+(((-1.0)*x16041))+x16027+((r10*x16026*x16032))+(((-1.0)*cj3*r12*x16043))+(((-1.0)*cj3*x16031*x16042))+(((-1.0)*x16035*x16037)));
evalcond[8]=(((r20*x16026*x16032))+(((-1.0)*cj3*x16034*x16042))+(((-1.0)*cj3*r22*x16043))+(((-1.0)*cj5*r21*x16037))+(((-1.0)*x16029*x16040))+(((-1.0)*x16036))+(((-1.0)*sj1*x16033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16045=((1.0)*cj5);
CheckValue<IkReal> x16046 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x16045))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16046.valid){
continue;
}
CheckValue<IkReal> x16047=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x16045))+(((-1.0)*r20*sj5)))),-1);
if(!x16047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16046.value)+(((1.5707963267949)*(x16047.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16048=IKsin(j4);
IkReal x16049=IKcos(j4);
IkReal x16050=(sj1*sj2);
IkReal x16051=(cj3*r00);
IkReal x16052=(r20*sj3);
IkReal x16053=(r00*sj3);
IkReal x16054=(r11*sj5);
IkReal x16055=(cj3*cj5);
IkReal x16056=((1.0)*cj2);
IkReal x16057=(r21*sj5);
IkReal x16058=(r10*sj5);
IkReal x16059=(cj1*sj2);
IkReal x16060=((1.0)*sj3);
IkReal x16061=(cj3*r20);
IkReal x16062=(r01*sj5);
IkReal x16063=((1.0)*sj5);
IkReal x16064=(cj1*x16056);
IkReal x16065=((1.0)*x16049);
IkReal x16066=((1.0)*x16048);
IkReal x16067=(cj5*x16049);
evalcond[0]=(((x16048*x16057))+(((-1.0)*cj5*r20*x16066))+(((-1.0)*r22*x16065)));
evalcond[1]=(((x16048*x16054))+(((-1.0)*cj5*r10*x16066))+(((-1.0)*r12*x16065)));
evalcond[2]=((1.0)+(((-1.0)*cj5*r00*x16066))+((x16048*x16062))+(((-1.0)*r02*x16065)));
evalcond[3]=(((x16053*x16067))+((sj5*x16051))+(((-1.0)*x16049*x16060*x16062))+((r01*x16055))+(((-1.0)*r02*x16048*x16060)));
evalcond[4]=((((-1.0)*cj3*r02*x16066))+(((-1.0)*cj5*r01*x16060))+(((-1.0)*cj3*x16062*x16065))+(((-1.0)*x16053*x16063))+((x16051*x16067)));
evalcond[5]=(((cj3*x16058))+((cj2*sj1))+((r10*sj3*x16067))+(((-1.0)*x16049*x16054*x16060))+x16059+(((-1.0)*r12*x16048*x16060))+((r11*x16055)));
evalcond[6]=((((-1.0)*x16049*x16057*x16060))+((x16052*x16067))+((r21*x16055))+(((-1.0)*x16064))+x16050+(((-1.0)*r22*x16048*x16060))+((sj5*x16061)));
evalcond[7]=((((-1.0)*cj3*r12*x16066))+(((-1.0)*x16058*x16060))+(((-1.0)*cj5*r11*x16060))+(((-1.0)*x16064))+x16050+(((-1.0)*cj3*x16054*x16065))+((r10*x16049*x16055)));
evalcond[8]=((((-1.0)*x16059))+(((-1.0)*sj1*x16056))+(((-1.0)*cj5*r21*x16060))+(((-1.0)*cj3*r22*x16066))+(((-1.0)*x16052*x16063))+((r20*x16049*x16055))+(((-1.0)*cj3*x16057*x16065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16068 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16068.valid){
continue;
}
CheckValue<IkReal> x16069=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x16069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16068.value)+(((1.5707963267949)*(x16069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16070=IKsin(j4);
IkReal x16071=IKcos(j4);
IkReal x16072=(sj1*sj2);
IkReal x16073=(cj3*r00);
IkReal x16074=(r20*sj3);
IkReal x16075=(r00*sj3);
IkReal x16076=(r11*sj5);
IkReal x16077=(cj3*cj5);
IkReal x16078=((1.0)*cj2);
IkReal x16079=(r21*sj5);
IkReal x16080=(r10*sj5);
IkReal x16081=(cj1*sj2);
IkReal x16082=((1.0)*sj3);
IkReal x16083=(cj3*r20);
IkReal x16084=(r01*sj5);
IkReal x16085=((1.0)*sj5);
IkReal x16086=(cj1*x16078);
IkReal x16087=((1.0)*x16071);
IkReal x16088=((1.0)*x16070);
IkReal x16089=(cj5*x16071);
evalcond[0]=((((-1.0)*r22*x16087))+(((-1.0)*cj5*r20*x16088))+((x16070*x16079)));
evalcond[1]=((((-1.0)*cj5*r10*x16088))+(((-1.0)*r12*x16087))+((x16070*x16076)));
evalcond[2]=((1.0)+((x16070*x16084))+(((-1.0)*r02*x16087))+(((-1.0)*cj5*r00*x16088)));
evalcond[3]=((((-1.0)*x16071*x16082*x16084))+((x16075*x16089))+((sj5*x16073))+(((-1.0)*r02*x16070*x16082))+((r01*x16077)));
evalcond[4]=(((x16073*x16089))+(((-1.0)*cj5*r01*x16082))+(((-1.0)*cj3*r02*x16088))+(((-1.0)*x16075*x16085))+(((-1.0)*cj3*x16084*x16087)));
evalcond[5]=(((cj2*sj1))+((cj3*x16080))+(((-1.0)*r12*x16070*x16082))+x16081+((r10*sj3*x16089))+(((-1.0)*x16071*x16076*x16082))+((r11*x16077)));
evalcond[6]=(((x16074*x16089))+((sj5*x16083))+((r21*x16077))+(((-1.0)*x16071*x16079*x16082))+(((-1.0)*r22*x16070*x16082))+x16072+(((-1.0)*x16086)));
evalcond[7]=((((-1.0)*x16080*x16082))+(((-1.0)*cj3*x16076*x16087))+x16072+((r10*x16071*x16077))+(((-1.0)*cj3*r12*x16088))+(((-1.0)*cj5*r11*x16082))+(((-1.0)*x16086)));
evalcond[8]=((((-1.0)*cj3*r22*x16088))+(((-1.0)*sj1*x16078))+(((-1.0)*x16081))+(((-1.0)*cj5*r21*x16082))+(((-1.0)*cj3*x16079*x16087))+((r20*x16071*x16077))+(((-1.0)*x16074*x16085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16090=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16090);
rxp1_1=(px*r21);
rxp1_2=(r11*x16090);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16091=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16091);
rxp1_1=(px*r21);
rxp1_2=(r11*x16091);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20*sj3))+(((-1.0)*r21*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16092=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16092);
rxp1_1=(px*r21);
rxp1_2=(r11*x16092);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16093=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16093);
rxp1_1=(px*r21);
rxp1_2=(r11*x16093);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16094=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16094);
rxp1_1=(px*r21);
rxp1_2=(r11*x16094);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16095=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16095);
rxp1_1=(px*r21);
rxp1_2=(r11*x16095);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16098=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x16098.valid){
continue;
}
IkReal x16096=x16098.value;
IkReal x16097=(sj0*x16096);
cj4array[0]=(((cj2*sj1*x16097))+((cj1*sj2*x16097)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16099=IKsin(j4);
IkReal x16100=IKcos(j4);
IkReal x16101=(cj5*r20);
IkReal x16102=(r21*sj5);
IkReal x16103=((1.0)*x16099);
IkReal x16104=((1.0)*x16100);
evalcond[0]=((-1.0)*r02*x16099);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x16104)));
evalcond[2]=((((-1.0)*x16101*x16103))+((x16099*x16102)));
evalcond[3]=(((r11*sj5*x16099))+(((-1.0)*cj5*r10*x16103)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x16102*x16104))+((x16100*x16101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16106=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x16106.valid){
continue;
}
IkReal x16105=x16106.value;
cj4array[0]=((((-1.0)*sj1*sj2*x16105))+((cj1*cj2*x16105)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16107=IKsin(j4);
IkReal x16108=IKcos(j4);
IkReal x16109=(r11*sj5);
IkReal x16110=((1.0)*sj0);
IkReal x16111=((1.0)*x16108);
IkReal x16112=((1.0)*cj5*x16107);
evalcond[0]=((-1.0)*r02*x16107);
evalcond[1]=((((-1.0)*r02*x16111))+(((-1.0)*x16110)));
evalcond[2]=((((-1.0)*r20*x16112))+((r21*sj5*x16107)));
evalcond[3]=((((-1.0)*r10*x16112))+((x16107*x16109)));
evalcond[4]=((((-1.0)*cj2*sj1*x16110))+(((-1.0)*cj1*sj2*x16110))+(((-1.0)*x16109*x16111))+((cj5*r10*x16108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16113=IKPowWithIntegerCheck(r02,-1);
if(!x16113.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x16113.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16114=IKsin(j4);
IkReal x16115=IKcos(j4);
IkReal x16116=((1.0)*sj0);
IkReal x16117=(cj5*x16115);
IkReal x16118=(sj5*x16114);
IkReal x16119=((1.0)*sj5*x16115);
IkReal x16120=((1.0)*cj5*x16114);
evalcond[0]=((-1.0)*r02*x16114);
evalcond[1]=(((r21*x16118))+(((-1.0)*r20*x16120)));
evalcond[2]=((((-1.0)*r10*x16120))+((r11*x16118)));
evalcond[3]=((((-1.0)*r21*x16119))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x16117)));
evalcond[4]=((((-1.0)*cj2*sj1*x16116))+(((-1.0)*r11*x16119))+(((-1.0)*cj1*sj2*x16116))+((r10*x16117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16121=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16121);
rxp1_1=(px*r21);
rxp1_2=(r11*x16121);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16122=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16122);
rxp1_1=(px*r21);
rxp1_2=(r11*x16122);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16123=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16123);
rxp1_1=(px*r21);
rxp1_2=(r11*x16123);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16126=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x16126.valid){
continue;
}
IkReal x16124=x16126.value;
IkReal x16125=(sj0*x16124);
cj4array[0]=(((cj2*sj1*x16125))+((cj1*sj2*x16125)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16127=IKsin(j4);
IkReal x16128=IKcos(j4);
IkReal x16129=(r21*sj5);
IkReal x16130=((1.0)*cj5*r20);
evalcond[0]=(r02*x16127);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x16128)));
evalcond[2]=(((x16127*x16129))+(((-1.0)*x16127*x16130)));
evalcond[3]=((((-1.0)*cj5*r10*x16127))+((r11*sj5*x16127)));
evalcond[4]=(((x16128*x16129))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x16128*x16130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16132=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x16132.valid){
continue;
}
IkReal x16131=x16132.value;
cj4array[0]=((((-1.0)*sj1*sj2*x16131))+((cj1*cj2*x16131)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16133=IKsin(j4);
IkReal x16134=IKcos(j4);
IkReal x16135=((1.0)*sj0);
IkReal x16136=((1.0)*cj5);
IkReal x16137=(sj5*x16133);
evalcond[0]=(r02*x16133);
evalcond[1]=((((-1.0)*r02*x16134))+(((-1.0)*x16135)));
evalcond[2]=((((-1.0)*r20*x16133*x16136))+((r21*x16137)));
evalcond[3]=((((-1.0)*r10*x16133*x16136))+((r11*x16137)));
evalcond[4]=((((-1.0)*cj1*sj2*x16135))+((r11*sj5*x16134))+(((-1.0)*r10*x16134*x16136))+(((-1.0)*cj2*sj1*x16135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16138=IKPowWithIntegerCheck(r02,-1);
if(!x16138.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x16138.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16139=IKsin(j4);
IkReal x16140=IKcos(j4);
IkReal x16141=((1.0)*cj1);
IkReal x16142=(r21*sj5);
IkReal x16143=((1.0)*cj5);
IkReal x16144=(r11*sj5);
evalcond[0]=(r02*x16139);
evalcond[1]=(((x16139*x16142))+(((-1.0)*r20*x16139*x16143)));
evalcond[2]=(((x16139*x16144))+(((-1.0)*r10*x16139*x16143)));
evalcond[3]=((((-1.0)*r20*x16140*x16143))+((sj1*sj2))+(((-1.0)*cj2*x16141))+((x16140*x16142)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x16140*x16143))+(((-1.0)*sj0*sj2*x16141))+((x16140*x16144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x16145 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16145.valid){
continue;
}
IkReal gconst66=((-1.0)*(x16145.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x16146 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16146.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x16146.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16147=((-1.0)*r10);
CheckValue<IkReal> x16149 = IKatan2WithCheck(IkReal(x16147),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16149.valid){
continue;
}
IkReal x16148=((-1.0)*(x16149.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x16147);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x16148;
IkReal gconst66=x16148;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16150=((-1.0)*r10);
CheckValue<IkReal> x16152 = IKatan2WithCheck(IkReal(x16150),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16152.valid){
continue;
}
IkReal x16151=((-1.0)*(x16152.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x16150);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x16151;
IkReal gconst66=x16151;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x16153=((-1.0)*r10);
CheckValue<IkReal> x16155 = IKatan2WithCheck(IkReal(x16153),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16155.valid){
continue;
}
IkReal x16154=((-1.0)*(x16155.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x16153);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x16154;
IkReal gconst66=x16154;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16156=((1.0)*gconst67);
IkReal x16157=(cj1*cj2);
IkReal x16158=((1.0)*sj1*sj2);
CheckValue<IkReal> x16159=IKPowWithIntegerCheck(cj3,-1);
if(!x16159.valid){
continue;
}
CheckValue<IkReal> x16160=IKPowWithIntegerCheck(r02,-1);
if(!x16160.valid){
continue;
}
CheckValue<IkReal> x16161=IKPowWithIntegerCheck((((gconst68*r20*sj3))+(((-1.0)*r21*sj3*x16156))),-1);
if(!x16161.valid){
continue;
}
if( IKabs(((x16159.value)*(x16160.value)*((((cj0*x16157))+(((-1.0)*cj0*x16158)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16161.value)*((x16157+(((-1.0)*x16158))+(((-1.0)*cj3*gconst68*r21))+(((-1.0)*cj3*r20*x16156)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16159.value)*(x16160.value)*((((cj0*x16157))+(((-1.0)*cj0*x16158))))))+IKsqr(((x16161.value)*((x16157+(((-1.0)*x16158))+(((-1.0)*cj3*gconst68*r21))+(((-1.0)*cj3*r20*x16156))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16159.value)*(x16160.value)*((((cj0*x16157))+(((-1.0)*cj0*x16158))))), ((x16161.value)*((x16157+(((-1.0)*x16158))+(((-1.0)*cj3*gconst68*r21))+(((-1.0)*cj3*r20*x16156))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16162=IKsin(j4);
IkReal x16163=IKcos(j4);
IkReal x16164=(r10*sj3);
IkReal x16165=((1.0)*gconst67);
IkReal x16166=(cj1*cj2);
IkReal x16167=(sj1*sj2);
IkReal x16168=((1.0)*gconst68);
IkReal x16169=(r21*sj3);
IkReal x16170=((1.0)*sj0);
IkReal x16171=(cj3*gconst67);
IkReal x16172=((1.0)*r02);
IkReal x16173=(cj3*r21);
IkReal x16174=(r20*sj3);
IkReal x16175=(gconst68*x16163);
IkReal x16176=((1.0)*cj2*sj1);
IkReal x16177=(r11*x16163);
IkReal x16178=((1.0)*cj1*sj2);
IkReal x16179=(gconst67*x16162);
evalcond[0]=((((-1.0)*x16163*x16172))+(((-1.0)*x16170)));
evalcond[1]=((((-1.0)*r20*x16162*x16168))+((r21*x16179)));
evalcond[2]=(cj0+((r11*x16179))+(((-1.0)*r10*x16162*x16168)));
evalcond[3]=((((-1.0)*cj3*x16162*x16172))+(((-1.0)*cj0*x16167))+((cj0*x16166)));
evalcond[4]=((((-1.0)*cj0*x16176))+(((-1.0)*cj0*x16178))+(((-1.0)*sj3*x16162*x16172)));
evalcond[5]=(((x16174*x16175))+((r20*x16171))+x16167+(((-1.0)*x16163*x16165*x16169))+((gconst68*x16173))+(((-1.0)*x16166)));
evalcond[6]=((((-1.0)*x16163*x16165*x16173))+(((-1.0)*x16168*x16169))+((cj3*r20*x16175))+(((-1.0)*x16178))+(((-1.0)*x16176))+(((-1.0)*x16165*x16174)));
evalcond[7]=(((r10*x16171))+(((-1.0)*cj1*sj2*x16170))+(((-1.0)*cj2*sj1*x16170))+(((-1.0)*sj3*x16165*x16177))+((x16164*x16175))+((cj3*gconst68*r11)));
evalcond[8]=(((sj0*x16166))+(((-1.0)*x16167*x16170))+((cj3*r10*x16175))+(((-1.0)*x16164*x16165))+(((-1.0)*cj3*x16165*x16177))+(((-1.0)*r11*sj3*x16168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16182=IKPowWithIntegerCheck(r02,-1);
if(!x16182.valid){
continue;
}
IkReal x16180=x16182.value;
IkReal x16181=((1.0)*cj0);
CheckValue<IkReal> x16183=IKPowWithIntegerCheck(sj3,-1);
if(!x16183.valid){
continue;
}
if( IKabs((x16180*(x16183.value)*(((((-1.0)*cj1*sj2*x16181))+(((-1.0)*cj2*sj1*x16181)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x16180)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16180*(x16183.value)*(((((-1.0)*cj1*sj2*x16181))+(((-1.0)*cj2*sj1*x16181))))))+IKsqr(((-1.0)*sj0*x16180))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16180*(x16183.value)*(((((-1.0)*cj1*sj2*x16181))+(((-1.0)*cj2*sj1*x16181))))), ((-1.0)*sj0*x16180));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16184=IKsin(j4);
IkReal x16185=IKcos(j4);
IkReal x16186=(r10*sj3);
IkReal x16187=((1.0)*gconst67);
IkReal x16188=(cj1*cj2);
IkReal x16189=(sj1*sj2);
IkReal x16190=((1.0)*gconst68);
IkReal x16191=(r21*sj3);
IkReal x16192=((1.0)*sj0);
IkReal x16193=(cj3*gconst67);
IkReal x16194=((1.0)*r02);
IkReal x16195=(cj3*r21);
IkReal x16196=(r20*sj3);
IkReal x16197=(gconst68*x16185);
IkReal x16198=((1.0)*cj2*sj1);
IkReal x16199=(r11*x16185);
IkReal x16200=((1.0)*cj1*sj2);
IkReal x16201=(gconst67*x16184);
evalcond[0]=((((-1.0)*x16185*x16194))+(((-1.0)*x16192)));
evalcond[1]=(((r21*x16201))+(((-1.0)*r20*x16184*x16190)));
evalcond[2]=(cj0+((r11*x16201))+(((-1.0)*r10*x16184*x16190)));
evalcond[3]=((((-1.0)*cj0*x16189))+((cj0*x16188))+(((-1.0)*cj3*x16184*x16194)));
evalcond[4]=((((-1.0)*cj0*x16198))+(((-1.0)*cj0*x16200))+(((-1.0)*sj3*x16184*x16194)));
evalcond[5]=((((-1.0)*x16185*x16187*x16191))+((gconst68*x16195))+((x16196*x16197))+x16189+(((-1.0)*x16188))+((r20*x16193)));
evalcond[6]=((((-1.0)*x16200))+(((-1.0)*x16185*x16187*x16195))+(((-1.0)*x16187*x16196))+(((-1.0)*x16198))+((cj3*r20*x16197))+(((-1.0)*x16190*x16191)));
evalcond[7]=(((r10*x16193))+(((-1.0)*sj3*x16187*x16199))+((cj3*gconst68*r11))+(((-1.0)*cj1*sj2*x16192))+(((-1.0)*cj2*sj1*x16192))+((x16186*x16197)));
evalcond[8]=(((sj0*x16188))+(((-1.0)*x16186*x16187))+(((-1.0)*x16189*x16192))+(((-1.0)*r11*sj3*x16190))+((cj3*r10*x16197))+(((-1.0)*cj3*x16187*x16199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16203=IKPowWithIntegerCheck(r02,-1);
if(!x16203.valid){
continue;
}
IkReal x16202=x16203.value;
CheckValue<IkReal> x16204=IKPowWithIntegerCheck(cj3,-1);
if(!x16204.valid){
continue;
}
if( IKabs((x16202*(x16204.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x16202)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16202*(x16204.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x16202))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16202*(x16204.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x16202));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16205=IKsin(j4);
IkReal x16206=IKcos(j4);
IkReal x16207=(r10*sj3);
IkReal x16208=((1.0)*gconst67);
IkReal x16209=(cj1*cj2);
IkReal x16210=(sj1*sj2);
IkReal x16211=((1.0)*gconst68);
IkReal x16212=(r21*sj3);
IkReal x16213=((1.0)*sj0);
IkReal x16214=(cj3*gconst67);
IkReal x16215=((1.0)*r02);
IkReal x16216=(cj3*r21);
IkReal x16217=(r20*sj3);
IkReal x16218=(gconst68*x16206);
IkReal x16219=((1.0)*cj2*sj1);
IkReal x16220=(r11*x16206);
IkReal x16221=((1.0)*cj1*sj2);
IkReal x16222=(gconst67*x16205);
evalcond[0]=((((-1.0)*x16213))+(((-1.0)*x16206*x16215)));
evalcond[1]=((((-1.0)*r20*x16205*x16211))+((r21*x16222)));
evalcond[2]=(cj0+(((-1.0)*r10*x16205*x16211))+((r11*x16222)));
evalcond[3]=((((-1.0)*cj3*x16205*x16215))+(((-1.0)*cj0*x16210))+((cj0*x16209)));
evalcond[4]=((((-1.0)*cj0*x16219))+(((-1.0)*cj0*x16221))+(((-1.0)*sj3*x16205*x16215)));
evalcond[5]=(((gconst68*x16216))+x16210+((r20*x16214))+(((-1.0)*x16206*x16208*x16212))+((x16217*x16218))+(((-1.0)*x16209)));
evalcond[6]=(((cj3*r20*x16218))+(((-1.0)*x16206*x16208*x16216))+(((-1.0)*x16208*x16217))+(((-1.0)*x16219))+(((-1.0)*x16221))+(((-1.0)*x16211*x16212)));
evalcond[7]=((((-1.0)*cj1*sj2*x16213))+((x16207*x16218))+(((-1.0)*cj2*sj1*x16213))+(((-1.0)*sj3*x16208*x16220))+((cj3*gconst68*r11))+((r10*x16214)));
evalcond[8]=(((sj0*x16209))+(((-1.0)*x16207*x16208))+((cj3*r10*x16218))+(((-1.0)*x16210*x16213))+(((-1.0)*r11*sj3*x16211))+(((-1.0)*cj3*x16208*x16220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16223=((-1.0)*r10);
CheckValue<IkReal> x16224 = IKatan2WithCheck(IkReal(x16223),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16224.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x16224.value))));
IkReal gconst70=x16223;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x16225 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16225.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x16225.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16226=((-1.0)*r10);
IkReal x16227=((-1.0)*r11);
CheckValue<IkReal> x16229 = IKatan2WithCheck(IkReal(x16226),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16229.valid){
continue;
}
IkReal x16228=((1.0)*(x16229.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x16226);
rxp1_1=(px*r21);
rxp1_2=(px*x16227);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x16228)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x16228)));
IkReal gconst70=x16226;
IkReal gconst71=x16227;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16230=((-1.0)*r10);
IkReal x16231=((-1.0)*r11);
CheckValue<IkReal> x16233 = IKatan2WithCheck(IkReal(x16230),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16233.valid){
continue;
}
IkReal x16232=((1.0)*(x16233.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x16230);
rxp1_1=(px*r21);
rxp1_2=(px*x16231);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x16232)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x16232)));
IkReal gconst70=x16230;
IkReal gconst71=x16231;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x16234=((-1.0)*r10);
IkReal x16235=((-1.0)*r11);
CheckValue<IkReal> x16237 = IKatan2WithCheck(IkReal(x16234),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x16237.valid){
continue;
}
IkReal x16236=((1.0)*(x16237.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x16234);
rxp1_1=(px*r21);
rxp1_2=(px*x16235);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x16236)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x16236)));
IkReal gconst70=x16234;
IkReal gconst71=x16235;
IkReal x16238=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r10*r21*x16238))+(((-1.0)*r11*r20*x16238)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16239=((1.0)*r21);
IkReal x16240=(cj1*cj2);
IkReal x16241=((1.0)*sj1*sj2);
CheckValue<IkReal> x16242=IKPowWithIntegerCheck(cj3,-1);
if(!x16242.valid){
continue;
}
CheckValue<IkReal> x16243=IKPowWithIntegerCheck(r02,-1);
if(!x16243.valid){
continue;
}
CheckValue<IkReal> x16244=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x16239))+((gconst71*r20*sj3))),-1);
if(!x16244.valid){
continue;
}
if( IKabs(((x16242.value)*(x16243.value)*(((((-1.0)*cj0*x16241))+((cj0*x16240)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16244.value)*(((((-1.0)*cj3*gconst71*x16239))+x16240+(((-1.0)*x16241))+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16242.value)*(x16243.value)*(((((-1.0)*cj0*x16241))+((cj0*x16240))))))+IKsqr(((x16244.value)*(((((-1.0)*cj3*gconst71*x16239))+x16240+(((-1.0)*x16241))+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16242.value)*(x16243.value)*(((((-1.0)*cj0*x16241))+((cj0*x16240))))), ((x16244.value)*(((((-1.0)*cj3*gconst71*x16239))+x16240+(((-1.0)*x16241))+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16245=IKsin(j4);
IkReal x16246=IKcos(j4);
IkReal x16247=(cj1*cj2);
IkReal x16248=(gconst71*r20);
IkReal x16249=(cj3*gconst70);
IkReal x16250=(sj1*sj2);
IkReal x16251=(r21*sj3);
IkReal x16252=(gconst70*r11);
IkReal x16253=(gconst71*r10);
IkReal x16254=(cj3*gconst71);
IkReal x16255=((1.0)*gconst71);
IkReal x16256=((1.0)*sj0);
IkReal x16257=((1.0)*x16245);
IkReal x16258=((1.0)*x16246);
IkReal x16259=(cj3*x16246);
IkReal x16260=((1.0)*cj2*sj1);
IkReal x16261=(sj3*x16246);
IkReal x16262=((1.0)*cj1*sj2);
IkReal x16263=((1.0)*gconst70*sj3);
evalcond[0]=((((-1.0)*x16256))+(((-1.0)*r02*x16258)));
evalcond[1]=(((gconst70*r21*x16245))+(((-1.0)*x16248*x16257)));
evalcond[2]=(cj0+((x16245*x16252))+(((-1.0)*x16253*x16257)));
evalcond[3]=(((cj0*x16247))+(((-1.0)*cj0*x16250))+(((-1.0)*cj3*r02*x16257)));
evalcond[4]=((((-1.0)*r02*sj3*x16257))+(((-1.0)*cj0*x16260))+(((-1.0)*cj0*x16262)));
evalcond[5]=((((-1.0)*gconst70*x16251*x16258))+((r20*x16249))+((x16248*x16261))+x16250+((r21*x16254))+(((-1.0)*x16247)));
evalcond[6]=(((x16248*x16259))+(((-1.0)*r20*x16263))+(((-1.0)*x16251*x16255))+(((-1.0)*r21*x16249*x16258))+(((-1.0)*x16262))+(((-1.0)*x16260)));
evalcond[7]=(((x16253*x16261))+(((-1.0)*sj3*x16252*x16258))+(((-1.0)*cj2*sj1*x16256))+((r11*x16254))+((r10*x16249))+(((-1.0)*cj1*sj2*x16256)));
evalcond[8]=((((-1.0)*r10*x16263))+((x16253*x16259))+(((-1.0)*r11*sj3*x16255))+(((-1.0)*r11*x16249*x16258))+(((-1.0)*x16250*x16256))+((sj0*x16247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16266=IKPowWithIntegerCheck(r02,-1);
if(!x16266.valid){
continue;
}
IkReal x16264=x16266.value;
IkReal x16265=((1.0)*cj0);
CheckValue<IkReal> x16267=IKPowWithIntegerCheck(sj3,-1);
if(!x16267.valid){
continue;
}
if( IKabs((x16264*(x16267.value)*(((((-1.0)*cj2*sj1*x16265))+(((-1.0)*cj1*sj2*x16265)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x16264)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16264*(x16267.value)*(((((-1.0)*cj2*sj1*x16265))+(((-1.0)*cj1*sj2*x16265))))))+IKsqr(((-1.0)*sj0*x16264))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16264*(x16267.value)*(((((-1.0)*cj2*sj1*x16265))+(((-1.0)*cj1*sj2*x16265))))), ((-1.0)*sj0*x16264));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16268=IKsin(j4);
IkReal x16269=IKcos(j4);
IkReal x16270=(cj1*cj2);
IkReal x16271=(gconst71*r20);
IkReal x16272=(cj3*gconst70);
IkReal x16273=(sj1*sj2);
IkReal x16274=(r21*sj3);
IkReal x16275=(gconst70*r11);
IkReal x16276=(gconst71*r10);
IkReal x16277=(cj3*gconst71);
IkReal x16278=((1.0)*gconst71);
IkReal x16279=((1.0)*sj0);
IkReal x16280=((1.0)*x16268);
IkReal x16281=((1.0)*x16269);
IkReal x16282=(cj3*x16269);
IkReal x16283=((1.0)*cj2*sj1);
IkReal x16284=(sj3*x16269);
IkReal x16285=((1.0)*cj1*sj2);
IkReal x16286=((1.0)*gconst70*sj3);
evalcond[0]=((((-1.0)*x16279))+(((-1.0)*r02*x16281)));
evalcond[1]=(((gconst70*r21*x16268))+(((-1.0)*x16271*x16280)));
evalcond[2]=(cj0+((x16268*x16275))+(((-1.0)*x16276*x16280)));
evalcond[3]=((((-1.0)*cj3*r02*x16280))+(((-1.0)*cj0*x16273))+((cj0*x16270)));
evalcond[4]=((((-1.0)*r02*sj3*x16280))+(((-1.0)*cj0*x16285))+(((-1.0)*cj0*x16283)));
evalcond[5]=((((-1.0)*gconst70*x16274*x16281))+x16273+((x16271*x16284))+(((-1.0)*x16270))+((r21*x16277))+((r20*x16272)));
evalcond[6]=(((x16271*x16282))+(((-1.0)*x16274*x16278))+(((-1.0)*r20*x16286))+(((-1.0)*r21*x16272*x16281))+(((-1.0)*x16283))+(((-1.0)*x16285)));
evalcond[7]=(((r10*x16272))+((x16276*x16284))+(((-1.0)*cj2*sj1*x16279))+(((-1.0)*cj1*sj2*x16279))+((r11*x16277))+(((-1.0)*sj3*x16275*x16281)));
evalcond[8]=(((x16276*x16282))+((sj0*x16270))+(((-1.0)*r11*sj3*x16278))+(((-1.0)*x16273*x16279))+(((-1.0)*r11*x16272*x16281))+(((-1.0)*r10*x16286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16288=IKPowWithIntegerCheck(r02,-1);
if(!x16288.valid){
continue;
}
IkReal x16287=x16288.value;
CheckValue<IkReal> x16289=IKPowWithIntegerCheck(cj3,-1);
if(!x16289.valid){
continue;
}
if( IKabs((x16287*(x16289.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x16287)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16287*(x16289.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x16287))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16287*(x16289.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x16287));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16290=IKsin(j4);
IkReal x16291=IKcos(j4);
IkReal x16292=(cj1*cj2);
IkReal x16293=(gconst71*r20);
IkReal x16294=(cj3*gconst70);
IkReal x16295=(sj1*sj2);
IkReal x16296=(r21*sj3);
IkReal x16297=(gconst70*r11);
IkReal x16298=(gconst71*r10);
IkReal x16299=(cj3*gconst71);
IkReal x16300=((1.0)*gconst71);
IkReal x16301=((1.0)*sj0);
IkReal x16302=((1.0)*x16290);
IkReal x16303=((1.0)*x16291);
IkReal x16304=(cj3*x16291);
IkReal x16305=((1.0)*cj2*sj1);
IkReal x16306=(sj3*x16291);
IkReal x16307=((1.0)*cj1*sj2);
IkReal x16308=((1.0)*gconst70*sj3);
evalcond[0]=((((-1.0)*r02*x16303))+(((-1.0)*x16301)));
evalcond[1]=((((-1.0)*x16293*x16302))+((gconst70*r21*x16290)));
evalcond[2]=(cj0+((x16290*x16297))+(((-1.0)*x16298*x16302)));
evalcond[3]=((((-1.0)*cj0*x16295))+((cj0*x16292))+(((-1.0)*cj3*r02*x16302)));
evalcond[4]=((((-1.0)*r02*sj3*x16302))+(((-1.0)*cj0*x16307))+(((-1.0)*cj0*x16305)));
evalcond[5]=((((-1.0)*x16292))+((r20*x16294))+x16295+(((-1.0)*gconst70*x16296*x16303))+((x16293*x16306))+((r21*x16299)));
evalcond[6]=((((-1.0)*r20*x16308))+(((-1.0)*r21*x16294*x16303))+(((-1.0)*x16305))+(((-1.0)*x16307))+((x16293*x16304))+(((-1.0)*x16296*x16300)));
evalcond[7]=((((-1.0)*sj3*x16297*x16303))+((x16298*x16306))+(((-1.0)*cj2*sj1*x16301))+((r11*x16299))+((r10*x16294))+(((-1.0)*cj1*sj2*x16301)));
evalcond[8]=(((x16298*x16304))+(((-1.0)*x16295*x16301))+(((-1.0)*r11*x16294*x16303))+(((-1.0)*r10*x16308))+((sj0*x16292))+(((-1.0)*r11*sj3*x16300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16309=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16309);
rxp1_1=(px*r21);
rxp1_2=(r11*x16309);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16310=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16310);
rxp1_1=(px*r21);
rxp1_2=(r11*x16310);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16311=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16311);
rxp1_1=(px*r21);
rxp1_2=(r11*x16311);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16314=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x16314.valid){
continue;
}
IkReal x16312=x16314.value;
IkReal x16313=(sj0*x16312);
cj4array[0]=((((-1.0)*cj1*cj2*x16313))+((sj1*sj2*x16313)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16315=IKsin(j4);
IkReal x16316=IKcos(j4);
IkReal x16317=(r21*sj5);
IkReal x16318=(cj5*r20);
IkReal x16319=((1.0)*x16315);
IkReal x16320=((1.0)*x16316);
evalcond[0]=((-1.0)*r02*x16315);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x16320)));
evalcond[2]=((((-1.0)*x16318*x16319))+((x16315*x16317)));
evalcond[3]=(((r11*sj5*x16315))+(((-1.0)*cj5*r10*x16319)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*x16317*x16320))+(((-1.0)*cj1*sj2))+((x16316*x16318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16322=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x16322.valid){
continue;
}
IkReal x16321=x16322.value;
cj4array[0]=(((cj2*sj1*x16321))+((cj1*sj2*x16321)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16323=IKsin(j4);
IkReal x16324=IKcos(j4);
IkReal x16325=(r11*sj5);
IkReal x16326=((1.0)*sj0);
IkReal x16327=((1.0)*x16324);
IkReal x16328=((1.0)*cj5*x16323);
evalcond[0]=((-1.0)*r02*x16323);
evalcond[1]=((((-1.0)*x16326))+(((-1.0)*r02*x16327)));
evalcond[2]=(((r21*sj5*x16323))+(((-1.0)*r20*x16328)));
evalcond[3]=(((x16323*x16325))+(((-1.0)*r10*x16328)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x16326))+((cj5*r10*x16324))+(((-1.0)*x16325*x16327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16329=IKPowWithIntegerCheck(r02,-1);
if(!x16329.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x16329.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16330=IKsin(j4);
IkReal x16331=IKcos(j4);
IkReal x16332=((1.0)*sj1);
IkReal x16333=(cj5*x16331);
IkReal x16334=(sj5*x16330);
IkReal x16335=((1.0)*sj5*x16331);
IkReal x16336=((1.0)*cj5*x16330);
evalcond[0]=((-1.0)*r02*x16330);
evalcond[1]=((((-1.0)*r20*x16336))+((r21*x16334)));
evalcond[2]=((((-1.0)*r10*x16336))+((r11*x16334)));
evalcond[3]=(((r20*x16333))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x16335))+(((-1.0)*cj2*x16332)));
evalcond[4]=(((r10*x16333))+((cj1*cj2*sj0))+(((-1.0)*r11*x16335))+(((-1.0)*sj0*sj2*x16332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16337=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16337);
rxp1_1=(px*r21);
rxp1_2=(r11*x16337);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16338=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16338);
rxp1_1=(px*r21);
rxp1_2=(r11*x16338);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16339=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16339);
rxp1_1=(px*r21);
rxp1_2=(r11*x16339);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16342=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x16342.valid){
continue;
}
IkReal x16340=x16342.value;
IkReal x16341=(sj0*x16340);
cj4array[0]=((((-1.0)*cj1*cj2*x16341))+((sj1*sj2*x16341)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16343=IKsin(j4);
IkReal x16344=IKcos(j4);
IkReal x16345=(r21*sj5);
IkReal x16346=((1.0)*cj5*r20);
evalcond[0]=(r02*x16343);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x16344)));
evalcond[2]=(((x16343*x16345))+(((-1.0)*x16343*x16346)));
evalcond[3]=(((r11*sj5*x16343))+(((-1.0)*cj5*r10*x16343)));
evalcond[4]=(((x16344*x16345))+(((-1.0)*cj2*sj1))+(((-1.0)*x16344*x16346))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16348=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x16348.valid){
continue;
}
IkReal x16347=x16348.value;
cj4array[0]=(((cj1*sj2*x16347))+((cj2*sj1*x16347)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16349=IKsin(j4);
IkReal x16350=IKcos(j4);
IkReal x16351=((1.0)*sj0);
IkReal x16352=((1.0)*cj5);
IkReal x16353=(sj5*x16349);
evalcond[0]=(r02*x16349);
evalcond[1]=((((-1.0)*x16351))+(((-1.0)*r02*x16350)));
evalcond[2]=((((-1.0)*r20*x16349*x16352))+((r21*x16353)));
evalcond[3]=((((-1.0)*r10*x16349*x16352))+((r11*x16353)));
evalcond[4]=(((cj1*cj2*sj0))+((r11*sj5*x16350))+(((-1.0)*sj1*sj2*x16351))+(((-1.0)*r10*x16350*x16352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16354=IKPowWithIntegerCheck(r02,-1);
if(!x16354.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x16354.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16355=IKsin(j4);
IkReal x16356=IKcos(j4);
IkReal x16357=((1.0)*sj1);
IkReal x16358=(r21*sj5);
IkReal x16359=(r11*sj5);
IkReal x16360=((1.0)*cj5*x16356);
IkReal x16361=((1.0)*cj5*x16355);
evalcond[0]=(r02*x16355);
evalcond[1]=(((x16355*x16358))+(((-1.0)*r20*x16361)));
evalcond[2]=((((-1.0)*r10*x16361))+((x16355*x16359)));
evalcond[3]=(((x16356*x16358))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*x16360))+(((-1.0)*cj2*x16357)));
evalcond[4]=(((x16356*x16359))+((cj1*cj2*sj0))+(((-1.0)*r10*x16360))+(((-1.0)*sj0*sj2*x16357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16363=IKPowWithIntegerCheck(r02,-1);
if(!x16363.valid){
continue;
}
IkReal x16362=x16363.value;
CheckValue<IkReal> x16364=IKPowWithIntegerCheck(cj3,-1);
if(!x16364.valid){
continue;
}
if( IKabs((x16362*(x16364.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x16362)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16362*(x16364.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x16362))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16362*(x16364.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x16362));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16365=IKsin(j4);
IkReal x16366=IKcos(j4);
IkReal x16367=((1.0)*sj5);
IkReal x16368=(cj1*cj2);
IkReal x16369=(cj5*r10);
IkReal x16370=(sj1*sj2);
IkReal x16371=(r20*sj3);
IkReal x16372=(cj3*cj5);
IkReal x16373=(cj3*sj5);
IkReal x16374=(cj5*r20);
IkReal x16375=((1.0)*sj0);
IkReal x16376=(cj3*x16366);
IkReal x16377=((1.0)*x16365);
IkReal x16378=(sj5*x16365);
IkReal x16379=((1.0)*cj2*sj1);
IkReal x16380=((1.0)*cj1*sj2);
IkReal x16381=(sj3*x16366);
IkReal x16382=((1.0)*cj5*sj3);
evalcond[0]=((((-1.0)*x16375))+(((-1.0)*r02*x16366)));
evalcond[1]=(((r21*x16378))+(((-1.0)*x16374*x16377)));
evalcond[2]=(cj0+(((-1.0)*x16369*x16377))+((r11*x16378)));
evalcond[3]=(((cj0*x16368))+(((-1.0)*cj0*x16370))+(((-1.0)*cj3*r02*x16377)));
evalcond[4]=((((-1.0)*r02*sj3*x16377))+(((-1.0)*cj0*x16380))+(((-1.0)*cj0*x16379)));
evalcond[5]=((((-1.0)*r21*x16367*x16381))+(((-1.0)*x16368))+((cj5*x16366*x16371))+x16370+((r21*x16372))+((r20*x16373)));
evalcond[6]=((((-1.0)*r21*x16382))+(((-1.0)*r21*x16367*x16376))+(((-1.0)*x16367*x16371))+(((-1.0)*x16380))+(((-1.0)*x16379))+((r20*x16366*x16372)));
evalcond[7]=((((-1.0)*cj1*sj2*x16375))+(((-1.0)*r11*x16367*x16381))+(((-1.0)*cj2*sj1*x16375))+((r10*x16373))+((r11*x16372))+((x16369*x16381)));
evalcond[8]=((((-1.0)*x16370*x16375))+((sj0*x16368))+(((-1.0)*r11*x16367*x16376))+(((-1.0)*r10*sj3*x16367))+((x16369*x16376))+(((-1.0)*r11*x16382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16383=((1.0)*r21);
CheckValue<IkReal> x16384=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x16384.valid){
continue;
}
CheckValue<IkReal> x16385=IKPowWithIntegerCheck((((cj5*r20*sj3))+(((-1.0)*sj3*sj5*x16383))),-1);
if(!x16385.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x16384.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16385.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj3*cj5*x16383))+((cj1*cj2))+(((-1.0)*cj3*r20*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x16384.value)))+IKsqr(((x16385.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj3*cj5*x16383))+((cj1*cj2))+(((-1.0)*cj3*r20*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x16384.value)), ((x16385.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj3*cj5*x16383))+((cj1*cj2))+(((-1.0)*cj3*r20*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16386=IKsin(j4);
IkReal x16387=IKcos(j4);
IkReal x16388=((1.0)*sj5);
IkReal x16389=(cj1*cj2);
IkReal x16390=(cj5*r10);
IkReal x16391=(sj1*sj2);
IkReal x16392=(r20*sj3);
IkReal x16393=(cj3*cj5);
IkReal x16394=(cj3*sj5);
IkReal x16395=(cj5*r20);
IkReal x16396=((1.0)*sj0);
IkReal x16397=(cj3*x16387);
IkReal x16398=((1.0)*x16386);
IkReal x16399=(sj5*x16386);
IkReal x16400=((1.0)*cj2*sj1);
IkReal x16401=((1.0)*cj1*sj2);
IkReal x16402=(sj3*x16387);
IkReal x16403=((1.0)*cj5*sj3);
evalcond[0]=((((-1.0)*r02*x16387))+(((-1.0)*x16396)));
evalcond[1]=((((-1.0)*x16395*x16398))+((r21*x16399)));
evalcond[2]=(cj0+((r11*x16399))+(((-1.0)*x16390*x16398)));
evalcond[3]=(((cj0*x16389))+(((-1.0)*cj0*x16391))+(((-1.0)*cj3*r02*x16398)));
evalcond[4]=((((-1.0)*cj0*x16401))+(((-1.0)*cj0*x16400))+(((-1.0)*r02*sj3*x16398)));
evalcond[5]=(((cj5*x16387*x16392))+(((-1.0)*x16389))+x16391+((r21*x16393))+(((-1.0)*r21*x16388*x16402))+((r20*x16394)));
evalcond[6]=(((r20*x16387*x16393))+(((-1.0)*x16401))+(((-1.0)*x16400))+(((-1.0)*r21*x16388*x16397))+(((-1.0)*r21*x16403))+(((-1.0)*x16388*x16392)));
evalcond[7]=((((-1.0)*cj1*sj2*x16396))+(((-1.0)*r11*x16388*x16402))+((r11*x16393))+(((-1.0)*cj2*sj1*x16396))+((r10*x16394))+((x16390*x16402)));
evalcond[8]=(((sj0*x16389))+(((-1.0)*r11*x16403))+(((-1.0)*x16391*x16396))+(((-1.0)*r10*sj3*x16388))+(((-1.0)*r11*x16388*x16397))+((x16390*x16397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16404=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x16404.valid){
continue;
}
CheckValue<IkReal> x16405=IKPowWithIntegerCheck(r02,-1);
if(!x16405.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x16404.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x16405.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x16404.value)))+IKsqr(((-1.0)*sj0*(x16405.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x16404.value)), ((-1.0)*sj0*(x16405.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16406=IKsin(j4);
IkReal x16407=IKcos(j4);
IkReal x16408=((1.0)*sj5);
IkReal x16409=(cj1*cj2);
IkReal x16410=(cj5*r10);
IkReal x16411=(sj1*sj2);
IkReal x16412=(r20*sj3);
IkReal x16413=(cj3*cj5);
IkReal x16414=(cj3*sj5);
IkReal x16415=(cj5*r20);
IkReal x16416=((1.0)*sj0);
IkReal x16417=(cj3*x16407);
IkReal x16418=((1.0)*x16406);
IkReal x16419=(sj5*x16406);
IkReal x16420=((1.0)*cj2*sj1);
IkReal x16421=((1.0)*cj1*sj2);
IkReal x16422=(sj3*x16407);
IkReal x16423=((1.0)*cj5*sj3);
evalcond[0]=((((-1.0)*x16416))+(((-1.0)*r02*x16407)));
evalcond[1]=((((-1.0)*x16415*x16418))+((r21*x16419)));
evalcond[2]=(cj0+((r11*x16419))+(((-1.0)*x16410*x16418)));
evalcond[3]=(((cj0*x16409))+(((-1.0)*cj3*r02*x16418))+(((-1.0)*cj0*x16411)));
evalcond[4]=((((-1.0)*cj0*x16420))+(((-1.0)*cj0*x16421))+(((-1.0)*r02*sj3*x16418)));
evalcond[5]=((((-1.0)*r21*x16408*x16422))+x16411+((r21*x16413))+((cj5*x16407*x16412))+(((-1.0)*x16409))+((r20*x16414)));
evalcond[6]=((((-1.0)*x16408*x16412))+(((-1.0)*r21*x16423))+(((-1.0)*x16421))+(((-1.0)*x16420))+(((-1.0)*r21*x16408*x16417))+((r20*x16407*x16413)));
evalcond[7]=(((x16410*x16422))+((r11*x16413))+(((-1.0)*cj1*sj2*x16416))+((r10*x16414))+(((-1.0)*r11*x16408*x16422))+(((-1.0)*cj2*sj1*x16416)));
evalcond[8]=(((sj0*x16409))+(((-1.0)*x16411*x16416))+(((-1.0)*r11*x16423))+((x16410*x16417))+(((-1.0)*r11*x16408*x16417))+(((-1.0)*r10*sj3*x16408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16424=((1.0)*sj0);
IkReal x16425=((1.0)*cj0);
CheckValue<IkReal> x16426 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x16424))+(((-1.0)*r02*x16425)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x16425))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x16424)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16426.valid){
continue;
}
CheckValue<IkReal> x16427=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x16427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16426.value)+(((1.5707963267949)*(x16427.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16428=IKsin(j4);
IkReal x16429=IKcos(j4);
IkReal x16430=((1.0)*r22);
IkReal x16431=(cj3*r00);
IkReal x16432=(cj1*cj2);
IkReal x16433=(sj1*sj2);
IkReal x16434=(r20*sj3);
IkReal x16435=(r00*sj3);
IkReal x16436=((1.0)*sj0);
IkReal x16437=(cj3*cj5);
IkReal x16438=((1.0)*sj5);
IkReal x16439=(cj3*r10);
IkReal x16440=(cj2*sj1);
IkReal x16441=(cj1*sj2);
IkReal x16442=(r10*sj3);
IkReal x16443=(r11*sj3);
IkReal x16444=((1.0)*cj5);
IkReal x16445=(cj3*r20);
IkReal x16446=(r01*sj3);
IkReal x16447=((1.0)*cj0);
IkReal x16448=((1.0)*x16428);
IkReal x16449=(cj5*x16429);
IkReal x16450=(sj5*x16428);
IkReal x16451=((1.0)*x16429);
IkReal x16452=(r21*x16429);
IkReal x16453=(cj3*x16429);
evalcond[0]=((((-1.0)*r20*x16428*x16444))+(((-1.0)*x16429*x16430))+((r21*x16450)));
evalcond[1]=((((-1.0)*r10*x16428*x16444))+cj0+(((-1.0)*r12*x16451))+((r11*x16450)));
evalcond[2]=(((r01*x16450))+(((-1.0)*x16436))+(((-1.0)*r00*x16428*x16444))+(((-1.0)*r02*x16451)));
evalcond[3]=((((-1.0)*sj3*x16428*x16430))+x16433+(((-1.0)*sj3*x16438*x16452))+((r21*x16437))+((x16434*x16449))+(((-1.0)*x16432))+((sj5*x16445)));
evalcond[4]=(((r20*x16429*x16437))+(((-1.0)*x16434*x16438))+(((-1.0)*cj3*x16428*x16430))+(((-1.0)*x16440))+(((-1.0)*x16441))+(((-1.0)*cj3*x16438*x16452))+(((-1.0)*r21*sj3*x16444)));
evalcond[5]=(((x16435*x16449))+((sj5*x16431))+(((-1.0)*x16429*x16438*x16446))+(((-1.0)*r02*sj3*x16448))+(((-1.0)*x16441*x16447))+((r01*x16437))+(((-1.0)*x16440*x16447)));
evalcond[6]=(((sj5*x16439))+(((-1.0)*r12*sj3*x16448))+(((-1.0)*x16436*x16441))+(((-1.0)*x16436*x16440))+((r11*x16437))+((x16442*x16449))+(((-1.0)*x16429*x16438*x16443)));
evalcond[7]=((((-1.0)*x16433*x16447))+((x16431*x16449))+((cj0*x16432))+(((-1.0)*x16444*x16446))+(((-1.0)*x16435*x16438))+(((-1.0)*r01*x16438*x16453))+(((-1.0)*cj3*r02*x16448)));
evalcond[8]=(((sj0*x16432))+(((-1.0)*x16433*x16436))+(((-1.0)*cj3*r12*x16448))+(((-1.0)*x16438*x16442))+(((-1.0)*x16443*x16444))+((r10*x16429*x16437))+(((-1.0)*r11*x16438*x16453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16454=((1.0)*cj5);
CheckValue<IkReal> x16455=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x16454)))),-1);
if(!x16455.valid){
continue;
}
CheckValue<IkReal> x16456 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x16454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16455.value)))+(x16456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16457=IKsin(j4);
IkReal x16458=IKcos(j4);
IkReal x16459=((1.0)*r22);
IkReal x16460=(cj3*r00);
IkReal x16461=(cj1*cj2);
IkReal x16462=(sj1*sj2);
IkReal x16463=(r20*sj3);
IkReal x16464=(r00*sj3);
IkReal x16465=((1.0)*sj0);
IkReal x16466=(cj3*cj5);
IkReal x16467=((1.0)*sj5);
IkReal x16468=(cj3*r10);
IkReal x16469=(cj2*sj1);
IkReal x16470=(cj1*sj2);
IkReal x16471=(r10*sj3);
IkReal x16472=(r11*sj3);
IkReal x16473=((1.0)*cj5);
IkReal x16474=(cj3*r20);
IkReal x16475=(r01*sj3);
IkReal x16476=((1.0)*cj0);
IkReal x16477=((1.0)*x16457);
IkReal x16478=(cj5*x16458);
IkReal x16479=(sj5*x16457);
IkReal x16480=((1.0)*x16458);
IkReal x16481=(r21*x16458);
IkReal x16482=(cj3*x16458);
evalcond[0]=((((-1.0)*r20*x16457*x16473))+(((-1.0)*x16458*x16459))+((r21*x16479)));
evalcond[1]=((((-1.0)*r10*x16457*x16473))+cj0+(((-1.0)*r12*x16480))+((r11*x16479)));
evalcond[2]=((((-1.0)*r00*x16457*x16473))+(((-1.0)*r02*x16480))+((r01*x16479))+(((-1.0)*x16465)));
evalcond[3]=(((sj5*x16474))+x16462+(((-1.0)*sj3*x16457*x16459))+(((-1.0)*x16461))+((x16463*x16478))+(((-1.0)*sj3*x16467*x16481))+((r21*x16466)));
evalcond[4]=((((-1.0)*r21*sj3*x16473))+(((-1.0)*cj3*x16467*x16481))+((r20*x16458*x16466))+(((-1.0)*x16470))+(((-1.0)*x16463*x16467))+(((-1.0)*x16469))+(((-1.0)*cj3*x16457*x16459)));
evalcond[5]=((((-1.0)*x16470*x16476))+(((-1.0)*x16469*x16476))+((sj5*x16460))+(((-1.0)*x16458*x16467*x16475))+(((-1.0)*r02*sj3*x16477))+((x16464*x16478))+((r01*x16466)));
evalcond[6]=(((sj5*x16468))+(((-1.0)*x16458*x16467*x16472))+(((-1.0)*r12*sj3*x16477))+(((-1.0)*x16465*x16470))+(((-1.0)*x16465*x16469))+((x16471*x16478))+((r11*x16466)));
evalcond[7]=((((-1.0)*x16473*x16475))+(((-1.0)*x16464*x16467))+(((-1.0)*cj3*r02*x16477))+((x16460*x16478))+(((-1.0)*r01*x16467*x16482))+(((-1.0)*x16462*x16476))+((cj0*x16461)));
evalcond[8]=((((-1.0)*x16467*x16471))+((sj0*x16461))+(((-1.0)*x16472*x16473))+(((-1.0)*x16462*x16465))+((r10*x16458*x16466))+(((-1.0)*r11*x16467*x16482))+(((-1.0)*cj3*r12*x16477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16483=((1.0)*cj5);
CheckValue<IkReal> x16484=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x16483))+(((-1.0)*r00*sj5)))),-1);
if(!x16484.valid){
continue;
}
CheckValue<IkReal> x16485 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x16483)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16484.value)))+(x16485.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16486=IKsin(j4);
IkReal x16487=IKcos(j4);
IkReal x16488=((1.0)*r22);
IkReal x16489=(cj3*r00);
IkReal x16490=(cj1*cj2);
IkReal x16491=(sj1*sj2);
IkReal x16492=(r20*sj3);
IkReal x16493=(r00*sj3);
IkReal x16494=((1.0)*sj0);
IkReal x16495=(cj3*cj5);
IkReal x16496=((1.0)*sj5);
IkReal x16497=(cj3*r10);
IkReal x16498=(cj2*sj1);
IkReal x16499=(cj1*sj2);
IkReal x16500=(r10*sj3);
IkReal x16501=(r11*sj3);
IkReal x16502=((1.0)*cj5);
IkReal x16503=(cj3*r20);
IkReal x16504=(r01*sj3);
IkReal x16505=((1.0)*cj0);
IkReal x16506=((1.0)*x16486);
IkReal x16507=(cj5*x16487);
IkReal x16508=(sj5*x16486);
IkReal x16509=((1.0)*x16487);
IkReal x16510=(r21*x16487);
IkReal x16511=(cj3*x16487);
evalcond[0]=((((-1.0)*x16487*x16488))+(((-1.0)*r20*x16486*x16502))+((r21*x16508)));
evalcond[1]=((((-1.0)*r12*x16509))+cj0+(((-1.0)*r10*x16486*x16502))+((r11*x16508)));
evalcond[2]=((((-1.0)*r02*x16509))+((r01*x16508))+(((-1.0)*r00*x16486*x16502))+(((-1.0)*x16494)));
evalcond[3]=((((-1.0)*sj3*x16496*x16510))+(((-1.0)*sj3*x16486*x16488))+((x16492*x16507))+((sj5*x16503))+x16491+((r21*x16495))+(((-1.0)*x16490)));
evalcond[4]=((((-1.0)*r21*sj3*x16502))+(((-1.0)*cj3*x16496*x16510))+(((-1.0)*x16492*x16496))+((r20*x16487*x16495))+(((-1.0)*x16499))+(((-1.0)*x16498))+(((-1.0)*cj3*x16486*x16488)));
evalcond[5]=(((sj5*x16489))+(((-1.0)*x16487*x16496*x16504))+(((-1.0)*r02*sj3*x16506))+((x16493*x16507))+(((-1.0)*x16498*x16505))+(((-1.0)*x16499*x16505))+((r01*x16495)));
evalcond[6]=(((sj5*x16497))+(((-1.0)*x16487*x16496*x16501))+((r11*x16495))+(((-1.0)*r12*sj3*x16506))+(((-1.0)*x16494*x16498))+(((-1.0)*x16494*x16499))+((x16500*x16507)));
evalcond[7]=((((-1.0)*x16502*x16504))+(((-1.0)*x16491*x16505))+(((-1.0)*x16493*x16496))+(((-1.0)*cj3*r02*x16506))+((cj0*x16490))+((x16489*x16507))+(((-1.0)*r01*x16496*x16511)));
evalcond[8]=((((-1.0)*cj3*r12*x16506))+(((-1.0)*r11*x16496*x16511))+(((-1.0)*x16496*x16500))+((r10*x16487*x16495))+((sj0*x16490))+(((-1.0)*x16501*x16502))+(((-1.0)*x16491*x16494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16512=r21*r21;
IkReal x16513=cj5*cj5;
IkReal x16514=r20*r20;
IkReal x16515=(cj1*sj2);
IkReal x16516=((1.0)*r22);
IkReal x16517=(cj5*r20);
IkReal x16518=(r21*sj5);
IkReal x16519=((1.0)*sj3);
IkReal x16520=(cj5*sj5);
IkReal x16521=(cj2*sj1);
IkReal x16522=(r20*r21);
IkReal x16523=(cj3*x16513);
CheckValue<IkReal> x16524=IKPowWithIntegerCheck(IKsign((((cj3*x16512))+((cj3*(r22*r22)))+(((-2.0)*cj3*x16517*x16518))+((x16514*x16523))+(((-1.0)*x16512*x16523)))),-1);
if(!x16524.valid){
continue;
}
CheckValue<IkReal> x16525 = IKatan2WithCheck(IkReal(((((-1.0)*x16515*x16516))+(((-1.0)*x16516*x16521))+(((-1.0)*cj5*r21*sj3*x16516))+(((-1.0)*r20*sj3*sj5*x16516)))),IkReal(((((-1.0)*x16512*x16519*x16520))+(((2.0)*sj3*x16513*x16522))+((x16517*x16521))+(((-1.0)*x16519*x16522))+(((-1.0)*x16518*x16521))+(((-1.0)*x16515*x16518))+((x16515*x16517))+((sj3*x16514*x16520)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16524.value)))+(x16525.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x16526=IKsin(j4);
IkReal x16527=IKcos(j4);
IkReal x16528=(cj5*r21);
IkReal x16529=(r21*sj5);
IkReal x16530=(r20*sj5);
IkReal x16531=((1.0)*sj3);
IkReal x16532=((1.0)*cj1);
IkReal x16533=(cj5*r20);
IkReal x16534=((1.0)*x16527);
IkReal x16535=((1.0)*x16526);
evalcond[0]=((((-1.0)*r22*x16534))+((x16526*x16529))+(((-1.0)*x16533*x16535)));
evalcond[1]=(((cj3*x16528))+((cj3*x16530))+((sj1*sj2))+((sj3*x16527*x16533))+(((-1.0)*cj2*x16532))+(((-1.0)*r22*x16526*x16531))+(((-1.0)*x16527*x16529*x16531)));
evalcond[2]=((((-1.0)*cj3*r22*x16535))+(((-1.0)*cj3*x16529*x16534))+(((-1.0)*cj2*sj1))+((cj3*x16527*x16533))+(((-1.0)*x16530*x16531))+(((-1.0)*sj2*x16532))+(((-1.0)*x16528*x16531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16536=(cj5*sj4);
IkReal x16537=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x16537))+(((-1.0)*r00*x16536)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x16536))+(((-1.0)*r11*x16537))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x16537))+(((-1.0)*r00*x16536))))+IKsqr((((r10*x16536))+(((-1.0)*r11*x16537))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x16537))+(((-1.0)*r00*x16536))), (((r10*x16536))+(((-1.0)*r11*x16537))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16538=IKsin(j0);
IkReal x16539=IKcos(j0);
IkReal x16540=((0.447)*cj2);
IkReal x16541=(r00*sj5);
IkReal x16542=(cj4*sj3);
IkReal x16543=(cj5*r00);
IkReal x16544=((1.0)*sj2);
IkReal x16545=(r11*sj5);
IkReal x16546=(cj3*r01);
IkReal x16547=((1.0)*sj5);
IkReal x16548=((1.0)*sj3);
IkReal x16549=(r02*sj4);
IkReal x16550=(cj5*r10);
IkReal x16551=(cj3*cj4);
IkReal x16552=(cj5*r11);
IkReal x16553=(cj5*r01);
IkReal x16554=((1.0)*cj2);
IkReal x16555=((1.0)*cj3);
IkReal x16556=(r12*sj4);
IkReal x16557=(r10*sj5);
IkReal x16558=((0.447)*sj2);
IkReal x16559=((1.0)*sj4);
IkReal x16560=((1.0)*cj4);
IkReal x16561=(sj1*x16538);
IkReal x16562=(cj1*x16539);
IkReal x16563=(cj1*x16538);
IkReal x16564=(sj1*x16539);
evalcond[0]=(x16539+(((-1.0)*x16550*x16559))+(((-1.0)*r12*x16560))+((sj4*x16545)));
evalcond[1]=((((-1.0)*r02*x16560))+(((-1.0)*x16543*x16559))+((r01*sj4*sj5))+(((-1.0)*x16538)));
evalcond[2]=((((-0.452)*x16564))+(((-0.1134)*x16541))+(((-0.1036)*x16538))+(((-1.0)*px))+(((-1.0)*x16558*x16562))+(((-1.0)*x16540*x16564))+(((-0.1134)*x16553)));
evalcond[3]=((((-0.452)*x16561))+(((-1.0)*py))+(((-1.0)*x16558*x16563))+(((-1.0)*x16540*x16561))+(((0.1036)*x16539))+(((-0.1134)*x16557))+(((-0.1134)*x16552)));
evalcond[4]=(((x16542*x16543))+(((-1.0)*r01*x16542*x16547))+((cj3*x16541))+(((-1.0)*x16548*x16549))+(((-1.0)*x16544*x16562))+((cj5*x16546))+(((-1.0)*x16554*x16564)));
evalcond[5]=(((cj3*x16557))+((cj3*x16552))+((x16542*x16550))+(((-1.0)*x16548*x16556))+(((-1.0)*x16544*x16563))+(((-1.0)*x16542*x16545))+(((-1.0)*x16554*x16561)));
evalcond[6]=((((-1.0)*x16541*x16548))+(((-1.0)*x16549*x16555))+(((-1.0)*x16548*x16553))+(((-1.0)*cj4*x16546*x16547))+((x16543*x16551))+(((-1.0)*x16544*x16564))+((cj2*x16562)));
evalcond[7]=((((-1.0)*r10*sj3*x16547))+(((-1.0)*x16545*x16551))+(((-1.0)*x16548*x16552))+(((-1.0)*x16544*x16561))+((cj2*x16563))+((x16550*x16551))+(((-1.0)*x16555*x16556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16565=cj5*cj5;
IkReal x16566=r21*r21;
IkReal x16567=r20*r20;
IkReal x16568=(r20*r21);
IkReal x16569=(sj1*sj2);
IkReal x16570=(r21*sj5);
IkReal x16571=(cj1*cj2);
IkReal x16572=(cj5*r20);
IkReal x16573=(cj5*sj5);
IkReal x16574=(cj3*r22);
IkReal x16575=(sj3*x16566);
CheckValue<IkReal> x16576=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+x16575+((sj3*x16565*x16567))+(((-2.0)*sj3*x16568*x16573))+(((-1.0)*x16565*x16575)))),-1);
if(!x16576.valid){
continue;
}
CheckValue<IkReal> x16577 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x16571))+((r20*sj5*x16574))+((r22*x16569))+((cj5*r21*x16574)))),IkReal((((x16569*x16570))+(((-1.0)*x16569*x16572))+(((-1.0)*x16570*x16571))+((cj3*x16566*x16573))+(((-1.0)*cj3*x16567*x16573))+((cj3*x16568))+(((-2.0)*cj3*x16565*x16568))+((x16571*x16572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16576.value)))+(x16577.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x16578=IKsin(j4);
IkReal x16579=IKcos(j4);
IkReal x16580=(cj5*r21);
IkReal x16581=(r21*sj5);
IkReal x16582=(r20*sj5);
IkReal x16583=((1.0)*sj3);
IkReal x16584=((1.0)*cj1);
IkReal x16585=(cj5*r20);
IkReal x16586=((1.0)*x16579);
IkReal x16587=((1.0)*x16578);
evalcond[0]=(((x16578*x16581))+(((-1.0)*x16585*x16587))+(((-1.0)*r22*x16586)));
evalcond[1]=((((-1.0)*r22*x16578*x16583))+((sj3*x16579*x16585))+((sj1*sj2))+(((-1.0)*x16579*x16581*x16583))+((cj3*x16580))+((cj3*x16582))+(((-1.0)*cj2*x16584)));
evalcond[2]=((((-1.0)*cj3*r22*x16587))+(((-1.0)*x16582*x16583))+(((-1.0)*x16580*x16583))+(((-1.0)*cj3*x16581*x16586))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x16584))+((cj3*x16579*x16585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16588=(cj5*sj4);
IkReal x16589=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x16588))+((r01*x16589)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x16588))+((cj4*r12))+(((-1.0)*r11*x16589)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x16588))+((r01*x16589))))+IKsqr((((r10*x16588))+((cj4*r12))+(((-1.0)*r11*x16589))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x16588))+((r01*x16589))), (((r10*x16588))+((cj4*r12))+(((-1.0)*r11*x16589))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16590=IKsin(j0);
IkReal x16591=IKcos(j0);
IkReal x16592=((0.447)*cj2);
IkReal x16593=(r00*sj5);
IkReal x16594=(cj4*sj3);
IkReal x16595=(cj5*r00);
IkReal x16596=((1.0)*sj2);
IkReal x16597=(r11*sj5);
IkReal x16598=(cj3*r01);
IkReal x16599=((1.0)*sj5);
IkReal x16600=((1.0)*sj3);
IkReal x16601=(r02*sj4);
IkReal x16602=(cj5*r10);
IkReal x16603=(cj3*cj4);
IkReal x16604=(cj5*r11);
IkReal x16605=(cj5*r01);
IkReal x16606=((1.0)*cj2);
IkReal x16607=((1.0)*cj3);
IkReal x16608=(r12*sj4);
IkReal x16609=(r10*sj5);
IkReal x16610=((0.447)*sj2);
IkReal x16611=((1.0)*sj4);
IkReal x16612=((1.0)*cj4);
IkReal x16613=(sj1*x16590);
IkReal x16614=(cj1*x16591);
IkReal x16615=(cj1*x16590);
IkReal x16616=(sj1*x16591);
evalcond[0]=(((sj4*x16597))+x16591+(((-1.0)*r12*x16612))+(((-1.0)*x16602*x16611)));
evalcond[1]=(((r01*sj4*sj5))+(((-1.0)*r02*x16612))+(((-1.0)*x16590))+(((-1.0)*x16595*x16611)));
evalcond[2]=((((-0.452)*x16616))+(((-0.1134)*x16593))+(((-1.0)*px))+(((-1.0)*x16610*x16614))+(((-1.0)*x16592*x16616))+(((-0.1134)*x16605))+(((-0.1036)*x16590)));
evalcond[3]=((((-0.452)*x16613))+(((0.1036)*x16591))+(((-1.0)*py))+(((-1.0)*x16610*x16615))+(((-1.0)*x16592*x16613))+(((-0.1134)*x16604))+(((-0.1134)*x16609)));
evalcond[4]=((((-1.0)*r01*x16594*x16599))+((x16594*x16595))+(((-1.0)*x16600*x16601))+(((-1.0)*x16606*x16616))+((cj3*x16593))+(((-1.0)*x16596*x16614))+((cj5*x16598)));
evalcond[5]=((((-1.0)*x16600*x16608))+(((-1.0)*x16606*x16613))+(((-1.0)*x16596*x16615))+(((-1.0)*x16594*x16597))+((x16594*x16602))+((cj3*x16609))+((cj3*x16604)));
evalcond[6]=(((cj2*x16614))+(((-1.0)*x16600*x16605))+(((-1.0)*x16593*x16600))+(((-1.0)*x16601*x16607))+(((-1.0)*x16596*x16616))+((x16595*x16603))+(((-1.0)*cj4*x16598*x16599)));
evalcond[7]=(((cj2*x16615))+(((-1.0)*x16597*x16603))+(((-1.0)*x16600*x16604))+((x16602*x16603))+(((-1.0)*x16596*x16613))+(((-1.0)*x16607*x16608))+(((-1.0)*r10*sj3*x16599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - avena (8f8cb85e5d9cd256b68730ade2339d4e)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
}
