/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2021-08-25 14:28:29.768267
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;
namespace ik_avena
{
// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54;
x0=IKsin(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKsin(j[4]);
x10=IKcos(j[0]);
x11=IKcos(j[4]);
x12=((1.0)*x6);
x13=((0.1135)*x4);
x14=((1.0)*x10);
x15=((0.0676)*x6);
x16=((1.0)*x4);
x17=((1.0)*x5);
x18=((1.0)*x0);
x19=((0.0676)*x5);
x20=((1.0)*x1);
x21=((0.1135)*x1);
x22=((0.452)*x10);
x23=((0.452)*x1);
x24=((0.0676)*x11);
x25=(x1*x3);
x26=(x0*x2);
x27=(x0*x4);
x28=(x3*x4);
x29=(x2*x4);
x30=(x16*x3);
x31=(x21*x3);
x32=(x1*x10*x2);
x33=((((-1.0)*x30))+((x1*x2)));
x34=((((-1.0)*x2*x20))+x30);
x35=((((-1.0)*x16*x2))+(((-1.0)*x20*x3)));
x36=(x33*x6);
x37=(x34*x5);
x38=(((x0*x25))+((x26*x4)));
x39=((((-1.0)*x0*x30))+((x1*x18*x2)));
x40=((((-1.0)*x1*x14*x2))+((x14*x28)));
x41=((((-1.0)*x16*x26))+(((-1.0)*x18*x25)));
x42=(x14*((x25+x29)));
x43=((-1.0)*x42);
x44=(x39*x5);
x45=(x39*x6);
x46=(x40*x6);
x47=(x42*x5);
x48=(x43*x6);
x49=(((x35*x5))+x36);
x50=(x11*x49);
x51=(x44+((x38*x6)));
x52=(x48+((x40*x5)));
x53=(((x11*x51))+((x10*x9)));
x54=(((x0*x9))+((x11*x52)));
eerot[0]=(((x53*x8))+((x7*((((x41*x5))+x45)))));
eerot[1]=(((x53*x7))+((x8*(((((-1.0)*x12*x39))+(((-1.0)*x17*x41)))))));
eerot[2]=(((x51*x9))+(((-1.0)*x11*x14)));
IkReal x55=((1.0)*x26);
IkReal x56=((0.452)*x27);
eetrans[0]=((((0.1054)*x10))+((x3*x56))+((x6*(((((-1.0)*x21*x55))+((x0*x13*x3))))))+(((-1.0)*x10*x24))+x56+(((-1.0)*x23*x55))+((x5*((((x13*x26))+((x0*x31))))))+((x9*((((x19*x39))+((x15*x38)))))));
eerot[3]=(((x7*((x46+x47))))+((x54*x8)));
eerot[4]=(((x8*(((((-1.0)*x46))+(((-1.0)*x47))))))+((x54*x7)));
eerot[5]=((((-1.0)*x11*x18))+((x52*x9)));
IkReal x57=((1.0)*x22);
IkReal x58=((1.0)*x10*x13);
eetrans[1]=(((x5*(((((-1.0)*x2*x58))+(((-1.0)*x10*x31))))))+(((-1.0)*x0*x24))+(((0.1054)*x0))+(((-1.0)*x4*x57))+(((-1.0)*x28*x57))+((x6*((((x10*x2*x21))+(((-1.0)*x3*x58))))))+((x1*x2*x22))+((x9*((((x19*x40))+((x15*x43)))))));
eerot[6]=(((x50*x8))+((x7*((((x35*x6))+x37)))));
eerot[7]=(((x50*x7))+((x8*(((((-1.0)*x12*x35))+(((-1.0)*x17*x34)))))));
eerot[8]=(x49*x9);
eetrans[2]=((0.1125)+((x9*((((x19*x35))+((x15*x33))))))+((x23*x3))+((x6*((x31+((x13*x2))))))+x23+((x5*((((x2*x21))+(((-1.0)*x13*x3))))))+(((0.452)*x29)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.0676)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((-0.0676)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.1125)+pz+(((-0.0676)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x59=((1.0)*px);
IkReal x60=((1.0)*pz);
IkReal x61=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x61))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x60)));
rxp0_2=((((-1.0)*r10*x59))+((py*r00)));
rxp1_0=((((-1.0)*r21*x61))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x60)));
rxp1_2=((((-1.0)*r11*x59))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x61)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x60)));
rxp2_2=((((-1.0)*r12*x59))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x62=((0.1135)*r21);
IkReal x63=((0.227)*npx);
IkReal x64=((-0.227)*npy);
IkReal x65=((-1.0)*npy);
IkReal x66=((-0.1135)*r20);
IkReal x67=((-1.0)*r20);
IkReal x68=((-1.0)*rxp0_2);
IkReal x69=((-0.1135)*r22);
IkReal x70=((-1.0)*npx);
IkReal x71=((-1.0)*r21);
IkReal x72=((-1.0)*rxp2_2);
IkReal x73=((-0.1135)*r21);
matrixinvcoeffs[0]=x62;
matrixinvcoeffs[1]=x64;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=x65;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=r21;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=rxp1_2;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x62;
matrixinvcoeffs[19]=x64;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=r21;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=x65;
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=rxp1_2;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x66;
matrixinvcoeffs[33]=x63;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npx;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=x67;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x68;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x66;
matrixinvcoeffs[51]=x63;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=x67;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=npx;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x68;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=r22;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=((-1.0)*npz);
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x69;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=rxp2_2;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=npz;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=((-1.0)*r22);
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x69;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=x72;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=x67;
matrixinvcoeffs[101]=x70;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=rxp0_2;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=((0.1135)*r20);
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=x67;
matrixinvcoeffs[119]=x70;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=rxp0_2;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x66;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x71;
matrixinvcoeffs[133]=x65;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp1_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x62;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x71;
matrixinvcoeffs[151]=x65;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp1_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x73;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=r22;
matrixinvcoeffs[165]=npz;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=x72;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x69;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=r22;
matrixinvcoeffs[183]=npz;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=x72;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((0.1135)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=r20;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=x70;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x66;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=rxp0_2;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=npx;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=x67;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x66;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=x68;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=r21;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=x65;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=x73;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp1_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npy;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=x71;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x73;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=((-1.0)*rxp1_2);
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_10=matrixinvcoeffs[164], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_11=matrixinvcoeffs[181], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_8=matrixinvcoeffs[134], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_11=matrixinvcoeffs[183], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_8=matrixinvcoeffs[136], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_1=matrixinvcoeffs[25], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_11=matrixinvcoeffs[185], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_8=matrixinvcoeffs[138], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_11=matrixinvcoeffs[187], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_10=matrixinvcoeffs[172], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_11=matrixinvcoeffs[189], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_10=matrixinvcoeffs[174], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_11=matrixinvcoeffs[191], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x74=pz*pz;
IkReal x75=pp*pp;
IkReal x76=((0.227)*pz);
IkReal x77=(npz*pz);
IkReal x78=((2.0)*gclwh5_11);
IkReal x79=(npx*pz);
IkReal x80=((0.454)*rxp2_2);
IkReal x81=((0.011645554)*r22);
IkReal x82=(npy*pz);
IkReal x83=((1.808)*gclwh8_12);
IkReal x84=((0.205208)*rxp2_2);
IkReal x85=(pp*r22);
IkReal x86=(pp*r20);
IkReal x87=((0.227)*rxp1_2);
IkReal x88=((0.01288225)*pz);
IkReal x89=(gclwh6_2*r20);
IkReal x90=((1.808)*gclwh6_12);
IkReal x91=(gclwh7_11*r20);
IkReal x92=((0.011645554)*r20);
IkReal x93=((0.00135778915)*r20);
IkReal x94=((0.023291108)*r20);
IkReal x95=((0.454)*rxp0_2);
IkReal x96=((2.28413886525e-5)*r20);
IkReal x97=(pp*r21);
IkReal x98=(gclwh4_14*rxp2_2);
IkReal x99=((2.0)*pp);
IkReal x100=((2.0)*gclwh7_11);
IkReal x101=(gclwh4_2*rxp2_2);
IkReal x102=((0.01288225)*r21);
IkReal x103=((1.0)*pz);
IkReal x104=((4.0)*gclwh4_8);
IkReal x105=((0.4216)*gclwh14_14);
IkReal x106=(gclwh15_9*r21);
IkReal x107=((0.227)*rxp0_2);
IkReal x108=((0.2108)*gclwh4_14);
IkReal x109=((0.0239258)*rxp0_2);
IkReal x110=((0.410416)*rxp0_2);
IkReal x111=((0.001462135375)*r22);
IkReal x112=((0.0478516)*rxp1_2);
IkReal x113=(gclwh14_14*r21);
IkReal x114=((0.908)*rxp0_2);
IkReal x115=((0.2108)*gclwh14_14);
IkReal x116=((0.454)*rxp1_2);
IkReal x117=(gclwh9_0*pz);
IkReal x118=(gclwh14_3*rxp1_2);
IkReal x119=((0.18510554057)*rxp0_2);
IkReal x120=((4.0)*gclwh12_8);
IkReal x121=(gclwh1_2*r21);
IkReal x122=(gclwh13_0*rxp0_2);
IkReal x123=((0.4216)*gclwh4_14);
IkReal x124=((0.908)*rxp2_2);
IkReal x125=((1.808)*gclwh11_0);
IkReal x126=((1.808)*gclwh11_13);
IkReal x127=((0.023291108)*r22);
IkReal x128=((4.0)*gclwh6_8);
IkReal x129=(gclwh13_11*r20);
IkReal x130=(gclwh5_9*rxp2_2);
IkReal x131=((0.205208)*rxp0_2);
IkReal x132=((0.908)*rxp1_2);
IkReal x133=(gclwh5_1*rxp2_2);
IkReal x134=(gclwh4_8*r22);
IkReal x135=((4.0)*gclwh11_11);
IkReal x136=(gclwh8_2*pz);
IkReal x137=((0.051529)*r21);
IkReal x138=((0.001462135375)*r20);
IkReal x139=((1.808)*gclwh8_2);
IkReal x140=((2.0)*gclwh9_11);
IkReal x141=((0.0957032)*rxp1_2);
IkReal x142=(gclwh9_0*r21);
IkReal x143=((0.2108)*gclwh15_15);
IkReal x144=((1.808)*gclwh7_0);
IkReal x145=((0.410416)*rxp1_2);
IkReal x146=((0.0239258)*rxp1_2);
IkReal x147=((0.2108)*gclwh12_14);
IkReal x148=((4.0)*gclwh9_11);
IkReal x149=((0.205208)*rxp1_2);
IkReal x150=((4.0)*gclwh7_11);
IkReal x151=(gclwh4_14*r22);
IkReal x152=((1.808)*gclwh10_2);
IkReal x153=(gclwh12_14*rxp0_2);
IkReal x154=((0.2108)*gclwh13_15);
IkReal x155=((1.808)*gclwh7_13);
IkReal x156=(gclwh5_15*rxp2_2);
IkReal x157=((0.00135778915)*r21);
IkReal x158=((0.00135778915)*r22);
IkReal x159=((0.227)*rxp2_2);
IkReal x160=((2.0)*gclwh4_8);
IkReal x161=((0.023291108)*r21);
IkReal x162=((0.011645554)*r21);
IkReal x163=(gclwh4_3*rxp2_2);
IkReal x164=(gclwh12_8*r20);
IkReal x165=((2.0)*gclwh15_11);
IkReal x166=((0.410416)*rxp2_2);
IkReal x167=((0.01288225)*r22);
IkReal x168=((1.808)*gclwh9_0);
IkReal x169=((0.4216)*gclwh12_14);
IkReal x170=(gclwh13_15*rxp0_2);
IkReal x171=((2.0)*gclwh10_8);
IkReal x172=((0.0257645)*r21);
IkReal x173=(gclwh10_8*r22);
IkReal x174=((2.28413886525e-5)*r21);
IkReal x175=((0.0027155783)*r20);
IkReal x176=((2.0)*gclwh11_11);
IkReal x177=((4.0)*gclwh10_8);
IkReal x178=((0.00040249143)*rxp0_2);
IkReal x179=((0.2108)*gclwh5_15);
IkReal x180=(gclwh14_2*pz);
IkReal x181=((1.808)*gclwh9_13);
IkReal x182=((4.0)*gclwh8_8);
IkReal x183=((1.808)*gclwh6_2);
IkReal x184=((2.0)*gclwh6_8);
IkReal x185=(gclwh4_10*rxp2_2);
IkReal x186=((2.0)*gclwh12_8);
IkReal x187=((1.808)*gclwh10_12);
IkReal x188=((0.0239258)*rxp2_2);
IkReal x189=(gclwh12_10*rxp0_2);
IkReal x190=((2.28413886525e-5)*r22);
IkReal x191=((2.0)*gclwh8_8);
IkReal x192=(gclwh6_8*r20);
IkReal x193=(gclwh15_9*rxp1_2);
IkReal x194=((2.0)*gclwh13_11);
IkReal x195=(gclwh11_11*r22);
IkReal x196=(gclwh15_1*rxp1_2);
IkReal x197=(gclwh13_9*rxp0_2);
IkReal x198=(gclwh14_10*rxp1_2);
IkReal x199=(gclwh10_5*x158);
IkReal x200=(gclwh6_5*x93);
IkReal x201=(gclwh8_5*x157);
IkReal x202=(gclwh14_14*x146);
IkReal x203=((0.0239258)*x98);
IkReal x204=(gclwh12_14*x109);
IkReal x205=(gclwh8_8*x102);
IkReal x206=((0.01288225)*x192);
IkReal x207=(gclwh14_8*x87);
IkReal x208=(gclwh12_8*x107);
IkReal x209=(gclwh4_8*x159);
IkReal x210=(gclwh10_8*x167);
IkReal x211=(gclwh11_11*x167);
IkReal x212=(gclwh15_11*x87);
IkReal x213=(gclwh13_11*x107);
IkReal x214=(gclwh9_11*x102);
IkReal x215=((0.01288225)*x91);
IkReal x216=(gclwh5_11*x159);
IkReal x217=(gclwh11_7*x158);
IkReal x218=((0.0239258)*x156);
IkReal x219=(gclwh9_7*x157);
IkReal x220=(gclwh7_7*x93);
IkReal x221=(gclwh13_15*x109);
IkReal x222=(gclwh15_15*x146);
IkReal x223=(gclwh6_5*x109);
IkReal x224=(gclwh8_5*x146);
IkReal x225=(gclwh10_5*x188);
IkReal x226=(gclwh12_14*x93);
IkReal x227=((0.00135778915)*x113);
IkReal x228=((0.00135778915)*x151);
IkReal x229=(gclwh13_15*x93);
IkReal x230=(gclwh5_15*x158);
IkReal x231=(gclwh11_7*x188);
IkReal x232=(gclwh15_15*x157);
IkReal x233=(gclwh9_7*x146);
IkReal x234=(gclwh7_7*x109);
IkReal x235=((0.0257645)*x173);
IkReal x236=(gclwh8_8*x172);
IkReal x237=(gclwh14_8*x116);
IkReal x238=((0.0257645)*x192);
IkReal x239=(gclwh12_8*x95);
IkReal x240=(gclwh4_8*x80);
IkReal x241=((0.0257645)*x195);
IkReal x242=(gclwh5_11*x80);
IkReal x243=(gclwh13_11*x95);
IkReal x244=((0.0257645)*x91);
IkReal x245=(gclwh15_11*x116);
IkReal x246=(gclwh9_11*x172);
IkReal x247=(gclwh6_8*x95);
IkReal x248=(gclwh8_8*x116);
IkReal x249=(gclwh14_8*x172);
IkReal x250=((0.0257645)*x164);
IkReal x251=(gclwh10_8*x80);
IkReal x252=((0.0257645)*x134);
IkReal x253=(gclwh11_11*x80);
IkReal x254=((0.0257645)*x129);
IkReal x255=((0.0257645)*gclwh5_11*r22);
IkReal x256=(gclwh15_11*x172);
IkReal x257=(gclwh9_11*x116);
IkReal x258=(gclwh7_11*x95);
IkReal x259=(gclwh14_8*x97);
IkReal x260=(r20*x75);
IkReal x261=(pp*x107);
IkReal x262=(r22*x75);
IkReal x263=((2.0)*x74);
IkReal x264=(r21*x75);
IkReal x265=((0.1054)*gclwh10_5*x85);
IkReal x266=((0.2108)*gclwh6_5*x79);
IkReal x267=((0.2108)*gclwh8_5*x82);
IkReal x268=((0.2108)*gclwh10_5*x77);
IkReal x269=((0.1054)*gclwh8_5*x97);
IkReal x270=((0.1054)*gclwh6_5*x86);
IkReal x271=(x88*x89);
IkReal x272=(gclwh14_2*rxp1_2*x76);
IkReal x273=(gclwh6_2*pz*x86);
IkReal x274=(gclwh12_2*rxp0_2*x76);
IkReal x275=(gclwh8_2*r21*x88);
IkReal x276=(x136*x97);
IkReal x277=(x171*x77);
IkReal x278=(x101*x76);
IkReal x279=(gclwh14_3*pp*x87);
IkReal x280=(gclwh10_2*r22*x88);
IkReal x281=(gclwh4_3*pp*x159);
IkReal x282=(x184*x79);
IkReal x283=(x191*x82);
IkReal x284=(gclwh12_3*x261);
IkReal x285=(gclwh7_0*r20*x88);
IkReal x286=(gclwh5_0*rxp2_2*x76);
IkReal x287=(gclwh7_0*pz*x86);
IkReal x288=(gclwh15_0*rxp1_2*x76);
IkReal x289=(x140*x82);
IkReal x290=(x122*x76);
IkReal x291=(x100*x79);
IkReal x292=(x142*x88);
IkReal x293=(x117*x97);
IkReal x294=(gclwh11_0*r22*x88);
IkReal x295=(gclwh13_1*x261);
IkReal x296=(gclwh15_1*pp*x87);
IkReal x297=(x176*x77);
IkReal x298=((0.227)*pp*x133);
IkReal x299=((0.2108)*gclwh7_7*x79);
IkReal x300=((0.1054)*gclwh11_7*x85);
IkReal x301=((0.2108)*gclwh9_7*x82);
IkReal x302=((0.1054)*gclwh9_7*x97);
IkReal x303=((0.1054)*gclwh7_7*x86);
IkReal x304=((0.2108)*gclwh11_7*x77);
IkReal x305=(x147*x79);
IkReal x306=(x108*x77);
IkReal x307=(x115*x82);
IkReal x308=((0.1054)*gclwh12_14*x86);
IkReal x309=((0.1054)*gclwh4_14*x85);
IkReal x310=((0.1054)*gclwh14_14*x97);
IkReal x311=((0.1054)*gclwh5_15*x85);
IkReal x312=((0.1054)*gclwh13_15*x86);
IkReal x313=((0.1054)*gclwh15_15*x97);
IkReal x314=(x179*x77);
IkReal x315=(x154*x79);
IkReal x316=(x143*x82);
IkReal x317=(x182*x82);
IkReal x318=(x171*x85);
IkReal x319=(x128*x79);
IkReal x320=(x191*x97);
IkReal x321=(x177*x77);
IkReal x322=(x184*x86);
IkReal x323=(x150*x79);
IkReal x324=(x148*x82);
IkReal x325=(x176*x85);
IkReal x326=(x140*x97);
IkReal x327=(x100*x86);
IkReal x328=(x135*x77);
IkReal x329=((4.0)*gclwh14_8*x82);
IkReal x330=(x104*x77);
IkReal x331=(x120*x79);
IkReal x332=(x160*x85);
IkReal x333=(x186*x86);
IkReal x334=((2.0)*x259);
IkReal x335=(x165*x97);
IkReal x336=(x78*x85);
IkReal x337=(x194*x86);
IkReal x338=((4.0)*gclwh15_11*x82);
IkReal x339=((4.0)*gclwh5_11*x77);
IkReal x340=((4.0)*gclwh13_11*x79);
IkReal x341=(npz*x263);
IkReal x342=(gclwh10_2*x341);
IkReal x343=(gclwh10_2*x103*x85);
IkReal x344=(gclwh6_2*npx*x263);
IkReal x345=(gclwh8_2*npy*x263);
IkReal x346=(gclwh9_1*x82*x99);
IkReal x347=(gclwh11_0*x341);
IkReal x348=(gclwh7_0*npx*x263);
IkReal x349=(gclwh11_0*x103*x85);
IkReal x350=((1.0)*gclwh9_1*x264);
IkReal x351=(gclwh9_0*npy*x263);
IkReal x352=(x233+x234);
IkReal x353=(x223+x224);
IkReal x354=(((gclwh14_14*x112))+(((0.0478516)*x98))+(((0.0478516)*x153)));
IkReal x355=((((0.0478516)*x170))+((gclwh15_15*x112))+(((0.0478516)*x156)));
IkReal x356=((-1.0)*x355);
IkReal x357=(x204+x203+x202);
IkReal x358=(x218+x221+x222);
IkReal x359=(x210+x283+x282);
IkReal x360=(x211+x291+x289);
IkReal x361=(((x169*x79))+((x123*x77))+((x105*x82)));
IkReal x362=((((0.4216)*gclwh13_15*x79))+(((0.4216)*gclwh15_15*x82))+(((0.4216)*gclwh5_15*x77)));
IkReal x363=(x315+x314+x316);
IkReal x364=(x306+x307+x305);
IkReal x365=(x319+x318+x317+x235);
IkReal x366=(x199+x265+x267+x266);
IkReal x367=(x324+x325+x323+x241);
IkReal x368=(x300+x301+x217+x299);
IkReal x369=(x331+x330+x329+x247+x248);
IkReal x370=(x339+x338+x340+x258+x257);
IkReal x371=(x304+x302+x303+x219+x220);
IkReal x372=(x201+x200+x269+x268+x270);
IkReal x373=(x207+x206+x205+x209+x208+x277);
IkReal x374=(x212+x213+x214+x215+x216+x297);
IkReal x375=(((x147*x86))+(((0.0027155783)*x151))+((x108*x85))+(((0.0027155783)*x113))+((gclwh12_14*x175))+((x115*x97)));
IkReal x376=((((0.0027155783)*gclwh5_15*r22))+((gclwh13_15*x175))+((x143*x97))+(((0.0027155783)*gclwh15_15*r21))+((x154*x86))+((x179*x85)));
IkReal x377=(x311+x313+x312+x229+x232+x230);
IkReal x378=(x308+x309+x310+x228+x227+x226);
IkReal x379=(x337+x336+x335+x254+x255+x256+x253);
IkReal x380=((-0.02221832)+x333+x332+x334+x250+x251+x252+x249);
IkReal x381=(x326+x327+x328+x243+x242+x246+x245+x244);
IkReal x382=(x320+x321+x322+x238+x239+x236+x237+x240);
IkReal x383=(x343+x344+x345+x279+x284+x281+x280);
IkReal x384=((((-1.0)*x361))+x375);
IkReal x385=(x342+x276+x274+x275+x272+x273+x271+x278);
IkReal x386=(x351+x350+x348+x349+x298+x294+x295+x296);
IkReal x387=(x346+x347+x290+x292+x293+x288+x287+x286+x285);
op[0]=((0.1905632)+(((-1.0)*x372))+x357+x366);
op[1]=((((-1.0)*gclwh6_8*x86))+(((-1.0)*gclwh4_2*x84))+(((0.904)*gclwh10_2*x85))+((gclwh10_8*x85))+(((-0.904)*gclwh6_2*x86))+(((0.1794435)*x189))+(((0.1794435)*x185))+(((0.1794435)*x198))+(((-1.0)*x373))+((gclwh12_3*x119))+(((-1.0)*gclwh12_2*x131))+(((-1.0)*gclwh14_2*x149))+(((-0.011645554)*x89))+(((-0.904)*gclwh8_2*x97))+(((0.18510554057)*x118))+x359+x385+((x139*x82))+(((-1.0)*x383))+(((-1.0)*x152*x77))+((gclwh10_2*x81))+(((-1.0)*gclwh8_8*x97))+(((0.18510554057)*x163))+(((-1.0)*gclwh8_2*x162))+((x183*x79)));
op[2]=((((-1.0)*gclwh12_10*x131))+(((-1.0)*x82*x83))+(((-1.0)*x365))+((x187*x77))+(((-1.0)*gclwh14_10*x149))+x382+(((-1.0)*gclwh4_10*x84))+(((-1.0)*x79*x90))+(((0.904)*gclwh8_12*x97))+((gclwh8_12*x162))+((gclwh6_12*x92))+(((-0.904)*gclwh10_12*x85))+(((0.904)*gclwh6_12*x86))+(((-1.0)*gclwh10_12*x81)));
op[3]=x354;
op[4]=((((-1.0)*x357))+(((-1.0)*x372))+x366);
op[5]=((((-1.0)*gclwh12_3*x178))+(((-0.00040249143)*x163))+(((-1.0)*x359))+(((-0.0257645)*x198))+(((-0.0257645)*x189))+(((-0.0257645)*x185))+x385+x373+(((-1.0)*x383))+((gclwh6_8*x86))+(((-1.0)*gclwh10_8*x85))+(((-0.00040249143)*x118))+((gclwh8_8*x97)));
op[6]=((((-0.904)*gclwh7_0*x86))+(((0.80256066)*gclwh9_1*x97))+(((-1.0)*gclwh11_11*x85))+((gclwh7_11*x86))+((gclwh13_1*x119))+(((-1.0)*x360))+(((0.0105047394273475)*gclwh9_1*r21))+(((-0.904)*gclwh9_0*x97))+(((-1.63088582)*gclwh9_1*x82))+(((0.18510554057)*x133))+((x144*x79))+(((-0.011645554)*x142))+x387+x374+((gclwh9_11*x97))+(((-0.2309725)*x193))+(((-0.2309725)*x197))+(((-1.0)*gclwh7_0*x92))+(((-1.0)*gclwh15_0*x149))+(((-1.0)*x125*x77))+(((0.904)*gclwh11_0*x85))+(((-0.2309725)*x130))+((gclwh11_0*x81))+(((-1.0)*x386))+(((-0.205208)*x122))+((x168*x82))+(((-1.0)*gclwh5_0*x84))+(((0.18510554057)*x196)));
op[7]=((0.1905632)+(((-1.0)*x371))+x358+x368);
op[8]=x356;
op[9]=(((x126*x77))+(((-0.904)*gclwh11_13*x85))+(((-1.0)*x367))+(((-1.0)*gclwh11_13*x81))+x381+(((-1.0)*gclwh5_9*x84))+(((-1.0)*gclwh15_9*x149))+((gclwh7_13*x92))+((gclwh9_13*x162))+(((-1.0)*gclwh13_9*x131))+(((-1.0)*x155*x79))+(((0.904)*gclwh7_13*x86))+(((0.904)*gclwh9_13*x97))+(((-1.0)*x181*x82)));
op[10]=((((-0.00040249143)*x133))+(((-1.0)*gclwh9_11*x97))+((gclwh11_11*x85))+(((-0.0257645)*x130))+(((-1.0)*x374))+(((-1.0)*gclwh9_1*x174))+(((-0.00040249143)*x196))+(((-1.0)*gclwh13_1*x178))+(((-0.0257645)*x197))+(((-0.0257645)*x193))+(((0.00354618)*gclwh9_1*x82))+x387+x360+(((-0.01465534)*gclwh9_1*x97))+(((-1.0)*x386))+(((-1.0)*gclwh7_11*x86)));
op[11]=((((-1.0)*x358))+(((-1.0)*x371))+x368);
op[12]=((((-1.0)*x364))+x353+x378+(((-1.0)*x225)));
op[13]=((-0.80610684)+(((0.010183418625)*gclwh12_10*r20))+(((-1.808)*gclwh3_2*npx*pz))+(((-0.01288225)*gclwh12_8*r20))+((gclwh14_2*pp*pz*r21))+(((-1.63088582)*gclwh14_3*npy*pz))+(((0.7905)*gclwh12_10*pp*r20))+(((2.0)*gclwh4_3*npz*pp*pz))+(((1.808)*gclwh12_2*npx*pz))+(((0.7905)*gclwh14_10*pp*r21))+(((0.0105047394273475)*gclwh12_3*r20))+(((-2.0)*gclwh1_2*npy*(pz*pz)))+(((-0.904)*gclwh12_2*pp*r20))+(((-0.01288225)*gclwh1_2*pz*r21))+(((1.808)*gclwh4_2*npz*pz))+(((0.0105047394273475)*gclwh14_3*r21))+(((-1.0)*gclwh14_8*pp*r21))+((gclwh1_2*pp*pz*r21))+(((-0.205208)*gclwh10_2*rxp2_2))+(((0.205208)*gclwh8_2*rxp1_2))+(((2.0)*gclwh3_2*npx*(pz*pz)))+(((-0.0105047394273475)*gclwh1_3*r21))+(((2.0)*gclwh12_8*npx*pz))+(((-2.0)*gclwh14_2*npy*(pz*pz)))+(((-0.82832516)*gclwh3_3*pp*r20))+(((-0.011645554)*gclwh3_2*r20))+(((0.227)*gclwh8_8*rxp1_2))+(((0.010183418625)*gclwh4_10*r22))+((gclwh3_3*r20*(pp*pp)))+(((-2.0)*gclwh12_2*npx*(pz*pz)))+(((0.0105047394273475)*gclwh4_3*r22))+(((-1.0)*gclwh12_3*r20*(pp*pp)))+(((-1.0)*gclwh12_8*pp*r20))+(((1.808)*gclwh1_2*npy*pz))+(((0.010183418625)*gclwh14_10*r21))+(((0.01288225)*gclwh4_2*pz*r22))+(((-0.01288225)*gclwh14_8*r21))+(((-0.011645554)*gclwh12_2*r20))+(((-0.011645554)*gclwh4_2*r22))+(((-0.904)*gclwh14_2*pp*r21))+(((-1.63088582)*gclwh12_3*npx*pz))+(((2.0)*gclwh14_8*npy*pz))+(((0.0105047394273475)*gclwh3_3*r20))+(((-0.227)*gclwh8_2*pz*rxp1_2))+(((0.227)*pz))+(((-0.227)*gclwh6_2*pz*rxp0_2))+(((0.01288225)*gclwh14_2*pz*r21))+(((-0.227)*gclwh10_8*rxp2_2))+(((0.904)*gclwh3_2*pp*r20))+(((-1.581)*gclwh12_10*npx*pz))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((-1.0)*gclwh3_2*pp*pz*r20))+(((-0.011645554)*gclwh14_2*r21))+(((-1.581)*gclwh4_10*npz*pz))+(((-2.0)*gclwh3_3*npx*pp*pz))+(((1.63088582)*gclwh3_3*npx*pz))+(((1.808)*gclwh14_2*npy*pz))+(((0.227)*gclwh6_8*rxp0_2))+(((0.01288225)*gclwh3_2*pz*r20))+(((-1.63088582)*gclwh1_3*npy*pz))+(((0.80256066)*gclwh14_3*pp*r21))+(((-1.0)*gclwh4_8*pp*r22))+(((0.011645554)*gclwh1_2*r21))+(((2.0)*gclwh14_3*npy*pp*pz))+(((0.82832516)*gclwh1_3*pp*r21))+(((-0.904)*gclwh4_2*pp*r22))+(((0.7905)*gclwh4_10*pp*r22))+(((0.80256066)*gclwh12_3*pp*r20))+(((0.01288225)*gclwh12_2*pz*r20))+(((0.205208)*gclwh6_2*rxp0_2))+(((-1.581)*gclwh14_10*npy*pz))+(((-1.0)*gclwh14_3*r21*(pp*pp)))+(((2.0)*gclwh4_8*npz*pz))+(((2.0)*gclwh1_3*npy*pp*pz))+(((0.227)*gclwh10_2*pz*rxp2_2))+(((-0.01288225)*gclwh4_8*r22))+(((-1.0)*gclwh1_3*r21*(pp*pp)))+(((2.0)*gclwh12_3*npx*pp*pz))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+((gclwh12_2*pp*pz*r20))+(((0.80256066)*gclwh4_3*pp*r22))+(((-0.904)*gclwh1_2*pp*r21))+(((-1.63088582)*gclwh4_3*npz*pz)));
op[14]=((((1.808)*gclwh4_10*x77))+(((-0.904)*gclwh14_10*x97))+(((-1.0)*x369))+(((1.808)*gclwh14_10*x82))+(((-1.0)*gclwh12_10*x92))+(((-1.0)*gclwh6_12*x131))+(((-0.904)*gclwh12_10*x86))+x380+((gclwh10_12*x84))+(((-1.0)*gclwh4_10*x81))+(((-1.0)*gclwh14_10*x162))+(((-0.904)*gclwh4_10*x85))+(((-1.0)*gclwh8_12*x149))+(((1.808)*gclwh12_10*x79)));
op[15]=x384;
op[16]=((((-1.0)*x378))+x353+x364+(((-1.0)*x225)));
op[17]=((-0.01110916)+(((-1.0)*gclwh12_10*x138))+(((0.00354618)*gclwh12_3*x79))+(((-0.01110916)*gclwh3_3*x86))+(((-1.0)*gclwh4_10*x111))+(((-1.0)*gclwh12_2*npx*x263))+(((-1.0)*x160*x77))+((gclwh14_10*npy*x76))+((gclwh1_2*pz*x97))+((gclwh12_2*r20*x88))+((x180*x97))+(((-1.0)*gclwh14_2*npy*x263))+(((0.01288225)*x164))+(((0.01110916)*gclwh1_3*x97))+((gclwh12_10*npx*x76))+((gclwh12_3*x79*x99))+(((-1.0)*gclwh8_2*rxp1_2*x76))+((gclwh4_3*x77*x99))+(((-1.0)*gclwh1_2*npy*x263))+(((-1.0)*gclwh3_3*x79*x99))+((gclwh14_2*r21*x88))+((gclwh10_2*rxp2_2*x76))+((gclwh4_2*pz*x85))+((gclwh4_2*r22*x88))+(((-1.0)*gclwh6_8*x107))+(((0.00354618)*gclwh4_3*x77))+(((0.01288225)*x134))+((gclwh14_8*x102))+(((-2.0)*gclwh14_8*x82))+((gclwh12_2*pz*x86))+x259+(((-1.0)*gclwh3_2*x103*x86))+(((-1.0)*gclwh12_3*x96))+(((-1.0)*gclwh14_3*x174))+((gclwh4_10*npz*x76))+(((-1.0)*gclwh4_3*x262))+x76+(((-1.0)*gclwh3_3*x96))+((gclwh12_8*x86))+((gclwh1_3*x174))+(((-0.01465534)*gclwh4_3*x85))+((gclwh4_8*x85))+((gclwh3_3*x260))+((gclwh3_2*npx*x263))+(((-0.01465534)*gclwh12_3*x86))+((gclwh3_2*r20*x88))+((gclwh14_3*x82*x99))+((gclwh10_8*x159))+(((-0.00354618)*gclwh3_3*x79))+(((-1.0)*x186*x79))+(((-1.0)*gclwh12_3*x260))+(((-1.0)*x121*x88))+(((0.00354618)*gclwh1_3*x82))+(((-0.1135)*gclwh14_10*x97))+(((-0.1135)*gclwh12_10*x86))+(((-1.0)*gclwh8_8*x87))+(((-0.001462135375)*gclwh14_10*r21))+((gclwh1_3*x82*x99))+(((-0.01465534)*gclwh14_3*x97))+(((-1.0)*gclwh4_2*x341))+(((-1.0)*gclwh6_2*rxp0_2*x76))+(((-1.0)*gclwh4_3*x190))+(((-1.0)*gclwh1_3*x264))+(((-0.1135)*gclwh4_10*x85))+(((0.00354618)*gclwh14_3*x82))+(((-1.0)*gclwh14_3*x264)));
op[18]=((0.80610684)+(((-0.01288225)*gclwh15_0*pz*r21))+(((-2.035)*gclwh13_9*npx*pz))+(((-0.227)*gclwh11_0*pz*rxp2_2))+(((0.0105047394273475)*gclwh2_1*r20))+(((1.0175)*gclwh15_9*pp*r21))+(((-1.808)*gclwh5_0*npz*pz))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((0.18510554057)*gclwh9_1*rxp1_2))+(((1.808)*gclwh0_0*npy*pz))+(((0.013107689375)*gclwh13_9*r20))+(((-0.0105047394273475)*gclwh15_1*r21))+(((-1.0)*gclwh13_11*pp*r20))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((0.205208)*gclwh11_0*rxp2_2))+(((0.011645554)*gclwh5_0*r22))+(((-0.80256066)*gclwh15_1*pp*r21))+(((1.63088582)*gclwh2_1*npx*pz))+((gclwh13_1*r20*(pp*pp)))+(((0.011645554)*gclwh13_0*r20))+(((2.0)*gclwh13_0*npx*(pz*pz)))+(((-0.01288225)*gclwh0_0*pz*r21))+((gclwh0_0*pp*pz*r21))+(((0.011645554)*gclwh0_0*r21))+(((0.904)*gclwh15_0*pp*r21))+(((-0.80256066)*gclwh13_1*pp*r20))+(((-0.0105047394273475)*gclwh0_1*r21))+(((1.63088582)*gclwh15_1*npy*pz))+(((-2.0)*gclwh2_1*npx*pp*pz))+(((-0.01288225)*gclwh15_11*r21))+(((1.0175)*gclwh5_9*pp*r22))+(((2.0)*gclwh5_11*npz*pz))+(((2.0)*gclwh13_11*npx*pz))+(((2.0)*gclwh0_1*npy*pp*pz))+(((0.227)*gclwh9_11*rxp1_2))+(((-2.0)*gclwh15_1*npy*pp*pz))+(((0.011645554)*gclwh15_0*r21))+(((-1.0)*gclwh5_11*pp*r22))+(((-0.01288225)*gclwh13_11*r20))+(((-0.205208)*gclwh9_0*rxp1_2))+(((0.904)*gclwh13_0*pp*r20))+(((1.0175)*gclwh13_9*pp*r20))+(((0.013107689375)*gclwh5_9*r22))+(((-0.01288225)*gclwh13_0*pz*r20))+(((-0.205208)*gclwh7_0*rxp0_2))+(((-0.01288225)*gclwh5_11*r22))+(((2.0)*gclwh15_0*npy*(pz*pz)))+(((2.0)*gclwh2_0*npx*(pz*pz)))+(((0.904)*gclwh2_0*pp*r20))+(((-0.80256066)*gclwh5_1*pp*r22))+(((0.227)*pz))+(((1.63088582)*gclwh13_1*npx*pz))+(((-1.808)*gclwh2_0*npx*pz))+(((0.82832516)*gclwh0_1*pp*r21))+(((-0.0105047394273475)*gclwh5_1*r22))+(((-1.0)*gclwh2_0*pp*pz*r20))+(((-0.82832516)*gclwh2_1*pp*r20))+(((0.904)*gclwh5_0*pp*r22))+(((-0.0105047394273475)*gclwh13_1*r20))+((gclwh2_1*r20*(pp*pp)))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((-1.0)*gclwh13_0*pp*pz*r20))+(((0.227)*gclwh9_0*pz*rxp1_2))+(((-0.011645554)*gclwh2_0*r20))+(((-2.0)*gclwh0_0*npy*(pz*pz)))+(((-1.808)*gclwh15_0*npy*pz))+(((1.63088582)*gclwh5_1*npz*pz))+(((2.0)*gclwh15_11*npy*pz))+(((-0.01288225)*gclwh5_0*pz*r22))+(((-2.035)*gclwh5_9*npz*pz))+(((-1.0)*gclwh15_11*pp*r21))+(((-2.035)*gclwh15_9*npy*pz))+(((-0.227)*gclwh9_1*pp*rxp1_2))+(((-1.63088582)*gclwh0_1*npy*pz))+((gclwh5_1*r22*(pp*pp)))+(((-1.0)*gclwh15_0*pp*pz*r21))+(((-1.808)*gclwh13_0*npx*pz))+(((-1.0)*gclwh0_1*r21*(pp*pp)))+(((-2.0)*gclwh13_1*npx*pp*pz))+(((-0.227)*gclwh11_11*rxp2_2))+(((0.227)*gclwh7_0*pz*rxp0_2))+(((0.01288225)*gclwh2_0*pz*r20))+((gclwh15_1*r21*(pp*pp)))+(((0.013107689375)*gclwh15_9*r21))+(((-0.904)*gclwh0_0*pp*r21))+(((0.227)*gclwh7_11*rxp0_2)));
op[19]=((((-1.0)*x352))+(((-1.0)*x377))+x363+x231);
op[20]=((((-1.0)*x362))+x376);
op[21]=((-0.02221832)+(((0.904)*gclwh15_9*x97))+((gclwh7_13*x131))+(((0.904)*gclwh13_9*x86))+(((0.011645554)*x106))+(((-1.0)*x379))+(((-1.808)*gclwh5_9*x77))+(((0.904)*gclwh5_9*x85))+(((-1.0)*gclwh11_13*x84))+((gclwh13_9*x92))+x370+((gclwh9_13*x149))+((gclwh5_9*x81))+(((-1.808)*gclwh15_9*x82))+(((-1.808)*gclwh13_9*x79)));
op[22]=((0.01110916)+(((-1.0)*gclwh13_0*x103*x86))+((gclwh13_0*npx*x263))+(((-0.00354618)*gclwh2_1*x79))+(((0.1135)*gclwh5_9*x85))+(((-1.0)*gclwh15_0*x103*x97))+(((-0.00354618)*gclwh5_1*x77))+(((-1.0)*gclwh13_0*r20*x88))+(((-1.0)*gclwh5_0*x103*x85))+(((-1.0)*gclwh0_0*r21*x88))+((gclwh5_11*x85))+((gclwh2_0*npx*x263))+(((-1.0)*gclwh15_9*npy*x76))+(((-1.0)*gclwh15_1*x82*x99))+(((0.00354618)*gclwh0_1*x82))+(((-1.0)*gclwh11_0*rxp2_2*x76))+(((-0.00354618)*gclwh15_1*x82))+(((-1.0)*x194*x79))+(((-1.0)*gclwh9_11*x87))+((gclwh15_11*x102))+(((-0.00354618)*gclwh13_1*x79))+((gclwh13_1*x260))+(((-1.0)*gclwh5_0*r22*x88))+((gclwh5_9*x111))+(((0.1135)*gclwh13_9*x86))+((gclwh15_1*x264))+((gclwh13_11*x86))+(((-1.0)*gclwh0_0*npy*x263))+(((-1.0)*x165*x82))+(((-1.0)*gclwh7_11*x107))+(((-1.0)*gclwh13_9*npx*x76))+((gclwh15_11*x97))+(((-1.0)*gclwh9_1*pp*x87))+(((0.01288225)*x129))+((gclwh15_1*x174))+(((-0.00040249143)*gclwh9_1*rxp1_2))+(((0.1135)*gclwh15_9*x97))+((gclwh15_0*npy*x263))+((gclwh7_0*rxp0_2*x76))+x76+((gclwh0_1*x82*x99))+((gclwh5_11*x167))+((gclwh5_1*x262))+(((-1.0)*gclwh0_1*x264))+(((-1.0)*gclwh15_0*r21*x88))+((gclwh2_0*r20*x88))+((gclwh0_0*pz*x97))+((gclwh9_0*rxp1_2*x76))+((gclwh11_11*x159))+(((-1.0)*gclwh5_9*npz*x76))+(((-1.0)*gclwh13_1*x79*x99))+((gclwh0_1*x174))+(((0.01465534)*gclwh5_1*x85))+(((0.01465534)*gclwh15_1*x97))+(((-1.0)*gclwh2_1*x96))+((gclwh2_1*x260))+(((-1.0)*gclwh2_0*x103*x86))+((gclwh5_0*x341))+(((-1.0)*gclwh5_1*x77*x99))+((gclwh13_9*x138))+(((-1.0)*x77*x78))+(((0.01110916)*gclwh0_1*x97))+(((0.001462135375)*x106))+(((0.01465534)*gclwh13_1*x86))+(((-1.0)*gclwh2_1*x79*x99))+((gclwh13_1*x96))+((gclwh5_1*x190))+(((-0.01110916)*gclwh2_1*x86)));
op[23]=((((-1.0)*x363))+(((-1.0)*x352))+x377+x231);
op[24]=(((x187*x85))+(((-1.0)*x83*x97))+(((3.616)*gclwh8_12*x82))+(((-3.616)*gclwh10_12*x77))+((gclwh10_12*x127))+(((3.616)*gclwh6_12*x79))+x365+(((-1.0)*x86*x90))+(((-1.0)*gclwh8_12*x161))+(((-1.0)*x382))+(((-1.0)*gclwh6_12*x94)));
op[25]=((-1.0)*x354);
op[26]=((0.3811264)+(((0.0957032)*x98))+((gclwh14_14*x141))+(((0.0957032)*x153)));
op[27]=((((-0.051529)*x192))+(((-1.0)*x183*x86))+(((-1.0)*x128*x86))+(((-1.0)*gclwh14_8*x132))+(((-1.0)*x182*x97))+(((-1.0)*gclwh12_8*x114))+((x177*x85))+(((-0.410416)*x101))+(((3.616)*gclwh8_2*x82))+(((0.051529)*x173))+(((-1.0)*gclwh14_2*x145))+(((-1.0)*x139*x97))+(((8.0)*gclwh6_8*x79))+(((-1.0)*gclwh12_2*x110))+(((-1.0)*gclwh8_8*x137))+(((8.0)*gclwh8_8*x82))+(((-1.0)*gclwh4_8*x124))+(((-3.616)*gclwh10_2*x77))+(((-0.023291108)*x89))+(((3.616)*gclwh6_2*x79))+(((-8.0)*gclwh10_8*x77))+((x152*x85))+((gclwh10_2*x127))+(((-1.0)*gclwh8_2*x161)));
op[28]=((((-1.0)*x365))+x382);
op[29]=x354;
op[30]=x355;
op[31]=((((-1.0)*gclwh9_13*x161))+(((-1.0)*gclwh7_13*x94))+(((3.616)*gclwh9_13*x82))+x367+(((-3.616)*gclwh11_13*x77))+(((-1.0)*x155*x86))+(((-1.0)*x381))+((gclwh11_13*x127))+(((3.616)*gclwh7_13*x79))+((x126*x85))+(((-1.0)*x181*x97)));
op[32]=((((-0.051529)*x195))+((x150*x86))+((gclwh11_0*x127))+(((-8.0)*gclwh7_11*x79))+((x148*x97))+(((-3.616)*gclwh11_0*x77))+(((-1.0)*x144*x86))+((gclwh15_11*x132))+(((-1.0)*gclwh13_0*x110))+((gclwh13_11*x114))+((x125*x85))+((gclwh5_11*x124))+(((0.051529)*x91))+((gclwh9_11*x137))+(((8.0)*gclwh11_11*x77))+(((-1.0)*gclwh7_0*x94))+(((-1.0)*gclwh5_0*x166))+(((-1.0)*gclwh15_0*x145))+(((3.616)*gclwh7_0*x79))+(((-1.0)*x168*x97))+(((-1.0)*x135*x85))+(((-0.023291108)*x142))+(((3.616)*gclwh9_0*x82))+(((-8.0)*gclwh9_11*x82)));
op[33]=((0.3811264)+(((0.0957032)*x156))+((gclwh15_15*x141))+(((0.0957032)*x170)));
op[34]=x356;
op[35]=((((-1.0)*x367))+x381);
op[36]=((1.65665032)+((gclwh6_12*x110))+x369+(((-1.0)*gclwh10_12*x166))+(((-1.0)*x333))+(((-1.0)*x334))+(((-1.0)*x332))+(((-1.0)*x249))+((gclwh8_12*x145))+(((-1.0)*x251))+(((-1.0)*x250))+(((-1.0)*x252)));
op[37]=((((-1.0)*x375))+x361);
op[38]=((((0.0054311566)*x113))+(((-0.8432)*gclwh12_14*x79))+(((0.0054311566)*gclwh12_14*r20))+(((0.0054311566)*x151))+(((-0.8432)*gclwh4_14*x77))+((x169*x86))+((x123*x85))+((x105*x97))+(((-0.8432)*gclwh14_14*x82)));
op[39]=((0.04443664)+(((-1.0)*gclwh4_2*x127))+(((-1.0)*gclwh14_8*x137))+(((-1.0)*x120*x86))+((gclwh6_2*x110))+(((8.0)*gclwh14_8*x82))+(((-4.0)*x259))+(((-0.051529)*x134))+(((8.0)*gclwh4_8*x77))+(((-1.0)*gclwh3_2*x94))+(((-1.0)*gclwh12_2*x94))+(((-1.808)*gclwh12_2*x86))+(((-3.616)*gclwh3_2*x79))+(((3.616)*gclwh12_2*x79))+(((-1.808)*gclwh4_2*x85))+(((-1.808)*gclwh1_2*x97))+((gclwh6_8*x114))+(((3.616)*gclwh4_2*x77))+(((1.808)*gclwh3_2*x86))+((gclwh8_2*x145))+(((-1.0)*gclwh10_2*x166))+(((-1.0)*gclwh14_2*x161))+(((8.0)*gclwh12_8*x79))+(((3.616)*gclwh14_2*x82))+((gclwh8_8*x132))+(((0.023291108)*x121))+(((3.616)*gclwh1_2*x82))+(((-1.0)*gclwh10_8*x124))+(((-1.808)*gclwh14_2*x97))+(((-0.051529)*x164))+(((-1.0)*x104*x85)));
op[40]=((((-1.0)*x369))+x380);
op[41]=x384;
op[42]=((((-1.0)*x376))+x362);
op[43]=((1.65665032)+(((-1.0)*gclwh9_13*x145))+(((-1.0)*x370))+x379+(((-1.0)*gclwh7_13*x110))+((gclwh11_13*x166)));
IkReal x388=pz*pz;
IkReal x389=pp*pp;
IkReal x390=((0.227)*pz);
IkReal x391=(npz*pz);
IkReal x392=((2.0)*gclwh5_11);
IkReal x393=((0.454)*rxp2_2);
IkReal x394=((0.011645554)*r22);
IkReal x395=(npy*pz);
IkReal x396=((0.205208)*rxp2_2);
IkReal x397=(pp*r22);
IkReal x398=(pp*r20);
IkReal x399=(npx*pz);
IkReal x400=((0.227)*rxp1_2);
IkReal x401=((0.01288225)*pz);
IkReal x402=(gclwh6_2*r20);
IkReal x403=((0.011645554)*r20);
IkReal x404=((0.454)*rxp0_2);
IkReal x405=((2.28413886525e-5)*r20);
IkReal x406=(pp*r21);
IkReal x407=((2.0)*gclwh14_8);
IkReal x408=((0.0239258)*rxp2_2);
IkReal x409=((2.0)*pp);
IkReal x410=((2.0)*gclwh7_11);
IkReal x411=((4.0)*gclwh15_11);
IkReal x412=((0.01288225)*r21);
IkReal x413=((1.0)*pz);
IkReal x414=(gclwh15_9*r21);
IkReal x415=((0.227)*rxp0_2);
IkReal x416=((0.01288225)*r22);
IkReal x417=((0.0239258)*rxp0_2);
IkReal x418=((0.00135778915)*r20);
IkReal x419=((0.001462135375)*r22);
IkReal x420=((0.0478516)*rxp1_2);
IkReal x421=(gclwh14_14*r21);
IkReal x422=((0.2108)*gclwh14_14);
IkReal x423=((0.454)*rxp1_2);
IkReal x424=(gclwh9_0*pz);
IkReal x425=(gclwh14_3*rxp1_2);
IkReal x426=((0.18510554057)*rxp0_2);
IkReal x427=(gclwh13_0*rxp0_2);
IkReal x428=((2.0)*gclwh13_11);
IkReal x429=(gclwh13_11*r20);
IkReal x430=(gclwh5_9*rxp2_2);
IkReal x431=((0.205208)*rxp0_2);
IkReal x432=((0.4216)*gclwh13_15);
IkReal x433=(gclwh5_1*rxp2_2);
IkReal x434=(gclwh8_2*pz);
IkReal x435=((0.001462135375)*r20);
IkReal x436=((2.0)*gclwh9_11);
IkReal x437=(gclwh9_0*r21);
IkReal x438=(gclwh5_1*r22);
IkReal x439=((0.2108)*gclwh15_15);
IkReal x440=((0.0257645)*r20);
IkReal x441=((0.023291108)*r21);
IkReal x442=(gclwh2_0*r20);
IkReal x443=((0.0239258)*rxp1_2);
IkReal x444=((0.2108)*gclwh12_14);
IkReal x445=((0.205208)*rxp1_2);
IkReal x446=((0.0027155783)*r22);
IkReal x447=((0.0478516)*rxp0_2);
IkReal x448=((0.0478516)*rxp2_2);
IkReal x449=((0.00135778915)*r21);
IkReal x450=((0.00135778915)*r22);
IkReal x451=((0.227)*rxp2_2);
IkReal x452=((2.0)*gclwh4_8);
IkReal x453=((0.2108)*gclwh4_14);
IkReal x454=((0.011645554)*r21);
IkReal x455=(gclwh4_3*rxp2_2);
IkReal x456=((0.00040249143)*rxp0_2);
IkReal x457=((0.01288225)*r20);
IkReal x458=((0.4216)*gclwh15_15);
IkReal x459=(gclwh15_11*r21);
IkReal x460=(gclwh14_2*pz);
IkReal x461=((2.0)*gclwh10_8);
IkReal x462=(gclwh7_0*rxp0_2);
IkReal x463=((2.28413886525e-5)*r21);
IkReal x464=(gclwh13_15*r20);
IkReal x465=((2.0)*gclwh11_11);
IkReal x466=((0.0257645)*r22);
IkReal x467=((0.2108)*gclwh5_15);
IkReal x468=(gclwh11_0*rxp2_2);
IkReal x469=((2.0)*gclwh6_8);
IkReal x470=(gclwh4_10*rxp2_2);
IkReal x471=((0.4216)*gclwh5_15);
IkReal x472=((2.0)*gclwh12_8);
IkReal x473=((2.0)*gclwh15_11);
IkReal x474=((0.2108)*gclwh13_15);
IkReal x475=(gclwh5_0*r22);
IkReal x476=(gclwh12_10*rxp0_2);
IkReal x477=(gclwh15_15*r21);
IkReal x478=((2.0)*gclwh8_8);
IkReal x479=((4.0)*gclwh5_11);
IkReal x480=((0.0257645)*r21);
IkReal x481=(gclwh13_0*r20);
IkReal x482=(gclwh4_3*r22);
IkReal x483=(gclwh15_9*rxp1_2);
IkReal x484=(gclwh15_1*rxp1_2);
IkReal x485=(gclwh13_9*rxp0_2);
IkReal x486=(gclwh14_10*rxp1_2);
IkReal x487=((4.0)*gclwh13_11);
IkReal x488=(gclwh10_5*x450);
IkReal x489=(gclwh14_14*x443);
IkReal x490=(gclwh4_14*x408);
IkReal x491=(gclwh12_14*x417);
IkReal x492=(gclwh6_5*x418);
IkReal x493=(gclwh8_5*x449);
IkReal x494=(gclwh10_8*x416);
IkReal x495=(gclwh8_8*x412);
IkReal x496=(gclwh6_8*x457);
IkReal x497=(gclwh14_8*x400);
IkReal x498=(gclwh12_8*x415);
IkReal x499=(gclwh4_8*x451);
IkReal x500=(gclwh15_11*x400);
IkReal x501=(gclwh13_11*x415);
IkReal x502=(gclwh9_11*x412);
IkReal x503=(gclwh7_11*x457);
IkReal x504=(gclwh5_11*x451);
IkReal x505=(gclwh11_11*x416);
IkReal x506=(gclwh5_15*x408);
IkReal x507=(gclwh11_7*x450);
IkReal x508=(gclwh13_15*x417);
IkReal x509=(gclwh15_15*x443);
IkReal x510=(gclwh9_7*x449);
IkReal x511=(gclwh7_7*x418);
IkReal x512=(gclwh12_14*x418);
IkReal x513=((0.00135778915)*x421);
IkReal x514=(gclwh6_5*x417);
IkReal x515=(gclwh8_5*x443);
IkReal x516=(gclwh4_14*x450);
IkReal x517=(gclwh10_5*x408);
IkReal x518=(gclwh11_11*x393);
IkReal x519=((0.0257645)*x429);
IkReal x520=(gclwh5_11*x466);
IkReal x521=((0.0257645)*x459);
IkReal x522=(gclwh9_11*x423);
IkReal x523=(gclwh7_11*x404);
IkReal x524=(gclwh11_7*x408);
IkReal x525=(gclwh13_15*x418);
IkReal x526=(gclwh5_15*x450);
IkReal x527=(gclwh15_15*x449);
IkReal x528=(gclwh9_7*x443);
IkReal x529=(gclwh7_7*x417);
IkReal x530=(r20*x389);
IkReal x531=(pp*x415);
IkReal x532=((2.0)*x388);
IkReal x533=(r21*x389);
IkReal x534=((0.1054)*gclwh10_5*x397);
IkReal x535=((0.2108)*gclwh6_5*x399);
IkReal x536=((0.2108)*gclwh8_5*x395);
IkReal x537=((0.2108)*gclwh10_5*x391);
IkReal x538=((0.1054)*gclwh8_5*x406);
IkReal x539=((0.1054)*gclwh6_5*x398);
IkReal x540=(x401*x402);
IkReal x541=(gclwh14_2*rxp1_2*x390);
IkReal x542=(gclwh6_2*pz*x398);
IkReal x543=(gclwh12_2*rxp0_2*x390);
IkReal x544=(gclwh8_2*r21*x401);
IkReal x545=(x406*x434);
IkReal x546=(gclwh4_2*rxp2_2*x390);
IkReal x547=(x399*x469);
IkReal x548=(x395*x478);
IkReal x549=(gclwh14_3*pp*x400);
IkReal x550=(gclwh10_2*r22*x401);
IkReal x551=(gclwh4_3*pp*x451);
IkReal x552=(x391*x461);
IkReal x553=(gclwh12_3*x531);
IkReal x554=(gclwh7_0*r20*x401);
IkReal x555=(gclwh5_0*rxp2_2*x390);
IkReal x556=(gclwh7_0*pz*x398);
IkReal x557=(gclwh15_0*rxp1_2*x390);
IkReal x558=(x390*x427);
IkReal x559=(x401*x437);
IkReal x560=(x391*x465);
IkReal x561=(x406*x424);
IkReal x562=(gclwh11_0*r22*x401);
IkReal x563=(gclwh13_1*x531);
IkReal x564=(x395*x436);
IkReal x565=(x399*x410);
IkReal x566=(gclwh15_1*pp*x400);
IkReal x567=((0.227)*pp*x433);
IkReal x568=((0.2108)*gclwh7_7*x399);
IkReal x569=((0.1054)*gclwh11_7*x397);
IkReal x570=((0.2108)*gclwh9_7*x395);
IkReal x571=((0.1054)*gclwh9_7*x406);
IkReal x572=((0.1054)*gclwh7_7*x398);
IkReal x573=((0.2108)*gclwh11_7*x391);
IkReal x574=((0.1054)*gclwh12_14*x398);
IkReal x575=((0.1054)*gclwh4_14*x397);
IkReal x576=((0.1054)*gclwh14_14*x406);
IkReal x577=(x399*x444);
IkReal x578=(x391*x453);
IkReal x579=(x395*x422);
IkReal x580=(x406*x473);
IkReal x581=(x392*x397);
IkReal x582=(x398*x428);
IkReal x583=(x395*x411);
IkReal x584=(x391*x479);
IkReal x585=(x399*x487);
IkReal x586=(x391*x467);
IkReal x587=(x399*x474);
IkReal x588=(x395*x439);
IkReal x589=((0.1054)*gclwh5_15*x397);
IkReal x590=((0.1054)*gclwh13_15*x398);
IkReal x591=((0.1054)*gclwh15_15*x406);
IkReal x592=(npz*x532);
IkReal x593=(gclwh10_2*x592);
IkReal x594=(gclwh10_2*x397*x413);
IkReal x595=(gclwh6_2*npx*x532);
IkReal x596=(gclwh8_2*npy*x532);
IkReal x597=(gclwh9_1*x395*x409);
IkReal x598=(gclwh11_0*x592);
IkReal x599=(gclwh7_0*npx*x532);
IkReal x600=(gclwh11_0*x397*x413);
IkReal x601=((1.0)*gclwh9_1*x533);
IkReal x602=(gclwh9_0*npy*x532);
IkReal x603=(x515+x514);
IkReal x604=(x528+x529);
IkReal x605=(x489+x490+x491);
IkReal x606=(x508+x509+x506);
IkReal x607=(x494+x547+x548);
IkReal x608=(x505+x564+x565);
IkReal x609=x362;
IkReal x610=(x579+x578+x577);
IkReal x611=(x586+x587+x588);
IkReal x612=(x488+x535+x534+x536);
IkReal x613=(x507+x570+x568+x569);
IkReal x614=(x522+x523+x583+x584+x585);
IkReal x615=(x511+x510+x571+x573+x572);
IkReal x616=(x492+x493+x537+x539+x538);
IkReal x617=(x498+x499+x496+x497+x495+x552);
IkReal x618=(x500+x501+x502+x503+x504+x560);
IkReal x619=x376;
IkReal x620=(x526+x527+x525+x589+x591+x590);
IkReal x621=(x516+x513+x512+x575+x574+x576);
IkReal x622=(x520+x521+x519+x518+x580+x581+x582);
IkReal x623=(x553+x551+x550+x549+x596+x595+x594);
IkReal x624=(x544+x545+x546+x540+x541+x542+x543+x593);
IkReal x625=(x566+x567+x562+x563+x599+x602+x601+x600);
IkReal x626=(x559+x558+x557+x556+x555+x554+x561+x597+x598);
op[44]=((-0.04443664)+(((-0.023291108)*x442))+(((-1.0)*x406*x411))+(((8.0)*gclwh5_11*x391))+(((-3.616)*gclwh13_0*x399))+((gclwh15_0*x441))+(((-3.616)*gclwh2_0*x399))+(((-1.0)*x397*x479))+(((-0.051529)*x429))+(((-0.410416)*gclwh9_0*rxp1_2))+(((-1.0)*x398*x487))+(((0.908)*gclwh7_11*rxp0_2))+(((-3.616)*gclwh15_0*x395))+(((1.808)*gclwh2_0*x398))+(((1.808)*gclwh15_0*x406))+(((8.0)*gclwh15_11*x395))+(((1.808)*gclwh13_0*x398))+(((-3.616)*gclwh5_0*x391))+(((8.0)*gclwh13_11*x399))+(((0.023291108)*x475))+((gclwh0_0*x441))+(((-0.051529)*x459))+(((-0.908)*gclwh11_11*rxp2_2))+(((1.808)*gclwh5_0*x397))+(((-0.051529)*gclwh5_11*r22))+(((-0.410416)*x462))+(((3.616)*gclwh0_0*x395))+(((0.410416)*x468))+(((0.023291108)*x481))+(((-1.808)*gclwh0_0*x406))+(((0.908)*gclwh9_11*rxp1_2)));
op[45]=((((-0.0054311566)*x477))+(((-1.0)*x397*x471))+(((-0.0054311566)*gclwh5_15*r22))+(((0.8432)*gclwh13_15*x399))+(((0.8432)*gclwh5_15*x391))+(((-1.0)*x398*x432))+(((0.8432)*gclwh15_15*x395))+(((-1.0)*x406*x458))+(((-0.0054311566)*x464)));
op[46]=(x619+(((-1.0)*x609)));
op[47]=((-0.02221832)+(((-1.0)*x622))+x614);
op[48]=((-0.1905632)+(((-1.0)*x616))+x612+(((-1.0)*x605)));
op[49]=((((-1.0)*gclwh10_2*x394))+((gclwh14_2*x445))+(((-0.904)*gclwh10_2*x397))+(((-1.808)*gclwh6_2*x399))+(((-1.0)*x623))+(((0.904)*gclwh8_2*x406))+(((0.18510554057)*x425))+(((1.808)*gclwh10_2*x391))+((gclwh6_8*x398))+(((0.1794435)*x486))+(((-1.808)*gclwh8_2*x395))+x617+x624+(((0.18510554057)*x455))+(((-1.0)*x607))+(((-1.0)*gclwh10_8*x397))+(((0.904)*gclwh6_2*x398))+((gclwh8_8*x406))+(((0.1794435)*x470))+(((0.1794435)*x476))+((gclwh4_2*x396))+((gclwh12_3*x426))+((gclwh12_2*x431))+((gclwh8_2*x454))+(((0.011645554)*x402)));
op[50]=((((4.0)*gclwh8_8*x395))+(((-1.0)*gclwh6_12*x403))+((gclwh10_8*x466))+(((-0.904)*gclwh6_12*x398))+(((4.0)*gclwh6_8*x399))+(((-0.904)*gclwh8_12*x406))+(((0.904)*gclwh10_12*x397))+(((-1.0)*gclwh4_10*x396))+(((-1.0)*gclwh8_12*x454))+((x397*x461))+(((1.808)*gclwh8_12*x395))+((gclwh10_12*x394))+(((-1.0)*gclwh12_10*x431))+(((-1.0)*gclwh6_8*x440))+(((-1.0)*gclwh4_8*x393))+(((-1.0)*gclwh14_8*x423))+(((-1.0)*x406*x478))+(((-4.0)*gclwh10_8*x391))+(((-1.0)*gclwh14_10*x445))+(((1.808)*gclwh6_12*x399))+(((-1.0)*x398*x469))+(((-1.0)*gclwh12_8*x404))+(((-1.808)*gclwh10_12*x391))+(((-1.0)*gclwh8_8*x480)));
op[51]=((((-1.0)*gclwh12_14*x447))+(((-1.0)*gclwh14_14*x420))+(((-1.0)*gclwh4_14*x448)));
op[52]=((((-1.0)*x616))+x605+x612);
op[53]=((((-0.0257645)*x470))+(((-0.0257645)*x476))+(((-0.00040249143)*x425))+(((-1.0)*gclwh6_8*x398))+(((-1.0)*x623))+((gclwh10_8*x397))+(((-1.0)*x617))+x607+x624+(((-0.0257645)*x486))+(((-1.0)*gclwh8_8*x406))+(((-0.00040249143)*x455))+(((-1.0)*gclwh12_3*x456)));
op[54]=(((gclwh7_0*x403))+(((-0.2309725)*x430))+(((-1.63088582)*gclwh9_1*x395))+(((0.205208)*x427))+(((0.80256066)*gclwh9_1*x406))+(((0.904)*gclwh7_0*x398))+(((0.0105047394273475)*gclwh9_1*r21))+((gclwh15_0*x445))+(((0.904)*gclwh9_0*x406))+(((-1.0)*gclwh9_11*x406))+(((-1.0)*x625))+(((1.808)*gclwh11_0*x391))+(((-1.0)*gclwh11_0*x394))+(((0.18510554057)*x433))+((gclwh11_11*x397))+(((-1.0)*x618))+((gclwh5_0*x396))+(((-0.904)*gclwh11_0*x397))+x608+x626+(((-1.808)*gclwh7_0*x399))+(((0.011645554)*x437))+(((-1.0)*gclwh7_11*x398))+(((0.18510554057)*x484))+((gclwh13_1*x426))+(((-1.808)*gclwh9_0*x395))+(((-0.2309725)*x485))+(((-0.2309725)*x483)));
op[55]=((-0.1905632)+(((-1.0)*x615))+x613+(((-1.0)*x606)));
op[56]=(((gclwh13_15*x447))+((gclwh15_15*x420))+((gclwh5_15*x448)));
op[57]=((((-4.0)*gclwh11_11*x391))+(((-0.904)*gclwh7_13*x398))+(((-1.0)*gclwh15_9*x445))+(((-1.808)*gclwh11_13*x391))+(((-1.0)*gclwh5_9*x396))+((gclwh11_11*x466))+(((-1.0)*gclwh7_13*x403))+(((4.0)*gclwh9_11*x395))+(((-1.0)*gclwh9_13*x454))+(((0.904)*gclwh11_13*x397))+(((-1.0)*x406*x436))+((gclwh11_13*x394))+(((-1.0)*gclwh13_9*x431))+(((-1.0)*gclwh9_11*x480))+((x397*x465))+(((-1.0)*x398*x410))+(((-1.0)*gclwh13_11*x404))+(((1.808)*gclwh9_13*x395))+(((-0.904)*gclwh9_13*x406))+(((1.808)*gclwh7_13*x399))+(((-1.0)*gclwh5_11*x393))+(((-1.0)*gclwh7_11*x440))+(((4.0)*gclwh7_11*x399))+(((-1.0)*gclwh15_11*x423)));
op[58]=((((-0.00040249143)*x433))+(((-1.0)*gclwh13_1*x456))+(((-1.0)*gclwh11_11*x397))+(((-1.0)*x625))+(((-0.0257645)*x430))+(((-1.0)*gclwh9_1*x463))+x618+x626+(((-0.0257645)*x483))+(((-0.0257645)*x485))+(((-1.0)*x608))+(((-0.00040249143)*x484))+((gclwh9_11*x406))+((gclwh7_11*x398))+(((-0.01465534)*gclwh9_1*x406))+(((0.00354618)*gclwh9_1*x395)));
op[59]=((((-1.0)*x615))+x606+x613);
op[60]=((((-1.0)*x621))+x603+x610+(((-1.0)*x517)));
op[61]=((0.80610684)+(((0.010183418625)*gclwh12_10*r20))+(((0.205208)*gclwh10_2*rxp2_2))+(((0.011645554)*gclwh3_2*r20))+((gclwh14_2*pp*pz*r21))+(((-0.011645554)*gclwh1_2*r21))+(((-1.63088582)*gclwh14_3*npy*pz))+(((0.011645554)*gclwh4_2*r22))+(((0.7905)*gclwh12_10*pp*r20))+(((2.0)*gclwh4_3*npz*pp*pz))+(((0.7905)*gclwh14_10*pp*r21))+(((0.011645554)*gclwh14_2*r21))+(((0.0105047394273475)*gclwh12_3*r20))+(((-2.0)*gclwh1_2*npy*(pz*pz)))+(((-0.01288225)*gclwh1_2*pz*r21))+(((-1.808)*gclwh12_2*npx*pz))+(((0.904)*gclwh12_2*pp*r20))+(((0.0105047394273475)*gclwh14_3*r21))+(((-1.808)*gclwh1_2*npy*pz))+(((-2.0)*gclwh4_8*npz*pz))+((gclwh1_2*pp*pz*r21))+(((-0.205208)*gclwh8_2*rxp1_2))+(((2.0)*gclwh3_2*npx*(pz*pz)))+(((-0.0105047394273475)*gclwh1_3*r21))+(((0.904)*gclwh4_2*pp*r22))+(((-2.0)*gclwh14_2*npy*(pz*pz)))+(((-2.0)*gclwh14_8*npy*pz))+(((1.808)*gclwh3_2*npx*pz))+(((-0.82832516)*gclwh3_3*pp*r20))+(((0.010183418625)*gclwh4_10*r22))+((gclwh3_3*r20*(pp*pp)))+(((-2.0)*gclwh12_2*npx*(pz*pz)))+(((0.0105047394273475)*gclwh4_3*r22))+(((-1.0)*gclwh12_3*r20*(pp*pp)))+(((0.010183418625)*gclwh14_10*r21))+(((0.01288225)*gclwh4_2*pz*r22))+((gclwh14_8*pp*r21))+(((-1.63088582)*gclwh12_3*npx*pz))+(((0.0105047394273475)*gclwh3_3*r20))+(((-0.227)*gclwh8_2*pz*rxp1_2))+(((0.227)*pz))+(((0.904)*gclwh1_2*pp*r21))+((gclwh12_8*pp*r20))+(((-0.227)*gclwh6_2*pz*rxp0_2))+(((0.01288225)*gclwh14_2*pz*r21))+(((-0.227)*gclwh6_8*rxp0_2))+(((-1.581)*gclwh12_10*npx*pz))+(((-1.0)*gclwh4_3*r22*(pp*pp)))+(((-0.227)*gclwh8_8*rxp1_2))+(((-1.0)*gclwh3_2*pp*pz*r20))+(((-1.581)*gclwh4_10*npz*pz))+(((-2.0)*gclwh3_3*npx*pp*pz))+(((1.63088582)*gclwh3_3*npx*pz))+(((0.01288225)*gclwh3_2*pz*r20))+(((-1.63088582)*gclwh1_3*npy*pz))+(((0.80256066)*gclwh14_3*pp*r21))+(((0.904)*gclwh14_2*pp*r21))+(((0.011645554)*gclwh12_2*r20))+(((2.0)*gclwh14_3*npy*pp*pz))+(((0.227)*gclwh10_8*rxp2_2))+(((-0.205208)*gclwh6_2*rxp0_2))+(((0.82832516)*gclwh1_3*pp*r21))+(((0.7905)*gclwh4_10*pp*r22))+(((0.80256066)*gclwh12_3*pp*r20))+(((-1.808)*gclwh4_2*npz*pz))+(((0.01288225)*gclwh12_2*pz*r20))+(((-1.581)*gclwh14_10*npy*pz))+(((-1.0)*gclwh14_3*r21*(pp*pp)))+(((-0.904)*gclwh3_2*pp*r20))+(((-1.808)*gclwh14_2*npy*pz))+(((2.0)*gclwh1_3*npy*pp*pz))+(((0.01288225)*gclwh4_8*r22))+(((0.01288225)*gclwh14_8*r21))+(((0.227)*gclwh10_2*pz*rxp2_2))+(((-2.0)*gclwh12_8*npx*pz))+(((0.01288225)*gclwh12_8*r20))+(((-1.0)*gclwh1_3*r21*(pp*pp)))+((gclwh4_8*pp*r22))+(((2.0)*gclwh12_3*npx*pp*pz))+((gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_2*npz*(pz*pz)))+((gclwh12_2*pp*pz*r20))+(((0.80256066)*gclwh4_3*pp*r22))+(((-1.63088582)*gclwh4_3*npz*pz)));
op[62]=((0.02221832)+(((-0.904)*gclwh12_10*x398))+(((1.808)*gclwh4_10*x391))+(((4.0)*gclwh4_8*x391))+(((-1.0)*x397*x452))+(((-1.0)*x406*x407))+(((-1.0)*gclwh10_8*x393))+((gclwh8_8*x423))+(((-0.904)*gclwh14_10*x406))+(((-0.904)*gclwh4_10*x397))+(((1.808)*gclwh12_10*x399))+((gclwh6_8*x404))+(((-1.0)*gclwh14_8*x480))+(((-1.0)*gclwh4_8*x466))+(((-1.0)*gclwh12_10*x403))+(((-1.0)*gclwh4_10*x394))+((gclwh8_12*x445))+(((4.0)*gclwh14_8*x395))+(((-1.0)*gclwh12_8*x440))+(((1.808)*gclwh14_10*x395))+(((4.0)*gclwh12_8*x399))+(((-1.0)*gclwh14_10*x454))+((gclwh6_12*x431))+(((-1.0)*gclwh10_12*x396))+(((-1.0)*x398*x472)));
op[63]=((((0.4216)*gclwh12_14*x399))+(((-1.0)*x397*x453))+(((0.4216)*gclwh4_14*x391))+(((-0.0027155783)*gclwh12_14*r20))+(((0.4216)*gclwh14_14*x395))+(((-1.0)*x406*x422))+(((-0.0027155783)*x421))+(((-1.0)*x398*x444))+(((-1.0)*gclwh4_14*x446)));
op[64]=((((-1.0)*x610))+x603+x621+(((-1.0)*x517)));
op[65]=((0.01110916)+(((0.00354618)*gclwh1_3*x395))+(((-1.0)*gclwh12_3*x530))+((gclwh4_3*x391*x409))+(((-1.0)*gclwh4_8*x416))+((gclwh14_3*x395*x409))+(((-0.1135)*gclwh12_10*x398))+(((0.00354618)*gclwh12_3*x399))+((gclwh4_2*r22*x401))+((x406*x460))+(((-1.0)*gclwh8_2*rxp1_2*x390))+(((-0.1135)*gclwh14_10*x406))+((gclwh4_10*npz*x390))+(((-1.0)*gclwh12_8*x398))+(((-1.0)*gclwh4_2*x592))+((x399*x472))+(((-1.0)*gclwh12_3*x405))+(((-0.01465534)*gclwh12_3*x398))+((gclwh4_2*pz*x397))+(((-1.0)*gclwh14_3*x533))+(((-1.0)*gclwh14_8*x412))+(((-1.0)*gclwh10_8*x451))+(((0.00354618)*gclwh14_3*x395))+(((-1.0)*gclwh4_10*x419))+(((-1.0)*gclwh14_8*x406))+((x391*x452))+(((-1.0)*gclwh1_2*r21*x401))+(((-1.0)*gclwh3_2*x398*x413))+((gclwh14_10*npy*x390))+(((-1.0)*gclwh3_3*x399*x409))+((gclwh6_8*x415))+(((0.00354618)*gclwh4_3*x391))+((gclwh3_2*r20*x401))+(((-1.0)*gclwh12_8*x457))+(((-1.0)*x389*x482))+(((-0.01465534)*gclwh4_3*x397))+x390+((gclwh12_3*x399*x409))+((gclwh10_2*rxp2_2*x390))+(((-1.0)*gclwh4_8*x397))+(((-0.01110916)*gclwh3_3*x398))+((gclwh12_2*r20*x401))+((gclwh12_2*pz*x398))+(((-1.0)*gclwh14_2*npy*x532))+((gclwh1_3*x463))+(((-1.0)*gclwh12_10*x435))+(((0.01110916)*gclwh1_3*x406))+((x395*x407))+(((-1.0)*gclwh14_3*x463))+(((-1.0)*gclwh6_2*rxp0_2*x390))+(((-0.01465534)*gclwh14_3*x406))+(((-1.0)*gclwh3_3*x405))+((gclwh1_3*x395*x409))+(((-0.1135)*gclwh4_10*x397))+((gclwh8_8*x400))+(((-1.0)*gclwh12_2*npx*x532))+((gclwh14_2*r21*x401))+(((-0.001462135375)*gclwh14_10*r21))+(((-0.00354618)*gclwh3_3*x399))+((gclwh3_3*x530))+(((-1.0)*gclwh1_2*npy*x532))+(((-1.0)*gclwh1_3*x533))+((gclwh1_2*pz*x406))+((gclwh12_10*npx*x390))+((gclwh3_2*npx*x532))+(((-2.28413886525e-5)*x482)));
op[66]=((-0.80610684)+(((-0.01288225)*gclwh15_0*pz*r21))+(((-2.035)*gclwh13_9*npx*pz))+(((1.808)*gclwh15_0*npy*pz))+(((0.01288225)*gclwh13_11*r20))+(((-0.227)*gclwh11_0*pz*rxp2_2))+(((0.0105047394273475)*gclwh2_1*r20))+(((1.0175)*gclwh15_9*pp*r21))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((0.18510554057)*gclwh9_1*rxp1_2))+(((-0.904)*gclwh5_0*pp*r22))+(((-2.0)*gclwh15_11*npy*pz))+(((0.013107689375)*gclwh13_9*r20))+(((-0.011645554)*gclwh0_0*r21))+(((-0.904)*gclwh13_0*pp*r20))+(((0.01288225)*gclwh15_11*r21))+(((-2.0)*gclwh13_11*npx*pz))+(((0.227)*gclwh11_11*rxp2_2))+(((-0.0105047394273475)*gclwh15_1*r21))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((-0.011645554)*gclwh5_0*r22))+(((-0.80256066)*gclwh15_1*pp*r21))+(((1.63088582)*gclwh2_1*npx*pz))+((gclwh13_1*r20*(pp*pp)))+(((2.0)*gclwh13_0*npx*(pz*pz)))+(((-0.011645554)*gclwh15_0*r21))+(((-0.01288225)*gclwh0_0*pz*r21))+(((0.205208)*gclwh9_0*rxp1_2))+((gclwh0_0*pp*pz*r21))+(((-0.80256066)*gclwh13_1*pp*r20))+(((-0.0105047394273475)*gclwh0_1*r21))+(((1.63088582)*gclwh15_1*npy*pz))+(((-2.0)*gclwh2_1*npx*pp*pz))+(((-0.227)*gclwh9_11*rxp1_2))+(((1.0175)*gclwh5_9*pp*r22))+((gclwh15_11*pp*r21))+(((2.0)*gclwh0_1*npy*pp*pz))+(((0.011645554)*gclwh2_0*r20))+(((0.904)*gclwh0_0*pp*r21))+(((-0.904)*gclwh15_0*pp*r21))+(((-2.0)*gclwh15_1*npy*pp*pz))+(((-0.227)*gclwh7_11*rxp0_2))+(((1.808)*gclwh5_0*npz*pz))+(((1.0175)*gclwh13_9*pp*r20))+(((0.013107689375)*gclwh5_9*r22))+(((-1.808)*gclwh0_0*npy*pz))+(((-0.01288225)*gclwh13_0*pz*r20))+(((2.0)*gclwh15_0*npy*(pz*pz)))+(((2.0)*gclwh2_0*npx*(pz*pz)))+(((-0.80256066)*gclwh5_1*pp*r22))+(((0.227)*pz))+(((-0.205208)*gclwh11_0*rxp2_2))+(((1.63088582)*gclwh13_1*npx*pz))+(((-2.0)*gclwh5_11*npz*pz))+(((0.82832516)*gclwh0_1*pp*r21))+(((-0.0105047394273475)*gclwh5_1*r22))+(((1.808)*gclwh13_0*npx*pz))+(((-1.0)*gclwh2_0*pp*pz*r20))+(((-0.82832516)*gclwh2_1*pp*r20))+(((-0.0105047394273475)*gclwh13_1*r20))+((gclwh2_1*r20*(pp*pp)))+(((-1.0)*gclwh5_0*pp*pz*r22))+((gclwh5_11*pp*r22))+(((-1.0)*gclwh13_0*pp*pz*r20))+(((0.227)*gclwh9_0*pz*rxp1_2))+(((-2.0)*gclwh0_0*npy*(pz*pz)))+(((1.63088582)*gclwh5_1*npz*pz))+(((-0.904)*gclwh2_0*pp*r20))+(((-0.01288225)*gclwh5_0*pz*r22))+((gclwh13_11*pp*r20))+(((-2.035)*gclwh5_9*npz*pz))+(((-2.035)*gclwh15_9*npy*pz))+(((-0.227)*gclwh9_1*pp*rxp1_2))+(((-1.63088582)*gclwh0_1*npy*pz))+((gclwh5_1*r22*(pp*pp)))+(((-1.0)*gclwh15_0*pp*pz*r21))+(((-1.0)*gclwh0_1*r21*(pp*pp)))+(((1.808)*gclwh2_0*npx*pz))+(((-2.0)*gclwh13_1*npx*pp*pz))+(((0.227)*gclwh7_0*pz*rxp0_2))+(((0.01288225)*gclwh5_11*r22))+(((0.01288225)*gclwh2_0*pz*r20))+((gclwh15_1*r21*(pp*pp)))+(((0.205208)*gclwh7_0*rxp0_2))+(((0.013107689375)*gclwh15_9*r21))+(((-0.011645554)*gclwh13_0*r20)));
op[67]=(x524+(((-1.0)*x611))+x620+(((-1.0)*x604)));
op[68]=((((-1.0)*x619))+x609);
op[69]=((0.02221832)+(((0.011645554)*x414))+(((0.904)*gclwh5_9*x397))+(((-1.808)*gclwh15_9*x395))+((gclwh11_13*x396))+(((-1.0)*gclwh7_13*x431))+(((-1.0)*x614))+x622+(((0.904)*gclwh15_9*x406))+(((-1.808)*gclwh13_9*x399))+(((0.904)*gclwh13_9*x398))+(((-1.0)*gclwh9_13*x445))+((gclwh5_9*x394))+(((-1.808)*gclwh5_9*x391))+((gclwh13_9*x403)));
op[70]=((-0.01110916)+(((0.01465534)*gclwh5_1*x397))+((x399*x428))+(((-1.0)*gclwh5_11*x397))+(((-1.0)*gclwh0_0*r21*x401))+(((-1.0)*gclwh13_0*x398*x413))+(((-1.0)*gclwh5_0*x397*x413))+((x395*x473))+((gclwh0_1*x395*x409))+(((-1.0)*x401*x481))+((gclwh13_9*x435))+(((0.01465534)*gclwh13_1*x398))+(((-1.0)*gclwh15_9*npy*x390))+(((-0.00354618)*gclwh15_1*x395))+((gclwh0_0*pz*x406))+((x389*x438))+(((-1.0)*gclwh15_11*x406))+(((-1.0)*gclwh13_9*npx*x390))+(((-1.0)*gclwh2_1*x399*x409))+(((-0.00354618)*gclwh5_1*x391))+(((-1.0)*gclwh0_1*x533))+(((0.1135)*gclwh5_9*x397))+(((0.00354618)*gclwh0_1*x395))+(((-1.0)*gclwh2_0*x398*x413))+((gclwh2_1*x530))+(((0.1135)*gclwh13_9*x398))+x390+(((-0.01288225)*x429))+((x391*x392))+(((-1.0)*gclwh2_1*x405))+((gclwh15_0*npy*x532))+(((-1.0)*gclwh0_0*npy*x532))+(((-1.0)*gclwh15_0*x406*x413))+(((0.001462135375)*x414))+(((-0.00040249143)*gclwh9_1*rxp1_2))+((gclwh13_1*x405))+((x401*x442))+(((-1.0)*x390*x468))+(((-0.01110916)*gclwh2_1*x398))+(((-1.0)*gclwh15_1*x395*x409))+(((0.01465534)*gclwh15_1*x406))+((gclwh7_11*x415))+(((0.1135)*gclwh15_9*x406))+((gclwh5_0*x592))+(((2.28413886525e-5)*x438))+((gclwh9_0*rxp1_2*x390))+((gclwh15_1*x463))+(((-1.0)*gclwh13_11*x398))+((gclwh13_0*npx*x532))+((gclwh9_11*x400))+((gclwh2_0*npx*x532))+(((-1.0)*gclwh13_1*x399*x409))+(((-1.0)*gclwh15_11*x412))+((gclwh5_9*x419))+(((0.01110916)*gclwh0_1*x406))+(((-1.0)*gclwh5_11*x416))+(((-1.0)*gclwh9_1*pp*x400))+(((-0.00354618)*gclwh2_1*x399))+(((-1.0)*gclwh15_0*r21*x401))+(((-1.0)*x401*x475))+(((-0.00354618)*gclwh13_1*x399))+(((-1.0)*gclwh5_9*npz*x390))+((gclwh0_1*x463))+(((-1.0)*gclwh11_11*x451))+((gclwh13_1*x530))+((gclwh15_1*x533))+(((-1.0)*gclwh5_1*x391*x409))+((x390*x462)));
op[71]=((((-1.0)*x620))+x524+x611+(((-1.0)*x604)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x627=htj1*htj1;
CheckValue<IkReal> x628=IKPowWithIntegerCheck(((1.0)+x627),-1);
if(!x628.valid){
continue;
}
cj1array[numsolutions]=((x628.value)*(((1.0)+(((-1.0)*x627)))));
CheckValue<IkReal> x629=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x629.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x629.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x630=htj2*htj2;
CheckValue<IkReal> x631=IKPowWithIntegerCheck(((1.0)+x630),-1);
if(!x631.valid){
continue;
}
cj2array[numsolutions]=((x631.value)*(((1.0)+(((-1.0)*x630)))));
CheckValue<IkReal> x632=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x632.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x632.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x633=htj3*htj3;
CheckValue<IkReal> x634=IKPowWithIntegerCheck(((1.0)+x633),-1);
if(!x634.valid){
continue;
}
cj3array[numsolutions]=((x634.value)*(((1.0)+(((-1.0)*x633)))));
CheckValue<IkReal> x635=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x635.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x635.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+5, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+6, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((1.0)+(((-1.0)*(r22*r22))));
j5eval[1]=((r20*r20)+(r21*r21));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x636=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x636);
rxp1_0=(pz*r11);
rxp1_1=(r01*x636);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x637=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x637);
rxp1_0=(pz*r11);
rxp1_1=(r01*x637);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x638=IKPowWithIntegerCheck(cj3,-1);
if(!x638.valid){
continue;
}
CheckValue<IkReal> x639=IKPowWithIntegerCheck(r22,-1);
if(!x639.valid){
continue;
}
sj4array[0]=((x638.value)*(x639.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKcos(j4)));
evalcond[1]=(((sj1*sj2))+((r22*sj3*(IKsin(j4))))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x640=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x640);
rxp1_0=(pz*r11);
rxp1_1=(r01*x640);
IkReal x641=(sj3*sj4);
IkReal x642=((12.0)*r02);
IkReal x643=((8.0)*r10);
IkReal x644=(cj4*sj3);
IkReal x645=((4.0)*cj3);
IkReal x646=((12.0)*r12);
IkReal x647=((4.0)*r01);
IkReal x648=((16.0)*r00);
IkReal x649=(cj3*r11);
IkReal x650=((4.0)*r12);
IkReal x651=((8.0)*r00);
IkReal x652=((16.0)*r10);
IkReal x653=((4.0)*r02);
IkReal x654=(cj3*r01);
IkReal x655=((4.0)*r11);
IkReal x656=(r10*x645);
IkReal x657=(r00*x645);
IkReal x658=(cj2*sj1*sj4);
IkReal x659=(cj1*cj4*sj2);
IkReal x660=(cj1*sj2*sj4);
IkReal x661=(cj2*cj4*sj1);
IkReal x662=(x644*x655);
IkReal x663=(x644*x647);
IkReal x664=(x641*x646);
IkReal x665=(x641*x642);
IkReal x666=(x647*x658);
IkReal x667=(x647*x660);
IkReal x668=(x655*x660);
IkReal x669=(x655*x658);
IkReal x670=(x642*x661);
IkReal x671=(x642*x659);
IkReal x672=(x646*x659);
IkReal x673=(x646*x661);
IkReal x674=(x664+x670);
IkReal x675=(x665+x672);
IkReal x676=(x656+x662+x667);
IkReal x677=(x657+x669+x663);
j5eval[0]=((((0.5)*(IKabs((((x641*x653))+x668+(((-1.0)*x650*x661))+((x650*x659))+(((-1.0)*x677)))))))+(((0.5)*(IKabs(((((-16.0)*x649))+((x648*x660))+((x644*x652))+(((-1.0)*x648*x658)))))))+(((0.5)*(IKabs(((((-1.0)*x668))+x677+x675+(((-1.0)*x673)))))))+(((0.5)*(IKabs(((((-1.0)*x666))+x676+x674+(((-1.0)*x671)))))))+(((0.5)*(IKabs((x668+x675+(((-1.0)*x677))+(((-1.0)*x673)))))))+(IKabs((((x651*x660))+(((-1.0)*x651*x658))+((x643*x644))+(((-8.0)*x649)))))+(IKabs((((x644*x651))+((x643*x658))+(((-1.0)*x643*x660))+(((-8.0)*x654)))))+(((0.5)*(IKabs(((((-16.0)*x654))+((x644*x648))+((x652*x658))+(((-1.0)*x652*x660)))))))+(((0.5)*(IKabs((((x641*x650))+x666+((x653*x661))+(((-1.0)*x653*x659))+(((-1.0)*x676)))))))+(((0.5)*(IKabs((x666+x674+(((-1.0)*x676))+(((-1.0)*x671))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x678=(cj1*sj2);
IkReal x679=(r10*sj4);
IkReal x680=(cj3*r01);
IkReal x681=(cj4*r12);
IkReal x682=(cj2*sj1);
IkReal x683=(cj4*sj3);
IkReal x684=((4.0)*cj3*r00);
IkReal x685=(r02*sj3*sj4);
IkReal x686=((4.0)*r11*sj4);
IkReal x687=((4.0)*r01*x683);
IkReal x688=((12.0)*x685);
IkReal x689=((4.0)*x685);
IkReal x690=(x678*x686);
IkReal x691=(x682*x686);
IkReal x692=((12.0)*x678*x681);
IkReal x693=((12.0)*x681*x682);
IkReal x694=((4.0)*x678*x681);
IkReal x695=((4.0)*x681*x682);
IkReal x696=(x688+x692);
IkReal x697=(x689+x694);
IkReal x698=(x687+x684+x691);
IkReal x699=((((8.0)*r00*x683))+(((-8.0)*x680))+(((8.0)*x679*x682))+(((-8.0)*x678*x679)));
op[0]=(x697+x690+(((-1.0)*x695))+(((-1.0)*x698)));
op[1]=x699;
op[2]=(x696+x690+(((-1.0)*x698))+(((-1.0)*x693)));
op[3]=((((-16.0)*x680))+(((-16.0)*x678*x679))+(((16.0)*x679*x682))+(((16.0)*r00*x683)));
op[4]=(x696+x698+(((-1.0)*x690))+(((-1.0)*x693)));
op[5]=x699;
op[6]=(x697+x698+(((-1.0)*x690))+(((-1.0)*x695)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x700=(cj1*sj2);
IkReal x701=(r00*sj4);
IkReal x702=(cj3*r11);
IkReal x703=((4.0)*sj4);
IkReal x704=(r12*sj3);
IkReal x705=(cj4*r02);
IkReal x706=(cj2*sj1);
IkReal x707=((4.0)*cj3*r10);
IkReal x708=(cj4*r10*sj3);
IkReal x709=((4.0)*cj4*r11*sj3);
IkReal x710=(x703*x704);
IkReal x711=((12.0)*sj4*x704);
IkReal x712=(r01*x700*x703);
IkReal x713=(r01*x703*x706);
IkReal x714=((4.0)*x705*x706);
IkReal x715=((12.0)*x705*x706);
IkReal x716=((12.0)*x700*x705);
IkReal x717=((4.0)*x700*x705);
IkReal x718=(x710+x714);
IkReal x719=(x711+x715);
IkReal x720=(x712+x709+x707);
IkReal x721=((((-8.0)*x702))+(((-8.0)*x701*x706))+(((8.0)*x700*x701))+(((8.0)*x708)));
j5evalpoly[0]=((((htj5*htj5*htj5)*(((((16.0)*x700*x701))+(((16.0)*x708))+(((-16.0)*x702))+(((-16.0)*x701*x706))))))+((x721*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5)*(((((-1.0)*x716))+(((-1.0)*x713))+x719+x720))))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x720))+(((-1.0)*x716))+x719+x713))))+(((-1.0)*x717))+(((-1.0)*x713))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x720))+(((-1.0)*x717))+x718+x713))))+((htj5*x721))+x718+x720);
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x722=(sj4*sj5);
IkReal x723=(cj5*sj4);
IkReal x724=((1.0)*cj4);
if( IKabs(((((-1.0)*r12*x724))+((r10*x722))+((r11*x723)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x724))+((r01*x723))+((r00*x722)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x724))+((r10*x722))+((r11*x723))))+IKsqr(((((-1.0)*r02*x724))+((r01*x723))+((r00*x722))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x724))+((r10*x722))+((r11*x723))), ((((-1.0)*r02*x724))+((r01*x723))+((r00*x722))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x725=IKsin(j0);
IkReal x726=IKcos(j0);
IkReal x727=((1.0)*cj3);
IkReal x728=(r01*sj5);
IkReal x729=(r02*sj4);
IkReal x730=(sj3*sj5);
IkReal x731=((1.0)*r11);
IkReal x732=(cj5*r10);
IkReal x733=(cj4*cj5);
IkReal x734=(cj4*r00);
IkReal x735=(r10*sj5);
IkReal x736=((1.0)*sj2);
IkReal x737=((1.0)*sj4);
IkReal x738=(r12*sj4);
IkReal x739=(r11*sj5);
IkReal x740=(cj5*r00);
IkReal x741=((0.452)*cj2);
IkReal x742=((0.452)*sj2);
IkReal x743=((1.0)*cj2);
IkReal x744=(cj1*x725);
IkReal x745=(sj1*x726);
IkReal x746=(sj1*x725);
IkReal x747=(cj1*x726);
evalcond[0]=((((-1.0)*r00*sj5*x737))+x726+(((-1.0)*cj5*r01*x737))+((cj4*r02)));
evalcond[1]=((((-1.0)*cj5*sj4*x731))+(((-1.0)*x735*x737))+x725+((cj4*r12)));
evalcond[2]=((((-1.0)*x742*x744))+(((0.1135)*x728))+(((0.452)*x746))+(((-1.0)*px))+((x741*x746))+(((0.1054)*x726))+(((-0.1135)*x740)));
evalcond[3]=(((x742*x747))+(((0.1135)*x739))+(((-1.0)*py))+(((-0.452)*x745))+(((-0.1135)*x732))+(((0.1054)*x725))+(((-1.0)*x741*x745)));
evalcond[4]=((((-1.0)*x727*x728))+((cj3*x740))+((sj3*x729))+((cj2*x746))+((r01*sj3*x733))+(((-1.0)*x736*x744))+((x730*x734)));
evalcond[5]=((((-1.0)*x727*x739))+((cj4*r10*x730))+((r11*sj3*x733))+((sj3*x738))+((cj3*x732))+((sj2*x747))+(((-1.0)*x743*x745)));
evalcond[6]=((((-1.0)*x727*x729))+(((-1.0)*r01*x727*x733))+(((-1.0)*sj5*x727*x734))+(((-1.0)*sj3*x728))+((cj2*x744))+((sj3*x740))+((sj2*x746)));
evalcond[7]=((((-1.0)*x727*x738))+(((-1.0)*cj4*x727*x735))+((sj3*x732))+(((-1.0)*r11*x727*x733))+(((-1.0)*x730*x731))+(((-1.0)*x736*x745))+(((-1.0)*x743*x747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x748=IKPowWithIntegerCheck(r22,-1);
if(!x748.valid){
continue;
}
CheckValue<IkReal> x749=IKPowWithIntegerCheck(sj3,-1);
if(!x749.valid){
continue;
}
sj4array[0]=((-1.0)*(x748.value)*(x749.value)*((((sj1*sj2))+((cj1*cj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKcos(j4)));
evalcond[1]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x750=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x750);
rxp1_0=(pz*r11);
rxp1_1=(r01*x750);
IkReal x751=(sj3*sj4);
IkReal x752=((12.0)*r02);
IkReal x753=((8.0)*r10);
IkReal x754=(cj4*sj3);
IkReal x755=((4.0)*cj3);
IkReal x756=((12.0)*r12);
IkReal x757=((4.0)*r01);
IkReal x758=((16.0)*r00);
IkReal x759=(cj3*r11);
IkReal x760=((4.0)*r12);
IkReal x761=((8.0)*r00);
IkReal x762=((16.0)*r10);
IkReal x763=((4.0)*r02);
IkReal x764=(cj3*r01);
IkReal x765=((4.0)*r11);
IkReal x766=(r10*x755);
IkReal x767=(r00*x755);
IkReal x768=(cj2*sj1*sj4);
IkReal x769=(cj1*cj4*sj2);
IkReal x770=(cj1*sj2*sj4);
IkReal x771=(cj2*cj4*sj1);
IkReal x772=(x754*x765);
IkReal x773=(x754*x757);
IkReal x774=(x751*x756);
IkReal x775=(x751*x752);
IkReal x776=(x757*x768);
IkReal x777=(x757*x770);
IkReal x778=(x765*x770);
IkReal x779=(x765*x768);
IkReal x780=(x752*x771);
IkReal x781=(x752*x769);
IkReal x782=(x756*x769);
IkReal x783=(x756*x771);
IkReal x784=(x774+x780);
IkReal x785=(x775+x782);
IkReal x786=(x772+x777+x766);
IkReal x787=(x773+x779+x767);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x781))+x786+x784+(((-1.0)*x776)))))))+(((0.5)*(IKabs(((((-16.0)*x764))+((x762*x768))+(((-1.0)*x762*x770))+((x754*x758)))))))+(((0.5)*(IKabs(((((-1.0)*x786))+(((-1.0)*x781))+x776+x784)))))+(((0.5)*(IKabs(((((-1.0)*x787))+(((-1.0)*x783))+x778+x785)))))+(((0.5)*(IKabs(((((-1.0)*x763*x769))+(((-1.0)*x786))+((x751*x760))+((x763*x771))+x776)))))+(((0.5)*(IKabs(((((-1.0)*x783))+x787+x785+(((-1.0)*x778)))))))+(IKabs(((((-1.0)*x753*x770))+(((-8.0)*x764))+((x753*x768))+((x754*x761)))))+(((0.5)*(IKabs(((((-1.0)*x758*x768))+(((-16.0)*x759))+((x758*x770))+((x754*x762)))))))+(((0.5)*(IKabs(((((-1.0)*x787))+((x760*x769))+((x751*x763))+x778+(((-1.0)*x760*x771)))))))+(IKabs(((((-8.0)*x759))+((x753*x754))+((x761*x770))+(((-1.0)*x761*x768))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x788=(cj1*sj2);
IkReal x789=(r10*sj4);
IkReal x790=(cj3*r01);
IkReal x791=(cj4*r12);
IkReal x792=(cj2*sj1);
IkReal x793=(cj4*sj3);
IkReal x794=((4.0)*cj3*r00);
IkReal x795=(r02*sj3*sj4);
IkReal x796=((4.0)*r11*sj4);
IkReal x797=((4.0)*r01*x793);
IkReal x798=((12.0)*x795);
IkReal x799=((4.0)*x795);
IkReal x800=(x788*x796);
IkReal x801=(x792*x796);
IkReal x802=((12.0)*x788*x791);
IkReal x803=((12.0)*x791*x792);
IkReal x804=((4.0)*x788*x791);
IkReal x805=((4.0)*x791*x792);
IkReal x806=(x798+x802);
IkReal x807=(x799+x804);
IkReal x808=(x794+x797+x801);
IkReal x809=((((8.0)*r00*x793))+(((-8.0)*x788*x789))+(((-8.0)*x790))+(((8.0)*x789*x792)));
op[0]=(x807+x800+(((-1.0)*x808))+(((-1.0)*x805)));
op[1]=x809;
op[2]=(x806+x800+(((-1.0)*x808))+(((-1.0)*x803)));
op[3]=((((16.0)*x789*x792))+(((-16.0)*x790))+(((16.0)*r00*x793))+(((-16.0)*x788*x789)));
op[4]=(x808+x806+(((-1.0)*x803))+(((-1.0)*x800)));
op[5]=x809;
op[6]=(x808+x807+(((-1.0)*x800))+(((-1.0)*x805)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x810=(cj1*sj2);
IkReal x811=(r00*sj4);
IkReal x812=(cj3*r11);
IkReal x813=((4.0)*sj4);
IkReal x814=(r12*sj3);
IkReal x815=(cj4*r02);
IkReal x816=(cj2*sj1);
IkReal x817=((4.0)*cj3*r10);
IkReal x818=(cj4*r10*sj3);
IkReal x819=((4.0)*cj4*r11*sj3);
IkReal x820=(x813*x814);
IkReal x821=((12.0)*sj4*x814);
IkReal x822=(r01*x810*x813);
IkReal x823=(r01*x813*x816);
IkReal x824=((4.0)*x815*x816);
IkReal x825=((12.0)*x815*x816);
IkReal x826=((12.0)*x810*x815);
IkReal x827=((4.0)*x810*x815);
IkReal x828=(x820+x824);
IkReal x829=(x821+x825);
IkReal x830=(x819+x817+x822);
IkReal x831=((((8.0)*x818))+(((-8.0)*x812))+(((-8.0)*x811*x816))+(((8.0)*x810*x811)));
j5evalpoly[0]=(((htj5*x831))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x827))+(((-1.0)*x830))+x828+x823))))+(((htj5*htj5)*(((((-1.0)*x826))+(((-1.0)*x823))+x829+x830))))+(((-1.0)*x827))+(((-1.0)*x823))+(((htj5*htj5*htj5)*(((((16.0)*x810*x811))+(((-16.0)*x812))+(((-16.0)*x811*x816))+(((16.0)*x818))))))+((x831*(htj5*htj5*htj5*htj5*htj5)))+x828+x830+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x826))+(((-1.0)*x830))+x829+x823)))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x832=(sj4*sj5);
IkReal x833=(cj5*sj4);
IkReal x834=((1.0)*cj4);
if( IKabs((((r10*x832))+(((-1.0)*r12*x834))+((r11*x833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x834))+((r00*x832))+((r01*x833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x832))+(((-1.0)*r12*x834))+((r11*x833))))+IKsqr(((((-1.0)*r02*x834))+((r00*x832))+((r01*x833))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x832))+(((-1.0)*r12*x834))+((r11*x833))), ((((-1.0)*r02*x834))+((r00*x832))+((r01*x833))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x835=IKsin(j0);
IkReal x836=IKcos(j0);
IkReal x837=((1.0)*cj3);
IkReal x838=(r01*sj5);
IkReal x839=(r02*sj4);
IkReal x840=(sj3*sj5);
IkReal x841=((1.0)*r11);
IkReal x842=(cj5*r10);
IkReal x843=(cj4*cj5);
IkReal x844=(cj4*r00);
IkReal x845=(r10*sj5);
IkReal x846=((1.0)*sj2);
IkReal x847=((1.0)*sj4);
IkReal x848=(r12*sj4);
IkReal x849=(r11*sj5);
IkReal x850=(cj5*r00);
IkReal x851=((0.452)*cj2);
IkReal x852=((0.452)*sj2);
IkReal x853=((1.0)*cj2);
IkReal x854=(cj1*x835);
IkReal x855=(sj1*x836);
IkReal x856=(sj1*x835);
IkReal x857=(cj1*x836);
evalcond[0]=((((-1.0)*r00*sj5*x847))+(((-1.0)*cj5*r01*x847))+x836+((cj4*r02)));
evalcond[1]=((((-1.0)*cj5*sj4*x841))+(((-1.0)*x845*x847))+x835+((cj4*r12)));
evalcond[2]=((((-1.0)*x852*x854))+(((0.452)*x856))+(((-1.0)*px))+(((0.1054)*x836))+((x851*x856))+(((0.1135)*x838))+(((-0.1135)*x850)));
evalcond[3]=((((-0.1135)*x842))+(((-1.0)*py))+(((0.1054)*x835))+(((0.1135)*x849))+((x852*x857))+(((-1.0)*x851*x855))+(((-0.452)*x855)));
evalcond[4]=((((-1.0)*x846*x854))+((x840*x844))+((cj2*x856))+((cj3*x850))+(((-1.0)*x837*x838))+((r01*sj3*x843))+((sj3*x839)));
evalcond[5]=((((-1.0)*x853*x855))+((cj4*r10*x840))+((sj2*x857))+((r11*sj3*x843))+(((-1.0)*x837*x849))+((cj3*x842))+((sj3*x848)));
evalcond[6]=((((-1.0)*sj3*x838))+(((-1.0)*r01*x837*x843))+((sj2*x856))+((cj2*x854))+((sj3*x850))+(((-1.0)*sj5*x837*x844))+(((-1.0)*x837*x839)));
evalcond[7]=((((-1.0)*cj4*x837*x845))+(((-1.0)*r11*x837*x843))+(((-1.0)*x853*x857))+(((-1.0)*x846*x855))+(((-1.0)*x840*x841))+(((-1.0)*x837*x848))+((sj3*x842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x858=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x858);
rxp1_0=(pz*r11);
rxp1_1=(r01*x858);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x859=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x859);
rxp1_0=(pz*r11);
rxp1_1=(r01*x859);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x860=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x860);
rxp1_0=(pz*r11);
rxp1_1=(r01*x860);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x861=IKPowWithIntegerCheck(r22,-1);
if(!x861.valid){
continue;
}
sj4array[0]=((-1.0)*(x861.value)*((((sj1*sj2))+((cj1*cj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x862=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x862);
rxp1_0=(pz*r11);
rxp1_1=(r01*x862);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x864 = IKatan2WithCheck(IkReal((cj4*r01)),IkReal((cj4*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x864.valid){
continue;
}
IkReal x863=x864.value;
j5array[0]=((-1.0)*x863);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x863)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKsin(j5))))+((cj4*r11*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x865=(sj4*sj5);
IkReal x866=(cj5*sj4);
if( IKabs((((r10*x865))+((r11*x866)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x865))+((r01*x866)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x865))+((r11*x866))))+IKsqr((((r00*x865))+((r01*x866))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x865))+((r11*x866))), (((r00*x865))+((r01*x866))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x867=IKsin(j0);
IkReal x868=IKcos(j0);
IkReal x869=(cj1*cj2);
IkReal x870=(cj5*r10);
IkReal x871=(cj5*r00);
IkReal x872=(r11*sj5);
IkReal x873=((1.0)*r01);
IkReal x874=(cj5*sj4);
IkReal x875=((1.0)*sj4*sj5);
IkReal x876=(sj1*x868);
IkReal x877=(sj1*x867);
evalcond[0]=((((-1.0)*r00*x875))+(((-1.0)*x873*x874))+x868);
evalcond[1]=((((-1.0)*r11*x874))+x867+(((-1.0)*r10*x875)));
evalcond[2]=(((sj2*x877))+((x867*x869))+(((-1.0)*sj5*x873))+x871);
evalcond[3]=((((-1.0)*x872))+(((-1.0)*sj2*x876))+(((-1.0)*x868*x869))+x870);
evalcond[4]=((((-1.0)*px))+(((0.452)*x877))+(((0.1135)*r01*sj5))+(((-0.1135)*x871))+(((0.1054)*x868)));
evalcond[5]=((((-1.0)*py))+(((-0.452)*x876))+(((-0.1135)*x870))+(((0.1135)*x872))+(((0.1054)*x867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x878=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x878);
rxp1_0=(pz*r11);
rxp1_1=(r01*x878);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x879=IKPowWithIntegerCheck(r22,-1);
if(!x879.valid){
continue;
}
sj4array[0]=((x879.value)*((((sj1*sj2))+((cj1*cj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x880=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x880);
rxp1_0=(pz*r11);
rxp1_1=(r01*x880);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x881=((-1.0)*cj4);
CheckValue<IkReal> x883 = IKatan2WithCheck(IkReal((r01*x881)),IkReal((r00*x881)),IKFAST_ATAN2_MAGTHRESH);
if(!x883.valid){
continue;
}
IkReal x882=x883.value;
j5array[0]=((-1.0)*x882);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x882)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x884=((1.0)*cj4);
evalcond[0]=((((-1.0)*r11*x884*(IKcos(j5))))+(((-1.0)*r10*x884*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x885=(sj4*sj5);
IkReal x886=(cj5*sj4);
if( IKabs((((r11*x886))+((r10*x885)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x885))+((r01*x886)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x886))+((r10*x885))))+IKsqr((((r00*x885))+((r01*x886))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x886))+((r10*x885))), (((r00*x885))+((r01*x886))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x887=IKsin(j0);
IkReal x888=IKcos(j0);
IkReal x889=(cj1*cj2);
IkReal x890=((1.0)*r00);
IkReal x891=(cj5*r10);
IkReal x892=(sj4*sj5);
IkReal x893=(r11*sj5);
IkReal x894=(r01*sj5);
IkReal x895=(sj1*x888);
IkReal x896=((1.0)*cj5*sj4);
IkReal x897=(sj1*x887);
evalcond[0]=(x888+(((-1.0)*r01*x896))+(((-1.0)*x890*x892)));
evalcond[1]=((((-1.0)*r11*x896))+(((-1.0)*r10*x892))+x887);
evalcond[2]=(((x887*x889))+((sj2*x897))+(((-1.0)*cj5*x890))+x894);
evalcond[3]=((((-1.0)*sj2*x895))+(((-1.0)*x891))+(((-1.0)*x888*x889))+x893);
evalcond[4]=((((-0.1135)*cj5*r00))+(((0.1054)*x888))+(((-1.0)*px))+(((0.452)*x897))+(((0.1135)*x894)));
evalcond[5]=((((-0.1135)*x891))+(((0.1054)*x887))+(((-1.0)*py))+(((-0.452)*x895))+(((0.1135)*x893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x898=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x898);
rxp1_0=(pz*r11);
rxp1_1=(r01*x898);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x899=IKPowWithIntegerCheck(r22,-1);
if(!x899.valid){
continue;
}
sj4array[0]=((x899.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x900=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x900);
rxp1_0=(pz*r11);
rxp1_1=(r01*x900);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x901=((-1.0)*cj4);
CheckValue<IkReal> x903 = IKatan2WithCheck(IkReal((r01*x901)),IkReal((r00*x901)),IKFAST_ATAN2_MAGTHRESH);
if(!x903.valid){
continue;
}
IkReal x902=x903.value;
j5array[0]=((-1.0)*x902);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x902)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x904=((1.0)*cj4);
evalcond[0]=((((-1.0)*r11*x904*(IKcos(j5))))+(((-1.0)*r10*x904*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x905=(sj4*sj5);
IkReal x906=(cj5*sj4);
if( IKabs((((r11*x906))+((r10*x905)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x905))+((r01*x906)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x906))+((r10*x905))))+IKsqr((((r00*x905))+((r01*x906))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x906))+((r10*x905))), (((r00*x905))+((r01*x906))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x907=IKsin(j0);
IkReal x908=IKcos(j0);
IkReal x909=(cj5*r00);
IkReal x910=(cj5*r10);
IkReal x911=(r11*sj5);
IkReal x912=((0.452)*cj2);
IkReal x913=((1.0)*r01);
IkReal x914=(cj5*sj4);
IkReal x915=((1.0)*sj4*sj5);
IkReal x916=(sj1*x908);
IkReal x917=(sj1*x907);
IkReal x918=(cj1*sj2*x907);
IkReal x919=(cj1*sj2*x908);
evalcond[0]=((((-1.0)*x913*x914))+(((-1.0)*r00*x915))+x908);
evalcond[1]=((((-1.0)*r11*x914))+(((-1.0)*r10*x915))+x907);
evalcond[2]=((((-1.0)*sj5*x913))+((cj2*x917))+(((-1.0)*x918))+x909);
evalcond[3]=((((-1.0)*x911))+(((-1.0)*cj2*x916))+x919+x910);
evalcond[4]=((((0.452)*x917))+(((-0.452)*x918))+(((-1.0)*px))+(((-0.1135)*x909))+(((0.1135)*r01*sj5))+((x912*x917))+(((0.1054)*x908)));
evalcond[5]=((((0.452)*x919))+(((-0.452)*x916))+(((-1.0)*py))+(((0.1135)*x911))+(((-0.1135)*x910))+(((-1.0)*x912*x916))+(((0.1054)*x907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x920=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x920);
rxp1_0=(pz*r11);
rxp1_1=(r01*x920);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x921=IKPowWithIntegerCheck(r22,-1);
if(!x921.valid){
continue;
}
sj4array[0]=((-1.0)*(x921.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x922=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x922);
rxp1_0=(pz*r11);
rxp1_1=(r01*x922);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x924 = IKatan2WithCheck(IkReal((cj4*r01)),IkReal((cj4*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x924.valid){
continue;
}
IkReal x923=x924.value;
j5array[0]=((-1.0)*x923);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x923)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKsin(j5))))+((cj4*r11*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x925=(sj4*sj5);
IkReal x926=(cj5*sj4);
if( IKabs((((r10*x925))+((r11*x926)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x926))+((r00*x925)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x925))+((r11*x926))))+IKsqr((((r01*x926))+((r00*x925))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x925))+((r11*x926))), (((r01*x926))+((r00*x925))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x927=IKsin(j0);
IkReal x928=IKcos(j0);
IkReal x929=((1.0)*r00);
IkReal x930=(cj5*r10);
IkReal x931=(sj4*sj5);
IkReal x932=(r11*sj5);
IkReal x933=((0.452)*cj2);
IkReal x934=(r01*sj5);
IkReal x935=(sj1*x928);
IkReal x936=((1.0)*cj5*sj4);
IkReal x937=(sj1*x927);
IkReal x938=(cj1*sj2*x927);
IkReal x939=(cj1*sj2*x928);
evalcond[0]=((((-1.0)*x929*x931))+(((-1.0)*r01*x936))+x928);
evalcond[1]=((((-1.0)*r11*x936))+x927+(((-1.0)*r10*x931)));
evalcond[2]=(((cj2*x937))+(((-1.0)*x938))+(((-1.0)*cj5*x929))+x934);
evalcond[3]=((((-1.0)*cj2*x935))+(((-1.0)*x930))+x939+x932);
evalcond[4]=((((-0.1135)*cj5*r00))+(((-0.452)*x938))+(((-1.0)*px))+(((0.1054)*x928))+(((0.1135)*x934))+(((0.452)*x937))+((x933*x937)));
evalcond[5]=((((-0.1135)*x930))+(((-0.452)*x935))+(((-1.0)*py))+(((0.1054)*x927))+(((0.1135)*x932))+(((-1.0)*x933*x935))+(((0.452)*x939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x940=IKPowWithIntegerCheck(cj3,-1);
if(!x940.valid){
continue;
}
CheckValue<IkReal> x941=IKPowWithIntegerCheck(r22,-1);
if(!x941.valid){
continue;
}
sj4array[0]=((x940.value)*(x941.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKcos(j4)));
evalcond[1]=(((sj1*sj2))+((r22*sj3*(IKsin(j4))))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x942=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x942);
rxp1_0=(pz*r11);
rxp1_1=(r01*x942);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r10*sj3))+(((16.0)*cj1*cj3*cj4*r10*sj2))+(((16.0)*cj1*r11*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r11))+(((-16.0)*cj2*cj3*cj4*r10*sj1))+(((-16.0)*cj2*r11*sj1*sj3))+(((-16.0)*cj4*r10*sj1*sj2*sj3))+(((16.0)*cj3*r11*sj1*sj2)))))))+(((0.5)*(IKabs(((((4.0)*cj1*cj3*cj4*r01*sj2))+(((-4.0)*cj2*cj3*cj4*r01*sj1))+(((-4.0)*cj3*r00*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r00))+(((-4.0)*cj4*r01*sj1*sj2*sj3))+(((4.0)*cj2*r00*sj1*sj3))+(((-4.0)*cj1*r00*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r01*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r00*sj3))+(((16.0)*cj1*cj2*cj3*r01))+(((-16.0)*cj2*cj3*cj4*r00*sj1))+(((16.0)*cj3*r01*sj1*sj2))+(((16.0)*cj1*r01*sj2*sj3))+(((-16.0)*cj4*r00*sj1*sj2*sj3))+(((16.0)*cj1*cj3*cj4*r00*sj2))+(((-16.0)*cj2*r01*sj1*sj3)))))))+(IKabs(((((-4.0)*cj1*cj3*cj4*r11*sj2))+(((4.0)*cj1*cj2*cj4*r11*sj3))+(((4.0)*cj1*r10*sj2*sj3))+(((4.0)*cj1*cj2*cj3*r10))+(((4.0)*cj2*cj3*cj4*r11*sj1))+(((4.0)*cj4*r11*sj1*sj2*sj3))+(((4.0)*cj3*r10*sj1*sj2))+(((-4.0)*cj2*r10*sj1*sj3)))))+(IKabs(((((4.0)*cj1*r00*sj2*sj3))+(((4.0)*cj4*r01*sj1*sj2*sj3))+(((4.0)*cj3*r00*sj1*sj2))+(((-4.0)*cj2*r00*sj1*sj3))+(((4.0)*cj1*cj2*cj3*r00))+(((4.0)*cj1*cj2*cj4*r01*sj3))+(((4.0)*cj2*cj3*cj4*r01*sj1))+(((-4.0)*cj1*cj3*cj4*r01*sj2)))))+(IKabs(((((-8.0)*cj2*r11*sj1*sj3))+(((8.0)*cj1*r11*sj2*sj3))+(((8.0)*cj3*r11*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r10*sj1))+(((-8.0)*cj1*cj2*cj4*r10*sj3))+(((-8.0)*cj4*r10*sj1*sj2*sj3))+(((8.0)*cj1*cj3*cj4*r10*sj2))+(((8.0)*cj1*cj2*cj3*r11)))))+(((0.5)*(IKabs(((((4.0)*cj1*cj3*cj4*r11*sj2))+(((-4.0)*cj1*cj2*cj3*r10))+(((-4.0)*cj2*cj3*cj4*r11*sj1))+(((4.0)*cj2*r10*sj1*sj3))+(((-4.0)*cj3*r10*sj1*sj2))+(((-4.0)*cj4*r11*sj1*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r11*sj3))+(((-4.0)*cj1*r10*sj2*sj3)))))))+(IKabs(((((8.0)*cj1*cj3*cj4*r00*sj2))+(((8.0)*cj3*r01*sj1*sj2))+(((-8.0)*cj2*r01*sj1*sj3))+(((8.0)*cj1*r01*sj2*sj3))+(((-8.0)*cj2*cj3*cj4*r00*sj1))+(((8.0)*cj1*cj2*cj3*r01))+(((-8.0)*cj4*r00*sj1*sj2*sj3))+(((-8.0)*cj1*cj2*cj4*r00*sj3))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x943=(r10*sj2);
IkReal x944=(cj2*cj4);
IkReal x945=(cj1*r10);
IkReal x946=(cj2*cj3);
IkReal x947=((8.0)*sj3);
IkReal x948=(r11*sj2);
IkReal x949=((16.0)*cj4);
IkReal x950=(cj1*cj3);
IkReal x951=(cj1*r11);
IkReal x952=(sj1*sj3);
IkReal x953=((4.0)*sj3);
IkReal x954=(cj2*r11);
IkReal x955=((16.0)*sj3);
IkReal x956=((4.0)*cj4);
IkReal x957=((4.0)*cj3*sj1);
IkReal x958=((16.0)*cj3*sj1);
IkReal x959=((8.0)*cj3*sj1);
IkReal x960=((((4.0)*cj2*r10*x952))+((x948*x950*x956)));
IkReal x961=(((x943*x957))+((r11*x944*x957))+((cj1*x943*x953))+(((4.0)*x945*x946))+((x944*x951*x953))+((x948*x952*x956)));
IkReal x962=(x961+(((-1.0)*x960)));
IkReal x963=(((cj1*x947*x948))+(((-1.0)*r10*x944*x959))+(((-1.0)*x944*x945*x947))+((x948*x959))+(((-1.0)*cj4*sj1*x943*x947))+(((8.0)*cj4*x943*x950))+(((8.0)*x946*x951))+(((-1.0)*sj1*x947*x954)));
IkReal x964=(x960+(((-1.0)*x961)));
op[0]=x962;
op[1]=x963;
op[2]=x962;
op[3]=(((cj1*x948*x955))+(((-1.0)*r10*x944*x958))+((x948*x958))+(((-1.0)*x944*x945*x955))+(((-16.0)*x952*x954))+(((-1.0)*x943*x949*x952))+((x943*x949*x950))+(((16.0)*x946*x951)));
op[4]=x964;
op[5]=x963;
op[6]=x964;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((4.0)*cj1*cj3*cj4*r01*sj2))+(((-4.0)*cj2*cj3*cj4*r01*sj1))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*cj3*cj4*r00*sj2))+(((8.0)*cj3*r01*sj1*sj2))+(((-8.0)*cj2*r01*sj1*sj3))+(((8.0)*cj1*r01*sj2*sj3))+(((-8.0)*cj2*cj3*cj4*r00*sj1))+(((8.0)*cj1*cj2*cj3*r01))+(((-8.0)*cj4*r00*sj1*sj2*sj3))+(((-8.0)*cj1*cj2*cj4*r00*sj3))))))+((htj5*(((((8.0)*cj1*cj3*cj4*r00*sj2))+(((8.0)*cj3*r01*sj1*sj2))+(((-8.0)*cj2*r01*sj1*sj3))+(((8.0)*cj1*r01*sj2*sj3))+(((-8.0)*cj2*cj3*cj4*r00*sj1))+(((8.0)*cj1*cj2*cj3*r01))+(((-8.0)*cj4*r00*sj1*sj2*sj3))+(((-8.0)*cj1*cj2*cj4*r00*sj3))))))+(((-4.0)*cj3*r00*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r00))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((4.0)*cj1*r00*sj2*sj3))+(((4.0)*cj4*r01*sj1*sj2*sj3))+(((4.0)*cj3*r00*sj1*sj2))+(((-4.0)*cj2*r00*sj1*sj3))+(((4.0)*cj1*cj2*cj3*r00))+(((4.0)*cj1*cj2*cj4*r01*sj3))+(((4.0)*cj2*cj3*cj4*r01*sj1))+(((-4.0)*cj1*cj3*cj4*r01*sj2))))))+(((htj5*htj5)*(((((4.0)*cj1*cj3*cj4*r01*sj2))+(((-4.0)*cj2*cj3*cj4*r01*sj1))+(((-4.0)*cj3*r00*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r00))+(((-4.0)*cj4*r01*sj1*sj2*sj3))+(((4.0)*cj2*r00*sj1*sj3))+(((-4.0)*cj1*r00*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r01*sj3))))))+(((-4.0)*cj4*r01*sj1*sj2*sj3))+(((4.0)*cj2*r00*sj1*sj3))+(((htj5*htj5*htj5)*(((((-16.0)*cj1*cj2*cj4*r00*sj3))+(((16.0)*cj1*cj2*cj3*r01))+(((-16.0)*cj2*cj3*cj4*r00*sj1))+(((16.0)*cj3*r01*sj1*sj2))+(((16.0)*cj1*r01*sj2*sj3))+(((-16.0)*cj4*r00*sj1*sj2*sj3))+(((16.0)*cj1*cj3*cj4*r00*sj2))+(((-16.0)*cj2*r01*sj1*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((4.0)*cj1*r00*sj2*sj3))+(((4.0)*cj4*r01*sj1*sj2*sj3))+(((4.0)*cj3*r00*sj1*sj2))+(((-4.0)*cj2*r00*sj1*sj3))+(((4.0)*cj1*cj2*cj3*r00))+(((4.0)*cj1*cj2*cj4*r01*sj3))+(((4.0)*cj2*cj3*cj4*r01*sj1))+(((-4.0)*cj1*cj3*cj4*r01*sj2))))))+(((-4.0)*cj1*r00*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r01*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x965=(sj4*sj5);
IkReal x966=(cj5*sj4);
if( IKabs((((r11*x966))+((r10*x965)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x965))+((r01*x966)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x966))+((r10*x965))))+IKsqr((((r00*x965))+((r01*x966))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x966))+((r10*x965))), (((r00*x965))+((r01*x966))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x967=IKsin(j0);
IkReal x968=IKcos(j0);
IkReal x969=((1.0)*sj5);
IkReal x970=(cj3*r01);
IkReal x971=(r11*sj3);
IkReal x972=(cj5*r10);
IkReal x973=(cj4*cj5);
IkReal x974=(r00*sj3);
IkReal x975=(cj4*sj5);
IkReal x976=((1.0)*sj2);
IkReal x977=((1.0)*cj2);
IkReal x978=(cj3*cj4);
IkReal x979=((0.1135)*sj5);
IkReal x980=(cj5*r00);
IkReal x981=((0.452)*cj2);
IkReal x982=((0.452)*sj2);
IkReal x983=(cj3*r11);
IkReal x984=(r01*sj3);
IkReal x985=(cj1*x967);
IkReal x986=(sj1*x968);
IkReal x987=((1.0)*cj5*sj4);
IkReal x988=(cj1*x968);
IkReal x989=(sj1*x967);
evalcond[0]=((((-1.0)*r01*x987))+x968+(((-1.0)*r00*sj4*x969)));
evalcond[1]=((((-1.0)*r10*sj4*x969))+(((-1.0)*r11*x987))+x967);
evalcond[2]=((((-1.0)*x969*x970))+((x973*x984))+((x974*x975))+((cj3*x980))+((cj2*x989))+(((-1.0)*x976*x985)));
evalcond[3]=((((-1.0)*x969*x983))+((r10*sj3*x975))+((x971*x973))+(((-1.0)*x977*x986))+((cj3*x972))+((sj2*x988)));
evalcond[4]=(((cj5*x974))+(((-1.0)*x969*x984))+((cj2*x985))+(((-1.0)*r00*x969*x978))+(((-1.0)*x970*x973))+((sj2*x989)));
evalcond[5]=((((-1.0)*x969*x971))+(((-1.0)*x977*x988))+(((-1.0)*r10*x969*x978))+(((-1.0)*x973*x983))+(((-1.0)*x976*x986))+((sj3*x972)));
evalcond[6]=(((x981*x989))+(((-0.1135)*x980))+(((0.1054)*x968))+((r01*x979))+(((0.452)*x989))+(((-1.0)*x982*x985))+(((-1.0)*px)));
evalcond[7]=((((-0.1135)*x972))+(((0.1054)*x967))+(((-1.0)*py))+((x982*x988))+(((-0.452)*x986))+(((-1.0)*x981*x986))+((r11*x979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x990=IKPowWithIntegerCheck(r22,-1);
if(!x990.valid){
continue;
}
CheckValue<IkReal> x991=IKPowWithIntegerCheck(sj3,-1);
if(!x991.valid){
continue;
}
sj4array[0]=((-1.0)*(x990.value)*(x991.value)*((((sj1*sj2))+((cj1*cj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKcos(j4)));
evalcond[1]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x992=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x992);
rxp1_0=(pz*r11);
rxp1_1=(r01*x992);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r10*sj3))+(((16.0)*cj1*cj3*cj4*r10*sj2))+(((16.0)*cj1*r11*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r11))+(((-16.0)*cj2*cj3*cj4*r10*sj1))+(((-16.0)*cj2*r11*sj1*sj3))+(((-16.0)*cj4*r10*sj1*sj2*sj3))+(((16.0)*cj3*r11*sj1*sj2)))))))+(((0.5)*(IKabs(((((4.0)*cj1*cj3*cj4*r01*sj2))+(((-4.0)*cj2*cj3*cj4*r01*sj1))+(((-4.0)*cj3*r00*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r00))+(((-4.0)*cj4*r01*sj1*sj2*sj3))+(((4.0)*cj2*r00*sj1*sj3))+(((-4.0)*cj1*r00*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r01*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r00*sj3))+(((16.0)*cj1*cj2*cj3*r01))+(((-16.0)*cj2*cj3*cj4*r00*sj1))+(((16.0)*cj3*r01*sj1*sj2))+(((16.0)*cj1*r01*sj2*sj3))+(((-16.0)*cj4*r00*sj1*sj2*sj3))+(((16.0)*cj1*cj3*cj4*r00*sj2))+(((-16.0)*cj2*r01*sj1*sj3)))))))+(IKabs(((((-4.0)*cj1*cj3*cj4*r11*sj2))+(((4.0)*cj1*cj2*cj4*r11*sj3))+(((4.0)*cj1*r10*sj2*sj3))+(((4.0)*cj1*cj2*cj3*r10))+(((4.0)*cj2*cj3*cj4*r11*sj1))+(((4.0)*cj4*r11*sj1*sj2*sj3))+(((4.0)*cj3*r10*sj1*sj2))+(((-4.0)*cj2*r10*sj1*sj3)))))+(IKabs(((((4.0)*cj1*r00*sj2*sj3))+(((4.0)*cj4*r01*sj1*sj2*sj3))+(((4.0)*cj3*r00*sj1*sj2))+(((-4.0)*cj2*r00*sj1*sj3))+(((4.0)*cj1*cj2*cj3*r00))+(((4.0)*cj1*cj2*cj4*r01*sj3))+(((4.0)*cj2*cj3*cj4*r01*sj1))+(((-4.0)*cj1*cj3*cj4*r01*sj2)))))+(IKabs(((((-8.0)*cj2*r11*sj1*sj3))+(((8.0)*cj1*r11*sj2*sj3))+(((8.0)*cj3*r11*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r10*sj1))+(((-8.0)*cj1*cj2*cj4*r10*sj3))+(((-8.0)*cj4*r10*sj1*sj2*sj3))+(((8.0)*cj1*cj3*cj4*r10*sj2))+(((8.0)*cj1*cj2*cj3*r11)))))+(((0.5)*(IKabs(((((4.0)*cj1*cj3*cj4*r11*sj2))+(((-4.0)*cj1*cj2*cj3*r10))+(((-4.0)*cj2*cj3*cj4*r11*sj1))+(((4.0)*cj2*r10*sj1*sj3))+(((-4.0)*cj3*r10*sj1*sj2))+(((-4.0)*cj4*r11*sj1*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r11*sj3))+(((-4.0)*cj1*r10*sj2*sj3)))))))+(IKabs(((((8.0)*cj1*cj3*cj4*r00*sj2))+(((8.0)*cj3*r01*sj1*sj2))+(((-8.0)*cj2*r01*sj1*sj3))+(((8.0)*cj1*r01*sj2*sj3))+(((-8.0)*cj2*cj3*cj4*r00*sj1))+(((8.0)*cj1*cj2*cj3*r01))+(((-8.0)*cj4*r00*sj1*sj2*sj3))+(((-8.0)*cj1*cj2*cj4*r00*sj3))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x993=(r10*sj2);
IkReal x994=(cj2*cj4);
IkReal x995=(cj1*r10);
IkReal x996=(cj2*cj3);
IkReal x997=((8.0)*sj3);
IkReal x998=(r11*sj2);
IkReal x999=((16.0)*cj4);
IkReal x1000=(cj1*cj3);
IkReal x1001=(cj1*r11);
IkReal x1002=(sj1*sj3);
IkReal x1003=((4.0)*sj3);
IkReal x1004=(cj2*r11);
IkReal x1005=((16.0)*sj3);
IkReal x1006=((4.0)*cj4);
IkReal x1007=((4.0)*cj3*sj1);
IkReal x1008=((16.0)*cj3*sj1);
IkReal x1009=((8.0)*cj3*sj1);
IkReal x1010=(((x1000*x1006*x998))+(((4.0)*cj2*r10*x1002)));
IkReal x1011=(((x1002*x1006*x998))+((x1007*x993))+(((4.0)*x995*x996))+((x1001*x1003*x994))+((r11*x1007*x994))+((cj1*x1003*x993)));
IkReal x1012=(x1011+(((-1.0)*x1010)));
IkReal x1013=((((8.0)*x1001*x996))+(((8.0)*cj4*x1000*x993))+(((-1.0)*sj1*x1004*x997))+((x1009*x998))+(((-1.0)*r10*x1009*x994))+(((-1.0)*x994*x995*x997))+(((-1.0)*cj4*sj1*x993*x997))+((cj1*x997*x998)));
IkReal x1014=(x1010+(((-1.0)*x1011)));
op[0]=x1012;
op[1]=x1013;
op[2]=x1012;
op[3]=((((-16.0)*x1002*x1004))+(((-1.0)*x1002*x993*x999))+(((-1.0)*x1005*x994*x995))+((x1000*x993*x999))+(((-1.0)*r10*x1008*x994))+((x1008*x998))+(((16.0)*x1001*x996))+((cj1*x1005*x998)));
op[4]=x1014;
op[5]=x1013;
op[6]=x1014;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((4.0)*cj1*cj3*cj4*r01*sj2))+(((-4.0)*cj2*cj3*cj4*r01*sj1))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*cj3*cj4*r00*sj2))+(((8.0)*cj3*r01*sj1*sj2))+(((-8.0)*cj2*r01*sj1*sj3))+(((8.0)*cj1*r01*sj2*sj3))+(((-8.0)*cj2*cj3*cj4*r00*sj1))+(((8.0)*cj1*cj2*cj3*r01))+(((-8.0)*cj4*r00*sj1*sj2*sj3))+(((-8.0)*cj1*cj2*cj4*r00*sj3))))))+((htj5*(((((8.0)*cj1*cj3*cj4*r00*sj2))+(((8.0)*cj3*r01*sj1*sj2))+(((-8.0)*cj2*r01*sj1*sj3))+(((8.0)*cj1*r01*sj2*sj3))+(((-8.0)*cj2*cj3*cj4*r00*sj1))+(((8.0)*cj1*cj2*cj3*r01))+(((-8.0)*cj4*r00*sj1*sj2*sj3))+(((-8.0)*cj1*cj2*cj4*r00*sj3))))))+(((-4.0)*cj3*r00*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r00))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((4.0)*cj1*r00*sj2*sj3))+(((4.0)*cj4*r01*sj1*sj2*sj3))+(((4.0)*cj3*r00*sj1*sj2))+(((-4.0)*cj2*r00*sj1*sj3))+(((4.0)*cj1*cj2*cj3*r00))+(((4.0)*cj1*cj2*cj4*r01*sj3))+(((4.0)*cj2*cj3*cj4*r01*sj1))+(((-4.0)*cj1*cj3*cj4*r01*sj2))))))+(((htj5*htj5)*(((((4.0)*cj1*cj3*cj4*r01*sj2))+(((-4.0)*cj2*cj3*cj4*r01*sj1))+(((-4.0)*cj3*r00*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r00))+(((-4.0)*cj4*r01*sj1*sj2*sj3))+(((4.0)*cj2*r00*sj1*sj3))+(((-4.0)*cj1*r00*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r01*sj3))))))+(((-4.0)*cj4*r01*sj1*sj2*sj3))+(((4.0)*cj2*r00*sj1*sj3))+(((htj5*htj5*htj5)*(((((-16.0)*cj1*cj2*cj4*r00*sj3))+(((16.0)*cj1*cj2*cj3*r01))+(((-16.0)*cj2*cj3*cj4*r00*sj1))+(((16.0)*cj3*r01*sj1*sj2))+(((16.0)*cj1*r01*sj2*sj3))+(((-16.0)*cj4*r00*sj1*sj2*sj3))+(((16.0)*cj1*cj3*cj4*r00*sj2))+(((-16.0)*cj2*r01*sj1*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((4.0)*cj1*r00*sj2*sj3))+(((4.0)*cj4*r01*sj1*sj2*sj3))+(((4.0)*cj3*r00*sj1*sj2))+(((-4.0)*cj2*r00*sj1*sj3))+(((4.0)*cj1*cj2*cj3*r00))+(((4.0)*cj1*cj2*cj4*r01*sj3))+(((4.0)*cj2*cj3*cj4*r01*sj1))+(((-4.0)*cj1*cj3*cj4*r01*sj2))))))+(((-4.0)*cj1*r00*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r01*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1015=(sj4*sj5);
IkReal x1016=(cj5*sj4);
if( IKabs((((r10*x1015))+((r11*x1016)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1016))+((r00*x1015)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1015))+((r11*x1016))))+IKsqr((((r01*x1016))+((r00*x1015))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x1015))+((r11*x1016))), (((r01*x1016))+((r00*x1015))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1017=IKsin(j0);
IkReal x1018=IKcos(j0);
IkReal x1019=((1.0)*sj5);
IkReal x1020=(cj3*r01);
IkReal x1021=(r11*sj3);
IkReal x1022=(cj5*r10);
IkReal x1023=(cj4*cj5);
IkReal x1024=(r00*sj3);
IkReal x1025=(cj4*sj5);
IkReal x1026=((1.0)*sj2);
IkReal x1027=((1.0)*cj2);
IkReal x1028=(cj3*cj4);
IkReal x1029=((0.1135)*sj5);
IkReal x1030=(cj5*r00);
IkReal x1031=((0.452)*cj2);
IkReal x1032=((0.452)*sj2);
IkReal x1033=(cj3*r11);
IkReal x1034=(r01*sj3);
IkReal x1035=(cj1*x1017);
IkReal x1036=(sj1*x1018);
IkReal x1037=((1.0)*cj5*sj4);
IkReal x1038=(cj1*x1018);
IkReal x1039=(sj1*x1017);
evalcond[0]=(x1018+(((-1.0)*r00*sj4*x1019))+(((-1.0)*r01*x1037)));
evalcond[1]=(x1017+(((-1.0)*r11*x1037))+(((-1.0)*r10*sj4*x1019)));
evalcond[2]=(((cj2*x1039))+((cj3*x1030))+(((-1.0)*x1026*x1035))+(((-1.0)*x1019*x1020))+((x1023*x1034))+((x1024*x1025)));
evalcond[3]=((((-1.0)*x1027*x1036))+((r10*sj3*x1025))+((sj2*x1038))+((x1021*x1023))+(((-1.0)*x1019*x1033))+((cj3*x1022)));
evalcond[4]=((((-1.0)*r00*x1019*x1028))+((cj2*x1035))+((cj5*x1024))+((sj2*x1039))+(((-1.0)*x1019*x1034))+(((-1.0)*x1020*x1023)));
evalcond[5]=((((-1.0)*x1027*x1038))+(((-1.0)*x1023*x1033))+(((-1.0)*x1026*x1036))+(((-1.0)*x1019*x1021))+(((-1.0)*r10*x1019*x1028))+((sj3*x1022)));
evalcond[6]=(((x1031*x1039))+((r01*x1029))+(((-1.0)*x1032*x1035))+(((0.452)*x1039))+(((-0.1135)*x1030))+(((0.1054)*x1018))+(((-1.0)*px)));
evalcond[7]=((((0.1054)*x1017))+(((-1.0)*py))+((r11*x1029))+(((-1.0)*x1031*x1036))+(((-0.452)*x1036))+(((-0.1135)*x1022))+((x1032*x1038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1040=((0.452)*cj1);
CheckValue<IkReal> x1043 = IKatan2WithCheck(IkReal(((-0.1135)*r20)),IkReal(((0.1135)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1043.valid){
continue;
}
IkReal x1041=((1.0)*(x1043.value));
if((((((0.01288225)*(r21*r21)))+(((0.01288225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1044=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01288225)*(r21*r21)))+(((0.01288225)*(r20*r20)))))),-1);
if(!x1044.valid){
continue;
}
if( (((x1044.value)*(((((0.452)*sj1*sj2))+x1040+((cj2*x1040))+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x1044.value)*(((((0.452)*sj1*sj2))+x1040+((cj2*x1040))+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1042=IKasin(((x1044.value)*(((((0.452)*sj1*sj2))+x1040+((cj2*x1040))+(((-1.0)*pz))))));
j5array[0]=((((-1.0)*x1042))+(((-1.0)*x1041)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+x1042+(((-1.0)*x1041)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1045=cj5*cj5;
IkReal x1046=r20*r20;
IkReal x1047=((1.0)*sj3);
IkReal x1048=((((-1.0)*x1046*x1047))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x1045*x1046))+(((-1.0)*x1045*x1047*(r21*r21)))+(((-1.0)*x1047*(r22*r22))));
j4eval[0]=x1048;
j4eval[1]=IKsign(x1048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1049=cj5*cj5;
IkReal x1050=r20*r20;
IkReal x1051=(cj3*x1049);
IkReal x1052=(((cj3*(r22*r22)))+((cj3*x1050))+(((-1.0)*x1050*x1051))+((x1051*(r21*r21)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1052;
j4eval[1]=IKsign(x1052);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1053=cj1*cj1;
IkReal x1054=cj2*cj2;
IkReal x1055=((2.0)*cj2);
IkReal x1056=((10215200.0)*cj2);
IkReal x1057=(cj1*sj1*sj2);
IkReal x1058=(x1053*x1054);
j0eval[0]=((-1.05437563630668)+(((-1.0)*x1055))+((x1055*x1057))+((x1053*x1055))+(((2.0)*x1057))+(((2.0)*x1058))+(((-1.0)*x1054)));
j0eval[1]=IKsign(((-5385329.0)+(((-1.0)*x1056))+(((10215200.0)*x1057))+(((10215200.0)*x1058))+((x1056*x1057))+((x1053*x1056))+(((-5107600.0)*x1054))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1059=(((sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1059;
j0eval[1]=IKsign(x1059);
j0eval[2]=((IKabs((((cj5*r10))+(((-1.0)*r11*sj5)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1060=r20*r20;
IkReal x1061=cj5*cj5;
IkReal x1062=(sj1*sj2);
IkReal x1063=(cj5*r21);
IkReal x1064=(r20*sj5);
IkReal x1065=(cj1*cj2);
IkReal x1066=(((x1060*x1061))+(((-1.0)*(r22*r22)))+(((-1.0)*x1061*(r21*r21)))+(((-2.0)*x1063*x1064))+(((-1.0)*x1060)));
j4eval[0]=x1066;
j4eval[1]=((IKabs((((r22*x1062))+((r22*x1065)))))+(IKabs((((x1062*x1064))+((x1062*x1063))+((x1063*x1065))+((x1064*x1065))))));
j4eval[2]=IKsign(x1066);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=(((sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.489292297647925)*py))+(((-2.09829334475201)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.09829334475201)*py))+(((0.489292297647925)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.489292297647925)*py))+(((-2.09829334475201)*px))))+IKsqr(((((2.09829334475201)*py))+(((0.489292297647925)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.489292297647925)*py))+(((-2.09829334475201)*px))), ((((2.09829334475201)*py))+(((0.489292297647925)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1067=IKcos(j0);
IkReal x1068=IKsin(j0);
evalcond[0]=((((0.1054)*x1067))+(((-1.0)*px))+(((-0.452)*x1068)));
evalcond[1]=((((0.1054)*x1068))+(((-1.0)*py))+(((0.452)*x1067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1069=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x1069;
j4eval[1]=IKsign(x1069);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1070=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x1070;
j4eval[1]=IKsign(x1070);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1071=cj5*cj5;
IkReal x1072=(r00*r20);
IkReal x1073=(cj5*sj5);
IkReal x1074=(x1072+((r01*r21*x1071))+(((-1.0)*x1071*x1072))+((r00*r21*x1073))+((r02*r22))+((r01*r20*x1073)));
j4eval[0]=x1074;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x1074);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1075=cj5*cj5;
IkReal x1076=(r00*r20);
IkReal x1077=(cj5*sj5);
CheckValue<IkReal> x1078 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1078.valid){
continue;
}
CheckValue<IkReal> x1079=IKPowWithIntegerCheck(IKsign((x1076+((r01*r21*x1075))+((r00*r21*x1077))+((r02*r22))+(((-1.0)*x1075*x1076))+((r01*r20*x1077)))),-1);
if(!x1079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1078.value)+(((1.5707963267949)*(x1079.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1080=IKcos(j4);
IkReal x1081=IKsin(j4);
IkReal x1082=(sj5*x1080);
IkReal x1083=(cj5*x1080);
IkReal x1084=((1.0)*cj5*x1081);
IkReal x1085=((1.0)*sj5*x1081);
evalcond[0]=(((r20*x1082))+((r22*x1081))+((r21*x1083)));
evalcond[1]=(cj0+((r12*x1081))+((r10*x1082))+((r11*x1083)));
evalcond[2]=((((-1.0)*r21*x1084))+((r22*x1080))+(((-1.0)*r20*x1085)));
evalcond[3]=(cj0+(((-1.0)*r00*x1085))+(((-1.0)*r01*x1084))+((r02*x1080)));
evalcond[4]=((((-1.0)*r11*x1084))+sj0+(((-1.0)*r10*x1085))+((r12*x1080)));
evalcond[5]=((((-1.0)*sj0))+((r00*x1082))+((r01*x1083))+((r02*x1081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1086 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1086.valid){
continue;
}
CheckValue<IkReal> x1087=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x1087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1086.value)+(((1.5707963267949)*(x1087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1088=IKcos(j4);
IkReal x1089=IKsin(j4);
IkReal x1090=(sj5*x1088);
IkReal x1091=(cj5*x1088);
IkReal x1092=((1.0)*cj5*x1089);
IkReal x1093=((1.0)*sj5*x1089);
evalcond[0]=(((r21*x1091))+((r22*x1089))+((r20*x1090)));
evalcond[1]=(cj0+((r10*x1090))+((r12*x1089))+((r11*x1091)));
evalcond[2]=(((r22*x1088))+(((-1.0)*r21*x1092))+(((-1.0)*r20*x1093)));
evalcond[3]=(cj0+((r02*x1088))+(((-1.0)*r01*x1092))+(((-1.0)*r00*x1093)));
evalcond[4]=(sj0+((r12*x1088))+(((-1.0)*r11*x1092))+(((-1.0)*r10*x1093)));
evalcond[5]=((((-1.0)*sj0))+((r01*x1091))+((r00*x1090))+((r02*x1089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1094=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x1094.valid){
continue;
}
CheckValue<IkReal> x1095 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1094.value)))+(x1095.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1096=IKcos(j4);
IkReal x1097=IKsin(j4);
IkReal x1098=(sj5*x1096);
IkReal x1099=(cj5*x1096);
IkReal x1100=((1.0)*cj5*x1097);
IkReal x1101=((1.0)*sj5*x1097);
evalcond[0]=(((r21*x1099))+((r22*x1097))+((r20*x1098)));
evalcond[1]=(cj0+((r10*x1098))+((r11*x1099))+((r12*x1097)));
evalcond[2]=(((r22*x1096))+(((-1.0)*r21*x1100))+(((-1.0)*r20*x1101)));
evalcond[3]=((((-1.0)*r01*x1100))+(((-1.0)*r00*x1101))+cj0+((r02*x1096)));
evalcond[4]=((((-1.0)*r11*x1100))+sj0+((r12*x1096))+(((-1.0)*r10*x1101)));
evalcond[5]=((((-1.0)*sj0))+((r01*x1099))+((r00*x1098))+((r02*x1097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.09829334475201)*px))+(((0.489292297647925)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.489292297647925)*px))+(((-2.09829334475201)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.09829334475201)*px))+(((0.489292297647925)*py))))+IKsqr(((((0.489292297647925)*px))+(((-2.09829334475201)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.09829334475201)*px))+(((0.489292297647925)*py))), ((((0.489292297647925)*px))+(((-2.09829334475201)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1102=IKsin(j0);
IkReal x1103=IKcos(j0);
evalcond[0]=((((0.1054)*x1103))+(((0.452)*x1102))+(((-1.0)*px)));
evalcond[1]=((((0.1054)*x1102))+(((-1.0)*py))+(((-0.452)*x1103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1104=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x1104;
j4eval[1]=IKsign(x1104);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1105=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x1105;
j4eval[1]=IKsign(x1105);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1106=cj5*cj5;
IkReal x1107=(r00*r20);
IkReal x1108=(cj5*sj5);
IkReal x1109=(x1107+((r01*r21*x1106))+((r00*r21*x1108))+((r02*r22))+((r01*r20*x1108))+(((-1.0)*x1106*x1107)));
j4eval[0]=x1109;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x1109);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1110=cj5*cj5;
IkReal x1111=(r00*r20);
IkReal x1112=(cj5*sj5);
CheckValue<IkReal> x1113=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1110*x1111))+x1111+((r01*r21*x1110))+((r00*r21*x1112))+((r02*r22))+((r01*r20*x1112)))),-1);
if(!x1113.valid){
continue;
}
CheckValue<IkReal> x1114 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1113.value)))+(x1114.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1115=IKcos(j4);
IkReal x1116=IKsin(j4);
IkReal x1117=(cj5*r11);
IkReal x1118=(cj5*r21);
IkReal x1119=(cj5*r01);
IkReal x1120=(sj5*x1115);
IkReal x1121=((1.0)*x1116);
evalcond[0]=(((r22*x1116))+((x1115*x1118))+((r20*x1120)));
evalcond[1]=(((r00*x1120))+sj0+((x1115*x1119))+((r02*x1116)));
evalcond[2]=((((-1.0)*r20*sj5*x1121))+((r22*x1115))+(((-1.0)*x1118*x1121)));
evalcond[3]=(cj0+(((-1.0)*r00*sj5*x1121))+(((-1.0)*x1119*x1121))+((r02*x1115)));
evalcond[4]=(sj0+(((-1.0)*x1117*x1121))+(((-1.0)*r10*sj5*x1121))+((r12*x1115)));
evalcond[5]=(((r10*x1120))+((r12*x1116))+((x1115*x1117))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1122=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x1122.valid){
continue;
}
CheckValue<IkReal> x1123 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1122.value)))+(x1123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1124=IKcos(j4);
IkReal x1125=IKsin(j4);
IkReal x1126=(cj5*r11);
IkReal x1127=(cj5*r21);
IkReal x1128=(cj5*r01);
IkReal x1129=(sj5*x1124);
IkReal x1130=((1.0)*x1125);
evalcond[0]=(((x1124*x1127))+((r22*x1125))+((r20*x1129)));
evalcond[1]=(((r00*x1129))+sj0+((x1124*x1128))+((r02*x1125)));
evalcond[2]=((((-1.0)*r20*sj5*x1130))+(((-1.0)*x1127*x1130))+((r22*x1124)));
evalcond[3]=(cj0+(((-1.0)*r00*sj5*x1130))+(((-1.0)*x1128*x1130))+((r02*x1124)));
evalcond[4]=(sj0+(((-1.0)*r10*sj5*x1130))+(((-1.0)*x1126*x1130))+((r12*x1124)));
evalcond[5]=(((r10*x1129))+((x1124*x1126))+((r12*x1125))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1131 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1131.valid){
continue;
}
CheckValue<IkReal> x1132=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x1132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1131.value)+(((1.5707963267949)*(x1132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1133=IKcos(j4);
IkReal x1134=IKsin(j4);
IkReal x1135=(cj5*r11);
IkReal x1136=(cj5*r21);
IkReal x1137=(cj5*r01);
IkReal x1138=(sj5*x1133);
IkReal x1139=((1.0)*x1134);
evalcond[0]=(((r22*x1134))+((x1133*x1136))+((r20*x1138)));
evalcond[1]=(sj0+((r00*x1138))+((r02*x1134))+((x1133*x1137)));
evalcond[2]=((((-1.0)*r20*sj5*x1139))+((r22*x1133))+(((-1.0)*x1136*x1139)));
evalcond[3]=(cj0+(((-1.0)*r00*sj5*x1139))+(((-1.0)*x1137*x1139))+((r02*x1133)));
evalcond[4]=(sj0+(((-1.0)*r10*sj5*x1139))+((r12*x1133))+(((-1.0)*x1135*x1139)));
evalcond[5]=(((r10*x1138))+((r12*x1134))+((x1133*x1135))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.09135885719082)*px))+(((0.127244716314062)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.09135885719082)*py))+(((0.127244716314062)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.09135885719082)*px))+(((0.127244716314062)*py))))+IKsqr(((((-1.09135885719082)*py))+(((0.127244716314062)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.09135885719082)*px))+(((0.127244716314062)*py))), ((((-1.09135885719082)*py))+(((0.127244716314062)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1140=IKsin(j0);
IkReal x1141=IKcos(j0);
evalcond[0]=((((0.1054)*x1141))+(((-1.0)*px))+(((0.904)*x1140)));
evalcond[1]=((((0.1054)*x1140))+(((-1.0)*py))+(((-0.904)*x1141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1142=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x1142;
j4eval[1]=IKsign(x1142);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1143=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x1143;
j4eval[1]=IKsign(x1143);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1144=cj5*cj5;
IkReal x1145=(r00*r20);
IkReal x1146=(cj5*sj5);
IkReal x1147=(x1145+((r01*r20*x1146))+(((-1.0)*x1144*x1145))+((r02*r22))+((r00*r21*x1146))+((r01*r21*x1144)));
j4eval[0]=x1147;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x1147);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1148=cj5*cj5;
IkReal x1149=(r00*r20);
IkReal x1150=(cj5*sj5);
CheckValue<IkReal> x1151=IKPowWithIntegerCheck(IKsign((((r01*r20*x1150))+x1149+(((-1.0)*x1148*x1149))+((r02*r22))+((r01*r21*x1148))+((r00*r21*x1150)))),-1);
if(!x1151.valid){
continue;
}
CheckValue<IkReal> x1152 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1151.value)))+(x1152.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1153=IKcos(j4);
IkReal x1154=IKsin(j4);
IkReal x1155=(cj5*r11);
IkReal x1156=(cj5*r21);
IkReal x1157=(cj5*r01);
IkReal x1158=(sj5*x1153);
IkReal x1159=((1.0)*x1154);
evalcond[0]=(((r22*x1154))+((x1153*x1156))+((r20*x1158)));
evalcond[1]=(((r00*x1158))+sj0+((r02*x1154))+((x1153*x1157)));
evalcond[2]=(((r22*x1153))+(((-1.0)*x1156*x1159))+(((-1.0)*r20*sj5*x1159)));
evalcond[3]=((((-1.0)*x1157*x1159))+cj0+((r02*x1153))+(((-1.0)*r00*sj5*x1159)));
evalcond[4]=((((-1.0)*x1155*x1159))+sj0+((r12*x1153))+(((-1.0)*r10*sj5*x1159)));
evalcond[5]=(((r12*x1154))+((x1153*x1155))+(((-1.0)*cj0))+((r10*x1158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1160=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x1160.valid){
continue;
}
CheckValue<IkReal> x1161 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1160.value)))+(x1161.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1162=IKcos(j4);
IkReal x1163=IKsin(j4);
IkReal x1164=(cj5*r11);
IkReal x1165=(cj5*r21);
IkReal x1166=(cj5*r01);
IkReal x1167=(sj5*x1162);
IkReal x1168=((1.0)*x1163);
evalcond[0]=(((r20*x1167))+((x1162*x1165))+((r22*x1163)));
evalcond[1]=(sj0+((r02*x1163))+((r00*x1167))+((x1162*x1166)));
evalcond[2]=((((-1.0)*r20*sj5*x1168))+((r22*x1162))+(((-1.0)*x1165*x1168)));
evalcond[3]=((((-1.0)*x1166*x1168))+((r02*x1162))+cj0+(((-1.0)*r00*sj5*x1168)));
evalcond[4]=(sj0+(((-1.0)*r10*sj5*x1168))+((r12*x1162))+(((-1.0)*x1164*x1168)));
evalcond[5]=(((x1162*x1164))+((r10*x1167))+((r12*x1163))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1169 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1169.valid){
continue;
}
CheckValue<IkReal> x1170=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x1170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1169.value)+(((1.5707963267949)*(x1170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1171=IKcos(j4);
IkReal x1172=IKsin(j4);
IkReal x1173=(cj5*r11);
IkReal x1174=(cj5*r21);
IkReal x1175=(cj5*r01);
IkReal x1176=(sj5*x1171);
IkReal x1177=((1.0)*x1172);
evalcond[0]=(((r20*x1176))+((r22*x1172))+((x1171*x1174)));
evalcond[1]=(((r02*x1172))+sj0+((r00*x1176))+((x1171*x1175)));
evalcond[2]=((((-1.0)*r20*sj5*x1177))+((r22*x1171))+(((-1.0)*x1174*x1177)));
evalcond[3]=(((r02*x1171))+cj0+(((-1.0)*x1175*x1177))+(((-1.0)*r00*sj5*x1177)));
evalcond[4]=((((-1.0)*x1173*x1177))+(((-1.0)*r10*sj5*x1177))+sj0+((r12*x1171)));
evalcond[5]=(((r10*x1176))+((r12*x1172))+(((-1.0)*cj0))+((x1171*x1173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.4876660341556)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.4876660341556)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.4876660341556)*py))+IKsqr(((9.4876660341556)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.4876660341556)*py), ((9.4876660341556)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1054)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1054)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1178=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x1178;
j4eval[1]=IKsign(x1178);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1179=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x1179;
j4eval[1]=IKsign(x1179);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1180=cj5*cj5;
IkReal x1181=(r00*r20);
IkReal x1182=(cj5*sj5);
IkReal x1183=(x1181+(((-1.0)*x1180*x1181))+((r00*r21*x1182))+((r01*r20*x1182))+((r02*r22))+((r01*r21*x1180)));
j4eval[0]=x1183;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x1183);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1184=cj5*cj5;
IkReal x1185=(r00*r20);
IkReal x1186=(cj5*sj5);
CheckValue<IkReal> x1187 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1187.valid){
continue;
}
CheckValue<IkReal> x1188=IKPowWithIntegerCheck(IKsign((x1185+((r00*r21*x1186))+((r01*r20*x1186))+(((-1.0)*x1184*x1185))+((r02*r22))+((r01*r21*x1184)))),-1);
if(!x1188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1187.value)+(((1.5707963267949)*(x1188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1189=IKcos(j4);
IkReal x1190=IKsin(j4);
IkReal x1191=(sj5*x1189);
IkReal x1192=(cj5*x1189);
IkReal x1193=((1.0)*cj5*x1190);
IkReal x1194=((1.0)*sj5*x1190);
evalcond[0]=(((r22*x1190))+((r21*x1192))+((r20*x1191)));
evalcond[1]=(cj0+((r10*x1191))+((r11*x1192))+((r12*x1190)));
evalcond[2]=(((r22*x1189))+(((-1.0)*r21*x1193))+(((-1.0)*r20*x1194)));
evalcond[3]=((((-1.0)*r00*x1194))+cj0+((r02*x1189))+(((-1.0)*r01*x1193)));
evalcond[4]=(sj0+(((-1.0)*r10*x1194))+((r12*x1189))+(((-1.0)*r11*x1193)));
evalcond[5]=((((-1.0)*sj0))+((r01*x1192))+((r00*x1191))+((r02*x1190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1195 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1195.valid){
continue;
}
CheckValue<IkReal> x1196=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x1196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1195.value)+(((1.5707963267949)*(x1196.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1197=IKcos(j4);
IkReal x1198=IKsin(j4);
IkReal x1199=(sj5*x1197);
IkReal x1200=(cj5*x1197);
IkReal x1201=((1.0)*cj5*x1198);
IkReal x1202=((1.0)*sj5*x1198);
evalcond[0]=(((r22*x1198))+((r21*x1200))+((r20*x1199)));
evalcond[1]=(cj0+((r10*x1199))+((r11*x1200))+((r12*x1198)));
evalcond[2]=(((r22*x1197))+(((-1.0)*r21*x1201))+(((-1.0)*r20*x1202)));
evalcond[3]=(cj0+(((-1.0)*r01*x1201))+(((-1.0)*r00*x1202))+((r02*x1197)));
evalcond[4]=(sj0+(((-1.0)*r10*x1202))+(((-1.0)*r11*x1201))+((r12*x1197)));
evalcond[5]=((((-1.0)*sj0))+((r00*x1199))+((r02*x1198))+((r01*x1200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1203=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x1203.valid){
continue;
}
CheckValue<IkReal> x1204 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1203.value)))+(x1204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1205=IKcos(j4);
IkReal x1206=IKsin(j4);
IkReal x1207=(sj5*x1205);
IkReal x1208=(cj5*x1205);
IkReal x1209=((1.0)*cj5*x1206);
IkReal x1210=((1.0)*sj5*x1206);
evalcond[0]=(((r21*x1208))+((r20*x1207))+((r22*x1206)));
evalcond[1]=(cj0+((r10*x1207))+((r11*x1208))+((r12*x1206)));
evalcond[2]=((((-1.0)*r20*x1210))+(((-1.0)*r21*x1209))+((r22*x1205)));
evalcond[3]=(cj0+(((-1.0)*r01*x1209))+(((-1.0)*r00*x1210))+((r02*x1205)));
evalcond[4]=(sj0+((r12*x1205))+(((-1.0)*r10*x1210))+(((-1.0)*r11*x1209)));
evalcond[5]=((((-1.0)*sj0))+((r01*x1208))+((r00*x1207))+((r02*x1206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.09829334475201)*px))+(((0.489292297647925)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.489292297647925)*px))+(((-2.09829334475201)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.09829334475201)*px))+(((0.489292297647925)*py))))+IKsqr(((((0.489292297647925)*px))+(((-2.09829334475201)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.09829334475201)*px))+(((0.489292297647925)*py))), ((((0.489292297647925)*px))+(((-2.09829334475201)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1211=IKsin(j0);
IkReal x1212=IKcos(j0);
evalcond[0]=((((0.1054)*x1212))+(((0.452)*x1211))+(((-1.0)*px)));
evalcond[1]=((((0.1054)*x1211))+(((-0.452)*x1212))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1213=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x1213;
j4eval[1]=IKsign(x1213);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1214=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x1214;
j4eval[1]=IKsign(x1214);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1215=cj5*cj5;
IkReal x1216=(r00*r20);
IkReal x1217=(cj5*sj5);
IkReal x1218=(x1216+((r00*r21*x1217))+((r01*r21*x1215))+((r01*r20*x1217))+(((-1.0)*x1215*x1216))+((r02*r22)));
j4eval[0]=x1218;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x1218);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1219=cj5*cj5;
IkReal x1220=(r00*r20);
IkReal x1221=(cj5*sj5);
CheckValue<IkReal> x1222 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1222.valid){
continue;
}
CheckValue<IkReal> x1223=IKPowWithIntegerCheck(IKsign((x1220+(((-1.0)*x1219*x1220))+((r01*r21*x1219))+((r00*r21*x1221))+((r01*r20*x1221))+((r02*r22)))),-1);
if(!x1223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1222.value)+(((1.5707963267949)*(x1223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1224=IKcos(j4);
IkReal x1225=IKsin(j4);
IkReal x1226=(cj5*r11);
IkReal x1227=(cj5*r21);
IkReal x1228=(cj5*r01);
IkReal x1229=(sj5*x1224);
IkReal x1230=((1.0)*x1225);
evalcond[0]=(((r20*x1229))+((x1224*x1227))+((r22*x1225)));
evalcond[1]=(sj0+((r00*x1229))+((x1224*x1228))+((r02*x1225)));
evalcond[2]=((((-1.0)*r20*sj5*x1230))+(((-1.0)*x1227*x1230))+((r22*x1224)));
evalcond[3]=(cj0+((r02*x1224))+(((-1.0)*x1228*x1230))+(((-1.0)*r00*sj5*x1230)));
evalcond[4]=(sj0+(((-1.0)*x1226*x1230))+((r12*x1224))+(((-1.0)*r10*sj5*x1230)));
evalcond[5]=(((x1224*x1226))+((r10*x1229))+((r12*x1225))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1231=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x1231.valid){
continue;
}
CheckValue<IkReal> x1232 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1231.value)))+(x1232.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1233=IKcos(j4);
IkReal x1234=IKsin(j4);
IkReal x1235=(cj5*r11);
IkReal x1236=(cj5*r21);
IkReal x1237=(cj5*r01);
IkReal x1238=(sj5*x1233);
IkReal x1239=((1.0)*x1234);
evalcond[0]=(((r20*x1238))+((r22*x1234))+((x1233*x1236)));
evalcond[1]=(sj0+((r00*x1238))+((r02*x1234))+((x1233*x1237)));
evalcond[2]=((((-1.0)*r20*sj5*x1239))+((r22*x1233))+(((-1.0)*x1236*x1239)));
evalcond[3]=(cj0+(((-1.0)*x1237*x1239))+((r02*x1233))+(((-1.0)*r00*sj5*x1239)));
evalcond[4]=(sj0+(((-1.0)*x1235*x1239))+(((-1.0)*r10*sj5*x1239))+((r12*x1233)));
evalcond[5]=(((r10*x1238))+((x1233*x1235))+(((-1.0)*cj0))+((r12*x1234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1240 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1240.valid){
continue;
}
CheckValue<IkReal> x1241=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x1241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1240.value)+(((1.5707963267949)*(x1241.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1242=IKcos(j4);
IkReal x1243=IKsin(j4);
IkReal x1244=(cj5*r11);
IkReal x1245=(cj5*r21);
IkReal x1246=(cj5*r01);
IkReal x1247=(sj5*x1242);
IkReal x1248=((1.0)*x1243);
evalcond[0]=(((r20*x1247))+((x1242*x1245))+((r22*x1243)));
evalcond[1]=(sj0+((r00*x1247))+((x1242*x1246))+((r02*x1243)));
evalcond[2]=((((-1.0)*r20*sj5*x1248))+(((-1.0)*x1245*x1248))+((r22*x1242)));
evalcond[3]=(cj0+(((-1.0)*r00*sj5*x1248))+((r02*x1242))+(((-1.0)*x1246*x1248)));
evalcond[4]=((((-1.0)*x1244*x1248))+sj0+(((-1.0)*r10*sj5*x1248))+((r12*x1242)));
evalcond[5]=(((x1242*x1244))+((r12*x1243))+((r10*x1247))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.489292297647925)*py))+(((-2.09829334475201)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.09829334475201)*py))+(((0.489292297647925)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.489292297647925)*py))+(((-2.09829334475201)*px))))+IKsqr(((((2.09829334475201)*py))+(((0.489292297647925)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.489292297647925)*py))+(((-2.09829334475201)*px))), ((((2.09829334475201)*py))+(((0.489292297647925)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1249=IKcos(j0);
IkReal x1250=IKsin(j0);
evalcond[0]=((((0.1054)*x1249))+(((-1.0)*px))+(((-0.452)*x1250)));
evalcond[1]=((((0.452)*x1249))+(((-1.0)*py))+(((0.1054)*x1250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1251=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x1251;
j4eval[1]=IKsign(x1251);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1252=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x1252;
j4eval[1]=IKsign(x1252);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1253=cj5*cj5;
IkReal x1254=(r00*r20);
IkReal x1255=(cj5*sj5);
IkReal x1256=(x1254+((r01*r21*x1253))+((r00*r21*x1255))+(((-1.0)*x1253*x1254))+((r02*r22))+((r01*r20*x1255)));
j4eval[0]=x1256;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x1256);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1257=cj5*cj5;
IkReal x1258=(r00*r20);
IkReal x1259=(cj5*sj5);
CheckValue<IkReal> x1260=IKPowWithIntegerCheck(IKsign((x1258+((r01*r21*x1257))+(((-1.0)*x1257*x1258))+((r00*r21*x1259))+((r02*r22))+((r01*r20*x1259)))),-1);
if(!x1260.valid){
continue;
}
CheckValue<IkReal> x1261 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1260.value)))+(x1261.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1262=IKcos(j4);
IkReal x1263=IKsin(j4);
IkReal x1264=(sj5*x1262);
IkReal x1265=(cj5*x1262);
IkReal x1266=((1.0)*cj5*x1263);
IkReal x1267=((1.0)*sj5*x1263);
evalcond[0]=(((r21*x1265))+((r22*x1263))+((r20*x1264)));
evalcond[1]=(((r11*x1265))+cj0+((r10*x1264))+((r12*x1263)));
evalcond[2]=((((-1.0)*r21*x1266))+((r22*x1262))+(((-1.0)*r20*x1267)));
evalcond[3]=(cj0+((r02*x1262))+(((-1.0)*r00*x1267))+(((-1.0)*r01*x1266)));
evalcond[4]=((((-1.0)*r10*x1267))+sj0+(((-1.0)*r11*x1266))+((r12*x1262)));
evalcond[5]=((((-1.0)*sj0))+((r02*x1263))+((r00*x1264))+((r01*x1265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1268 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1268.valid){
continue;
}
CheckValue<IkReal> x1269=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x1269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1268.value)+(((1.5707963267949)*(x1269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1270=IKcos(j4);
IkReal x1271=IKsin(j4);
IkReal x1272=(sj5*x1270);
IkReal x1273=(cj5*x1270);
IkReal x1274=((1.0)*cj5*x1271);
IkReal x1275=((1.0)*sj5*x1271);
evalcond[0]=(((r21*x1273))+((r22*x1271))+((r20*x1272)));
evalcond[1]=(((r12*x1271))+((r10*x1272))+cj0+((r11*x1273)));
evalcond[2]=(((r22*x1270))+(((-1.0)*r20*x1275))+(((-1.0)*r21*x1274)));
evalcond[3]=(cj0+(((-1.0)*r00*x1275))+(((-1.0)*r01*x1274))+((r02*x1270)));
evalcond[4]=(((r12*x1270))+sj0+(((-1.0)*r11*x1274))+(((-1.0)*r10*x1275)));
evalcond[5]=((((-1.0)*sj0))+((r02*x1271))+((r00*x1272))+((r01*x1273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1276=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x1276.valid){
continue;
}
CheckValue<IkReal> x1277 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1276.value)))+(x1277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1278=IKcos(j4);
IkReal x1279=IKsin(j4);
IkReal x1280=(sj5*x1278);
IkReal x1281=(cj5*x1278);
IkReal x1282=((1.0)*cj5*x1279);
IkReal x1283=((1.0)*sj5*x1279);
evalcond[0]=(((r22*x1279))+((r20*x1280))+((r21*x1281)));
evalcond[1]=(((r12*x1279))+((r11*x1281))+cj0+((r10*x1280)));
evalcond[2]=(((r22*x1278))+(((-1.0)*r21*x1282))+(((-1.0)*r20*x1283)));
evalcond[3]=(cj0+((r02*x1278))+(((-1.0)*r01*x1282))+(((-1.0)*r00*x1283)));
evalcond[4]=(((r12*x1278))+sj0+(((-1.0)*r10*x1283))+(((-1.0)*r11*x1282)));
evalcond[5]=((((-1.0)*sj0))+((r02*x1279))+((r01*x1281))+((r00*x1280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.09135885719082)*px))+(((0.127244716314062)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.09135885719082)*py))+(((0.127244716314062)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.09135885719082)*px))+(((0.127244716314062)*py))))+IKsqr(((((1.09135885719082)*py))+(((0.127244716314062)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.09135885719082)*px))+(((0.127244716314062)*py))), ((((1.09135885719082)*py))+(((0.127244716314062)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1284=IKcos(j0);
IkReal x1285=IKsin(j0);
evalcond[0]=((((0.1054)*x1284))+(((-0.904)*x1285))+(((-1.0)*px)));
evalcond[1]=((((0.1054)*x1285))+(((-1.0)*py))+(((0.904)*x1284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1286=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x1286;
j4eval[1]=IKsign(x1286);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1287=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x1287;
j4eval[1]=IKsign(x1287);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1288=cj5*cj5;
IkReal x1289=(r00*r20);
IkReal x1290=(cj5*sj5);
IkReal x1291=(x1289+(((-1.0)*x1288*x1289))+((r01*r21*x1288))+((r00*r21*x1290))+((r02*r22))+((r01*r20*x1290)));
j4eval[0]=x1291;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x1291);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1292=cj5*cj5;
IkReal x1293=(r00*r20);
IkReal x1294=(cj5*sj5);
CheckValue<IkReal> x1295=IKPowWithIntegerCheck(IKsign((x1293+((r01*r21*x1292))+(((-1.0)*x1292*x1293))+((r00*r21*x1294))+((r02*r22))+((r01*r20*x1294)))),-1);
if(!x1295.valid){
continue;
}
CheckValue<IkReal> x1296 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1295.value)))+(x1296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1297=IKcos(j4);
IkReal x1298=IKsin(j4);
IkReal x1299=(sj5*x1297);
IkReal x1300=(cj5*x1297);
IkReal x1301=((1.0)*cj5*x1298);
IkReal x1302=((1.0)*sj5*x1298);
evalcond[0]=(((r20*x1299))+((r21*x1300))+((r22*x1298)));
evalcond[1]=(cj0+((r12*x1298))+((r11*x1300))+((r10*x1299)));
evalcond[2]=((((-1.0)*r21*x1301))+(((-1.0)*r20*x1302))+((r22*x1297)));
evalcond[3]=((((-1.0)*r01*x1301))+cj0+(((-1.0)*r00*x1302))+((r02*x1297)));
evalcond[4]=(sj0+((r12*x1297))+(((-1.0)*r10*x1302))+(((-1.0)*r11*x1301)));
evalcond[5]=((((-1.0)*sj0))+((r02*x1298))+((r00*x1299))+((r01*x1300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1303 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1303.valid){
continue;
}
CheckValue<IkReal> x1304=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x1304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1303.value)+(((1.5707963267949)*(x1304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1305=IKcos(j4);
IkReal x1306=IKsin(j4);
IkReal x1307=(sj5*x1305);
IkReal x1308=(cj5*x1305);
IkReal x1309=((1.0)*cj5*x1306);
IkReal x1310=((1.0)*sj5*x1306);
evalcond[0]=(((r21*x1308))+((r22*x1306))+((r20*x1307)));
evalcond[1]=(cj0+((r10*x1307))+((r12*x1306))+((r11*x1308)));
evalcond[2]=((((-1.0)*r21*x1309))+(((-1.0)*r20*x1310))+((r22*x1305)));
evalcond[3]=((((-1.0)*r01*x1309))+cj0+(((-1.0)*r00*x1310))+((r02*x1305)));
evalcond[4]=(sj0+((r12*x1305))+(((-1.0)*r11*x1309))+(((-1.0)*r10*x1310)));
evalcond[5]=((((-1.0)*sj0))+((r02*x1306))+((r01*x1308))+((r00*x1307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1311=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x1311.valid){
continue;
}
CheckValue<IkReal> x1312 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1311.value)))+(x1312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1313=IKcos(j4);
IkReal x1314=IKsin(j4);
IkReal x1315=(sj5*x1313);
IkReal x1316=(cj5*x1313);
IkReal x1317=((1.0)*cj5*x1314);
IkReal x1318=((1.0)*sj5*x1314);
evalcond[0]=(((r22*x1314))+((r21*x1316))+((r20*x1315)));
evalcond[1]=(cj0+((r11*x1316))+((r10*x1315))+((r12*x1314)));
evalcond[2]=(((r22*x1313))+(((-1.0)*r20*x1318))+(((-1.0)*r21*x1317)));
evalcond[3]=(cj0+(((-1.0)*r00*x1318))+(((-1.0)*r01*x1317))+((r02*x1313)));
evalcond[4]=(sj0+(((-1.0)*r11*x1317))+((r12*x1313))+(((-1.0)*r10*x1318)));
evalcond[5]=(((r00*x1315))+(((-1.0)*sj0))+((r01*x1316))+((r02*x1314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.4876660341556)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.4876660341556)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.4876660341556)*py))+IKsqr(((9.4876660341556)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.4876660341556)*py), ((9.4876660341556)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1054)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1054)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1319=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x1319;
j4eval[1]=IKsign(x1319);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1320=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x1320;
j4eval[1]=IKsign(x1320);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1321=cj5*cj5;
IkReal x1322=(r00*r20);
IkReal x1323=(cj5*sj5);
IkReal x1324=(x1322+((r01*r20*x1323))+(((-1.0)*x1321*x1322))+((r01*r21*x1321))+((r02*r22))+((r00*r21*x1323)));
j4eval[0]=x1324;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x1324);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1325=cj5*cj5;
IkReal x1326=(r00*r20);
IkReal x1327=(cj5*sj5);
CheckValue<IkReal> x1328 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1328.valid){
continue;
}
CheckValue<IkReal> x1329=IKPowWithIntegerCheck(IKsign((x1326+((r01*r20*x1327))+((r01*r21*x1325))+(((-1.0)*x1325*x1326))+((r02*r22))+((r00*r21*x1327)))),-1);
if(!x1329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1328.value)+(((1.5707963267949)*(x1329.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1330=IKcos(j4);
IkReal x1331=IKsin(j4);
IkReal x1332=(cj5*r11);
IkReal x1333=(cj5*r21);
IkReal x1334=(cj5*r01);
IkReal x1335=(sj5*x1330);
IkReal x1336=((1.0)*x1331);
evalcond[0]=(((r20*x1335))+((r22*x1331))+((x1330*x1333)));
evalcond[1]=(sj0+((r00*x1335))+((x1330*x1334))+((r02*x1331)));
evalcond[2]=((((-1.0)*x1333*x1336))+((r22*x1330))+(((-1.0)*r20*sj5*x1336)));
evalcond[3]=(cj0+(((-1.0)*r00*sj5*x1336))+(((-1.0)*x1334*x1336))+((r02*x1330)));
evalcond[4]=(((r12*x1330))+sj0+(((-1.0)*r10*sj5*x1336))+(((-1.0)*x1332*x1336)));
evalcond[5]=(((r12*x1331))+((r10*x1335))+((x1330*x1332))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1337=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x1337.valid){
continue;
}
CheckValue<IkReal> x1338 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1337.value)))+(x1338.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1339=IKcos(j4);
IkReal x1340=IKsin(j4);
IkReal x1341=(cj5*r11);
IkReal x1342=(cj5*r21);
IkReal x1343=(cj5*r01);
IkReal x1344=(sj5*x1339);
IkReal x1345=((1.0)*x1340);
evalcond[0]=(((x1339*x1342))+((r22*x1340))+((r20*x1344)));
evalcond[1]=(sj0+((x1339*x1343))+((r02*x1340))+((r00*x1344)));
evalcond[2]=(((r22*x1339))+(((-1.0)*x1342*x1345))+(((-1.0)*r20*sj5*x1345)));
evalcond[3]=(cj0+(((-1.0)*x1343*x1345))+(((-1.0)*r00*sj5*x1345))+((r02*x1339)));
evalcond[4]=(((r12*x1339))+sj0+(((-1.0)*x1341*x1345))+(((-1.0)*r10*sj5*x1345)));
evalcond[5]=(((x1339*x1341))+((r12*x1340))+(((-1.0)*cj0))+((r10*x1344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1346 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1346.valid){
continue;
}
CheckValue<IkReal> x1347=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x1347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1346.value)+(((1.5707963267949)*(x1347.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1348=IKcos(j4);
IkReal x1349=IKsin(j4);
IkReal x1350=(cj5*r11);
IkReal x1351=(cj5*r21);
IkReal x1352=(cj5*r01);
IkReal x1353=(sj5*x1348);
IkReal x1354=((1.0)*x1349);
evalcond[0]=(((r22*x1349))+((x1348*x1351))+((r20*x1353)));
evalcond[1]=(sj0+((r02*x1349))+((x1348*x1352))+((r00*x1353)));
evalcond[2]=(((r22*x1348))+(((-1.0)*x1351*x1354))+(((-1.0)*r20*sj5*x1354)));
evalcond[3]=((((-1.0)*r00*sj5*x1354))+(((-1.0)*x1352*x1354))+cj0+((r02*x1348)));
evalcond[4]=((((-1.0)*r10*sj5*x1354))+sj0+(((-1.0)*x1350*x1354))+((r12*x1348)));
evalcond[5]=(((r10*x1353))+((x1348*x1350))+((r12*x1349))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1355=(sj1*sj2);
IkReal x1356=(cj5*r00);
IkReal x1357=((5000.0)*px);
IkReal x1358=(r01*sj5);
IkReal x1359=(cj1*cj2);
IkReal x1360=((2260.0)*sj1);
IkReal x1361=((2260.0)*cj1*sj2);
CheckValue<IkReal> x1362=IKPowWithIntegerCheck((x1359+x1355),-1);
if(!x1362.valid){
continue;
}
CheckValue<IkReal> x1363=IKPowWithIntegerCheck(((((527.0)*x1355))+(((527.0)*x1359))),-1);
if(!x1363.valid){
continue;
}
if( IKabs(((x1362.value)*((x1358+(((-1.0)*x1356)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1363.value)*((((x1356*x1360))+((x1357*x1359))+((x1355*x1357))+(((-1.0)*cj2*x1358*x1360))+(((567.5)*x1355*x1356))+((x1358*x1361))+(((-567.5)*x1358*x1359))+(((567.5)*x1356*x1359))+(((-1.0)*x1356*x1361))+((cj2*x1356*x1360))+(((-567.5)*x1355*x1358))+(((-1.0)*x1358*x1360)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1362.value)*((x1358+(((-1.0)*x1356))))))+IKsqr(((x1363.value)*((((x1356*x1360))+((x1357*x1359))+((x1355*x1357))+(((-1.0)*cj2*x1358*x1360))+(((567.5)*x1355*x1356))+((x1358*x1361))+(((-567.5)*x1358*x1359))+(((567.5)*x1356*x1359))+(((-1.0)*x1356*x1361))+((cj2*x1356*x1360))+(((-567.5)*x1355*x1358))+(((-1.0)*x1358*x1360))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1362.value)*((x1358+(((-1.0)*x1356))))), ((x1363.value)*((((x1356*x1360))+((x1357*x1359))+((x1355*x1357))+(((-1.0)*cj2*x1358*x1360))+(((567.5)*x1355*x1356))+((x1358*x1361))+(((-567.5)*x1358*x1359))+(((567.5)*x1356*x1359))+(((-1.0)*x1356*x1361))+((cj2*x1356*x1360))+(((-567.5)*x1355*x1358))+(((-1.0)*x1358*x1360))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1364=IKsin(j0);
IkReal x1365=IKcos(j0);
IkReal x1366=(cj5*r10);
IkReal x1367=(cj5*r00);
IkReal x1368=(r11*sj5);
IkReal x1369=((0.452)*cj2);
IkReal x1370=((0.452)*sj2);
IkReal x1371=(r01*sj5);
IkReal x1372=(cj1*x1364);
IkReal x1373=(sj1*x1365);
IkReal x1374=(cj1*x1365);
IkReal x1375=(sj1*x1364);
evalcond[0]=(x1367+(((-1.0)*x1371))+((sj2*x1375))+((cj2*x1372)));
evalcond[1]=(x1366+(((-1.0)*sj2*x1373))+(((-1.0)*x1368))+(((-1.0)*cj2*x1374)));
evalcond[2]=((((0.1135)*x1371))+(((0.1054)*x1365))+(((-1.0)*x1370*x1372))+(((0.452)*x1375))+(((-1.0)*px))+((x1369*x1375))+(((-0.1135)*x1367)));
evalcond[3]=((((0.1054)*x1364))+(((0.1135)*x1368))+(((-1.0)*py))+((x1370*x1374))+(((-0.452)*x1373))+(((-1.0)*x1369*x1373))+(((-0.1135)*x1366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1376=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x1376;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x1376);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1377=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x1377;
j4eval[1]=IKsign(x1377);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1378=((1.0)*sj0);
IkReal x1379=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x1379;
j4eval[1]=((IKabs((((cj0*cj5*r11))+(((-1.0)*r00*sj5*x1378))+((cj0*r10*sj5))+(((-1.0)*cj5*r01*x1378)))))+(IKabs(((((-1.0)*r02*x1378))+((cj0*r12))))));
j4eval[2]=IKsign(x1379);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1380=((-1.0)*r21);
IkReal x1382 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1382)==0){
continue;
}
IkReal x1381=pow(x1382,-0.5);
CheckValue<IkReal> x1383 = IKatan2WithCheck(IkReal(r20),IkReal(x1380),IKFAST_ATAN2_MAGTHRESH);
if(!x1383.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1383.value));
IkReal gconst79=((-1.0)*r20*x1381);
IkReal gconst80=(x1380*x1381);
CheckValue<IkReal> x1384 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1384.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1384.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1385=((-1.0)*r21);
CheckValue<IkReal> x1388 = IKatan2WithCheck(IkReal(r20),IkReal(x1385),IKFAST_ATAN2_MAGTHRESH);
if(!x1388.valid){
continue;
}
IkReal x1386=((-1.0)*(x1388.value));
IkReal x1387=x1381;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1386;
IkReal gconst78=x1386;
IkReal gconst79=((-1.0)*r20*x1387);
IkReal gconst80=(x1385*x1387);
IkReal x1389=r22*r22;
IkReal x1390=((1.0)*x1389);
CheckValue<IkReal> x1394=IKPowWithIntegerCheck(((-1.0)+x1389),-1);
if(!x1394.valid){
continue;
}
IkReal x1391=x1394.value;
if((((1.0)+(((-1.0)*x1390)))) < -0.00001)
continue;
IkReal x1392=IKsqrt(((1.0)+(((-1.0)*x1390))));
IkReal x1393=(cj0*x1391*x1392);
j4eval[0]=((IKabs((x1393+(((-1.0)*x1390*x1393)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1395=((-1.0)*r21);
CheckValue<IkReal> x1398 = IKatan2WithCheck(IkReal(r20),IkReal(x1395),IKFAST_ATAN2_MAGTHRESH);
if(!x1398.valid){
continue;
}
IkReal x1396=((-1.0)*(x1398.value));
IkReal x1397=x1381;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1396;
IkReal gconst78=x1396;
IkReal gconst79=((-1.0)*r20*x1397);
IkReal gconst80=(x1395*x1397);
IkReal x1399=r22*r22;
IkReal x1400=((1.0)*x1399);
CheckValue<IkReal> x1404=IKPowWithIntegerCheck(((-1.0)+x1399),-1);
if(!x1404.valid){
continue;
}
IkReal x1401=x1404.value;
if((((1.0)+(((-1.0)*x1400)))) < -0.00001)
continue;
IkReal x1402=IKsqrt(((1.0)+(((-1.0)*x1400))));
IkReal x1403=(sj0*x1401*x1402);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x1403+(((-1.0)*x1400*x1403))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1405=((-1.0)*r21);
CheckValue<IkReal> x1408 = IKatan2WithCheck(IkReal(r20),IkReal(x1405),IKFAST_ATAN2_MAGTHRESH);
if(!x1408.valid){
continue;
}
IkReal x1406=((-1.0)*(x1408.value));
IkReal x1407=x1381;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1406;
IkReal gconst78=x1406;
IkReal gconst79=((-1.0)*r20*x1407);
IkReal gconst80=(x1405*x1407);
IkReal x1409=((1.0)*(r22*r22));
CheckValue<IkReal> x1413=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1409))),-1);
if(!x1413.valid){
continue;
}
IkReal x1410=x1413.value;
IkReal x1411=((1.0)*x1410);
IkReal x1412=((((-1.0)*x1409))+(((-2.0)*x1410*(r20*r20)*(r21*r21)))+(((-1.0)*x1411*(r20*r20*r20*r20)))+(((-1.0)*x1411*(r21*r21*r21*r21))));
j4eval[0]=x1412;
j4eval[1]=IKsign(x1412);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1414=(gconst79*r20);
IkReal x1415=(cj1*cj2);
IkReal x1416=(sj1*sj2);
IkReal x1417=(gconst80*r21);
CheckValue<IkReal> x1418=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1414*x1417))+(((-1.0)*(x1417*x1417)))+(((-1.0)*(x1414*x1414)))+(((-1.0)*(r22*r22))))),-1);
if(!x1418.valid){
continue;
}
CheckValue<IkReal> x1419 = IKatan2WithCheck(IkReal((((r22*x1415))+((r22*x1416)))),IkReal((((x1415*x1417))+((x1416*x1417))+((x1414*x1416))+((x1414*x1415)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1418.value)))+(x1419.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1420=IKsin(j4);
IkReal x1421=IKcos(j4);
IkReal x1422=(gconst80*r11);
IkReal x1423=(cj2*sj1);
IkReal x1424=(gconst79*r20);
IkReal x1425=(gconst79*r10);
IkReal x1426=(gconst80*r01);
IkReal x1427=(gconst79*r00);
IkReal x1428=(gconst80*r21);
IkReal x1429=(cj1*sj2);
IkReal x1430=((1.0)*x1420);
evalcond[0]=(((r22*x1421))+(((-1.0)*x1428*x1430))+(((-1.0)*x1424*x1430)));
evalcond[1]=(cj0+((r02*x1421))+(((-1.0)*x1426*x1430))+(((-1.0)*x1427*x1430)));
evalcond[2]=(sj0+(((-1.0)*x1422*x1430))+(((-1.0)*x1425*x1430))+((r12*x1421)));
evalcond[3]=(((r22*x1420))+((sj1*sj2))+((cj1*cj2))+((x1421*x1424))+((x1421*x1428)));
evalcond[4]=((((-1.0)*sj0*x1429))+((r02*x1420))+((x1421*x1427))+((x1421*x1426))+((sj0*x1423)));
evalcond[5]=((((-1.0)*cj0*x1423))+((r12*x1420))+((x1421*x1422))+((x1421*x1425))+((cj0*x1429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1431=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r01))+((gconst80*r00)))),-1);
if(!x1431.valid){
continue;
}
CheckValue<IkReal> x1432 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r20*sj0))+((gconst80*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1431.value)))+(x1432.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1433=IKsin(j4);
IkReal x1434=IKcos(j4);
IkReal x1435=(gconst80*r11);
IkReal x1436=(cj2*sj1);
IkReal x1437=(gconst79*r20);
IkReal x1438=(gconst79*r10);
IkReal x1439=(gconst80*r01);
IkReal x1440=(gconst79*r00);
IkReal x1441=(gconst80*r21);
IkReal x1442=(cj1*sj2);
IkReal x1443=((1.0)*x1433);
evalcond[0]=((((-1.0)*x1437*x1443))+(((-1.0)*x1441*x1443))+((r22*x1434)));
evalcond[1]=(((r02*x1434))+cj0+(((-1.0)*x1439*x1443))+(((-1.0)*x1440*x1443)));
evalcond[2]=(sj0+(((-1.0)*x1438*x1443))+((r12*x1434))+(((-1.0)*x1435*x1443)));
evalcond[3]=(((x1434*x1441))+((sj1*sj2))+((x1434*x1437))+((cj1*cj2))+((r22*x1433)));
evalcond[4]=(((x1434*x1440))+((r02*x1433))+((x1434*x1439))+((sj0*x1436))+(((-1.0)*sj0*x1442)));
evalcond[5]=(((r12*x1433))+((x1434*x1438))+((x1434*x1435))+(((-1.0)*cj0*x1436))+((cj0*x1442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1444=IKPowWithIntegerCheck(IKsign((((gconst79*r11))+(((-1.0)*gconst80*r10)))),-1);
if(!x1444.valid){
continue;
}
CheckValue<IkReal> x1445 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r20))+((cj0*gconst80*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1444.value)))+(x1445.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1446=IKsin(j4);
IkReal x1447=IKcos(j4);
IkReal x1448=(gconst80*r11);
IkReal x1449=(cj2*sj1);
IkReal x1450=(gconst79*r20);
IkReal x1451=(gconst79*r10);
IkReal x1452=(gconst80*r01);
IkReal x1453=(gconst79*r00);
IkReal x1454=(gconst80*r21);
IkReal x1455=(cj1*sj2);
IkReal x1456=((1.0)*x1446);
evalcond[0]=(((r22*x1447))+(((-1.0)*x1454*x1456))+(((-1.0)*x1450*x1456)));
evalcond[1]=(cj0+((r02*x1447))+(((-1.0)*x1453*x1456))+(((-1.0)*x1452*x1456)));
evalcond[2]=(((r12*x1447))+sj0+(((-1.0)*x1448*x1456))+(((-1.0)*x1451*x1456)));
evalcond[3]=(((r22*x1446))+((x1447*x1454))+((x1447*x1450))+((sj1*sj2))+((cj1*cj2)));
evalcond[4]=(((x1447*x1453))+((x1447*x1452))+(((-1.0)*sj0*x1455))+((sj0*x1449))+((r02*x1446)));
evalcond[5]=(((r12*x1446))+((x1447*x1451))+((cj0*x1455))+((x1447*x1448))+(((-1.0)*cj0*x1449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1459 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1459)==0){
continue;
}
IkReal x1457=pow(x1459,-0.5);
IkReal x1458=((1.0)*x1457);
CheckValue<IkReal> x1460 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1460.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1460.value))));
IkReal gconst82=(r20*x1458);
IkReal gconst83=(r21*x1458);
CheckValue<IkReal> x1461 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1461.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1461.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x1465 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1465.valid){
continue;
}
IkReal x1462=((1.0)*(x1465.value));
IkReal x1463=x1457;
IkReal x1464=((1.0)*x1463);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1462)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1462)));
IkReal gconst82=(r20*x1464);
IkReal gconst83=(r21*x1464);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1469 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1469.valid){
continue;
}
IkReal x1466=((1.0)*(x1469.value));
IkReal x1467=x1457;
IkReal x1468=((1.0)*x1467);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1466)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1466)));
IkReal gconst82=(r20*x1468);
IkReal gconst83=(r21*x1468);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x1473 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1473.valid){
continue;
}
IkReal x1470=((1.0)*(x1473.value));
IkReal x1471=x1457;
IkReal x1472=((1.0)*x1471);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1470)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1470)));
IkReal gconst82=(r20*x1472);
IkReal gconst83=(r21*x1472);
IkReal x1474=r22*r22;
IkReal x1475=(cj0*r12);
IkReal x1476=((1.0)*r02*sj0);
CheckValue<IkReal> x1480=IKPowWithIntegerCheck(((-1.0)+x1474),-1);
if(!x1480.valid){
continue;
}
IkReal x1477=x1480.value;
if((((1.0)+(((-1.0)*x1474)))) < -0.00001)
continue;
IkReal x1478=IKsqrt(((1.0)+(((-1.0)*x1474))));
IkReal x1479=(r22*x1477*x1478);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x1476*x1479))+((x1475*x1479)))))+(IKabs((x1475+(((-1.0)*x1476))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1481=((1.0)*sj0);
CheckValue<IkReal> x1482 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1481))+((cj0*r12)))),IkReal(((((-1.0)*gconst82*r00*x1481))+(((-1.0)*gconst83*r01*x1481))+((cj0*gconst83*r11))+((cj0*gconst82*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1482.valid){
continue;
}
CheckValue<IkReal> x1483=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r21))+((gconst83*r20)))),-1);
if(!x1483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1482.value)+(((1.5707963267949)*(x1483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1484=IKsin(j4);
IkReal x1485=IKcos(j4);
IkReal x1486=(gconst83*r01);
IkReal x1487=(cj2*sj1);
IkReal x1488=(gconst83*r11);
IkReal x1489=(gconst82*r20);
IkReal x1490=(gconst82*r00);
IkReal x1491=(gconst83*r21);
IkReal x1492=(cj1*sj2);
IkReal x1493=(gconst82*r10);
IkReal x1494=((1.0)*x1484);
evalcond[0]=((((-1.0)*x1491*x1494))+((r22*x1485))+(((-1.0)*x1489*x1494)));
evalcond[1]=(cj0+(((-1.0)*x1486*x1494))+(((-1.0)*x1490*x1494))+((r02*x1485)));
evalcond[2]=(sj0+((r12*x1485))+(((-1.0)*x1493*x1494))+(((-1.0)*x1488*x1494)));
evalcond[3]=(((sj1*sj2))+((x1485*x1491))+((x1485*x1489))+((cj1*cj2))+((r22*x1484)));
evalcond[4]=(((sj0*x1487))+(((-1.0)*sj0*x1492))+((x1485*x1490))+((x1485*x1486))+((r02*x1484)));
evalcond[5]=((((-1.0)*cj0*x1487))+((r12*x1484))+((x1485*x1493))+((x1485*x1488))+((cj0*x1492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1495 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r20*sj0))+((gconst83*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1495.valid){
continue;
}
CheckValue<IkReal> x1496=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r01))+((gconst83*r00)))),-1);
if(!x1496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1495.value)+(((1.5707963267949)*(x1496.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1497=IKsin(j4);
IkReal x1498=IKcos(j4);
IkReal x1499=(gconst83*r01);
IkReal x1500=(cj2*sj1);
IkReal x1501=(gconst83*r11);
IkReal x1502=(gconst82*r20);
IkReal x1503=(gconst82*r00);
IkReal x1504=(gconst83*r21);
IkReal x1505=(cj1*sj2);
IkReal x1506=(gconst82*r10);
IkReal x1507=((1.0)*x1497);
evalcond[0]=((((-1.0)*x1504*x1507))+((r22*x1498))+(((-1.0)*x1502*x1507)));
evalcond[1]=((((-1.0)*x1499*x1507))+cj0+(((-1.0)*x1503*x1507))+((r02*x1498)));
evalcond[2]=(sj0+(((-1.0)*x1506*x1507))+((r12*x1498))+(((-1.0)*x1501*x1507)));
evalcond[3]=(((x1498*x1504))+((x1498*x1502))+((sj1*sj2))+((r22*x1497))+((cj1*cj2)));
evalcond[4]=(((x1498*x1499))+((x1498*x1503))+((sj0*x1500))+(((-1.0)*sj0*x1505))+((r02*x1497)));
evalcond[5]=(((cj0*x1505))+((x1498*x1501))+((x1498*x1506))+((r12*x1497))+(((-1.0)*cj0*x1500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1508=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst83*r10))+((gconst82*r11)))),-1);
if(!x1508.valid){
continue;
}
CheckValue<IkReal> x1509 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst83*r21))+((cj0*gconst82*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1508.value)))+(x1509.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1510=IKsin(j4);
IkReal x1511=IKcos(j4);
IkReal x1512=(gconst83*r01);
IkReal x1513=(cj2*sj1);
IkReal x1514=(gconst83*r11);
IkReal x1515=(gconst82*r20);
IkReal x1516=(gconst82*r00);
IkReal x1517=(gconst83*r21);
IkReal x1518=(cj1*sj2);
IkReal x1519=(gconst82*r10);
IkReal x1520=((1.0)*x1510);
evalcond[0]=((((-1.0)*x1515*x1520))+((r22*x1511))+(((-1.0)*x1517*x1520)));
evalcond[1]=(cj0+((r02*x1511))+(((-1.0)*x1512*x1520))+(((-1.0)*x1516*x1520)));
evalcond[2]=(sj0+((r12*x1511))+(((-1.0)*x1519*x1520))+(((-1.0)*x1514*x1520)));
evalcond[3]=(((sj1*sj2))+((r22*x1510))+((cj1*cj2))+((x1511*x1515))+((x1511*x1517)));
evalcond[4]=(((sj0*x1513))+(((-1.0)*sj0*x1518))+((r02*x1510))+((x1511*x1516))+((x1511*x1512)));
evalcond[5]=(((cj0*x1518))+((r12*x1510))+(((-1.0)*cj0*x1513))+((x1511*x1519))+((x1511*x1514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1523 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1523)==0){
continue;
}
IkReal x1521=pow(x1523,-0.5);
IkReal x1522=((-1.0)*x1521);
CheckValue<IkReal> x1524 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1524.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1524.value));
IkReal gconst85=(r00*x1522);
IkReal gconst86=(r01*x1522);
CheckValue<IkReal> x1525 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1525.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1525.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1529 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1529.valid){
continue;
}
IkReal x1526=((-1.0)*(x1529.value));
IkReal x1527=x1521;
IkReal x1528=((-1.0)*x1527);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1526;
IkReal gconst84=x1526;
IkReal gconst85=(r00*x1528);
IkReal gconst86=(r01*x1528);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1530=((1.0)*sj0);
CheckValue<IkReal> x1531=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r21))+((gconst86*r20)))),-1);
if(!x1531.valid){
continue;
}
CheckValue<IkReal> x1532 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1530))+((cj0*r12)))),IkReal(((((-1.0)*gconst85*r00*x1530))+((cj0*gconst86*r11))+(((-1.0)*gconst86*r01*x1530))+((cj0*gconst85*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1531.value)))+(x1532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1533=IKsin(j4);
IkReal x1534=IKcos(j4);
IkReal x1535=(gconst85*r20);
IkReal x1536=(cj2*sj1);
IkReal x1537=(gconst86*r21);
IkReal x1538=(gconst85*r10);
IkReal x1539=(gconst85*r00);
IkReal x1540=(gconst86*r01);
IkReal x1541=(cj1*sj2);
IkReal x1542=(gconst86*r11);
IkReal x1543=((1.0)*x1533);
evalcond[0]=((((-1.0)*x1535*x1543))+(((-1.0)*x1537*x1543))+((r22*x1534)));
evalcond[1]=(cj0+(((-1.0)*x1540*x1543))+(((-1.0)*x1539*x1543))+((r02*x1534)));
evalcond[2]=(((r12*x1534))+sj0+(((-1.0)*x1542*x1543))+(((-1.0)*x1538*x1543)));
evalcond[3]=(((sj1*sj2))+((cj1*cj2))+((r22*x1533))+((x1534*x1535))+((x1534*x1537)));
evalcond[4]=(((sj0*x1536))+((x1534*x1540))+((r02*x1533))+((x1534*x1539))+(((-1.0)*sj0*x1541)));
evalcond[5]=(((r12*x1533))+((x1534*x1542))+((cj0*x1541))+(((-1.0)*cj0*x1536))+((x1534*x1538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1544 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r20))+((cj0*gconst86*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1544.valid){
continue;
}
CheckValue<IkReal> x1545=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r10))+((gconst85*r11)))),-1);
if(!x1545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1544.value)+(((1.5707963267949)*(x1545.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1546=IKsin(j4);
IkReal x1547=IKcos(j4);
IkReal x1548=(gconst85*r20);
IkReal x1549=(cj2*sj1);
IkReal x1550=(gconst86*r21);
IkReal x1551=(gconst85*r10);
IkReal x1552=(gconst85*r00);
IkReal x1553=(gconst86*r01);
IkReal x1554=(cj1*sj2);
IkReal x1555=(gconst86*r11);
IkReal x1556=((1.0)*x1546);
evalcond[0]=((((-1.0)*x1548*x1556))+(((-1.0)*x1550*x1556))+((r22*x1547)));
evalcond[1]=(cj0+(((-1.0)*x1552*x1556))+(((-1.0)*x1553*x1556))+((r02*x1547)));
evalcond[2]=(sj0+((r12*x1547))+(((-1.0)*x1555*x1556))+(((-1.0)*x1551*x1556)));
evalcond[3]=(((x1547*x1550))+((x1547*x1548))+((sj1*sj2))+((r22*x1546))+((cj1*cj2)));
evalcond[4]=(((x1547*x1552))+((x1547*x1553))+((sj0*x1549))+((r02*x1546))+(((-1.0)*sj0*x1554)));
evalcond[5]=((((-1.0)*cj0*x1549))+((x1547*x1551))+((x1547*x1555))+((r12*x1546))+((cj0*x1554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1559 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1559)==0){
continue;
}
IkReal x1557=pow(x1559,-0.5);
IkReal x1558=((1.0)*x1557);
CheckValue<IkReal> x1560 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1560.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1560.value))));
IkReal gconst88=(r00*x1558);
IkReal gconst89=(r01*x1558);
CheckValue<IkReal> x1561 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1561.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1561.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1565 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1565.valid){
continue;
}
IkReal x1562=((1.0)*(x1565.value));
IkReal x1563=x1557;
IkReal x1564=((1.0)*x1563);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1562)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1562)));
IkReal gconst88=(r00*x1564);
IkReal gconst89=(r01*x1564);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x1569 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1569.valid){
continue;
}
IkReal x1566=((1.0)*(x1569.value));
IkReal x1567=x1557;
IkReal x1568=((1.0)*x1567);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1566)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1566)));
IkReal gconst88=(r00*x1568);
IkReal gconst89=(r01*x1568);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1573 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1573.valid){
continue;
}
IkReal x1570=((1.0)*(x1573.value));
IkReal x1571=x1557;
IkReal x1572=((1.0)*x1571);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1570)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1570)));
IkReal gconst88=(r00*x1572);
IkReal gconst89=(r01*x1572);
IkReal x1574=r02*r02;
IkReal x1575=((1.0)*sj0);
IkReal x1576=(cj0*r12);
CheckValue<IkReal> x1580=IKPowWithIntegerCheck(((-1.0)+x1574),-1);
if(!x1580.valid){
continue;
}
IkReal x1577=x1580.value;
if((((1.0)+(((-1.0)*x1574)))) < -0.00001)
continue;
IkReal x1578=IKsqrt(((1.0)+(((-1.0)*x1574))));
IkReal x1579=(x1577*x1578);
j4eval[0]=((IKabs((((sj0*x1579))+((r02*x1576*x1579))+(((-1.0)*x1574*x1575*x1579)))))+(IKabs(((((-1.0)*r02*x1575))+x1576))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1581=((1.0)*sj0);
CheckValue<IkReal> x1582 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1581))+((cj0*r12)))),IkReal((((cj0*gconst88*r10))+(((-1.0)*gconst88*r00*x1581))+(((-1.0)*gconst89*r01*x1581))+((cj0*gconst89*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1582.valid){
continue;
}
CheckValue<IkReal> x1583=IKPowWithIntegerCheck(IKsign((((gconst89*r20))+(((-1.0)*gconst88*r21)))),-1);
if(!x1583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1582.value)+(((1.5707963267949)*(x1583.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1584=IKsin(j4);
IkReal x1585=IKcos(j4);
IkReal x1586=(cj2*sj1);
IkReal x1587=(gconst88*r10);
IkReal x1588=(gconst89*r11);
IkReal x1589=(gconst89*r21);
IkReal x1590=(gconst88*r20);
IkReal x1591=(gconst88*r00);
IkReal x1592=(gconst89*r01);
IkReal x1593=(cj1*sj2);
IkReal x1594=((1.0)*x1584);
evalcond[0]=((((-1.0)*x1589*x1594))+((r22*x1585))+(((-1.0)*x1590*x1594)));
evalcond[1]=(cj0+(((-1.0)*x1592*x1594))+(((-1.0)*x1591*x1594))+((r02*x1585)));
evalcond[2]=(sj0+((r12*x1585))+(((-1.0)*x1588*x1594))+(((-1.0)*x1587*x1594)));
evalcond[3]=(((sj1*sj2))+((r22*x1584))+((cj1*cj2))+((x1585*x1589))+((x1585*x1590)));
evalcond[4]=(((sj0*x1586))+(((-1.0)*sj0*x1593))+((r02*x1584))+((x1585*x1591))+((x1585*x1592)));
evalcond[5]=((((-1.0)*cj0*x1586))+((r12*x1584))+((cj0*x1593))+((x1585*x1588))+((x1585*x1587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1595 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst88*r20*sj0))+((gconst89*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1595.valid){
continue;
}
CheckValue<IkReal> x1596=IKPowWithIntegerCheck(IKsign((((gconst89*r00))+(((-1.0)*gconst88*r01)))),-1);
if(!x1596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1595.value)+(((1.5707963267949)*(x1596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1597=IKsin(j4);
IkReal x1598=IKcos(j4);
IkReal x1599=(cj2*sj1);
IkReal x1600=(gconst88*r10);
IkReal x1601=(gconst89*r11);
IkReal x1602=(gconst89*r21);
IkReal x1603=(gconst88*r20);
IkReal x1604=(gconst88*r00);
IkReal x1605=(gconst89*r01);
IkReal x1606=(cj1*sj2);
IkReal x1607=((1.0)*x1597);
evalcond[0]=(((r22*x1598))+(((-1.0)*x1603*x1607))+(((-1.0)*x1602*x1607)));
evalcond[1]=(cj0+(((-1.0)*x1605*x1607))+((r02*x1598))+(((-1.0)*x1604*x1607)));
evalcond[2]=(sj0+((r12*x1598))+(((-1.0)*x1601*x1607))+(((-1.0)*x1600*x1607)));
evalcond[3]=(((sj1*sj2))+((r22*x1597))+((x1598*x1603))+((x1598*x1602))+((cj1*cj2)));
evalcond[4]=(((r02*x1597))+((x1598*x1605))+((x1598*x1604))+((sj0*x1599))+(((-1.0)*sj0*x1606)));
evalcond[5]=((((-1.0)*cj0*x1599))+((r12*x1597))+((cj0*x1606))+((x1598*x1601))+((x1598*x1600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1608=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r10))+((gconst88*r11)))),-1);
if(!x1608.valid){
continue;
}
CheckValue<IkReal> x1609 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst89*r21))+((cj0*gconst88*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1608.value)))+(x1609.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1610=IKsin(j4);
IkReal x1611=IKcos(j4);
IkReal x1612=(cj2*sj1);
IkReal x1613=(gconst88*r10);
IkReal x1614=(gconst89*r11);
IkReal x1615=(gconst89*r21);
IkReal x1616=(gconst88*r20);
IkReal x1617=(gconst88*r00);
IkReal x1618=(gconst89*r01);
IkReal x1619=(cj1*sj2);
IkReal x1620=((1.0)*x1610);
evalcond[0]=((((-1.0)*x1616*x1620))+((r22*x1611))+(((-1.0)*x1615*x1620)));
evalcond[1]=(cj0+(((-1.0)*x1617*x1620))+((r02*x1611))+(((-1.0)*x1618*x1620)));
evalcond[2]=(sj0+((r12*x1611))+(((-1.0)*x1614*x1620))+(((-1.0)*x1613*x1620)));
evalcond[3]=(((sj1*sj2))+((cj1*cj2))+((r22*x1610))+((x1611*x1616))+((x1611*x1615)));
evalcond[4]=(((sj0*x1612))+(((-1.0)*sj0*x1619))+((x1611*x1618))+((x1611*x1617))+((r02*x1610)));
evalcond[5]=(((cj0*x1619))+((r12*x1610))+(((-1.0)*cj0*x1612))+((x1611*x1613))+((x1611*x1614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1621=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x1621;
j4eval[1]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x1621);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1622=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x1622;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x1622);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1623=cj5*cj5;
IkReal x1624=r00*r00;
IkReal x1625=(r00*sj5);
IkReal x1626=(cj5*r01);
IkReal x1627=(x1624+((x1623*(r01*r01)))+(((-1.0)*x1623*x1624))+(((2.0)*x1625*x1626))+(r02*r02));
j4eval[0]=x1627;
j4eval[1]=((IKabs(r02))+(IKabs((x1626+x1625))));
j4eval[2]=IKsign(x1627);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1628=cj5*cj5;
IkReal x1629=r00*r00;
IkReal x1630=(r00*sj5);
IkReal x1631=(cj5*r01);
CheckValue<IkReal> x1632 = IKatan2WithCheck(IkReal((x1630+x1631)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x1632.valid){
continue;
}
CheckValue<IkReal> x1633=IKPowWithIntegerCheck(IKsign(((((2.0)*x1630*x1631))+x1629+(((-1.0)*x1628*x1629))+((x1628*(r01*r01)))+(r02*r02))),-1);
if(!x1633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1632.value)+(((1.5707963267949)*(x1633.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1634=IKcos(j4);
IkReal x1635=IKsin(j4);
IkReal x1636=(r00*sj5);
IkReal x1637=(cj5*r01);
IkReal x1638=(r20*sj5);
IkReal x1639=(cj5*r21);
IkReal x1640=(cj5*r11);
IkReal x1641=(r10*sj5);
IkReal x1642=((1.0)*x1635);
evalcond[0]=(((r02*x1635))+((x1634*x1636))+((x1634*x1637)));
evalcond[1]=((((-1.0)*x1638*x1642))+(((-1.0)*x1639*x1642))+((r22*x1634)));
evalcond[2]=((((-1.0)*x1641*x1642))+((r12*x1634))+(((-1.0)*x1640*x1642)));
evalcond[3]=((1.0)+((r02*x1634))+(((-1.0)*x1637*x1642))+(((-1.0)*x1636*x1642)));
evalcond[4]=(((sj1*sj2))+((cj1*cj2))+((x1634*x1638))+((x1634*x1639))+((r22*x1635)));
evalcond[5]=(((r12*x1635))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x1634*x1641))+((x1634*x1640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1643 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1643.valid){
continue;
}
CheckValue<IkReal> x1644=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x1644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1643.value)+(((1.5707963267949)*(x1644.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1645=IKcos(j4);
IkReal x1646=IKsin(j4);
IkReal x1647=(r00*sj5);
IkReal x1648=(cj5*r01);
IkReal x1649=(r20*sj5);
IkReal x1650=(cj5*r21);
IkReal x1651=(cj5*r11);
IkReal x1652=(r10*sj5);
IkReal x1653=((1.0)*x1646);
evalcond[0]=(((r02*x1646))+((x1645*x1647))+((x1645*x1648)));
evalcond[1]=((((-1.0)*x1650*x1653))+(((-1.0)*x1649*x1653))+((r22*x1645)));
evalcond[2]=((((-1.0)*x1652*x1653))+((r12*x1645))+(((-1.0)*x1651*x1653)));
evalcond[3]=((1.0)+((r02*x1645))+(((-1.0)*x1647*x1653))+(((-1.0)*x1648*x1653)));
evalcond[4]=(((x1645*x1649))+((sj1*sj2))+((x1645*x1650))+((cj1*cj2))+((r22*x1646)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r12*x1646))+((x1645*x1651))+((x1645*x1652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1654 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1654.valid){
continue;
}
CheckValue<IkReal> x1655=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x1655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1654.value)+(((1.5707963267949)*(x1655.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1656=IKcos(j4);
IkReal x1657=IKsin(j4);
IkReal x1658=(r00*sj5);
IkReal x1659=(cj5*r01);
IkReal x1660=(r20*sj5);
IkReal x1661=(cj5*r21);
IkReal x1662=(cj5*r11);
IkReal x1663=(r10*sj5);
IkReal x1664=((1.0)*x1657);
evalcond[0]=(((x1656*x1659))+((x1656*x1658))+((r02*x1657)));
evalcond[1]=(((r22*x1656))+(((-1.0)*x1661*x1664))+(((-1.0)*x1660*x1664)));
evalcond[2]=((((-1.0)*x1662*x1664))+((r12*x1656))+(((-1.0)*x1663*x1664)));
evalcond[3]=((1.0)+((r02*x1656))+(((-1.0)*x1658*x1664))+(((-1.0)*x1659*x1664)));
evalcond[4]=(((r22*x1657))+((sj1*sj2))+((cj1*cj2))+((x1656*x1661))+((x1656*x1660)));
evalcond[5]=(((r12*x1657))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x1656*x1663))+((x1656*x1662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1665=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x1665;
j4eval[1]=IKsign(x1665);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1666=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x1666;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x1666);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1667=(sj1*sj2);
IkReal x1668=((1.0)*r02);
IkReal x1669=(cj1*cj2);
IkReal x1670=(r00*sj5);
IkReal x1671=(cj5*r01);
IkReal x1672=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x1672;
j4eval[1]=((IKabs((((x1667*x1671))+((x1667*x1670))+((x1669*x1671))+((x1669*x1670)))))+(IKabs(((((-1.0)*x1668*x1669))+(((-1.0)*x1667*x1668))))));
j4eval[2]=IKsign(x1672);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1673=(sj1*sj2);
IkReal x1674=((1.0)*r02);
IkReal x1675=(cj1*cj2);
IkReal x1676=(r00*sj5);
IkReal x1677=(cj5*r01);
CheckValue<IkReal> x1678 = IKatan2WithCheck(IkReal((((x1675*x1676))+((x1675*x1677))+((x1673*x1676))+((x1673*x1677)))),IkReal(((((-1.0)*x1673*x1674))+(((-1.0)*x1674*x1675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1678.valid){
continue;
}
CheckValue<IkReal> x1679=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x1679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1678.value)+(((1.5707963267949)*(x1679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1680=IKcos(j4);
IkReal x1681=IKsin(j4);
IkReal x1682=(r00*sj5);
IkReal x1683=(cj5*r01);
IkReal x1684=(r20*sj5);
IkReal x1685=(cj5*r21);
IkReal x1686=(cj5*r11);
IkReal x1687=(r10*sj5);
IkReal x1688=((1.0)*x1681);
evalcond[0]=(((x1680*x1682))+((x1680*x1683))+((r02*x1681)));
evalcond[1]=((((-1.0)*x1685*x1688))+((r22*x1680))+(((-1.0)*x1684*x1688)));
evalcond[2]=((((-1.0)*x1686*x1688))+(((-1.0)*x1687*x1688))+((r12*x1680)));
evalcond[3]=((-1.0)+(((-1.0)*x1682*x1688))+(((-1.0)*x1683*x1688))+((r02*x1680)));
evalcond[4]=(((x1680*x1684))+((x1680*x1685))+((r22*x1681))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((x1680*x1686))+((x1680*x1687))+((r12*x1681))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1689 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1689.valid){
continue;
}
CheckValue<IkReal> x1690=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x1690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1689.value)+(((1.5707963267949)*(x1690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1691=IKcos(j4);
IkReal x1692=IKsin(j4);
IkReal x1693=(r00*sj5);
IkReal x1694=(cj5*r01);
IkReal x1695=(r20*sj5);
IkReal x1696=(cj5*r21);
IkReal x1697=(cj5*r11);
IkReal x1698=(r10*sj5);
IkReal x1699=((1.0)*x1692);
evalcond[0]=(((x1691*x1694))+((x1691*x1693))+((r02*x1692)));
evalcond[1]=((((-1.0)*x1696*x1699))+((r22*x1691))+(((-1.0)*x1695*x1699)));
evalcond[2]=(((r12*x1691))+(((-1.0)*x1698*x1699))+(((-1.0)*x1697*x1699)));
evalcond[3]=((-1.0)+(((-1.0)*x1694*x1699))+((r02*x1691))+(((-1.0)*x1693*x1699)));
evalcond[4]=(((x1691*x1696))+((x1691*x1695))+((sj1*sj2))+((r22*x1692))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r12*x1692))+((x1691*x1698))+((x1691*x1697))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1700 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1700.valid){
continue;
}
CheckValue<IkReal> x1701=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x1701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1700.value)+(((1.5707963267949)*(x1701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1702=IKcos(j4);
IkReal x1703=IKsin(j4);
IkReal x1704=(r00*sj5);
IkReal x1705=(cj5*r01);
IkReal x1706=(r20*sj5);
IkReal x1707=(cj5*r21);
IkReal x1708=(cj5*r11);
IkReal x1709=(r10*sj5);
IkReal x1710=((1.0)*x1703);
evalcond[0]=(((r02*x1703))+((x1702*x1704))+((x1702*x1705)));
evalcond[1]=(((r22*x1702))+(((-1.0)*x1707*x1710))+(((-1.0)*x1706*x1710)));
evalcond[2]=(((r12*x1702))+(((-1.0)*x1709*x1710))+(((-1.0)*x1708*x1710)));
evalcond[3]=((-1.0)+((r02*x1702))+(((-1.0)*x1704*x1710))+(((-1.0)*x1705*x1710)));
evalcond[4]=(((r22*x1703))+((sj1*sj2))+((x1702*x1707))+((x1702*x1706))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r12*x1703))+(((-1.0)*cj1*sj2))+((x1702*x1708))+((x1702*x1709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1712 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1712)==0){
continue;
}
IkReal x1711=pow(x1712,-0.5);
CheckValue<IkReal> x1713 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1713.valid){
continue;
}
IkReal gconst90=((-1.0)*(x1713.value));
IkReal gconst91=(r10*x1711);
IkReal gconst92=(r11*x1711);
CheckValue<IkReal> x1714 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1714.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1714.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1717 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1717.valid){
continue;
}
IkReal x1715=((-1.0)*(x1717.value));
IkReal x1716=x1711;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x1715;
IkReal gconst90=x1715;
IkReal gconst91=(r10*x1716);
IkReal gconst92=(r11*x1716);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1718=((1.0)*sj0);
CheckValue<IkReal> x1719=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r21))+((gconst92*r20)))),-1);
if(!x1719.valid){
continue;
}
CheckValue<IkReal> x1720 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1718))+((cj0*r12)))),IkReal((((cj0*gconst92*r11))+(((-1.0)*gconst92*r01*x1718))+(((-1.0)*gconst91*r00*x1718))+((cj0*gconst91*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1719.value)))+(x1720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1721=IKsin(j4);
IkReal x1722=IKcos(j4);
IkReal x1723=(gconst92*r01);
IkReal x1724=(cj2*sj1);
IkReal x1725=(gconst92*r11);
IkReal x1726=(gconst92*r21);
IkReal x1727=(cj1*sj2);
IkReal x1728=(gconst91*x1722);
IkReal x1729=((1.0)*x1721);
evalcond[0]=((((-1.0)*x1726*x1729))+((r22*x1722))+(((-1.0)*gconst91*r20*x1729)));
evalcond[1]=(cj0+(((-1.0)*gconst91*r00*x1729))+(((-1.0)*x1723*x1729))+((r02*x1722)));
evalcond[2]=(sj0+(((-1.0)*x1725*x1729))+((r12*x1722))+(((-1.0)*gconst91*r10*x1729)));
evalcond[3]=(((x1722*x1726))+((sj1*sj2))+((r22*x1721))+((cj1*cj2))+((r20*x1728)));
evalcond[4]=(((x1722*x1723))+((r00*x1728))+(((-1.0)*sj0*x1727))+((sj0*x1724))+((r02*x1721)));
evalcond[5]=(((cj0*x1727))+((x1722*x1725))+((r10*x1728))+((r12*x1721))+(((-1.0)*cj0*x1724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1730 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst92*r21*sj0))+((gconst91*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1730.valid){
continue;
}
CheckValue<IkReal> x1731=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r01))+((gconst92*r00)))),-1);
if(!x1731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1730.value)+(((1.5707963267949)*(x1731.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1732=IKsin(j4);
IkReal x1733=IKcos(j4);
IkReal x1734=(gconst92*r01);
IkReal x1735=(cj2*sj1);
IkReal x1736=(gconst92*r11);
IkReal x1737=(gconst92*r21);
IkReal x1738=(cj1*sj2);
IkReal x1739=(gconst91*x1733);
IkReal x1740=((1.0)*x1732);
evalcond[0]=((((-1.0)*gconst91*r20*x1740))+((r22*x1733))+(((-1.0)*x1737*x1740)));
evalcond[1]=(cj0+((r02*x1733))+(((-1.0)*x1734*x1740))+(((-1.0)*gconst91*r00*x1740)));
evalcond[2]=((((-1.0)*gconst91*r10*x1740))+sj0+(((-1.0)*x1736*x1740))+((r12*x1733)));
evalcond[3]=(((sj1*sj2))+((r22*x1732))+((x1733*x1737))+((cj1*cj2))+((r20*x1739)));
evalcond[4]=((((-1.0)*sj0*x1738))+((r00*x1739))+((sj0*x1735))+((r02*x1732))+((x1733*x1734)));
evalcond[5]=(((cj0*x1738))+(((-1.0)*cj0*x1735))+((r10*x1739))+((x1733*x1736))+((r12*x1732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1743 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1743)==0){
continue;
}
IkReal x1741=pow(x1743,-0.5);
IkReal x1742=((-1.0)*x1741);
CheckValue<IkReal> x1744 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1744.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x1744.value))));
IkReal gconst94=(r10*x1742);
IkReal gconst95=(r11*x1742);
CheckValue<IkReal> x1745 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1745.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1745.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x1749 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1749.valid){
continue;
}
IkReal x1746=((1.0)*(x1749.value));
IkReal x1747=x1741;
IkReal x1748=((-1.0)*x1747);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1746)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1746)));
IkReal gconst94=(r10*x1748);
IkReal gconst95=(r11*x1748);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x1753 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1753.valid){
continue;
}
IkReal x1750=((1.0)*(x1753.value));
IkReal x1751=x1741;
IkReal x1752=((-1.0)*x1751);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1750)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1750)));
IkReal gconst94=(r10*x1752);
IkReal gconst95=(r11*x1752);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1757 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1757.valid){
continue;
}
IkReal x1754=((1.0)*(x1757.value));
IkReal x1755=x1741;
IkReal x1756=((-1.0)*x1755);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1754)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1754)));
IkReal gconst94=(r10*x1756);
IkReal gconst95=(r11*x1756);
IkReal x1758=r12*r12;
IkReal x1759=(r02*sj0);
IkReal x1760=((1.0)*x1758);
CheckValue<IkReal> x1764=IKPowWithIntegerCheck(((-1.0)+x1758),-1);
if(!x1764.valid){
continue;
}
IkReal x1761=x1764.value;
if((((1.0)+(((-1.0)*x1760)))) < -0.00001)
continue;
IkReal x1762=IKsqrt(((1.0)+(((-1.0)*x1760))));
IkReal x1763=(cj0*x1761*x1762);
j4eval[0]=((IKabs((x1763+((r12*x1759*x1761*x1762))+(((-1.0)*x1760*x1763)))))+(IKabs(((((-1.0)*x1759))+((cj0*r12))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1765=((1.0)*sj0);
CheckValue<IkReal> x1766 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1765))+((cj0*r12)))),IkReal(((((-1.0)*gconst95*r01*x1765))+(((-1.0)*gconst94*r00*x1765))+((cj0*gconst94*r10))+((cj0*gconst95*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1766.valid){
continue;
}
CheckValue<IkReal> x1767=IKPowWithIntegerCheck(IKsign((((gconst95*r20))+(((-1.0)*gconst94*r21)))),-1);
if(!x1767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1766.value)+(((1.5707963267949)*(x1767.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1768=IKsin(j4);
IkReal x1769=IKcos(j4);
IkReal x1770=(cj2*sj1);
IkReal x1771=(cj1*sj2);
IkReal x1772=(gconst94*x1769);
IkReal x1773=(gconst95*x1769);
IkReal x1774=((1.0)*gconst95*x1768);
IkReal x1775=((1.0)*gconst94*x1768);
evalcond[0]=((((-1.0)*r20*x1775))+(((-1.0)*r21*x1774))+((r22*x1769)));
evalcond[1]=(cj0+((r02*x1769))+(((-1.0)*r00*x1775))+(((-1.0)*r01*x1774)));
evalcond[2]=(sj0+(((-1.0)*r10*x1775))+((r12*x1769))+(((-1.0)*r11*x1774)));
evalcond[3]=(((sj1*sj2))+((r20*x1772))+((r21*x1773))+((r22*x1768))+((cj1*cj2)));
evalcond[4]=(((r00*x1772))+((r01*x1773))+(((-1.0)*sj0*x1771))+((r02*x1768))+((sj0*x1770)));
evalcond[5]=(((r11*x1773))+(((-1.0)*cj0*x1770))+((cj0*x1771))+((r12*x1768))+((r10*x1772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1776=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r01))+((gconst95*r00)))),-1);
if(!x1776.valid){
continue;
}
CheckValue<IkReal> x1777 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst95*r21*sj0))+((gconst94*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1776.value)))+(x1777.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1778=IKsin(j4);
IkReal x1779=IKcos(j4);
IkReal x1780=(cj2*sj1);
IkReal x1781=(cj1*sj2);
IkReal x1782=(gconst94*x1779);
IkReal x1783=(gconst95*x1779);
IkReal x1784=((1.0)*gconst95*x1778);
IkReal x1785=((1.0)*gconst94*x1778);
evalcond[0]=(((r22*x1779))+(((-1.0)*r20*x1785))+(((-1.0)*r21*x1784)));
evalcond[1]=((((-1.0)*r00*x1785))+cj0+((r02*x1779))+(((-1.0)*r01*x1784)));
evalcond[2]=((((-1.0)*r10*x1785))+sj0+((r12*x1779))+(((-1.0)*r11*x1784)));
evalcond[3]=(((r20*x1782))+((r22*x1778))+((r21*x1783))+((sj1*sj2))+((cj1*cj2)));
evalcond[4]=(((r02*x1778))+((sj0*x1780))+(((-1.0)*sj0*x1781))+((r00*x1782))+((r01*x1783)));
evalcond[5]=(((r10*x1782))+((r12*x1778))+((r11*x1783))+(((-1.0)*cj0*x1780))+((cj0*x1781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1786 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r20))+((cj0*gconst95*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1786.valid){
continue;
}
CheckValue<IkReal> x1787=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r10))+((gconst94*r11)))),-1);
if(!x1787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1786.value)+(((1.5707963267949)*(x1787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1788=IKsin(j4);
IkReal x1789=IKcos(j4);
IkReal x1790=(cj2*sj1);
IkReal x1791=(cj1*sj2);
IkReal x1792=(gconst94*x1789);
IkReal x1793=(gconst95*x1789);
IkReal x1794=((1.0)*gconst95*x1788);
IkReal x1795=((1.0)*gconst94*x1788);
evalcond[0]=(((r22*x1789))+(((-1.0)*r21*x1794))+(((-1.0)*r20*x1795)));
evalcond[1]=((((-1.0)*r01*x1794))+cj0+(((-1.0)*r00*x1795))+((r02*x1789)));
evalcond[2]=((((-1.0)*r10*x1795))+sj0+(((-1.0)*r11*x1794))+((r12*x1789)));
evalcond[3]=(((r21*x1793))+((sj1*sj2))+((r22*x1788))+((cj1*cj2))+((r20*x1792)));
evalcond[4]=(((r00*x1792))+((sj0*x1790))+((r02*x1788))+((r01*x1793))+(((-1.0)*sj0*x1791)));
evalcond[5]=(((r10*x1792))+((r12*x1788))+((r11*x1793))+(((-1.0)*cj0*x1790))+((cj0*x1791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1796=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x1796;
j4eval[1]=IKsign(x1796);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1797=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x1797;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x1797);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1798=cj5*cj5;
IkReal x1799=r10*r10;
IkReal x1800=(cj5*r11);
IkReal x1801=(r10*sj5);
IkReal x1802=((r12*r12)+x1799+(((2.0)*x1800*x1801))+((x1798*(r11*r11)))+(((-1.0)*x1798*x1799)));
j4eval[0]=x1802;
j4eval[1]=IKsign(x1802);
j4eval[2]=((IKabs(r12))+(IKabs((x1801+x1800))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1803=cj5*cj5;
IkReal x1804=r10*r10;
IkReal x1805=(r10*sj5);
IkReal x1806=(cj5*r11);
CheckValue<IkReal> x1807 = IKatan2WithCheck(IkReal((x1806+x1805)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1807.valid){
continue;
}
CheckValue<IkReal> x1808=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x1803*(r11*r11)))+(((2.0)*x1805*x1806))+x1804+(((-1.0)*x1803*x1804)))),-1);
if(!x1808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1807.value)+(((1.5707963267949)*(x1808.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1809=IKcos(j4);
IkReal x1810=IKsin(j4);
IkReal x1811=(r00*sj5);
IkReal x1812=(cj5*r01);
IkReal x1813=(r20*sj5);
IkReal x1814=(cj5*r21);
IkReal x1815=(cj5*r11);
IkReal x1816=(r10*sj5);
IkReal x1817=((1.0)*x1810);
evalcond[0]=(((x1809*x1815))+((x1809*x1816))+((r12*x1810)));
evalcond[1]=((((-1.0)*x1813*x1817))+((r22*x1809))+(((-1.0)*x1814*x1817)));
evalcond[2]=((((-1.0)*x1812*x1817))+(((-1.0)*x1811*x1817))+((r02*x1809)));
evalcond[3]=((1.0)+(((-1.0)*x1816*x1817))+((r12*x1809))+(((-1.0)*x1815*x1817)));
evalcond[4]=(((r22*x1810))+((sj1*sj2))+((x1809*x1813))+((x1809*x1814))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r02*x1810))+(((-1.0)*cj1*sj2))+((x1809*x1812))+((x1809*x1811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1818 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1818.valid){
continue;
}
CheckValue<IkReal> x1819=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x1819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1818.value)+(((1.5707963267949)*(x1819.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1820=IKcos(j4);
IkReal x1821=IKsin(j4);
IkReal x1822=(r00*sj5);
IkReal x1823=(cj5*r01);
IkReal x1824=(r20*sj5);
IkReal x1825=(cj5*r21);
IkReal x1826=(cj5*r11);
IkReal x1827=(r10*sj5);
IkReal x1828=((1.0)*x1821);
evalcond[0]=(((x1820*x1826))+((x1820*x1827))+((r12*x1821)));
evalcond[1]=(((r22*x1820))+(((-1.0)*x1825*x1828))+(((-1.0)*x1824*x1828)));
evalcond[2]=((((-1.0)*x1822*x1828))+((r02*x1820))+(((-1.0)*x1823*x1828)));
evalcond[3]=((1.0)+(((-1.0)*x1826*x1828))+(((-1.0)*x1827*x1828))+((r12*x1820)));
evalcond[4]=(((r22*x1821))+((sj1*sj2))+((x1820*x1824))+((x1820*x1825))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r02*x1821))+((x1820*x1822))+((x1820*x1823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1829=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x1829.valid){
continue;
}
CheckValue<IkReal> x1830 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1829.value)))+(x1830.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1831=IKcos(j4);
IkReal x1832=IKsin(j4);
IkReal x1833=(r00*sj5);
IkReal x1834=(cj5*r01);
IkReal x1835=(r20*sj5);
IkReal x1836=(cj5*r21);
IkReal x1837=(cj5*r11);
IkReal x1838=(r10*sj5);
IkReal x1839=((1.0)*x1832);
evalcond[0]=(((x1831*x1837))+((x1831*x1838))+((r12*x1832)));
evalcond[1]=((((-1.0)*x1836*x1839))+((r22*x1831))+(((-1.0)*x1835*x1839)));
evalcond[2]=((((-1.0)*x1834*x1839))+(((-1.0)*x1833*x1839))+((r02*x1831)));
evalcond[3]=((1.0)+(((-1.0)*x1837*x1839))+(((-1.0)*x1838*x1839))+((r12*x1831)));
evalcond[4]=(((r22*x1832))+((sj1*sj2))+((x1831*x1836))+((x1831*x1835))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r02*x1832))+((x1831*x1833))+((x1831*x1834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1840=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x1840;
j4eval[1]=IKsign(x1840);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1841=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x1841;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x1841);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1842=(sj1*sj2);
IkReal x1843=((1.0)*r12);
IkReal x1844=(cj1*cj2);
IkReal x1845=(r10*sj5);
IkReal x1846=(cj5*r11);
IkReal x1847=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x1847;
j4eval[1]=IKsign(x1847);
j4eval[2]=((IKabs((((x1844*x1845))+((x1844*x1846))+((x1842*x1846))+((x1842*x1845)))))+(IKabs(((((-1.0)*x1843*x1844))+(((-1.0)*x1842*x1843))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1848=((1.0)*r12);
IkReal x1849=(sj1*sj2);
IkReal x1850=(cj1*cj2);
IkReal x1851=(r10*sj5);
IkReal x1852=(cj5*r11);
CheckValue<IkReal> x1853=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x1853.valid){
continue;
}
CheckValue<IkReal> x1854 = IKatan2WithCheck(IkReal((((x1850*x1852))+((x1850*x1851))+((x1849*x1851))+((x1849*x1852)))),IkReal(((((-1.0)*x1848*x1850))+(((-1.0)*x1848*x1849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1853.value)))+(x1854.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1855=IKcos(j4);
IkReal x1856=IKsin(j4);
IkReal x1857=(r00*sj5);
IkReal x1858=(cj5*r01);
IkReal x1859=(r20*sj5);
IkReal x1860=(cj5*r21);
IkReal x1861=(cj5*r11);
IkReal x1862=(r10*sj5);
IkReal x1863=((1.0)*x1856);
evalcond[0]=(((r12*x1856))+((x1855*x1861))+((x1855*x1862)));
evalcond[1]=((((-1.0)*x1860*x1863))+((r22*x1855))+(((-1.0)*x1859*x1863)));
evalcond[2]=(((r02*x1855))+(((-1.0)*x1858*x1863))+(((-1.0)*x1857*x1863)));
evalcond[3]=((-1.0)+(((-1.0)*x1862*x1863))+(((-1.0)*x1861*x1863))+((r12*x1855)));
evalcond[4]=(((sj1*sj2))+((r22*x1856))+((x1855*x1859))+((cj1*cj2))+((x1855*x1860)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x1855*x1857))+((x1855*x1858))+((r02*x1856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1864 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1864.valid){
continue;
}
CheckValue<IkReal> x1865=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x1865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1864.value)+(((1.5707963267949)*(x1865.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1866=IKcos(j4);
IkReal x1867=IKsin(j4);
IkReal x1868=(r00*sj5);
IkReal x1869=(cj5*r01);
IkReal x1870=(r20*sj5);
IkReal x1871=(cj5*r21);
IkReal x1872=(cj5*r11);
IkReal x1873=(r10*sj5);
IkReal x1874=((1.0)*x1867);
evalcond[0]=(((r12*x1867))+((x1866*x1872))+((x1866*x1873)));
evalcond[1]=(((r22*x1866))+(((-1.0)*x1870*x1874))+(((-1.0)*x1871*x1874)));
evalcond[2]=((((-1.0)*x1869*x1874))+(((-1.0)*x1868*x1874))+((r02*x1866)));
evalcond[3]=((-1.0)+((r12*x1866))+(((-1.0)*x1873*x1874))+(((-1.0)*x1872*x1874)));
evalcond[4]=(((x1866*x1871))+((x1866*x1870))+((r22*x1867))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((x1866*x1868))+((x1866*x1869))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r02*x1867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1875 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1875.valid){
continue;
}
CheckValue<IkReal> x1876=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x1876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1875.value)+(((1.5707963267949)*(x1876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1877=IKcos(j4);
IkReal x1878=IKsin(j4);
IkReal x1879=(r00*sj5);
IkReal x1880=(cj5*r01);
IkReal x1881=(r20*sj5);
IkReal x1882=(cj5*r21);
IkReal x1883=(cj5*r11);
IkReal x1884=(r10*sj5);
IkReal x1885=((1.0)*x1878);
evalcond[0]=(((x1877*x1884))+((x1877*x1883))+((r12*x1878)));
evalcond[1]=((((-1.0)*x1882*x1885))+((r22*x1877))+(((-1.0)*x1881*x1885)));
evalcond[2]=((((-1.0)*x1879*x1885))+(((-1.0)*x1880*x1885))+((r02*x1877)));
evalcond[3]=((-1.0)+(((-1.0)*x1883*x1885))+(((-1.0)*x1884*x1885))+((r12*x1877)));
evalcond[4]=(((x1877*x1882))+((x1877*x1881))+((r22*x1878))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((x1877*x1880))+((r02*x1878))+((x1877*x1879))+((cj1*sj2))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1886=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x1886);
rxp0_2=(py*r00);
rxp1_0=(r21*x1886);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1887=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x1887);
rxp0_2=(py*r00);
rxp1_0=(r21*x1887);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1888=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x1888);
rxp0_2=(py*r00);
rxp1_0=(r21*x1888);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r00*sj5))+((cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1891=IKPowWithIntegerCheck((((r00*sj5))+((cj5*r01))),-1);
if(!x1891.valid){
continue;
}
IkReal x1889=x1891.value;
IkReal x1890=(sj0*x1889);
cj4array[0]=((((-1.0)*cj2*sj1*x1890))+((cj1*sj2*x1890)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1892=IKsin(j4);
IkReal x1893=IKcos(j4);
IkReal x1894=(cj5*r21);
IkReal x1895=(r20*sj5);
IkReal x1896=((1.0)*x1892);
evalcond[0]=(r12*x1892);
evalcond[1]=(sj0+((r12*x1893)));
evalcond[2]=((((-1.0)*x1895*x1896))+(((-1.0)*x1894*x1896)));
evalcond[3]=((((-1.0)*r00*sj5*x1896))+(((-1.0)*cj5*r01*x1896)));
evalcond[4]=(((x1893*x1894))+((x1893*x1895))+((sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1899=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x1899.valid){
continue;
}
IkReal x1897=x1899.value;
IkReal x1898=((1.0)*x1897);
cj4array[0]=((((-1.0)*cj1*cj2*x1898))+(((-1.0)*sj1*sj2*x1898)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1900=IKsin(j4);
IkReal x1901=IKcos(j4);
IkReal x1902=(r00*sj5);
IkReal x1903=(cj5*r01);
IkReal x1904=((1.0)*x1900);
evalcond[0]=(r12*x1900);
evalcond[1]=(sj0+((r12*x1901)));
evalcond[2]=((((-1.0)*r20*sj5*x1904))+(((-1.0)*cj5*r21*x1904)));
evalcond[3]=((((-1.0)*x1902*x1904))+(((-1.0)*x1903*x1904)));
evalcond[4]=(((x1901*x1902))+((x1901*x1903))+(((-1.0)*cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1905=IKPowWithIntegerCheck(r12,-1);
if(!x1905.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x1905.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1906=IKsin(j4);
IkReal x1907=IKcos(j4);
IkReal x1908=(cj5*r21);
IkReal x1909=(r00*sj5);
IkReal x1910=(cj5*r01);
IkReal x1911=(r20*sj5);
IkReal x1912=((1.0)*x1906);
evalcond[0]=(r12*x1906);
evalcond[1]=((((-1.0)*x1911*x1912))+(((-1.0)*x1908*x1912)));
evalcond[2]=((((-1.0)*x1910*x1912))+(((-1.0)*x1909*x1912)));
evalcond[3]=(((x1907*x1911))+((sj1*sj2))+((cj1*cj2))+((x1907*x1908)));
evalcond[4]=(((x1907*x1910))+(((-1.0)*cj1*sj0*sj2))+((cj2*sj0*sj1))+((x1907*x1909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1913=((1.0)*sj0);
CheckValue<IkReal> x1914 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1913))+((cj0*r12)))),IkReal(((((-1.0)*r00*sj5*x1913))+((cj0*cj5*r11))+((cj0*r10*sj5))+(((-1.0)*cj5*r01*x1913)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1914.valid){
continue;
}
CheckValue<IkReal> x1915=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x1915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1914.value)+(((1.5707963267949)*(x1915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1916=IKsin(j4);
IkReal x1917=IKcos(j4);
IkReal x1918=(cj2*sj1);
IkReal x1919=(r00*sj5);
IkReal x1920=(cj5*r01);
IkReal x1921=(r20*sj5);
IkReal x1922=(cj5*r21);
IkReal x1923=(cj5*r11);
IkReal x1924=(r10*sj5);
IkReal x1925=(cj1*sj2);
IkReal x1926=((1.0)*x1916);
evalcond[0]=((((-1.0)*x1922*x1926))+((r22*x1917))+(((-1.0)*x1921*x1926)));
evalcond[1]=(cj0+(((-1.0)*x1919*x1926))+((r02*x1917))+(((-1.0)*x1920*x1926)));
evalcond[2]=(sj0+((r12*x1917))+(((-1.0)*x1924*x1926))+(((-1.0)*x1923*x1926)));
evalcond[3]=(((r22*x1916))+((sj1*sj2))+((x1917*x1921))+((x1917*x1922))+((cj1*cj2)));
evalcond[4]=(((x1917*x1919))+((x1917*x1920))+((sj0*x1918))+((r02*x1916))+(((-1.0)*sj0*x1925)));
evalcond[5]=(((cj0*x1925))+((x1917*x1923))+((x1917*x1924))+((r12*x1916))+(((-1.0)*cj0*x1918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1927=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x1927.valid){
continue;
}
CheckValue<IkReal> x1928 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1927.value)))+(x1928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1929=IKsin(j4);
IkReal x1930=IKcos(j4);
IkReal x1931=(cj2*sj1);
IkReal x1932=(r00*sj5);
IkReal x1933=(cj5*r01);
IkReal x1934=(r20*sj5);
IkReal x1935=(cj5*r21);
IkReal x1936=(cj5*r11);
IkReal x1937=(r10*sj5);
IkReal x1938=(cj1*sj2);
IkReal x1939=((1.0)*x1929);
evalcond[0]=((((-1.0)*x1934*x1939))+((r22*x1930))+(((-1.0)*x1935*x1939)));
evalcond[1]=(((r02*x1930))+cj0+(((-1.0)*x1933*x1939))+(((-1.0)*x1932*x1939)));
evalcond[2]=((((-1.0)*x1937*x1939))+sj0+((r12*x1930))+(((-1.0)*x1936*x1939)));
evalcond[3]=(((r22*x1929))+((x1930*x1934))+((x1930*x1935))+((sj1*sj2))+((cj1*cj2)));
evalcond[4]=(((x1930*x1932))+((x1930*x1933))+(((-1.0)*sj0*x1938))+((r02*x1929))+((sj0*x1931)));
evalcond[5]=(((x1930*x1936))+((x1930*x1937))+(((-1.0)*cj0*x1931))+((cj0*x1938))+((r12*x1929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1940 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1940.valid){
continue;
}
CheckValue<IkReal> x1941=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x1941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1940.value)+(((1.5707963267949)*(x1941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1942=IKsin(j4);
IkReal x1943=IKcos(j4);
IkReal x1944=(cj2*sj1);
IkReal x1945=(r00*sj5);
IkReal x1946=(cj5*r01);
IkReal x1947=(r20*sj5);
IkReal x1948=(cj5*r21);
IkReal x1949=(cj5*r11);
IkReal x1950=(r10*sj5);
IkReal x1951=(cj1*sj2);
IkReal x1952=((1.0)*x1942);
evalcond[0]=((((-1.0)*x1948*x1952))+(((-1.0)*x1947*x1952))+((r22*x1943)));
evalcond[1]=(cj0+(((-1.0)*x1945*x1952))+(((-1.0)*x1946*x1952))+((r02*x1943)));
evalcond[2]=((((-1.0)*x1949*x1952))+sj0+(((-1.0)*x1950*x1952))+((r12*x1943)));
evalcond[3]=(((x1943*x1948))+((x1943*x1947))+((sj1*sj2))+((r22*x1942))+((cj1*cj2)));
evalcond[4]=(((x1943*x1946))+((x1943*x1945))+(((-1.0)*sj0*x1951))+((sj0*x1944))+((r02*x1942)));
evalcond[5]=(((x1943*x1950))+((cj0*x1951))+((x1943*x1949))+(((-1.0)*cj0*x1944))+((r12*x1942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1953=r20*r20;
IkReal x1954=cj5*cj5;
IkReal x1955=(sj1*sj2);
IkReal x1956=(cj5*r21);
IkReal x1957=(r20*sj5);
IkReal x1958=(cj1*cj2);
CheckValue<IkReal> x1959 = IKatan2WithCheck(IkReal((((r22*x1955))+((r22*x1958)))),IkReal((((x1955*x1956))+((x1955*x1957))+((x1957*x1958))+((x1956*x1958)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1959.valid){
continue;
}
CheckValue<IkReal> x1960=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1956*x1957))+(((-1.0)*(r22*r22)))+(((-1.0)*x1953))+(((-1.0)*x1954*(r21*r21)))+((x1953*x1954)))),-1);
if(!x1960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1959.value)+(((1.5707963267949)*(x1960.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1961=IKsin(j4);
IkReal x1962=IKcos(j4);
IkReal x1963=(cj5*r21);
IkReal x1964=(r20*sj5);
IkReal x1965=((1.0)*x1961);
evalcond[0]=((((-1.0)*x1964*x1965))+((r22*x1962))+(((-1.0)*x1963*x1965)));
evalcond[1]=(((sj1*sj2))+((r22*x1961))+((x1962*x1964))+((x1962*x1963))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1966=(sj4*sj5);
IkReal x1967=(cj5*sj4);
IkReal x1968=((1.0)*cj4);
if( IKabs((((r10*x1966))+((r11*x1967))+(((-1.0)*r12*x1968)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x1968))+((r00*x1966))+((r01*x1967)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1966))+((r11*x1967))+(((-1.0)*r12*x1968))))+IKsqr(((((-1.0)*r02*x1968))+((r00*x1966))+((r01*x1967))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x1966))+((r11*x1967))+(((-1.0)*r12*x1968))), ((((-1.0)*r02*x1968))+((r00*x1966))+((r01*x1967))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1969=IKsin(j0);
IkReal x1970=IKcos(j0);
IkReal x1971=(cj4*sj5);
IkReal x1972=(cj5*r01);
IkReal x1973=((1.0)*sj2);
IkReal x1974=((1.0)*cj2);
IkReal x1975=(cj5*r10);
IkReal x1976=((0.452)*sj2);
IkReal x1977=(cj5*r00);
IkReal x1978=(r11*sj5);
IkReal x1979=((0.452)*cj2);
IkReal x1980=((1.0)*sj4);
IkReal x1981=(r01*sj5);
IkReal x1982=(cj5*r11);
IkReal x1983=(cj1*x1969);
IkReal x1984=(sj1*x1970);
IkReal x1985=(sj5*x1980);
IkReal x1986=(cj1*x1970);
IkReal x1987=(sj1*x1969);
evalcond[0]=((((-1.0)*x1972*x1980))+x1970+(((-1.0)*r00*x1985))+((cj4*r02)));
evalcond[1]=((((-1.0)*x1980*x1982))+(((-1.0)*r10*x1985))+x1969+((cj4*r12)));
evalcond[2]=(((sj2*x1987))+((cj2*x1983))+x1977+(((-1.0)*x1981)));
evalcond[3]=((((-1.0)*x1973*x1984))+(((-1.0)*x1974*x1986))+(((-1.0)*x1978))+x1975);
evalcond[4]=(((cj2*x1987))+(((-1.0)*x1973*x1983))+((r02*sj4))+((r00*x1971))+((cj4*x1972)));
evalcond[5]=(((sj2*x1986))+((r10*x1971))+(((-1.0)*x1974*x1984))+((cj4*x1982))+((r12*sj4)));
evalcond[6]=((((-1.0)*x1976*x1983))+(((0.1135)*x1981))+(((-0.1135)*x1977))+(((-1.0)*px))+((x1979*x1987))+(((0.1054)*x1970))+(((0.452)*x1987)));
evalcond[7]=((((-0.1135)*x1975))+((x1976*x1986))+(((-1.0)*x1979*x1984))+(((0.1135)*x1978))+(((-1.0)*py))+(((-0.452)*x1984))+(((0.1054)*x1969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1988 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1988.valid){
continue;
}
CheckValue<IkReal> x1989=IKPowWithIntegerCheck(IKsign((((sj1*sj2))+((cj1*cj2)))),-1);
if(!x1989.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1988.value)+(((1.5707963267949)*(x1989.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1990=IKsin(j0);
IkReal x1991=IKcos(j0);
IkReal x1992=(cj5*r10);
IkReal x1993=(cj5*r00);
IkReal x1994=(r11*sj5);
IkReal x1995=((0.452)*cj2);
IkReal x1996=((0.452)*sj2);
IkReal x1997=(r01*sj5);
IkReal x1998=(cj1*x1990);
IkReal x1999=(sj1*x1991);
IkReal x2000=(cj1*x1991);
IkReal x2001=(sj1*x1990);
evalcond[0]=(((cj2*x1998))+((sj2*x2001))+x1993+(((-1.0)*x1997)));
evalcond[1]=(x1992+(((-1.0)*x1994))+(((-1.0)*sj2*x1999))+(((-1.0)*cj2*x2000)));
evalcond[2]=((((0.1135)*x1997))+(((-1.0)*x1996*x1998))+(((0.452)*x2001))+(((-0.1135)*x1993))+(((-1.0)*px))+((x1995*x2001))+(((0.1054)*x1991)));
evalcond[3]=((((0.1135)*x1994))+(((-0.452)*x1999))+(((-0.1135)*x1992))+(((-1.0)*py))+(((-1.0)*x1995*x1999))+(((0.1054)*x1990))+((x1996*x2000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2002=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x2002;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x2002);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2003=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x2003;
j4eval[1]=IKsign(x2003);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2004=((1.0)*sj0);
IkReal x2005=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x2005;
j4eval[1]=((IKabs(((((-1.0)*r02*x2004))+((cj0*r12)))))+(IKabs(((((-1.0)*cj5*r01*x2004))+((cj0*cj5*r11))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x2004))))));
j4eval[2]=IKsign(x2005);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2006=((-1.0)*r21);
IkReal x2008 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2008)==0){
continue;
}
IkReal x2007=pow(x2008,-0.5);
CheckValue<IkReal> x2009 = IKatan2WithCheck(IkReal(r20),IkReal(x2006),IKFAST_ATAN2_MAGTHRESH);
if(!x2009.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2009.value));
IkReal gconst79=((-1.0)*r20*x2007);
IkReal gconst80=(x2006*x2007);
CheckValue<IkReal> x2010 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2010.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2010.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2011=((-1.0)*r21);
CheckValue<IkReal> x2014 = IKatan2WithCheck(IkReal(r20),IkReal(x2011),IKFAST_ATAN2_MAGTHRESH);
if(!x2014.valid){
continue;
}
IkReal x2012=((-1.0)*(x2014.value));
IkReal x2013=x2007;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2012;
IkReal gconst78=x2012;
IkReal gconst79=((-1.0)*r20*x2013);
IkReal gconst80=(x2011*x2013);
IkReal x2015=r22*r22;
IkReal x2016=((1.0)*x2015);
CheckValue<IkReal> x2020=IKPowWithIntegerCheck(((-1.0)+x2015),-1);
if(!x2020.valid){
continue;
}
IkReal x2017=x2020.value;
if((((1.0)+(((-1.0)*x2016)))) < -0.00001)
continue;
IkReal x2018=IKsqrt(((1.0)+(((-1.0)*x2016))));
IkReal x2019=(cj0*x2017*x2018);
j4eval[0]=((IKabs((x2019+(((-1.0)*x2016*x2019)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2021=((-1.0)*r21);
CheckValue<IkReal> x2024 = IKatan2WithCheck(IkReal(r20),IkReal(x2021),IKFAST_ATAN2_MAGTHRESH);
if(!x2024.valid){
continue;
}
IkReal x2022=((-1.0)*(x2024.value));
IkReal x2023=x2007;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2022;
IkReal gconst78=x2022;
IkReal gconst79=((-1.0)*r20*x2023);
IkReal gconst80=(x2021*x2023);
IkReal x2025=r22*r22;
IkReal x2026=((1.0)*x2025);
CheckValue<IkReal> x2030=IKPowWithIntegerCheck(((-1.0)+x2025),-1);
if(!x2030.valid){
continue;
}
IkReal x2027=x2030.value;
if((((1.0)+(((-1.0)*x2026)))) < -0.00001)
continue;
IkReal x2028=IKsqrt(((1.0)+(((-1.0)*x2026))));
IkReal x2029=(sj0*x2027*x2028);
j4eval[0]=((IKabs((x2029+(((-1.0)*x2026*x2029)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2031=((-1.0)*r21);
CheckValue<IkReal> x2034 = IKatan2WithCheck(IkReal(r20),IkReal(x2031),IKFAST_ATAN2_MAGTHRESH);
if(!x2034.valid){
continue;
}
IkReal x2032=((-1.0)*(x2034.value));
IkReal x2033=x2007;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2032;
IkReal gconst78=x2032;
IkReal gconst79=((-1.0)*r20*x2033);
IkReal gconst80=(x2031*x2033);
IkReal x2035=((1.0)*(r22*r22));
CheckValue<IkReal> x2039=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2035))),-1);
if(!x2039.valid){
continue;
}
IkReal x2036=x2039.value;
IkReal x2037=((1.0)*x2036);
IkReal x2038=((((-2.0)*x2036*(r20*r20)*(r21*r21)))+(((-1.0)*x2037*(r20*r20*r20*r20)))+(((-1.0)*x2035))+(((-1.0)*x2037*(r21*r21*r21*r21))));
j4eval[0]=x2038;
j4eval[1]=IKsign(x2038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2040=(gconst79*r20);
IkReal x2041=(cj1*cj2);
IkReal x2042=(sj1*sj2);
IkReal x2043=(gconst80*r21);
CheckValue<IkReal> x2044 = IKatan2WithCheck(IkReal((((r22*x2042))+((r22*x2041)))),IkReal((((x2041*x2043))+((x2040*x2041))+((x2040*x2042))+((x2042*x2043)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2044.valid){
continue;
}
CheckValue<IkReal> x2045=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x2043*x2043)))+(((-1.0)*(x2040*x2040)))+(((-1.0)*(r22*r22)))+(((-2.0)*x2040*x2043)))),-1);
if(!x2045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2044.value)+(((1.5707963267949)*(x2045.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2046=IKsin(j4);
IkReal x2047=IKcos(j4);
IkReal x2048=(gconst80*r11);
IkReal x2049=(cj2*sj1);
IkReal x2050=(gconst79*r20);
IkReal x2051=(gconst79*r10);
IkReal x2052=(gconst80*r01);
IkReal x2053=(gconst79*r00);
IkReal x2054=(gconst80*r21);
IkReal x2055=(cj1*sj2);
IkReal x2056=((1.0)*x2046);
evalcond[0]=(((r22*x2047))+(((-1.0)*x2054*x2056))+(((-1.0)*x2050*x2056)));
evalcond[1]=(cj0+((r02*x2047))+(((-1.0)*x2053*x2056))+(((-1.0)*x2052*x2056)));
evalcond[2]=(sj0+((r12*x2047))+(((-1.0)*x2048*x2056))+(((-1.0)*x2051*x2056)));
evalcond[3]=(((r22*x2046))+((x2047*x2054))+((x2047*x2050))+((sj1*sj2))+((cj1*cj2)));
evalcond[4]=(((r02*x2046))+(((-1.0)*sj0*x2055))+((x2047*x2052))+((x2047*x2053))+((sj0*x2049)));
evalcond[5]=((((-1.0)*cj0*x2049))+((x2047*x2051))+((r12*x2046))+((cj0*x2055))+((x2047*x2048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2057=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r01))+((gconst80*r00)))),-1);
if(!x2057.valid){
continue;
}
CheckValue<IkReal> x2058 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r20*sj0))+((gconst80*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2057.value)))+(x2058.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2059=IKsin(j4);
IkReal x2060=IKcos(j4);
IkReal x2061=(gconst80*r11);
IkReal x2062=(cj2*sj1);
IkReal x2063=(gconst79*r20);
IkReal x2064=(gconst79*r10);
IkReal x2065=(gconst80*r01);
IkReal x2066=(gconst79*r00);
IkReal x2067=(gconst80*r21);
IkReal x2068=(cj1*sj2);
IkReal x2069=((1.0)*x2059);
evalcond[0]=(((r22*x2060))+(((-1.0)*x2063*x2069))+(((-1.0)*x2067*x2069)));
evalcond[1]=(cj0+((r02*x2060))+(((-1.0)*x2065*x2069))+(((-1.0)*x2066*x2069)));
evalcond[2]=(sj0+((r12*x2060))+(((-1.0)*x2064*x2069))+(((-1.0)*x2061*x2069)));
evalcond[3]=(((r22*x2059))+((sj1*sj2))+((x2060*x2067))+((x2060*x2063))+((cj1*cj2)));
evalcond[4]=(((r02*x2059))+((x2060*x2066))+((x2060*x2065))+((sj0*x2062))+(((-1.0)*sj0*x2068)));
evalcond[5]=(((cj0*x2068))+((r12*x2059))+(((-1.0)*cj0*x2062))+((x2060*x2064))+((x2060*x2061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2070=IKPowWithIntegerCheck(IKsign((((gconst79*r11))+(((-1.0)*gconst80*r10)))),-1);
if(!x2070.valid){
continue;
}
CheckValue<IkReal> x2071 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r20))+((cj0*gconst80*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2070.value)))+(x2071.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2072=IKsin(j4);
IkReal x2073=IKcos(j4);
IkReal x2074=(gconst80*r11);
IkReal x2075=(cj2*sj1);
IkReal x2076=(gconst79*r20);
IkReal x2077=(gconst79*r10);
IkReal x2078=(gconst80*r01);
IkReal x2079=(gconst79*r00);
IkReal x2080=(gconst80*r21);
IkReal x2081=(cj1*sj2);
IkReal x2082=((1.0)*x2072);
evalcond[0]=(((r22*x2073))+(((-1.0)*x2076*x2082))+(((-1.0)*x2080*x2082)));
evalcond[1]=(cj0+(((-1.0)*x2078*x2082))+((r02*x2073))+(((-1.0)*x2079*x2082)));
evalcond[2]=(sj0+((r12*x2073))+(((-1.0)*x2074*x2082))+(((-1.0)*x2077*x2082)));
evalcond[3]=(((r22*x2072))+((sj1*sj2))+((x2073*x2080))+((cj1*cj2))+((x2073*x2076)));
evalcond[4]=((((-1.0)*sj0*x2081))+((r02*x2072))+((sj0*x2075))+((x2073*x2079))+((x2073*x2078)));
evalcond[5]=(((r12*x2072))+((cj0*x2081))+((x2073*x2074))+((x2073*x2077))+(((-1.0)*cj0*x2075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2085 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2085)==0){
continue;
}
IkReal x2083=pow(x2085,-0.5);
IkReal x2084=((1.0)*x2083);
CheckValue<IkReal> x2086 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2086.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2086.value))));
IkReal gconst82=(r20*x2084);
IkReal gconst83=(r21*x2084);
CheckValue<IkReal> x2087 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2087.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2087.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2091 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2091.valid){
continue;
}
IkReal x2088=((1.0)*(x2091.value));
IkReal x2089=x2083;
IkReal x2090=((1.0)*x2089);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2088)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2088)));
IkReal gconst82=(r20*x2090);
IkReal gconst83=(r21*x2090);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2095 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2095.valid){
continue;
}
IkReal x2092=((1.0)*(x2095.value));
IkReal x2093=x2083;
IkReal x2094=((1.0)*x2093);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2092)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2092)));
IkReal gconst82=(r20*x2094);
IkReal gconst83=(r21*x2094);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2099 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2099.valid){
continue;
}
IkReal x2096=((1.0)*(x2099.value));
IkReal x2097=x2083;
IkReal x2098=((1.0)*x2097);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2096)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2096)));
IkReal gconst82=(r20*x2098);
IkReal gconst83=(r21*x2098);
IkReal x2100=r22*r22;
IkReal x2101=(cj0*r12);
IkReal x2102=((1.0)*r02*sj0);
CheckValue<IkReal> x2106=IKPowWithIntegerCheck(((-1.0)+x2100),-1);
if(!x2106.valid){
continue;
}
IkReal x2103=x2106.value;
if((((1.0)+(((-1.0)*x2100)))) < -0.00001)
continue;
IkReal x2104=IKsqrt(((1.0)+(((-1.0)*x2100))));
IkReal x2105=(r22*x2103*x2104);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x2102))+x2101)))+(IKabs(((((-1.0)*x2102*x2105))+((x2101*x2105))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2107=((1.0)*sj0);
CheckValue<IkReal> x2108 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2107))+((cj0*r12)))),IkReal(((((-1.0)*gconst83*r01*x2107))+((cj0*gconst83*r11))+((cj0*gconst82*r10))+(((-1.0)*gconst82*r00*x2107)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2108.valid){
continue;
}
CheckValue<IkReal> x2109=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r21))+((gconst83*r20)))),-1);
if(!x2109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2108.value)+(((1.5707963267949)*(x2109.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2110=IKsin(j4);
IkReal x2111=IKcos(j4);
IkReal x2112=(gconst83*r01);
IkReal x2113=(cj2*sj1);
IkReal x2114=(gconst83*r11);
IkReal x2115=(gconst82*r20);
IkReal x2116=(gconst82*r00);
IkReal x2117=(gconst83*r21);
IkReal x2118=(cj1*sj2);
IkReal x2119=(gconst82*r10);
IkReal x2120=((1.0)*x2110);
evalcond[0]=((((-1.0)*x2117*x2120))+(((-1.0)*x2115*x2120))+((r22*x2111)));
evalcond[1]=((((-1.0)*x2116*x2120))+cj0+(((-1.0)*x2112*x2120))+((r02*x2111)));
evalcond[2]=(((r12*x2111))+sj0+(((-1.0)*x2119*x2120))+(((-1.0)*x2114*x2120)));
evalcond[3]=(((sj1*sj2))+((x2111*x2115))+((x2111*x2117))+((cj1*cj2))+((r22*x2110)));
evalcond[4]=((((-1.0)*sj0*x2118))+((sj0*x2113))+((x2111*x2112))+((x2111*x2116))+((r02*x2110)));
evalcond[5]=(((r12*x2110))+((cj0*x2118))+((x2111*x2114))+((x2111*x2119))+(((-1.0)*cj0*x2113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2121 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r20*sj0))+((gconst83*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2121.valid){
continue;
}
CheckValue<IkReal> x2122=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r01))+((gconst83*r00)))),-1);
if(!x2122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2121.value)+(((1.5707963267949)*(x2122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2123=IKsin(j4);
IkReal x2124=IKcos(j4);
IkReal x2125=(gconst83*r01);
IkReal x2126=(cj2*sj1);
IkReal x2127=(gconst83*r11);
IkReal x2128=(gconst82*r20);
IkReal x2129=(gconst82*r00);
IkReal x2130=(gconst83*r21);
IkReal x2131=(cj1*sj2);
IkReal x2132=(gconst82*r10);
IkReal x2133=((1.0)*x2123);
evalcond[0]=((((-1.0)*x2128*x2133))+(((-1.0)*x2130*x2133))+((r22*x2124)));
evalcond[1]=((((-1.0)*x2125*x2133))+cj0+((r02*x2124))+(((-1.0)*x2129*x2133)));
evalcond[2]=(sj0+((r12*x2124))+(((-1.0)*x2127*x2133))+(((-1.0)*x2132*x2133)));
evalcond[3]=(((sj1*sj2))+((x2124*x2130))+((cj1*cj2))+((x2124*x2128))+((r22*x2123)));
evalcond[4]=((((-1.0)*sj0*x2131))+((sj0*x2126))+((r02*x2123))+((x2124*x2129))+((x2124*x2125)));
evalcond[5]=(((cj0*x2131))+((r12*x2123))+(((-1.0)*cj0*x2126))+((x2124*x2132))+((x2124*x2127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2134=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst83*r10))+((gconst82*r11)))),-1);
if(!x2134.valid){
continue;
}
CheckValue<IkReal> x2135 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst83*r21))+((cj0*gconst82*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2134.value)))+(x2135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2136=IKsin(j4);
IkReal x2137=IKcos(j4);
IkReal x2138=(gconst83*r01);
IkReal x2139=(cj2*sj1);
IkReal x2140=(gconst83*r11);
IkReal x2141=(gconst82*r20);
IkReal x2142=(gconst82*r00);
IkReal x2143=(gconst83*r21);
IkReal x2144=(cj1*sj2);
IkReal x2145=(gconst82*r10);
IkReal x2146=((1.0)*x2136);
evalcond[0]=((((-1.0)*x2143*x2146))+((r22*x2137))+(((-1.0)*x2141*x2146)));
evalcond[1]=((((-1.0)*x2138*x2146))+((r02*x2137))+cj0+(((-1.0)*x2142*x2146)));
evalcond[2]=(((r12*x2137))+sj0+(((-1.0)*x2140*x2146))+(((-1.0)*x2145*x2146)));
evalcond[3]=(((sj1*sj2))+((r22*x2136))+((x2137*x2141))+((x2137*x2143))+((cj1*cj2)));
evalcond[4]=(((r02*x2136))+((x2137*x2142))+((sj0*x2139))+(((-1.0)*sj0*x2144))+((x2137*x2138)));
evalcond[5]=(((r12*x2136))+(((-1.0)*cj0*x2139))+((cj0*x2144))+((x2137*x2140))+((x2137*x2145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2149 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2149)==0){
continue;
}
IkReal x2147=pow(x2149,-0.5);
IkReal x2148=((-1.0)*x2147);
CheckValue<IkReal> x2150 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x2150.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2150.value));
IkReal gconst85=(r00*x2148);
IkReal gconst86=(r01*x2148);
CheckValue<IkReal> x2151 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x2151.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2151.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2155 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x2155.valid){
continue;
}
IkReal x2152=((-1.0)*(x2155.value));
IkReal x2153=x2147;
IkReal x2154=((-1.0)*x2153);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2152;
IkReal gconst84=x2152;
IkReal gconst85=(r00*x2154);
IkReal gconst86=(r01*x2154);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2156=((1.0)*sj0);
CheckValue<IkReal> x2157=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r21))+((gconst86*r20)))),-1);
if(!x2157.valid){
continue;
}
CheckValue<IkReal> x2158 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2156))+((cj0*r12)))),IkReal((((cj0*gconst86*r11))+(((-1.0)*gconst85*r00*x2156))+(((-1.0)*gconst86*r01*x2156))+((cj0*gconst85*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2157.value)))+(x2158.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2159=IKsin(j4);
IkReal x2160=IKcos(j4);
IkReal x2161=(gconst85*r20);
IkReal x2162=(cj2*sj1);
IkReal x2163=(gconst86*r21);
IkReal x2164=(gconst85*r10);
IkReal x2165=(gconst85*r00);
IkReal x2166=(gconst86*r01);
IkReal x2167=(cj1*sj2);
IkReal x2168=(gconst86*r11);
IkReal x2169=((1.0)*x2159);
evalcond[0]=((((-1.0)*x2163*x2169))+(((-1.0)*x2161*x2169))+((r22*x2160)));
evalcond[1]=(cj0+(((-1.0)*x2166*x2169))+((r02*x2160))+(((-1.0)*x2165*x2169)));
evalcond[2]=(((r12*x2160))+sj0+(((-1.0)*x2168*x2169))+(((-1.0)*x2164*x2169)));
evalcond[3]=(((sj1*sj2))+((cj1*cj2))+((r22*x2159))+((x2160*x2163))+((x2160*x2161)));
evalcond[4]=(((sj0*x2162))+((r02*x2159))+((x2160*x2166))+((x2160*x2165))+(((-1.0)*sj0*x2167)));
evalcond[5]=(((cj0*x2167))+((x2160*x2164))+((x2160*x2168))+((r12*x2159))+(((-1.0)*cj0*x2162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2170 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r20))+((cj0*gconst86*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2170.valid){
continue;
}
CheckValue<IkReal> x2171=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r10))+((gconst85*r11)))),-1);
if(!x2171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2170.value)+(((1.5707963267949)*(x2171.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2172=IKsin(j4);
IkReal x2173=IKcos(j4);
IkReal x2174=(gconst85*r20);
IkReal x2175=(cj2*sj1);
IkReal x2176=(gconst86*r21);
IkReal x2177=(gconst85*r10);
IkReal x2178=(gconst85*r00);
IkReal x2179=(gconst86*r01);
IkReal x2180=(cj1*sj2);
IkReal x2181=(gconst86*r11);
IkReal x2182=((1.0)*x2172);
evalcond[0]=(((r22*x2173))+(((-1.0)*x2176*x2182))+(((-1.0)*x2174*x2182)));
evalcond[1]=(cj0+((r02*x2173))+(((-1.0)*x2179*x2182))+(((-1.0)*x2178*x2182)));
evalcond[2]=(sj0+(((-1.0)*x2181*x2182))+(((-1.0)*x2177*x2182))+((r12*x2173)));
evalcond[3]=(((r22*x2172))+((x2173*x2174))+((x2173*x2176))+((sj1*sj2))+((cj1*cj2)));
evalcond[4]=(((x2173*x2178))+((x2173*x2179))+((r02*x2172))+(((-1.0)*sj0*x2180))+((sj0*x2175)));
evalcond[5]=(((x2173*x2177))+((cj0*x2180))+(((-1.0)*cj0*x2175))+((x2173*x2181))+((r12*x2172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2185 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2185)==0){
continue;
}
IkReal x2183=pow(x2185,-0.5);
IkReal x2184=((1.0)*x2183);
CheckValue<IkReal> x2186 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x2186.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2186.value))));
IkReal gconst88=(r00*x2184);
IkReal gconst89=(r01*x2184);
CheckValue<IkReal> x2187 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x2187.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2187.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2191 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x2191.valid){
continue;
}
IkReal x2188=((1.0)*(x2191.value));
IkReal x2189=x2183;
IkReal x2190=((1.0)*x2189);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2188)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2188)));
IkReal gconst88=(r00*x2190);
IkReal gconst89=(r01*x2190);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x2195 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x2195.valid){
continue;
}
IkReal x2192=((1.0)*(x2195.value));
IkReal x2193=x2183;
IkReal x2194=((1.0)*x2193);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2192)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2192)));
IkReal gconst88=(r00*x2194);
IkReal gconst89=(r01*x2194);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2199 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x2199.valid){
continue;
}
IkReal x2196=((1.0)*(x2199.value));
IkReal x2197=x2183;
IkReal x2198=((1.0)*x2197);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2196)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2196)));
IkReal gconst88=(r00*x2198);
IkReal gconst89=(r01*x2198);
IkReal x2200=r02*r02;
IkReal x2201=((1.0)*sj0);
IkReal x2202=(cj0*r12);
CheckValue<IkReal> x2206=IKPowWithIntegerCheck(((-1.0)+x2200),-1);
if(!x2206.valid){
continue;
}
IkReal x2203=x2206.value;
if((((1.0)+(((-1.0)*x2200)))) < -0.00001)
continue;
IkReal x2204=IKsqrt(((1.0)+(((-1.0)*x2200))));
IkReal x2205=(x2203*x2204);
j4eval[0]=((IKabs(((((-1.0)*x2200*x2201*x2205))+((r02*x2202*x2205))+((sj0*x2205)))))+(IKabs((x2202+(((-1.0)*r02*x2201))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2207=((1.0)*sj0);
CheckValue<IkReal> x2208 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2207))+((cj0*r12)))),IkReal(((((-1.0)*gconst89*r01*x2207))+((cj0*gconst88*r10))+((cj0*gconst89*r11))+(((-1.0)*gconst88*r00*x2207)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2208.valid){
continue;
}
CheckValue<IkReal> x2209=IKPowWithIntegerCheck(IKsign((((gconst89*r20))+(((-1.0)*gconst88*r21)))),-1);
if(!x2209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2208.value)+(((1.5707963267949)*(x2209.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2210=IKsin(j4);
IkReal x2211=IKcos(j4);
IkReal x2212=(cj2*sj1);
IkReal x2213=(gconst88*r10);
IkReal x2214=(gconst89*r11);
IkReal x2215=(gconst89*r21);
IkReal x2216=(gconst88*r20);
IkReal x2217=(gconst88*r00);
IkReal x2218=(gconst89*r01);
IkReal x2219=(cj1*sj2);
IkReal x2220=((1.0)*x2210);
evalcond[0]=((((-1.0)*x2215*x2220))+(((-1.0)*x2216*x2220))+((r22*x2211)));
evalcond[1]=(cj0+(((-1.0)*x2217*x2220))+(((-1.0)*x2218*x2220))+((r02*x2211)));
evalcond[2]=(sj0+((r12*x2211))+(((-1.0)*x2214*x2220))+(((-1.0)*x2213*x2220)));
evalcond[3]=(((sj1*sj2))+((x2211*x2215))+((x2211*x2216))+((cj1*cj2))+((r22*x2210)));
evalcond[4]=((((-1.0)*sj0*x2219))+((x2211*x2218))+((x2211*x2217))+((sj0*x2212))+((r02*x2210)));
evalcond[5]=(((r12*x2210))+((x2211*x2214))+((x2211*x2213))+((cj0*x2219))+(((-1.0)*cj0*x2212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2221 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst88*r20*sj0))+((gconst89*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2221.valid){
continue;
}
CheckValue<IkReal> x2222=IKPowWithIntegerCheck(IKsign((((gconst89*r00))+(((-1.0)*gconst88*r01)))),-1);
if(!x2222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2221.value)+(((1.5707963267949)*(x2222.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2223=IKsin(j4);
IkReal x2224=IKcos(j4);
IkReal x2225=(cj2*sj1);
IkReal x2226=(gconst88*r10);
IkReal x2227=(gconst89*r11);
IkReal x2228=(gconst89*r21);
IkReal x2229=(gconst88*r20);
IkReal x2230=(gconst88*r00);
IkReal x2231=(gconst89*r01);
IkReal x2232=(cj1*sj2);
IkReal x2233=((1.0)*x2223);
evalcond[0]=(((r22*x2224))+(((-1.0)*x2229*x2233))+(((-1.0)*x2228*x2233)));
evalcond[1]=(cj0+((r02*x2224))+(((-1.0)*x2230*x2233))+(((-1.0)*x2231*x2233)));
evalcond[2]=(((r12*x2224))+sj0+(((-1.0)*x2226*x2233))+(((-1.0)*x2227*x2233)));
evalcond[3]=(((r22*x2223))+((sj1*sj2))+((x2224*x2228))+((x2224*x2229))+((cj1*cj2)));
evalcond[4]=(((sj0*x2225))+((r02*x2223))+((x2224*x2231))+((x2224*x2230))+(((-1.0)*sj0*x2232)));
evalcond[5]=(((r12*x2223))+((cj0*x2232))+((x2224*x2227))+((x2224*x2226))+(((-1.0)*cj0*x2225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2234=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r10))+((gconst88*r11)))),-1);
if(!x2234.valid){
continue;
}
CheckValue<IkReal> x2235 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst89*r21))+((cj0*gconst88*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2234.value)))+(x2235.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2236=IKsin(j4);
IkReal x2237=IKcos(j4);
IkReal x2238=(cj2*sj1);
IkReal x2239=(gconst88*r10);
IkReal x2240=(gconst89*r11);
IkReal x2241=(gconst89*r21);
IkReal x2242=(gconst88*r20);
IkReal x2243=(gconst88*r00);
IkReal x2244=(gconst89*r01);
IkReal x2245=(cj1*sj2);
IkReal x2246=((1.0)*x2236);
evalcond[0]=(((r22*x2237))+(((-1.0)*x2241*x2246))+(((-1.0)*x2242*x2246)));
evalcond[1]=(cj0+((r02*x2237))+(((-1.0)*x2244*x2246))+(((-1.0)*x2243*x2246)));
evalcond[2]=(sj0+(((-1.0)*x2240*x2246))+(((-1.0)*x2239*x2246))+((r12*x2237)));
evalcond[3]=(((r22*x2236))+((sj1*sj2))+((cj1*cj2))+((x2237*x2241))+((x2237*x2242)));
evalcond[4]=(((sj0*x2238))+((r02*x2236))+(((-1.0)*sj0*x2245))+((x2237*x2243))+((x2237*x2244)));
evalcond[5]=(((x2237*x2239))+(((-1.0)*cj0*x2238))+((x2237*x2240))+((r12*x2236))+((cj0*x2245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2247=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x2247;
j4eval[1]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2247);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2248=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x2248;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x2248);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2249=cj5*cj5;
IkReal x2250=r00*r00;
IkReal x2251=(r00*sj5);
IkReal x2252=(cj5*r01);
IkReal x2253=(x2250+((x2249*(r01*r01)))+(((-1.0)*x2249*x2250))+(((2.0)*x2251*x2252))+(r02*r02));
j4eval[0]=x2253;
j4eval[1]=((IKabs(r02))+(IKabs((x2252+x2251))));
j4eval[2]=IKsign(x2253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2254=cj5*cj5;
IkReal x2255=r00*r00;
IkReal x2256=(r00*sj5);
IkReal x2257=(cj5*r01);
CheckValue<IkReal> x2258=IKPowWithIntegerCheck(IKsign((x2255+(((2.0)*x2256*x2257))+(((-1.0)*x2254*x2255))+((x2254*(r01*r01)))+(r02*r02))),-1);
if(!x2258.valid){
continue;
}
CheckValue<IkReal> x2259 = IKatan2WithCheck(IkReal((x2257+x2256)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2258.value)))+(x2259.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2260=IKcos(j4);
IkReal x2261=IKsin(j4);
IkReal x2262=(r00*sj5);
IkReal x2263=(cj5*r01);
IkReal x2264=(r20*sj5);
IkReal x2265=(cj5*r21);
IkReal x2266=(cj5*r11);
IkReal x2267=(r10*sj5);
IkReal x2268=((1.0)*x2261);
evalcond[0]=(((x2260*x2263))+((x2260*x2262))+((r02*x2261)));
evalcond[1]=(((r22*x2260))+(((-1.0)*x2264*x2268))+(((-1.0)*x2265*x2268)));
evalcond[2]=(((r12*x2260))+(((-1.0)*x2267*x2268))+(((-1.0)*x2266*x2268)));
evalcond[3]=((1.0)+(((-1.0)*x2263*x2268))+((r02*x2260))+(((-1.0)*x2262*x2268)));
evalcond[4]=(((x2260*x2264))+((x2260*x2265))+((r22*x2261))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((x2260*x2266))+((x2260*x2267))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r12*x2261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2269 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2269.valid){
continue;
}
CheckValue<IkReal> x2270=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x2270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2269.value)+(((1.5707963267949)*(x2270.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2271=IKcos(j4);
IkReal x2272=IKsin(j4);
IkReal x2273=(r00*sj5);
IkReal x2274=(cj5*r01);
IkReal x2275=(r20*sj5);
IkReal x2276=(cj5*r21);
IkReal x2277=(cj5*r11);
IkReal x2278=(r10*sj5);
IkReal x2279=((1.0)*x2272);
evalcond[0]=(((r02*x2272))+((x2271*x2274))+((x2271*x2273)));
evalcond[1]=((((-1.0)*x2275*x2279))+((r22*x2271))+(((-1.0)*x2276*x2279)));
evalcond[2]=((((-1.0)*x2278*x2279))+((r12*x2271))+(((-1.0)*x2277*x2279)));
evalcond[3]=((1.0)+(((-1.0)*x2274*x2279))+(((-1.0)*x2273*x2279))+((r02*x2271)));
evalcond[4]=(((sj1*sj2))+((r22*x2272))+((cj1*cj2))+((x2271*x2276))+((x2271*x2275)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r12*x2272))+((x2271*x2278))+((x2271*x2277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2280 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2280.valid){
continue;
}
CheckValue<IkReal> x2281=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x2281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2280.value)+(((1.5707963267949)*(x2281.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2282=IKcos(j4);
IkReal x2283=IKsin(j4);
IkReal x2284=(r00*sj5);
IkReal x2285=(cj5*r01);
IkReal x2286=(r20*sj5);
IkReal x2287=(cj5*r21);
IkReal x2288=(cj5*r11);
IkReal x2289=(r10*sj5);
IkReal x2290=((1.0)*x2283);
evalcond[0]=(((x2282*x2284))+((x2282*x2285))+((r02*x2283)));
evalcond[1]=((((-1.0)*x2286*x2290))+(((-1.0)*x2287*x2290))+((r22*x2282)));
evalcond[2]=((((-1.0)*x2289*x2290))+((r12*x2282))+(((-1.0)*x2288*x2290)));
evalcond[3]=((1.0)+(((-1.0)*x2285*x2290))+(((-1.0)*x2284*x2290))+((r02*x2282)));
evalcond[4]=(((x2282*x2286))+((x2282*x2287))+((sj1*sj2))+((cj1*cj2))+((r22*x2283)));
evalcond[5]=(((x2282*x2288))+((x2282*x2289))+((r12*x2283))+((cj1*sj2))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2291=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x2291;
j4eval[1]=IKsign(x2291);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2292=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x2292;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x2292);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2293=(sj1*sj2);
IkReal x2294=((1.0)*r02);
IkReal x2295=(cj1*cj2);
IkReal x2296=(r00*sj5);
IkReal x2297=(cj5*r01);
IkReal x2298=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x2298;
j4eval[1]=((IKabs(((((-1.0)*x2293*x2294))+(((-1.0)*x2294*x2295)))))+(IKabs((((x2295*x2297))+((x2295*x2296))+((x2293*x2297))+((x2293*x2296))))));
j4eval[2]=IKsign(x2298);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2299=(sj1*sj2);
IkReal x2300=((1.0)*r02);
IkReal x2301=(cj1*cj2);
IkReal x2302=(r00*sj5);
IkReal x2303=(cj5*r01);
CheckValue<IkReal> x2304 = IKatan2WithCheck(IkReal((((x2301*x2303))+((x2301*x2302))+((x2299*x2302))+((x2299*x2303)))),IkReal(((((-1.0)*x2300*x2301))+(((-1.0)*x2299*x2300)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2304.valid){
continue;
}
CheckValue<IkReal> x2305=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x2305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2304.value)+(((1.5707963267949)*(x2305.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2306=IKcos(j4);
IkReal x2307=IKsin(j4);
IkReal x2308=(r00*sj5);
IkReal x2309=(cj5*r01);
IkReal x2310=(r20*sj5);
IkReal x2311=(cj5*r21);
IkReal x2312=(cj5*r11);
IkReal x2313=(r10*sj5);
IkReal x2314=((1.0)*x2307);
evalcond[0]=(((x2306*x2308))+((x2306*x2309))+((r02*x2307)));
evalcond[1]=((((-1.0)*x2311*x2314))+(((-1.0)*x2310*x2314))+((r22*x2306)));
evalcond[2]=(((r12*x2306))+(((-1.0)*x2312*x2314))+(((-1.0)*x2313*x2314)));
evalcond[3]=((-1.0)+(((-1.0)*x2309*x2314))+((r02*x2306))+(((-1.0)*x2308*x2314)));
evalcond[4]=(((x2306*x2311))+((x2306*x2310))+((sj1*sj2))+((r22*x2307))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((r12*x2307))+((x2306*x2312))+((x2306*x2313))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2315 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2315.valid){
continue;
}
CheckValue<IkReal> x2316=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x2316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2315.value)+(((1.5707963267949)*(x2316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2317=IKcos(j4);
IkReal x2318=IKsin(j4);
IkReal x2319=(r00*sj5);
IkReal x2320=(cj5*r01);
IkReal x2321=(r20*sj5);
IkReal x2322=(cj5*r21);
IkReal x2323=(cj5*r11);
IkReal x2324=(r10*sj5);
IkReal x2325=((1.0)*x2318);
evalcond[0]=(((x2317*x2319))+((x2317*x2320))+((r02*x2318)));
evalcond[1]=((((-1.0)*x2321*x2325))+((r22*x2317))+(((-1.0)*x2322*x2325)));
evalcond[2]=((((-1.0)*x2324*x2325))+((r12*x2317))+(((-1.0)*x2323*x2325)));
evalcond[3]=((-1.0)+(((-1.0)*x2320*x2325))+(((-1.0)*x2319*x2325))+((r02*x2317)));
evalcond[4]=(((x2317*x2321))+((x2317*x2322))+((r22*x2318))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+((x2317*x2324))+((x2317*x2323))+(((-1.0)*cj1*sj2))+((r12*x2318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2326 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2326.valid){
continue;
}
CheckValue<IkReal> x2327=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x2327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2326.value)+(((1.5707963267949)*(x2327.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2328=IKcos(j4);
IkReal x2329=IKsin(j4);
IkReal x2330=(r00*sj5);
IkReal x2331=(cj5*r01);
IkReal x2332=(r20*sj5);
IkReal x2333=(cj5*r21);
IkReal x2334=(cj5*r11);
IkReal x2335=(r10*sj5);
IkReal x2336=((1.0)*x2329);
evalcond[0]=(((r02*x2329))+((x2328*x2330))+((x2328*x2331)));
evalcond[1]=((((-1.0)*x2332*x2336))+((r22*x2328))+(((-1.0)*x2333*x2336)));
evalcond[2]=(((r12*x2328))+(((-1.0)*x2335*x2336))+(((-1.0)*x2334*x2336)));
evalcond[3]=((-1.0)+((r02*x2328))+(((-1.0)*x2331*x2336))+(((-1.0)*x2330*x2336)));
evalcond[4]=(((r22*x2329))+((sj1*sj2))+((cj1*cj2))+((x2328*x2332))+((x2328*x2333)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r12*x2329))+((x2328*x2334))+((x2328*x2335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2338 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2338)==0){
continue;
}
IkReal x2337=pow(x2338,-0.5);
CheckValue<IkReal> x2339 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2339.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2339.value));
IkReal gconst91=(r10*x2337);
IkReal gconst92=(r11*x2337);
CheckValue<IkReal> x2340 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2340.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2340.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2343 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2343.valid){
continue;
}
IkReal x2341=((-1.0)*(x2343.value));
IkReal x2342=x2337;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2341;
IkReal gconst90=x2341;
IkReal gconst91=(r10*x2342);
IkReal gconst92=(r11*x2342);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2344=((1.0)*sj0);
CheckValue<IkReal> x2345=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r21))+((gconst92*r20)))),-1);
if(!x2345.valid){
continue;
}
CheckValue<IkReal> x2346 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2344))+((cj0*r12)))),IkReal((((cj0*gconst92*r11))+(((-1.0)*gconst91*r00*x2344))+(((-1.0)*gconst92*r01*x2344))+((cj0*gconst91*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2345.value)))+(x2346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2347=IKsin(j4);
IkReal x2348=IKcos(j4);
IkReal x2349=(gconst92*r01);
IkReal x2350=(cj2*sj1);
IkReal x2351=(gconst92*r11);
IkReal x2352=(gconst92*r21);
IkReal x2353=(cj1*sj2);
IkReal x2354=(gconst91*x2348);
IkReal x2355=((1.0)*x2347);
evalcond[0]=(((r22*x2348))+(((-1.0)*gconst91*r20*x2355))+(((-1.0)*x2352*x2355)));
evalcond[1]=(cj0+(((-1.0)*gconst91*r00*x2355))+((r02*x2348))+(((-1.0)*x2349*x2355)));
evalcond[2]=(sj0+((r12*x2348))+(((-1.0)*gconst91*r10*x2355))+(((-1.0)*x2351*x2355)));
evalcond[3]=(((x2348*x2352))+((r22*x2347))+((sj1*sj2))+((r20*x2354))+((cj1*cj2)));
evalcond[4]=(((sj0*x2350))+((r00*x2354))+((x2348*x2349))+(((-1.0)*sj0*x2353))+((r02*x2347)));
evalcond[5]=(((cj0*x2353))+((r10*x2354))+((r12*x2347))+((x2348*x2351))+(((-1.0)*cj0*x2350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2356 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst92*r21*sj0))+((gconst91*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2356.valid){
continue;
}
CheckValue<IkReal> x2357=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r01))+((gconst92*r00)))),-1);
if(!x2357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2356.value)+(((1.5707963267949)*(x2357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2358=IKsin(j4);
IkReal x2359=IKcos(j4);
IkReal x2360=(gconst92*r01);
IkReal x2361=(cj2*sj1);
IkReal x2362=(gconst92*r11);
IkReal x2363=(gconst92*r21);
IkReal x2364=(cj1*sj2);
IkReal x2365=(gconst91*x2359);
IkReal x2366=((1.0)*x2358);
evalcond[0]=(((r22*x2359))+(((-1.0)*gconst91*r20*x2366))+(((-1.0)*x2363*x2366)));
evalcond[1]=(cj0+(((-1.0)*x2360*x2366))+((r02*x2359))+(((-1.0)*gconst91*r00*x2366)));
evalcond[2]=(sj0+((r12*x2359))+(((-1.0)*gconst91*r10*x2366))+(((-1.0)*x2362*x2366)));
evalcond[3]=(((r20*x2365))+((r22*x2358))+((sj1*sj2))+((x2359*x2363))+((cj1*cj2)));
evalcond[4]=(((sj0*x2361))+((x2359*x2360))+((r02*x2358))+(((-1.0)*sj0*x2364))+((r00*x2365)));
evalcond[5]=(((cj0*x2364))+((r12*x2358))+(((-1.0)*cj0*x2361))+((r10*x2365))+((x2359*x2362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2369 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2369)==0){
continue;
}
IkReal x2367=pow(x2369,-0.5);
IkReal x2368=((-1.0)*x2367);
CheckValue<IkReal> x2370 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2370.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2370.value))));
IkReal gconst94=(r10*x2368);
IkReal gconst95=(r11*x2368);
CheckValue<IkReal> x2371 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2371.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2371.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x2375 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2375.valid){
continue;
}
IkReal x2372=((1.0)*(x2375.value));
IkReal x2373=x2367;
IkReal x2374=((-1.0)*x2373);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2372)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2372)));
IkReal gconst94=(r10*x2374);
IkReal gconst95=(r11*x2374);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2379 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2379.valid){
continue;
}
IkReal x2376=((1.0)*(x2379.value));
IkReal x2377=x2367;
IkReal x2378=((-1.0)*x2377);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2376)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2376)));
IkReal gconst94=(r10*x2378);
IkReal gconst95=(r11*x2378);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2383 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x2383.valid){
continue;
}
IkReal x2380=((1.0)*(x2383.value));
IkReal x2381=x2367;
IkReal x2382=((-1.0)*x2381);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2380)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2380)));
IkReal gconst94=(r10*x2382);
IkReal gconst95=(r11*x2382);
IkReal x2384=r12*r12;
IkReal x2385=(r02*sj0);
IkReal x2386=((1.0)*x2384);
CheckValue<IkReal> x2390=IKPowWithIntegerCheck(((-1.0)+x2384),-1);
if(!x2390.valid){
continue;
}
IkReal x2387=x2390.value;
if((((1.0)+(((-1.0)*x2386)))) < -0.00001)
continue;
IkReal x2388=IKsqrt(((1.0)+(((-1.0)*x2386))));
IkReal x2389=(cj0*x2387*x2388);
j4eval[0]=((IKabs((((r12*x2385*x2387*x2388))+x2389+(((-1.0)*x2386*x2389)))))+(IKabs(((((-1.0)*x2385))+((cj0*r12))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2391=((1.0)*sj0);
CheckValue<IkReal> x2392 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2391))+((cj0*r12)))),IkReal(((((-1.0)*gconst94*r00*x2391))+(((-1.0)*gconst95*r01*x2391))+((cj0*gconst94*r10))+((cj0*gconst95*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2392.valid){
continue;
}
CheckValue<IkReal> x2393=IKPowWithIntegerCheck(IKsign((((gconst95*r20))+(((-1.0)*gconst94*r21)))),-1);
if(!x2393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2392.value)+(((1.5707963267949)*(x2393.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2394=IKsin(j4);
IkReal x2395=IKcos(j4);
IkReal x2396=(cj2*sj1);
IkReal x2397=(cj1*sj2);
IkReal x2398=(gconst94*x2395);
IkReal x2399=(gconst95*x2395);
IkReal x2400=((1.0)*gconst95*x2394);
IkReal x2401=((1.0)*gconst94*x2394);
evalcond[0]=(((r22*x2395))+(((-1.0)*r21*x2400))+(((-1.0)*r20*x2401)));
evalcond[1]=(cj0+(((-1.0)*r01*x2400))+((r02*x2395))+(((-1.0)*r00*x2401)));
evalcond[2]=(((r12*x2395))+sj0+(((-1.0)*r11*x2400))+(((-1.0)*r10*x2401)));
evalcond[3]=(((r20*x2398))+((sj1*sj2))+((r22*x2394))+((cj1*cj2))+((r21*x2399)));
evalcond[4]=(((r00*x2398))+((r01*x2399))+((r02*x2394))+(((-1.0)*sj0*x2397))+((sj0*x2396)));
evalcond[5]=(((r12*x2394))+((cj0*x2397))+((r10*x2398))+(((-1.0)*cj0*x2396))+((r11*x2399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2402=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r01))+((gconst95*r00)))),-1);
if(!x2402.valid){
continue;
}
CheckValue<IkReal> x2403 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst95*r21*sj0))+((gconst94*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2402.value)))+(x2403.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2404=IKsin(j4);
IkReal x2405=IKcos(j4);
IkReal x2406=(cj2*sj1);
IkReal x2407=(cj1*sj2);
IkReal x2408=(gconst94*x2405);
IkReal x2409=(gconst95*x2405);
IkReal x2410=((1.0)*gconst95*x2404);
IkReal x2411=((1.0)*gconst94*x2404);
evalcond[0]=((((-1.0)*r20*x2411))+((r22*x2405))+(((-1.0)*r21*x2410)));
evalcond[1]=((((-1.0)*r00*x2411))+cj0+((r02*x2405))+(((-1.0)*r01*x2410)));
evalcond[2]=(sj0+((r12*x2405))+(((-1.0)*r11*x2410))+(((-1.0)*r10*x2411)));
evalcond[3]=(((r20*x2408))+((sj1*sj2))+((r22*x2404))+((r21*x2409))+((cj1*cj2)));
evalcond[4]=(((r01*x2409))+((r00*x2408))+((r02*x2404))+(((-1.0)*sj0*x2407))+((sj0*x2406)));
evalcond[5]=(((r10*x2408))+((r11*x2409))+((cj0*x2407))+((r12*x2404))+(((-1.0)*cj0*x2406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2412 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r20))+((cj0*gconst95*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2412.valid){
continue;
}
CheckValue<IkReal> x2413=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r10))+((gconst94*r11)))),-1);
if(!x2413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2412.value)+(((1.5707963267949)*(x2413.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2414=IKsin(j4);
IkReal x2415=IKcos(j4);
IkReal x2416=(cj2*sj1);
IkReal x2417=(cj1*sj2);
IkReal x2418=(gconst94*x2415);
IkReal x2419=(gconst95*x2415);
IkReal x2420=((1.0)*gconst95*x2414);
IkReal x2421=((1.0)*gconst94*x2414);
evalcond[0]=(((r22*x2415))+(((-1.0)*r20*x2421))+(((-1.0)*r21*x2420)));
evalcond[1]=((((-1.0)*r01*x2420))+cj0+((r02*x2415))+(((-1.0)*r00*x2421)));
evalcond[2]=(sj0+(((-1.0)*r10*x2421))+(((-1.0)*r11*x2420))+((r12*x2415)));
evalcond[3]=(((r22*x2414))+((r21*x2419))+((sj1*sj2))+((r20*x2418))+((cj1*cj2)));
evalcond[4]=(((r01*x2419))+((r00*x2418))+((sj0*x2416))+((r02*x2414))+(((-1.0)*sj0*x2417)));
evalcond[5]=((((-1.0)*cj0*x2416))+((r11*x2419))+((r10*x2418))+((cj0*x2417))+((r12*x2414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2422=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x2422;
j4eval[1]=IKsign(x2422);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2423=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x2423;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x2423);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2424=cj5*cj5;
IkReal x2425=r10*r10;
IkReal x2426=(cj5*r11);
IkReal x2427=(r10*sj5);
IkReal x2428=((r12*r12)+x2425+(((-1.0)*x2424*x2425))+((x2424*(r11*r11)))+(((2.0)*x2426*x2427)));
j4eval[0]=x2428;
j4eval[1]=IKsign(x2428);
j4eval[2]=((IKabs(r12))+(IKabs((x2426+x2427))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2429=cj5*cj5;
IkReal x2430=r10*r10;
IkReal x2431=(r10*sj5);
IkReal x2432=(cj5*r11);
CheckValue<IkReal> x2433 = IKatan2WithCheck(IkReal((x2432+x2431)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2433.valid){
continue;
}
CheckValue<IkReal> x2434=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2430+(((-1.0)*x2429*x2430))+((x2429*(r11*r11)))+(((2.0)*x2431*x2432)))),-1);
if(!x2434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2433.value)+(((1.5707963267949)*(x2434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2435=IKcos(j4);
IkReal x2436=IKsin(j4);
IkReal x2437=(r00*sj5);
IkReal x2438=(cj5*r01);
IkReal x2439=(r20*sj5);
IkReal x2440=(cj5*r21);
IkReal x2441=(cj5*r11);
IkReal x2442=(r10*sj5);
IkReal x2443=((1.0)*x2436);
evalcond[0]=(((r12*x2436))+((x2435*x2442))+((x2435*x2441)));
evalcond[1]=((((-1.0)*x2439*x2443))+((r22*x2435))+(((-1.0)*x2440*x2443)));
evalcond[2]=((((-1.0)*x2437*x2443))+((r02*x2435))+(((-1.0)*x2438*x2443)));
evalcond[3]=((1.0)+((r12*x2435))+(((-1.0)*x2441*x2443))+(((-1.0)*x2442*x2443)));
evalcond[4]=(((x2435*x2439))+((sj1*sj2))+((r22*x2436))+((cj1*cj2))+((x2435*x2440)));
evalcond[5]=(((cj2*sj1))+((x2435*x2437))+((x2435*x2438))+((r02*x2436))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2444 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2444.valid){
continue;
}
CheckValue<IkReal> x2445=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x2445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2444.value)+(((1.5707963267949)*(x2445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2446=IKcos(j4);
IkReal x2447=IKsin(j4);
IkReal x2448=(r00*sj5);
IkReal x2449=(cj5*r01);
IkReal x2450=(r20*sj5);
IkReal x2451=(cj5*r21);
IkReal x2452=(cj5*r11);
IkReal x2453=(r10*sj5);
IkReal x2454=((1.0)*x2447);
evalcond[0]=(((r12*x2447))+((x2446*x2453))+((x2446*x2452)));
evalcond[1]=((((-1.0)*x2450*x2454))+((r22*x2446))+(((-1.0)*x2451*x2454)));
evalcond[2]=(((r02*x2446))+(((-1.0)*x2448*x2454))+(((-1.0)*x2449*x2454)));
evalcond[3]=((1.0)+(((-1.0)*x2453*x2454))+(((-1.0)*x2452*x2454))+((r12*x2446)));
evalcond[4]=(((r22*x2447))+((sj1*sj2))+((cj1*cj2))+((x2446*x2450))+((x2446*x2451)));
evalcond[5]=(((cj2*sj1))+((x2446*x2448))+((x2446*x2449))+((r02*x2447))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2455=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x2455.valid){
continue;
}
CheckValue<IkReal> x2456 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2455.value)))+(x2456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2457=IKcos(j4);
IkReal x2458=IKsin(j4);
IkReal x2459=(r00*sj5);
IkReal x2460=(cj5*r01);
IkReal x2461=(r20*sj5);
IkReal x2462=(cj5*r21);
IkReal x2463=(cj5*r11);
IkReal x2464=(r10*sj5);
IkReal x2465=((1.0)*x2458);
evalcond[0]=(((r12*x2458))+((x2457*x2464))+((x2457*x2463)));
evalcond[1]=(((r22*x2457))+(((-1.0)*x2461*x2465))+(((-1.0)*x2462*x2465)));
evalcond[2]=(((r02*x2457))+(((-1.0)*x2460*x2465))+(((-1.0)*x2459*x2465)));
evalcond[3]=((1.0)+(((-1.0)*x2464*x2465))+(((-1.0)*x2463*x2465))+((r12*x2457)));
evalcond[4]=(((r22*x2458))+((sj1*sj2))+((x2457*x2461))+((x2457*x2462))+((cj1*cj2)));
evalcond[5]=(((r02*x2458))+((cj2*sj1))+(((-1.0)*cj1*sj2))+((x2457*x2459))+((x2457*x2460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2466=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x2466;
j4eval[1]=IKsign(x2466);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2467=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x2467;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x2467);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2468=(sj1*sj2);
IkReal x2469=((1.0)*r12);
IkReal x2470=(cj1*cj2);
IkReal x2471=(r10*sj5);
IkReal x2472=(cj5*r11);
IkReal x2473=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x2473;
j4eval[1]=IKsign(x2473);
j4eval[2]=((IKabs(((((-1.0)*x2468*x2469))+(((-1.0)*x2469*x2470)))))+(IKabs((((x2468*x2472))+((x2468*x2471))+((x2470*x2471))+((x2470*x2472))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2474=((1.0)*r12);
IkReal x2475=(sj1*sj2);
IkReal x2476=(cj1*cj2);
IkReal x2477=(r10*sj5);
IkReal x2478=(cj5*r11);
CheckValue<IkReal> x2479=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x2479.valid){
continue;
}
CheckValue<IkReal> x2480 = IKatan2WithCheck(IkReal((((x2476*x2478))+((x2476*x2477))+((x2475*x2477))+((x2475*x2478)))),IkReal(((((-1.0)*x2474*x2476))+(((-1.0)*x2474*x2475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2479.value)))+(x2480.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2481=IKcos(j4);
IkReal x2482=IKsin(j4);
IkReal x2483=(r00*sj5);
IkReal x2484=(cj5*r01);
IkReal x2485=(r20*sj5);
IkReal x2486=(cj5*r21);
IkReal x2487=(cj5*r11);
IkReal x2488=(r10*sj5);
IkReal x2489=((1.0)*x2482);
evalcond[0]=(((x2481*x2487))+((x2481*x2488))+((r12*x2482)));
evalcond[1]=(((r22*x2481))+(((-1.0)*x2486*x2489))+(((-1.0)*x2485*x2489)));
evalcond[2]=(((r02*x2481))+(((-1.0)*x2484*x2489))+(((-1.0)*x2483*x2489)));
evalcond[3]=((-1.0)+(((-1.0)*x2488*x2489))+(((-1.0)*x2487*x2489))+((r12*x2481)));
evalcond[4]=(((r22*x2482))+((x2481*x2485))+((x2481*x2486))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((r02*x2482))+((cj1*sj2))+((x2481*x2484))+((x2481*x2483))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2490 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2490.valid){
continue;
}
CheckValue<IkReal> x2491=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x2491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2490.value)+(((1.5707963267949)*(x2491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2492=IKcos(j4);
IkReal x2493=IKsin(j4);
IkReal x2494=(r00*sj5);
IkReal x2495=(cj5*r01);
IkReal x2496=(r20*sj5);
IkReal x2497=(cj5*r21);
IkReal x2498=(cj5*r11);
IkReal x2499=(r10*sj5);
IkReal x2500=((1.0)*x2493);
evalcond[0]=(((x2492*x2498))+((x2492*x2499))+((r12*x2493)));
evalcond[1]=((((-1.0)*x2496*x2500))+((r22*x2492))+(((-1.0)*x2497*x2500)));
evalcond[2]=(((r02*x2492))+(((-1.0)*x2494*x2500))+(((-1.0)*x2495*x2500)));
evalcond[3]=((-1.0)+(((-1.0)*x2498*x2500))+(((-1.0)*x2499*x2500))+((r12*x2492)));
evalcond[4]=(((x2492*x2496))+((x2492*x2497))+((r22*x2493))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((x2492*x2494))+((x2492*x2495))+((r02*x2493))+((cj1*sj2))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2501 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2501.valid){
continue;
}
CheckValue<IkReal> x2502=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x2502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2501.value)+(((1.5707963267949)*(x2502.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2503=IKcos(j4);
IkReal x2504=IKsin(j4);
IkReal x2505=(r00*sj5);
IkReal x2506=(cj5*r01);
IkReal x2507=(r20*sj5);
IkReal x2508=(cj5*r21);
IkReal x2509=(cj5*r11);
IkReal x2510=(r10*sj5);
IkReal x2511=((1.0)*x2504);
evalcond[0]=(((r12*x2504))+((x2503*x2510))+((x2503*x2509)));
evalcond[1]=((((-1.0)*x2508*x2511))+((r22*x2503))+(((-1.0)*x2507*x2511)));
evalcond[2]=(((r02*x2503))+(((-1.0)*x2506*x2511))+(((-1.0)*x2505*x2511)));
evalcond[3]=((-1.0)+((r12*x2503))+(((-1.0)*x2510*x2511))+(((-1.0)*x2509*x2511)));
evalcond[4]=(((r22*x2504))+((sj1*sj2))+((cj1*cj2))+((x2503*x2507))+((x2503*x2508)));
evalcond[5]=(((r02*x2504))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x2503*x2505))+((x2503*x2506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2512=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2512);
rxp0_2=(py*r00);
rxp1_0=(r21*x2512);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2513=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2513);
rxp0_2=(py*r00);
rxp1_0=(r21*x2513);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2514=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2514);
rxp0_2=(py*r00);
rxp1_0=(r21*x2514);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r00*sj5))+((cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2517=IKPowWithIntegerCheck((((r00*sj5))+((cj5*r01))),-1);
if(!x2517.valid){
continue;
}
IkReal x2515=x2517.value;
IkReal x2516=(sj0*x2515);
cj4array[0]=((((-1.0)*cj2*sj1*x2516))+((cj1*sj2*x2516)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2518=IKsin(j4);
IkReal x2519=IKcos(j4);
IkReal x2520=(cj5*r21);
IkReal x2521=(r20*sj5);
IkReal x2522=((1.0)*x2518);
evalcond[0]=(r12*x2518);
evalcond[1]=(sj0+((r12*x2519)));
evalcond[2]=((((-1.0)*x2520*x2522))+(((-1.0)*x2521*x2522)));
evalcond[3]=((((-1.0)*cj5*r01*x2522))+(((-1.0)*r00*sj5*x2522)));
evalcond[4]=(((x2519*x2521))+((x2519*x2520))+((sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2525=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x2525.valid){
continue;
}
IkReal x2523=x2525.value;
IkReal x2524=((1.0)*x2523);
cj4array[0]=((((-1.0)*sj1*sj2*x2524))+(((-1.0)*cj1*cj2*x2524)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2526=IKsin(j4);
IkReal x2527=IKcos(j4);
IkReal x2528=(r00*sj5);
IkReal x2529=(cj5*r01);
IkReal x2530=((1.0)*x2526);
evalcond[0]=(r12*x2526);
evalcond[1]=(sj0+((r12*x2527)));
evalcond[2]=((((-1.0)*cj5*r21*x2530))+(((-1.0)*r20*sj5*x2530)));
evalcond[3]=((((-1.0)*x2528*x2530))+(((-1.0)*x2529*x2530)));
evalcond[4]=(((x2527*x2528))+((x2527*x2529))+(((-1.0)*cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2531=IKPowWithIntegerCheck(r12,-1);
if(!x2531.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2531.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2532=IKsin(j4);
IkReal x2533=IKcos(j4);
IkReal x2534=(cj5*r21);
IkReal x2535=(r00*sj5);
IkReal x2536=(cj5*r01);
IkReal x2537=(r20*sj5);
IkReal x2538=((1.0)*x2532);
evalcond[0]=(r12*x2532);
evalcond[1]=((((-1.0)*x2537*x2538))+(((-1.0)*x2534*x2538)));
evalcond[2]=((((-1.0)*x2535*x2538))+(((-1.0)*x2536*x2538)));
evalcond[3]=(((sj1*sj2))+((x2533*x2537))+((x2533*x2534))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj1*sj0*sj2))+((cj2*sj0*sj1))+((x2533*x2536))+((x2533*x2535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2539=((1.0)*sj0);
CheckValue<IkReal> x2540 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2539))+((cj0*r12)))),IkReal((((cj0*cj5*r11))+((cj0*r10*sj5))+(((-1.0)*cj5*r01*x2539))+(((-1.0)*r00*sj5*x2539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2540.valid){
continue;
}
CheckValue<IkReal> x2541=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x2541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2540.value)+(((1.5707963267949)*(x2541.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2542=IKsin(j4);
IkReal x2543=IKcos(j4);
IkReal x2544=(cj2*sj1);
IkReal x2545=(r00*sj5);
IkReal x2546=(cj5*r01);
IkReal x2547=(r20*sj5);
IkReal x2548=(cj5*r21);
IkReal x2549=(cj5*r11);
IkReal x2550=(r10*sj5);
IkReal x2551=(cj1*sj2);
IkReal x2552=((1.0)*x2542);
evalcond[0]=((((-1.0)*x2548*x2552))+(((-1.0)*x2547*x2552))+((r22*x2543)));
evalcond[1]=(cj0+(((-1.0)*x2546*x2552))+(((-1.0)*x2545*x2552))+((r02*x2543)));
evalcond[2]=((((-1.0)*x2549*x2552))+sj0+((r12*x2543))+(((-1.0)*x2550*x2552)));
evalcond[3]=(((x2543*x2547))+((x2543*x2548))+((sj1*sj2))+((cj1*cj2))+((r22*x2542)));
evalcond[4]=((((-1.0)*sj0*x2551))+((x2543*x2546))+((x2543*x2545))+((sj0*x2544))+((r02*x2542)));
evalcond[5]=(((x2543*x2549))+((x2543*x2550))+((r12*x2542))+((cj0*x2551))+(((-1.0)*cj0*x2544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2553=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x2553.valid){
continue;
}
CheckValue<IkReal> x2554 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2553.value)))+(x2554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2555=IKsin(j4);
IkReal x2556=IKcos(j4);
IkReal x2557=(cj2*sj1);
IkReal x2558=(r00*sj5);
IkReal x2559=(cj5*r01);
IkReal x2560=(r20*sj5);
IkReal x2561=(cj5*r21);
IkReal x2562=(cj5*r11);
IkReal x2563=(r10*sj5);
IkReal x2564=(cj1*sj2);
IkReal x2565=((1.0)*x2555);
evalcond[0]=(((r22*x2556))+(((-1.0)*x2561*x2565))+(((-1.0)*x2560*x2565)));
evalcond[1]=(cj0+(((-1.0)*x2558*x2565))+(((-1.0)*x2559*x2565))+((r02*x2556)));
evalcond[2]=((((-1.0)*x2563*x2565))+(((-1.0)*x2562*x2565))+sj0+((r12*x2556)));
evalcond[3]=(((r22*x2555))+((x2556*x2560))+((x2556*x2561))+((sj1*sj2))+((cj1*cj2)));
evalcond[4]=(((x2556*x2558))+((x2556*x2559))+((sj0*x2557))+(((-1.0)*sj0*x2564))+((r02*x2555)));
evalcond[5]=(((r12*x2555))+((x2556*x2563))+((x2556*x2562))+((cj0*x2564))+(((-1.0)*cj0*x2557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2566 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2566.valid){
continue;
}
CheckValue<IkReal> x2567=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x2567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2566.value)+(((1.5707963267949)*(x2567.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2568=IKsin(j4);
IkReal x2569=IKcos(j4);
IkReal x2570=(cj2*sj1);
IkReal x2571=(r00*sj5);
IkReal x2572=(cj5*r01);
IkReal x2573=(r20*sj5);
IkReal x2574=(cj5*r21);
IkReal x2575=(cj5*r11);
IkReal x2576=(r10*sj5);
IkReal x2577=(cj1*sj2);
IkReal x2578=((1.0)*x2568);
evalcond[0]=(((r22*x2569))+(((-1.0)*x2573*x2578))+(((-1.0)*x2574*x2578)));
evalcond[1]=((((-1.0)*x2571*x2578))+cj0+(((-1.0)*x2572*x2578))+((r02*x2569)));
evalcond[2]=((((-1.0)*x2575*x2578))+sj0+((r12*x2569))+(((-1.0)*x2576*x2578)));
evalcond[3]=(((r22*x2568))+((sj1*sj2))+((cj1*cj2))+((x2569*x2573))+((x2569*x2574)));
evalcond[4]=((((-1.0)*sj0*x2577))+((sj0*x2570))+((x2569*x2572))+((x2569*x2571))+((r02*x2568)));
evalcond[5]=(((r12*x2568))+(((-1.0)*cj0*x2570))+((x2569*x2576))+((x2569*x2575))+((cj0*x2577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2579=(((sj1*sj2))+((cj1*cj2)));
j0eval[0]=x2579;
j0eval[1]=IKsign(x2579);
j0eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2580=cj5*cj5;
IkReal x2581=r20*r20;
IkReal x2582=(cj1*cj2);
IkReal x2583=(sj1*sj2);
IkReal x2584=(r20*sj5);
IkReal x2585=(cj5*r21);
IkReal x2586=(x2581+(r22*r22)+((x2580*(r21*r21)))+(((2.0)*x2584*x2585))+(((-1.0)*x2580*x2581)));
j4eval[0]=x2586;
j4eval[1]=((IKabs((((x2582*x2584))+((x2582*x2585))+((x2583*x2585))+((x2583*x2584)))))+(IKabs((((r22*x2583))+((r22*x2582))))));
j4eval[2]=IKsign(x2586);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=(((sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.489292297647925)*py))+(((-2.09829334475201)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.09829334475201)*py))+(((0.489292297647925)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.489292297647925)*py))+(((-2.09829334475201)*px))))+IKsqr(((((2.09829334475201)*py))+(((0.489292297647925)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.489292297647925)*py))+(((-2.09829334475201)*px))), ((((2.09829334475201)*py))+(((0.489292297647925)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2587=IKcos(j0);
IkReal x2588=IKsin(j0);
evalcond[0]=((((-0.452)*x2588))+(((-1.0)*px))+(((0.1054)*x2587)));
evalcond[1]=((((0.452)*x2587))+(((-1.0)*py))+(((0.1054)*x2588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2589=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x2589;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x2589);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2590=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x2590;
j4eval[1]=IKsign(x2590);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2591=((1.0)*sj0);
IkReal x2592=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x2592;
j4eval[1]=((IKabs((((cj0*cj5*r11))+((cj0*r10*sj5))+(((-1.0)*cj5*r01*x2591))+(((-1.0)*r00*sj5*x2591)))))+(IKabs(((((-1.0)*r02*x2591))+((cj0*r12))))));
j4eval[2]=IKsign(x2592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2593=((1.0)*sj0);
CheckValue<IkReal> x2594 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2593))+((cj0*r12)))),IkReal((((cj0*cj5*r11))+((cj0*r10*sj5))+(((-1.0)*cj5*r01*x2593))+(((-1.0)*r00*sj5*x2593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2594.valid){
continue;
}
CheckValue<IkReal> x2595=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x2595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2594.value)+(((1.5707963267949)*(x2595.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2596=IKsin(j4);
IkReal x2597=IKcos(j4);
IkReal x2598=((1.0)*cj5);
IkReal x2599=(r00*sj5);
IkReal x2600=(r10*sj5);
IkReal x2601=(r20*sj5);
IkReal x2602=((1.0)*x2596);
IkReal x2603=((1.0)*x2597);
evalcond[0]=(((r22*x2597))+(((-1.0)*r21*x2596*x2598))+(((-1.0)*x2601*x2602)));
evalcond[1]=(cj0+(((-1.0)*r01*x2596*x2598))+((r02*x2597))+(((-1.0)*x2599*x2602)));
evalcond[2]=(sj0+(((-1.0)*x2600*x2602))+((r12*x2597))+(((-1.0)*r11*x2596*x2598)));
evalcond[3]=((((-1.0)*x2601*x2603))+(((-1.0)*r21*x2597*x2598))+(((-1.0)*r22*x2602)));
evalcond[4]=(cj0+(((-1.0)*x2600*x2603))+(((-1.0)*r11*x2597*x2598))+(((-1.0)*r12*x2602)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x2597*x2598))+(((-1.0)*r02*x2602))+(((-1.0)*x2599*x2603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2604=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x2604.valid){
continue;
}
CheckValue<IkReal> x2605 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2604.value)))+(x2605.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2606=IKsin(j4);
IkReal x2607=IKcos(j4);
IkReal x2608=((1.0)*cj5);
IkReal x2609=(r00*sj5);
IkReal x2610=(r10*sj5);
IkReal x2611=(r20*sj5);
IkReal x2612=((1.0)*x2606);
IkReal x2613=((1.0)*x2607);
evalcond[0]=((((-1.0)*x2611*x2612))+(((-1.0)*r21*x2606*x2608))+((r22*x2607)));
evalcond[1]=((((-1.0)*x2609*x2612))+cj0+((r02*x2607))+(((-1.0)*r01*x2606*x2608)));
evalcond[2]=((((-1.0)*x2610*x2612))+sj0+(((-1.0)*r11*x2606*x2608))+((r12*x2607)));
evalcond[3]=((((-1.0)*x2611*x2613))+(((-1.0)*r21*x2607*x2608))+(((-1.0)*r22*x2612)));
evalcond[4]=((((-1.0)*x2610*x2613))+cj0+(((-1.0)*r12*x2612))+(((-1.0)*r11*x2607*x2608)));
evalcond[5]=((((-1.0)*x2609*x2613))+(((-1.0)*sj0))+(((-1.0)*r01*x2607*x2608))+(((-1.0)*r02*x2612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2614 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2614.valid){
continue;
}
CheckValue<IkReal> x2615=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x2615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2614.value)+(((1.5707963267949)*(x2615.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2616=IKsin(j4);
IkReal x2617=IKcos(j4);
IkReal x2618=((1.0)*cj5);
IkReal x2619=(r00*sj5);
IkReal x2620=(r10*sj5);
IkReal x2621=(r20*sj5);
IkReal x2622=((1.0)*x2616);
IkReal x2623=((1.0)*x2617);
evalcond[0]=((((-1.0)*r21*x2616*x2618))+((r22*x2617))+(((-1.0)*x2621*x2622)));
evalcond[1]=((((-1.0)*x2619*x2622))+cj0+((r02*x2617))+(((-1.0)*r01*x2616*x2618)));
evalcond[2]=(sj0+(((-1.0)*r11*x2616*x2618))+((r12*x2617))+(((-1.0)*x2620*x2622)));
evalcond[3]=((((-1.0)*r21*x2617*x2618))+(((-1.0)*r22*x2622))+(((-1.0)*x2621*x2623)));
evalcond[4]=(cj0+(((-1.0)*r11*x2617*x2618))+(((-1.0)*r12*x2622))+(((-1.0)*x2620*x2623)));
evalcond[5]=((((-1.0)*x2619*x2623))+(((-1.0)*sj0))+(((-1.0)*r02*x2622))+(((-1.0)*r01*x2617*x2618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.09829334475201)*px))+(((0.489292297647925)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.489292297647925)*px))+(((-2.09829334475201)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.09829334475201)*px))+(((0.489292297647925)*py))))+IKsqr(((((0.489292297647925)*px))+(((-2.09829334475201)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.09829334475201)*px))+(((0.489292297647925)*py))), ((((0.489292297647925)*px))+(((-2.09829334475201)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2624=IKsin(j0);
IkReal x2625=IKcos(j0);
evalcond[0]=((((0.1054)*x2625))+(((-1.0)*px))+(((0.452)*x2624)));
evalcond[1]=((((-0.452)*x2625))+(((0.1054)*x2624))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2626=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x2626;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x2626);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2627=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x2627;
j4eval[1]=IKsign(x2627);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2628=((1.0)*sj0);
IkReal x2629=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x2629;
j4eval[1]=((IKabs(((((-1.0)*cj5*r01*x2628))+((cj0*cj5*r11))+(((-1.0)*r00*sj5*x2628))+((cj0*r10*sj5)))))+(IKabs(((((-1.0)*r02*x2628))+((cj0*r12))))));
j4eval[2]=IKsign(x2629);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2630=((1.0)*sj0);
CheckValue<IkReal> x2631 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2630))+((cj0*r12)))),IkReal(((((-1.0)*r00*sj5*x2630))+((cj0*cj5*r11))+(((-1.0)*cj5*r01*x2630))+((cj0*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2631.valid){
continue;
}
CheckValue<IkReal> x2632=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x2632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2631.value)+(((1.5707963267949)*(x2632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2633=IKsin(j4);
IkReal x2634=IKcos(j4);
IkReal x2635=((1.0)*cj5);
IkReal x2636=(r00*sj5);
IkReal x2637=(r10*sj5);
IkReal x2638=(r20*sj5);
IkReal x2639=((1.0)*x2633);
IkReal x2640=((1.0)*x2634);
evalcond[0]=(((r22*x2634))+(((-1.0)*x2638*x2639))+(((-1.0)*r21*x2633*x2635)));
evalcond[1]=(cj0+(((-1.0)*x2636*x2639))+(((-1.0)*r01*x2633*x2635))+((r02*x2634)));
evalcond[2]=(sj0+((r12*x2634))+(((-1.0)*x2637*x2639))+(((-1.0)*r11*x2633*x2635)));
evalcond[3]=((((-1.0)*r21*x2634*x2635))+(((-1.0)*r22*x2639))+(((-1.0)*x2638*x2640)));
evalcond[4]=(sj0+(((-1.0)*r02*x2639))+(((-1.0)*r01*x2634*x2635))+(((-1.0)*x2636*x2640)));
evalcond[5]=((((-1.0)*x2637*x2640))+(((-1.0)*r11*x2634*x2635))+(((-1.0)*r12*x2639))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2641=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x2641.valid){
continue;
}
CheckValue<IkReal> x2642 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2641.value)))+(x2642.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2643=IKsin(j4);
IkReal x2644=IKcos(j4);
IkReal x2645=((1.0)*cj5);
IkReal x2646=(r00*sj5);
IkReal x2647=(r10*sj5);
IkReal x2648=(r20*sj5);
IkReal x2649=((1.0)*x2643);
IkReal x2650=((1.0)*x2644);
evalcond[0]=((((-1.0)*r21*x2643*x2645))+((r22*x2644))+(((-1.0)*x2648*x2649)));
evalcond[1]=(cj0+(((-1.0)*x2646*x2649))+(((-1.0)*r01*x2643*x2645))+((r02*x2644)));
evalcond[2]=(((r12*x2644))+sj0+(((-1.0)*r11*x2643*x2645))+(((-1.0)*x2647*x2649)));
evalcond[3]=((((-1.0)*r22*x2649))+(((-1.0)*r21*x2644*x2645))+(((-1.0)*x2648*x2650)));
evalcond[4]=(sj0+(((-1.0)*x2646*x2650))+(((-1.0)*r02*x2649))+(((-1.0)*r01*x2644*x2645)));
evalcond[5]=((((-1.0)*r12*x2649))+(((-1.0)*x2647*x2650))+(((-1.0)*r11*x2644*x2645))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2651 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2651.valid){
continue;
}
CheckValue<IkReal> x2652=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x2652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2651.value)+(((1.5707963267949)*(x2652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2653=IKsin(j4);
IkReal x2654=IKcos(j4);
IkReal x2655=((1.0)*cj5);
IkReal x2656=(r00*sj5);
IkReal x2657=(r10*sj5);
IkReal x2658=(r20*sj5);
IkReal x2659=((1.0)*x2653);
IkReal x2660=((1.0)*x2654);
evalcond[0]=((((-1.0)*r21*x2653*x2655))+(((-1.0)*x2658*x2659))+((r22*x2654)));
evalcond[1]=(cj0+(((-1.0)*r01*x2653*x2655))+((r02*x2654))+(((-1.0)*x2656*x2659)));
evalcond[2]=(((r12*x2654))+sj0+(((-1.0)*r11*x2653*x2655))+(((-1.0)*x2657*x2659)));
evalcond[3]=((((-1.0)*r22*x2659))+(((-1.0)*x2658*x2660))+(((-1.0)*r21*x2654*x2655)));
evalcond[4]=(sj0+(((-1.0)*r01*x2654*x2655))+(((-1.0)*r02*x2659))+(((-1.0)*x2656*x2660)));
evalcond[5]=((((-1.0)*r12*x2659))+(((-1.0)*x2657*x2660))+(((-1.0)*cj0))+(((-1.0)*r11*x2654*x2655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.09135885719082)*px))+(((0.127244716314062)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.09135885719082)*py))+(((0.127244716314062)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.09135885719082)*px))+(((0.127244716314062)*py))))+IKsqr(((((-1.09135885719082)*py))+(((0.127244716314062)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.09135885719082)*px))+(((0.127244716314062)*py))), ((((-1.09135885719082)*py))+(((0.127244716314062)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2661=IKsin(j0);
IkReal x2662=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.1054)*x2662))+(((0.904)*x2661)));
evalcond[1]=((((-0.904)*x2662))+(((-1.0)*py))+(((0.1054)*x2661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2663=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x2663;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x2663);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2664=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x2664;
j4eval[1]=IKsign(x2664);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2665=((1.0)*sj0);
IkReal x2666=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x2666;
j4eval[1]=((IKabs((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x2665))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x2665)))))+(IKabs(((((-1.0)*r02*x2665))+((cj0*r12))))));
j4eval[2]=IKsign(x2666);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2667=((1.0)*sj0);
CheckValue<IkReal> x2668 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2667))+((cj0*r12)))),IkReal((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x2667))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x2667)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2668.valid){
continue;
}
CheckValue<IkReal> x2669=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x2669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2668.value)+(((1.5707963267949)*(x2669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2670=IKsin(j4);
IkReal x2671=IKcos(j4);
IkReal x2672=((1.0)*cj5);
IkReal x2673=(r00*sj5);
IkReal x2674=(r10*sj5);
IkReal x2675=(r20*sj5);
IkReal x2676=((1.0)*x2670);
IkReal x2677=((1.0)*x2671);
evalcond[0]=((((-1.0)*r21*x2670*x2672))+(((-1.0)*x2675*x2676))+((r22*x2671)));
evalcond[1]=(cj0+((r02*x2671))+(((-1.0)*x2673*x2676))+(((-1.0)*r01*x2670*x2672)));
evalcond[2]=((((-1.0)*r11*x2670*x2672))+sj0+((r12*x2671))+(((-1.0)*x2674*x2676)));
evalcond[3]=((((-1.0)*r21*x2671*x2672))+(((-1.0)*x2675*x2677))+(((-1.0)*r22*x2676)));
evalcond[4]=(sj0+(((-1.0)*x2673*x2677))+(((-1.0)*r01*x2671*x2672))+(((-1.0)*r02*x2676)));
evalcond[5]=((((-1.0)*r12*x2676))+(((-1.0)*x2674*x2677))+(((-1.0)*r11*x2671*x2672))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2678=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x2678.valid){
continue;
}
CheckValue<IkReal> x2679 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2678.value)))+(x2679.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2680=IKsin(j4);
IkReal x2681=IKcos(j4);
IkReal x2682=((1.0)*cj5);
IkReal x2683=(r00*sj5);
IkReal x2684=(r10*sj5);
IkReal x2685=(r20*sj5);
IkReal x2686=((1.0)*x2680);
IkReal x2687=((1.0)*x2681);
evalcond[0]=((((-1.0)*x2685*x2686))+((r22*x2681))+(((-1.0)*r21*x2680*x2682)));
evalcond[1]=(((r02*x2681))+(((-1.0)*r01*x2680*x2682))+cj0+(((-1.0)*x2683*x2686)));
evalcond[2]=(sj0+(((-1.0)*x2684*x2686))+(((-1.0)*r11*x2680*x2682))+((r12*x2681)));
evalcond[3]=((((-1.0)*x2685*x2687))+(((-1.0)*r22*x2686))+(((-1.0)*r21*x2681*x2682)));
evalcond[4]=((((-1.0)*r02*x2686))+sj0+(((-1.0)*x2683*x2687))+(((-1.0)*r01*x2681*x2682)));
evalcond[5]=((((-1.0)*r12*x2686))+(((-1.0)*r11*x2681*x2682))+(((-1.0)*x2684*x2687))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2688 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2688.valid){
continue;
}
CheckValue<IkReal> x2689=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x2689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2688.value)+(((1.5707963267949)*(x2689.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2690=IKsin(j4);
IkReal x2691=IKcos(j4);
IkReal x2692=((1.0)*cj5);
IkReal x2693=(r00*sj5);
IkReal x2694=(r10*sj5);
IkReal x2695=(r20*sj5);
IkReal x2696=((1.0)*x2690);
IkReal x2697=((1.0)*x2691);
evalcond[0]=(((r22*x2691))+(((-1.0)*r21*x2690*x2692))+(((-1.0)*x2695*x2696)));
evalcond[1]=(cj0+(((-1.0)*r01*x2690*x2692))+(((-1.0)*x2693*x2696))+((r02*x2691)));
evalcond[2]=(((r12*x2691))+sj0+(((-1.0)*r11*x2690*x2692))+(((-1.0)*x2694*x2696)));
evalcond[3]=((((-1.0)*r22*x2696))+(((-1.0)*r21*x2691*x2692))+(((-1.0)*x2695*x2697)));
evalcond[4]=(sj0+(((-1.0)*r02*x2696))+(((-1.0)*r01*x2691*x2692))+(((-1.0)*x2693*x2697)));
evalcond[5]=((((-1.0)*r11*x2691*x2692))+(((-1.0)*r12*x2696))+(((-1.0)*cj0))+(((-1.0)*x2694*x2697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.4876660341556)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.4876660341556)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.4876660341556)*py))+IKsqr(((9.4876660341556)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.4876660341556)*py), ((9.4876660341556)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1054)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1054)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2698=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x2698;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x2698);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2699=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x2699;
j4eval[1]=IKsign(x2699);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2700=((1.0)*sj0);
IkReal x2701=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x2701;
j4eval[1]=((IKabs(((((-1.0)*r02*x2700))+((cj0*r12)))))+(IKabs(((((-1.0)*r00*sj5*x2700))+((cj0*cj5*r11))+(((-1.0)*cj5*r01*x2700))+((cj0*r10*sj5))))));
j4eval[2]=IKsign(x2701);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2702=((1.0)*sj0);
CheckValue<IkReal> x2703 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2702))+((cj0*r12)))),IkReal(((((-1.0)*r00*sj5*x2702))+((cj0*cj5*r11))+(((-1.0)*cj5*r01*x2702))+((cj0*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2703.valid){
continue;
}
CheckValue<IkReal> x2704=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x2704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2703.value)+(((1.5707963267949)*(x2704.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2705=IKsin(j4);
IkReal x2706=IKcos(j4);
IkReal x2707=((1.0)*cj5);
IkReal x2708=(r00*sj5);
IkReal x2709=(r10*sj5);
IkReal x2710=(r20*sj5);
IkReal x2711=((1.0)*x2705);
IkReal x2712=((1.0)*x2706);
evalcond[0]=(((r22*x2706))+(((-1.0)*r21*x2705*x2707))+(((-1.0)*x2710*x2711)));
evalcond[1]=(cj0+(((-1.0)*x2708*x2711))+(((-1.0)*r01*x2705*x2707))+((r02*x2706)));
evalcond[2]=(((r12*x2706))+sj0+(((-1.0)*r11*x2705*x2707))+(((-1.0)*x2709*x2711)));
evalcond[3]=((((-1.0)*r21*x2706*x2707))+(((-1.0)*r22*x2711))+(((-1.0)*x2710*x2712)));
evalcond[4]=((((-1.0)*r11*x2706*x2707))+cj0+(((-1.0)*x2709*x2712))+(((-1.0)*r12*x2711)));
evalcond[5]=((((-1.0)*r01*x2706*x2707))+(((-1.0)*sj0))+(((-1.0)*r02*x2711))+(((-1.0)*x2708*x2712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2713=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x2713.valid){
continue;
}
CheckValue<IkReal> x2714 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2713.value)))+(x2714.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2715=IKsin(j4);
IkReal x2716=IKcos(j4);
IkReal x2717=((1.0)*cj5);
IkReal x2718=(r00*sj5);
IkReal x2719=(r10*sj5);
IkReal x2720=(r20*sj5);
IkReal x2721=((1.0)*x2715);
IkReal x2722=((1.0)*x2716);
evalcond[0]=(((r22*x2716))+(((-1.0)*x2720*x2721))+(((-1.0)*r21*x2715*x2717)));
evalcond[1]=((((-1.0)*x2718*x2721))+cj0+((r02*x2716))+(((-1.0)*r01*x2715*x2717)));
evalcond[2]=(((r12*x2716))+sj0+(((-1.0)*x2719*x2721))+(((-1.0)*r11*x2715*x2717)));
evalcond[3]=((((-1.0)*r21*x2716*x2717))+(((-1.0)*x2720*x2722))+(((-1.0)*r22*x2721)));
evalcond[4]=(cj0+(((-1.0)*x2719*x2722))+(((-1.0)*r12*x2721))+(((-1.0)*r11*x2716*x2717)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x2718*x2722))+(((-1.0)*r01*x2716*x2717))+(((-1.0)*r02*x2721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2723 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2723.valid){
continue;
}
CheckValue<IkReal> x2724=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x2724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2723.value)+(((1.5707963267949)*(x2724.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2725=IKsin(j4);
IkReal x2726=IKcos(j4);
IkReal x2727=((1.0)*cj5);
IkReal x2728=(r00*sj5);
IkReal x2729=(r10*sj5);
IkReal x2730=(r20*sj5);
IkReal x2731=((1.0)*x2725);
IkReal x2732=((1.0)*x2726);
evalcond[0]=((((-1.0)*x2730*x2731))+((r22*x2726))+(((-1.0)*r21*x2725*x2727)));
evalcond[1]=(((r02*x2726))+cj0+(((-1.0)*r01*x2725*x2727))+(((-1.0)*x2728*x2731)));
evalcond[2]=(sj0+((r12*x2726))+(((-1.0)*x2729*x2731))+(((-1.0)*r11*x2725*x2727)));
evalcond[3]=((((-1.0)*x2730*x2732))+(((-1.0)*r22*x2731))+(((-1.0)*r21*x2726*x2727)));
evalcond[4]=(cj0+(((-1.0)*r12*x2731))+(((-1.0)*r11*x2726*x2727))+(((-1.0)*x2729*x2732)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x2726*x2727))+(((-1.0)*x2728*x2732))+(((-1.0)*r02*x2731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.09829334475201)*px))+(((0.489292297647925)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.489292297647925)*px))+(((-2.09829334475201)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.09829334475201)*px))+(((0.489292297647925)*py))))+IKsqr(((((0.489292297647925)*px))+(((-2.09829334475201)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.09829334475201)*px))+(((0.489292297647925)*py))), ((((0.489292297647925)*px))+(((-2.09829334475201)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2733=IKsin(j0);
IkReal x2734=IKcos(j0);
evalcond[0]=((((0.1054)*x2734))+(((0.452)*x2733))+(((-1.0)*px)));
evalcond[1]=((((0.1054)*x2733))+(((-0.452)*x2734))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2735=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x2735;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x2735);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2736=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x2736;
j4eval[1]=IKsign(x2736);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2737=((1.0)*sj0);
IkReal x2738=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x2738;
j4eval[1]=((IKabs(((((-1.0)*r02*x2737))+((cj0*r12)))))+(IKabs((((cj0*cj5*r11))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x2737))+(((-1.0)*cj5*r01*x2737))))));
j4eval[2]=IKsign(x2738);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2739=((1.0)*sj0);
CheckValue<IkReal> x2740 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2739))+((cj0*r12)))),IkReal((((cj0*cj5*r11))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x2739))+(((-1.0)*cj5*r01*x2739)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2740.valid){
continue;
}
CheckValue<IkReal> x2741=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x2741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2740.value)+(((1.5707963267949)*(x2741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2742=IKsin(j4);
IkReal x2743=IKcos(j4);
IkReal x2744=((1.0)*cj5);
IkReal x2745=(r00*sj5);
IkReal x2746=(r10*sj5);
IkReal x2747=(r20*sj5);
IkReal x2748=((1.0)*x2742);
IkReal x2749=((1.0)*x2743);
evalcond[0]=((((-1.0)*x2747*x2748))+((r22*x2743))+(((-1.0)*r21*x2742*x2744)));
evalcond[1]=(cj0+(((-1.0)*r01*x2742*x2744))+(((-1.0)*x2745*x2748))+((r02*x2743)));
evalcond[2]=(sj0+((r12*x2743))+(((-1.0)*x2746*x2748))+(((-1.0)*r11*x2742*x2744)));
evalcond[3]=((((-1.0)*x2747*x2749))+(((-1.0)*r21*x2743*x2744))+(((-1.0)*r22*x2748)));
evalcond[4]=(sj0+(((-1.0)*x2745*x2749))+(((-1.0)*r02*x2748))+(((-1.0)*r01*x2743*x2744)));
evalcond[5]=((((-1.0)*r12*x2748))+(((-1.0)*x2746*x2749))+(((-1.0)*cj0))+(((-1.0)*r11*x2743*x2744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2750=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x2750.valid){
continue;
}
CheckValue<IkReal> x2751 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2750.value)))+(x2751.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2752=IKsin(j4);
IkReal x2753=IKcos(j4);
IkReal x2754=((1.0)*cj5);
IkReal x2755=(r00*sj5);
IkReal x2756=(r10*sj5);
IkReal x2757=(r20*sj5);
IkReal x2758=((1.0)*x2752);
IkReal x2759=((1.0)*x2753);
evalcond[0]=(((r22*x2753))+(((-1.0)*x2757*x2758))+(((-1.0)*r21*x2752*x2754)));
evalcond[1]=(cj0+(((-1.0)*r01*x2752*x2754))+(((-1.0)*x2755*x2758))+((r02*x2753)));
evalcond[2]=((((-1.0)*r11*x2752*x2754))+sj0+((r12*x2753))+(((-1.0)*x2756*x2758)));
evalcond[3]=((((-1.0)*r22*x2758))+(((-1.0)*x2757*x2759))+(((-1.0)*r21*x2753*x2754)));
evalcond[4]=(sj0+(((-1.0)*x2755*x2759))+(((-1.0)*r01*x2753*x2754))+(((-1.0)*r02*x2758)));
evalcond[5]=((((-1.0)*r11*x2753*x2754))+(((-1.0)*x2756*x2759))+(((-1.0)*r12*x2758))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2760 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2760.valid){
continue;
}
CheckValue<IkReal> x2761=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x2761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2760.value)+(((1.5707963267949)*(x2761.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2762=IKsin(j4);
IkReal x2763=IKcos(j4);
IkReal x2764=((1.0)*cj5);
IkReal x2765=(r00*sj5);
IkReal x2766=(r10*sj5);
IkReal x2767=(r20*sj5);
IkReal x2768=((1.0)*x2762);
IkReal x2769=((1.0)*x2763);
evalcond[0]=((((-1.0)*x2767*x2768))+(((-1.0)*r21*x2762*x2764))+((r22*x2763)));
evalcond[1]=(cj0+(((-1.0)*r01*x2762*x2764))+((r02*x2763))+(((-1.0)*x2765*x2768)));
evalcond[2]=(sj0+((r12*x2763))+(((-1.0)*r11*x2762*x2764))+(((-1.0)*x2766*x2768)));
evalcond[3]=((((-1.0)*r21*x2763*x2764))+(((-1.0)*x2767*x2769))+(((-1.0)*r22*x2768)));
evalcond[4]=(sj0+(((-1.0)*r01*x2763*x2764))+(((-1.0)*r02*x2768))+(((-1.0)*x2765*x2769)));
evalcond[5]=((((-1.0)*r12*x2768))+(((-1.0)*cj0))+(((-1.0)*x2766*x2769))+(((-1.0)*r11*x2763*x2764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.489292297647925)*py))+(((-2.09829334475201)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.09829334475201)*py))+(((0.489292297647925)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.489292297647925)*py))+(((-2.09829334475201)*px))))+IKsqr(((((2.09829334475201)*py))+(((0.489292297647925)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.489292297647925)*py))+(((-2.09829334475201)*px))), ((((2.09829334475201)*py))+(((0.489292297647925)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2770=IKcos(j0);
IkReal x2771=IKsin(j0);
evalcond[0]=((((-0.452)*x2771))+(((-1.0)*px))+(((0.1054)*x2770)));
evalcond[1]=((((0.452)*x2770))+(((-1.0)*py))+(((0.1054)*x2771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2772=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x2772;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x2772);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2773=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x2773;
j4eval[1]=IKsign(x2773);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2774=((1.0)*sj0);
IkReal x2775=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x2775;
j4eval[1]=((IKabs(((((-1.0)*r02*x2774))+((cj0*r12)))))+(IKabs(((((-1.0)*r00*sj5*x2774))+((cj0*cj5*r11))+(((-1.0)*cj5*r01*x2774))+((cj0*r10*sj5))))));
j4eval[2]=IKsign(x2775);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2776=((1.0)*sj0);
CheckValue<IkReal> x2777 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2776))+((cj0*r12)))),IkReal(((((-1.0)*r00*sj5*x2776))+((cj0*cj5*r11))+(((-1.0)*cj5*r01*x2776))+((cj0*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2777.valid){
continue;
}
CheckValue<IkReal> x2778=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x2778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2777.value)+(((1.5707963267949)*(x2778.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2779=IKsin(j4);
IkReal x2780=IKcos(j4);
IkReal x2781=((1.0)*cj5);
IkReal x2782=(r00*sj5);
IkReal x2783=(r10*sj5);
IkReal x2784=(r20*sj5);
IkReal x2785=((1.0)*x2779);
IkReal x2786=((1.0)*x2780);
evalcond[0]=((((-1.0)*x2784*x2785))+((r22*x2780))+(((-1.0)*r21*x2779*x2781)));
evalcond[1]=(cj0+((r02*x2780))+(((-1.0)*x2782*x2785))+(((-1.0)*r01*x2779*x2781)));
evalcond[2]=(sj0+((r12*x2780))+(((-1.0)*r11*x2779*x2781))+(((-1.0)*x2783*x2785)));
evalcond[3]=((((-1.0)*r21*x2780*x2781))+(((-1.0)*x2784*x2786))+(((-1.0)*r22*x2785)));
evalcond[4]=((((-1.0)*r12*x2785))+cj0+(((-1.0)*r11*x2780*x2781))+(((-1.0)*x2783*x2786)));
evalcond[5]=((((-1.0)*r01*x2780*x2781))+(((-1.0)*sj0))+(((-1.0)*x2782*x2786))+(((-1.0)*r02*x2785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2787=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x2787.valid){
continue;
}
CheckValue<IkReal> x2788 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2787.value)))+(x2788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2789=IKsin(j4);
IkReal x2790=IKcos(j4);
IkReal x2791=((1.0)*cj5);
IkReal x2792=(r00*sj5);
IkReal x2793=(r10*sj5);
IkReal x2794=(r20*sj5);
IkReal x2795=((1.0)*x2789);
IkReal x2796=((1.0)*x2790);
evalcond[0]=(((r22*x2790))+(((-1.0)*r21*x2789*x2791))+(((-1.0)*x2794*x2795)));
evalcond[1]=((((-1.0)*r01*x2789*x2791))+cj0+((r02*x2790))+(((-1.0)*x2792*x2795)));
evalcond[2]=((((-1.0)*r11*x2789*x2791))+sj0+((r12*x2790))+(((-1.0)*x2793*x2795)));
evalcond[3]=((((-1.0)*r21*x2790*x2791))+(((-1.0)*r22*x2795))+(((-1.0)*x2794*x2796)));
evalcond[4]=((((-1.0)*r11*x2790*x2791))+cj0+(((-1.0)*x2793*x2796))+(((-1.0)*r12*x2795)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x2792*x2796))+(((-1.0)*r01*x2790*x2791))+(((-1.0)*r02*x2795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2797 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2797.valid){
continue;
}
CheckValue<IkReal> x2798=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x2798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2797.value)+(((1.5707963267949)*(x2798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2799=IKsin(j4);
IkReal x2800=IKcos(j4);
IkReal x2801=((1.0)*cj5);
IkReal x2802=(r00*sj5);
IkReal x2803=(r10*sj5);
IkReal x2804=(r20*sj5);
IkReal x2805=((1.0)*x2799);
IkReal x2806=((1.0)*x2800);
evalcond[0]=((((-1.0)*r21*x2799*x2801))+(((-1.0)*x2804*x2805))+((r22*x2800)));
evalcond[1]=(cj0+((r02*x2800))+(((-1.0)*x2802*x2805))+(((-1.0)*r01*x2799*x2801)));
evalcond[2]=(((r12*x2800))+sj0+(((-1.0)*x2803*x2805))+(((-1.0)*r11*x2799*x2801)));
evalcond[3]=((((-1.0)*r22*x2805))+(((-1.0)*r21*x2800*x2801))+(((-1.0)*x2804*x2806)));
evalcond[4]=(cj0+(((-1.0)*x2803*x2806))+(((-1.0)*r11*x2800*x2801))+(((-1.0)*r12*x2805)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x2800*x2801))+(((-1.0)*x2802*x2806))+(((-1.0)*r02*x2805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.09135885719082)*px))+(((0.127244716314062)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.09135885719082)*py))+(((0.127244716314062)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.09135885719082)*px))+(((0.127244716314062)*py))))+IKsqr(((((1.09135885719082)*py))+(((0.127244716314062)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.09135885719082)*px))+(((0.127244716314062)*py))), ((((1.09135885719082)*py))+(((0.127244716314062)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2807=IKcos(j0);
IkReal x2808=IKsin(j0);
evalcond[0]=((((-0.904)*x2808))+(((-1.0)*px))+(((0.1054)*x2807)));
evalcond[1]=((((0.904)*x2807))+(((-1.0)*py))+(((0.1054)*x2808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2809=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x2809;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x2809);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2810=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x2810;
j4eval[1]=IKsign(x2810);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2811=((1.0)*sj0);
IkReal x2812=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x2812;
j4eval[1]=((IKabs((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x2811))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x2811)))))+(IKabs(((((-1.0)*r02*x2811))+((cj0*r12))))));
j4eval[2]=IKsign(x2812);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2813=((1.0)*sj0);
CheckValue<IkReal> x2814 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2813))+((cj0*r12)))),IkReal((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x2813))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x2813)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2814.valid){
continue;
}
CheckValue<IkReal> x2815=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x2815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2814.value)+(((1.5707963267949)*(x2815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2816=IKsin(j4);
IkReal x2817=IKcos(j4);
IkReal x2818=((1.0)*cj5);
IkReal x2819=(r00*sj5);
IkReal x2820=(r10*sj5);
IkReal x2821=(r20*sj5);
IkReal x2822=((1.0)*x2816);
IkReal x2823=((1.0)*x2817);
evalcond[0]=(((r22*x2817))+(((-1.0)*x2821*x2822))+(((-1.0)*r21*x2816*x2818)));
evalcond[1]=(cj0+((r02*x2817))+(((-1.0)*x2819*x2822))+(((-1.0)*r01*x2816*x2818)));
evalcond[2]=((((-1.0)*x2820*x2822))+sj0+(((-1.0)*r11*x2816*x2818))+((r12*x2817)));
evalcond[3]=((((-1.0)*r21*x2817*x2818))+(((-1.0)*x2821*x2823))+(((-1.0)*r22*x2822)));
evalcond[4]=((((-1.0)*x2820*x2823))+(((-1.0)*r11*x2817*x2818))+(((-1.0)*r12*x2822))+cj0);
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x2822))+(((-1.0)*x2819*x2823))+(((-1.0)*r01*x2817*x2818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2824=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x2824.valid){
continue;
}
CheckValue<IkReal> x2825 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2824.value)))+(x2825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2826=IKsin(j4);
IkReal x2827=IKcos(j4);
IkReal x2828=((1.0)*cj5);
IkReal x2829=(r00*sj5);
IkReal x2830=(r10*sj5);
IkReal x2831=(r20*sj5);
IkReal x2832=((1.0)*x2826);
IkReal x2833=((1.0)*x2827);
evalcond[0]=((((-1.0)*r21*x2826*x2828))+((r22*x2827))+(((-1.0)*x2831*x2832)));
evalcond[1]=(((r02*x2827))+cj0+(((-1.0)*r01*x2826*x2828))+(((-1.0)*x2829*x2832)));
evalcond[2]=(sj0+(((-1.0)*r11*x2826*x2828))+((r12*x2827))+(((-1.0)*x2830*x2832)));
evalcond[3]=((((-1.0)*r22*x2832))+(((-1.0)*r21*x2827*x2828))+(((-1.0)*x2831*x2833)));
evalcond[4]=(cj0+(((-1.0)*r11*x2827*x2828))+(((-1.0)*r12*x2832))+(((-1.0)*x2830*x2833)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x2827*x2828))+(((-1.0)*x2829*x2833))+(((-1.0)*r02*x2832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2834 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2834.valid){
continue;
}
CheckValue<IkReal> x2835=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x2835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2834.value)+(((1.5707963267949)*(x2835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2836=IKsin(j4);
IkReal x2837=IKcos(j4);
IkReal x2838=((1.0)*cj5);
IkReal x2839=(r00*sj5);
IkReal x2840=(r10*sj5);
IkReal x2841=(r20*sj5);
IkReal x2842=((1.0)*x2836);
IkReal x2843=((1.0)*x2837);
evalcond[0]=((((-1.0)*r21*x2836*x2838))+(((-1.0)*x2841*x2842))+((r22*x2837)));
evalcond[1]=(cj0+((r02*x2837))+(((-1.0)*x2839*x2842))+(((-1.0)*r01*x2836*x2838)));
evalcond[2]=(((r12*x2837))+sj0+(((-1.0)*x2840*x2842))+(((-1.0)*r11*x2836*x2838)));
evalcond[3]=((((-1.0)*x2841*x2843))+(((-1.0)*r22*x2842))+(((-1.0)*r21*x2837*x2838)));
evalcond[4]=(cj0+(((-1.0)*x2840*x2843))+(((-1.0)*r12*x2842))+(((-1.0)*r11*x2837*x2838)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x2837*x2838))+(((-1.0)*x2839*x2843))+(((-1.0)*r02*x2842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.4876660341556)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.4876660341556)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.4876660341556)*py))+IKsqr(((9.4876660341556)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.4876660341556)*py), ((9.4876660341556)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1054)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1054)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2844=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x2844;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x2844);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2845=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x2845;
j4eval[1]=IKsign(x2845);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2846=((1.0)*sj0);
IkReal x2847=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x2847;
j4eval[1]=((IKabs(((((-1.0)*r02*x2846))+((cj0*r12)))))+(IKabs(((((-1.0)*cj5*r01*x2846))+((cj0*cj5*r11))+(((-1.0)*r00*sj5*x2846))+((cj0*r10*sj5))))));
j4eval[2]=IKsign(x2847);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2848=((1.0)*sj0);
CheckValue<IkReal> x2849 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2848))+((cj0*r12)))),IkReal(((((-1.0)*cj5*r01*x2848))+((cj0*cj5*r11))+(((-1.0)*r00*sj5*x2848))+((cj0*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2849.valid){
continue;
}
CheckValue<IkReal> x2850=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x2850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2849.value)+(((1.5707963267949)*(x2850.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2851=IKsin(j4);
IkReal x2852=IKcos(j4);
IkReal x2853=((1.0)*cj5);
IkReal x2854=(r00*sj5);
IkReal x2855=(r10*sj5);
IkReal x2856=(r20*sj5);
IkReal x2857=((1.0)*x2851);
IkReal x2858=((1.0)*x2852);
evalcond[0]=(((r22*x2852))+(((-1.0)*x2856*x2857))+(((-1.0)*r21*x2851*x2853)));
evalcond[1]=(cj0+(((-1.0)*x2854*x2857))+((r02*x2852))+(((-1.0)*r01*x2851*x2853)));
evalcond[2]=(sj0+((r12*x2852))+(((-1.0)*r11*x2851*x2853))+(((-1.0)*x2855*x2857)));
evalcond[3]=((((-1.0)*x2856*x2858))+(((-1.0)*r21*x2852*x2853))+(((-1.0)*r22*x2857)));
evalcond[4]=(sj0+(((-1.0)*r01*x2852*x2853))+(((-1.0)*r02*x2857))+(((-1.0)*x2854*x2858)));
evalcond[5]=((((-1.0)*r12*x2857))+(((-1.0)*r11*x2852*x2853))+(((-1.0)*x2855*x2858))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2859=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x2859.valid){
continue;
}
CheckValue<IkReal> x2860 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2859.value)))+(x2860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2861=IKsin(j4);
IkReal x2862=IKcos(j4);
IkReal x2863=((1.0)*cj5);
IkReal x2864=(r00*sj5);
IkReal x2865=(r10*sj5);
IkReal x2866=(r20*sj5);
IkReal x2867=((1.0)*x2861);
IkReal x2868=((1.0)*x2862);
evalcond[0]=((((-1.0)*r21*x2861*x2863))+((r22*x2862))+(((-1.0)*x2866*x2867)));
evalcond[1]=(cj0+(((-1.0)*x2864*x2867))+((r02*x2862))+(((-1.0)*r01*x2861*x2863)));
evalcond[2]=((((-1.0)*r11*x2861*x2863))+sj0+(((-1.0)*x2865*x2867))+((r12*x2862)));
evalcond[3]=((((-1.0)*r21*x2862*x2863))+(((-1.0)*r22*x2867))+(((-1.0)*x2866*x2868)));
evalcond[4]=((((-1.0)*r02*x2867))+sj0+(((-1.0)*x2864*x2868))+(((-1.0)*r01*x2862*x2863)));
evalcond[5]=((((-1.0)*r12*x2867))+(((-1.0)*r11*x2862*x2863))+(((-1.0)*x2865*x2868))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2869 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2869.valid){
continue;
}
CheckValue<IkReal> x2870=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x2870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2869.value)+(((1.5707963267949)*(x2870.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2871=IKsin(j4);
IkReal x2872=IKcos(j4);
IkReal x2873=((1.0)*cj5);
IkReal x2874=(r00*sj5);
IkReal x2875=(r10*sj5);
IkReal x2876=(r20*sj5);
IkReal x2877=((1.0)*x2871);
IkReal x2878=((1.0)*x2872);
evalcond[0]=(((r22*x2872))+(((-1.0)*x2876*x2877))+(((-1.0)*r21*x2871*x2873)));
evalcond[1]=(cj0+(((-1.0)*r01*x2871*x2873))+((r02*x2872))+(((-1.0)*x2874*x2877)));
evalcond[2]=(sj0+(((-1.0)*r11*x2871*x2873))+((r12*x2872))+(((-1.0)*x2875*x2877)));
evalcond[3]=((((-1.0)*r21*x2872*x2873))+(((-1.0)*x2876*x2878))+(((-1.0)*r22*x2877)));
evalcond[4]=((((-1.0)*r01*x2872*x2873))+sj0+(((-1.0)*r02*x2877))+(((-1.0)*x2874*x2878)));
evalcond[5]=((((-1.0)*r11*x2872*x2873))+(((-1.0)*x2875*x2878))+(((-1.0)*r12*x2877))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2879=(sj1*sj2);
IkReal x2880=(cj5*r00);
IkReal x2881=((5000.0)*px);
IkReal x2882=(r01*sj5);
IkReal x2883=(cj1*cj2);
IkReal x2884=((2260.0)*sj1);
IkReal x2885=((2260.0)*cj1*sj2);
CheckValue<IkReal> x2886=IKPowWithIntegerCheck((x2883+x2879),-1);
if(!x2886.valid){
continue;
}
CheckValue<IkReal> x2887=IKPowWithIntegerCheck(((((527.0)*x2883))+(((527.0)*x2879))),-1);
if(!x2887.valid){
continue;
}
if( IKabs(((x2886.value)*(((((-1.0)*x2882))+x2880)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2887.value)*(((((-1.0)*x2882*x2885))+((x2880*x2885))+(((-567.5)*x2882*x2883))+((x2879*x2881))+((x2881*x2883))+((cj2*x2882*x2884))+(((-1.0)*cj2*x2880*x2884))+(((-1.0)*x2880*x2884))+((x2882*x2884))+(((567.5)*x2879*x2880))+(((567.5)*x2880*x2883))+(((-567.5)*x2879*x2882)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2886.value)*(((((-1.0)*x2882))+x2880))))+IKsqr(((x2887.value)*(((((-1.0)*x2882*x2885))+((x2880*x2885))+(((-567.5)*x2882*x2883))+((x2879*x2881))+((x2881*x2883))+((cj2*x2882*x2884))+(((-1.0)*cj2*x2880*x2884))+(((-1.0)*x2880*x2884))+((x2882*x2884))+(((567.5)*x2879*x2880))+(((567.5)*x2880*x2883))+(((-567.5)*x2879*x2882))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x2886.value)*(((((-1.0)*x2882))+x2880))), ((x2887.value)*(((((-1.0)*x2882*x2885))+((x2880*x2885))+(((-567.5)*x2882*x2883))+((x2879*x2881))+((x2881*x2883))+((cj2*x2882*x2884))+(((-1.0)*cj2*x2880*x2884))+(((-1.0)*x2880*x2884))+((x2882*x2884))+(((567.5)*x2879*x2880))+(((567.5)*x2880*x2883))+(((-567.5)*x2879*x2882))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2888=IKsin(j0);
IkReal x2889=IKcos(j0);
IkReal x2890=((1.0)*cj5);
IkReal x2891=((0.1135)*cj5);
IkReal x2892=(r11*sj5);
IkReal x2893=((0.452)*cj2);
IkReal x2894=((0.452)*sj2);
IkReal x2895=(r01*sj5);
IkReal x2896=(cj1*x2888);
IkReal x2897=(sj1*x2889);
IkReal x2898=(cj1*x2889);
IkReal x2899=(sj1*x2888);
evalcond[0]=(((sj2*x2899))+((cj2*x2896))+(((-1.0)*r00*x2890))+x2895);
evalcond[1]=((((-1.0)*sj2*x2897))+x2892+(((-1.0)*cj2*x2898))+(((-1.0)*r10*x2890)));
evalcond[2]=((((0.1054)*x2889))+(((0.1135)*x2895))+((x2893*x2899))+(((-1.0)*px))+(((-1.0)*r00*x2891))+(((-1.0)*x2894*x2896))+(((0.452)*x2899)));
evalcond[3]=((((-0.452)*x2897))+(((0.1054)*x2888))+(((0.1135)*x2892))+(((-1.0)*x2893*x2897))+(((-1.0)*py))+((x2894*x2898))+(((-1.0)*r10*x2891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2900=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x2900;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x2900);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2901=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x2901;
j4eval[1]=IKsign(x2901);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2902=((1.0)*sj0);
IkReal x2903=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x2903;
j4eval[1]=((IKabs(((((-1.0)*r00*sj5*x2902))+((cj0*cj5*r11))+(((-1.0)*cj5*r01*x2902))+((cj0*r10*sj5)))))+(IKabs(((((-1.0)*r02*x2902))+((cj0*r12))))));
j4eval[2]=IKsign(x2903);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2904=((-1.0)*r21);
IkReal x2906 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2906)==0){
continue;
}
IkReal x2905=pow(x2906,-0.5);
CheckValue<IkReal> x2907 = IKatan2WithCheck(IkReal(r20),IkReal(x2904),IKFAST_ATAN2_MAGTHRESH);
if(!x2907.valid){
continue;
}
IkReal gconst96=((-1.0)*(x2907.value));
IkReal gconst97=((-1.0)*r20*x2905);
IkReal gconst98=(x2904*x2905);
CheckValue<IkReal> x2908 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2908.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2908.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2909=((-1.0)*r21);
CheckValue<IkReal> x2912 = IKatan2WithCheck(IkReal(r20),IkReal(x2909),IKFAST_ATAN2_MAGTHRESH);
if(!x2912.valid){
continue;
}
IkReal x2910=((-1.0)*(x2912.value));
IkReal x2911=x2905;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x2910;
IkReal gconst96=x2910;
IkReal gconst97=((-1.0)*r20*x2911);
IkReal gconst98=(x2909*x2911);
IkReal x2913=r22*r22;
IkReal x2914=((1.0)*x2913);
CheckValue<IkReal> x2918=IKPowWithIntegerCheck(((-1.0)+x2913),-1);
if(!x2918.valid){
continue;
}
IkReal x2915=x2918.value;
if((((1.0)+(((-1.0)*x2914)))) < -0.00001)
continue;
IkReal x2916=IKsqrt(((1.0)+(((-1.0)*x2914))));
IkReal x2917=(cj0*x2915*x2916);
j4eval[0]=((IKabs(((((-1.0)*x2914*x2917))+x2917)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2919=((-1.0)*r21);
CheckValue<IkReal> x2922 = IKatan2WithCheck(IkReal(r20),IkReal(x2919),IKFAST_ATAN2_MAGTHRESH);
if(!x2922.valid){
continue;
}
IkReal x2920=((-1.0)*(x2922.value));
IkReal x2921=x2905;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x2920;
IkReal gconst96=x2920;
IkReal gconst97=((-1.0)*r20*x2921);
IkReal gconst98=(x2919*x2921);
IkReal x2923=r22*r22;
IkReal x2924=((1.0)*x2923);
CheckValue<IkReal> x2928=IKPowWithIntegerCheck(((-1.0)+x2923),-1);
if(!x2928.valid){
continue;
}
IkReal x2925=x2928.value;
if((((1.0)+(((-1.0)*x2924)))) < -0.00001)
continue;
IkReal x2926=IKsqrt(((1.0)+(((-1.0)*x2924))));
IkReal x2927=(sj0*x2925*x2926);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x2924*x2927))+x2927))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2929=((-1.0)*r21);
CheckValue<IkReal> x2932 = IKatan2WithCheck(IkReal(r20),IkReal(x2929),IKFAST_ATAN2_MAGTHRESH);
if(!x2932.valid){
continue;
}
IkReal x2930=((-1.0)*(x2932.value));
IkReal x2931=x2905;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x2930;
IkReal gconst96=x2930;
IkReal gconst97=((-1.0)*r20*x2931);
IkReal gconst98=(x2929*x2931);
IkReal x2933=r22*r22;
CheckValue<IkReal> x2936=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2933))),-1);
if(!x2936.valid){
continue;
}
IkReal x2934=x2936.value;
IkReal x2935=((((2.0)*x2934*(r20*r20)*(r21*r21)))+((x2934*(r20*r20*r20*r20)))+((x2934*(r21*r21*r21*r21)))+x2933);
j4eval[0]=x2935;
j4eval[1]=IKsign(x2935);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2937=(gconst97*r20);
IkReal x2938=(cj1*cj2);
IkReal x2939=(sj1*sj2);
IkReal x2940=(gconst98*r21);
CheckValue<IkReal> x2941=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2937*x2937)+(x2940*x2940)+(((2.0)*x2937*x2940)))),-1);
if(!x2941.valid){
continue;
}
CheckValue<IkReal> x2942 = IKatan2WithCheck(IkReal((((r22*x2938))+((r22*x2939)))),IkReal((((x2939*x2940))+((x2937*x2938))+((x2937*x2939))+((x2938*x2940)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2941.value)))+(x2942.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2943=IKsin(j4);
IkReal x2944=IKcos(j4);
IkReal x2945=(cj2*sj1);
IkReal x2946=(gconst98*r11);
IkReal x2947=(gconst97*r00);
IkReal x2948=(gconst97*r10);
IkReal x2949=(gconst97*r20);
IkReal x2950=(gconst98*r21);
IkReal x2951=(gconst98*r01);
IkReal x2952=(cj1*sj2);
IkReal x2953=((1.0)*x2943);
IkReal x2954=((1.0)*x2944);
evalcond[0]=(((r22*x2944))+(((-1.0)*x2949*x2953))+(((-1.0)*x2950*x2953)));
evalcond[1]=((((-1.0)*x2947*x2953))+cj0+((r02*x2944))+(((-1.0)*x2951*x2953)));
evalcond[2]=((((-1.0)*x2948*x2953))+sj0+((r12*x2944))+(((-1.0)*x2946*x2953)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2949*x2954))+(((-1.0)*r22*x2953))+(((-1.0)*x2950*x2954))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x2947*x2954))+(((-1.0)*r02*x2953))+(((-1.0)*sj0*x2952))+(((-1.0)*x2951*x2954))+((sj0*x2945)));
evalcond[5]=((((-1.0)*x2948*x2954))+(((-1.0)*cj0*x2945))+((cj0*x2952))+(((-1.0)*r12*x2953))+(((-1.0)*x2946*x2954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2955 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r20*sj0))+((gconst98*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2955.valid){
continue;
}
CheckValue<IkReal> x2956=IKPowWithIntegerCheck(IKsign((((gconst98*r00))+(((-1.0)*gconst97*r01)))),-1);
if(!x2956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2955.value)+(((1.5707963267949)*(x2956.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2957=IKsin(j4);
IkReal x2958=IKcos(j4);
IkReal x2959=(cj2*sj1);
IkReal x2960=(gconst98*r11);
IkReal x2961=(gconst97*r00);
IkReal x2962=(gconst97*r10);
IkReal x2963=(gconst97*r20);
IkReal x2964=(gconst98*r21);
IkReal x2965=(gconst98*r01);
IkReal x2966=(cj1*sj2);
IkReal x2967=((1.0)*x2957);
IkReal x2968=((1.0)*x2958);
evalcond[0]=((((-1.0)*x2963*x2967))+((r22*x2958))+(((-1.0)*x2964*x2967)));
evalcond[1]=(cj0+(((-1.0)*x2965*x2967))+(((-1.0)*x2961*x2967))+((r02*x2958)));
evalcond[2]=(sj0+(((-1.0)*x2962*x2967))+(((-1.0)*x2960*x2967))+((r12*x2958)));
evalcond[3]=((((-1.0)*x2963*x2968))+((sj1*sj2))+(((-1.0)*r22*x2967))+(((-1.0)*x2964*x2968))+((cj1*cj2)));
evalcond[4]=(((sj0*x2959))+(((-1.0)*sj0*x2966))+(((-1.0)*x2965*x2968))+(((-1.0)*r02*x2967))+(((-1.0)*x2961*x2968)));
evalcond[5]=((((-1.0)*cj0*x2959))+((cj0*x2966))+(((-1.0)*x2962*x2968))+(((-1.0)*x2960*x2968))+(((-1.0)*r12*x2967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2969 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst98*r21))+((cj0*gconst97*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2969.valid){
continue;
}
CheckValue<IkReal> x2970=IKPowWithIntegerCheck(IKsign((((gconst97*r11))+(((-1.0)*gconst98*r10)))),-1);
if(!x2970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2969.value)+(((1.5707963267949)*(x2970.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2971=IKsin(j4);
IkReal x2972=IKcos(j4);
IkReal x2973=(cj2*sj1);
IkReal x2974=(gconst98*r11);
IkReal x2975=(gconst97*r00);
IkReal x2976=(gconst97*r10);
IkReal x2977=(gconst97*r20);
IkReal x2978=(gconst98*r21);
IkReal x2979=(gconst98*r01);
IkReal x2980=(cj1*sj2);
IkReal x2981=((1.0)*x2971);
IkReal x2982=((1.0)*x2972);
evalcond[0]=((((-1.0)*x2977*x2981))+(((-1.0)*x2978*x2981))+((r22*x2972)));
evalcond[1]=(cj0+(((-1.0)*x2979*x2981))+((r02*x2972))+(((-1.0)*x2975*x2981)));
evalcond[2]=(sj0+(((-1.0)*x2976*x2981))+(((-1.0)*x2974*x2981))+((r12*x2972)));
evalcond[3]=((((-1.0)*x2977*x2982))+(((-1.0)*x2978*x2982))+((sj1*sj2))+(((-1.0)*r22*x2981))+((cj1*cj2)));
evalcond[4]=((((-1.0)*sj0*x2980))+(((-1.0)*x2979*x2982))+(((-1.0)*r02*x2981))+((sj0*x2973))+(((-1.0)*x2975*x2982)));
evalcond[5]=(((cj0*x2980))+(((-1.0)*x2976*x2982))+(((-1.0)*x2974*x2982))+(((-1.0)*cj0*x2973))+(((-1.0)*r12*x2981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2985 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2985)==0){
continue;
}
IkReal x2983=pow(x2985,-0.5);
IkReal x2984=((1.0)*x2983);
CheckValue<IkReal> x2986 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2986.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x2986.value))));
IkReal gconst100=(r20*x2984);
IkReal gconst101=(r21*x2984);
CheckValue<IkReal> x2987 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2987.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2987.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2991 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2991.valid){
continue;
}
IkReal x2988=((1.0)*(x2991.value));
IkReal x2989=x2983;
IkReal x2990=((1.0)*x2989);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x2988)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x2988)));
IkReal gconst100=(r20*x2990);
IkReal gconst101=(r21*x2990);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2995 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2995.valid){
continue;
}
IkReal x2992=((1.0)*(x2995.value));
IkReal x2993=x2983;
IkReal x2994=((1.0)*x2993);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x2992)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x2992)));
IkReal gconst100=(r20*x2994);
IkReal gconst101=(r21*x2994);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2999 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2999.valid){
continue;
}
IkReal x2996=((1.0)*(x2999.value));
IkReal x2997=x2983;
IkReal x2998=((1.0)*x2997);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x2996)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x2996)));
IkReal gconst100=(r20*x2998);
IkReal gconst101=(r21*x2998);
IkReal x3000=r22*r22;
IkReal x3001=(cj0*r12);
IkReal x3002=((1.0)*r02*sj0);
CheckValue<IkReal> x3006=IKPowWithIntegerCheck(((-1.0)+x3000),-1);
if(!x3006.valid){
continue;
}
IkReal x3003=x3006.value;
if((((1.0)+(((-1.0)*x3000)))) < -0.00001)
continue;
IkReal x3004=IKsqrt(((1.0)+(((-1.0)*x3000))));
IkReal x3005=(r22*x3003*x3004);
j4eval[0]=0;
j4eval[1]=((IKabs((x3001+(((-1.0)*x3002)))))+(IKabs(((((-1.0)*x3002*x3005))+((x3001*x3005))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3007=((1.0)*sj0);
CheckValue<IkReal> x3008=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r21))+((gconst101*r20)))),-1);
if(!x3008.valid){
continue;
}
CheckValue<IkReal> x3009 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3007))+((cj0*r12)))),IkReal(((((-1.0)*gconst100*r00*x3007))+((cj0*gconst101*r11))+((cj0*gconst100*r10))+(((-1.0)*gconst101*r01*x3007)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3008.value)))+(x3009.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3010=IKsin(j4);
IkReal x3011=IKcos(j4);
IkReal x3012=((1.0)*gconst100);
IkReal x3013=(cj2*sj1);
IkReal x3014=((1.0)*gconst101);
IkReal x3015=(cj1*sj2);
IkReal x3016=((1.0)*x3010);
evalcond[0]=((((-1.0)*r21*x3010*x3014))+((r22*x3011))+(((-1.0)*r20*x3010*x3012)));
evalcond[1]=(cj0+(((-1.0)*r01*x3010*x3014))+(((-1.0)*r00*x3010*x3012))+((r02*x3011)));
evalcond[2]=(sj0+(((-1.0)*r11*x3010*x3014))+((r12*x3011))+(((-1.0)*r10*x3010*x3012)));
evalcond[3]=((((-1.0)*r20*x3011*x3012))+(((-1.0)*r22*x3016))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*x3011*x3014)));
evalcond[4]=((((-1.0)*r02*x3016))+(((-1.0)*r00*x3011*x3012))+(((-1.0)*r01*x3011*x3014))+((sj0*x3013))+(((-1.0)*sj0*x3015)));
evalcond[5]=(((cj0*x3015))+(((-1.0)*r11*x3011*x3014))+(((-1.0)*r12*x3016))+(((-1.0)*r10*x3011*x3012))+(((-1.0)*cj0*x3013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3017 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst100*r20*sj0))+((gconst101*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3017.valid){
continue;
}
CheckValue<IkReal> x3018=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r01))+((gconst101*r00)))),-1);
if(!x3018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3017.value)+(((1.5707963267949)*(x3018.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3019=IKsin(j4);
IkReal x3020=IKcos(j4);
IkReal x3021=((1.0)*gconst100);
IkReal x3022=(cj2*sj1);
IkReal x3023=((1.0)*gconst101);
IkReal x3024=(cj1*sj2);
IkReal x3025=((1.0)*x3019);
evalcond[0]=((((-1.0)*r21*x3019*x3023))+(((-1.0)*r20*x3019*x3021))+((r22*x3020)));
evalcond[1]=(cj0+((r02*x3020))+(((-1.0)*r01*x3019*x3023))+(((-1.0)*r00*x3019*x3021)));
evalcond[2]=(((r12*x3020))+sj0+(((-1.0)*r10*x3019*x3021))+(((-1.0)*r11*x3019*x3023)));
evalcond[3]=((((-1.0)*r21*x3020*x3023))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r20*x3020*x3021))+(((-1.0)*r22*x3025)));
evalcond[4]=((((-1.0)*sj0*x3024))+((sj0*x3022))+(((-1.0)*r00*x3020*x3021))+(((-1.0)*r02*x3025))+(((-1.0)*r01*x3020*x3023)));
evalcond[5]=((((-1.0)*r12*x3025))+(((-1.0)*cj0*x3022))+(((-1.0)*r11*x3020*x3023))+((cj0*x3024))+(((-1.0)*r10*x3020*x3021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3026=IKPowWithIntegerCheck(IKsign((((gconst100*r11))+(((-1.0)*gconst101*r10)))),-1);
if(!x3026.valid){
continue;
}
CheckValue<IkReal> x3027 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r20))+((cj0*gconst101*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3026.value)))+(x3027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3028=IKsin(j4);
IkReal x3029=IKcos(j4);
IkReal x3030=((1.0)*gconst100);
IkReal x3031=(cj2*sj1);
IkReal x3032=((1.0)*gconst101);
IkReal x3033=(cj1*sj2);
IkReal x3034=((1.0)*x3028);
evalcond[0]=(((r22*x3029))+(((-1.0)*r20*x3028*x3030))+(((-1.0)*r21*x3028*x3032)));
evalcond[1]=(cj0+((r02*x3029))+(((-1.0)*r01*x3028*x3032))+(((-1.0)*r00*x3028*x3030)));
evalcond[2]=(((r12*x3029))+sj0+(((-1.0)*r11*x3028*x3032))+(((-1.0)*r10*x3028*x3030)));
evalcond[3]=((((-1.0)*r21*x3029*x3032))+((sj1*sj2))+(((-1.0)*r22*x3034))+((cj1*cj2))+(((-1.0)*r20*x3029*x3030)));
evalcond[4]=((((-1.0)*r01*x3029*x3032))+((sj0*x3031))+(((-1.0)*r02*x3034))+(((-1.0)*r00*x3029*x3030))+(((-1.0)*sj0*x3033)));
evalcond[5]=((((-1.0)*cj0*x3031))+(((-1.0)*r10*x3029*x3030))+((cj0*x3033))+(((-1.0)*r11*x3029*x3032))+(((-1.0)*r12*x3034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3037 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3037)==0){
continue;
}
IkReal x3035=pow(x3037,-0.5);
IkReal x3036=((-1.0)*x3035);
CheckValue<IkReal> x3038 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x3038.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3038.value));
IkReal gconst103=(r00*x3036);
IkReal gconst104=(r01*x3036);
CheckValue<IkReal> x3039 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x3039.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3039.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3043 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x3043.valid){
continue;
}
IkReal x3040=((-1.0)*(x3043.value));
IkReal x3041=x3035;
IkReal x3042=((-1.0)*x3041);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3040;
IkReal gconst102=x3040;
IkReal gconst103=(r00*x3042);
IkReal gconst104=(r01*x3042);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3044=((1.0)*sj0);
CheckValue<IkReal> x3045 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3044))+((cj0*r12)))),IkReal((((cj0*gconst103*r10))+(((-1.0)*gconst104*r01*x3044))+(((-1.0)*gconst103*r00*x3044))+((cj0*gconst104*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3045.valid){
continue;
}
CheckValue<IkReal> x3046=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r21))+((gconst104*r20)))),-1);
if(!x3046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3045.value)+(((1.5707963267949)*(x3046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3047=IKsin(j4);
IkReal x3048=IKcos(j4);
IkReal x3049=(gconst103*r20);
IkReal x3050=(gconst104*r11);
IkReal x3051=(cj2*sj1);
IkReal x3052=(gconst104*r21);
IkReal x3053=(gconst103*r10);
IkReal x3054=(gconst104*r01);
IkReal x3055=(gconst103*r00);
IkReal x3056=(cj1*sj2);
IkReal x3057=((1.0)*x3047);
IkReal x3058=((1.0)*x3048);
evalcond[0]=(((r22*x3048))+(((-1.0)*x3052*x3057))+(((-1.0)*x3049*x3057)));
evalcond[1]=((((-1.0)*x3055*x3057))+cj0+(((-1.0)*x3054*x3057))+((r02*x3048)));
evalcond[2]=(sj0+(((-1.0)*x3053*x3057))+(((-1.0)*x3050*x3057))+((r12*x3048)));
evalcond[3]=((((-1.0)*x3052*x3058))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x3057))+(((-1.0)*x3049*x3058)));
evalcond[4]=((((-1.0)*x3055*x3058))+((sj0*x3051))+(((-1.0)*r02*x3057))+(((-1.0)*x3054*x3058))+(((-1.0)*sj0*x3056)));
evalcond[5]=((((-1.0)*cj0*x3051))+(((-1.0)*x3053*x3058))+((cj0*x3056))+(((-1.0)*x3050*x3058))+(((-1.0)*r12*x3057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3059 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst104*r21))+((cj0*gconst103*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3059.valid){
continue;
}
CheckValue<IkReal> x3060=IKPowWithIntegerCheck(IKsign((((gconst103*r11))+(((-1.0)*gconst104*r10)))),-1);
if(!x3060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3059.value)+(((1.5707963267949)*(x3060.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3061=IKsin(j4);
IkReal x3062=IKcos(j4);
IkReal x3063=(gconst103*r20);
IkReal x3064=(gconst104*r11);
IkReal x3065=(cj2*sj1);
IkReal x3066=(gconst104*r21);
IkReal x3067=(gconst103*r10);
IkReal x3068=(gconst104*r01);
IkReal x3069=(gconst103*r00);
IkReal x3070=(cj1*sj2);
IkReal x3071=((1.0)*x3061);
IkReal x3072=((1.0)*x3062);
evalcond[0]=(((r22*x3062))+(((-1.0)*x3066*x3071))+(((-1.0)*x3063*x3071)));
evalcond[1]=(cj0+(((-1.0)*x3069*x3071))+((r02*x3062))+(((-1.0)*x3068*x3071)));
evalcond[2]=(sj0+(((-1.0)*x3067*x3071))+(((-1.0)*x3064*x3071))+((r12*x3062)));
evalcond[3]=((((-1.0)*r22*x3071))+(((-1.0)*x3066*x3072))+(((-1.0)*x3063*x3072))+((sj1*sj2))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*x3071))+(((-1.0)*x3069*x3072))+((sj0*x3065))+(((-1.0)*x3068*x3072))+(((-1.0)*sj0*x3070)));
evalcond[5]=(((cj0*x3070))+(((-1.0)*cj0*x3065))+(((-1.0)*x3067*x3072))+(((-1.0)*r12*x3071))+(((-1.0)*x3064*x3072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3075 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3075)==0){
continue;
}
IkReal x3073=pow(x3075,-0.5);
IkReal x3074=((1.0)*x3073);
CheckValue<IkReal> x3076 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x3076.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3076.value))));
IkReal gconst106=(r00*x3074);
IkReal gconst107=(r01*x3074);
CheckValue<IkReal> x3077 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x3077.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3077.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3081 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x3081.valid){
continue;
}
IkReal x3078=((1.0)*(x3081.value));
IkReal x3079=x3073;
IkReal x3080=((1.0)*x3079);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3078)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3078)));
IkReal gconst106=(r00*x3080);
IkReal gconst107=(r01*x3080);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x3085 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x3085.valid){
continue;
}
IkReal x3082=((1.0)*(x3085.value));
IkReal x3083=x3073;
IkReal x3084=((1.0)*x3083);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3082)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3082)));
IkReal gconst106=(r00*x3084);
IkReal gconst107=(r01*x3084);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3089 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x3089.valid){
continue;
}
IkReal x3086=((1.0)*(x3089.value));
IkReal x3087=x3073;
IkReal x3088=((1.0)*x3087);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3086)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3086)));
IkReal gconst106=(r00*x3088);
IkReal gconst107=(r01*x3088);
IkReal x3090=r02*r02;
IkReal x3091=((1.0)*sj0);
IkReal x3092=(cj0*r12);
CheckValue<IkReal> x3096=IKPowWithIntegerCheck(((-1.0)+x3090),-1);
if(!x3096.valid){
continue;
}
IkReal x3093=x3096.value;
if((((1.0)+(((-1.0)*x3090)))) < -0.00001)
continue;
IkReal x3094=IKsqrt(((1.0)+(((-1.0)*x3090))));
IkReal x3095=(x3093*x3094);
j4eval[0]=((IKabs(((((-1.0)*r02*x3091))+x3092)))+(IKabs((((r02*x3092*x3095))+((sj0*x3095))+(((-1.0)*x3090*x3091*x3095))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3097=((1.0)*sj0);
CheckValue<IkReal> x3098 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3097))+((cj0*r12)))),IkReal(((((-1.0)*gconst106*r00*x3097))+((cj0*gconst106*r10))+(((-1.0)*gconst107*r01*x3097))+((cj0*gconst107*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3098.valid){
continue;
}
CheckValue<IkReal> x3099=IKPowWithIntegerCheck(IKsign((((gconst107*r20))+(((-1.0)*gconst106*r21)))),-1);
if(!x3099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3098.value)+(((1.5707963267949)*(x3099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3100=IKsin(j4);
IkReal x3101=IKcos(j4);
IkReal x3102=(gconst107*r11);
IkReal x3103=(cj2*sj1);
IkReal x3104=(gconst107*r01);
IkReal x3105=(gconst107*r21);
IkReal x3106=(cj1*sj2);
IkReal x3107=((1.0)*x3101);
IkReal x3108=((1.0)*x3100);
IkReal x3109=(gconst106*x3108);
evalcond[0]=((((-1.0)*r20*x3109))+((r22*x3101))+(((-1.0)*x3105*x3108)));
evalcond[1]=(cj0+(((-1.0)*r00*x3109))+((r02*x3101))+(((-1.0)*x3104*x3108)));
evalcond[2]=(sj0+(((-1.0)*r10*x3109))+(((-1.0)*x3102*x3108))+((r12*x3101)));
evalcond[3]=((((-1.0)*gconst106*r20*x3107))+((sj1*sj2))+(((-1.0)*x3105*x3107))+((cj1*cj2))+(((-1.0)*r22*x3108)));
evalcond[4]=(((sj0*x3103))+(((-1.0)*gconst106*r00*x3107))+(((-1.0)*sj0*x3106))+(((-1.0)*x3104*x3107))+(((-1.0)*r02*x3108)));
evalcond[5]=((((-1.0)*r12*x3108))+(((-1.0)*x3102*x3107))+((cj0*x3106))+(((-1.0)*cj0*x3103))+(((-1.0)*gconst106*r10*x3107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3110 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst107*r21*sj0))+((gconst106*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3110.valid){
continue;
}
CheckValue<IkReal> x3111=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r01))+((gconst107*r00)))),-1);
if(!x3111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3110.value)+(((1.5707963267949)*(x3111.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3112=IKsin(j4);
IkReal x3113=IKcos(j4);
IkReal x3114=(gconst107*r11);
IkReal x3115=(cj2*sj1);
IkReal x3116=(gconst107*r01);
IkReal x3117=(gconst107*r21);
IkReal x3118=(cj1*sj2);
IkReal x3119=((1.0)*x3113);
IkReal x3120=((1.0)*x3112);
IkReal x3121=(gconst106*x3120);
evalcond[0]=((((-1.0)*r20*x3121))+(((-1.0)*x3117*x3120))+((r22*x3113)));
evalcond[1]=(cj0+(((-1.0)*x3116*x3120))+((r02*x3113))+(((-1.0)*r00*x3121)));
evalcond[2]=(((r12*x3113))+sj0+(((-1.0)*x3114*x3120))+(((-1.0)*r10*x3121)));
evalcond[3]=((((-1.0)*x3117*x3119))+(((-1.0)*gconst106*r20*x3119))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x3120)));
evalcond[4]=((((-1.0)*gconst106*r00*x3119))+(((-1.0)*r02*x3120))+((sj0*x3115))+(((-1.0)*sj0*x3118))+(((-1.0)*x3116*x3119)));
evalcond[5]=((((-1.0)*x3114*x3119))+(((-1.0)*cj0*x3115))+(((-1.0)*r12*x3120))+((cj0*x3118))+(((-1.0)*gconst106*r10*x3119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3122=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r10))+((gconst106*r11)))),-1);
if(!x3122.valid){
continue;
}
CheckValue<IkReal> x3123 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst107*r21))+((cj0*gconst106*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3122.value)))+(x3123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3124=IKsin(j4);
IkReal x3125=IKcos(j4);
IkReal x3126=(gconst107*r11);
IkReal x3127=(cj2*sj1);
IkReal x3128=(gconst107*r01);
IkReal x3129=(gconst107*r21);
IkReal x3130=(cj1*sj2);
IkReal x3131=((1.0)*x3125);
IkReal x3132=((1.0)*x3124);
IkReal x3133=(gconst106*x3132);
evalcond[0]=((((-1.0)*r20*x3133))+((r22*x3125))+(((-1.0)*x3129*x3132)));
evalcond[1]=(cj0+((r02*x3125))+(((-1.0)*x3128*x3132))+(((-1.0)*r00*x3133)));
evalcond[2]=(sj0+(((-1.0)*r10*x3133))+((r12*x3125))+(((-1.0)*x3126*x3132)));
evalcond[3]=(((sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x3132))+(((-1.0)*x3129*x3131))+(((-1.0)*gconst106*r20*x3131)));
evalcond[4]=((((-1.0)*r02*x3132))+(((-1.0)*gconst106*r00*x3131))+(((-1.0)*x3128*x3131))+(((-1.0)*sj0*x3130))+((sj0*x3127)));
evalcond[5]=((((-1.0)*cj0*x3127))+(((-1.0)*gconst106*r10*x3131))+(((-1.0)*r12*x3132))+(((-1.0)*x3126*x3131))+((cj0*x3130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3134=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x3134;
j4eval[1]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3134);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3135=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x3135;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x3135);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3136=cj5*cj5;
IkReal x3137=r00*r00;
IkReal x3138=(cj5*r01);
IkReal x3139=(r00*sj5);
IkReal x3140=((((-1.0)*x3136*(r01*r01)))+(((-1.0)*(r02*r02)))+(((-1.0)*x3137))+(((-2.0)*x3138*x3139))+((x3136*x3137)));
j4eval[0]=x3140;
j4eval[1]=IKsign(x3140);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x3139))+(((-1.0)*x3138))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3141=cj5*cj5;
IkReal x3142=r00*r00;
IkReal x3143=(cj5*r01);
IkReal x3144=(r00*sj5);
CheckValue<IkReal> x3145 = IKatan2WithCheck(IkReal(((((-1.0)*x3143))+(((-1.0)*x3144)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3145.valid){
continue;
}
CheckValue<IkReal> x3146=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3142))+(((-1.0)*x3141*(r01*r01)))+(((-1.0)*(r02*r02)))+(((-2.0)*x3143*x3144))+((x3141*x3142)))),-1);
if(!x3146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3145.value)+(((1.5707963267949)*(x3146.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3147=IKsin(j4);
IkReal x3148=IKcos(j4);
IkReal x3149=(r00*sj5);
IkReal x3150=(cj5*r01);
IkReal x3151=(r20*sj5);
IkReal x3152=(cj5*r21);
IkReal x3153=(cj5*r11);
IkReal x3154=(r10*sj5);
IkReal x3155=((1.0)*x3147);
IkReal x3156=((1.0)*x3148);
evalcond[0]=(((r22*x3148))+(((-1.0)*x3152*x3155))+(((-1.0)*x3151*x3155)));
evalcond[1]=((((-1.0)*x3153*x3155))+((r12*x3148))+(((-1.0)*x3154*x3155)));
evalcond[2]=((1.0)+((r02*x3148))+(((-1.0)*x3150*x3155))+(((-1.0)*x3149*x3155)));
evalcond[3]=((((-1.0)*x3150*x3156))+(((-1.0)*x3149*x3156))+(((-1.0)*r02*x3155)));
evalcond[4]=((((-1.0)*r22*x3155))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x3152*x3156))+(((-1.0)*x3151*x3156)));
evalcond[5]=((((-1.0)*x3153*x3156))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x3154*x3156))+(((-1.0)*r12*x3155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3157 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3157.valid){
continue;
}
CheckValue<IkReal> x3158=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x3158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3157.value)+(((1.5707963267949)*(x3158.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3159=IKsin(j4);
IkReal x3160=IKcos(j4);
IkReal x3161=(r00*sj5);
IkReal x3162=(cj5*r01);
IkReal x3163=(r20*sj5);
IkReal x3164=(cj5*r21);
IkReal x3165=(cj5*r11);
IkReal x3166=(r10*sj5);
IkReal x3167=((1.0)*x3159);
IkReal x3168=((1.0)*x3160);
evalcond[0]=(((r22*x3160))+(((-1.0)*x3163*x3167))+(((-1.0)*x3164*x3167)));
evalcond[1]=((((-1.0)*x3165*x3167))+((r12*x3160))+(((-1.0)*x3166*x3167)));
evalcond[2]=((1.0)+((r02*x3160))+(((-1.0)*x3161*x3167))+(((-1.0)*x3162*x3167)));
evalcond[3]=((((-1.0)*x3161*x3168))+(((-1.0)*x3162*x3168))+(((-1.0)*r02*x3167)));
evalcond[4]=((((-1.0)*x3163*x3168))+(((-1.0)*x3164*x3168))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x3167)));
evalcond[5]=((((-1.0)*r12*x3167))+(((-1.0)*x3165*x3168))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x3166*x3168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3169 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3169.valid){
continue;
}
CheckValue<IkReal> x3170=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x3170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3169.value)+(((1.5707963267949)*(x3170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3171=IKsin(j4);
IkReal x3172=IKcos(j4);
IkReal x3173=(r00*sj5);
IkReal x3174=(cj5*r01);
IkReal x3175=(r20*sj5);
IkReal x3176=(cj5*r21);
IkReal x3177=(cj5*r11);
IkReal x3178=(r10*sj5);
IkReal x3179=((1.0)*x3171);
IkReal x3180=((1.0)*x3172);
evalcond[0]=(((r22*x3172))+(((-1.0)*x3176*x3179))+(((-1.0)*x3175*x3179)));
evalcond[1]=((((-1.0)*x3177*x3179))+(((-1.0)*x3178*x3179))+((r12*x3172)));
evalcond[2]=((1.0)+(((-1.0)*x3174*x3179))+((r02*x3172))+(((-1.0)*x3173*x3179)));
evalcond[3]=((((-1.0)*x3174*x3180))+(((-1.0)*r02*x3179))+(((-1.0)*x3173*x3180)));
evalcond[4]=((((-1.0)*x3176*x3180))+((sj1*sj2))+(((-1.0)*x3175*x3180))+((cj1*cj2))+(((-1.0)*r22*x3179)));
evalcond[5]=((((-1.0)*x3177*x3180))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x3179))+(((-1.0)*x3178*x3180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3181=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x3181;
j4eval[1]=IKsign(x3181);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3182=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x3182;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x3182);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3183=cj5*cj5;
IkReal x3184=r00*r00;
IkReal x3185=(r00*sj5);
IkReal x3186=(cj5*r01);
IkReal x3187=(x3184+((x3183*(r01*r01)))+(((-1.0)*x3183*x3184))+(r02*r02)+(((2.0)*x3185*x3186)));
j4eval[0]=x3187;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x3186))+(((-1.0)*x3185))))));
j4eval[2]=IKsign(x3187);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3188=cj5*cj5;
IkReal x3189=r00*r00;
IkReal x3190=(r00*sj5);
IkReal x3191=(cj5*r01);
CheckValue<IkReal> x3192=IKPowWithIntegerCheck(IKsign((x3189+((x3188*(r01*r01)))+(((2.0)*x3190*x3191))+(r02*r02)+(((-1.0)*x3188*x3189)))),-1);
if(!x3192.valid){
continue;
}
CheckValue<IkReal> x3193 = IKatan2WithCheck(IkReal(((((-1.0)*x3191))+(((-1.0)*x3190)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3192.value)))+(x3193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3194=IKsin(j4);
IkReal x3195=IKcos(j4);
IkReal x3196=(r00*sj5);
IkReal x3197=(cj5*r01);
IkReal x3198=(r20*sj5);
IkReal x3199=(cj5*r21);
IkReal x3200=(cj5*r11);
IkReal x3201=(r10*sj5);
IkReal x3202=((1.0)*x3194);
IkReal x3203=((1.0)*x3195);
evalcond[0]=((((-1.0)*x3199*x3202))+((r22*x3195))+(((-1.0)*x3198*x3202)));
evalcond[1]=((((-1.0)*x3200*x3202))+(((-1.0)*x3201*x3202))+((r12*x3195)));
evalcond[2]=((-1.0)+(((-1.0)*x3196*x3202))+(((-1.0)*x3197*x3202))+((r02*x3195)));
evalcond[3]=((((-1.0)*x3196*x3203))+(((-1.0)*r02*x3202))+(((-1.0)*x3197*x3203)));
evalcond[4]=((((-1.0)*x3199*x3203))+((sj1*sj2))+(((-1.0)*r22*x3202))+((cj1*cj2))+(((-1.0)*x3198*x3203)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x3200*x3203))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3202))+(((-1.0)*x3201*x3203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3204 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3204.valid){
continue;
}
CheckValue<IkReal> x3205=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x3205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3204.value)+(((1.5707963267949)*(x3205.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3206=IKsin(j4);
IkReal x3207=IKcos(j4);
IkReal x3208=(r00*sj5);
IkReal x3209=(cj5*r01);
IkReal x3210=(r20*sj5);
IkReal x3211=(cj5*r21);
IkReal x3212=(cj5*r11);
IkReal x3213=(r10*sj5);
IkReal x3214=((1.0)*x3206);
IkReal x3215=((1.0)*x3207);
evalcond[0]=((((-1.0)*x3211*x3214))+((r22*x3207))+(((-1.0)*x3210*x3214)));
evalcond[1]=(((r12*x3207))+(((-1.0)*x3212*x3214))+(((-1.0)*x3213*x3214)));
evalcond[2]=((-1.0)+(((-1.0)*x3209*x3214))+(((-1.0)*x3208*x3214))+((r02*x3207)));
evalcond[3]=((((-1.0)*x3209*x3215))+(((-1.0)*x3208*x3215))+(((-1.0)*r02*x3214)));
evalcond[4]=((((-1.0)*x3211*x3215))+((sj1*sj2))+(((-1.0)*x3210*x3215))+((cj1*cj2))+(((-1.0)*r22*x3214)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x3212*x3215))+(((-1.0)*r12*x3214))+(((-1.0)*x3213*x3215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3216 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3216.valid){
continue;
}
CheckValue<IkReal> x3217=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x3217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3216.value)+(((1.5707963267949)*(x3217.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3218=IKsin(j4);
IkReal x3219=IKcos(j4);
IkReal x3220=(r00*sj5);
IkReal x3221=(cj5*r01);
IkReal x3222=(r20*sj5);
IkReal x3223=(cj5*r21);
IkReal x3224=(cj5*r11);
IkReal x3225=(r10*sj5);
IkReal x3226=((1.0)*x3218);
IkReal x3227=((1.0)*x3219);
evalcond[0]=(((r22*x3219))+(((-1.0)*x3222*x3226))+(((-1.0)*x3223*x3226)));
evalcond[1]=(((r12*x3219))+(((-1.0)*x3225*x3226))+(((-1.0)*x3224*x3226)));
evalcond[2]=((-1.0)+(((-1.0)*x3220*x3226))+(((-1.0)*x3221*x3226))+((r02*x3219)));
evalcond[3]=((((-1.0)*r02*x3226))+(((-1.0)*x3220*x3227))+(((-1.0)*x3221*x3227)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x3226))+((cj1*cj2))+(((-1.0)*x3222*x3227))+(((-1.0)*x3223*x3227)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x3225*x3227))+(((-1.0)*x3224*x3227))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3229 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3229)==0){
continue;
}
IkReal x3228=pow(x3229,-0.5);
CheckValue<IkReal> x3230 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3230.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3230.value));
IkReal gconst109=(r10*x3228);
IkReal gconst110=(r11*x3228);
CheckValue<IkReal> x3231 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3231.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3231.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3234 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3234.valid){
continue;
}
IkReal x3232=((-1.0)*(x3234.value));
IkReal x3233=x3228;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3232;
IkReal gconst108=x3232;
IkReal gconst109=(r10*x3233);
IkReal gconst110=(r11*x3233);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3235=((1.0)*sj0);
CheckValue<IkReal> x3236 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3235))+((cj0*r12)))),IkReal((((cj0*gconst109*r10))+((cj0*gconst110*r11))+(((-1.0)*gconst110*r01*x3235))+(((-1.0)*gconst109*r00*x3235)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3236.valid){
continue;
}
CheckValue<IkReal> x3237=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r21))+((gconst110*r20)))),-1);
if(!x3237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3236.value)+(((1.5707963267949)*(x3237.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3238=IKsin(j4);
IkReal x3239=IKcos(j4);
IkReal x3240=(cj2*sj1);
IkReal x3241=(gconst110*r11);
IkReal x3242=(gconst109*r00);
IkReal x3243=(gconst109*r20);
IkReal x3244=(gconst110*r21);
IkReal x3245=(gconst110*r01);
IkReal x3246=(gconst109*r10);
IkReal x3247=(cj1*sj2);
IkReal x3248=((1.0)*x3238);
IkReal x3249=((1.0)*x3239);
evalcond[0]=((((-1.0)*x3243*x3248))+((r22*x3239))+(((-1.0)*x3244*x3248)));
evalcond[1]=(cj0+(((-1.0)*x3245*x3248))+(((-1.0)*x3242*x3248))+((r02*x3239)));
evalcond[2]=(sj0+((r12*x3239))+(((-1.0)*x3241*x3248))+(((-1.0)*x3246*x3248)));
evalcond[3]=((((-1.0)*x3243*x3249))+((sj1*sj2))+(((-1.0)*x3244*x3249))+((cj1*cj2))+(((-1.0)*r22*x3248)));
evalcond[4]=((((-1.0)*sj0*x3247))+(((-1.0)*x3245*x3249))+(((-1.0)*r02*x3248))+(((-1.0)*x3242*x3249))+((sj0*x3240)));
evalcond[5]=((((-1.0)*cj0*x3240))+(((-1.0)*r12*x3248))+(((-1.0)*x3241*x3249))+(((-1.0)*x3246*x3249))+((cj0*x3247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3250=IKPowWithIntegerCheck(IKsign((((gconst110*r00))+(((-1.0)*gconst109*r01)))),-1);
if(!x3250.valid){
continue;
}
CheckValue<IkReal> x3251 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r20*sj0))+((gconst110*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3250.value)))+(x3251.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3252=IKsin(j4);
IkReal x3253=IKcos(j4);
IkReal x3254=(cj2*sj1);
IkReal x3255=(gconst110*r11);
IkReal x3256=(gconst109*r00);
IkReal x3257=(gconst109*r20);
IkReal x3258=(gconst110*r21);
IkReal x3259=(gconst110*r01);
IkReal x3260=(gconst109*r10);
IkReal x3261=(cj1*sj2);
IkReal x3262=((1.0)*x3252);
IkReal x3263=((1.0)*x3253);
evalcond[0]=((((-1.0)*x3257*x3262))+((r22*x3253))+(((-1.0)*x3258*x3262)));
evalcond[1]=(cj0+(((-1.0)*x3256*x3262))+((r02*x3253))+(((-1.0)*x3259*x3262)));
evalcond[2]=((((-1.0)*x3260*x3262))+((r12*x3253))+sj0+(((-1.0)*x3255*x3262)));
evalcond[3]=((((-1.0)*x3257*x3263))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x3262))+(((-1.0)*x3258*x3263)));
evalcond[4]=((((-1.0)*x3256*x3263))+((sj0*x3254))+(((-1.0)*sj0*x3261))+(((-1.0)*r02*x3262))+(((-1.0)*x3259*x3263)));
evalcond[5]=((((-1.0)*x3260*x3263))+(((-1.0)*r12*x3262))+(((-1.0)*cj0*x3254))+(((-1.0)*x3255*x3263))+((cj0*x3261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3266 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3266)==0){
continue;
}
IkReal x3264=pow(x3266,-0.5);
IkReal x3265=((-1.0)*x3264);
CheckValue<IkReal> x3267 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3267.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3267.value))));
IkReal gconst112=(r10*x3265);
IkReal gconst113=(r11*x3265);
CheckValue<IkReal> x3268 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3268.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3268.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x3272 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3272.valid){
continue;
}
IkReal x3269=((1.0)*(x3272.value));
IkReal x3270=x3264;
IkReal x3271=((-1.0)*x3270);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3269)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3269)));
IkReal gconst112=(r10*x3271);
IkReal gconst113=(r11*x3271);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3276 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3276.valid){
continue;
}
IkReal x3273=((1.0)*(x3276.value));
IkReal x3274=x3264;
IkReal x3275=((-1.0)*x3274);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3273)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3273)));
IkReal gconst112=(r10*x3275);
IkReal gconst113=(r11*x3275);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3280 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3280.valid){
continue;
}
IkReal x3277=((1.0)*(x3280.value));
IkReal x3278=x3264;
IkReal x3279=((-1.0)*x3278);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3277)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3277)));
IkReal gconst112=(r10*x3279);
IkReal gconst113=(r11*x3279);
IkReal x3281=r12*r12;
IkReal x3282=(r02*sj0);
IkReal x3283=((1.0)*x3281);
CheckValue<IkReal> x3287=IKPowWithIntegerCheck(((-1.0)+x3281),-1);
if(!x3287.valid){
continue;
}
IkReal x3284=x3287.value;
if((((1.0)+(((-1.0)*x3283)))) < -0.00001)
continue;
IkReal x3285=IKsqrt(((1.0)+(((-1.0)*x3283))));
IkReal x3286=(cj0*x3284*x3285);
j4eval[0]=((IKabs(((((-1.0)*x3282))+((cj0*r12)))))+(IKabs((((r12*x3282*x3284*x3285))+x3286+(((-1.0)*x3283*x3286))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3288=((1.0)*sj0);
CheckValue<IkReal> x3289=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r21))+((gconst113*r20)))),-1);
if(!x3289.valid){
continue;
}
CheckValue<IkReal> x3290 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3288))+((cj0*r12)))),IkReal((((cj0*gconst112*r10))+((cj0*gconst113*r11))+(((-1.0)*gconst113*r01*x3288))+(((-1.0)*gconst112*r00*x3288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3289.value)))+(x3290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3291=IKsin(j4);
IkReal x3292=IKcos(j4);
IkReal x3293=(cj2*sj1);
IkReal x3294=(gconst113*r11);
IkReal x3295=(gconst113*r21);
IkReal x3296=(cj1*sj2);
IkReal x3297=((1.0)*gconst113*r01);
IkReal x3298=((1.0)*x3291);
IkReal x3299=((1.0)*x3292);
IkReal x3300=(gconst112*x3299);
IkReal x3301=(gconst112*x3298);
evalcond[0]=((((-1.0)*r20*x3301))+((r22*x3292))+(((-1.0)*x3295*x3298)));
evalcond[1]=(cj0+((r02*x3292))+(((-1.0)*x3291*x3297))+(((-1.0)*r00*x3301)));
evalcond[2]=(sj0+(((-1.0)*x3294*x3298))+((r12*x3292))+(((-1.0)*r10*x3301)));
evalcond[3]=((((-1.0)*r20*x3300))+(((-1.0)*r22*x3298))+((sj1*sj2))+(((-1.0)*x3295*x3299))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x3292*x3297))+((sj0*x3293))+(((-1.0)*r02*x3298))+(((-1.0)*r00*x3300))+(((-1.0)*sj0*x3296)));
evalcond[5]=((((-1.0)*r12*x3298))+(((-1.0)*cj0*x3293))+(((-1.0)*x3294*x3299))+((cj0*x3296))+(((-1.0)*r10*x3300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3302 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r20*sj0))+((gconst113*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3302.valid){
continue;
}
CheckValue<IkReal> x3303=IKPowWithIntegerCheck(IKsign((((gconst113*r00))+(((-1.0)*gconst112*r01)))),-1);
if(!x3303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3302.value)+(((1.5707963267949)*(x3303.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3304=IKsin(j4);
IkReal x3305=IKcos(j4);
IkReal x3306=(cj2*sj1);
IkReal x3307=(gconst113*r11);
IkReal x3308=(gconst113*r21);
IkReal x3309=(cj1*sj2);
IkReal x3310=((1.0)*gconst113*r01);
IkReal x3311=((1.0)*x3304);
IkReal x3312=((1.0)*x3305);
IkReal x3313=(gconst112*x3312);
IkReal x3314=(gconst112*x3311);
evalcond[0]=((((-1.0)*r20*x3314))+((r22*x3305))+(((-1.0)*x3308*x3311)));
evalcond[1]=(cj0+(((-1.0)*x3304*x3310))+((r02*x3305))+(((-1.0)*r00*x3314)));
evalcond[2]=(sj0+((r12*x3305))+(((-1.0)*r10*x3314))+(((-1.0)*x3307*x3311)));
evalcond[3]=((((-1.0)*r20*x3313))+(((-1.0)*r22*x3311))+((sj1*sj2))+(((-1.0)*x3308*x3312))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x3305*x3310))+(((-1.0)*r02*x3311))+(((-1.0)*r00*x3313))+(((-1.0)*sj0*x3309))+((sj0*x3306)));
evalcond[5]=(((cj0*x3309))+(((-1.0)*r12*x3311))+(((-1.0)*r10*x3313))+(((-1.0)*cj0*x3306))+(((-1.0)*x3307*x3312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3315=IKPowWithIntegerCheck(IKsign((((gconst112*r11))+(((-1.0)*gconst113*r10)))),-1);
if(!x3315.valid){
continue;
}
CheckValue<IkReal> x3316 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r20))+((cj0*gconst113*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3315.value)))+(x3316.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3317=IKsin(j4);
IkReal x3318=IKcos(j4);
IkReal x3319=(cj2*sj1);
IkReal x3320=(gconst113*r11);
IkReal x3321=(gconst113*r21);
IkReal x3322=(cj1*sj2);
IkReal x3323=((1.0)*gconst113*r01);
IkReal x3324=((1.0)*x3317);
IkReal x3325=((1.0)*x3318);
IkReal x3326=(gconst112*x3325);
IkReal x3327=(gconst112*x3324);
evalcond[0]=((((-1.0)*r20*x3327))+(((-1.0)*x3321*x3324))+((r22*x3318)));
evalcond[1]=(cj0+((r02*x3318))+(((-1.0)*x3317*x3323))+(((-1.0)*r00*x3327)));
evalcond[2]=(sj0+(((-1.0)*r10*x3327))+(((-1.0)*x3320*x3324))+((r12*x3318)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x3326))+(((-1.0)*x3321*x3325))+(((-1.0)*r22*x3324))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*x3324))+(((-1.0)*sj0*x3322))+(((-1.0)*x3318*x3323))+(((-1.0)*r00*x3326))+((sj0*x3319)));
evalcond[5]=((((-1.0)*r10*x3326))+(((-1.0)*x3320*x3325))+(((-1.0)*cj0*x3319))+(((-1.0)*r12*x3324))+((cj0*x3322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3328=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x3328;
j4eval[1]=IKsign(x3328);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3329=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x3329;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x3329);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3330=cj5*cj5;
IkReal x3331=r10*r10;
IkReal x3332=(cj5*r11);
IkReal x3333=(r10*sj5);
IkReal x3334=((((-2.0)*x3332*x3333))+(((-1.0)*x3330*(r11*r11)))+((x3330*x3331))+(((-1.0)*x3331))+(((-1.0)*(r12*r12))));
j4eval[0]=x3334;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x3333))+(((-1.0)*x3332))))));
j4eval[2]=IKsign(x3334);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3335=cj5*cj5;
IkReal x3336=r10*r10;
IkReal x3337=(cj5*r11);
IkReal x3338=(r10*sj5);
CheckValue<IkReal> x3339 = IKatan2WithCheck(IkReal(((((-1.0)*x3337))+(((-1.0)*x3338)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x3339.valid){
continue;
}
CheckValue<IkReal> x3340=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3335*(r11*r11)))+(((-1.0)*x3336))+(((-1.0)*(r12*r12)))+((x3335*x3336))+(((-2.0)*x3337*x3338)))),-1);
if(!x3340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3339.value)+(((1.5707963267949)*(x3340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3341=IKsin(j4);
IkReal x3342=IKcos(j4);
IkReal x3343=(r00*sj5);
IkReal x3344=(cj5*r01);
IkReal x3345=(r20*sj5);
IkReal x3346=(cj5*r21);
IkReal x3347=(cj5*r11);
IkReal x3348=(r10*sj5);
IkReal x3349=((1.0)*x3341);
IkReal x3350=((1.0)*x3342);
evalcond[0]=((((-1.0)*x3346*x3349))+((r22*x3342))+(((-1.0)*x3345*x3349)));
evalcond[1]=((((-1.0)*x3343*x3349))+((r02*x3342))+(((-1.0)*x3344*x3349)));
evalcond[2]=((1.0)+(((-1.0)*x3347*x3349))+(((-1.0)*x3348*x3349))+((r12*x3342)));
evalcond[3]=((((-1.0)*x3348*x3350))+(((-1.0)*x3347*x3350))+(((-1.0)*r12*x3349)));
evalcond[4]=((((-1.0)*x3346*x3350))+((sj1*sj2))+(((-1.0)*x3345*x3350))+((cj1*cj2))+(((-1.0)*r22*x3349)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x3343*x3350))+(((-1.0)*cj1*sj2))+(((-1.0)*x3344*x3350))+(((-1.0)*r02*x3349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3351 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3351.valid){
continue;
}
CheckValue<IkReal> x3352=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x3352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3351.value)+(((1.5707963267949)*(x3352.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3353=IKsin(j4);
IkReal x3354=IKcos(j4);
IkReal x3355=(r00*sj5);
IkReal x3356=(cj5*r01);
IkReal x3357=(r20*sj5);
IkReal x3358=(cj5*r21);
IkReal x3359=(cj5*r11);
IkReal x3360=(r10*sj5);
IkReal x3361=((1.0)*x3353);
IkReal x3362=((1.0)*x3354);
evalcond[0]=((((-1.0)*x3357*x3361))+((r22*x3354))+(((-1.0)*x3358*x3361)));
evalcond[1]=((((-1.0)*x3355*x3361))+(((-1.0)*x3356*x3361))+((r02*x3354)));
evalcond[2]=((1.0)+(((-1.0)*x3360*x3361))+(((-1.0)*x3359*x3361))+((r12*x3354)));
evalcond[3]=((((-1.0)*x3360*x3362))+(((-1.0)*x3359*x3362))+(((-1.0)*r12*x3361)));
evalcond[4]=((((-1.0)*x3357*x3362))+((sj1*sj2))+(((-1.0)*r22*x3361))+((cj1*cj2))+(((-1.0)*x3358*x3362)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x3361))+(((-1.0)*x3355*x3362))+(((-1.0)*x3356*x3362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3363=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x3363.valid){
continue;
}
CheckValue<IkReal> x3364 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3363.value)))+(x3364.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3365=IKsin(j4);
IkReal x3366=IKcos(j4);
IkReal x3367=(r00*sj5);
IkReal x3368=(cj5*r01);
IkReal x3369=(r20*sj5);
IkReal x3370=(cj5*r21);
IkReal x3371=(cj5*r11);
IkReal x3372=(r10*sj5);
IkReal x3373=((1.0)*x3365);
IkReal x3374=((1.0)*x3366);
evalcond[0]=(((r22*x3366))+(((-1.0)*x3370*x3373))+(((-1.0)*x3369*x3373)));
evalcond[1]=(((r02*x3366))+(((-1.0)*x3367*x3373))+(((-1.0)*x3368*x3373)));
evalcond[2]=((1.0)+(((-1.0)*x3371*x3373))+((r12*x3366))+(((-1.0)*x3372*x3373)));
evalcond[3]=((((-1.0)*x3371*x3374))+(((-1.0)*r12*x3373))+(((-1.0)*x3372*x3374)));
evalcond[4]=((((-1.0)*r22*x3373))+(((-1.0)*x3370*x3374))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x3369*x3374)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x3367*x3374))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x3373))+(((-1.0)*x3368*x3374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3375=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x3375;
j4eval[1]=IKsign(x3375);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3376=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x3376;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x3376);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3377=cj5*cj5;
IkReal x3378=r10*r10;
IkReal x3379=(cj5*r11);
IkReal x3380=(r10*sj5);
IkReal x3381=((r12*r12)+x3378+((x3377*(r11*r11)))+(((2.0)*x3379*x3380))+(((-1.0)*x3377*x3378)));
j4eval[0]=x3381;
j4eval[1]=IKsign(x3381);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3379))+(((-1.0)*x3380))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3382=cj5*cj5;
IkReal x3383=r10*r10;
IkReal x3384=(cj5*r11);
IkReal x3385=(r10*sj5);
CheckValue<IkReal> x3386=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((2.0)*x3384*x3385))+x3383+((x3382*(r11*r11)))+(((-1.0)*x3382*x3383)))),-1);
if(!x3386.valid){
continue;
}
CheckValue<IkReal> x3387 = IKatan2WithCheck(IkReal(((((-1.0)*x3384))+(((-1.0)*x3385)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x3387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3386.value)))+(x3387.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3388=IKsin(j4);
IkReal x3389=IKcos(j4);
IkReal x3390=(r00*sj5);
IkReal x3391=(cj5*r01);
IkReal x3392=(r20*sj5);
IkReal x3393=(cj5*r21);
IkReal x3394=(cj5*r11);
IkReal x3395=(r10*sj5);
IkReal x3396=((1.0)*x3388);
IkReal x3397=((1.0)*x3389);
evalcond[0]=((((-1.0)*x3392*x3396))+((r22*x3389))+(((-1.0)*x3393*x3396)));
evalcond[1]=(((r02*x3389))+(((-1.0)*x3391*x3396))+(((-1.0)*x3390*x3396)));
evalcond[2]=((-1.0)+(((-1.0)*x3394*x3396))+(((-1.0)*x3395*x3396))+((r12*x3389)));
evalcond[3]=((((-1.0)*x3394*x3397))+(((-1.0)*x3395*x3397))+(((-1.0)*r12*x3396)));
evalcond[4]=((((-1.0)*r22*x3396))+(((-1.0)*x3392*x3397))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x3393*x3397)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x3396))+(((-1.0)*x3391*x3397))+(((-1.0)*x3390*x3397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3398 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3398.valid){
continue;
}
CheckValue<IkReal> x3399=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x3399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3398.value)+(((1.5707963267949)*(x3399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3400=IKsin(j4);
IkReal x3401=IKcos(j4);
IkReal x3402=(r00*sj5);
IkReal x3403=(cj5*r01);
IkReal x3404=(r20*sj5);
IkReal x3405=(cj5*r21);
IkReal x3406=(cj5*r11);
IkReal x3407=(r10*sj5);
IkReal x3408=((1.0)*x3400);
IkReal x3409=((1.0)*x3401);
evalcond[0]=(((r22*x3401))+(((-1.0)*x3405*x3408))+(((-1.0)*x3404*x3408)));
evalcond[1]=(((r02*x3401))+(((-1.0)*x3402*x3408))+(((-1.0)*x3403*x3408)));
evalcond[2]=((-1.0)+(((-1.0)*x3407*x3408))+((r12*x3401))+(((-1.0)*x3406*x3408)));
evalcond[3]=((((-1.0)*x3407*x3409))+(((-1.0)*r12*x3408))+(((-1.0)*x3406*x3409)));
evalcond[4]=((((-1.0)*x3405*x3409))+(((-1.0)*x3404*x3409))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x3408)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x3402*x3409))+(((-1.0)*r02*x3408))+(((-1.0)*x3403*x3409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3410 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3410.valid){
continue;
}
CheckValue<IkReal> x3411=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x3411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3410.value)+(((1.5707963267949)*(x3411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3412=IKsin(j4);
IkReal x3413=IKcos(j4);
IkReal x3414=(r00*sj5);
IkReal x3415=(cj5*r01);
IkReal x3416=(r20*sj5);
IkReal x3417=(cj5*r21);
IkReal x3418=(cj5*r11);
IkReal x3419=(r10*sj5);
IkReal x3420=((1.0)*x3412);
IkReal x3421=((1.0)*x3413);
evalcond[0]=(((r22*x3413))+(((-1.0)*x3417*x3420))+(((-1.0)*x3416*x3420)));
evalcond[1]=(((r02*x3413))+(((-1.0)*x3415*x3420))+(((-1.0)*x3414*x3420)));
evalcond[2]=((-1.0)+((r12*x3413))+(((-1.0)*x3419*x3420))+(((-1.0)*x3418*x3420)));
evalcond[3]=((((-1.0)*r12*x3420))+(((-1.0)*x3419*x3421))+(((-1.0)*x3418*x3421)));
evalcond[4]=((((-1.0)*x3417*x3421))+((sj1*sj2))+(((-1.0)*x3416*x3421))+(((-1.0)*r22*x3420))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x3415*x3421))+(((-1.0)*r02*x3420))+(((-1.0)*x3414*x3421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3422=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3422);
rxp0_2=(py*r00);
rxp1_0=(r21*x3422);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3423=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3423);
rxp0_2=(py*r00);
rxp1_0=(r21*x3423);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3424=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3424);
rxp0_2=(py*r00);
rxp1_0=(r21*x3424);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3427=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x3427.valid){
continue;
}
IkReal x3425=x3427.value;
IkReal x3426=(sj0*x3425);
cj4array[0]=(((cj1*sj2*x3426))+(((-1.0)*cj2*sj1*x3426)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3428=IKsin(j4);
IkReal x3429=IKcos(j4);
IkReal x3430=(r20*sj5);
IkReal x3431=((1.0)*cj5*r21);
IkReal x3432=((1.0)*x3428);
evalcond[0]=((-1.0)*r12*x3428);
evalcond[1]=(sj0+((r12*x3429)));
evalcond[2]=((((-1.0)*x3428*x3431))+(((-1.0)*x3430*x3432)));
evalcond[3]=((((-1.0)*r00*sj5*x3432))+(((-1.0)*cj5*r01*x3432)));
evalcond[4]=(((sj1*sj2))+((cj1*cj2))+(((-1.0)*x3429*x3430))+(((-1.0)*x3429*x3431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3435=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x3435.valid){
continue;
}
IkReal x3433=x3435.value;
IkReal x3434=((1.0)*x3433);
cj4array[0]=((((-1.0)*sj1*sj2*x3434))+(((-1.0)*cj1*cj2*x3434)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3436=IKsin(j4);
IkReal x3437=IKcos(j4);
IkReal x3438=((1.0)*cj5);
IkReal x3439=((1.0)*r00*sj5);
evalcond[0]=((-1.0)*r12*x3436);
evalcond[1]=(sj0+((r12*x3437)));
evalcond[2]=((((-1.0)*r20*sj5*x3436))+(((-1.0)*r21*x3436*x3438)));
evalcond[3]=((((-1.0)*x3436*x3439))+(((-1.0)*r01*x3436*x3438)));
evalcond[4]=((((-1.0)*x3437*x3439))+(((-1.0)*r01*x3437*x3438))+(((-1.0)*cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3440=IKPowWithIntegerCheck(r12,-1);
if(!x3440.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3440.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3441=IKsin(j4);
IkReal x3442=IKcos(j4);
IkReal x3443=((1.0)*cj5);
IkReal x3444=((1.0)*sj5);
evalcond[0]=((-1.0)*r12*x3441);
evalcond[1]=((((-1.0)*r21*x3441*x3443))+(((-1.0)*r20*x3441*x3444)));
evalcond[2]=((((-1.0)*r01*x3441*x3443))+(((-1.0)*r00*x3441*x3444)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x3442*x3444))+((cj1*cj2))+(((-1.0)*r21*x3442*x3443)));
evalcond[4]=((((-1.0)*r00*x3442*x3444))+(((-1.0)*cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*r01*x3442*x3443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3445=((1.0)*sj0);
CheckValue<IkReal> x3446 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3445))+((cj0*r12)))),IkReal((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x3445))+(((-1.0)*r00*sj5*x3445))+((cj0*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3446.valid){
continue;
}
CheckValue<IkReal> x3447=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x3447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3446.value)+(((1.5707963267949)*(x3447.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3448=IKsin(j4);
IkReal x3449=IKcos(j4);
IkReal x3450=(cj2*sj1);
IkReal x3451=(r00*sj5);
IkReal x3452=(cj5*r01);
IkReal x3453=(r20*sj5);
IkReal x3454=(cj5*r21);
IkReal x3455=(cj5*r11);
IkReal x3456=(r10*sj5);
IkReal x3457=(cj1*sj2);
IkReal x3458=((1.0)*x3448);
IkReal x3459=((1.0)*x3449);
evalcond[0]=((((-1.0)*x3453*x3458))+((r22*x3449))+(((-1.0)*x3454*x3458)));
evalcond[1]=((((-1.0)*x3451*x3458))+cj0+((r02*x3449))+(((-1.0)*x3452*x3458)));
evalcond[2]=(sj0+((r12*x3449))+(((-1.0)*x3455*x3458))+(((-1.0)*x3456*x3458)));
evalcond[3]=((((-1.0)*x3453*x3459))+((sj1*sj2))+(((-1.0)*x3454*x3459))+((cj1*cj2))+(((-1.0)*r22*x3458)));
evalcond[4]=((((-1.0)*x3451*x3459))+((sj0*x3450))+(((-1.0)*sj0*x3457))+(((-1.0)*r02*x3458))+(((-1.0)*x3452*x3459)));
evalcond[5]=((((-1.0)*r12*x3458))+(((-1.0)*x3455*x3459))+(((-1.0)*cj0*x3450))+((cj0*x3457))+(((-1.0)*x3456*x3459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3460=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x3460.valid){
continue;
}
CheckValue<IkReal> x3461 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3460.value)))+(x3461.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3462=IKsin(j4);
IkReal x3463=IKcos(j4);
IkReal x3464=(cj2*sj1);
IkReal x3465=(r00*sj5);
IkReal x3466=(cj5*r01);
IkReal x3467=(r20*sj5);
IkReal x3468=(cj5*r21);
IkReal x3469=(cj5*r11);
IkReal x3470=(r10*sj5);
IkReal x3471=(cj1*sj2);
IkReal x3472=((1.0)*x3462);
IkReal x3473=((1.0)*x3463);
evalcond[0]=((((-1.0)*x3467*x3472))+(((-1.0)*x3468*x3472))+((r22*x3463)));
evalcond[1]=((((-1.0)*x3465*x3472))+cj0+((r02*x3463))+(((-1.0)*x3466*x3472)));
evalcond[2]=(sj0+((r12*x3463))+(((-1.0)*x3469*x3472))+(((-1.0)*x3470*x3472)));
evalcond[3]=((((-1.0)*x3467*x3473))+((sj1*sj2))+(((-1.0)*r22*x3472))+(((-1.0)*x3468*x3473))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x3465*x3473))+(((-1.0)*r02*x3472))+((sj0*x3464))+(((-1.0)*sj0*x3471))+(((-1.0)*x3466*x3473)));
evalcond[5]=(((cj0*x3471))+(((-1.0)*cj0*x3464))+(((-1.0)*r12*x3472))+(((-1.0)*x3469*x3473))+(((-1.0)*x3470*x3473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3474 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3474.valid){
continue;
}
CheckValue<IkReal> x3475=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x3475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3474.value)+(((1.5707963267949)*(x3475.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3476=IKsin(j4);
IkReal x3477=IKcos(j4);
IkReal x3478=(cj2*sj1);
IkReal x3479=(r00*sj5);
IkReal x3480=(cj5*r01);
IkReal x3481=(r20*sj5);
IkReal x3482=(cj5*r21);
IkReal x3483=(cj5*r11);
IkReal x3484=(r10*sj5);
IkReal x3485=(cj1*sj2);
IkReal x3486=((1.0)*x3476);
IkReal x3487=((1.0)*x3477);
evalcond[0]=((((-1.0)*x3482*x3486))+(((-1.0)*x3481*x3486))+((r22*x3477)));
evalcond[1]=(cj0+(((-1.0)*x3479*x3486))+((r02*x3477))+(((-1.0)*x3480*x3486)));
evalcond[2]=((((-1.0)*x3483*x3486))+sj0+((r12*x3477))+(((-1.0)*x3484*x3486)));
evalcond[3]=((((-1.0)*x3482*x3487))+(((-1.0)*x3481*x3487))+((sj1*sj2))+(((-1.0)*r22*x3486))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*x3486))+(((-1.0)*x3479*x3487))+((sj0*x3478))+(((-1.0)*sj0*x3485))+(((-1.0)*x3480*x3487)));
evalcond[5]=((((-1.0)*x3483*x3487))+(((-1.0)*cj0*x3478))+(((-1.0)*r12*x3486))+((cj0*x3485))+(((-1.0)*x3484*x3487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3488=cj5*cj5;
IkReal x3489=r20*r20;
IkReal x3490=(sj1*sj2);
IkReal x3491=(r20*sj5);
IkReal x3492=(cj5*r21);
IkReal x3493=(cj1*cj2);
CheckValue<IkReal> x3494=IKPowWithIntegerCheck(IKsign(((((2.0)*x3491*x3492))+((x3488*(r21*r21)))+(r22*r22)+x3489+(((-1.0)*x3488*x3489)))),-1);
if(!x3494.valid){
continue;
}
CheckValue<IkReal> x3495 = IKatan2WithCheck(IkReal((((r22*x3493))+((r22*x3490)))),IkReal((((x3491*x3493))+((x3490*x3491))+((x3490*x3492))+((x3492*x3493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3494.value)))+(x3495.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3496=IKsin(j4);
IkReal x3497=IKcos(j4);
IkReal x3498=(r20*sj5);
IkReal x3499=((1.0)*cj5*r21);
IkReal x3500=((1.0)*x3496);
evalcond[0]=((((-1.0)*x3496*x3499))+(((-1.0)*x3498*x3500))+((r22*x3497)));
evalcond[1]=((((-1.0)*x3497*x3499))+((sj1*sj2))+(((-1.0)*r22*x3500))+((cj1*cj2))+(((-1.0)*x3497*x3498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3501=(sj4*sj5);
IkReal x3502=(cj5*sj4);
IkReal x3503=((1.0)*cj4);
if( IKabs(((((-1.0)*r12*x3503))+((r10*x3501))+((r11*x3502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x3502))+((r00*x3501))+(((-1.0)*r02*x3503)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x3503))+((r10*x3501))+((r11*x3502))))+IKsqr((((r01*x3502))+((r00*x3501))+(((-1.0)*r02*x3503))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x3503))+((r10*x3501))+((r11*x3502))), (((r01*x3502))+((r00*x3501))+(((-1.0)*r02*x3503))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3504=IKsin(j0);
IkReal x3505=IKcos(j0);
IkReal x3506=((1.0)*r00);
IkReal x3507=((1.0)*sj2);
IkReal x3508=(cj5*r10);
IkReal x3509=(sj4*sj5);
IkReal x3510=((1.0)*r10);
IkReal x3511=((0.452)*sj2);
IkReal x3512=((1.0)*cj2);
IkReal x3513=((1.0)*sj4);
IkReal x3514=(r11*sj5);
IkReal x3515=((0.452)*cj2);
IkReal x3516=(cj5*r01);
IkReal x3517=(cj4*sj5);
IkReal x3518=((1.0)*cj4);
IkReal x3519=(cj5*r11);
IkReal x3520=(r01*sj5);
IkReal x3521=(cj1*x3504);
IkReal x3522=(sj1*x3505);
IkReal x3523=(cj1*x3505);
IkReal x3524=(sj1*x3504);
evalcond[0]=((((-1.0)*x3506*x3509))+(((-1.0)*x3513*x3516))+x3505+((cj4*r02)));
evalcond[1]=((((-1.0)*x3509*x3510))+(((-1.0)*x3513*x3519))+x3504+((cj4*r12)));
evalcond[2]=(x3520+((cj2*x3521))+(((-1.0)*cj5*x3506))+((sj2*x3524)));
evalcond[3]=((((-1.0)*x3512*x3523))+x3514+(((-1.0)*x3508))+(((-1.0)*x3507*x3522)));
evalcond[4]=((((-1.0)*r02*x3513))+(((-1.0)*x3506*x3517))+((cj2*x3524))+(((-1.0)*x3516*x3518))+(((-1.0)*x3507*x3521)));
evalcond[5]=((((-1.0)*x3518*x3519))+(((-1.0)*x3512*x3522))+(((-1.0)*x3510*x3517))+(((-1.0)*r12*x3513))+((sj2*x3523)));
evalcond[6]=((((-0.1135)*cj5*r00))+(((-1.0)*x3511*x3521))+(((-1.0)*px))+(((0.1135)*x3520))+((x3515*x3524))+(((0.452)*x3524))+(((0.1054)*x3505)));
evalcond[7]=((((-0.1135)*x3508))+((x3511*x3523))+(((-1.0)*py))+(((0.1135)*x3514))+(((-0.452)*x3522))+(((0.1054)*x3504))+(((-1.0)*x3515*x3522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3525 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3525.valid){
continue;
}
CheckValue<IkReal> x3526=IKPowWithIntegerCheck(IKsign((((sj1*sj2))+((cj1*cj2)))),-1);
if(!x3526.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3525.value)+(((1.5707963267949)*(x3526.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3527=IKsin(j0);
IkReal x3528=IKcos(j0);
IkReal x3529=((1.0)*cj5);
IkReal x3530=((0.1135)*cj5);
IkReal x3531=(r11*sj5);
IkReal x3532=((0.452)*cj2);
IkReal x3533=((0.452)*sj2);
IkReal x3534=(r01*sj5);
IkReal x3535=(cj1*x3527);
IkReal x3536=(sj1*x3528);
IkReal x3537=(cj1*x3528);
IkReal x3538=(sj1*x3527);
evalcond[0]=(((cj2*x3535))+((sj2*x3538))+x3534+(((-1.0)*r00*x3529)));
evalcond[1]=((((-1.0)*r10*x3529))+(((-1.0)*cj2*x3537))+x3531+(((-1.0)*sj2*x3536)));
evalcond[2]=((((0.1135)*x3534))+(((0.452)*x3538))+(((-1.0)*px))+(((-1.0)*r00*x3530))+((x3532*x3538))+(((-1.0)*x3533*x3535))+(((0.1054)*x3528)));
evalcond[3]=((((-0.452)*x3536))+(((0.1135)*x3531))+(((-1.0)*r10*x3530))+(((-1.0)*py))+((x3533*x3537))+(((0.1054)*x3527))+(((-1.0)*x3532*x3536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3539=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x3539;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x3539);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3540=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x3540;
j4eval[1]=IKsign(x3540);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3541=((1.0)*sj0);
IkReal x3542=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x3542;
j4eval[1]=((IKabs(((((-1.0)*r02*x3541))+((cj0*r12)))))+(IKabs((((cj0*cj5*r11))+(((-1.0)*r00*sj5*x3541))+(((-1.0)*cj5*r01*x3541))+((cj0*r10*sj5))))));
j4eval[2]=IKsign(x3542);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3543=((-1.0)*r21);
IkReal x3545 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3545)==0){
continue;
}
IkReal x3544=pow(x3545,-0.5);
CheckValue<IkReal> x3546 = IKatan2WithCheck(IkReal(r20),IkReal(x3543),IKFAST_ATAN2_MAGTHRESH);
if(!x3546.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3546.value));
IkReal gconst97=((-1.0)*r20*x3544);
IkReal gconst98=(x3543*x3544);
CheckValue<IkReal> x3547 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x3547.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3547.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3548=((-1.0)*r21);
CheckValue<IkReal> x3551 = IKatan2WithCheck(IkReal(r20),IkReal(x3548),IKFAST_ATAN2_MAGTHRESH);
if(!x3551.valid){
continue;
}
IkReal x3549=((-1.0)*(x3551.value));
IkReal x3550=x3544;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3549;
IkReal gconst96=x3549;
IkReal gconst97=((-1.0)*r20*x3550);
IkReal gconst98=(x3548*x3550);
IkReal x3552=r22*r22;
IkReal x3553=((1.0)*x3552);
CheckValue<IkReal> x3557=IKPowWithIntegerCheck(((-1.0)+x3552),-1);
if(!x3557.valid){
continue;
}
IkReal x3554=x3557.value;
if((((1.0)+(((-1.0)*x3553)))) < -0.00001)
continue;
IkReal x3555=IKsqrt(((1.0)+(((-1.0)*x3553))));
IkReal x3556=(cj0*x3554*x3555);
j4eval[0]=((IKabs((x3556+(((-1.0)*x3553*x3556)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3558=((-1.0)*r21);
CheckValue<IkReal> x3561 = IKatan2WithCheck(IkReal(r20),IkReal(x3558),IKFAST_ATAN2_MAGTHRESH);
if(!x3561.valid){
continue;
}
IkReal x3559=((-1.0)*(x3561.value));
IkReal x3560=x3544;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3559;
IkReal gconst96=x3559;
IkReal gconst97=((-1.0)*r20*x3560);
IkReal gconst98=(x3558*x3560);
IkReal x3562=r22*r22;
IkReal x3563=((1.0)*x3562);
CheckValue<IkReal> x3567=IKPowWithIntegerCheck(((-1.0)+x3562),-1);
if(!x3567.valid){
continue;
}
IkReal x3564=x3567.value;
if((((1.0)+(((-1.0)*x3563)))) < -0.00001)
continue;
IkReal x3565=IKsqrt(((1.0)+(((-1.0)*x3563))));
IkReal x3566=(sj0*x3564*x3565);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3566+(((-1.0)*x3563*x3566))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3568=((-1.0)*r21);
CheckValue<IkReal> x3571 = IKatan2WithCheck(IkReal(r20),IkReal(x3568),IKFAST_ATAN2_MAGTHRESH);
if(!x3571.valid){
continue;
}
IkReal x3569=((-1.0)*(x3571.value));
IkReal x3570=x3544;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3569;
IkReal gconst96=x3569;
IkReal gconst97=((-1.0)*r20*x3570);
IkReal gconst98=(x3568*x3570);
IkReal x3572=r22*r22;
CheckValue<IkReal> x3575=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3572))),-1);
if(!x3575.valid){
continue;
}
IkReal x3573=x3575.value;
IkReal x3574=(x3572+((x3573*(r20*r20*r20*r20)))+((x3573*(r21*r21*r21*r21)))+(((2.0)*x3573*(r20*r20)*(r21*r21))));
j4eval[0]=x3574;
j4eval[1]=IKsign(x3574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3576=(gconst97*r20);
IkReal x3577=(cj1*cj2);
IkReal x3578=(sj1*sj2);
IkReal x3579=(gconst98*r21);
CheckValue<IkReal> x3580=IKPowWithIntegerCheck(IKsign(((x3579*x3579)+(r22*r22)+(((2.0)*x3576*x3579))+(x3576*x3576))),-1);
if(!x3580.valid){
continue;
}
CheckValue<IkReal> x3581 = IKatan2WithCheck(IkReal((((r22*x3578))+((r22*x3577)))),IkReal((((x3578*x3579))+((x3577*x3579))+((x3576*x3577))+((x3576*x3578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3580.value)))+(x3581.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3582=IKsin(j4);
IkReal x3583=IKcos(j4);
IkReal x3584=(cj2*sj1);
IkReal x3585=(gconst98*r11);
IkReal x3586=(gconst97*r00);
IkReal x3587=(gconst97*r10);
IkReal x3588=(gconst97*r20);
IkReal x3589=(gconst98*r21);
IkReal x3590=(gconst98*r01);
IkReal x3591=(cj1*sj2);
IkReal x3592=((1.0)*x3582);
IkReal x3593=((1.0)*x3583);
evalcond[0]=((((-1.0)*x3589*x3592))+(((-1.0)*x3588*x3592))+((r22*x3583)));
evalcond[1]=(cj0+((r02*x3583))+(((-1.0)*x3590*x3592))+(((-1.0)*x3586*x3592)));
evalcond[2]=((((-1.0)*x3587*x3592))+sj0+((r12*x3583))+(((-1.0)*x3585*x3592)));
evalcond[3]=((((-1.0)*x3589*x3593))+(((-1.0)*r22*x3592))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x3588*x3593)));
evalcond[4]=((((-1.0)*x3590*x3593))+(((-1.0)*r02*x3592))+(((-1.0)*x3586*x3593))+(((-1.0)*sj0*x3591))+((sj0*x3584)));
evalcond[5]=((((-1.0)*x3587*x3593))+(((-1.0)*cj0*x3584))+(((-1.0)*x3585*x3593))+(((-1.0)*r12*x3592))+((cj0*x3591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3594 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r20*sj0))+((gconst98*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3594.valid){
continue;
}
CheckValue<IkReal> x3595=IKPowWithIntegerCheck(IKsign((((gconst98*r00))+(((-1.0)*gconst97*r01)))),-1);
if(!x3595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3594.value)+(((1.5707963267949)*(x3595.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3596=IKsin(j4);
IkReal x3597=IKcos(j4);
IkReal x3598=(cj2*sj1);
IkReal x3599=(gconst98*r11);
IkReal x3600=(gconst97*r00);
IkReal x3601=(gconst97*r10);
IkReal x3602=(gconst97*r20);
IkReal x3603=(gconst98*r21);
IkReal x3604=(gconst98*r01);
IkReal x3605=(cj1*sj2);
IkReal x3606=((1.0)*x3596);
IkReal x3607=((1.0)*x3597);
evalcond[0]=((((-1.0)*x3602*x3606))+(((-1.0)*x3603*x3606))+((r22*x3597)));
evalcond[1]=(cj0+((r02*x3597))+(((-1.0)*x3600*x3606))+(((-1.0)*x3604*x3606)));
evalcond[2]=(sj0+(((-1.0)*x3601*x3606))+((r12*x3597))+(((-1.0)*x3599*x3606)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3602*x3607))+(((-1.0)*x3603*x3607))+(((-1.0)*r22*x3606))+((cj1*cj2)));
evalcond[4]=(((sj0*x3598))+(((-1.0)*r02*x3606))+(((-1.0)*x3600*x3607))+(((-1.0)*x3604*x3607))+(((-1.0)*sj0*x3605)));
evalcond[5]=((((-1.0)*cj0*x3598))+(((-1.0)*r12*x3606))+(((-1.0)*x3601*x3607))+((cj0*x3605))+(((-1.0)*x3599*x3607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3608 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst98*r21))+((cj0*gconst97*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3608.valid){
continue;
}
CheckValue<IkReal> x3609=IKPowWithIntegerCheck(IKsign((((gconst97*r11))+(((-1.0)*gconst98*r10)))),-1);
if(!x3609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3608.value)+(((1.5707963267949)*(x3609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3610=IKsin(j4);
IkReal x3611=IKcos(j4);
IkReal x3612=(cj2*sj1);
IkReal x3613=(gconst98*r11);
IkReal x3614=(gconst97*r00);
IkReal x3615=(gconst97*r10);
IkReal x3616=(gconst97*r20);
IkReal x3617=(gconst98*r21);
IkReal x3618=(gconst98*r01);
IkReal x3619=(cj1*sj2);
IkReal x3620=((1.0)*x3610);
IkReal x3621=((1.0)*x3611);
evalcond[0]=(((r22*x3611))+(((-1.0)*x3617*x3620))+(((-1.0)*x3616*x3620)));
evalcond[1]=((((-1.0)*x3614*x3620))+cj0+((r02*x3611))+(((-1.0)*x3618*x3620)));
evalcond[2]=(sj0+(((-1.0)*x3613*x3620))+((r12*x3611))+(((-1.0)*x3615*x3620)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3617*x3621))+((cj1*cj2))+(((-1.0)*r22*x3620))+(((-1.0)*x3616*x3621)));
evalcond[4]=((((-1.0)*x3614*x3621))+(((-1.0)*x3618*x3621))+(((-1.0)*sj0*x3619))+((sj0*x3612))+(((-1.0)*r02*x3620)));
evalcond[5]=((((-1.0)*x3613*x3621))+(((-1.0)*r12*x3620))+(((-1.0)*cj0*x3612))+((cj0*x3619))+(((-1.0)*x3615*x3621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3624 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3624)==0){
continue;
}
IkReal x3622=pow(x3624,-0.5);
IkReal x3623=((1.0)*x3622);
CheckValue<IkReal> x3625 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x3625.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3625.value))));
IkReal gconst100=(r20*x3623);
IkReal gconst101=(r21*x3623);
CheckValue<IkReal> x3626 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x3626.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3626.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x3630 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x3630.valid){
continue;
}
IkReal x3627=((1.0)*(x3630.value));
IkReal x3628=x3622;
IkReal x3629=((1.0)*x3628);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3627)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3627)));
IkReal gconst100=(r20*x3629);
IkReal gconst101=(r21*x3629);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3634 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x3634.valid){
continue;
}
IkReal x3631=((1.0)*(x3634.value));
IkReal x3632=x3622;
IkReal x3633=((1.0)*x3632);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3631)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3631)));
IkReal gconst100=(r20*x3633);
IkReal gconst101=(r21*x3633);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3638 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x3638.valid){
continue;
}
IkReal x3635=((1.0)*(x3638.value));
IkReal x3636=x3622;
IkReal x3637=((1.0)*x3636);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3635)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3635)));
IkReal gconst100=(r20*x3637);
IkReal gconst101=(r21*x3637);
IkReal x3639=r22*r22;
IkReal x3640=(cj0*r12);
IkReal x3641=((1.0)*r02*sj0);
CheckValue<IkReal> x3645=IKPowWithIntegerCheck(((-1.0)+x3639),-1);
if(!x3645.valid){
continue;
}
IkReal x3642=x3645.value;
if((((1.0)+(((-1.0)*x3639)))) < -0.00001)
continue;
IkReal x3643=IKsqrt(((1.0)+(((-1.0)*x3639))));
IkReal x3644=(r22*x3642*x3643);
j4eval[0]=0;
j4eval[1]=((IKabs((x3640+(((-1.0)*x3641)))))+(IKabs((((x3640*x3644))+(((-1.0)*x3641*x3644))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3646=((1.0)*sj0);
CheckValue<IkReal> x3647 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3646))+((cj0*r12)))),IkReal(((((-1.0)*gconst100*r00*x3646))+((cj0*gconst101*r11))+((cj0*gconst100*r10))+(((-1.0)*gconst101*r01*x3646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3647.valid){
continue;
}
CheckValue<IkReal> x3648=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r21))+((gconst101*r20)))),-1);
if(!x3648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3647.value)+(((1.5707963267949)*(x3648.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3649=IKsin(j4);
IkReal x3650=IKcos(j4);
IkReal x3651=((1.0)*gconst100);
IkReal x3652=(cj2*sj1);
IkReal x3653=((1.0)*gconst101);
IkReal x3654=(cj1*sj2);
IkReal x3655=((1.0)*x3649);
evalcond[0]=((((-1.0)*r20*x3649*x3651))+(((-1.0)*r21*x3649*x3653))+((r22*x3650)));
evalcond[1]=(cj0+(((-1.0)*r00*x3649*x3651))+((r02*x3650))+(((-1.0)*r01*x3649*x3653)));
evalcond[2]=(((r12*x3650))+sj0+(((-1.0)*r11*x3649*x3653))+(((-1.0)*r10*x3649*x3651)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x3650*x3651))+(((-1.0)*r22*x3655))+((cj1*cj2))+(((-1.0)*r21*x3650*x3653)));
evalcond[4]=((((-1.0)*r00*x3650*x3651))+(((-1.0)*sj0*x3654))+((sj0*x3652))+(((-1.0)*r01*x3650*x3653))+(((-1.0)*r02*x3655)));
evalcond[5]=((((-1.0)*cj0*x3652))+(((-1.0)*r11*x3650*x3653))+(((-1.0)*r12*x3655))+((cj0*x3654))+(((-1.0)*r10*x3650*x3651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3656 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst100*r20*sj0))+((gconst101*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3656.valid){
continue;
}
CheckValue<IkReal> x3657=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r01))+((gconst101*r00)))),-1);
if(!x3657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3656.value)+(((1.5707963267949)*(x3657.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3658=IKsin(j4);
IkReal x3659=IKcos(j4);
IkReal x3660=((1.0)*gconst100);
IkReal x3661=(cj2*sj1);
IkReal x3662=((1.0)*gconst101);
IkReal x3663=(cj1*sj2);
IkReal x3664=((1.0)*x3658);
evalcond[0]=((((-1.0)*r20*x3658*x3660))+(((-1.0)*r21*x3658*x3662))+((r22*x3659)));
evalcond[1]=((((-1.0)*r00*x3658*x3660))+cj0+(((-1.0)*r01*x3658*x3662))+((r02*x3659)));
evalcond[2]=((((-1.0)*r11*x3658*x3662))+((r12*x3659))+sj0+(((-1.0)*r10*x3658*x3660)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x3659*x3660))+(((-1.0)*r21*x3659*x3662))+(((-1.0)*r22*x3664))+((cj1*cj2)));
evalcond[4]=(((sj0*x3661))+(((-1.0)*r02*x3664))+(((-1.0)*r01*x3659*x3662))+(((-1.0)*sj0*x3663))+(((-1.0)*r00*x3659*x3660)));
evalcond[5]=((((-1.0)*r11*x3659*x3662))+(((-1.0)*r10*x3659*x3660))+(((-1.0)*cj0*x3661))+((cj0*x3663))+(((-1.0)*r12*x3664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3665=IKPowWithIntegerCheck(IKsign((((gconst100*r11))+(((-1.0)*gconst101*r10)))),-1);
if(!x3665.valid){
continue;
}
CheckValue<IkReal> x3666 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r20))+((cj0*gconst101*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3665.value)))+(x3666.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3667=IKsin(j4);
IkReal x3668=IKcos(j4);
IkReal x3669=((1.0)*gconst100);
IkReal x3670=(cj2*sj1);
IkReal x3671=((1.0)*gconst101);
IkReal x3672=(cj1*sj2);
IkReal x3673=((1.0)*x3667);
evalcond[0]=(((r22*x3668))+(((-1.0)*r21*x3667*x3671))+(((-1.0)*r20*x3667*x3669)));
evalcond[1]=((((-1.0)*r00*x3667*x3669))+cj0+(((-1.0)*r01*x3667*x3671))+((r02*x3668)));
evalcond[2]=(sj0+((r12*x3668))+(((-1.0)*r11*x3667*x3671))+(((-1.0)*r10*x3667*x3669)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x3673))+((cj1*cj2))+(((-1.0)*r20*x3668*x3669))+(((-1.0)*r21*x3668*x3671)));
evalcond[4]=((((-1.0)*r01*x3668*x3671))+(((-1.0)*sj0*x3672))+((sj0*x3670))+(((-1.0)*r02*x3673))+(((-1.0)*r00*x3668*x3669)));
evalcond[5]=((((-1.0)*r10*x3668*x3669))+(((-1.0)*cj0*x3670))+(((-1.0)*r12*x3673))+(((-1.0)*r11*x3668*x3671))+((cj0*x3672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3676 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3676)==0){
continue;
}
IkReal x3674=pow(x3676,-0.5);
IkReal x3675=((-1.0)*x3674);
CheckValue<IkReal> x3677 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x3677.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3677.value));
IkReal gconst103=(r00*x3675);
IkReal gconst104=(r01*x3675);
CheckValue<IkReal> x3678 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x3678.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3678.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3682 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x3682.valid){
continue;
}
IkReal x3679=((-1.0)*(x3682.value));
IkReal x3680=x3674;
IkReal x3681=((-1.0)*x3680);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3679;
IkReal gconst102=x3679;
IkReal gconst103=(r00*x3681);
IkReal gconst104=(r01*x3681);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3683=((1.0)*sj0);
CheckValue<IkReal> x3684=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r21))+((gconst104*r20)))),-1);
if(!x3684.valid){
continue;
}
CheckValue<IkReal> x3685 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3683))+((cj0*r12)))),IkReal((((cj0*gconst103*r10))+(((-1.0)*gconst103*r00*x3683))+(((-1.0)*gconst104*r01*x3683))+((cj0*gconst104*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3684.value)))+(x3685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3686=IKsin(j4);
IkReal x3687=IKcos(j4);
IkReal x3688=(gconst103*r20);
IkReal x3689=(gconst104*r11);
IkReal x3690=(cj2*sj1);
IkReal x3691=(gconst104*r21);
IkReal x3692=(gconst103*r10);
IkReal x3693=(gconst104*r01);
IkReal x3694=(gconst103*r00);
IkReal x3695=(cj1*sj2);
IkReal x3696=((1.0)*x3686);
IkReal x3697=((1.0)*x3687);
evalcond[0]=((((-1.0)*x3688*x3696))+((r22*x3687))+(((-1.0)*x3691*x3696)));
evalcond[1]=(cj0+((r02*x3687))+(((-1.0)*x3694*x3696))+(((-1.0)*x3693*x3696)));
evalcond[2]=((((-1.0)*x3689*x3696))+sj0+((r12*x3687))+(((-1.0)*x3692*x3696)));
evalcond[3]=((((-1.0)*x3688*x3697))+(((-1.0)*r22*x3696))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x3691*x3697)));
evalcond[4]=((((-1.0)*r02*x3696))+((sj0*x3690))+(((-1.0)*sj0*x3695))+(((-1.0)*x3694*x3697))+(((-1.0)*x3693*x3697)));
evalcond[5]=((((-1.0)*cj0*x3690))+(((-1.0)*x3689*x3697))+((cj0*x3695))+(((-1.0)*r12*x3696))+(((-1.0)*x3692*x3697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3698 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst104*r21))+((cj0*gconst103*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3698.valid){
continue;
}
CheckValue<IkReal> x3699=IKPowWithIntegerCheck(IKsign((((gconst103*r11))+(((-1.0)*gconst104*r10)))),-1);
if(!x3699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3698.value)+(((1.5707963267949)*(x3699.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3700=IKsin(j4);
IkReal x3701=IKcos(j4);
IkReal x3702=(gconst103*r20);
IkReal x3703=(gconst104*r11);
IkReal x3704=(cj2*sj1);
IkReal x3705=(gconst104*r21);
IkReal x3706=(gconst103*r10);
IkReal x3707=(gconst104*r01);
IkReal x3708=(gconst103*r00);
IkReal x3709=(cj1*sj2);
IkReal x3710=((1.0)*x3700);
IkReal x3711=((1.0)*x3701);
evalcond[0]=((((-1.0)*x3705*x3710))+((r22*x3701))+(((-1.0)*x3702*x3710)));
evalcond[1]=(cj0+(((-1.0)*x3707*x3710))+(((-1.0)*x3708*x3710))+((r02*x3701)));
evalcond[2]=(((r12*x3701))+(((-1.0)*x3703*x3710))+sj0+(((-1.0)*x3706*x3710)));
evalcond[3]=((((-1.0)*x3705*x3711))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x3702*x3711))+(((-1.0)*r22*x3710)));
evalcond[4]=(((sj0*x3704))+(((-1.0)*x3707*x3711))+(((-1.0)*r02*x3710))+(((-1.0)*x3708*x3711))+(((-1.0)*sj0*x3709)));
evalcond[5]=((((-1.0)*cj0*x3704))+(((-1.0)*x3703*x3711))+((cj0*x3709))+(((-1.0)*r12*x3710))+(((-1.0)*x3706*x3711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3714 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3714)==0){
continue;
}
IkReal x3712=pow(x3714,-0.5);
IkReal x3713=((1.0)*x3712);
CheckValue<IkReal> x3715 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x3715.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3715.value))));
IkReal gconst106=(r00*x3713);
IkReal gconst107=(r01*x3713);
CheckValue<IkReal> x3716 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x3716.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3716.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3720 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x3720.valid){
continue;
}
IkReal x3717=((1.0)*(x3720.value));
IkReal x3718=x3712;
IkReal x3719=((1.0)*x3718);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3717)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3717)));
IkReal gconst106=(r00*x3719);
IkReal gconst107=(r01*x3719);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x3724 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x3724.valid){
continue;
}
IkReal x3721=((1.0)*(x3724.value));
IkReal x3722=x3712;
IkReal x3723=((1.0)*x3722);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3721)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3721)));
IkReal gconst106=(r00*x3723);
IkReal gconst107=(r01*x3723);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3728 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x3728.valid){
continue;
}
IkReal x3725=((1.0)*(x3728.value));
IkReal x3726=x3712;
IkReal x3727=((1.0)*x3726);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3725)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3725)));
IkReal gconst106=(r00*x3727);
IkReal gconst107=(r01*x3727);
IkReal x3729=r02*r02;
IkReal x3730=((1.0)*sj0);
IkReal x3731=(cj0*r12);
CheckValue<IkReal> x3735=IKPowWithIntegerCheck(((-1.0)+x3729),-1);
if(!x3735.valid){
continue;
}
IkReal x3732=x3735.value;
if((((1.0)+(((-1.0)*x3729)))) < -0.00001)
continue;
IkReal x3733=IKsqrt(((1.0)+(((-1.0)*x3729))));
IkReal x3734=(x3732*x3733);
j4eval[0]=((IKabs((x3731+(((-1.0)*r02*x3730)))))+(IKabs(((((-1.0)*x3729*x3730*x3734))+((r02*x3731*x3734))+((sj0*x3734))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3736=((1.0)*sj0);
CheckValue<IkReal> x3737=IKPowWithIntegerCheck(IKsign((((gconst107*r20))+(((-1.0)*gconst106*r21)))),-1);
if(!x3737.valid){
continue;
}
CheckValue<IkReal> x3738 = IKatan2WithCheck(IkReal((((cj0*r12))+(((-1.0)*r02*x3736)))),IkReal(((((-1.0)*gconst107*r01*x3736))+((cj0*gconst106*r10))+(((-1.0)*gconst106*r00*x3736))+((cj0*gconst107*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3737.value)))+(x3738.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3739=IKsin(j4);
IkReal x3740=IKcos(j4);
IkReal x3741=(gconst107*r11);
IkReal x3742=(cj2*sj1);
IkReal x3743=(gconst107*r01);
IkReal x3744=(gconst107*r21);
IkReal x3745=(cj1*sj2);
IkReal x3746=((1.0)*x3740);
IkReal x3747=((1.0)*x3739);
IkReal x3748=(gconst106*x3747);
evalcond[0]=((((-1.0)*r20*x3748))+((r22*x3740))+(((-1.0)*x3744*x3747)));
evalcond[1]=((((-1.0)*r00*x3748))+cj0+(((-1.0)*x3743*x3747))+((r02*x3740)));
evalcond[2]=(sj0+((r12*x3740))+(((-1.0)*r10*x3748))+(((-1.0)*x3741*x3747)));
evalcond[3]=((((-1.0)*r22*x3747))+(((-1.0)*gconst106*r20*x3746))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x3744*x3746)));
evalcond[4]=((((-1.0)*x3743*x3746))+((sj0*x3742))+(((-1.0)*gconst106*r00*x3746))+(((-1.0)*r02*x3747))+(((-1.0)*sj0*x3745)));
evalcond[5]=((((-1.0)*cj0*x3742))+(((-1.0)*gconst106*r10*x3746))+((cj0*x3745))+(((-1.0)*r12*x3747))+(((-1.0)*x3741*x3746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3749 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst107*r21*sj0))+((gconst106*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3749.valid){
continue;
}
CheckValue<IkReal> x3750=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r01))+((gconst107*r00)))),-1);
if(!x3750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3749.value)+(((1.5707963267949)*(x3750.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3751=IKsin(j4);
IkReal x3752=IKcos(j4);
IkReal x3753=(gconst107*r11);
IkReal x3754=(cj2*sj1);
IkReal x3755=(gconst107*r01);
IkReal x3756=(gconst107*r21);
IkReal x3757=(cj1*sj2);
IkReal x3758=((1.0)*x3752);
IkReal x3759=((1.0)*x3751);
IkReal x3760=(gconst106*x3759);
evalcond[0]=((((-1.0)*r20*x3760))+(((-1.0)*x3756*x3759))+((r22*x3752)));
evalcond[1]=((((-1.0)*x3755*x3759))+cj0+((r02*x3752))+(((-1.0)*r00*x3760)));
evalcond[2]=((((-1.0)*r10*x3760))+sj0+(((-1.0)*x3753*x3759))+((r12*x3752)));
evalcond[3]=((((-1.0)*r22*x3759))+(((-1.0)*gconst106*r20*x3758))+(((-1.0)*x3756*x3758))+((sj1*sj2))+((cj1*cj2)));
evalcond[4]=((((-1.0)*sj0*x3757))+(((-1.0)*x3755*x3758))+((sj0*x3754))+(((-1.0)*gconst106*r00*x3758))+(((-1.0)*r02*x3759)));
evalcond[5]=((((-1.0)*cj0*x3754))+(((-1.0)*gconst106*r10*x3758))+(((-1.0)*x3753*x3758))+((cj0*x3757))+(((-1.0)*r12*x3759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3761=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r10))+((gconst106*r11)))),-1);
if(!x3761.valid){
continue;
}
CheckValue<IkReal> x3762 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst107*r21))+((cj0*gconst106*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3761.value)))+(x3762.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3763=IKsin(j4);
IkReal x3764=IKcos(j4);
IkReal x3765=(gconst107*r11);
IkReal x3766=(cj2*sj1);
IkReal x3767=(gconst107*r01);
IkReal x3768=(gconst107*r21);
IkReal x3769=(cj1*sj2);
IkReal x3770=((1.0)*x3764);
IkReal x3771=((1.0)*x3763);
IkReal x3772=(gconst106*x3771);
evalcond[0]=(((r22*x3764))+(((-1.0)*r20*x3772))+(((-1.0)*x3768*x3771)));
evalcond[1]=(((r02*x3764))+cj0+(((-1.0)*x3767*x3771))+(((-1.0)*r00*x3772)));
evalcond[2]=(sj0+(((-1.0)*x3765*x3771))+((r12*x3764))+(((-1.0)*r10*x3772)));
evalcond[3]=((((-1.0)*r22*x3771))+((sj1*sj2))+(((-1.0)*gconst106*r20*x3770))+((cj1*cj2))+(((-1.0)*x3768*x3770)));
evalcond[4]=((((-1.0)*x3767*x3770))+(((-1.0)*gconst106*r00*x3770))+(((-1.0)*sj0*x3769))+(((-1.0)*r02*x3771))+((sj0*x3766)));
evalcond[5]=(((cj0*x3769))+(((-1.0)*gconst106*r10*x3770))+(((-1.0)*x3765*x3770))+(((-1.0)*cj0*x3766))+(((-1.0)*r12*x3771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3773=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x3773;
j4eval[1]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3774=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x3774;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x3774);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3775=cj5*cj5;
IkReal x3776=r00*r00;
IkReal x3777=(cj5*r01);
IkReal x3778=(r00*sj5);
IkReal x3779=((((-1.0)*(r02*r02)))+((x3775*x3776))+(((-1.0)*x3776))+(((-1.0)*x3775*(r01*r01)))+(((-2.0)*x3777*x3778)));
j4eval[0]=x3779;
j4eval[1]=IKsign(x3779);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x3778))+(((-1.0)*x3777))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3780=cj5*cj5;
IkReal x3781=r00*r00;
IkReal x3782=(cj5*r01);
IkReal x3783=(r00*sj5);
CheckValue<IkReal> x3784=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3780*(r01*r01)))+(((-1.0)*(r02*r02)))+(((-2.0)*x3782*x3783))+(((-1.0)*x3781))+((x3780*x3781)))),-1);
if(!x3784.valid){
continue;
}
CheckValue<IkReal> x3785 = IKatan2WithCheck(IkReal(((((-1.0)*x3783))+(((-1.0)*x3782)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3784.value)))+(x3785.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3786=IKsin(j4);
IkReal x3787=IKcos(j4);
IkReal x3788=(r00*sj5);
IkReal x3789=(cj5*r01);
IkReal x3790=(r20*sj5);
IkReal x3791=(cj5*r21);
IkReal x3792=(cj5*r11);
IkReal x3793=(r10*sj5);
IkReal x3794=((1.0)*x3786);
IkReal x3795=((1.0)*x3787);
evalcond[0]=(((r22*x3787))+(((-1.0)*x3791*x3794))+(((-1.0)*x3790*x3794)));
evalcond[1]=(((r12*x3787))+(((-1.0)*x3793*x3794))+(((-1.0)*x3792*x3794)));
evalcond[2]=((1.0)+((r02*x3787))+(((-1.0)*x3789*x3794))+(((-1.0)*x3788*x3794)));
evalcond[3]=((((-1.0)*r02*x3794))+(((-1.0)*x3789*x3795))+(((-1.0)*x3788*x3795)));
evalcond[4]=((((-1.0)*x3791*x3795))+((sj1*sj2))+(((-1.0)*r22*x3794))+(((-1.0)*x3790*x3795))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r12*x3794))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x3793*x3795))+(((-1.0)*x3792*x3795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3796 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3796.valid){
continue;
}
CheckValue<IkReal> x3797=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x3797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3796.value)+(((1.5707963267949)*(x3797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3798=IKsin(j4);
IkReal x3799=IKcos(j4);
IkReal x3800=(r00*sj5);
IkReal x3801=(cj5*r01);
IkReal x3802=(r20*sj5);
IkReal x3803=(cj5*r21);
IkReal x3804=(cj5*r11);
IkReal x3805=(r10*sj5);
IkReal x3806=((1.0)*x3798);
IkReal x3807=((1.0)*x3799);
evalcond[0]=(((r22*x3799))+(((-1.0)*x3802*x3806))+(((-1.0)*x3803*x3806)));
evalcond[1]=((((-1.0)*x3805*x3806))+((r12*x3799))+(((-1.0)*x3804*x3806)));
evalcond[2]=((1.0)+(((-1.0)*x3801*x3806))+((r02*x3799))+(((-1.0)*x3800*x3806)));
evalcond[3]=((((-1.0)*x3801*x3807))+(((-1.0)*x3800*x3807))+(((-1.0)*r02*x3806)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x3802*x3807))+(((-1.0)*x3803*x3807))+((cj1*cj2))+(((-1.0)*r22*x3806)));
evalcond[5]=((((-1.0)*x3805*x3807))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x3806))+(((-1.0)*x3804*x3807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3808 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3808.valid){
continue;
}
CheckValue<IkReal> x3809=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x3809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3808.value)+(((1.5707963267949)*(x3809.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3810=IKsin(j4);
IkReal x3811=IKcos(j4);
IkReal x3812=(r00*sj5);
IkReal x3813=(cj5*r01);
IkReal x3814=(r20*sj5);
IkReal x3815=(cj5*r21);
IkReal x3816=(cj5*r11);
IkReal x3817=(r10*sj5);
IkReal x3818=((1.0)*x3810);
IkReal x3819=((1.0)*x3811);
evalcond[0]=((((-1.0)*x3815*x3818))+(((-1.0)*x3814*x3818))+((r22*x3811)));
evalcond[1]=(((r12*x3811))+(((-1.0)*x3817*x3818))+(((-1.0)*x3816*x3818)));
evalcond[2]=((1.0)+(((-1.0)*x3813*x3818))+(((-1.0)*x3812*x3818))+((r02*x3811)));
evalcond[3]=((((-1.0)*r02*x3818))+(((-1.0)*x3813*x3819))+(((-1.0)*x3812*x3819)));
evalcond[4]=((((-1.0)*r22*x3818))+(((-1.0)*x3815*x3819))+(((-1.0)*x3814*x3819))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r12*x3818))+(((-1.0)*x3817*x3819))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x3816*x3819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3820=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x3820;
j4eval[1]=IKsign(x3820);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3821=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x3821;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x3821);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3822=cj5*cj5;
IkReal x3823=r00*r00;
IkReal x3824=(r00*sj5);
IkReal x3825=(cj5*r01);
IkReal x3826=((((2.0)*x3824*x3825))+x3823+((x3822*(r01*r01)))+(r02*r02)+(((-1.0)*x3822*x3823)));
j4eval[0]=x3826;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x3825))+(((-1.0)*x3824))))));
j4eval[2]=IKsign(x3826);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3827=cj5*cj5;
IkReal x3828=r00*r00;
IkReal x3829=(r00*sj5);
IkReal x3830=(cj5*r01);
CheckValue<IkReal> x3831=IKPowWithIntegerCheck(IKsign((((x3827*(r01*r01)))+x3828+(r02*r02)+(((2.0)*x3829*x3830))+(((-1.0)*x3827*x3828)))),-1);
if(!x3831.valid){
continue;
}
CheckValue<IkReal> x3832 = IKatan2WithCheck(IkReal(((((-1.0)*x3830))+(((-1.0)*x3829)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3831.value)))+(x3832.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3833=IKsin(j4);
IkReal x3834=IKcos(j4);
IkReal x3835=(r00*sj5);
IkReal x3836=(cj5*r01);
IkReal x3837=(r20*sj5);
IkReal x3838=(cj5*r21);
IkReal x3839=(cj5*r11);
IkReal x3840=(r10*sj5);
IkReal x3841=((1.0)*x3833);
IkReal x3842=((1.0)*x3834);
evalcond[0]=((((-1.0)*x3838*x3841))+(((-1.0)*x3837*x3841))+((r22*x3834)));
evalcond[1]=((((-1.0)*x3840*x3841))+(((-1.0)*x3839*x3841))+((r12*x3834)));
evalcond[2]=((-1.0)+((r02*x3834))+(((-1.0)*x3835*x3841))+(((-1.0)*x3836*x3841)));
evalcond[3]=((((-1.0)*r02*x3841))+(((-1.0)*x3835*x3842))+(((-1.0)*x3836*x3842)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x3838*x3842))+(((-1.0)*r22*x3841))+((cj1*cj2))+(((-1.0)*x3837*x3842)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x3840*x3842))+(((-1.0)*cj1*sj2))+(((-1.0)*x3839*x3842))+(((-1.0)*r12*x3841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3843 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3843.valid){
continue;
}
CheckValue<IkReal> x3844=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x3844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3843.value)+(((1.5707963267949)*(x3844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3845=IKsin(j4);
IkReal x3846=IKcos(j4);
IkReal x3847=(r00*sj5);
IkReal x3848=(cj5*r01);
IkReal x3849=(r20*sj5);
IkReal x3850=(cj5*r21);
IkReal x3851=(cj5*r11);
IkReal x3852=(r10*sj5);
IkReal x3853=((1.0)*x3845);
IkReal x3854=((1.0)*x3846);
evalcond[0]=((((-1.0)*x3850*x3853))+((r22*x3846))+(((-1.0)*x3849*x3853)));
evalcond[1]=(((r12*x3846))+(((-1.0)*x3852*x3853))+(((-1.0)*x3851*x3853)));
evalcond[2]=((-1.0)+(((-1.0)*x3848*x3853))+(((-1.0)*x3847*x3853))+((r02*x3846)));
evalcond[3]=((((-1.0)*x3848*x3854))+(((-1.0)*x3847*x3854))+(((-1.0)*r02*x3853)));
evalcond[4]=((((-1.0)*x3850*x3854))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x3853))+(((-1.0)*x3849*x3854)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3853))+(((-1.0)*x3852*x3854))+(((-1.0)*x3851*x3854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3855 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3855.valid){
continue;
}
CheckValue<IkReal> x3856=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x3856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3855.value)+(((1.5707963267949)*(x3856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3857=IKsin(j4);
IkReal x3858=IKcos(j4);
IkReal x3859=(r00*sj5);
IkReal x3860=(cj5*r01);
IkReal x3861=(r20*sj5);
IkReal x3862=(cj5*r21);
IkReal x3863=(cj5*r11);
IkReal x3864=(r10*sj5);
IkReal x3865=((1.0)*x3857);
IkReal x3866=((1.0)*x3858);
evalcond[0]=((((-1.0)*x3861*x3865))+(((-1.0)*x3862*x3865))+((r22*x3858)));
evalcond[1]=((((-1.0)*x3864*x3865))+(((-1.0)*x3863*x3865))+((r12*x3858)));
evalcond[2]=((-1.0)+(((-1.0)*x3860*x3865))+((r02*x3858))+(((-1.0)*x3859*x3865)));
evalcond[3]=((((-1.0)*x3860*x3866))+(((-1.0)*r02*x3865))+(((-1.0)*x3859*x3866)));
evalcond[4]=((((-1.0)*x3861*x3866))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x3862*x3866))+(((-1.0)*r22*x3865)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x3864*x3866))+(((-1.0)*x3863*x3866))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3868 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3868)==0){
continue;
}
IkReal x3867=pow(x3868,-0.5);
CheckValue<IkReal> x3869 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3869.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3869.value));
IkReal gconst109=(r10*x3867);
IkReal gconst110=(r11*x3867);
CheckValue<IkReal> x3870 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3870.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3870.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3873 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3873.valid){
continue;
}
IkReal x3871=((-1.0)*(x3873.value));
IkReal x3872=x3867;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3871;
IkReal gconst108=x3871;
IkReal gconst109=(r10*x3872);
IkReal gconst110=(r11*x3872);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3874=((1.0)*sj0);
CheckValue<IkReal> x3875 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3874))+((cj0*r12)))),IkReal((((cj0*gconst109*r10))+(((-1.0)*gconst109*r00*x3874))+((cj0*gconst110*r11))+(((-1.0)*gconst110*r01*x3874)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3875.valid){
continue;
}
CheckValue<IkReal> x3876=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r21))+((gconst110*r20)))),-1);
if(!x3876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3875.value)+(((1.5707963267949)*(x3876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3877=IKsin(j4);
IkReal x3878=IKcos(j4);
IkReal x3879=(cj2*sj1);
IkReal x3880=(gconst110*r11);
IkReal x3881=(gconst109*r00);
IkReal x3882=(gconst109*r20);
IkReal x3883=(gconst110*r21);
IkReal x3884=(gconst110*r01);
IkReal x3885=(gconst109*r10);
IkReal x3886=(cj1*sj2);
IkReal x3887=((1.0)*x3877);
IkReal x3888=((1.0)*x3878);
evalcond[0]=((((-1.0)*x3883*x3887))+((r22*x3878))+(((-1.0)*x3882*x3887)));
evalcond[1]=(cj0+(((-1.0)*x3884*x3887))+((r02*x3878))+(((-1.0)*x3881*x3887)));
evalcond[2]=(sj0+(((-1.0)*x3880*x3887))+(((-1.0)*x3885*x3887))+((r12*x3878)));
evalcond[3]=((((-1.0)*x3883*x3888))+(((-1.0)*r22*x3887))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x3882*x3888)));
evalcond[4]=((((-1.0)*r02*x3887))+(((-1.0)*sj0*x3886))+((sj0*x3879))+(((-1.0)*x3884*x3888))+(((-1.0)*x3881*x3888)));
evalcond[5]=((((-1.0)*x3880*x3888))+((cj0*x3886))+(((-1.0)*x3885*x3888))+(((-1.0)*cj0*x3879))+(((-1.0)*r12*x3887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3889=IKPowWithIntegerCheck(IKsign((((gconst110*r00))+(((-1.0)*gconst109*r01)))),-1);
if(!x3889.valid){
continue;
}
CheckValue<IkReal> x3890 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r20*sj0))+((gconst110*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3889.value)))+(x3890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3891=IKsin(j4);
IkReal x3892=IKcos(j4);
IkReal x3893=(cj2*sj1);
IkReal x3894=(gconst110*r11);
IkReal x3895=(gconst109*r00);
IkReal x3896=(gconst109*r20);
IkReal x3897=(gconst110*r21);
IkReal x3898=(gconst110*r01);
IkReal x3899=(gconst109*r10);
IkReal x3900=(cj1*sj2);
IkReal x3901=((1.0)*x3891);
IkReal x3902=((1.0)*x3892);
evalcond[0]=((((-1.0)*x3897*x3901))+((r22*x3892))+(((-1.0)*x3896*x3901)));
evalcond[1]=(cj0+(((-1.0)*x3898*x3901))+(((-1.0)*x3895*x3901))+((r02*x3892)));
evalcond[2]=(sj0+(((-1.0)*x3894*x3901))+(((-1.0)*x3899*x3901))+((r12*x3892)));
evalcond[3]=((((-1.0)*x3897*x3902))+(((-1.0)*r22*x3901))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x3896*x3902)));
evalcond[4]=(((sj0*x3893))+(((-1.0)*x3898*x3902))+(((-1.0)*x3895*x3902))+(((-1.0)*r02*x3901))+(((-1.0)*sj0*x3900)));
evalcond[5]=((((-1.0)*r12*x3901))+(((-1.0)*x3894*x3902))+((cj0*x3900))+(((-1.0)*x3899*x3902))+(((-1.0)*cj0*x3893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3905 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3905)==0){
continue;
}
IkReal x3903=pow(x3905,-0.5);
IkReal x3904=((-1.0)*x3903);
CheckValue<IkReal> x3906 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3906.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3906.value))));
IkReal gconst112=(r10*x3904);
IkReal gconst113=(r11*x3904);
CheckValue<IkReal> x3907 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3907.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3907.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x3911 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3911.valid){
continue;
}
IkReal x3908=((1.0)*(x3911.value));
IkReal x3909=x3903;
IkReal x3910=((-1.0)*x3909);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3908)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3908)));
IkReal gconst112=(r10*x3910);
IkReal gconst113=(r11*x3910);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3915 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3915.valid){
continue;
}
IkReal x3912=((1.0)*(x3915.value));
IkReal x3913=x3903;
IkReal x3914=((-1.0)*x3913);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3912)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3912)));
IkReal gconst112=(r10*x3914);
IkReal gconst113=(r11*x3914);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3919 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3919.valid){
continue;
}
IkReal x3916=((1.0)*(x3919.value));
IkReal x3917=x3903;
IkReal x3918=((-1.0)*x3917);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3916)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3916)));
IkReal gconst112=(r10*x3918);
IkReal gconst113=(r11*x3918);
IkReal x3920=r12*r12;
IkReal x3921=(r02*sj0);
IkReal x3922=((1.0)*x3920);
CheckValue<IkReal> x3926=IKPowWithIntegerCheck(((-1.0)+x3920),-1);
if(!x3926.valid){
continue;
}
IkReal x3923=x3926.value;
if((((1.0)+(((-1.0)*x3922)))) < -0.00001)
continue;
IkReal x3924=IKsqrt(((1.0)+(((-1.0)*x3922))));
IkReal x3925=(cj0*x3923*x3924);
j4eval[0]=((IKabs(((((-1.0)*x3921))+((cj0*r12)))))+(IKabs(((((-1.0)*x3922*x3925))+((r12*x3921*x3923*x3924))+x3925))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3927=((1.0)*sj0);
CheckValue<IkReal> x3928=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r21))+((gconst113*r20)))),-1);
if(!x3928.valid){
continue;
}
CheckValue<IkReal> x3929 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3927))+((cj0*r12)))),IkReal((((cj0*gconst112*r10))+((cj0*gconst113*r11))+(((-1.0)*gconst112*r00*x3927))+(((-1.0)*gconst113*r01*x3927)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3928.value)))+(x3929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3930=IKsin(j4);
IkReal x3931=IKcos(j4);
IkReal x3932=(cj2*sj1);
IkReal x3933=(gconst113*r11);
IkReal x3934=(gconst113*r21);
IkReal x3935=(cj1*sj2);
IkReal x3936=((1.0)*gconst113*r01);
IkReal x3937=((1.0)*x3930);
IkReal x3938=((1.0)*x3931);
IkReal x3939=(gconst112*x3938);
IkReal x3940=(gconst112*x3937);
evalcond[0]=(((r22*x3931))+(((-1.0)*x3934*x3937))+(((-1.0)*r20*x3940)));
evalcond[1]=(cj0+(((-1.0)*r00*x3940))+(((-1.0)*x3930*x3936))+((r02*x3931)));
evalcond[2]=(sj0+(((-1.0)*x3933*x3937))+(((-1.0)*r10*x3940))+((r12*x3931)));
evalcond[3]=((((-1.0)*x3934*x3938))+((sj1*sj2))+(((-1.0)*r22*x3937))+(((-1.0)*r20*x3939))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r00*x3939))+((sj0*x3932))+(((-1.0)*sj0*x3935))+(((-1.0)*x3931*x3936))+(((-1.0)*r02*x3937)));
evalcond[5]=(((cj0*x3935))+(((-1.0)*cj0*x3932))+(((-1.0)*x3933*x3938))+(((-1.0)*r12*x3937))+(((-1.0)*r10*x3939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3941 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r20*sj0))+((gconst113*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3941.valid){
continue;
}
CheckValue<IkReal> x3942=IKPowWithIntegerCheck(IKsign((((gconst113*r00))+(((-1.0)*gconst112*r01)))),-1);
if(!x3942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3941.value)+(((1.5707963267949)*(x3942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3943=IKsin(j4);
IkReal x3944=IKcos(j4);
IkReal x3945=(cj2*sj1);
IkReal x3946=(gconst113*r11);
IkReal x3947=(gconst113*r21);
IkReal x3948=(cj1*sj2);
IkReal x3949=((1.0)*gconst113*r01);
IkReal x3950=((1.0)*x3943);
IkReal x3951=((1.0)*x3944);
IkReal x3952=(gconst112*x3951);
IkReal x3953=(gconst112*x3950);
evalcond[0]=(((r22*x3944))+(((-1.0)*r20*x3953))+(((-1.0)*x3947*x3950)));
evalcond[1]=(cj0+(((-1.0)*r00*x3953))+(((-1.0)*x3943*x3949))+((r02*x3944)));
evalcond[2]=(sj0+(((-1.0)*x3946*x3950))+((r12*x3944))+(((-1.0)*r10*x3953)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x3950))+(((-1.0)*r20*x3952))+((cj1*cj2))+(((-1.0)*x3947*x3951)));
evalcond[4]=(((sj0*x3945))+(((-1.0)*r00*x3952))+(((-1.0)*sj0*x3948))+(((-1.0)*r02*x3950))+(((-1.0)*x3944*x3949)));
evalcond[5]=(((cj0*x3948))+(((-1.0)*x3946*x3951))+(((-1.0)*cj0*x3945))+(((-1.0)*r12*x3950))+(((-1.0)*r10*x3952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3954=IKPowWithIntegerCheck(IKsign((((gconst112*r11))+(((-1.0)*gconst113*r10)))),-1);
if(!x3954.valid){
continue;
}
CheckValue<IkReal> x3955 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r20))+((cj0*gconst113*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3954.value)))+(x3955.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3956=IKsin(j4);
IkReal x3957=IKcos(j4);
IkReal x3958=(cj2*sj1);
IkReal x3959=(gconst113*r11);
IkReal x3960=(gconst113*r21);
IkReal x3961=(cj1*sj2);
IkReal x3962=((1.0)*gconst113*r01);
IkReal x3963=((1.0)*x3956);
IkReal x3964=((1.0)*x3957);
IkReal x3965=(gconst112*x3964);
IkReal x3966=(gconst112*x3963);
evalcond[0]=((((-1.0)*r20*x3966))+(((-1.0)*x3960*x3963))+((r22*x3957)));
evalcond[1]=(cj0+(((-1.0)*x3956*x3962))+((r02*x3957))+(((-1.0)*r00*x3966)));
evalcond[2]=(sj0+(((-1.0)*r10*x3966))+(((-1.0)*x3959*x3963))+((r12*x3957)));
evalcond[3]=((((-1.0)*r20*x3965))+((sj1*sj2))+(((-1.0)*x3960*x3964))+((cj1*cj2))+(((-1.0)*r22*x3963)));
evalcond[4]=((((-1.0)*r02*x3963))+((sj0*x3958))+(((-1.0)*x3957*x3962))+(((-1.0)*r00*x3965))+(((-1.0)*sj0*x3961)));
evalcond[5]=((((-1.0)*cj0*x3958))+(((-1.0)*r10*x3965))+(((-1.0)*x3959*x3964))+((cj0*x3961))+(((-1.0)*r12*x3963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3967=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x3967;
j4eval[1]=IKsign(x3967);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3968=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x3968;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x3968);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3969=cj5*cj5;
IkReal x3970=r10*r10;
IkReal x3971=(cj5*r11);
IkReal x3972=(r10*sj5);
IkReal x3973=((((-2.0)*x3971*x3972))+(((-1.0)*(r12*r12)))+((x3969*x3970))+(((-1.0)*x3970))+(((-1.0)*x3969*(r11*r11))));
j4eval[0]=x3973;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x3972))+(((-1.0)*x3971))))));
j4eval[2]=IKsign(x3973);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3974=cj5*cj5;
IkReal x3975=r10*r10;
IkReal x3976=(cj5*r11);
IkReal x3977=(r10*sj5);
CheckValue<IkReal> x3978=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3974*(r11*r11)))+((x3974*x3975))+(((-1.0)*(r12*r12)))+(((-2.0)*x3976*x3977))+(((-1.0)*x3975)))),-1);
if(!x3978.valid){
continue;
}
CheckValue<IkReal> x3979 = IKatan2WithCheck(IkReal(((((-1.0)*x3977))+(((-1.0)*x3976)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x3979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3978.value)))+(x3979.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3980=IKsin(j4);
IkReal x3981=IKcos(j4);
IkReal x3982=(r00*sj5);
IkReal x3983=(cj5*r01);
IkReal x3984=(r20*sj5);
IkReal x3985=(cj5*r21);
IkReal x3986=(cj5*r11);
IkReal x3987=(r10*sj5);
IkReal x3988=((1.0)*x3980);
IkReal x3989=((1.0)*x3981);
evalcond[0]=((((-1.0)*x3984*x3988))+(((-1.0)*x3985*x3988))+((r22*x3981)));
evalcond[1]=((((-1.0)*x3982*x3988))+(((-1.0)*x3983*x3988))+((r02*x3981)));
evalcond[2]=((1.0)+(((-1.0)*x3986*x3988))+(((-1.0)*x3987*x3988))+((r12*x3981)));
evalcond[3]=((((-1.0)*r12*x3988))+(((-1.0)*x3986*x3989))+(((-1.0)*x3987*x3989)));
evalcond[4]=((((-1.0)*x3984*x3989))+(((-1.0)*x3985*x3989))+(((-1.0)*r22*x3988))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x3982*x3989))+(((-1.0)*x3983*x3989))+(((-1.0)*r02*x3988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3990 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3990.valid){
continue;
}
CheckValue<IkReal> x3991=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x3991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3990.value)+(((1.5707963267949)*(x3991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3992=IKsin(j4);
IkReal x3993=IKcos(j4);
IkReal x3994=(r00*sj5);
IkReal x3995=(cj5*r01);
IkReal x3996=(r20*sj5);
IkReal x3997=(cj5*r21);
IkReal x3998=(cj5*r11);
IkReal x3999=(r10*sj5);
IkReal x4000=((1.0)*x3992);
IkReal x4001=((1.0)*x3993);
evalcond[0]=(((r22*x3993))+(((-1.0)*x3996*x4000))+(((-1.0)*x3997*x4000)));
evalcond[1]=((((-1.0)*x3994*x4000))+(((-1.0)*x3995*x4000))+((r02*x3993)));
evalcond[2]=((1.0)+(((-1.0)*x3998*x4000))+(((-1.0)*x3999*x4000))+((r12*x3993)));
evalcond[3]=((((-1.0)*x3998*x4001))+(((-1.0)*x3999*x4001))+(((-1.0)*r12*x4000)));
evalcond[4]=((((-1.0)*r22*x4000))+((sj1*sj2))+(((-1.0)*x3996*x4001))+(((-1.0)*x3997*x4001))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r02*x4000))+(((-1.0)*cj1*sj2))+(((-1.0)*x3994*x4001))+(((-1.0)*x3995*x4001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4002=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x4002.valid){
continue;
}
CheckValue<IkReal> x4003 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4002.value)))+(x4003.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4004=IKsin(j4);
IkReal x4005=IKcos(j4);
IkReal x4006=(r00*sj5);
IkReal x4007=(cj5*r01);
IkReal x4008=(r20*sj5);
IkReal x4009=(cj5*r21);
IkReal x4010=(cj5*r11);
IkReal x4011=(r10*sj5);
IkReal x4012=((1.0)*x4004);
IkReal x4013=((1.0)*x4005);
evalcond[0]=(((r22*x4005))+(((-1.0)*x4008*x4012))+(((-1.0)*x4009*x4012)));
evalcond[1]=(((r02*x4005))+(((-1.0)*x4006*x4012))+(((-1.0)*x4007*x4012)));
evalcond[2]=((1.0)+((r12*x4005))+(((-1.0)*x4011*x4012))+(((-1.0)*x4010*x4012)));
evalcond[3]=((((-1.0)*r12*x4012))+(((-1.0)*x4011*x4013))+(((-1.0)*x4010*x4013)));
evalcond[4]=((((-1.0)*r22*x4012))+((sj1*sj2))+(((-1.0)*x4008*x4013))+(((-1.0)*x4009*x4013))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r02*x4012))+(((-1.0)*cj1*sj2))+(((-1.0)*x4006*x4013))+(((-1.0)*x4007*x4013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4014=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x4014;
j4eval[1]=IKsign(x4014);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4015=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x4015;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x4015);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4016=cj5*cj5;
IkReal x4017=r10*r10;
IkReal x4018=(cj5*r11);
IkReal x4019=(r10*sj5);
IkReal x4020=((r12*r12)+((x4016*(r11*r11)))+(((2.0)*x4018*x4019))+x4017+(((-1.0)*x4016*x4017)));
j4eval[0]=x4020;
j4eval[1]=IKsign(x4020);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x4019))+(((-1.0)*x4018))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4021=cj5*cj5;
IkReal x4022=r10*r10;
IkReal x4023=(cj5*r11);
IkReal x4024=(r10*sj5);
CheckValue<IkReal> x4025=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x4021*(r11*r11)))+(((2.0)*x4023*x4024))+x4022+(((-1.0)*x4021*x4022)))),-1);
if(!x4025.valid){
continue;
}
CheckValue<IkReal> x4026 = IKatan2WithCheck(IkReal(((((-1.0)*x4024))+(((-1.0)*x4023)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x4026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4025.value)))+(x4026.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4027=IKsin(j4);
IkReal x4028=IKcos(j4);
IkReal x4029=(r00*sj5);
IkReal x4030=(cj5*r01);
IkReal x4031=(r20*sj5);
IkReal x4032=(cj5*r21);
IkReal x4033=(cj5*r11);
IkReal x4034=(r10*sj5);
IkReal x4035=((1.0)*x4027);
IkReal x4036=((1.0)*x4028);
evalcond[0]=((((-1.0)*x4031*x4035))+((r22*x4028))+(((-1.0)*x4032*x4035)));
evalcond[1]=((((-1.0)*x4030*x4035))+(((-1.0)*x4029*x4035))+((r02*x4028)));
evalcond[2]=((-1.0)+(((-1.0)*x4034*x4035))+((r12*x4028))+(((-1.0)*x4033*x4035)));
evalcond[3]=((((-1.0)*x4034*x4036))+(((-1.0)*r12*x4035))+(((-1.0)*x4033*x4036)));
evalcond[4]=((((-1.0)*x4031*x4036))+(((-1.0)*r22*x4035))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x4032*x4036)));
evalcond[5]=((((-1.0)*x4030*x4036))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x4029*x4036))+(((-1.0)*r02*x4035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4037 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4037.valid){
continue;
}
CheckValue<IkReal> x4038=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x4038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4037.value)+(((1.5707963267949)*(x4038.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4039=IKsin(j4);
IkReal x4040=IKcos(j4);
IkReal x4041=(r00*sj5);
IkReal x4042=(cj5*r01);
IkReal x4043=(r20*sj5);
IkReal x4044=(cj5*r21);
IkReal x4045=(cj5*r11);
IkReal x4046=(r10*sj5);
IkReal x4047=((1.0)*x4039);
IkReal x4048=((1.0)*x4040);
evalcond[0]=(((r22*x4040))+(((-1.0)*x4043*x4047))+(((-1.0)*x4044*x4047)));
evalcond[1]=(((r02*x4040))+(((-1.0)*x4041*x4047))+(((-1.0)*x4042*x4047)));
evalcond[2]=((-1.0)+(((-1.0)*x4045*x4047))+(((-1.0)*x4046*x4047))+((r12*x4040)));
evalcond[3]=((((-1.0)*x4045*x4048))+(((-1.0)*r12*x4047))+(((-1.0)*x4046*x4048)));
evalcond[4]=((((-1.0)*x4043*x4048))+(((-1.0)*x4044*x4048))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x4047)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x4041*x4048))+(((-1.0)*x4042*x4048))+(((-1.0)*r02*x4047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4049 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4049.valid){
continue;
}
CheckValue<IkReal> x4050=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x4050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4049.value)+(((1.5707963267949)*(x4050.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4051=IKsin(j4);
IkReal x4052=IKcos(j4);
IkReal x4053=(r00*sj5);
IkReal x4054=(cj5*r01);
IkReal x4055=(r20*sj5);
IkReal x4056=(cj5*r21);
IkReal x4057=(cj5*r11);
IkReal x4058=(r10*sj5);
IkReal x4059=((1.0)*x4051);
IkReal x4060=((1.0)*x4052);
evalcond[0]=((((-1.0)*x4055*x4059))+((r22*x4052))+(((-1.0)*x4056*x4059)));
evalcond[1]=(((r02*x4052))+(((-1.0)*x4053*x4059))+(((-1.0)*x4054*x4059)));
evalcond[2]=((-1.0)+((r12*x4052))+(((-1.0)*x4058*x4059))+(((-1.0)*x4057*x4059)));
evalcond[3]=((((-1.0)*r12*x4059))+(((-1.0)*x4058*x4060))+(((-1.0)*x4057*x4060)));
evalcond[4]=((((-1.0)*x4055*x4060))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x4059))+(((-1.0)*x4056*x4060)));
evalcond[5]=((((-1.0)*x4053*x4060))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x4054*x4060))+(((-1.0)*r02*x4059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4061=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4061);
rxp0_2=(py*r00);
rxp1_0=(r21*x4061);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4062=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4062);
rxp0_2=(py*r00);
rxp1_0=(r21*x4062);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4063=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4063);
rxp0_2=(py*r00);
rxp1_0=(r21*x4063);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4066=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x4066.valid){
continue;
}
IkReal x4064=x4066.value;
IkReal x4065=(sj0*x4064);
cj4array[0]=((((-1.0)*cj2*sj1*x4065))+((cj1*sj2*x4065)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4067=IKsin(j4);
IkReal x4068=IKcos(j4);
IkReal x4069=(r20*sj5);
IkReal x4070=((1.0)*cj5*r21);
IkReal x4071=((1.0)*x4067);
evalcond[0]=((-1.0)*r12*x4067);
evalcond[1]=(sj0+((r12*x4068)));
evalcond[2]=((((-1.0)*x4069*x4071))+(((-1.0)*x4067*x4070)));
evalcond[3]=((((-1.0)*r00*sj5*x4071))+(((-1.0)*cj5*r01*x4071)));
evalcond[4]=((((-1.0)*x4068*x4070))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x4068*x4069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4074=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x4074.valid){
continue;
}
IkReal x4072=x4074.value;
IkReal x4073=((1.0)*x4072);
cj4array[0]=((((-1.0)*sj1*sj2*x4073))+(((-1.0)*cj1*cj2*x4073)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4075=IKsin(j4);
IkReal x4076=IKcos(j4);
IkReal x4077=((1.0)*cj5);
IkReal x4078=((1.0)*r00*sj5);
evalcond[0]=((-1.0)*r12*x4075);
evalcond[1]=(sj0+((r12*x4076)));
evalcond[2]=((((-1.0)*r20*sj5*x4075))+(((-1.0)*r21*x4075*x4077)));
evalcond[3]=((((-1.0)*x4075*x4078))+(((-1.0)*r01*x4075*x4077)));
evalcond[4]=((((-1.0)*r01*x4076*x4077))+(((-1.0)*cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*x4076*x4078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4079=IKPowWithIntegerCheck(r12,-1);
if(!x4079.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4079.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4080=IKsin(j4);
IkReal x4081=IKcos(j4);
IkReal x4082=((1.0)*cj5);
IkReal x4083=((1.0)*sj5);
evalcond[0]=((-1.0)*r12*x4080);
evalcond[1]=((((-1.0)*r21*x4080*x4082))+(((-1.0)*r20*x4080*x4083)));
evalcond[2]=((((-1.0)*r01*x4080*x4082))+(((-1.0)*r00*x4080*x4083)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r21*x4081*x4082))+((cj1*cj2))+(((-1.0)*r20*x4081*x4083)));
evalcond[4]=((((-1.0)*cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*r01*x4081*x4082))+(((-1.0)*r00*x4081*x4083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4084=((1.0)*sj0);
CheckValue<IkReal> x4085 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4084))+((cj0*r12)))),IkReal((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x4084))+(((-1.0)*r00*sj5*x4084))+((cj0*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4085.valid){
continue;
}
CheckValue<IkReal> x4086=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x4086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4085.value)+(((1.5707963267949)*(x4086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4087=IKsin(j4);
IkReal x4088=IKcos(j4);
IkReal x4089=(cj2*sj1);
IkReal x4090=(r00*sj5);
IkReal x4091=(cj5*r01);
IkReal x4092=(r20*sj5);
IkReal x4093=(cj5*r21);
IkReal x4094=(cj5*r11);
IkReal x4095=(r10*sj5);
IkReal x4096=(cj1*sj2);
IkReal x4097=((1.0)*x4087);
IkReal x4098=((1.0)*x4088);
evalcond[0]=((((-1.0)*x4093*x4097))+(((-1.0)*x4092*x4097))+((r22*x4088)));
evalcond[1]=(cj0+(((-1.0)*x4090*x4097))+((r02*x4088))+(((-1.0)*x4091*x4097)));
evalcond[2]=(sj0+((r12*x4088))+(((-1.0)*x4095*x4097))+(((-1.0)*x4094*x4097)));
evalcond[3]=((((-1.0)*r22*x4097))+((sj1*sj2))+(((-1.0)*x4093*x4098))+(((-1.0)*x4092*x4098))+((cj1*cj2)));
evalcond[4]=((((-1.0)*sj0*x4096))+(((-1.0)*x4090*x4098))+(((-1.0)*r02*x4097))+((sj0*x4089))+(((-1.0)*x4091*x4098)));
evalcond[5]=((((-1.0)*r12*x4097))+((cj0*x4096))+(((-1.0)*x4095*x4098))+(((-1.0)*cj0*x4089))+(((-1.0)*x4094*x4098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4099=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x4099.valid){
continue;
}
CheckValue<IkReal> x4100 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4099.value)))+(x4100.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4101=IKsin(j4);
IkReal x4102=IKcos(j4);
IkReal x4103=(cj2*sj1);
IkReal x4104=(r00*sj5);
IkReal x4105=(cj5*r01);
IkReal x4106=(r20*sj5);
IkReal x4107=(cj5*r21);
IkReal x4108=(cj5*r11);
IkReal x4109=(r10*sj5);
IkReal x4110=(cj1*sj2);
IkReal x4111=((1.0)*x4101);
IkReal x4112=((1.0)*x4102);
evalcond[0]=(((r22*x4102))+(((-1.0)*x4107*x4111))+(((-1.0)*x4106*x4111)));
evalcond[1]=((((-1.0)*x4105*x4111))+(((-1.0)*x4104*x4111))+cj0+((r02*x4102)));
evalcond[2]=((((-1.0)*x4109*x4111))+sj0+((r12*x4102))+(((-1.0)*x4108*x4111)));
evalcond[3]=((((-1.0)*r22*x4111))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x4107*x4112))+(((-1.0)*x4106*x4112)));
evalcond[4]=((((-1.0)*x4105*x4112))+(((-1.0)*x4104*x4112))+(((-1.0)*sj0*x4110))+((sj0*x4103))+(((-1.0)*r02*x4111)));
evalcond[5]=((((-1.0)*x4109*x4112))+(((-1.0)*r12*x4111))+((cj0*x4110))+(((-1.0)*cj0*x4103))+(((-1.0)*x4108*x4112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4113 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4113.valid){
continue;
}
CheckValue<IkReal> x4114=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x4114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4113.value)+(((1.5707963267949)*(x4114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4115=IKsin(j4);
IkReal x4116=IKcos(j4);
IkReal x4117=(cj2*sj1);
IkReal x4118=(r00*sj5);
IkReal x4119=(cj5*r01);
IkReal x4120=(r20*sj5);
IkReal x4121=(cj5*r21);
IkReal x4122=(cj5*r11);
IkReal x4123=(r10*sj5);
IkReal x4124=(cj1*sj2);
IkReal x4125=((1.0)*x4115);
IkReal x4126=((1.0)*x4116);
evalcond[0]=((((-1.0)*x4121*x4125))+((r22*x4116))+(((-1.0)*x4120*x4125)));
evalcond[1]=(cj0+(((-1.0)*x4119*x4125))+((r02*x4116))+(((-1.0)*x4118*x4125)));
evalcond[2]=(((r12*x4116))+sj0+(((-1.0)*x4123*x4125))+(((-1.0)*x4122*x4125)));
evalcond[3]=((((-1.0)*r22*x4125))+((sj1*sj2))+(((-1.0)*x4121*x4126))+((cj1*cj2))+(((-1.0)*x4120*x4126)));
evalcond[4]=(((sj0*x4117))+(((-1.0)*x4119*x4126))+(((-1.0)*sj0*x4124))+(((-1.0)*x4118*x4126))+(((-1.0)*r02*x4125)));
evalcond[5]=((((-1.0)*r12*x4125))+((cj0*x4124))+(((-1.0)*x4123*x4126))+(((-1.0)*cj0*x4117))+(((-1.0)*x4122*x4126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4127=(((cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4127;
j0eval[1]=IKsign(x4127);
j0eval[2]=((IKabs((((cj5*r10))+(((-1.0)*r11*sj5)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4128=cj5*cj5;
IkReal x4129=r20*r20;
IkReal x4130=(cj5*r21);
IkReal x4131=(cj1*sj2);
IkReal x4132=(r20*sj5);
IkReal x4133=((1.0)*cj2*sj1);
IkReal x4134=((r22*r22)+(((2.0)*x4130*x4132))+(((-1.0)*x4128*x4129))+((x4128*(r21*r21)))+x4129);
j4eval[0]=x4134;
j4eval[1]=IKsign(x4134);
j4eval[2]=((IKabs((((r22*x4131))+(((-1.0)*r22*x4133)))))+(IKabs(((((-1.0)*x4130*x4133))+((x4130*x4131))+((x4131*x4132))+(((-1.0)*x4132*x4133))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(((cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.4876660341556)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.4876660341556)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.4876660341556)*py))+IKsqr(((9.4876660341556)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.4876660341556)*py), ((9.4876660341556)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1054)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1054)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4135=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x4135;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x4135);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4136=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x4136;
j4eval[1]=IKsign(x4136);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4137=((1.0)*sj0);
IkReal x4138=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x4138;
j4eval[1]=((IKabs(((((-1.0)*r02*x4137))+((cj0*r12)))))+(IKabs((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x4137))+(((-1.0)*r00*sj5*x4137))+((cj0*r10*sj5))))));
j4eval[2]=IKsign(x4138);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4139=((1.0)*sj0);
CheckValue<IkReal> x4140 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4139))+((cj0*r12)))),IkReal((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x4139))+(((-1.0)*r00*sj5*x4139))+((cj0*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4140.valid){
continue;
}
CheckValue<IkReal> x4141=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x4141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4140.value)+(((1.5707963267949)*(x4141.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4142=IKsin(j4);
IkReal x4143=IKcos(j4);
IkReal x4144=((1.0)*cj5);
IkReal x4145=(r00*sj5);
IkReal x4146=(r10*sj5);
IkReal x4147=(r20*sj5);
IkReal x4148=((1.0)*x4142);
IkReal x4149=((1.0)*x4143);
evalcond[0]=((((-1.0)*x4147*x4148))+((r22*x4143))+(((-1.0)*r21*x4142*x4144)));
evalcond[1]=(((r02*x4143))+cj0+(((-1.0)*x4145*x4148))+(((-1.0)*r01*x4142*x4144)));
evalcond[2]=(sj0+(((-1.0)*x4146*x4148))+((r12*x4143))+(((-1.0)*r11*x4142*x4144)));
evalcond[3]=((((-1.0)*r21*x4143*x4144))+(((-1.0)*x4147*x4149))+(((-1.0)*r22*x4148)));
evalcond[4]=(sj0+(((-1.0)*r02*x4148))+(((-1.0)*x4145*x4149))+(((-1.0)*r01*x4143*x4144)));
evalcond[5]=((((-1.0)*x4146*x4149))+(((-1.0)*r11*x4143*x4144))+(((-1.0)*r12*x4148))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4150=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x4150.valid){
continue;
}
CheckValue<IkReal> x4151 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4150.value)))+(x4151.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4152=IKsin(j4);
IkReal x4153=IKcos(j4);
IkReal x4154=((1.0)*cj5);
IkReal x4155=(r00*sj5);
IkReal x4156=(r10*sj5);
IkReal x4157=(r20*sj5);
IkReal x4158=((1.0)*x4152);
IkReal x4159=((1.0)*x4153);
evalcond[0]=(((r22*x4153))+(((-1.0)*x4157*x4158))+(((-1.0)*r21*x4152*x4154)));
evalcond[1]=(((r02*x4153))+cj0+(((-1.0)*x4155*x4158))+(((-1.0)*r01*x4152*x4154)));
evalcond[2]=(sj0+((r12*x4153))+(((-1.0)*x4156*x4158))+(((-1.0)*r11*x4152*x4154)));
evalcond[3]=((((-1.0)*r21*x4153*x4154))+(((-1.0)*x4157*x4159))+(((-1.0)*r22*x4158)));
evalcond[4]=(sj0+(((-1.0)*x4155*x4159))+(((-1.0)*r02*x4158))+(((-1.0)*r01*x4153*x4154)));
evalcond[5]=((((-1.0)*x4156*x4159))+(((-1.0)*r12*x4158))+(((-1.0)*cj0))+(((-1.0)*r11*x4153*x4154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4160 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4160.valid){
continue;
}
CheckValue<IkReal> x4161=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x4161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4160.value)+(((1.5707963267949)*(x4161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4162=IKsin(j4);
IkReal x4163=IKcos(j4);
IkReal x4164=((1.0)*cj5);
IkReal x4165=(r00*sj5);
IkReal x4166=(r10*sj5);
IkReal x4167=(r20*sj5);
IkReal x4168=((1.0)*x4162);
IkReal x4169=((1.0)*x4163);
evalcond[0]=(((r22*x4163))+(((-1.0)*r21*x4162*x4164))+(((-1.0)*x4167*x4168)));
evalcond[1]=((((-1.0)*x4165*x4168))+cj0+((r02*x4163))+(((-1.0)*r01*x4162*x4164)));
evalcond[2]=(sj0+(((-1.0)*r11*x4162*x4164))+((r12*x4163))+(((-1.0)*x4166*x4168)));
evalcond[3]=((((-1.0)*r21*x4163*x4164))+(((-1.0)*x4167*x4169))+(((-1.0)*r22*x4168)));
evalcond[4]=((((-1.0)*r01*x4163*x4164))+(((-1.0)*r02*x4168))+sj0+(((-1.0)*x4165*x4169)));
evalcond[5]=((((-1.0)*r12*x4168))+(((-1.0)*r11*x4163*x4164))+(((-1.0)*x4166*x4169))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.4876660341556)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.4876660341556)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.4876660341556)*py))+IKsqr(((9.4876660341556)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.4876660341556)*py), ((9.4876660341556)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1054)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1054)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4170=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x4170;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x4170);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4171=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x4171;
j4eval[1]=IKsign(x4171);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4172=((1.0)*sj0);
IkReal x4173=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x4173;
j4eval[1]=((IKabs(((((-1.0)*r00*sj5*x4172))+((cj0*cj5*r11))+((cj0*r10*sj5))+(((-1.0)*cj5*r01*x4172)))))+(IKabs(((((-1.0)*r02*x4172))+((cj0*r12))))));
j4eval[2]=IKsign(x4173);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4174=((1.0)*sj0);
CheckValue<IkReal> x4175 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4174))+((cj0*r12)))),IkReal(((((-1.0)*r00*sj5*x4174))+((cj0*cj5*r11))+((cj0*r10*sj5))+(((-1.0)*cj5*r01*x4174)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4175.valid){
continue;
}
CheckValue<IkReal> x4176=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x4176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4175.value)+(((1.5707963267949)*(x4176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4177=IKsin(j4);
IkReal x4178=IKcos(j4);
IkReal x4179=((1.0)*cj5);
IkReal x4180=(r00*sj5);
IkReal x4181=(r10*sj5);
IkReal x4182=(r20*sj5);
IkReal x4183=((1.0)*x4177);
IkReal x4184=((1.0)*x4178);
evalcond[0]=((((-1.0)*r21*x4177*x4179))+((r22*x4178))+(((-1.0)*x4182*x4183)));
evalcond[1]=((((-1.0)*r01*x4177*x4179))+cj0+(((-1.0)*x4180*x4183))+((r02*x4178)));
evalcond[2]=((((-1.0)*x4181*x4183))+sj0+((r12*x4178))+(((-1.0)*r11*x4177*x4179)));
evalcond[3]=((((-1.0)*r22*x4183))+(((-1.0)*r21*x4178*x4179))+(((-1.0)*x4182*x4184)));
evalcond[4]=((((-1.0)*r11*x4178*x4179))+(((-1.0)*x4181*x4184))+(((-1.0)*r12*x4183))+cj0);
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4180*x4184))+(((-1.0)*r02*x4183))+(((-1.0)*r01*x4178*x4179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4185=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x4185.valid){
continue;
}
CheckValue<IkReal> x4186 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4185.value)))+(x4186.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4187=IKsin(j4);
IkReal x4188=IKcos(j4);
IkReal x4189=((1.0)*cj5);
IkReal x4190=(r00*sj5);
IkReal x4191=(r10*sj5);
IkReal x4192=(r20*sj5);
IkReal x4193=((1.0)*x4187);
IkReal x4194=((1.0)*x4188);
evalcond[0]=((((-1.0)*r21*x4187*x4189))+((r22*x4188))+(((-1.0)*x4192*x4193)));
evalcond[1]=(((r02*x4188))+cj0+(((-1.0)*x4190*x4193))+(((-1.0)*r01*x4187*x4189)));
evalcond[2]=(((r12*x4188))+sj0+(((-1.0)*r11*x4187*x4189))+(((-1.0)*x4191*x4193)));
evalcond[3]=((((-1.0)*r21*x4188*x4189))+(((-1.0)*r22*x4193))+(((-1.0)*x4192*x4194)));
evalcond[4]=((((-1.0)*r12*x4193))+(((-1.0)*r11*x4188*x4189))+cj0+(((-1.0)*x4191*x4194)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4193))+(((-1.0)*x4190*x4194))+(((-1.0)*r01*x4188*x4189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4195 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4195.valid){
continue;
}
CheckValue<IkReal> x4196=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x4196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4195.value)+(((1.5707963267949)*(x4196.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4197=IKsin(j4);
IkReal x4198=IKcos(j4);
IkReal x4199=((1.0)*cj5);
IkReal x4200=(r00*sj5);
IkReal x4201=(r10*sj5);
IkReal x4202=(r20*sj5);
IkReal x4203=((1.0)*x4197);
IkReal x4204=((1.0)*x4198);
evalcond[0]=((((-1.0)*r21*x4197*x4199))+((r22*x4198))+(((-1.0)*x4202*x4203)));
evalcond[1]=(((r02*x4198))+cj0+(((-1.0)*r01*x4197*x4199))+(((-1.0)*x4200*x4203)));
evalcond[2]=(((r12*x4198))+sj0+(((-1.0)*x4201*x4203))+(((-1.0)*r11*x4197*x4199)));
evalcond[3]=((((-1.0)*r22*x4203))+(((-1.0)*x4202*x4204))+(((-1.0)*r21*x4198*x4199)));
evalcond[4]=((((-1.0)*r12*x4203))+cj0+(((-1.0)*x4201*x4204))+(((-1.0)*r11*x4198*x4199)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4203))+(((-1.0)*r01*x4198*x4199))+(((-1.0)*x4200*x4204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.09829334475201)*px))+(((0.489292297647925)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.489292297647925)*px))+(((-2.09829334475201)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.09829334475201)*px))+(((0.489292297647925)*py))))+IKsqr(((((0.489292297647925)*px))+(((-2.09829334475201)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.09829334475201)*px))+(((0.489292297647925)*py))), ((((0.489292297647925)*px))+(((-2.09829334475201)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4205=IKsin(j0);
IkReal x4206=IKcos(j0);
evalcond[0]=((((0.1054)*x4206))+(((-1.0)*px))+(((0.452)*x4205)));
evalcond[1]=((((0.1054)*x4205))+(((-1.0)*py))+(((-0.452)*x4206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4207=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x4207;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x4207);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4208=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x4208;
j4eval[1]=IKsign(x4208);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4209=((1.0)*sj0);
IkReal x4210=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x4210;
j4eval[1]=((IKabs((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x4209))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x4209)))))+(IKabs(((((-1.0)*r02*x4209))+((cj0*r12))))));
j4eval[2]=IKsign(x4210);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4211=((1.0)*sj0);
CheckValue<IkReal> x4212=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x4212.valid){
continue;
}
CheckValue<IkReal> x4213 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4211))+((cj0*r12)))),IkReal(((((-1.0)*r00*sj5*x4211))+((cj0*cj5*r11))+(((-1.0)*cj5*r01*x4211))+((cj0*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4212.value)))+(x4213.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4214=IKsin(j4);
IkReal x4215=IKcos(j4);
IkReal x4216=((1.0)*cj5);
IkReal x4217=(r00*sj5);
IkReal x4218=(r10*sj5);
IkReal x4219=(r20*sj5);
IkReal x4220=((1.0)*x4214);
IkReal x4221=((1.0)*x4215);
evalcond[0]=((((-1.0)*r21*x4214*x4216))+((r22*x4215))+(((-1.0)*x4219*x4220)));
evalcond[1]=((((-1.0)*r01*x4214*x4216))+cj0+((r02*x4215))+(((-1.0)*x4217*x4220)));
evalcond[2]=(((r12*x4215))+sj0+(((-1.0)*x4218*x4220))+(((-1.0)*r11*x4214*x4216)));
evalcond[3]=((((-1.0)*r21*x4215*x4216))+(((-1.0)*r22*x4220))+(((-1.0)*x4219*x4221)));
evalcond[4]=(sj0+(((-1.0)*r01*x4215*x4216))+(((-1.0)*r02*x4220))+(((-1.0)*x4217*x4221)));
evalcond[5]=((((-1.0)*x4218*x4221))+(((-1.0)*r12*x4220))+(((-1.0)*r11*x4215*x4216))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4222=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x4222.valid){
continue;
}
CheckValue<IkReal> x4223 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4222.value)))+(x4223.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4224=IKsin(j4);
IkReal x4225=IKcos(j4);
IkReal x4226=((1.0)*cj5);
IkReal x4227=(r00*sj5);
IkReal x4228=(r10*sj5);
IkReal x4229=(r20*sj5);
IkReal x4230=((1.0)*x4224);
IkReal x4231=((1.0)*x4225);
evalcond[0]=((((-1.0)*r21*x4224*x4226))+((r22*x4225))+(((-1.0)*x4229*x4230)));
evalcond[1]=((((-1.0)*x4227*x4230))+cj0+((r02*x4225))+(((-1.0)*r01*x4224*x4226)));
evalcond[2]=(sj0+(((-1.0)*r11*x4224*x4226))+(((-1.0)*x4228*x4230))+((r12*x4225)));
evalcond[3]=((((-1.0)*r21*x4225*x4226))+(((-1.0)*r22*x4230))+(((-1.0)*x4229*x4231)));
evalcond[4]=(sj0+(((-1.0)*x4227*x4231))+(((-1.0)*r01*x4225*x4226))+(((-1.0)*r02*x4230)));
evalcond[5]=((((-1.0)*r12*x4230))+(((-1.0)*r11*x4225*x4226))+(((-1.0)*x4228*x4231))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4232 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4232.valid){
continue;
}
CheckValue<IkReal> x4233=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x4233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4232.value)+(((1.5707963267949)*(x4233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4234=IKsin(j4);
IkReal x4235=IKcos(j4);
IkReal x4236=((1.0)*cj5);
IkReal x4237=(r00*sj5);
IkReal x4238=(r10*sj5);
IkReal x4239=(r20*sj5);
IkReal x4240=((1.0)*x4234);
IkReal x4241=((1.0)*x4235);
evalcond[0]=((((-1.0)*r21*x4234*x4236))+((r22*x4235))+(((-1.0)*x4239*x4240)));
evalcond[1]=((((-1.0)*r01*x4234*x4236))+cj0+((r02*x4235))+(((-1.0)*x4237*x4240)));
evalcond[2]=(((r12*x4235))+sj0+(((-1.0)*r11*x4234*x4236))+(((-1.0)*x4238*x4240)));
evalcond[3]=((((-1.0)*r21*x4235*x4236))+(((-1.0)*r22*x4240))+(((-1.0)*x4239*x4241)));
evalcond[4]=(sj0+(((-1.0)*r01*x4235*x4236))+(((-1.0)*x4237*x4241))+(((-1.0)*r02*x4240)));
evalcond[5]=((((-1.0)*r11*x4235*x4236))+(((-1.0)*r12*x4240))+(((-1.0)*x4238*x4241))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.09829334475201)*px))+(((0.489292297647925)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.489292297647925)*px))+(((-2.09829334475201)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.09829334475201)*px))+(((0.489292297647925)*py))))+IKsqr(((((0.489292297647925)*px))+(((-2.09829334475201)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.09829334475201)*px))+(((0.489292297647925)*py))), ((((0.489292297647925)*px))+(((-2.09829334475201)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4242=IKsin(j0);
IkReal x4243=IKcos(j0);
evalcond[0]=((((0.1054)*x4243))+(((0.452)*x4242))+(((-1.0)*px)));
evalcond[1]=((((-0.452)*x4243))+(((0.1054)*x4242))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4244=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x4244;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x4244);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4245=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x4245;
j4eval[1]=IKsign(x4245);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4246=((1.0)*sj0);
IkReal x4247=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x4247;
j4eval[1]=((IKabs(((((-1.0)*r02*x4246))+((cj0*r12)))))+(IKabs((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x4246))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x4246))))));
j4eval[2]=IKsign(x4247);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4248=((1.0)*sj0);
CheckValue<IkReal> x4249 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4248))+((cj0*r12)))),IkReal((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x4248))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x4248)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4249.valid){
continue;
}
CheckValue<IkReal> x4250=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x4250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4249.value)+(((1.5707963267949)*(x4250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4251=IKsin(j4);
IkReal x4252=IKcos(j4);
IkReal x4253=((1.0)*cj5);
IkReal x4254=(r00*sj5);
IkReal x4255=(r10*sj5);
IkReal x4256=(r20*sj5);
IkReal x4257=((1.0)*x4251);
IkReal x4258=((1.0)*x4252);
evalcond[0]=(((r22*x4252))+(((-1.0)*r21*x4251*x4253))+(((-1.0)*x4256*x4257)));
evalcond[1]=(cj0+((r02*x4252))+(((-1.0)*x4254*x4257))+(((-1.0)*r01*x4251*x4253)));
evalcond[2]=(sj0+(((-1.0)*x4255*x4257))+(((-1.0)*r11*x4251*x4253))+((r12*x4252)));
evalcond[3]=((((-1.0)*r21*x4252*x4253))+(((-1.0)*r22*x4257))+(((-1.0)*x4256*x4258)));
evalcond[4]=(cj0+(((-1.0)*x4255*x4258))+(((-1.0)*r11*x4252*x4253))+(((-1.0)*r12*x4257)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4254*x4258))+(((-1.0)*r01*x4252*x4253))+(((-1.0)*r02*x4257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4259=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x4259.valid){
continue;
}
CheckValue<IkReal> x4260 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4259.value)))+(x4260.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4261=IKsin(j4);
IkReal x4262=IKcos(j4);
IkReal x4263=((1.0)*cj5);
IkReal x4264=(r00*sj5);
IkReal x4265=(r10*sj5);
IkReal x4266=(r20*sj5);
IkReal x4267=((1.0)*x4261);
IkReal x4268=((1.0)*x4262);
evalcond[0]=((((-1.0)*r21*x4261*x4263))+(((-1.0)*x4266*x4267))+((r22*x4262)));
evalcond[1]=(cj0+((r02*x4262))+(((-1.0)*x4264*x4267))+(((-1.0)*r01*x4261*x4263)));
evalcond[2]=(sj0+((r12*x4262))+(((-1.0)*r11*x4261*x4263))+(((-1.0)*x4265*x4267)));
evalcond[3]=((((-1.0)*r22*x4267))+(((-1.0)*r21*x4262*x4263))+(((-1.0)*x4266*x4268)));
evalcond[4]=((((-1.0)*r12*x4267))+cj0+(((-1.0)*r11*x4262*x4263))+(((-1.0)*x4265*x4268)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4264*x4268))+(((-1.0)*r02*x4267))+(((-1.0)*r01*x4262*x4263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4269 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4269.valid){
continue;
}
CheckValue<IkReal> x4270=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x4270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4269.value)+(((1.5707963267949)*(x4270.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4271=IKsin(j4);
IkReal x4272=IKcos(j4);
IkReal x4273=((1.0)*cj5);
IkReal x4274=(r00*sj5);
IkReal x4275=(r10*sj5);
IkReal x4276=(r20*sj5);
IkReal x4277=((1.0)*x4271);
IkReal x4278=((1.0)*x4272);
evalcond[0]=((((-1.0)*r21*x4271*x4273))+(((-1.0)*x4276*x4277))+((r22*x4272)));
evalcond[1]=(((r02*x4272))+cj0+(((-1.0)*x4274*x4277))+(((-1.0)*r01*x4271*x4273)));
evalcond[2]=((((-1.0)*r11*x4271*x4273))+sj0+(((-1.0)*x4275*x4277))+((r12*x4272)));
evalcond[3]=((((-1.0)*r21*x4272*x4273))+(((-1.0)*r22*x4277))+(((-1.0)*x4276*x4278)));
evalcond[4]=((((-1.0)*r12*x4277))+cj0+(((-1.0)*x4275*x4278))+(((-1.0)*r11*x4272*x4273)));
evalcond[5]=((((-1.0)*r01*x4272*x4273))+(((-1.0)*sj0))+(((-1.0)*r02*x4277))+(((-1.0)*x4274*x4278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.4876660341556)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.4876660341556)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.4876660341556)*py))+IKsqr(((9.4876660341556)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.4876660341556)*py), ((9.4876660341556)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1054)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1054)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4279=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x4279;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x4279);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4280=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x4280;
j4eval[1]=IKsign(x4280);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4281=((1.0)*sj0);
IkReal x4282=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x4282;
j4eval[1]=((IKabs(((((-1.0)*r02*x4281))+((cj0*r12)))))+(IKabs(((((-1.0)*cj5*r01*x4281))+((cj0*cj5*r11))+(((-1.0)*r00*sj5*x4281))+((cj0*r10*sj5))))));
j4eval[2]=IKsign(x4282);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4283=((1.0)*sj0);
CheckValue<IkReal> x4284 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4283))+((cj0*r12)))),IkReal(((((-1.0)*cj5*r01*x4283))+((cj0*cj5*r11))+(((-1.0)*r00*sj5*x4283))+((cj0*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4284.valid){
continue;
}
CheckValue<IkReal> x4285=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x4285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4284.value)+(((1.5707963267949)*(x4285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4286=IKsin(j4);
IkReal x4287=IKcos(j4);
IkReal x4288=((1.0)*cj5);
IkReal x4289=(r00*sj5);
IkReal x4290=(r10*sj5);
IkReal x4291=(r20*sj5);
IkReal x4292=((1.0)*x4286);
IkReal x4293=((1.0)*x4287);
evalcond[0]=(((r22*x4287))+(((-1.0)*r21*x4286*x4288))+(((-1.0)*x4291*x4292)));
evalcond[1]=(cj0+(((-1.0)*x4289*x4292))+((r02*x4287))+(((-1.0)*r01*x4286*x4288)));
evalcond[2]=(sj0+((r12*x4287))+(((-1.0)*x4290*x4292))+(((-1.0)*r11*x4286*x4288)));
evalcond[3]=((((-1.0)*r22*x4292))+(((-1.0)*x4291*x4293))+(((-1.0)*r21*x4287*x4288)));
evalcond[4]=((((-1.0)*r11*x4287*x4288))+cj0+(((-1.0)*x4290*x4293))+(((-1.0)*r12*x4292)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4289*x4293))+(((-1.0)*r01*x4287*x4288))+(((-1.0)*r02*x4292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4294=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x4294.valid){
continue;
}
CheckValue<IkReal> x4295 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4294.value)))+(x4295.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4296=IKsin(j4);
IkReal x4297=IKcos(j4);
IkReal x4298=((1.0)*cj5);
IkReal x4299=(r00*sj5);
IkReal x4300=(r10*sj5);
IkReal x4301=(r20*sj5);
IkReal x4302=((1.0)*x4296);
IkReal x4303=((1.0)*x4297);
evalcond[0]=((((-1.0)*r21*x4296*x4298))+((r22*x4297))+(((-1.0)*x4301*x4302)));
evalcond[1]=(cj0+(((-1.0)*r01*x4296*x4298))+(((-1.0)*x4299*x4302))+((r02*x4297)));
evalcond[2]=(sj0+((r12*x4297))+(((-1.0)*x4300*x4302))+(((-1.0)*r11*x4296*x4298)));
evalcond[3]=((((-1.0)*r22*x4302))+(((-1.0)*r21*x4297*x4298))+(((-1.0)*x4301*x4303)));
evalcond[4]=((((-1.0)*r12*x4302))+cj0+(((-1.0)*r11*x4297*x4298))+(((-1.0)*x4300*x4303)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x4297*x4298))+(((-1.0)*x4299*x4303))+(((-1.0)*r02*x4302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4304 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4304.valid){
continue;
}
CheckValue<IkReal> x4305=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x4305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4304.value)+(((1.5707963267949)*(x4305.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4306=IKsin(j4);
IkReal x4307=IKcos(j4);
IkReal x4308=((1.0)*cj5);
IkReal x4309=(r00*sj5);
IkReal x4310=(r10*sj5);
IkReal x4311=(r20*sj5);
IkReal x4312=((1.0)*x4306);
IkReal x4313=((1.0)*x4307);
evalcond[0]=(((r22*x4307))+(((-1.0)*x4311*x4312))+(((-1.0)*r21*x4306*x4308)));
evalcond[1]=((((-1.0)*r01*x4306*x4308))+cj0+((r02*x4307))+(((-1.0)*x4309*x4312)));
evalcond[2]=(((r12*x4307))+sj0+(((-1.0)*x4310*x4312))+(((-1.0)*r11*x4306*x4308)));
evalcond[3]=((((-1.0)*r22*x4312))+(((-1.0)*x4311*x4313))+(((-1.0)*r21*x4307*x4308)));
evalcond[4]=((((-1.0)*r11*x4307*x4308))+cj0+(((-1.0)*x4310*x4313))+(((-1.0)*r12*x4312)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4309*x4313))+(((-1.0)*r02*x4312))+(((-1.0)*r01*x4307*x4308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.4876660341556)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.4876660341556)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.4876660341556)*py))+IKsqr(((9.4876660341556)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.4876660341556)*py), ((9.4876660341556)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1054)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1054)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4314=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x4314;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x4314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4315=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x4315;
j4eval[1]=IKsign(x4315);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4316=((1.0)*sj0);
IkReal x4317=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x4317;
j4eval[1]=((IKabs(((((-1.0)*r02*x4316))+((cj0*r12)))))+(IKabs((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x4316))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x4316))))));
j4eval[2]=IKsign(x4317);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4318=((1.0)*sj0);
CheckValue<IkReal> x4319 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4318))+((cj0*r12)))),IkReal((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x4318))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x4318)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4319.valid){
continue;
}
CheckValue<IkReal> x4320=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x4320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4319.value)+(((1.5707963267949)*(x4320.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4321=IKsin(j4);
IkReal x4322=IKcos(j4);
IkReal x4323=((1.0)*cj5);
IkReal x4324=(r00*sj5);
IkReal x4325=(r10*sj5);
IkReal x4326=(r20*sj5);
IkReal x4327=((1.0)*x4321);
IkReal x4328=((1.0)*x4322);
evalcond[0]=((((-1.0)*x4326*x4327))+(((-1.0)*r21*x4321*x4323))+((r22*x4322)));
evalcond[1]=((((-1.0)*r01*x4321*x4323))+cj0+(((-1.0)*x4324*x4327))+((r02*x4322)));
evalcond[2]=(sj0+(((-1.0)*x4325*x4327))+((r12*x4322))+(((-1.0)*r11*x4321*x4323)));
evalcond[3]=((((-1.0)*x4326*x4328))+(((-1.0)*r22*x4327))+(((-1.0)*r21*x4322*x4323)));
evalcond[4]=((((-1.0)*r01*x4322*x4323))+sj0+(((-1.0)*r02*x4327))+(((-1.0)*x4324*x4328)));
evalcond[5]=((((-1.0)*x4325*x4328))+(((-1.0)*r12*x4327))+(((-1.0)*cj0))+(((-1.0)*r11*x4322*x4323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4329=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x4329.valid){
continue;
}
CheckValue<IkReal> x4330 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4329.value)))+(x4330.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4331=IKsin(j4);
IkReal x4332=IKcos(j4);
IkReal x4333=((1.0)*cj5);
IkReal x4334=(r00*sj5);
IkReal x4335=(r10*sj5);
IkReal x4336=(r20*sj5);
IkReal x4337=((1.0)*x4331);
IkReal x4338=((1.0)*x4332);
evalcond[0]=((((-1.0)*r21*x4331*x4333))+((r22*x4332))+(((-1.0)*x4336*x4337)));
evalcond[1]=((((-1.0)*x4334*x4337))+cj0+(((-1.0)*r01*x4331*x4333))+((r02*x4332)));
evalcond[2]=(sj0+((r12*x4332))+(((-1.0)*x4335*x4337))+(((-1.0)*r11*x4331*x4333)));
evalcond[3]=((((-1.0)*r21*x4332*x4333))+(((-1.0)*r22*x4337))+(((-1.0)*x4336*x4338)));
evalcond[4]=((((-1.0)*r01*x4332*x4333))+sj0+(((-1.0)*x4334*x4338))+(((-1.0)*r02*x4337)));
evalcond[5]=((((-1.0)*r11*x4332*x4333))+(((-1.0)*r12*x4337))+(((-1.0)*x4335*x4338))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4339 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4339.valid){
continue;
}
CheckValue<IkReal> x4340=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x4340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4339.value)+(((1.5707963267949)*(x4340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4341=IKsin(j4);
IkReal x4342=IKcos(j4);
IkReal x4343=((1.0)*cj5);
IkReal x4344=(r00*sj5);
IkReal x4345=(r10*sj5);
IkReal x4346=(r20*sj5);
IkReal x4347=((1.0)*x4341);
IkReal x4348=((1.0)*x4342);
evalcond[0]=((((-1.0)*r21*x4341*x4343))+(((-1.0)*x4346*x4347))+((r22*x4342)));
evalcond[1]=((((-1.0)*x4344*x4347))+(((-1.0)*r01*x4341*x4343))+cj0+((r02*x4342)));
evalcond[2]=(sj0+(((-1.0)*x4345*x4347))+((r12*x4342))+(((-1.0)*r11*x4341*x4343)));
evalcond[3]=((((-1.0)*x4346*x4348))+(((-1.0)*r22*x4347))+(((-1.0)*r21*x4342*x4343)));
evalcond[4]=((((-1.0)*r02*x4347))+(((-1.0)*x4344*x4348))+sj0+(((-1.0)*r01*x4342*x4343)));
evalcond[5]=((((-1.0)*r11*x4342*x4343))+(((-1.0)*x4345*x4348))+(((-1.0)*r12*x4347))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.489292297647925)*py))+(((-2.09829334475201)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.09829334475201)*py))+(((0.489292297647925)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.489292297647925)*py))+(((-2.09829334475201)*px))))+IKsqr(((((2.09829334475201)*py))+(((0.489292297647925)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.489292297647925)*py))+(((-2.09829334475201)*px))), ((((2.09829334475201)*py))+(((0.489292297647925)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4349=IKcos(j0);
IkReal x4350=IKsin(j0);
evalcond[0]=((((0.1054)*x4349))+(((-1.0)*px))+(((-0.452)*x4350)));
evalcond[1]=((((0.452)*x4349))+(((-1.0)*py))+(((0.1054)*x4350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4351=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x4351;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x4351);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4352=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x4352;
j4eval[1]=IKsign(x4352);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4353=((1.0)*sj0);
IkReal x4354=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x4354;
j4eval[1]=((IKabs(((((-1.0)*cj5*r01*x4353))+((cj0*cj5*r11))+(((-1.0)*r00*sj5*x4353))+((cj0*r10*sj5)))))+(IKabs(((((-1.0)*r02*x4353))+((cj0*r12))))));
j4eval[2]=IKsign(x4354);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4355=((1.0)*sj0);
CheckValue<IkReal> x4356 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4355))+((cj0*r12)))),IkReal(((((-1.0)*cj5*r01*x4355))+((cj0*cj5*r11))+(((-1.0)*r00*sj5*x4355))+((cj0*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4356.valid){
continue;
}
CheckValue<IkReal> x4357=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x4357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4356.value)+(((1.5707963267949)*(x4357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4358=IKsin(j4);
IkReal x4359=IKcos(j4);
IkReal x4360=((1.0)*cj5);
IkReal x4361=(r00*sj5);
IkReal x4362=(r10*sj5);
IkReal x4363=(r20*sj5);
IkReal x4364=((1.0)*x4358);
IkReal x4365=((1.0)*x4359);
evalcond[0]=(((r22*x4359))+(((-1.0)*r21*x4358*x4360))+(((-1.0)*x4363*x4364)));
evalcond[1]=((((-1.0)*x4361*x4364))+cj0+((r02*x4359))+(((-1.0)*r01*x4358*x4360)));
evalcond[2]=(sj0+(((-1.0)*x4362*x4364))+(((-1.0)*r11*x4358*x4360))+((r12*x4359)));
evalcond[3]=((((-1.0)*r22*x4364))+(((-1.0)*r21*x4359*x4360))+(((-1.0)*x4363*x4365)));
evalcond[4]=(cj0+(((-1.0)*x4362*x4365))+(((-1.0)*r12*x4364))+(((-1.0)*r11*x4359*x4360)));
evalcond[5]=((((-1.0)*x4361*x4365))+(((-1.0)*sj0))+(((-1.0)*r02*x4364))+(((-1.0)*r01*x4359*x4360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4366=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x4366.valid){
continue;
}
CheckValue<IkReal> x4367 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4366.value)))+(x4367.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4368=IKsin(j4);
IkReal x4369=IKcos(j4);
IkReal x4370=((1.0)*cj5);
IkReal x4371=(r00*sj5);
IkReal x4372=(r10*sj5);
IkReal x4373=(r20*sj5);
IkReal x4374=((1.0)*x4368);
IkReal x4375=((1.0)*x4369);
evalcond[0]=((((-1.0)*r21*x4368*x4370))+(((-1.0)*x4373*x4374))+((r22*x4369)));
evalcond[1]=((((-1.0)*x4371*x4374))+cj0+(((-1.0)*r01*x4368*x4370))+((r02*x4369)));
evalcond[2]=(sj0+(((-1.0)*r11*x4368*x4370))+((r12*x4369))+(((-1.0)*x4372*x4374)));
evalcond[3]=((((-1.0)*r22*x4374))+(((-1.0)*x4373*x4375))+(((-1.0)*r21*x4369*x4370)));
evalcond[4]=(cj0+(((-1.0)*r11*x4369*x4370))+(((-1.0)*r12*x4374))+(((-1.0)*x4372*x4375)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4371*x4375))+(((-1.0)*r02*x4374))+(((-1.0)*r01*x4369*x4370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4376 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4376.valid){
continue;
}
CheckValue<IkReal> x4377=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x4377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4376.value)+(((1.5707963267949)*(x4377.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4378=IKsin(j4);
IkReal x4379=IKcos(j4);
IkReal x4380=((1.0)*cj5);
IkReal x4381=(r00*sj5);
IkReal x4382=(r10*sj5);
IkReal x4383=(r20*sj5);
IkReal x4384=((1.0)*x4378);
IkReal x4385=((1.0)*x4379);
evalcond[0]=(((r22*x4379))+(((-1.0)*r21*x4378*x4380))+(((-1.0)*x4383*x4384)));
evalcond[1]=(((r02*x4379))+(((-1.0)*x4381*x4384))+cj0+(((-1.0)*r01*x4378*x4380)));
evalcond[2]=(sj0+((r12*x4379))+(((-1.0)*x4382*x4384))+(((-1.0)*r11*x4378*x4380)));
evalcond[3]=((((-1.0)*r21*x4379*x4380))+(((-1.0)*r22*x4384))+(((-1.0)*x4383*x4385)));
evalcond[4]=((((-1.0)*r12*x4384))+cj0+(((-1.0)*r11*x4379*x4380))+(((-1.0)*x4382*x4385)));
evalcond[5]=((((-1.0)*r02*x4384))+(((-1.0)*sj0))+(((-1.0)*x4381*x4385))+(((-1.0)*r01*x4379*x4380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.489292297647925)*py))+(((-2.09829334475201)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.09829334475201)*py))+(((0.489292297647925)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.489292297647925)*py))+(((-2.09829334475201)*px))))+IKsqr(((((2.09829334475201)*py))+(((0.489292297647925)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.489292297647925)*py))+(((-2.09829334475201)*px))), ((((2.09829334475201)*py))+(((0.489292297647925)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4386=IKcos(j0);
IkReal x4387=IKsin(j0);
evalcond[0]=((((-0.452)*x4387))+(((-1.0)*px))+(((0.1054)*x4386)));
evalcond[1]=((((-1.0)*py))+(((0.452)*x4386))+(((0.1054)*x4387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4388=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x4388;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x4388);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4389=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x4389;
j4eval[1]=IKsign(x4389);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4390=((1.0)*sj0);
IkReal x4391=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x4391;
j4eval[1]=((IKabs(((((-1.0)*cj5*r01*x4390))+((cj0*cj5*r11))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x4390)))))+(IKabs(((((-1.0)*r02*x4390))+((cj0*r12))))));
j4eval[2]=IKsign(x4391);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4392=((1.0)*sj0);
CheckValue<IkReal> x4393 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4392))+((cj0*r12)))),IkReal(((((-1.0)*cj5*r01*x4392))+((cj0*cj5*r11))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x4392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4393.valid){
continue;
}
CheckValue<IkReal> x4394=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x4394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4393.value)+(((1.5707963267949)*(x4394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4395=IKsin(j4);
IkReal x4396=IKcos(j4);
IkReal x4397=((1.0)*cj5);
IkReal x4398=(r00*sj5);
IkReal x4399=(r10*sj5);
IkReal x4400=(r20*sj5);
IkReal x4401=((1.0)*x4395);
IkReal x4402=((1.0)*x4396);
evalcond[0]=((((-1.0)*r21*x4395*x4397))+((r22*x4396))+(((-1.0)*x4400*x4401)));
evalcond[1]=(cj0+((r02*x4396))+(((-1.0)*x4398*x4401))+(((-1.0)*r01*x4395*x4397)));
evalcond[2]=(sj0+(((-1.0)*x4399*x4401))+(((-1.0)*r11*x4395*x4397))+((r12*x4396)));
evalcond[3]=((((-1.0)*r21*x4396*x4397))+(((-1.0)*x4400*x4402))+(((-1.0)*r22*x4401)));
evalcond[4]=(sj0+(((-1.0)*r01*x4396*x4397))+(((-1.0)*x4398*x4402))+(((-1.0)*r02*x4401)));
evalcond[5]=((((-1.0)*r12*x4401))+(((-1.0)*r11*x4396*x4397))+(((-1.0)*x4399*x4402))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4403=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x4403.valid){
continue;
}
CheckValue<IkReal> x4404 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4403.value)))+(x4404.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4405=IKsin(j4);
IkReal x4406=IKcos(j4);
IkReal x4407=((1.0)*cj5);
IkReal x4408=(r00*sj5);
IkReal x4409=(r10*sj5);
IkReal x4410=(r20*sj5);
IkReal x4411=((1.0)*x4405);
IkReal x4412=((1.0)*x4406);
evalcond[0]=(((r22*x4406))+(((-1.0)*x4410*x4411))+(((-1.0)*r21*x4405*x4407)));
evalcond[1]=(cj0+(((-1.0)*x4408*x4411))+(((-1.0)*r01*x4405*x4407))+((r02*x4406)));
evalcond[2]=((((-1.0)*x4409*x4411))+sj0+((r12*x4406))+(((-1.0)*r11*x4405*x4407)));
evalcond[3]=((((-1.0)*x4410*x4412))+(((-1.0)*r21*x4406*x4407))+(((-1.0)*r22*x4411)));
evalcond[4]=(sj0+(((-1.0)*x4408*x4412))+(((-1.0)*r02*x4411))+(((-1.0)*r01*x4406*x4407)));
evalcond[5]=((((-1.0)*x4409*x4412))+(((-1.0)*r12*x4411))+(((-1.0)*r11*x4406*x4407))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4413 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4413.valid){
continue;
}
CheckValue<IkReal> x4414=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x4414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4413.value)+(((1.5707963267949)*(x4414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4415=IKsin(j4);
IkReal x4416=IKcos(j4);
IkReal x4417=((1.0)*cj5);
IkReal x4418=(r00*sj5);
IkReal x4419=(r10*sj5);
IkReal x4420=(r20*sj5);
IkReal x4421=((1.0)*x4415);
IkReal x4422=((1.0)*x4416);
evalcond[0]=((((-1.0)*x4420*x4421))+((r22*x4416))+(((-1.0)*r21*x4415*x4417)));
evalcond[1]=(cj0+(((-1.0)*r01*x4415*x4417))+((r02*x4416))+(((-1.0)*x4418*x4421)));
evalcond[2]=(sj0+((r12*x4416))+(((-1.0)*r11*x4415*x4417))+(((-1.0)*x4419*x4421)));
evalcond[3]=((((-1.0)*x4420*x4422))+(((-1.0)*r21*x4416*x4417))+(((-1.0)*r22*x4421)));
evalcond[4]=(sj0+(((-1.0)*r01*x4416*x4417))+(((-1.0)*r02*x4421))+(((-1.0)*x4418*x4422)));
evalcond[5]=((((-1.0)*r11*x4416*x4417))+(((-1.0)*x4419*x4422))+(((-1.0)*r12*x4421))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4423=(cj2*sj1);
IkReal x4424=(r01*sj5);
IkReal x4425=((5000.0)*px);
IkReal x4426=(cj1*sj2);
IkReal x4427=(cj5*r00);
IkReal x4428=((2260.0)*sj1);
IkReal x4429=((2827.5)*x4427);
CheckValue<IkReal> x4430=IKPowWithIntegerCheck((x4423+(((-1.0)*x4426))),-1);
if(!x4430.valid){
continue;
}
CheckValue<IkReal> x4431=IKPowWithIntegerCheck(((((-527.0)*x4426))+(((527.0)*x4423))),-1);
if(!x4431.valid){
continue;
}
if( IKabs(((x4430.value)*((x4424+(((-1.0)*x4427)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4431.value)*(((((-1.0)*x4425*x4426))+((x4423*x4425))+((x4423*x4429))+(((-1.0)*x4426*x4429))+((x4427*x4428))+(((-1.0)*x4424*x4428))+(((2827.5)*x4424*x4426))+(((-2827.5)*x4423*x4424)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4430.value)*((x4424+(((-1.0)*x4427))))))+IKsqr(((x4431.value)*(((((-1.0)*x4425*x4426))+((x4423*x4425))+((x4423*x4429))+(((-1.0)*x4426*x4429))+((x4427*x4428))+(((-1.0)*x4424*x4428))+(((2827.5)*x4424*x4426))+(((-2827.5)*x4423*x4424))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x4430.value)*((x4424+(((-1.0)*x4427))))), ((x4431.value)*(((((-1.0)*x4425*x4426))+((x4423*x4425))+((x4423*x4429))+(((-1.0)*x4426*x4429))+((x4427*x4428))+(((-1.0)*x4424*x4428))+(((2827.5)*x4424*x4426))+(((-2827.5)*x4423*x4424))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4432=IKsin(j0);
IkReal x4433=IKcos(j0);
IkReal x4434=(cj1*sj2);
IkReal x4435=(cj5*r00);
IkReal x4436=(cj5*r10);
IkReal x4437=(r11*sj5);
IkReal x4438=((0.452)*cj2);
IkReal x4439=(r01*sj5);
IkReal x4440=(sj1*x4433);
IkReal x4441=((0.452)*x4432);
IkReal x4442=(sj1*x4432);
evalcond[0]=(((cj2*x4442))+x4435+(((-1.0)*x4439))+(((-1.0)*x4432*x4434)));
evalcond[1]=(x4436+(((-1.0)*x4437))+((x4433*x4434))+(((-1.0)*cj2*x4440)));
evalcond[2]=((((-0.1135)*x4435))+(((0.1135)*x4439))+(((-1.0)*px))+((x4438*x4442))+(((0.1054)*x4433))+(((-1.0)*x4434*x4441))+((sj1*x4441)));
evalcond[3]=((((-0.1135)*x4436))+(((-0.452)*x4440))+(((0.1135)*x4437))+(((-1.0)*py))+(((0.452)*x4433*x4434))+(((-1.0)*x4438*x4440))+(((0.1054)*x4432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4443=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x4443;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x4443);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4444=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x4444;
j4eval[1]=IKsign(x4444);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4445=((1.0)*sj0);
IkReal x4446=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x4446;
j4eval[1]=((IKabs(((((-1.0)*r02*x4445))+((cj0*r12)))))+(IKabs((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x4445))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x4445))))));
j4eval[2]=IKsign(x4446);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4447=((-1.0)*r21);
IkReal x4449 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4449)==0){
continue;
}
IkReal x4448=pow(x4449,-0.5);
CheckValue<IkReal> x4450 = IKatan2WithCheck(IkReal(r20),IkReal(x4447),IKFAST_ATAN2_MAGTHRESH);
if(!x4450.valid){
continue;
}
IkReal gconst114=((-1.0)*(x4450.value));
IkReal gconst115=((-1.0)*r20*x4448);
IkReal gconst116=(x4447*x4448);
CheckValue<IkReal> x4451 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x4451.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4451.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4452=((-1.0)*r21);
CheckValue<IkReal> x4455 = IKatan2WithCheck(IkReal(r20),IkReal(x4452),IKFAST_ATAN2_MAGTHRESH);
if(!x4455.valid){
continue;
}
IkReal x4453=((-1.0)*(x4455.value));
IkReal x4454=x4448;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x4453;
IkReal gconst114=x4453;
IkReal gconst115=((-1.0)*r20*x4454);
IkReal gconst116=(x4452*x4454);
IkReal x4456=r22*r22;
IkReal x4457=((1.0)*x4456);
CheckValue<IkReal> x4461=IKPowWithIntegerCheck(((-1.0)+x4456),-1);
if(!x4461.valid){
continue;
}
IkReal x4458=x4461.value;
if((((1.0)+(((-1.0)*x4457)))) < -0.00001)
continue;
IkReal x4459=IKsqrt(((1.0)+(((-1.0)*x4457))));
IkReal x4460=(cj0*x4458*x4459);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x4460+(((-1.0)*x4457*x4460))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4462=((-1.0)*r21);
CheckValue<IkReal> x4465 = IKatan2WithCheck(IkReal(r20),IkReal(x4462),IKFAST_ATAN2_MAGTHRESH);
if(!x4465.valid){
continue;
}
IkReal x4463=((-1.0)*(x4465.value));
IkReal x4464=x4448;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x4463;
IkReal gconst114=x4463;
IkReal gconst115=((-1.0)*r20*x4464);
IkReal gconst116=(x4462*x4464);
IkReal x4466=r22*r22;
IkReal x4467=((1.0)*x4466);
CheckValue<IkReal> x4471=IKPowWithIntegerCheck(((-1.0)+x4466),-1);
if(!x4471.valid){
continue;
}
IkReal x4468=x4471.value;
if((((1.0)+(((-1.0)*x4467)))) < -0.00001)
continue;
IkReal x4469=IKsqrt(((1.0)+(((-1.0)*x4467))));
IkReal x4470=(sj0*x4468*x4469);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x4470+(((-1.0)*x4467*x4470))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4472=((-1.0)*r21);
CheckValue<IkReal> x4475 = IKatan2WithCheck(IkReal(r20),IkReal(x4472),IKFAST_ATAN2_MAGTHRESH);
if(!x4475.valid){
continue;
}
IkReal x4473=((-1.0)*(x4475.value));
IkReal x4474=x4448;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x4473;
IkReal gconst114=x4473;
IkReal gconst115=((-1.0)*r20*x4474);
IkReal gconst116=(x4472*x4474);
IkReal x4476=r22*r22;
CheckValue<IkReal> x4479=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4476))),-1);
if(!x4479.valid){
continue;
}
IkReal x4477=x4479.value;
IkReal x4478=(x4476+((x4477*(r21*r21*r21*r21)))+((x4477*(r20*r20*r20*r20)))+(((2.0)*x4477*(r20*r20)*(r21*r21))));
j4eval[0]=x4478;
j4eval[1]=IKsign(x4478);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4480=(gconst115*r20);
IkReal x4481=(cj1*sj2);
IkReal x4482=(gconst116*r21);
IkReal x4483=((1.0)*cj2*sj1);
CheckValue<IkReal> x4484=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x4482*x4482)+(x4480*x4480)+(((2.0)*x4480*x4482)))),-1);
if(!x4484.valid){
continue;
}
CheckValue<IkReal> x4485 = IKatan2WithCheck(IkReal((((r22*x4481))+(((-1.0)*r22*x4483)))),IkReal((((x4480*x4481))+(((-1.0)*x4480*x4483))+((x4481*x4482))+(((-1.0)*x4482*x4483)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4484.value)))+(x4485.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4486=IKsin(j4);
IkReal x4487=IKcos(j4);
IkReal x4488=(cj1*cj2);
IkReal x4489=(gconst116*r21);
IkReal x4490=((1.0)*cj0);
IkReal x4491=(gconst116*r01);
IkReal x4492=(gconst116*r11);
IkReal x4493=(sj1*sj2);
IkReal x4494=((1.0)*x4487);
IkReal x4495=((1.0)*x4486);
IkReal x4496=(gconst115*x4495);
evalcond[0]=((((-1.0)*x4489*x4495))+(((-1.0)*r20*x4496))+((r22*x4487)));
evalcond[1]=(cj0+((r02*x4487))+(((-1.0)*x4491*x4495))+(((-1.0)*r00*x4496)));
evalcond[2]=((((-1.0)*x4492*x4495))+sj0+((r12*x4487))+(((-1.0)*r10*x4496)));
evalcond[3]=((((-1.0)*x4489*x4494))+(((-1.0)*gconst115*r20*x4494))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x4495)));
evalcond[4]=(((sj0*x4488))+(((-1.0)*r02*x4495))+((sj0*x4493))+(((-1.0)*gconst115*r00*x4494))+(((-1.0)*x4491*x4494)));
evalcond[5]=((((-1.0)*gconst115*r10*x4494))+(((-1.0)*x4492*x4494))+(((-1.0)*x4488*x4490))+(((-1.0)*x4490*x4493))+(((-1.0)*r12*x4495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4497 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst116*r21*sj0))+((gconst115*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4497.valid){
continue;
}
CheckValue<IkReal> x4498=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r01))+((gconst116*r00)))),-1);
if(!x4498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4497.value)+(((1.5707963267949)*(x4498.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4499=IKsin(j4);
IkReal x4500=IKcos(j4);
IkReal x4501=(cj1*cj2);
IkReal x4502=(gconst116*r21);
IkReal x4503=((1.0)*cj0);
IkReal x4504=(gconst116*r01);
IkReal x4505=(gconst116*r11);
IkReal x4506=(sj1*sj2);
IkReal x4507=((1.0)*x4500);
IkReal x4508=((1.0)*x4499);
IkReal x4509=(gconst115*x4508);
evalcond[0]=(((r22*x4500))+(((-1.0)*r20*x4509))+(((-1.0)*x4502*x4508)));
evalcond[1]=((((-1.0)*r00*x4509))+cj0+((r02*x4500))+(((-1.0)*x4504*x4508)));
evalcond[2]=(sj0+((r12*x4500))+(((-1.0)*x4505*x4508))+(((-1.0)*r10*x4509)));
evalcond[3]=((((-1.0)*gconst115*r20*x4507))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x4508))+(((-1.0)*x4502*x4507)));
evalcond[4]=(((sj0*x4501))+((sj0*x4506))+(((-1.0)*r02*x4508))+(((-1.0)*gconst115*r00*x4507))+(((-1.0)*x4504*x4507)));
evalcond[5]=((((-1.0)*gconst115*r10*x4507))+(((-1.0)*x4503*x4506))+(((-1.0)*x4501*x4503))+(((-1.0)*r12*x4508))+(((-1.0)*x4505*x4507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4510=IKPowWithIntegerCheck(IKsign((((gconst115*r11))+(((-1.0)*gconst116*r10)))),-1);
if(!x4510.valid){
continue;
}
CheckValue<IkReal> x4511 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst116*r21))+((cj0*gconst115*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4510.value)))+(x4511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4512=IKsin(j4);
IkReal x4513=IKcos(j4);
IkReal x4514=(cj1*cj2);
IkReal x4515=(gconst116*r21);
IkReal x4516=((1.0)*cj0);
IkReal x4517=(gconst116*r01);
IkReal x4518=(gconst116*r11);
IkReal x4519=(sj1*sj2);
IkReal x4520=((1.0)*x4513);
IkReal x4521=((1.0)*x4512);
IkReal x4522=(gconst115*x4521);
evalcond[0]=((((-1.0)*r20*x4522))+(((-1.0)*x4515*x4521))+((r22*x4513)));
evalcond[1]=(((r02*x4513))+cj0+(((-1.0)*r00*x4522))+(((-1.0)*x4517*x4521)));
evalcond[2]=(sj0+((r12*x4513))+(((-1.0)*x4518*x4521))+(((-1.0)*r10*x4522)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x4521))+(((-1.0)*gconst115*r20*x4520))+(((-1.0)*x4515*x4520)));
evalcond[4]=((((-1.0)*gconst115*r00*x4520))+(((-1.0)*x4517*x4520))+((sj0*x4519))+((sj0*x4514))+(((-1.0)*r02*x4521)));
evalcond[5]=((((-1.0)*r12*x4521))+(((-1.0)*x4516*x4519))+(((-1.0)*gconst115*r10*x4520))+(((-1.0)*x4518*x4520))+(((-1.0)*x4514*x4516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4525 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4525)==0){
continue;
}
IkReal x4523=pow(x4525,-0.5);
IkReal x4524=((1.0)*x4523);
CheckValue<IkReal> x4526 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x4526.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x4526.value))));
IkReal gconst118=(r20*x4524);
IkReal gconst119=(r21*x4524);
CheckValue<IkReal> x4527 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x4527.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4527.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x4531 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x4531.valid){
continue;
}
IkReal x4528=((1.0)*(x4531.value));
IkReal x4529=x4523;
IkReal x4530=((1.0)*x4529);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x4528)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4528)));
IkReal gconst118=(r20*x4530);
IkReal gconst119=(r21*x4530);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4535 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x4535.valid){
continue;
}
IkReal x4532=((1.0)*(x4535.value));
IkReal x4533=x4523;
IkReal x4534=((1.0)*x4533);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x4532)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4532)));
IkReal gconst118=(r20*x4534);
IkReal gconst119=(r21*x4534);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4539 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x4539.valid){
continue;
}
IkReal x4536=((1.0)*(x4539.value));
IkReal x4537=x4523;
IkReal x4538=((1.0)*x4537);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x4536)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4536)));
IkReal gconst118=(r20*x4538);
IkReal gconst119=(r21*x4538);
IkReal x4540=r22*r22;
IkReal x4541=(cj0*r12);
IkReal x4542=((1.0)*r02*sj0);
CheckValue<IkReal> x4546=IKPowWithIntegerCheck(((-1.0)+x4540),-1);
if(!x4546.valid){
continue;
}
IkReal x4543=x4546.value;
if((((1.0)+(((-1.0)*x4540)))) < -0.00001)
continue;
IkReal x4544=IKsqrt(((1.0)+(((-1.0)*x4540))));
IkReal x4545=(r22*x4543*x4544);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x4541+(((-1.0)*x4542)))))+(IKabs(((((-1.0)*x4542*x4545))+((x4541*x4545))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4547=((1.0)*sj0);
CheckValue<IkReal> x4548=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r21))+((gconst119*r20)))),-1);
if(!x4548.valid){
continue;
}
CheckValue<IkReal> x4549 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4547))+((cj0*r12)))),IkReal(((((-1.0)*gconst118*r00*x4547))+(((-1.0)*gconst119*r01*x4547))+((cj0*gconst118*r10))+((cj0*gconst119*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4548.value)))+(x4549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4550=IKsin(j4);
IkReal x4551=IKcos(j4);
IkReal x4552=((1.0)*gconst118);
IkReal x4553=(cj1*cj2);
IkReal x4554=((1.0)*sj1);
IkReal x4555=((1.0)*x4550);
IkReal x4556=((1.0)*gconst119*x4551);
evalcond[0]=((((-1.0)*r20*x4550*x4552))+((r22*x4551))+(((-1.0)*gconst119*r21*x4555)));
evalcond[1]=(cj0+((r02*x4551))+(((-1.0)*gconst119*r01*x4555))+(((-1.0)*r00*x4550*x4552)));
evalcond[2]=(sj0+((r12*x4551))+(((-1.0)*r10*x4550*x4552))+(((-1.0)*gconst119*r11*x4555)));
evalcond[3]=((((-1.0)*r21*x4556))+((cj1*sj2))+(((-1.0)*cj2*x4554))+(((-1.0)*r20*x4551*x4552))+(((-1.0)*r22*x4555)));
evalcond[4]=((((-1.0)*r01*x4556))+((sj0*sj1*sj2))+((sj0*x4553))+(((-1.0)*r00*x4551*x4552))+(((-1.0)*r02*x4555)));
evalcond[5]=((((-1.0)*r11*x4556))+(((-1.0)*r12*x4555))+(((-1.0)*r10*x4551*x4552))+(((-1.0)*cj0*x4553))+(((-1.0)*cj0*sj2*x4554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4557 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r20*sj0))+((gconst119*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4557.valid){
continue;
}
CheckValue<IkReal> x4558=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r01))+((gconst119*r00)))),-1);
if(!x4558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4557.value)+(((1.5707963267949)*(x4558.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4559=IKsin(j4);
IkReal x4560=IKcos(j4);
IkReal x4561=((1.0)*gconst118);
IkReal x4562=(cj1*cj2);
IkReal x4563=((1.0)*sj1);
IkReal x4564=((1.0)*x4559);
IkReal x4565=((1.0)*gconst119*x4560);
evalcond[0]=(((r22*x4560))+(((-1.0)*r20*x4559*x4561))+(((-1.0)*gconst119*r21*x4564)));
evalcond[1]=(cj0+((r02*x4560))+(((-1.0)*r00*x4559*x4561))+(((-1.0)*gconst119*r01*x4564)));
evalcond[2]=(sj0+((r12*x4560))+(((-1.0)*gconst119*r11*x4564))+(((-1.0)*r10*x4559*x4561)));
evalcond[3]=((((-1.0)*r21*x4565))+(((-1.0)*cj2*x4563))+(((-1.0)*r20*x4560*x4561))+((cj1*sj2))+(((-1.0)*r22*x4564)));
evalcond[4]=((((-1.0)*r01*x4565))+((sj0*x4562))+(((-1.0)*r02*x4564))+((sj0*sj1*sj2))+(((-1.0)*r00*x4560*x4561)));
evalcond[5]=((((-1.0)*r10*x4560*x4561))+(((-1.0)*cj0*sj2*x4563))+(((-1.0)*cj0*x4562))+(((-1.0)*r11*x4565))+(((-1.0)*r12*x4564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4566 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r20))+((cj0*gconst119*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4566.valid){
continue;
}
CheckValue<IkReal> x4567=IKPowWithIntegerCheck(IKsign((((gconst118*r11))+(((-1.0)*gconst119*r10)))),-1);
if(!x4567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4566.value)+(((1.5707963267949)*(x4567.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4568=IKsin(j4);
IkReal x4569=IKcos(j4);
IkReal x4570=((1.0)*gconst118);
IkReal x4571=(cj1*cj2);
IkReal x4572=((1.0)*sj1);
IkReal x4573=((1.0)*x4568);
IkReal x4574=((1.0)*gconst119*x4569);
evalcond[0]=(((r22*x4569))+(((-1.0)*r20*x4568*x4570))+(((-1.0)*gconst119*r21*x4573)));
evalcond[1]=(cj0+((r02*x4569))+(((-1.0)*r00*x4568*x4570))+(((-1.0)*gconst119*r01*x4573)));
evalcond[2]=(sj0+((r12*x4569))+(((-1.0)*r10*x4568*x4570))+(((-1.0)*gconst119*r11*x4573)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj2*x4572))+(((-1.0)*r20*x4569*x4570))+(((-1.0)*r22*x4573))+(((-1.0)*r21*x4574)));
evalcond[4]=((((-1.0)*r01*x4574))+((sj0*x4571))+(((-1.0)*r02*x4573))+(((-1.0)*r00*x4569*x4570))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*cj0*sj2*x4572))+(((-1.0)*cj0*x4571))+(((-1.0)*r11*x4574))+(((-1.0)*r10*x4569*x4570))+(((-1.0)*r12*x4573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4577 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4577)==0){
continue;
}
IkReal x4575=pow(x4577,-0.5);
IkReal x4576=((-1.0)*x4575);
CheckValue<IkReal> x4578 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x4578.valid){
continue;
}
IkReal gconst120=((-1.0)*(x4578.value));
IkReal gconst121=(r00*x4576);
IkReal gconst122=(r01*x4576);
CheckValue<IkReal> x4579 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x4579.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4579.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4583 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x4583.valid){
continue;
}
IkReal x4580=((-1.0)*(x4583.value));
IkReal x4581=x4575;
IkReal x4582=((-1.0)*x4581);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x4580;
IkReal gconst120=x4580;
IkReal gconst121=(r00*x4582);
IkReal gconst122=(r01*x4582);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4584=((1.0)*sj0);
CheckValue<IkReal> x4585 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4584))+((cj0*r12)))),IkReal((((cj0*gconst122*r11))+((cj0*gconst121*r10))+(((-1.0)*gconst122*r01*x4584))+(((-1.0)*gconst121*r00*x4584)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4585.valid){
continue;
}
CheckValue<IkReal> x4586=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r21))+((gconst122*r20)))),-1);
if(!x4586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4585.value)+(((1.5707963267949)*(x4586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4587=IKsin(j4);
IkReal x4588=IKcos(j4);
IkReal x4589=(cj1*cj2);
IkReal x4590=(gconst122*r01);
IkReal x4591=(gconst121*r10);
IkReal x4592=(gconst122*r21);
IkReal x4593=((1.0)*sj1);
IkReal x4594=(gconst121*r20);
IkReal x4595=(gconst121*r00);
IkReal x4596=(gconst122*r11);
IkReal x4597=((1.0)*x4588);
IkReal x4598=((1.0)*x4587);
evalcond[0]=(((r22*x4588))+(((-1.0)*x4594*x4598))+(((-1.0)*x4592*x4598)));
evalcond[1]=((((-1.0)*x4595*x4598))+cj0+((r02*x4588))+(((-1.0)*x4590*x4598)));
evalcond[2]=(sj0+(((-1.0)*x4596*x4598))+(((-1.0)*x4591*x4598))+((r12*x4588)));
evalcond[3]=((((-1.0)*r22*x4598))+((cj1*sj2))+(((-1.0)*x4594*x4597))+(((-1.0)*x4592*x4597))+(((-1.0)*cj2*x4593)));
evalcond[4]=(((sj0*x4589))+(((-1.0)*x4595*x4597))+(((-1.0)*r02*x4598))+((sj0*sj1*sj2))+(((-1.0)*x4590*x4597)));
evalcond[5]=((((-1.0)*x4596*x4597))+(((-1.0)*cj0*sj2*x4593))+(((-1.0)*cj0*x4589))+(((-1.0)*x4591*x4597))+(((-1.0)*r12*x4598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4599 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst122*r21))+((cj0*gconst121*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4599.valid){
continue;
}
CheckValue<IkReal> x4600=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r10))+((gconst121*r11)))),-1);
if(!x4600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4599.value)+(((1.5707963267949)*(x4600.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4601=IKsin(j4);
IkReal x4602=IKcos(j4);
IkReal x4603=(cj1*cj2);
IkReal x4604=(gconst122*r01);
IkReal x4605=(gconst121*r10);
IkReal x4606=(gconst122*r21);
IkReal x4607=((1.0)*sj1);
IkReal x4608=(gconst121*r20);
IkReal x4609=(gconst121*r00);
IkReal x4610=(gconst122*r11);
IkReal x4611=((1.0)*x4602);
IkReal x4612=((1.0)*x4601);
evalcond[0]=((((-1.0)*x4606*x4612))+(((-1.0)*x4608*x4612))+((r22*x4602)));
evalcond[1]=(cj0+(((-1.0)*x4604*x4612))+((r02*x4602))+(((-1.0)*x4609*x4612)));
evalcond[2]=(sj0+((r12*x4602))+(((-1.0)*x4605*x4612))+(((-1.0)*x4610*x4612)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*x4606*x4611))+(((-1.0)*cj2*x4607))+(((-1.0)*x4608*x4611))+(((-1.0)*r22*x4612)));
evalcond[4]=((((-1.0)*r02*x4612))+((sj0*x4603))+(((-1.0)*x4604*x4611))+(((-1.0)*x4609*x4611))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*r12*x4612))+(((-1.0)*x4605*x4611))+(((-1.0)*cj0*x4603))+(((-1.0)*x4610*x4611))+(((-1.0)*cj0*sj2*x4607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4615 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4615)==0){
continue;
}
IkReal x4613=pow(x4615,-0.5);
IkReal x4614=((1.0)*x4613);
CheckValue<IkReal> x4616 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x4616.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x4616.value))));
IkReal gconst124=(r00*x4614);
IkReal gconst125=(r01*x4614);
CheckValue<IkReal> x4617 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x4617.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4617.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4621 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x4621.valid){
continue;
}
IkReal x4618=((1.0)*(x4621.value));
IkReal x4619=x4613;
IkReal x4620=((1.0)*x4619);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x4618)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x4618)));
IkReal gconst124=(r00*x4620);
IkReal gconst125=(r01*x4620);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x4625 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x4625.valid){
continue;
}
IkReal x4622=((1.0)*(x4625.value));
IkReal x4623=x4613;
IkReal x4624=((1.0)*x4623);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x4622)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x4622)));
IkReal gconst124=(r00*x4624);
IkReal gconst125=(r01*x4624);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4629 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x4629.valid){
continue;
}
IkReal x4626=((1.0)*(x4629.value));
IkReal x4627=x4613;
IkReal x4628=((1.0)*x4627);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x4626)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x4626)));
IkReal gconst124=(r00*x4628);
IkReal gconst125=(r01*x4628);
IkReal x4630=r02*r02;
IkReal x4631=((1.0)*sj0);
IkReal x4632=(cj0*r12);
CheckValue<IkReal> x4636=IKPowWithIntegerCheck(((-1.0)+x4630),-1);
if(!x4636.valid){
continue;
}
IkReal x4633=x4636.value;
if((((1.0)+(((-1.0)*x4630)))) < -0.00001)
continue;
IkReal x4634=IKsqrt(((1.0)+(((-1.0)*x4630))));
IkReal x4635=(x4633*x4634);
j4eval[0]=((IKabs((((sj0*x4635))+((r02*x4632*x4635))+(((-1.0)*x4630*x4631*x4635)))))+(IKabs(((((-1.0)*r02*x4631))+x4632))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4637=((1.0)*sj0);
CheckValue<IkReal> x4638=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r21))+((gconst125*r20)))),-1);
if(!x4638.valid){
continue;
}
CheckValue<IkReal> x4639 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4637))+((cj0*r12)))),IkReal(((((-1.0)*gconst124*r00*x4637))+((cj0*gconst124*r10))+(((-1.0)*gconst125*r01*x4637))+((cj0*gconst125*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4638.value)))+(x4639.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4640=IKsin(j4);
IkReal x4641=IKcos(j4);
IkReal x4642=(cj1*cj2);
IkReal x4643=((1.0)*sj1);
IkReal x4644=((1.0)*gconst124);
IkReal x4645=((1.0)*x4640);
IkReal x4646=((1.0)*gconst125*x4641);
evalcond[0]=((((-1.0)*r20*x4640*x4644))+((r22*x4641))+(((-1.0)*gconst125*r21*x4645)));
evalcond[1]=(((r02*x4641))+(((-1.0)*gconst125*r01*x4645))+cj0+(((-1.0)*r00*x4640*x4644)));
evalcond[2]=((((-1.0)*gconst125*r11*x4645))+sj0+((r12*x4641))+(((-1.0)*r10*x4640*x4644)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*r20*x4641*x4644))+(((-1.0)*r21*x4646))+(((-1.0)*r22*x4645))+(((-1.0)*cj2*x4643)));
evalcond[4]=((((-1.0)*r02*x4645))+((sj0*x4642))+(((-1.0)*r00*x4641*x4644))+((sj0*sj1*sj2))+(((-1.0)*r01*x4646)));
evalcond[5]=((((-1.0)*r10*x4641*x4644))+(((-1.0)*cj0*x4642))+(((-1.0)*r11*x4646))+(((-1.0)*r12*x4645))+(((-1.0)*cj0*sj2*x4643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4647=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r01))+((gconst125*r00)))),-1);
if(!x4647.valid){
continue;
}
CheckValue<IkReal> x4648 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst125*r21*sj0))+((gconst124*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4647.value)))+(x4648.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4649=IKsin(j4);
IkReal x4650=IKcos(j4);
IkReal x4651=(cj1*cj2);
IkReal x4652=((1.0)*sj1);
IkReal x4653=((1.0)*gconst124);
IkReal x4654=((1.0)*x4649);
IkReal x4655=((1.0)*gconst125*x4650);
evalcond[0]=((((-1.0)*gconst125*r21*x4654))+(((-1.0)*r20*x4649*x4653))+((r22*x4650)));
evalcond[1]=(cj0+((r02*x4650))+(((-1.0)*gconst125*r01*x4654))+(((-1.0)*r00*x4649*x4653)));
evalcond[2]=(((r12*x4650))+sj0+(((-1.0)*r10*x4649*x4653))+(((-1.0)*gconst125*r11*x4654)));
evalcond[3]=((((-1.0)*r20*x4650*x4653))+((cj1*sj2))+(((-1.0)*r22*x4654))+(((-1.0)*cj2*x4652))+(((-1.0)*r21*x4655)));
evalcond[4]=(((sj0*x4651))+(((-1.0)*r00*x4650*x4653))+(((-1.0)*r02*x4654))+(((-1.0)*r01*x4655))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*r10*x4650*x4653))+(((-1.0)*cj0*sj2*x4652))+(((-1.0)*cj0*x4651))+(((-1.0)*r12*x4654))+(((-1.0)*r11*x4655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4656=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst125*r10))+((gconst124*r11)))),-1);
if(!x4656.valid){
continue;
}
CheckValue<IkReal> x4657 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst125*r21))+((cj0*gconst124*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4656.value)))+(x4657.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4658=IKsin(j4);
IkReal x4659=IKcos(j4);
IkReal x4660=(cj1*cj2);
IkReal x4661=((1.0)*sj1);
IkReal x4662=((1.0)*gconst124);
IkReal x4663=((1.0)*x4658);
IkReal x4664=((1.0)*gconst125*x4659);
evalcond[0]=((((-1.0)*r20*x4658*x4662))+(((-1.0)*gconst125*r21*x4663))+((r22*x4659)));
evalcond[1]=(cj0+(((-1.0)*gconst125*r01*x4663))+((r02*x4659))+(((-1.0)*r00*x4658*x4662)));
evalcond[2]=(((r12*x4659))+(((-1.0)*r10*x4658*x4662))+sj0+(((-1.0)*gconst125*r11*x4663)));
evalcond[3]=((((-1.0)*r21*x4664))+((cj1*sj2))+(((-1.0)*r20*x4659*x4662))+(((-1.0)*r22*x4663))+(((-1.0)*cj2*x4661)));
evalcond[4]=(((sj0*x4660))+(((-1.0)*r01*x4664))+((sj0*sj1*sj2))+(((-1.0)*r00*x4659*x4662))+(((-1.0)*r02*x4663)));
evalcond[5]=((((-1.0)*cj0*x4660))+(((-1.0)*r11*x4664))+(((-1.0)*r12*x4663))+(((-1.0)*cj0*sj2*x4661))+(((-1.0)*r10*x4659*x4662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4665=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x4665;
j4eval[1]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4665);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4666=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x4666;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x4666);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4667=cj5*cj5;
IkReal x4668=r00*r00;
IkReal x4669=(cj5*r01);
IkReal x4670=(r00*sj5);
IkReal x4671=((((-1.0)*x4668))+(((-1.0)*(r02*r02)))+(((-1.0)*x4667*(r01*r01)))+(((-2.0)*x4669*x4670))+((x4667*x4668)));
j4eval[0]=x4671;
j4eval[1]=IKsign(x4671);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4669))+(((-1.0)*x4670))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4672=cj5*cj5;
IkReal x4673=r00*r00;
IkReal x4674=(cj5*r01);
IkReal x4675=(r00*sj5);
CheckValue<IkReal> x4676=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4672*(r01*r01)))+(((-2.0)*x4674*x4675))+(((-1.0)*(r02*r02)))+((x4672*x4673))+(((-1.0)*x4673)))),-1);
if(!x4676.valid){
continue;
}
CheckValue<IkReal> x4677 = IKatan2WithCheck(IkReal(((((-1.0)*x4674))+(((-1.0)*x4675)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x4677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4676.value)))+(x4677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4678=IKsin(j4);
IkReal x4679=IKcos(j4);
IkReal x4680=(r00*sj5);
IkReal x4681=(cj5*r01);
IkReal x4682=(r20*sj5);
IkReal x4683=((1.0)*sj1);
IkReal x4684=(cj5*r21);
IkReal x4685=(cj5*r11);
IkReal x4686=(r10*sj5);
IkReal x4687=((1.0)*x4678);
IkReal x4688=((1.0)*x4679);
evalcond[0]=((((-1.0)*x4684*x4687))+(((-1.0)*x4682*x4687))+((r22*x4679)));
evalcond[1]=((((-1.0)*x4686*x4687))+((r12*x4679))+(((-1.0)*x4685*x4687)));
evalcond[2]=((1.0)+((r02*x4679))+(((-1.0)*x4680*x4687))+(((-1.0)*x4681*x4687)));
evalcond[3]=((((-1.0)*x4680*x4688))+(((-1.0)*x4681*x4688))+(((-1.0)*r02*x4687)));
evalcond[4]=((((-1.0)*x4684*x4688))+((cj1*sj2))+(((-1.0)*x4682*x4688))+(((-1.0)*r22*x4687))+(((-1.0)*cj2*x4683)));
evalcond[5]=((((-1.0)*x4686*x4688))+(((-1.0)*cj1*cj2))+(((-1.0)*x4685*x4688))+(((-1.0)*r12*x4687))+(((-1.0)*sj2*x4683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4689 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4689.valid){
continue;
}
CheckValue<IkReal> x4690=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x4690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4689.value)+(((1.5707963267949)*(x4690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4691=IKsin(j4);
IkReal x4692=IKcos(j4);
IkReal x4693=(r00*sj5);
IkReal x4694=(cj5*r01);
IkReal x4695=(r20*sj5);
IkReal x4696=((1.0)*sj1);
IkReal x4697=(cj5*r21);
IkReal x4698=(cj5*r11);
IkReal x4699=(r10*sj5);
IkReal x4700=((1.0)*x4691);
IkReal x4701=((1.0)*x4692);
evalcond[0]=((((-1.0)*x4695*x4700))+(((-1.0)*x4697*x4700))+((r22*x4692)));
evalcond[1]=((((-1.0)*x4698*x4700))+((r12*x4692))+(((-1.0)*x4699*x4700)));
evalcond[2]=((1.0)+((r02*x4692))+(((-1.0)*x4693*x4700))+(((-1.0)*x4694*x4700)));
evalcond[3]=((((-1.0)*x4693*x4701))+(((-1.0)*r02*x4700))+(((-1.0)*x4694*x4701)));
evalcond[4]=((((-1.0)*r22*x4700))+(((-1.0)*x4695*x4701))+(((-1.0)*x4697*x4701))+((cj1*sj2))+(((-1.0)*cj2*x4696)));
evalcond[5]=((((-1.0)*sj2*x4696))+(((-1.0)*cj1*cj2))+(((-1.0)*r12*x4700))+(((-1.0)*x4698*x4701))+(((-1.0)*x4699*x4701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4702 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4702.valid){
continue;
}
CheckValue<IkReal> x4703=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x4703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4702.value)+(((1.5707963267949)*(x4703.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4704=IKsin(j4);
IkReal x4705=IKcos(j4);
IkReal x4706=(r00*sj5);
IkReal x4707=(cj5*r01);
IkReal x4708=(r20*sj5);
IkReal x4709=((1.0)*sj1);
IkReal x4710=(cj5*r21);
IkReal x4711=(cj5*r11);
IkReal x4712=(r10*sj5);
IkReal x4713=((1.0)*x4704);
IkReal x4714=((1.0)*x4705);
evalcond[0]=((((-1.0)*x4710*x4713))+(((-1.0)*x4708*x4713))+((r22*x4705)));
evalcond[1]=((((-1.0)*x4712*x4713))+(((-1.0)*x4711*x4713))+((r12*x4705)));
evalcond[2]=((1.0)+(((-1.0)*x4707*x4713))+((r02*x4705))+(((-1.0)*x4706*x4713)));
evalcond[3]=((((-1.0)*r02*x4713))+(((-1.0)*x4707*x4714))+(((-1.0)*x4706*x4714)));
evalcond[4]=((((-1.0)*r22*x4713))+(((-1.0)*x4710*x4714))+((cj1*sj2))+(((-1.0)*x4708*x4714))+(((-1.0)*cj2*x4709)));
evalcond[5]=((((-1.0)*x4712*x4714))+(((-1.0)*cj1*cj2))+(((-1.0)*x4711*x4714))+(((-1.0)*sj2*x4709))+(((-1.0)*r12*x4713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4715=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x4715;
j4eval[1]=IKsign(x4715);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4716=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x4716;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x4716);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4717=cj5*cj5;
IkReal x4718=r00*r00;
IkReal x4719=(r00*sj5);
IkReal x4720=(cj5*r01);
IkReal x4721=((((-1.0)*x4717*x4718))+x4718+((x4717*(r01*r01)))+(r02*r02)+(((2.0)*x4719*x4720)));
j4eval[0]=x4721;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x4719))+(((-1.0)*x4720))))));
j4eval[2]=IKsign(x4721);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4722=cj5*cj5;
IkReal x4723=r00*r00;
IkReal x4724=(r00*sj5);
IkReal x4725=(cj5*r01);
CheckValue<IkReal> x4726 = IKatan2WithCheck(IkReal(((((-1.0)*x4724))+(((-1.0)*x4725)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x4726.valid){
continue;
}
CheckValue<IkReal> x4727=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4722*x4723))+x4723+((x4722*(r01*r01)))+(r02*r02)+(((2.0)*x4724*x4725)))),-1);
if(!x4727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4726.value)+(((1.5707963267949)*(x4727.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4728=IKsin(j4);
IkReal x4729=IKcos(j4);
IkReal x4730=(r00*sj5);
IkReal x4731=(cj5*r01);
IkReal x4732=(r20*sj5);
IkReal x4733=(cj5*r11);
IkReal x4734=(cj5*r21);
IkReal x4735=(r10*sj5);
IkReal x4736=((1.0)*x4728);
IkReal x4737=((1.0)*x4729);
evalcond[0]=((((-1.0)*x4734*x4736))+(((-1.0)*x4732*x4736))+((r22*x4729)));
evalcond[1]=((((-1.0)*x4735*x4736))+(((-1.0)*x4733*x4736))+((r12*x4729)));
evalcond[2]=((-1.0)+(((-1.0)*x4730*x4736))+(((-1.0)*x4731*x4736))+((r02*x4729)));
evalcond[3]=((((-1.0)*x4730*x4737))+(((-1.0)*x4731*x4737))+(((-1.0)*r02*x4736)));
evalcond[4]=((((-1.0)*x4735*x4737))+(((-1.0)*r12*x4736))+((sj1*sj2))+(((-1.0)*x4733*x4737))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x4734*x4737))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x4732*x4737))+(((-1.0)*r22*x4736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4738 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4738.valid){
continue;
}
CheckValue<IkReal> x4739=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x4739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4738.value)+(((1.5707963267949)*(x4739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4740=IKsin(j4);
IkReal x4741=IKcos(j4);
IkReal x4742=(r00*sj5);
IkReal x4743=(cj5*r01);
IkReal x4744=(r20*sj5);
IkReal x4745=(cj5*r11);
IkReal x4746=(cj5*r21);
IkReal x4747=(r10*sj5);
IkReal x4748=((1.0)*x4740);
IkReal x4749=((1.0)*x4741);
evalcond[0]=((((-1.0)*x4746*x4748))+(((-1.0)*x4744*x4748))+((r22*x4741)));
evalcond[1]=(((r12*x4741))+(((-1.0)*x4745*x4748))+(((-1.0)*x4747*x4748)));
evalcond[2]=((-1.0)+((r02*x4741))+(((-1.0)*x4742*x4748))+(((-1.0)*x4743*x4748)));
evalcond[3]=((((-1.0)*x4742*x4749))+(((-1.0)*x4743*x4749))+(((-1.0)*r02*x4748)));
evalcond[4]=((((-1.0)*r12*x4748))+((sj1*sj2))+(((-1.0)*x4745*x4749))+(((-1.0)*x4747*x4749))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x4746*x4749))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x4744*x4749))+(((-1.0)*r22*x4748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4750 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4750.valid){
continue;
}
CheckValue<IkReal> x4751=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x4751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4750.value)+(((1.5707963267949)*(x4751.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4752=IKsin(j4);
IkReal x4753=IKcos(j4);
IkReal x4754=(r00*sj5);
IkReal x4755=(cj5*r01);
IkReal x4756=(r20*sj5);
IkReal x4757=(cj5*r11);
IkReal x4758=(cj5*r21);
IkReal x4759=(r10*sj5);
IkReal x4760=((1.0)*x4752);
IkReal x4761=((1.0)*x4753);
evalcond[0]=((((-1.0)*x4758*x4760))+(((-1.0)*x4756*x4760))+((r22*x4753)));
evalcond[1]=(((r12*x4753))+(((-1.0)*x4757*x4760))+(((-1.0)*x4759*x4760)));
evalcond[2]=((-1.0)+(((-1.0)*x4755*x4760))+(((-1.0)*x4754*x4760))+((r02*x4753)));
evalcond[3]=((((-1.0)*r02*x4760))+(((-1.0)*x4755*x4761))+(((-1.0)*x4754*x4761)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x4757*x4761))+(((-1.0)*r12*x4760))+(((-1.0)*x4759*x4761))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x4758*x4761))+(((-1.0)*r22*x4760))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x4756*x4761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4763 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4763)==0){
continue;
}
IkReal x4762=pow(x4763,-0.5);
CheckValue<IkReal> x4764 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x4764.valid){
continue;
}
IkReal gconst126=((-1.0)*(x4764.value));
IkReal gconst127=(r10*x4762);
IkReal gconst128=(r11*x4762);
CheckValue<IkReal> x4765 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x4765.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4765.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4768 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x4768.valid){
continue;
}
IkReal x4766=((-1.0)*(x4768.value));
IkReal x4767=x4762;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x4766;
IkReal gconst126=x4766;
IkReal gconst127=(r10*x4767);
IkReal gconst128=(r11*x4767);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4769=((1.0)*sj0);
CheckValue<IkReal> x4770=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst127*r21))+((gconst128*r20)))),-1);
if(!x4770.valid){
continue;
}
CheckValue<IkReal> x4771 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4769))+((cj0*r12)))),IkReal(((((-1.0)*gconst127*r00*x4769))+(((-1.0)*gconst128*r01*x4769))+((cj0*gconst128*r11))+((cj0*gconst127*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4770.value)))+(x4771.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4772=IKsin(j4);
IkReal x4773=IKcos(j4);
IkReal x4774=(cj1*cj2);
IkReal x4775=(gconst128*r11);
IkReal x4776=((1.0)*sj1);
IkReal x4777=(gconst128*r21);
IkReal x4778=(gconst128*r01);
IkReal x4779=((1.0)*x4772);
IkReal x4780=((1.0)*x4773);
IkReal x4781=(gconst127*x4780);
evalcond[0]=((((-1.0)*x4777*x4779))+(((-1.0)*gconst127*r20*x4779))+((r22*x4773)));
evalcond[1]=(cj0+(((-1.0)*x4778*x4779))+((r02*x4773))+(((-1.0)*gconst127*r00*x4779)));
evalcond[2]=(sj0+((r12*x4773))+(((-1.0)*gconst127*r10*x4779))+(((-1.0)*x4775*x4779)));
evalcond[3]=((((-1.0)*cj2*x4776))+(((-1.0)*r20*x4781))+((cj1*sj2))+(((-1.0)*x4777*x4780))+(((-1.0)*r22*x4779)));
evalcond[4]=((((-1.0)*r00*x4781))+((sj0*sj1*sj2))+((sj0*x4774))+(((-1.0)*x4778*x4780))+(((-1.0)*r02*x4779)));
evalcond[5]=((((-1.0)*cj0*x4774))+(((-1.0)*r12*x4779))+(((-1.0)*cj0*sj2*x4776))+(((-1.0)*r10*x4781))+(((-1.0)*x4775*x4780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4782=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst127*r01))+((gconst128*r00)))),-1);
if(!x4782.valid){
continue;
}
CheckValue<IkReal> x4783 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst128*r21*sj0))+((gconst127*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4782.value)))+(x4783.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4784=IKsin(j4);
IkReal x4785=IKcos(j4);
IkReal x4786=(cj1*cj2);
IkReal x4787=(gconst128*r11);
IkReal x4788=((1.0)*sj1);
IkReal x4789=(gconst128*r21);
IkReal x4790=(gconst128*r01);
IkReal x4791=((1.0)*x4784);
IkReal x4792=((1.0)*x4785);
IkReal x4793=(gconst127*x4792);
evalcond[0]=((((-1.0)*gconst127*r20*x4791))+((r22*x4785))+(((-1.0)*x4789*x4791)));
evalcond[1]=(((r02*x4785))+cj0+(((-1.0)*x4790*x4791))+(((-1.0)*gconst127*r00*x4791)));
evalcond[2]=((((-1.0)*x4787*x4791))+sj0+((r12*x4785))+(((-1.0)*gconst127*r10*x4791)));
evalcond[3]=((((-1.0)*x4789*x4792))+((cj1*sj2))+(((-1.0)*r22*x4791))+(((-1.0)*cj2*x4788))+(((-1.0)*r20*x4793)));
evalcond[4]=(((sj0*x4786))+(((-1.0)*r02*x4791))+(((-1.0)*x4790*x4792))+((sj0*sj1*sj2))+(((-1.0)*r00*x4793)));
evalcond[5]=((((-1.0)*x4787*x4792))+(((-1.0)*cj0*x4786))+(((-1.0)*cj0*sj2*x4788))+(((-1.0)*r12*x4791))+(((-1.0)*r10*x4793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4796 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4796)==0){
continue;
}
IkReal x4794=pow(x4796,-0.5);
IkReal x4795=((-1.0)*x4794);
CheckValue<IkReal> x4797 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x4797.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x4797.value))));
IkReal gconst130=(r10*x4795);
IkReal gconst131=(r11*x4795);
CheckValue<IkReal> x4798 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x4798.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4798.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x4802 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x4802.valid){
continue;
}
IkReal x4799=((1.0)*(x4802.value));
IkReal x4800=x4794;
IkReal x4801=((-1.0)*x4800);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x4799)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x4799)));
IkReal gconst130=(r10*x4801);
IkReal gconst131=(r11*x4801);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4806 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x4806.valid){
continue;
}
IkReal x4803=((1.0)*(x4806.value));
IkReal x4804=x4794;
IkReal x4805=((-1.0)*x4804);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x4803)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x4803)));
IkReal gconst130=(r10*x4805);
IkReal gconst131=(r11*x4805);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4810 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x4810.valid){
continue;
}
IkReal x4807=((1.0)*(x4810.value));
IkReal x4808=x4794;
IkReal x4809=((-1.0)*x4808);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x4807)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x4807)));
IkReal gconst130=(r10*x4809);
IkReal gconst131=(r11*x4809);
IkReal x4811=r12*r12;
IkReal x4812=(r02*sj0);
IkReal x4813=((1.0)*x4811);
CheckValue<IkReal> x4817=IKPowWithIntegerCheck(((-1.0)+x4811),-1);
if(!x4817.valid){
continue;
}
IkReal x4814=x4817.value;
if((((1.0)+(((-1.0)*x4813)))) < -0.00001)
continue;
IkReal x4815=IKsqrt(((1.0)+(((-1.0)*x4813))));
IkReal x4816=(cj0*x4814*x4815);
j4eval[0]=((IKabs(((((-1.0)*x4812))+((cj0*r12)))))+(IKabs(((((-1.0)*x4813*x4816))+((r12*x4812*x4814*x4815))+x4816))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4818=((1.0)*sj0);
CheckValue<IkReal> x4819=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r21))+((gconst131*r20)))),-1);
if(!x4819.valid){
continue;
}
CheckValue<IkReal> x4820 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4818))+((cj0*r12)))),IkReal(((((-1.0)*gconst131*r01*x4818))+((cj0*gconst130*r10))+((cj0*gconst131*r11))+(((-1.0)*gconst130*r00*x4818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4819.value)))+(x4820.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4821=IKsin(j4);
IkReal x4822=IKcos(j4);
IkReal x4823=(cj1*cj2);
IkReal x4824=(gconst130*r10);
IkReal x4825=(gconst131*r11);
IkReal x4826=((1.0)*sj1);
IkReal x4827=(gconst131*r01);
IkReal x4828=(gconst131*r21);
IkReal x4829=(gconst130*r00);
IkReal x4830=(gconst130*r20);
IkReal x4831=((1.0)*x4821);
IkReal x4832=((1.0)*x4822);
evalcond[0]=(((r22*x4822))+(((-1.0)*x4830*x4831))+(((-1.0)*x4828*x4831)));
evalcond[1]=(cj0+((r02*x4822))+(((-1.0)*x4829*x4831))+(((-1.0)*x4827*x4831)));
evalcond[2]=(sj0+(((-1.0)*x4824*x4831))+((r12*x4822))+(((-1.0)*x4825*x4831)));
evalcond[3]=((((-1.0)*x4830*x4832))+((cj1*sj2))+(((-1.0)*r22*x4831))+(((-1.0)*cj2*x4826))+(((-1.0)*x4828*x4832)));
evalcond[4]=((((-1.0)*x4829*x4832))+(((-1.0)*r02*x4831))+(((-1.0)*x4827*x4832))+((sj0*sj1*sj2))+((sj0*x4823)));
evalcond[5]=((((-1.0)*x4824*x4832))+(((-1.0)*r12*x4831))+(((-1.0)*x4825*x4832))+(((-1.0)*cj0*sj2*x4826))+(((-1.0)*cj0*x4823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4833 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r20*sj0))+((gconst131*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4833.valid){
continue;
}
CheckValue<IkReal> x4834=IKPowWithIntegerCheck(IKsign((((gconst131*r00))+(((-1.0)*gconst130*r01)))),-1);
if(!x4834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4833.value)+(((1.5707963267949)*(x4834.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4835=IKsin(j4);
IkReal x4836=IKcos(j4);
IkReal x4837=(cj1*cj2);
IkReal x4838=(gconst130*r10);
IkReal x4839=(gconst131*r11);
IkReal x4840=((1.0)*sj1);
IkReal x4841=(gconst131*r01);
IkReal x4842=(gconst131*r21);
IkReal x4843=(gconst130*r00);
IkReal x4844=(gconst130*r20);
IkReal x4845=((1.0)*x4835);
IkReal x4846=((1.0)*x4836);
evalcond[0]=((((-1.0)*x4842*x4845))+(((-1.0)*x4844*x4845))+((r22*x4836)));
evalcond[1]=((((-1.0)*x4841*x4845))+cj0+((r02*x4836))+(((-1.0)*x4843*x4845)));
evalcond[2]=(((r12*x4836))+sj0+(((-1.0)*x4838*x4845))+(((-1.0)*x4839*x4845)));
evalcond[3]=((((-1.0)*cj2*x4840))+(((-1.0)*x4842*x4846))+((cj1*sj2))+(((-1.0)*x4844*x4846))+(((-1.0)*r22*x4845)));
evalcond[4]=((((-1.0)*x4841*x4846))+(((-1.0)*r02*x4845))+((sj0*x4837))+((sj0*sj1*sj2))+(((-1.0)*x4843*x4846)));
evalcond[5]=((((-1.0)*x4838*x4846))+(((-1.0)*cj0*sj2*x4840))+(((-1.0)*x4839*x4846))+(((-1.0)*cj0*x4837))+(((-1.0)*r12*x4845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4847=IKPowWithIntegerCheck(IKsign((((gconst130*r11))+(((-1.0)*gconst131*r10)))),-1);
if(!x4847.valid){
continue;
}
CheckValue<IkReal> x4848 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst131*r21))+((cj0*gconst130*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4847.value)))+(x4848.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4849=IKsin(j4);
IkReal x4850=IKcos(j4);
IkReal x4851=(cj1*cj2);
IkReal x4852=(gconst130*r10);
IkReal x4853=(gconst131*r11);
IkReal x4854=((1.0)*sj1);
IkReal x4855=(gconst131*r01);
IkReal x4856=(gconst131*r21);
IkReal x4857=(gconst130*r00);
IkReal x4858=(gconst130*r20);
IkReal x4859=((1.0)*x4849);
IkReal x4860=((1.0)*x4850);
evalcond[0]=((((-1.0)*x4856*x4859))+(((-1.0)*x4858*x4859))+((r22*x4850)));
evalcond[1]=(cj0+(((-1.0)*x4857*x4859))+((r02*x4850))+(((-1.0)*x4855*x4859)));
evalcond[2]=((((-1.0)*x4853*x4859))+sj0+((r12*x4850))+(((-1.0)*x4852*x4859)));
evalcond[3]=((((-1.0)*x4856*x4860))+((cj1*sj2))+(((-1.0)*x4858*x4860))+(((-1.0)*r22*x4859))+(((-1.0)*cj2*x4854)));
evalcond[4]=((((-1.0)*x4855*x4860))+(((-1.0)*x4857*x4860))+(((-1.0)*r02*x4859))+((sj0*sj1*sj2))+((sj0*x4851)));
evalcond[5]=((((-1.0)*r12*x4859))+(((-1.0)*x4852*x4860))+(((-1.0)*cj0*sj2*x4854))+(((-1.0)*cj0*x4851))+(((-1.0)*x4853*x4860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4861=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x4861;
j4eval[1]=IKsign(x4861);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4862=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x4862;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x4862);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4863=cj5*cj5;
IkReal x4864=r10*r10;
IkReal x4865=(cj5*r11);
IkReal x4866=(r10*sj5);
IkReal x4867=((((-1.0)*x4863*(r11*r11)))+(((-2.0)*x4865*x4866))+((x4863*x4864))+(((-1.0)*(r12*r12)))+(((-1.0)*x4864)));
j4eval[0]=x4867;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x4865))+(((-1.0)*x4866))))));
j4eval[2]=IKsign(x4867);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4868=cj5*cj5;
IkReal x4869=r10*r10;
IkReal x4870=(cj5*r11);
IkReal x4871=(r10*sj5);
CheckValue<IkReal> x4872=IKPowWithIntegerCheck(IKsign((((x4868*x4869))+(((-1.0)*(r12*r12)))+(((-1.0)*x4869))+(((-1.0)*x4868*(r11*r11)))+(((-2.0)*x4870*x4871)))),-1);
if(!x4872.valid){
continue;
}
CheckValue<IkReal> x4873 = IKatan2WithCheck(IkReal(((((-1.0)*x4871))+(((-1.0)*x4870)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x4873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4872.value)))+(x4873.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4874=IKsin(j4);
IkReal x4875=IKcos(j4);
IkReal x4876=(r00*sj5);
IkReal x4877=(cj5*r01);
IkReal x4878=(r20*sj5);
IkReal x4879=(cj5*r21);
IkReal x4880=(cj5*r11);
IkReal x4881=(r10*sj5);
IkReal x4882=((1.0)*x4874);
IkReal x4883=((1.0)*x4875);
evalcond[0]=((((-1.0)*x4879*x4882))+((r22*x4875))+(((-1.0)*x4878*x4882)));
evalcond[1]=((((-1.0)*x4877*x4882))+((r02*x4875))+(((-1.0)*x4876*x4882)));
evalcond[2]=((1.0)+(((-1.0)*x4880*x4882))+(((-1.0)*x4881*x4882))+((r12*x4875)));
evalcond[3]=((((-1.0)*r12*x4882))+(((-1.0)*x4880*x4883))+(((-1.0)*x4881*x4883)));
evalcond[4]=((((-1.0)*x4877*x4883))+(((-1.0)*x4876*x4883))+(((-1.0)*r02*x4882))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x4879*x4883))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x4878*x4883))+(((-1.0)*r22*x4882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4884 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4884.valid){
continue;
}
CheckValue<IkReal> x4885=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x4885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4884.value)+(((1.5707963267949)*(x4885.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4886=IKsin(j4);
IkReal x4887=IKcos(j4);
IkReal x4888=(r00*sj5);
IkReal x4889=(cj5*r01);
IkReal x4890=(r20*sj5);
IkReal x4891=(cj5*r21);
IkReal x4892=(cj5*r11);
IkReal x4893=(r10*sj5);
IkReal x4894=((1.0)*x4886);
IkReal x4895=((1.0)*x4887);
evalcond[0]=((((-1.0)*x4891*x4894))+(((-1.0)*x4890*x4894))+((r22*x4887)));
evalcond[1]=((((-1.0)*x4888*x4894))+((r02*x4887))+(((-1.0)*x4889*x4894)));
evalcond[2]=((1.0)+((r12*x4887))+(((-1.0)*x4893*x4894))+(((-1.0)*x4892*x4894)));
evalcond[3]=((((-1.0)*r12*x4894))+(((-1.0)*x4893*x4895))+(((-1.0)*x4892*x4895)));
evalcond[4]=((((-1.0)*x4888*x4895))+((sj1*sj2))+(((-1.0)*r02*x4894))+((cj1*cj2))+(((-1.0)*x4889*x4895)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x4891*x4895))+(((-1.0)*x4890*x4895))+(((-1.0)*r22*x4894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4896=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x4896.valid){
continue;
}
CheckValue<IkReal> x4897 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4896.value)))+(x4897.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4898=IKsin(j4);
IkReal x4899=IKcos(j4);
IkReal x4900=(r00*sj5);
IkReal x4901=(cj5*r01);
IkReal x4902=(r20*sj5);
IkReal x4903=(cj5*r21);
IkReal x4904=(cj5*r11);
IkReal x4905=(r10*sj5);
IkReal x4906=((1.0)*x4898);
IkReal x4907=((1.0)*x4899);
evalcond[0]=((((-1.0)*x4902*x4906))+(((-1.0)*x4903*x4906))+((r22*x4899)));
evalcond[1]=(((r02*x4899))+(((-1.0)*x4900*x4906))+(((-1.0)*x4901*x4906)));
evalcond[2]=((1.0)+(((-1.0)*x4905*x4906))+((r12*x4899))+(((-1.0)*x4904*x4906)));
evalcond[3]=((((-1.0)*r12*x4906))+(((-1.0)*x4905*x4907))+(((-1.0)*x4904*x4907)));
evalcond[4]=((((-1.0)*r02*x4906))+((sj1*sj2))+(((-1.0)*x4900*x4907))+((cj1*cj2))+(((-1.0)*x4901*x4907)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x4902*x4907))+(((-1.0)*x4903*x4907))+(((-1.0)*r22*x4906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4908=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x4908;
j4eval[1]=IKsign(x4908);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4909=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x4909;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x4909);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4910=cj5*cj5;
IkReal x4911=r10*r10;
IkReal x4912=(cj5*r11);
IkReal x4913=(r10*sj5);
IkReal x4914=(x4911+(r12*r12)+(((-1.0)*x4910*x4911))+(((2.0)*x4912*x4913))+((x4910*(r11*r11))));
j4eval[0]=x4914;
j4eval[1]=IKsign(x4914);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x4913))+(((-1.0)*x4912))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4915=cj5*cj5;
IkReal x4916=r10*r10;
IkReal x4917=(cj5*r11);
IkReal x4918=(r10*sj5);
CheckValue<IkReal> x4919 = IKatan2WithCheck(IkReal(((((-1.0)*x4917))+(((-1.0)*x4918)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x4919.valid){
continue;
}
CheckValue<IkReal> x4920=IKPowWithIntegerCheck(IKsign((x4916+(r12*r12)+((x4915*(r11*r11)))+(((-1.0)*x4915*x4916))+(((2.0)*x4917*x4918)))),-1);
if(!x4920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4919.value)+(((1.5707963267949)*(x4920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4921=IKsin(j4);
IkReal x4922=IKcos(j4);
IkReal x4923=(r00*sj5);
IkReal x4924=(cj5*r01);
IkReal x4925=(r20*sj5);
IkReal x4926=((1.0)*sj1);
IkReal x4927=(cj5*r21);
IkReal x4928=(cj5*r11);
IkReal x4929=(r10*sj5);
IkReal x4930=((1.0)*x4921);
IkReal x4931=((1.0)*x4922);
evalcond[0]=((((-1.0)*x4925*x4930))+((r22*x4922))+(((-1.0)*x4927*x4930)));
evalcond[1]=((((-1.0)*x4924*x4930))+((r02*x4922))+(((-1.0)*x4923*x4930)));
evalcond[2]=((-1.0)+(((-1.0)*x4929*x4930))+(((-1.0)*x4928*x4930))+((r12*x4922)));
evalcond[3]=((((-1.0)*r12*x4930))+(((-1.0)*x4929*x4931))+(((-1.0)*x4928*x4931)));
evalcond[4]=((((-1.0)*x4925*x4931))+(((-1.0)*cj2*x4926))+((cj1*sj2))+(((-1.0)*x4927*x4931))+(((-1.0)*r22*x4930)));
evalcond[5]=((((-1.0)*r02*x4930))+(((-1.0)*x4924*x4931))+(((-1.0)*cj1*cj2))+(((-1.0)*x4923*x4931))+(((-1.0)*sj2*x4926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4932 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4932.valid){
continue;
}
CheckValue<IkReal> x4933=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x4933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4932.value)+(((1.5707963267949)*(x4933.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4934=IKsin(j4);
IkReal x4935=IKcos(j4);
IkReal x4936=(r00*sj5);
IkReal x4937=(cj5*r01);
IkReal x4938=(r20*sj5);
IkReal x4939=((1.0)*sj1);
IkReal x4940=(cj5*r21);
IkReal x4941=(cj5*r11);
IkReal x4942=(r10*sj5);
IkReal x4943=((1.0)*x4934);
IkReal x4944=((1.0)*x4935);
evalcond[0]=((((-1.0)*x4938*x4943))+(((-1.0)*x4940*x4943))+((r22*x4935)));
evalcond[1]=((((-1.0)*x4937*x4943))+(((-1.0)*x4936*x4943))+((r02*x4935)));
evalcond[2]=((-1.0)+(((-1.0)*x4942*x4943))+((r12*x4935))+(((-1.0)*x4941*x4943)));
evalcond[3]=((((-1.0)*x4942*x4944))+(((-1.0)*x4941*x4944))+(((-1.0)*r12*x4943)));
evalcond[4]=((((-1.0)*x4938*x4944))+(((-1.0)*x4940*x4944))+(((-1.0)*cj2*x4939))+((cj1*sj2))+(((-1.0)*r22*x4943)));
evalcond[5]=((((-1.0)*x4937*x4944))+(((-1.0)*x4936*x4944))+(((-1.0)*cj1*cj2))+(((-1.0)*r02*x4943))+(((-1.0)*sj2*x4939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4945 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4945.valid){
continue;
}
CheckValue<IkReal> x4946=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x4946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4945.value)+(((1.5707963267949)*(x4946.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4947=IKsin(j4);
IkReal x4948=IKcos(j4);
IkReal x4949=(r00*sj5);
IkReal x4950=(cj5*r01);
IkReal x4951=(r20*sj5);
IkReal x4952=((1.0)*sj1);
IkReal x4953=(cj5*r21);
IkReal x4954=(cj5*r11);
IkReal x4955=(r10*sj5);
IkReal x4956=((1.0)*x4947);
IkReal x4957=((1.0)*x4948);
evalcond[0]=((((-1.0)*x4953*x4956))+(((-1.0)*x4951*x4956))+((r22*x4948)));
evalcond[1]=(((r02*x4948))+(((-1.0)*x4949*x4956))+(((-1.0)*x4950*x4956)));
evalcond[2]=((-1.0)+(((-1.0)*x4955*x4956))+((r12*x4948))+(((-1.0)*x4954*x4956)));
evalcond[3]=((((-1.0)*x4955*x4957))+(((-1.0)*r12*x4956))+(((-1.0)*x4954*x4957)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*r22*x4956))+(((-1.0)*x4953*x4957))+(((-1.0)*cj2*x4952))+(((-1.0)*x4951*x4957)));
evalcond[5]=((((-1.0)*sj2*x4952))+(((-1.0)*cj1*cj2))+(((-1.0)*r02*x4956))+(((-1.0)*x4949*x4957))+(((-1.0)*x4950*x4957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4958=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4958);
rxp0_2=(py*r00);
rxp1_0=(r21*x4958);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4959=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4959);
rxp0_2=(py*r00);
rxp1_0=(r21*x4959);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4960=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4960);
rxp0_2=(py*r00);
rxp1_0=(r21*x4960);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4963=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x4963.valid){
continue;
}
IkReal x4961=x4963.value;
IkReal x4962=((1.0)*sj0*x4961);
cj4array[0]=((((-1.0)*cj1*cj2*x4962))+(((-1.0)*sj1*sj2*x4962)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4964=IKsin(j4);
IkReal x4965=IKcos(j4);
IkReal x4966=(r20*sj5);
IkReal x4967=((1.0)*cj5*r21);
IkReal x4968=((1.0)*x4964);
evalcond[0]=((-1.0)*r12*x4964);
evalcond[1]=(sj0+((r12*x4965)));
evalcond[2]=((((-1.0)*x4964*x4967))+(((-1.0)*x4966*x4968)));
evalcond[3]=((((-1.0)*cj5*r01*x4968))+(((-1.0)*r00*sj5*x4968)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x4965*x4967))+(((-1.0)*x4965*x4966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4970=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x4970.valid){
continue;
}
IkReal x4969=x4970.value;
cj4array[0]=((((-1.0)*cj1*sj2*x4969))+((cj2*sj1*x4969)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4971=IKsin(j4);
IkReal x4972=IKcos(j4);
IkReal x4973=((1.0)*cj5);
IkReal x4974=((1.0)*r00*sj5);
evalcond[0]=((-1.0)*r12*x4971);
evalcond[1]=(sj0+((r12*x4972)));
evalcond[2]=((((-1.0)*r21*x4971*x4973))+(((-1.0)*r20*sj5*x4971)));
evalcond[3]=((((-1.0)*r01*x4971*x4973))+(((-1.0)*x4971*x4974)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r01*x4972*x4973))+(((-1.0)*x4972*x4974))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4975=IKPowWithIntegerCheck(r12,-1);
if(!x4975.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4975.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4976=IKsin(j4);
IkReal x4977=IKcos(j4);
IkReal x4978=(r00*sj5);
IkReal x4979=(r20*sj5);
IkReal x4980=((1.0)*x4976);
IkReal x4981=((1.0)*x4977);
IkReal x4982=(cj5*x4981);
evalcond[0]=((-1.0)*r12*x4976);
evalcond[1]=((((-1.0)*x4979*x4980))+(((-1.0)*cj5*r21*x4980)));
evalcond[2]=((((-1.0)*cj5*r01*x4980))+(((-1.0)*x4978*x4980)));
evalcond[3]=((((-1.0)*r21*x4982))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x4979*x4981)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*x4978*x4981))+(((-1.0)*r01*x4982))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4983=((1.0)*sj0);
CheckValue<IkReal> x4984 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4983))+((cj0*r12)))),IkReal(((((-1.0)*cj5*r01*x4983))+((cj0*cj5*r11))+(((-1.0)*r00*sj5*x4983))+((cj0*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4984.valid){
continue;
}
CheckValue<IkReal> x4985=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x4985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4984.value)+(((1.5707963267949)*(x4985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4986=IKsin(j4);
IkReal x4987=IKcos(j4);
IkReal x4988=(cj1*cj2);
IkReal x4989=(r00*sj5);
IkReal x4990=(cj5*r01);
IkReal x4991=(r20*sj5);
IkReal x4992=(cj5*r21);
IkReal x4993=((1.0)*sj1);
IkReal x4994=(cj5*r11);
IkReal x4995=(r10*sj5);
IkReal x4996=((1.0)*x4986);
IkReal x4997=((1.0)*x4987);
evalcond[0]=((((-1.0)*x4991*x4996))+((r22*x4987))+(((-1.0)*x4992*x4996)));
evalcond[1]=(cj0+(((-1.0)*x4990*x4996))+((r02*x4987))+(((-1.0)*x4989*x4996)));
evalcond[2]=(sj0+((r12*x4987))+(((-1.0)*x4995*x4996))+(((-1.0)*x4994*x4996)));
evalcond[3]=((((-1.0)*r22*x4996))+((cj1*sj2))+(((-1.0)*x4991*x4997))+(((-1.0)*cj2*x4993))+(((-1.0)*x4992*x4997)));
evalcond[4]=((((-1.0)*x4990*x4997))+(((-1.0)*r02*x4996))+((sj0*sj1*sj2))+(((-1.0)*x4989*x4997))+((sj0*x4988)));
evalcond[5]=((((-1.0)*r12*x4996))+(((-1.0)*cj0*sj2*x4993))+(((-1.0)*cj0*x4988))+(((-1.0)*x4995*x4997))+(((-1.0)*x4994*x4997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4998=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x4998.valid){
continue;
}
CheckValue<IkReal> x4999 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4998.value)))+(x4999.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5000=IKsin(j4);
IkReal x5001=IKcos(j4);
IkReal x5002=(cj1*cj2);
IkReal x5003=(r00*sj5);
IkReal x5004=(cj5*r01);
IkReal x5005=(r20*sj5);
IkReal x5006=(cj5*r21);
IkReal x5007=((1.0)*sj1);
IkReal x5008=(cj5*r11);
IkReal x5009=(r10*sj5);
IkReal x5010=((1.0)*x5000);
IkReal x5011=((1.0)*x5001);
evalcond[0]=(((r22*x5001))+(((-1.0)*x5006*x5010))+(((-1.0)*x5005*x5010)));
evalcond[1]=((((-1.0)*x5003*x5010))+cj0+(((-1.0)*x5004*x5010))+((r02*x5001)));
evalcond[2]=(((r12*x5001))+sj0+(((-1.0)*x5009*x5010))+(((-1.0)*x5008*x5010)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*r22*x5010))+(((-1.0)*x5006*x5011))+(((-1.0)*cj2*x5007))+(((-1.0)*x5005*x5011)));
evalcond[4]=((((-1.0)*x5003*x5011))+(((-1.0)*x5004*x5011))+(((-1.0)*r02*x5010))+((sj0*x5002))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*cj0*x5002))+(((-1.0)*x5009*x5011))+(((-1.0)*x5008*x5011))+(((-1.0)*cj0*sj2*x5007))+(((-1.0)*r12*x5010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5012 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5012.valid){
continue;
}
CheckValue<IkReal> x5013=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x5013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5012.value)+(((1.5707963267949)*(x5013.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5014=IKsin(j4);
IkReal x5015=IKcos(j4);
IkReal x5016=(cj1*cj2);
IkReal x5017=(r00*sj5);
IkReal x5018=(cj5*r01);
IkReal x5019=(r20*sj5);
IkReal x5020=(cj5*r21);
IkReal x5021=((1.0)*sj1);
IkReal x5022=(cj5*r11);
IkReal x5023=(r10*sj5);
IkReal x5024=((1.0)*x5014);
IkReal x5025=((1.0)*x5015);
evalcond[0]=((((-1.0)*x5019*x5024))+(((-1.0)*x5020*x5024))+((r22*x5015)));
evalcond[1]=(cj0+((r02*x5015))+(((-1.0)*x5017*x5024))+(((-1.0)*x5018*x5024)));
evalcond[2]=(sj0+(((-1.0)*x5023*x5024))+(((-1.0)*x5022*x5024))+((r12*x5015)));
evalcond[3]=((((-1.0)*x5019*x5025))+((cj1*sj2))+(((-1.0)*cj2*x5021))+(((-1.0)*x5020*x5025))+(((-1.0)*r22*x5024)));
evalcond[4]=((((-1.0)*r02*x5024))+((sj0*x5016))+(((-1.0)*x5017*x5025))+(((-1.0)*x5018*x5025))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*r12*x5024))+(((-1.0)*cj0*x5016))+(((-1.0)*cj0*sj2*x5021))+(((-1.0)*x5023*x5025))+(((-1.0)*x5022*x5025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5026=cj5*cj5;
IkReal x5027=r20*r20;
IkReal x5028=(cj1*sj2);
IkReal x5029=(r20*sj5);
IkReal x5030=(cj5*r21);
IkReal x5031=((1.0)*cj2*sj1);
CheckValue<IkReal> x5032 = IKatan2WithCheck(IkReal((((r22*x5028))+(((-1.0)*r22*x5031)))),IkReal(((((-1.0)*x5030*x5031))+((x5028*x5029))+(((-1.0)*x5029*x5031))+((x5028*x5030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5032.valid){
continue;
}
CheckValue<IkReal> x5033=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-1.0)*x5026*x5027))+x5027+(((2.0)*x5029*x5030))+((x5026*(r21*r21))))),-1);
if(!x5033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5032.value)+(((1.5707963267949)*(x5033.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5034=IKsin(j4);
IkReal x5035=IKcos(j4);
IkReal x5036=(r20*sj5);
IkReal x5037=((1.0)*cj5*r21);
IkReal x5038=((1.0)*x5034);
evalcond[0]=((((-1.0)*x5036*x5038))+((r22*x5035))+(((-1.0)*x5034*x5037)));
evalcond[1]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x5035*x5036))+(((-1.0)*x5035*x5037))+(((-1.0)*r22*x5038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5039=(sj4*sj5);
IkReal x5040=(cj5*sj4);
IkReal x5041=((1.0)*cj4);
if( IKabs((((r10*x5039))+(((-1.0)*r12*x5041))+((r11*x5040)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x5041))+((r00*x5039))+((r01*x5040)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x5039))+(((-1.0)*r12*x5041))+((r11*x5040))))+IKsqr(((((-1.0)*r02*x5041))+((r00*x5039))+((r01*x5040))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x5039))+(((-1.0)*r12*x5041))+((r11*x5040))), ((((-1.0)*r02*x5041))+((r00*x5039))+((r01*x5040))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5042=IKsin(j0);
IkReal x5043=IKcos(j0);
IkReal x5044=((1.0)*sj2);
IkReal x5045=(cj5*r00);
IkReal x5046=(cj5*r10);
IkReal x5047=((0.452)*sj2);
IkReal x5048=((1.0)*cj2);
IkReal x5049=(r11*sj5);
IkReal x5050=((1.0)*sj4);
IkReal x5051=(cj5*r01);
IkReal x5052=((1.0)*cj4);
IkReal x5053=((0.452)*cj2);
IkReal x5054=(cj5*r11);
IkReal x5055=(r01*sj5);
IkReal x5056=(cj1*x5042);
IkReal x5057=(sj5*x5050);
IkReal x5058=(sj1*x5043);
IkReal x5059=(cj1*x5043);
IkReal x5060=(sj1*x5042);
evalcond[0]=(x5043+(((-1.0)*x5050*x5051))+(((-1.0)*r00*x5057))+((cj4*r02)));
evalcond[1]=((((-1.0)*r10*x5057))+x5042+(((-1.0)*x5050*x5054))+((cj4*r12)));
evalcond[2]=((((-1.0)*x5044*x5056))+((cj2*x5060))+x5045+(((-1.0)*x5055)));
evalcond[3]=(x5046+(((-1.0)*x5049))+((sj2*x5059))+(((-1.0)*x5048*x5058)));
evalcond[4]=(((sj2*x5060))+((cj2*x5056))+(((-1.0)*r00*sj5*x5052))+(((-1.0)*r02*x5050))+(((-1.0)*x5051*x5052)));
evalcond[5]=((((-1.0)*x5044*x5058))+(((-1.0)*r12*x5050))+(((-1.0)*r10*sj5*x5052))+(((-1.0)*x5052*x5054))+(((-1.0)*x5048*x5059)));
evalcond[6]=((((-0.1135)*x5045))+(((0.1054)*x5043))+(((0.452)*x5060))+(((-1.0)*px))+((x5053*x5060))+(((-1.0)*x5047*x5056))+(((0.1135)*x5055)));
evalcond[7]=((((-0.1135)*x5046))+((x5047*x5059))+(((-1.0)*x5053*x5058))+(((0.1135)*x5049))+(((0.1054)*x5042))+(((-1.0)*py))+(((-0.452)*x5058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x5061=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x5061.valid){
continue;
}
CheckValue<IkReal> x5062 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5062.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5061.value)))+(x5062.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5063=IKsin(j0);
IkReal x5064=IKcos(j0);
IkReal x5065=(cj1*sj2);
IkReal x5066=(cj5*r00);
IkReal x5067=(cj5*r10);
IkReal x5068=(r11*sj5);
IkReal x5069=((0.452)*cj2);
IkReal x5070=(r01*sj5);
IkReal x5071=(sj1*x5064);
IkReal x5072=((0.452)*x5063);
IkReal x5073=(sj1*x5063);
evalcond[0]=((((-1.0)*x5063*x5065))+((cj2*x5073))+x5066+(((-1.0)*x5070)));
evalcond[1]=(((x5064*x5065))+x5067+(((-1.0)*x5068))+(((-1.0)*cj2*x5071)));
evalcond[2]=((((0.1054)*x5064))+(((0.1135)*x5070))+((sj1*x5072))+(((-1.0)*px))+(((-1.0)*x5065*x5072))+(((-0.1135)*x5066))+((x5069*x5073)));
evalcond[3]=((((-0.452)*x5071))+(((0.1135)*x5068))+(((0.1054)*x5063))+(((-1.0)*x5069*x5071))+(((-1.0)*py))+(((-0.1135)*x5067))+(((0.452)*x5064*x5065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5074=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x5074;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x5074);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5075=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x5075;
j4eval[1]=IKsign(x5075);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5076=((1.0)*sj0);
IkReal x5077=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x5077;
j4eval[1]=((IKabs(((((-1.0)*r02*x5076))+((cj0*r12)))))+(IKabs((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x5076))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x5076))))));
j4eval[2]=IKsign(x5077);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5078=((-1.0)*r21);
IkReal x5080 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5080)==0){
continue;
}
IkReal x5079=pow(x5080,-0.5);
CheckValue<IkReal> x5081 = IKatan2WithCheck(IkReal(r20),IkReal(x5078),IKFAST_ATAN2_MAGTHRESH);
if(!x5081.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5081.value));
IkReal gconst115=((-1.0)*r20*x5079);
IkReal gconst116=(x5078*x5079);
CheckValue<IkReal> x5082 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5082.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5082.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5083=((-1.0)*r21);
CheckValue<IkReal> x5086 = IKatan2WithCheck(IkReal(r20),IkReal(x5083),IKFAST_ATAN2_MAGTHRESH);
if(!x5086.valid){
continue;
}
IkReal x5084=((-1.0)*(x5086.value));
IkReal x5085=x5079;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5084;
IkReal gconst114=x5084;
IkReal gconst115=((-1.0)*r20*x5085);
IkReal gconst116=(x5083*x5085);
IkReal x5087=r22*r22;
IkReal x5088=((1.0)*x5087);
CheckValue<IkReal> x5092=IKPowWithIntegerCheck(((-1.0)+x5087),-1);
if(!x5092.valid){
continue;
}
IkReal x5089=x5092.value;
if((((1.0)+(((-1.0)*x5088)))) < -0.00001)
continue;
IkReal x5090=IKsqrt(((1.0)+(((-1.0)*x5088))));
IkReal x5091=(cj0*x5089*x5090);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x5088*x5091))+x5091))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5093=((-1.0)*r21);
CheckValue<IkReal> x5096 = IKatan2WithCheck(IkReal(r20),IkReal(x5093),IKFAST_ATAN2_MAGTHRESH);
if(!x5096.valid){
continue;
}
IkReal x5094=((-1.0)*(x5096.value));
IkReal x5095=x5079;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5094;
IkReal gconst114=x5094;
IkReal gconst115=((-1.0)*r20*x5095);
IkReal gconst116=(x5093*x5095);
IkReal x5097=r22*r22;
IkReal x5098=((1.0)*x5097);
CheckValue<IkReal> x5102=IKPowWithIntegerCheck(((-1.0)+x5097),-1);
if(!x5102.valid){
continue;
}
IkReal x5099=x5102.value;
if((((1.0)+(((-1.0)*x5098)))) < -0.00001)
continue;
IkReal x5100=IKsqrt(((1.0)+(((-1.0)*x5098))));
IkReal x5101=(sj0*x5099*x5100);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5101+(((-1.0)*x5098*x5101))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5103=((-1.0)*r21);
CheckValue<IkReal> x5106 = IKatan2WithCheck(IkReal(r20),IkReal(x5103),IKFAST_ATAN2_MAGTHRESH);
if(!x5106.valid){
continue;
}
IkReal x5104=((-1.0)*(x5106.value));
IkReal x5105=x5079;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5104;
IkReal gconst114=x5104;
IkReal gconst115=((-1.0)*r20*x5105);
IkReal gconst116=(x5103*x5105);
IkReal x5107=r22*r22;
CheckValue<IkReal> x5110=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5107))),-1);
if(!x5110.valid){
continue;
}
IkReal x5108=x5110.value;
IkReal x5109=((((2.0)*x5108*(r20*r20)*(r21*r21)))+x5107+((x5108*(r21*r21*r21*r21)))+((x5108*(r20*r20*r20*r20))));
j4eval[0]=x5109;
j4eval[1]=IKsign(x5109);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5111=(gconst115*r20);
IkReal x5112=(cj1*sj2);
IkReal x5113=(gconst116*r21);
IkReal x5114=((1.0)*cj2*sj1);
CheckValue<IkReal> x5115=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((2.0)*x5111*x5113))+(x5113*x5113)+(x5111*x5111))),-1);
if(!x5115.valid){
continue;
}
CheckValue<IkReal> x5116 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5114))+((r22*x5112)))),IkReal((((x5112*x5113))+(((-1.0)*x5111*x5114))+(((-1.0)*x5113*x5114))+((x5111*x5112)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5115.value)))+(x5116.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5117=IKsin(j4);
IkReal x5118=IKcos(j4);
IkReal x5119=(cj1*cj2);
IkReal x5120=(gconst116*r21);
IkReal x5121=((1.0)*cj0);
IkReal x5122=(gconst116*r01);
IkReal x5123=(gconst116*r11);
IkReal x5124=(sj1*sj2);
IkReal x5125=((1.0)*x5118);
IkReal x5126=((1.0)*x5117);
IkReal x5127=(gconst115*x5126);
evalcond[0]=((((-1.0)*r20*x5127))+((r22*x5118))+(((-1.0)*x5120*x5126)));
evalcond[1]=(cj0+((r02*x5118))+(((-1.0)*r00*x5127))+(((-1.0)*x5122*x5126)));
evalcond[2]=(sj0+(((-1.0)*r10*x5127))+(((-1.0)*x5123*x5126))+((r12*x5118)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst115*r20*x5125))+(((-1.0)*x5120*x5125))+(((-1.0)*r22*x5126)));
evalcond[4]=(((sj0*x5119))+(((-1.0)*x5122*x5125))+(((-1.0)*r02*x5126))+(((-1.0)*gconst115*r00*x5125))+((sj0*x5124)));
evalcond[5]=((((-1.0)*x5123*x5125))+(((-1.0)*x5121*x5124))+(((-1.0)*r12*x5126))+(((-1.0)*x5119*x5121))+(((-1.0)*gconst115*r10*x5125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5128 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst116*r21*sj0))+((gconst115*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5128.valid){
continue;
}
CheckValue<IkReal> x5129=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r01))+((gconst116*r00)))),-1);
if(!x5129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5128.value)+(((1.5707963267949)*(x5129.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5130=IKsin(j4);
IkReal x5131=IKcos(j4);
IkReal x5132=(cj1*cj2);
IkReal x5133=(gconst116*r21);
IkReal x5134=((1.0)*cj0);
IkReal x5135=(gconst116*r01);
IkReal x5136=(gconst116*r11);
IkReal x5137=(sj1*sj2);
IkReal x5138=((1.0)*x5131);
IkReal x5139=((1.0)*x5130);
IkReal x5140=(gconst115*x5139);
evalcond[0]=(((r22*x5131))+(((-1.0)*r20*x5140))+(((-1.0)*x5133*x5139)));
evalcond[1]=(cj0+(((-1.0)*x5135*x5139))+(((-1.0)*r00*x5140))+((r02*x5131)));
evalcond[2]=(sj0+(((-1.0)*x5136*x5139))+((r12*x5131))+(((-1.0)*r10*x5140)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst115*r20*x5138))+(((-1.0)*r22*x5139))+(((-1.0)*x5133*x5138)));
evalcond[4]=((((-1.0)*x5135*x5138))+(((-1.0)*gconst115*r00*x5138))+(((-1.0)*r02*x5139))+((sj0*x5137))+((sj0*x5132)));
evalcond[5]=((((-1.0)*x5132*x5134))+(((-1.0)*x5136*x5138))+(((-1.0)*r12*x5139))+(((-1.0)*gconst115*r10*x5138))+(((-1.0)*x5134*x5137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5141=IKPowWithIntegerCheck(IKsign((((gconst115*r11))+(((-1.0)*gconst116*r10)))),-1);
if(!x5141.valid){
continue;
}
CheckValue<IkReal> x5142 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst116*r21))+((cj0*gconst115*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5141.value)))+(x5142.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5143=IKsin(j4);
IkReal x5144=IKcos(j4);
IkReal x5145=(cj1*cj2);
IkReal x5146=(gconst116*r21);
IkReal x5147=((1.0)*cj0);
IkReal x5148=(gconst116*r01);
IkReal x5149=(gconst116*r11);
IkReal x5150=(sj1*sj2);
IkReal x5151=((1.0)*x5144);
IkReal x5152=((1.0)*x5143);
IkReal x5153=(gconst115*x5152);
evalcond[0]=((((-1.0)*x5146*x5152))+(((-1.0)*r20*x5153))+((r22*x5144)));
evalcond[1]=(cj0+((r02*x5144))+(((-1.0)*x5148*x5152))+(((-1.0)*r00*x5153)));
evalcond[2]=(sj0+((r12*x5144))+(((-1.0)*x5149*x5152))+(((-1.0)*r10*x5153)));
evalcond[3]=((((-1.0)*r22*x5152))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x5146*x5151))+(((-1.0)*gconst115*r20*x5151)));
evalcond[4]=((((-1.0)*gconst115*r00*x5151))+(((-1.0)*x5148*x5151))+((sj0*x5150))+((sj0*x5145))+(((-1.0)*r02*x5152)));
evalcond[5]=((((-1.0)*gconst115*r10*x5151))+(((-1.0)*r12*x5152))+(((-1.0)*x5147*x5150))+(((-1.0)*x5149*x5151))+(((-1.0)*x5145*x5147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5156 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5156)==0){
continue;
}
IkReal x5154=pow(x5156,-0.5);
IkReal x5155=((1.0)*x5154);
CheckValue<IkReal> x5157 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5157.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5157.value))));
IkReal gconst118=(r20*x5155);
IkReal gconst119=(r21*x5155);
CheckValue<IkReal> x5158 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5158.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5158.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x5162 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5162.valid){
continue;
}
IkReal x5159=((1.0)*(x5162.value));
IkReal x5160=x5154;
IkReal x5161=((1.0)*x5160);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5159)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5159)));
IkReal gconst118=(r20*x5161);
IkReal gconst119=(r21*x5161);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5166 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5166.valid){
continue;
}
IkReal x5163=((1.0)*(x5166.value));
IkReal x5164=x5154;
IkReal x5165=((1.0)*x5164);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5163)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5163)));
IkReal gconst118=(r20*x5165);
IkReal gconst119=(r21*x5165);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5170 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5170.valid){
continue;
}
IkReal x5167=((1.0)*(x5170.value));
IkReal x5168=x5154;
IkReal x5169=((1.0)*x5168);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5167)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5167)));
IkReal gconst118=(r20*x5169);
IkReal gconst119=(r21*x5169);
IkReal x5171=r22*r22;
IkReal x5172=(cj0*r12);
IkReal x5173=((1.0)*r02*sj0);
CheckValue<IkReal> x5177=IKPowWithIntegerCheck(((-1.0)+x5171),-1);
if(!x5177.valid){
continue;
}
IkReal x5174=x5177.value;
if((((1.0)+(((-1.0)*x5171)))) < -0.00001)
continue;
IkReal x5175=IKsqrt(((1.0)+(((-1.0)*x5171))));
IkReal x5176=(r22*x5174*x5175);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5173))+x5172)))+(IKabs(((((-1.0)*x5173*x5176))+((x5172*x5176))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5178=((1.0)*sj0);
CheckValue<IkReal> x5179=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r21))+((gconst119*r20)))),-1);
if(!x5179.valid){
continue;
}
CheckValue<IkReal> x5180 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5178))+((cj0*r12)))),IkReal(((((-1.0)*gconst119*r01*x5178))+(((-1.0)*gconst118*r00*x5178))+((cj0*gconst118*r10))+((cj0*gconst119*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5179.value)))+(x5180.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5181=IKsin(j4);
IkReal x5182=IKcos(j4);
IkReal x5183=((1.0)*gconst118);
IkReal x5184=(cj1*cj2);
IkReal x5185=((1.0)*sj1);
IkReal x5186=((1.0)*x5181);
IkReal x5187=((1.0)*gconst119*x5182);
evalcond[0]=(((r22*x5182))+(((-1.0)*r20*x5181*x5183))+(((-1.0)*gconst119*r21*x5186)));
evalcond[1]=((((-1.0)*gconst119*r01*x5186))+cj0+((r02*x5182))+(((-1.0)*r00*x5181*x5183)));
evalcond[2]=(sj0+(((-1.0)*r10*x5181*x5183))+(((-1.0)*gconst119*r11*x5186))+((r12*x5182)));
evalcond[3]=((((-1.0)*r21*x5187))+(((-1.0)*cj2*x5185))+(((-1.0)*r22*x5186))+((cj1*sj2))+(((-1.0)*r20*x5182*x5183)));
evalcond[4]=((((-1.0)*r02*x5186))+((sj0*x5184))+((sj0*sj1*sj2))+(((-1.0)*r00*x5182*x5183))+(((-1.0)*r01*x5187)));
evalcond[5]=((((-1.0)*cj0*x5184))+(((-1.0)*cj0*sj2*x5185))+(((-1.0)*r10*x5182*x5183))+(((-1.0)*r12*x5186))+(((-1.0)*r11*x5187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5188 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r20*sj0))+((gconst119*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5188.valid){
continue;
}
CheckValue<IkReal> x5189=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r01))+((gconst119*r00)))),-1);
if(!x5189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5188.value)+(((1.5707963267949)*(x5189.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5190=IKsin(j4);
IkReal x5191=IKcos(j4);
IkReal x5192=((1.0)*gconst118);
IkReal x5193=(cj1*cj2);
IkReal x5194=((1.0)*sj1);
IkReal x5195=((1.0)*x5190);
IkReal x5196=((1.0)*gconst119*x5191);
evalcond[0]=(((r22*x5191))+(((-1.0)*r20*x5190*x5192))+(((-1.0)*gconst119*r21*x5195)));
evalcond[1]=((((-1.0)*r00*x5190*x5192))+cj0+((r02*x5191))+(((-1.0)*gconst119*r01*x5195)));
evalcond[2]=(sj0+(((-1.0)*gconst119*r11*x5195))+(((-1.0)*r10*x5190*x5192))+((r12*x5191)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*r21*x5196))+(((-1.0)*cj2*x5194))+(((-1.0)*r22*x5195))+(((-1.0)*r20*x5191*x5192)));
evalcond[4]=(((sj0*x5193))+(((-1.0)*r01*x5196))+(((-1.0)*r02*x5195))+((sj0*sj1*sj2))+(((-1.0)*r00*x5191*x5192)));
evalcond[5]=((((-1.0)*r12*x5195))+(((-1.0)*r10*x5191*x5192))+(((-1.0)*r11*x5196))+(((-1.0)*cj0*sj2*x5194))+(((-1.0)*cj0*x5193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5197 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r20))+((cj0*gconst119*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5197.valid){
continue;
}
CheckValue<IkReal> x5198=IKPowWithIntegerCheck(IKsign((((gconst118*r11))+(((-1.0)*gconst119*r10)))),-1);
if(!x5198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5197.value)+(((1.5707963267949)*(x5198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5199=IKsin(j4);
IkReal x5200=IKcos(j4);
IkReal x5201=((1.0)*gconst118);
IkReal x5202=(cj1*cj2);
IkReal x5203=((1.0)*sj1);
IkReal x5204=((1.0)*x5199);
IkReal x5205=((1.0)*gconst119*x5200);
evalcond[0]=(((r22*x5200))+(((-1.0)*gconst119*r21*x5204))+(((-1.0)*r20*x5199*x5201)));
evalcond[1]=((((-1.0)*r00*x5199*x5201))+cj0+(((-1.0)*gconst119*r01*x5204))+((r02*x5200)));
evalcond[2]=((((-1.0)*r10*x5199*x5201))+sj0+((r12*x5200))+(((-1.0)*gconst119*r11*x5204)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*r22*x5204))+(((-1.0)*r20*x5200*x5201))+(((-1.0)*cj2*x5203))+(((-1.0)*r21*x5205)));
evalcond[4]=((((-1.0)*r02*x5204))+((sj0*x5202))+(((-1.0)*r01*x5205))+((sj0*sj1*sj2))+(((-1.0)*r00*x5200*x5201)));
evalcond[5]=((((-1.0)*r10*x5200*x5201))+(((-1.0)*cj0*x5202))+(((-1.0)*cj0*sj2*x5203))+(((-1.0)*r12*x5204))+(((-1.0)*r11*x5205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5208 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5208)==0){
continue;
}
IkReal x5206=pow(x5208,-0.5);
IkReal x5207=((-1.0)*x5206);
CheckValue<IkReal> x5209 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x5209.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5209.value));
IkReal gconst121=(r00*x5207);
IkReal gconst122=(r01*x5207);
CheckValue<IkReal> x5210 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x5210.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5210.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5214 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x5214.valid){
continue;
}
IkReal x5211=((-1.0)*(x5214.value));
IkReal x5212=x5206;
IkReal x5213=((-1.0)*x5212);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5211;
IkReal gconst120=x5211;
IkReal gconst121=(r00*x5213);
IkReal gconst122=(r01*x5213);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5215=((1.0)*sj0);
CheckValue<IkReal> x5216=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r21))+((gconst122*r20)))),-1);
if(!x5216.valid){
continue;
}
CheckValue<IkReal> x5217 = IKatan2WithCheck(IkReal((((cj0*r12))+(((-1.0)*r02*x5215)))),IkReal((((cj0*gconst122*r11))+(((-1.0)*gconst122*r01*x5215))+((cj0*gconst121*r10))+(((-1.0)*gconst121*r00*x5215)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5216.value)))+(x5217.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5218=IKsin(j4);
IkReal x5219=IKcos(j4);
IkReal x5220=(cj1*cj2);
IkReal x5221=(gconst122*r01);
IkReal x5222=(gconst121*r10);
IkReal x5223=(gconst122*r21);
IkReal x5224=((1.0)*sj1);
IkReal x5225=(gconst121*r20);
IkReal x5226=(gconst121*r00);
IkReal x5227=(gconst122*r11);
IkReal x5228=((1.0)*x5219);
IkReal x5229=((1.0)*x5218);
evalcond[0]=((((-1.0)*x5223*x5229))+((r22*x5219))+(((-1.0)*x5225*x5229)));
evalcond[1]=(cj0+(((-1.0)*x5221*x5229))+(((-1.0)*x5226*x5229))+((r02*x5219)));
evalcond[2]=(sj0+(((-1.0)*x5227*x5229))+(((-1.0)*x5222*x5229))+((r12*x5219)));
evalcond[3]=((((-1.0)*x5223*x5228))+(((-1.0)*cj2*x5224))+((cj1*sj2))+(((-1.0)*x5225*x5228))+(((-1.0)*r22*x5229)));
evalcond[4]=((((-1.0)*x5221*x5228))+(((-1.0)*x5226*x5228))+((sj0*sj1*sj2))+(((-1.0)*r02*x5229))+((sj0*x5220)));
evalcond[5]=((((-1.0)*x5227*x5228))+(((-1.0)*cj0*x5220))+(((-1.0)*x5222*x5228))+(((-1.0)*r12*x5229))+(((-1.0)*cj0*sj2*x5224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5230 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst122*r21))+((cj0*gconst121*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5230.valid){
continue;
}
CheckValue<IkReal> x5231=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r10))+((gconst121*r11)))),-1);
if(!x5231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5230.value)+(((1.5707963267949)*(x5231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5232=IKsin(j4);
IkReal x5233=IKcos(j4);
IkReal x5234=(cj1*cj2);
IkReal x5235=(gconst122*r01);
IkReal x5236=(gconst121*r10);
IkReal x5237=(gconst122*r21);
IkReal x5238=((1.0)*sj1);
IkReal x5239=(gconst121*r20);
IkReal x5240=(gconst121*r00);
IkReal x5241=(gconst122*r11);
IkReal x5242=((1.0)*x5233);
IkReal x5243=((1.0)*x5232);
evalcond[0]=((((-1.0)*x5239*x5243))+(((-1.0)*x5237*x5243))+((r22*x5233)));
evalcond[1]=((((-1.0)*x5235*x5243))+cj0+(((-1.0)*x5240*x5243))+((r02*x5233)));
evalcond[2]=(sj0+(((-1.0)*x5236*x5243))+((r12*x5233))+(((-1.0)*x5241*x5243)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*r22*x5243))+(((-1.0)*x5239*x5242))+(((-1.0)*cj2*x5238))+(((-1.0)*x5237*x5242)));
evalcond[4]=((((-1.0)*x5235*x5242))+(((-1.0)*r02*x5243))+((sj0*x5234))+(((-1.0)*x5240*x5242))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*r12*x5243))+(((-1.0)*x5236*x5242))+(((-1.0)*x5241*x5242))+(((-1.0)*cj0*x5234))+(((-1.0)*cj0*sj2*x5238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5246 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5246)==0){
continue;
}
IkReal x5244=pow(x5246,-0.5);
IkReal x5245=((1.0)*x5244);
CheckValue<IkReal> x5247 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x5247.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5247.value))));
IkReal gconst124=(r00*x5245);
IkReal gconst125=(r01*x5245);
CheckValue<IkReal> x5248 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x5248.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5248.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5252 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x5252.valid){
continue;
}
IkReal x5249=((1.0)*(x5252.value));
IkReal x5250=x5244;
IkReal x5251=((1.0)*x5250);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5249)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5249)));
IkReal gconst124=(r00*x5251);
IkReal gconst125=(r01*x5251);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x5256 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x5256.valid){
continue;
}
IkReal x5253=((1.0)*(x5256.value));
IkReal x5254=x5244;
IkReal x5255=((1.0)*x5254);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5253)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5253)));
IkReal gconst124=(r00*x5255);
IkReal gconst125=(r01*x5255);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5260 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x5260.valid){
continue;
}
IkReal x5257=((1.0)*(x5260.value));
IkReal x5258=x5244;
IkReal x5259=((1.0)*x5258);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5257)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5257)));
IkReal gconst124=(r00*x5259);
IkReal gconst125=(r01*x5259);
IkReal x5261=r02*r02;
IkReal x5262=((1.0)*sj0);
IkReal x5263=(cj0*r12);
CheckValue<IkReal> x5267=IKPowWithIntegerCheck(((-1.0)+x5261),-1);
if(!x5267.valid){
continue;
}
IkReal x5264=x5267.value;
if((((1.0)+(((-1.0)*x5261)))) < -0.00001)
continue;
IkReal x5265=IKsqrt(((1.0)+(((-1.0)*x5261))));
IkReal x5266=(x5264*x5265);
j4eval[0]=((IKabs(((((-1.0)*r02*x5262))+x5263)))+(IKabs((((sj0*x5266))+(((-1.0)*x5261*x5262*x5266))+((r02*x5263*x5266))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5268=((1.0)*sj0);
CheckValue<IkReal> x5269=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r21))+((gconst125*r20)))),-1);
if(!x5269.valid){
continue;
}
CheckValue<IkReal> x5270 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5268))+((cj0*r12)))),IkReal(((((-1.0)*gconst125*r01*x5268))+((cj0*gconst124*r10))+(((-1.0)*gconst124*r00*x5268))+((cj0*gconst125*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5269.value)))+(x5270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5271=IKsin(j4);
IkReal x5272=IKcos(j4);
IkReal x5273=(cj1*cj2);
IkReal x5274=((1.0)*sj1);
IkReal x5275=((1.0)*gconst124);
IkReal x5276=((1.0)*x5271);
IkReal x5277=((1.0)*gconst125*x5272);
evalcond[0]=(((r22*x5272))+(((-1.0)*r20*x5271*x5275))+(((-1.0)*gconst125*r21*x5276)));
evalcond[1]=(((r02*x5272))+(((-1.0)*gconst125*r01*x5276))+cj0+(((-1.0)*r00*x5271*x5275)));
evalcond[2]=(sj0+(((-1.0)*r10*x5271*x5275))+(((-1.0)*gconst125*r11*x5276))+((r12*x5272)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj2*x5274))+(((-1.0)*r21*x5277))+(((-1.0)*r22*x5276))+(((-1.0)*r20*x5272*x5275)));
evalcond[4]=((((-1.0)*r01*x5277))+(((-1.0)*r00*x5272*x5275))+((sj0*x5273))+(((-1.0)*r02*x5276))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*cj0*sj2*x5274))+(((-1.0)*r10*x5272*x5275))+(((-1.0)*r11*x5277))+(((-1.0)*r12*x5276))+(((-1.0)*cj0*x5273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5278=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r01))+((gconst125*r00)))),-1);
if(!x5278.valid){
continue;
}
CheckValue<IkReal> x5279 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst125*r21*sj0))+((gconst124*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5278.value)))+(x5279.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5280=IKsin(j4);
IkReal x5281=IKcos(j4);
IkReal x5282=(cj1*cj2);
IkReal x5283=((1.0)*sj1);
IkReal x5284=((1.0)*gconst124);
IkReal x5285=((1.0)*x5280);
IkReal x5286=((1.0)*gconst125*x5281);
evalcond[0]=(((r22*x5281))+(((-1.0)*gconst125*r21*x5285))+(((-1.0)*r20*x5280*x5284)));
evalcond[1]=(((r02*x5281))+(((-1.0)*gconst125*r01*x5285))+cj0+(((-1.0)*r00*x5280*x5284)));
evalcond[2]=(((r12*x5281))+sj0+(((-1.0)*gconst125*r11*x5285))+(((-1.0)*r10*x5280*x5284)));
evalcond[3]=((((-1.0)*r22*x5285))+((cj1*sj2))+(((-1.0)*cj2*x5283))+(((-1.0)*r21*x5286))+(((-1.0)*r20*x5281*x5284)));
evalcond[4]=(((sj0*x5282))+(((-1.0)*r01*x5286))+(((-1.0)*r00*x5281*x5284))+(((-1.0)*r02*x5285))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*cj0*sj2*x5283))+(((-1.0)*r11*x5286))+(((-1.0)*r12*x5285))+(((-1.0)*r10*x5281*x5284))+(((-1.0)*cj0*x5282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5287=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst125*r10))+((gconst124*r11)))),-1);
if(!x5287.valid){
continue;
}
CheckValue<IkReal> x5288 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst125*r21))+((cj0*gconst124*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5287.value)))+(x5288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5289=IKsin(j4);
IkReal x5290=IKcos(j4);
IkReal x5291=(cj1*cj2);
IkReal x5292=((1.0)*sj1);
IkReal x5293=((1.0)*gconst124);
IkReal x5294=((1.0)*x5289);
IkReal x5295=((1.0)*gconst125*x5290);
evalcond[0]=(((r22*x5290))+(((-1.0)*gconst125*r21*x5294))+(((-1.0)*r20*x5289*x5293)));
evalcond[1]=(cj0+((r02*x5290))+(((-1.0)*gconst125*r01*x5294))+(((-1.0)*r00*x5289*x5293)));
evalcond[2]=(((r12*x5290))+sj0+(((-1.0)*r10*x5289*x5293))+(((-1.0)*gconst125*r11*x5294)));
evalcond[3]=((((-1.0)*r22*x5294))+((cj1*sj2))+(((-1.0)*r20*x5290*x5293))+(((-1.0)*cj2*x5292))+(((-1.0)*r21*x5295)));
evalcond[4]=(((sj0*x5291))+(((-1.0)*r01*x5295))+(((-1.0)*r00*x5290*x5293))+(((-1.0)*r02*x5294))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*cj0*sj2*x5292))+(((-1.0)*r12*x5294))+(((-1.0)*r11*x5295))+(((-1.0)*r10*x5290*x5293))+(((-1.0)*cj0*x5291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5296=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x5296;
j4eval[1]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5296);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5297=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x5297;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x5297);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5298=cj5*cj5;
IkReal x5299=r00*r00;
IkReal x5300=(cj5*r01);
IkReal x5301=(r00*sj5);
IkReal x5302=((((-1.0)*x5298*(r01*r01)))+(((-2.0)*x5300*x5301))+(((-1.0)*(r02*r02)))+(((-1.0)*x5299))+((x5298*x5299)));
j4eval[0]=x5302;
j4eval[1]=IKsign(x5302);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5300))+(((-1.0)*x5301))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5303=cj5*cj5;
IkReal x5304=r00*r00;
IkReal x5305=(cj5*r01);
IkReal x5306=(r00*sj5);
CheckValue<IkReal> x5307=IKPowWithIntegerCheck(IKsign(((((-2.0)*x5305*x5306))+(((-1.0)*x5303*(r01*r01)))+(((-1.0)*(r02*r02)))+(((-1.0)*x5304))+((x5303*x5304)))),-1);
if(!x5307.valid){
continue;
}
CheckValue<IkReal> x5308 = IKatan2WithCheck(IkReal(((((-1.0)*x5305))+(((-1.0)*x5306)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5307.value)))+(x5308.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5309=IKsin(j4);
IkReal x5310=IKcos(j4);
IkReal x5311=(r00*sj5);
IkReal x5312=(cj5*r01);
IkReal x5313=(r20*sj5);
IkReal x5314=((1.0)*sj1);
IkReal x5315=(cj5*r21);
IkReal x5316=(cj5*r11);
IkReal x5317=(r10*sj5);
IkReal x5318=((1.0)*x5309);
IkReal x5319=((1.0)*x5310);
evalcond[0]=(((r22*x5310))+(((-1.0)*x5313*x5318))+(((-1.0)*x5315*x5318)));
evalcond[1]=((((-1.0)*x5316*x5318))+((r12*x5310))+(((-1.0)*x5317*x5318)));
evalcond[2]=((1.0)+(((-1.0)*x5312*x5318))+((r02*x5310))+(((-1.0)*x5311*x5318)));
evalcond[3]=((((-1.0)*x5312*x5319))+(((-1.0)*r02*x5318))+(((-1.0)*x5311*x5319)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*x5313*x5319))+(((-1.0)*cj2*x5314))+(((-1.0)*x5315*x5319))+(((-1.0)*r22*x5318)));
evalcond[5]=((((-1.0)*r12*x5318))+(((-1.0)*cj1*cj2))+(((-1.0)*x5316*x5319))+(((-1.0)*sj2*x5314))+(((-1.0)*x5317*x5319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5320 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5320.valid){
continue;
}
CheckValue<IkReal> x5321=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x5321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5320.value)+(((1.5707963267949)*(x5321.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5322=IKsin(j4);
IkReal x5323=IKcos(j4);
IkReal x5324=(r00*sj5);
IkReal x5325=(cj5*r01);
IkReal x5326=(r20*sj5);
IkReal x5327=((1.0)*sj1);
IkReal x5328=(cj5*r21);
IkReal x5329=(cj5*r11);
IkReal x5330=(r10*sj5);
IkReal x5331=((1.0)*x5322);
IkReal x5332=((1.0)*x5323);
evalcond[0]=((((-1.0)*x5326*x5331))+(((-1.0)*x5328*x5331))+((r22*x5323)));
evalcond[1]=((((-1.0)*x5330*x5331))+((r12*x5323))+(((-1.0)*x5329*x5331)));
evalcond[2]=((1.0)+(((-1.0)*x5324*x5331))+((r02*x5323))+(((-1.0)*x5325*x5331)));
evalcond[3]=((((-1.0)*r02*x5331))+(((-1.0)*x5324*x5332))+(((-1.0)*x5325*x5332)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*x5326*x5332))+(((-1.0)*r22*x5331))+(((-1.0)*x5328*x5332))+(((-1.0)*cj2*x5327)));
evalcond[5]=((((-1.0)*x5330*x5332))+(((-1.0)*sj2*x5327))+(((-1.0)*cj1*cj2))+(((-1.0)*x5329*x5332))+(((-1.0)*r12*x5331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5333 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5333.valid){
continue;
}
CheckValue<IkReal> x5334=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x5334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5333.value)+(((1.5707963267949)*(x5334.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5335=IKsin(j4);
IkReal x5336=IKcos(j4);
IkReal x5337=(r00*sj5);
IkReal x5338=(cj5*r01);
IkReal x5339=(r20*sj5);
IkReal x5340=((1.0)*sj1);
IkReal x5341=(cj5*r21);
IkReal x5342=(cj5*r11);
IkReal x5343=(r10*sj5);
IkReal x5344=((1.0)*x5335);
IkReal x5345=((1.0)*x5336);
evalcond[0]=((((-1.0)*x5339*x5344))+(((-1.0)*x5341*x5344))+((r22*x5336)));
evalcond[1]=(((r12*x5336))+(((-1.0)*x5343*x5344))+(((-1.0)*x5342*x5344)));
evalcond[2]=((1.0)+(((-1.0)*x5338*x5344))+((r02*x5336))+(((-1.0)*x5337*x5344)));
evalcond[3]=((((-1.0)*r02*x5344))+(((-1.0)*x5338*x5345))+(((-1.0)*x5337*x5345)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*x5339*x5345))+(((-1.0)*cj2*x5340))+(((-1.0)*x5341*x5345))+(((-1.0)*r22*x5344)));
evalcond[5]=((((-1.0)*sj2*x5340))+(((-1.0)*cj1*cj2))+(((-1.0)*r12*x5344))+(((-1.0)*x5343*x5345))+(((-1.0)*x5342*x5345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5346=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x5346;
j4eval[1]=IKsign(x5346);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5347=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x5347;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x5347);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5348=cj5*cj5;
IkReal x5349=r00*r00;
IkReal x5350=(r00*sj5);
IkReal x5351=(cj5*r01);
IkReal x5352=((((2.0)*x5350*x5351))+x5349+((x5348*(r01*r01)))+(r02*r02)+(((-1.0)*x5348*x5349)));
j4eval[0]=x5352;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x5350))+(((-1.0)*x5351))))));
j4eval[2]=IKsign(x5352);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5353=cj5*cj5;
IkReal x5354=r00*r00;
IkReal x5355=(r00*sj5);
IkReal x5356=(cj5*r01);
CheckValue<IkReal> x5357=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5353*x5354))+x5354+((x5353*(r01*r01)))+(r02*r02)+(((2.0)*x5355*x5356)))),-1);
if(!x5357.valid){
continue;
}
CheckValue<IkReal> x5358 = IKatan2WithCheck(IkReal(((((-1.0)*x5356))+(((-1.0)*x5355)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5357.value)))+(x5358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5359=IKsin(j4);
IkReal x5360=IKcos(j4);
IkReal x5361=(r00*sj5);
IkReal x5362=(cj5*r01);
IkReal x5363=(r20*sj5);
IkReal x5364=(cj5*r11);
IkReal x5365=(cj5*r21);
IkReal x5366=(r10*sj5);
IkReal x5367=((1.0)*x5359);
IkReal x5368=((1.0)*x5360);
evalcond[0]=(((r22*x5360))+(((-1.0)*x5365*x5367))+(((-1.0)*x5363*x5367)));
evalcond[1]=(((r12*x5360))+(((-1.0)*x5364*x5367))+(((-1.0)*x5366*x5367)));
evalcond[2]=((-1.0)+((r02*x5360))+(((-1.0)*x5362*x5367))+(((-1.0)*x5361*x5367)));
evalcond[3]=((((-1.0)*r02*x5367))+(((-1.0)*x5362*x5368))+(((-1.0)*x5361*x5368)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x5364*x5368))+(((-1.0)*x5366*x5368))+((cj1*cj2))+(((-1.0)*r12*x5367)));
evalcond[5]=((((-1.0)*r22*x5367))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x5365*x5368))+(((-1.0)*x5363*x5368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5369 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5369.valid){
continue;
}
CheckValue<IkReal> x5370=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x5370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5369.value)+(((1.5707963267949)*(x5370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5371=IKsin(j4);
IkReal x5372=IKcos(j4);
IkReal x5373=(r00*sj5);
IkReal x5374=(cj5*r01);
IkReal x5375=(r20*sj5);
IkReal x5376=(cj5*r11);
IkReal x5377=(cj5*r21);
IkReal x5378=(r10*sj5);
IkReal x5379=((1.0)*x5371);
IkReal x5380=((1.0)*x5372);
evalcond[0]=(((r22*x5372))+(((-1.0)*x5375*x5379))+(((-1.0)*x5377*x5379)));
evalcond[1]=((((-1.0)*x5376*x5379))+((r12*x5372))+(((-1.0)*x5378*x5379)));
evalcond[2]=((-1.0)+(((-1.0)*x5373*x5379))+((r02*x5372))+(((-1.0)*x5374*x5379)));
evalcond[3]=((((-1.0)*x5373*x5380))+(((-1.0)*x5374*x5380))+(((-1.0)*r02*x5379)));
evalcond[4]=((((-1.0)*r12*x5379))+((sj1*sj2))+(((-1.0)*x5376*x5380))+((cj1*cj2))+(((-1.0)*x5378*x5380)));
evalcond[5]=((((-1.0)*r22*x5379))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x5375*x5380))+(((-1.0)*x5377*x5380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5381 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5381.valid){
continue;
}
CheckValue<IkReal> x5382=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x5382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5381.value)+(((1.5707963267949)*(x5382.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5383=IKsin(j4);
IkReal x5384=IKcos(j4);
IkReal x5385=(r00*sj5);
IkReal x5386=(cj5*r01);
IkReal x5387=(r20*sj5);
IkReal x5388=(cj5*r11);
IkReal x5389=(cj5*r21);
IkReal x5390=(r10*sj5);
IkReal x5391=((1.0)*x5383);
IkReal x5392=((1.0)*x5384);
evalcond[0]=((((-1.0)*x5389*x5391))+(((-1.0)*x5387*x5391))+((r22*x5384)));
evalcond[1]=((((-1.0)*x5388*x5391))+((r12*x5384))+(((-1.0)*x5390*x5391)));
evalcond[2]=((-1.0)+(((-1.0)*x5385*x5391))+((r02*x5384))+(((-1.0)*x5386*x5391)));
evalcond[3]=((((-1.0)*x5385*x5392))+(((-1.0)*r02*x5391))+(((-1.0)*x5386*x5392)));
evalcond[4]=((((-1.0)*x5388*x5392))+((sj1*sj2))+(((-1.0)*r12*x5391))+(((-1.0)*x5390*x5392))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x5389*x5392))+(((-1.0)*x5387*x5392))+(((-1.0)*r22*x5391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5394 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5394)==0){
continue;
}
IkReal x5393=pow(x5394,-0.5);
CheckValue<IkReal> x5395 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x5395.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5395.value));
IkReal gconst127=(r10*x5393);
IkReal gconst128=(r11*x5393);
CheckValue<IkReal> x5396 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x5396.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5396.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5399 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x5399.valid){
continue;
}
IkReal x5397=((-1.0)*(x5399.value));
IkReal x5398=x5393;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5397;
IkReal gconst126=x5397;
IkReal gconst127=(r10*x5398);
IkReal gconst128=(r11*x5398);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5400=((1.0)*sj0);
CheckValue<IkReal> x5401=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst127*r21))+((gconst128*r20)))),-1);
if(!x5401.valid){
continue;
}
CheckValue<IkReal> x5402 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5400))+((cj0*r12)))),IkReal((((cj0*gconst128*r11))+(((-1.0)*gconst127*r00*x5400))+((cj0*gconst127*r10))+(((-1.0)*gconst128*r01*x5400)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5401.value)))+(x5402.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5403=IKsin(j4);
IkReal x5404=IKcos(j4);
IkReal x5405=(cj1*cj2);
IkReal x5406=(gconst128*r11);
IkReal x5407=((1.0)*sj1);
IkReal x5408=(gconst128*r21);
IkReal x5409=(gconst128*r01);
IkReal x5410=((1.0)*x5403);
IkReal x5411=((1.0)*x5404);
IkReal x5412=(gconst127*x5411);
evalcond[0]=((((-1.0)*gconst127*r20*x5410))+((r22*x5404))+(((-1.0)*x5408*x5410)));
evalcond[1]=(cj0+(((-1.0)*gconst127*r00*x5410))+((r02*x5404))+(((-1.0)*x5409*x5410)));
evalcond[2]=(((r12*x5404))+sj0+(((-1.0)*gconst127*r10*x5410))+(((-1.0)*x5406*x5410)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*r20*x5412))+(((-1.0)*r22*x5410))+(((-1.0)*cj2*x5407))+(((-1.0)*x5408*x5411)));
evalcond[4]=((((-1.0)*r00*x5412))+(((-1.0)*r02*x5410))+((sj0*x5405))+((sj0*sj1*sj2))+(((-1.0)*x5409*x5411)));
evalcond[5]=((((-1.0)*cj0*x5405))+(((-1.0)*x5406*x5411))+(((-1.0)*r10*x5412))+(((-1.0)*r12*x5410))+(((-1.0)*cj0*sj2*x5407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5413=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst127*r01))+((gconst128*r00)))),-1);
if(!x5413.valid){
continue;
}
CheckValue<IkReal> x5414 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst128*r21*sj0))+((gconst127*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5413.value)))+(x5414.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5415=IKsin(j4);
IkReal x5416=IKcos(j4);
IkReal x5417=(cj1*cj2);
IkReal x5418=(gconst128*r11);
IkReal x5419=((1.0)*sj1);
IkReal x5420=(gconst128*r21);
IkReal x5421=(gconst128*r01);
IkReal x5422=((1.0)*x5415);
IkReal x5423=((1.0)*x5416);
IkReal x5424=(gconst127*x5423);
evalcond[0]=(((r22*x5416))+(((-1.0)*gconst127*r20*x5422))+(((-1.0)*x5420*x5422)));
evalcond[1]=(cj0+(((-1.0)*x5421*x5422))+((r02*x5416))+(((-1.0)*gconst127*r00*x5422)));
evalcond[2]=(sj0+((r12*x5416))+(((-1.0)*gconst127*r10*x5422))+(((-1.0)*x5418*x5422)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*r20*x5424))+(((-1.0)*r22*x5422))+(((-1.0)*cj2*x5419))+(((-1.0)*x5420*x5423)));
evalcond[4]=(((sj0*x5417))+(((-1.0)*x5421*x5423))+((sj0*sj1*sj2))+(((-1.0)*r02*x5422))+(((-1.0)*r00*x5424)));
evalcond[5]=((((-1.0)*cj0*sj2*x5419))+(((-1.0)*cj0*x5417))+(((-1.0)*r10*x5424))+(((-1.0)*x5418*x5423))+(((-1.0)*r12*x5422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5427 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5427)==0){
continue;
}
IkReal x5425=pow(x5427,-0.5);
IkReal x5426=((-1.0)*x5425);
CheckValue<IkReal> x5428 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x5428.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5428.value))));
IkReal gconst130=(r10*x5426);
IkReal gconst131=(r11*x5426);
CheckValue<IkReal> x5429 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x5429.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5429.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x5433 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x5433.valid){
continue;
}
IkReal x5430=((1.0)*(x5433.value));
IkReal x5431=x5425;
IkReal x5432=((-1.0)*x5431);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5430)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5430)));
IkReal gconst130=(r10*x5432);
IkReal gconst131=(r11*x5432);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5437 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x5437.valid){
continue;
}
IkReal x5434=((1.0)*(x5437.value));
IkReal x5435=x5425;
IkReal x5436=((-1.0)*x5435);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5434)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5434)));
IkReal gconst130=(r10*x5436);
IkReal gconst131=(r11*x5436);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5441 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x5441.valid){
continue;
}
IkReal x5438=((1.0)*(x5441.value));
IkReal x5439=x5425;
IkReal x5440=((-1.0)*x5439);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5438)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5438)));
IkReal gconst130=(r10*x5440);
IkReal gconst131=(r11*x5440);
IkReal x5442=r12*r12;
IkReal x5443=(r02*sj0);
IkReal x5444=((1.0)*x5442);
CheckValue<IkReal> x5448=IKPowWithIntegerCheck(((-1.0)+x5442),-1);
if(!x5448.valid){
continue;
}
IkReal x5445=x5448.value;
if((((1.0)+(((-1.0)*x5444)))) < -0.00001)
continue;
IkReal x5446=IKsqrt(((1.0)+(((-1.0)*x5444))));
IkReal x5447=(cj0*x5445*x5446);
j4eval[0]=((IKabs(((((-1.0)*x5443))+((cj0*r12)))))+(IKabs(((((-1.0)*x5444*x5447))+x5447+((r12*x5443*x5445*x5446))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5449=((1.0)*sj0);
CheckValue<IkReal> x5450 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5449))+((cj0*r12)))),IkReal(((((-1.0)*gconst130*r00*x5449))+(((-1.0)*gconst131*r01*x5449))+((cj0*gconst130*r10))+((cj0*gconst131*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5450.valid){
continue;
}
CheckValue<IkReal> x5451=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r21))+((gconst131*r20)))),-1);
if(!x5451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5450.value)+(((1.5707963267949)*(x5451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5452=IKsin(j4);
IkReal x5453=IKcos(j4);
IkReal x5454=(cj1*cj2);
IkReal x5455=(gconst130*r10);
IkReal x5456=(gconst131*r11);
IkReal x5457=((1.0)*sj1);
IkReal x5458=(gconst131*r01);
IkReal x5459=(gconst131*r21);
IkReal x5460=(gconst130*r00);
IkReal x5461=(gconst130*r20);
IkReal x5462=((1.0)*x5452);
IkReal x5463=((1.0)*x5453);
evalcond[0]=((((-1.0)*x5459*x5462))+((r22*x5453))+(((-1.0)*x5461*x5462)));
evalcond[1]=(cj0+(((-1.0)*x5458*x5462))+((r02*x5453))+(((-1.0)*x5460*x5462)));
evalcond[2]=(((r12*x5453))+sj0+(((-1.0)*x5456*x5462))+(((-1.0)*x5455*x5462)));
evalcond[3]=((((-1.0)*x5459*x5463))+((cj1*sj2))+(((-1.0)*x5461*x5463))+(((-1.0)*cj2*x5457))+(((-1.0)*r22*x5462)));
evalcond[4]=((((-1.0)*x5458*x5463))+(((-1.0)*r02*x5462))+((sj0*sj1*sj2))+((sj0*x5454))+(((-1.0)*x5460*x5463)));
evalcond[5]=((((-1.0)*cj0*x5454))+(((-1.0)*r12*x5462))+(((-1.0)*x5456*x5463))+(((-1.0)*x5455*x5463))+(((-1.0)*cj0*sj2*x5457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5464 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r20*sj0))+((gconst131*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5464.valid){
continue;
}
CheckValue<IkReal> x5465=IKPowWithIntegerCheck(IKsign((((gconst131*r00))+(((-1.0)*gconst130*r01)))),-1);
if(!x5465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5464.value)+(((1.5707963267949)*(x5465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5466=IKsin(j4);
IkReal x5467=IKcos(j4);
IkReal x5468=(cj1*cj2);
IkReal x5469=(gconst130*r10);
IkReal x5470=(gconst131*r11);
IkReal x5471=((1.0)*sj1);
IkReal x5472=(gconst131*r01);
IkReal x5473=(gconst131*r21);
IkReal x5474=(gconst130*r00);
IkReal x5475=(gconst130*r20);
IkReal x5476=((1.0)*x5466);
IkReal x5477=((1.0)*x5467);
evalcond[0]=(((r22*x5467))+(((-1.0)*x5475*x5476))+(((-1.0)*x5473*x5476)));
evalcond[1]=(cj0+((r02*x5467))+(((-1.0)*x5474*x5476))+(((-1.0)*x5472*x5476)));
evalcond[2]=(sj0+((r12*x5467))+(((-1.0)*x5470*x5476))+(((-1.0)*x5469*x5476)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*x5475*x5477))+(((-1.0)*x5473*x5477))+(((-1.0)*r22*x5476))+(((-1.0)*cj2*x5471)));
evalcond[4]=((((-1.0)*x5474*x5477))+(((-1.0)*x5472*x5477))+((sj0*sj1*sj2))+(((-1.0)*r02*x5476))+((sj0*x5468)));
evalcond[5]=((((-1.0)*cj0*x5468))+(((-1.0)*r12*x5476))+(((-1.0)*cj0*sj2*x5471))+(((-1.0)*x5470*x5477))+(((-1.0)*x5469*x5477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5478=IKPowWithIntegerCheck(IKsign((((gconst130*r11))+(((-1.0)*gconst131*r10)))),-1);
if(!x5478.valid){
continue;
}
CheckValue<IkReal> x5479 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst131*r21))+((cj0*gconst130*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5478.value)))+(x5479.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5480=IKsin(j4);
IkReal x5481=IKcos(j4);
IkReal x5482=(cj1*cj2);
IkReal x5483=(gconst130*r10);
IkReal x5484=(gconst131*r11);
IkReal x5485=((1.0)*sj1);
IkReal x5486=(gconst131*r01);
IkReal x5487=(gconst131*r21);
IkReal x5488=(gconst130*r00);
IkReal x5489=(gconst130*r20);
IkReal x5490=((1.0)*x5480);
IkReal x5491=((1.0)*x5481);
evalcond[0]=((((-1.0)*x5489*x5490))+(((-1.0)*x5487*x5490))+((r22*x5481)));
evalcond[1]=(cj0+(((-1.0)*x5488*x5490))+(((-1.0)*x5486*x5490))+((r02*x5481)));
evalcond[2]=(sj0+(((-1.0)*x5484*x5490))+((r12*x5481))+(((-1.0)*x5483*x5490)));
evalcond[3]=((((-1.0)*x5489*x5491))+((cj1*sj2))+(((-1.0)*r22*x5490))+(((-1.0)*cj2*x5485))+(((-1.0)*x5487*x5491)));
evalcond[4]=((((-1.0)*x5488*x5491))+(((-1.0)*x5486*x5491))+(((-1.0)*r02*x5490))+((sj0*sj1*sj2))+((sj0*x5482)));
evalcond[5]=((((-1.0)*cj0*sj2*x5485))+(((-1.0)*r12*x5490))+(((-1.0)*x5484*x5491))+(((-1.0)*cj0*x5482))+(((-1.0)*x5483*x5491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5492=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x5492;
j4eval[1]=IKsign(x5492);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5493=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x5493;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x5493);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5494=cj5*cj5;
IkReal x5495=r10*r10;
IkReal x5496=(cj5*r11);
IkReal x5497=(r10*sj5);
IkReal x5498=((((-1.0)*x5494*(r11*r11)))+((x5494*x5495))+(((-1.0)*(r12*r12)))+(((-1.0)*x5495))+(((-2.0)*x5496*x5497)));
j4eval[0]=x5498;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x5496))+(((-1.0)*x5497))))));
j4eval[2]=IKsign(x5498);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5499=cj5*cj5;
IkReal x5500=r10*r10;
IkReal x5501=(cj5*r11);
IkReal x5502=(r10*sj5);
CheckValue<IkReal> x5503 = IKatan2WithCheck(IkReal(((((-1.0)*x5502))+(((-1.0)*x5501)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x5503.valid){
continue;
}
CheckValue<IkReal> x5504=IKPowWithIntegerCheck(IKsign((((x5499*x5500))+(((-1.0)*(r12*r12)))+(((-1.0)*x5500))+(((-1.0)*x5499*(r11*r11)))+(((-2.0)*x5501*x5502)))),-1);
if(!x5504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5503.value)+(((1.5707963267949)*(x5504.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5505=IKsin(j4);
IkReal x5506=IKcos(j4);
IkReal x5507=(r00*sj5);
IkReal x5508=(cj5*r01);
IkReal x5509=(r20*sj5);
IkReal x5510=(cj5*r21);
IkReal x5511=(cj5*r11);
IkReal x5512=(r10*sj5);
IkReal x5513=((1.0)*x5505);
IkReal x5514=((1.0)*x5506);
evalcond[0]=((((-1.0)*x5510*x5513))+((r22*x5506))+(((-1.0)*x5509*x5513)));
evalcond[1]=(((r02*x5506))+(((-1.0)*x5507*x5513))+(((-1.0)*x5508*x5513)));
evalcond[2]=((1.0)+(((-1.0)*x5512*x5513))+(((-1.0)*x5511*x5513))+((r12*x5506)));
evalcond[3]=((((-1.0)*x5512*x5514))+(((-1.0)*x5511*x5514))+(((-1.0)*r12*x5513)));
evalcond[4]=((((-1.0)*r02*x5513))+(((-1.0)*x5507*x5514))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x5508*x5514)));
evalcond[5]=((((-1.0)*x5510*x5514))+(((-1.0)*r22*x5513))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x5509*x5514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5515 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5515.valid){
continue;
}
CheckValue<IkReal> x5516=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x5516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5515.value)+(((1.5707963267949)*(x5516.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5517=IKsin(j4);
IkReal x5518=IKcos(j4);
IkReal x5519=(r00*sj5);
IkReal x5520=(cj5*r01);
IkReal x5521=(r20*sj5);
IkReal x5522=(cj5*r21);
IkReal x5523=(cj5*r11);
IkReal x5524=(r10*sj5);
IkReal x5525=((1.0)*x5517);
IkReal x5526=((1.0)*x5518);
evalcond[0]=(((r22*x5518))+(((-1.0)*x5521*x5525))+(((-1.0)*x5522*x5525)));
evalcond[1]=(((r02*x5518))+(((-1.0)*x5519*x5525))+(((-1.0)*x5520*x5525)));
evalcond[2]=((1.0)+(((-1.0)*x5523*x5525))+((r12*x5518))+(((-1.0)*x5524*x5525)));
evalcond[3]=((((-1.0)*x5523*x5526))+(((-1.0)*x5524*x5526))+(((-1.0)*r12*x5525)));
evalcond[4]=((((-1.0)*r02*x5525))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x5519*x5526))+(((-1.0)*x5520*x5526)));
evalcond[5]=((((-1.0)*r22*x5525))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x5521*x5526))+(((-1.0)*x5522*x5526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5527=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x5527.valid){
continue;
}
CheckValue<IkReal> x5528 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5527.value)))+(x5528.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5529=IKsin(j4);
IkReal x5530=IKcos(j4);
IkReal x5531=(r00*sj5);
IkReal x5532=(cj5*r01);
IkReal x5533=(r20*sj5);
IkReal x5534=(cj5*r21);
IkReal x5535=(cj5*r11);
IkReal x5536=(r10*sj5);
IkReal x5537=((1.0)*x5529);
IkReal x5538=((1.0)*x5530);
evalcond[0]=((((-1.0)*x5534*x5537))+((r22*x5530))+(((-1.0)*x5533*x5537)));
evalcond[1]=((((-1.0)*x5531*x5537))+(((-1.0)*x5532*x5537))+((r02*x5530)));
evalcond[2]=((1.0)+(((-1.0)*x5535*x5537))+(((-1.0)*x5536*x5537))+((r12*x5530)));
evalcond[3]=((((-1.0)*x5535*x5538))+(((-1.0)*x5536*x5538))+(((-1.0)*r12*x5537)));
evalcond[4]=((((-1.0)*r02*x5537))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x5531*x5538))+(((-1.0)*x5532*x5538)));
evalcond[5]=((((-1.0)*r22*x5537))+(((-1.0)*x5534*x5538))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x5533*x5538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5539=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x5539;
j4eval[1]=IKsign(x5539);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5540=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x5540;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x5540);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5541=cj5*cj5;
IkReal x5542=r10*r10;
IkReal x5543=(cj5*r11);
IkReal x5544=(r10*sj5);
IkReal x5545=((r12*r12)+x5542+((x5541*(r11*r11)))+(((2.0)*x5543*x5544))+(((-1.0)*x5541*x5542)));
j4eval[0]=x5545;
j4eval[1]=IKsign(x5545);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5544))+(((-1.0)*x5543))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5546=cj5*cj5;
IkReal x5547=r10*r10;
IkReal x5548=(cj5*r11);
IkReal x5549=(r10*sj5);
CheckValue<IkReal> x5550=IKPowWithIntegerCheck(IKsign(((r12*r12)+x5547+(((2.0)*x5548*x5549))+(((-1.0)*x5546*x5547))+((x5546*(r11*r11))))),-1);
if(!x5550.valid){
continue;
}
CheckValue<IkReal> x5551 = IKatan2WithCheck(IkReal(((((-1.0)*x5548))+(((-1.0)*x5549)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x5551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5550.value)))+(x5551.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5552=IKsin(j4);
IkReal x5553=IKcos(j4);
IkReal x5554=(r00*sj5);
IkReal x5555=(cj5*r01);
IkReal x5556=(r20*sj5);
IkReal x5557=((1.0)*sj1);
IkReal x5558=(cj5*r21);
IkReal x5559=(cj5*r11);
IkReal x5560=(r10*sj5);
IkReal x5561=((1.0)*x5552);
IkReal x5562=((1.0)*x5553);
evalcond[0]=((((-1.0)*x5556*x5561))+((r22*x5553))+(((-1.0)*x5558*x5561)));
evalcond[1]=((((-1.0)*x5554*x5561))+(((-1.0)*x5555*x5561))+((r02*x5553)));
evalcond[2]=((-1.0)+((r12*x5553))+(((-1.0)*x5559*x5561))+(((-1.0)*x5560*x5561)));
evalcond[3]=((((-1.0)*r12*x5561))+(((-1.0)*x5559*x5562))+(((-1.0)*x5560*x5562)));
evalcond[4]=((((-1.0)*r22*x5561))+(((-1.0)*x5556*x5562))+(((-1.0)*cj2*x5557))+((cj1*sj2))+(((-1.0)*x5558*x5562)));
evalcond[5]=((((-1.0)*sj2*x5557))+(((-1.0)*x5554*x5562))+(((-1.0)*x5555*x5562))+(((-1.0)*cj1*cj2))+(((-1.0)*r02*x5561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5563 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5563.valid){
continue;
}
CheckValue<IkReal> x5564=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x5564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5563.value)+(((1.5707963267949)*(x5564.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5565=IKsin(j4);
IkReal x5566=IKcos(j4);
IkReal x5567=(r00*sj5);
IkReal x5568=(cj5*r01);
IkReal x5569=(r20*sj5);
IkReal x5570=((1.0)*sj1);
IkReal x5571=(cj5*r21);
IkReal x5572=(cj5*r11);
IkReal x5573=(r10*sj5);
IkReal x5574=((1.0)*x5565);
IkReal x5575=((1.0)*x5566);
evalcond[0]=(((r22*x5566))+(((-1.0)*x5569*x5574))+(((-1.0)*x5571*x5574)));
evalcond[1]=(((r02*x5566))+(((-1.0)*x5568*x5574))+(((-1.0)*x5567*x5574)));
evalcond[2]=((-1.0)+(((-1.0)*x5572*x5574))+(((-1.0)*x5573*x5574))+((r12*x5566)));
evalcond[3]=((((-1.0)*r12*x5574))+(((-1.0)*x5572*x5575))+(((-1.0)*x5573*x5575)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*x5569*x5575))+(((-1.0)*cj2*x5570))+(((-1.0)*x5571*x5575))+(((-1.0)*r22*x5574)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*r02*x5574))+(((-1.0)*x5568*x5575))+(((-1.0)*x5567*x5575))+(((-1.0)*sj2*x5570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5576 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5576.valid){
continue;
}
CheckValue<IkReal> x5577=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x5577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5576.value)+(((1.5707963267949)*(x5577.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5578=IKsin(j4);
IkReal x5579=IKcos(j4);
IkReal x5580=(r00*sj5);
IkReal x5581=(cj5*r01);
IkReal x5582=(r20*sj5);
IkReal x5583=((1.0)*sj1);
IkReal x5584=(cj5*r21);
IkReal x5585=(cj5*r11);
IkReal x5586=(r10*sj5);
IkReal x5587=((1.0)*x5578);
IkReal x5588=((1.0)*x5579);
evalcond[0]=(((r22*x5579))+(((-1.0)*x5584*x5587))+(((-1.0)*x5582*x5587)));
evalcond[1]=(((r02*x5579))+(((-1.0)*x5580*x5587))+(((-1.0)*x5581*x5587)));
evalcond[2]=((-1.0)+(((-1.0)*x5586*x5587))+(((-1.0)*x5585*x5587))+((r12*x5579)));
evalcond[3]=((((-1.0)*x5586*x5588))+(((-1.0)*r12*x5587))+(((-1.0)*x5585*x5588)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*x5584*x5588))+(((-1.0)*x5582*x5588))+(((-1.0)*cj2*x5583))+(((-1.0)*r22*x5587)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*r02*x5587))+(((-1.0)*x5580*x5588))+(((-1.0)*x5581*x5588))+(((-1.0)*sj2*x5583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5589=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5589);
rxp0_2=(py*r00);
rxp1_0=(r21*x5589);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5590=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5590);
rxp0_2=(py*r00);
rxp1_0=(r21*x5590);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5591=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5591);
rxp0_2=(py*r00);
rxp1_0=(r21*x5591);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5594=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x5594.valid){
continue;
}
IkReal x5592=x5594.value;
IkReal x5593=((1.0)*sj0*x5592);
cj4array[0]=((((-1.0)*sj1*sj2*x5593))+(((-1.0)*cj1*cj2*x5593)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5595=IKsin(j4);
IkReal x5596=IKcos(j4);
IkReal x5597=(r20*sj5);
IkReal x5598=((1.0)*cj5*r21);
IkReal x5599=((1.0)*x5595);
evalcond[0]=((-1.0)*r12*x5595);
evalcond[1]=(sj0+((r12*x5596)));
evalcond[2]=((((-1.0)*x5595*x5598))+(((-1.0)*x5597*x5599)));
evalcond[3]=((((-1.0)*r00*sj5*x5599))+(((-1.0)*cj5*r01*x5599)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x5596*x5597))+(((-1.0)*x5596*x5598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5601=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x5601.valid){
continue;
}
IkReal x5600=x5601.value;
cj4array[0]=(((cj2*sj1*x5600))+(((-1.0)*cj1*sj2*x5600)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5602=IKsin(j4);
IkReal x5603=IKcos(j4);
IkReal x5604=((1.0)*cj5);
IkReal x5605=((1.0)*r00*sj5);
evalcond[0]=((-1.0)*r12*x5602);
evalcond[1]=(sj0+((r12*x5603)));
evalcond[2]=((((-1.0)*r20*sj5*x5602))+(((-1.0)*r21*x5602*x5604)));
evalcond[3]=((((-1.0)*x5602*x5605))+(((-1.0)*r01*x5602*x5604)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*x5603*x5605))+(((-1.0)*r01*x5603*x5604))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5606=IKPowWithIntegerCheck(r12,-1);
if(!x5606.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x5606.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5607=IKsin(j4);
IkReal x5608=IKcos(j4);
IkReal x5609=(r00*sj5);
IkReal x5610=(r20*sj5);
IkReal x5611=((1.0)*x5607);
IkReal x5612=((1.0)*x5608);
IkReal x5613=(cj5*x5612);
evalcond[0]=((-1.0)*r12*x5607);
evalcond[1]=((((-1.0)*cj5*r21*x5611))+(((-1.0)*x5610*x5611)));
evalcond[2]=((((-1.0)*x5609*x5611))+(((-1.0)*cj5*r01*x5611)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x5613))+(((-1.0)*x5610*x5612)));
evalcond[4]=((((-1.0)*r01*x5613))+((cj1*cj2*sj0))+(((-1.0)*x5609*x5612))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5614=((1.0)*sj0);
CheckValue<IkReal> x5615=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x5615.valid){
continue;
}
CheckValue<IkReal> x5616 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5614))+((cj0*r12)))),IkReal((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x5614))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x5614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5615.value)))+(x5616.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5617=IKsin(j4);
IkReal x5618=IKcos(j4);
IkReal x5619=(cj1*cj2);
IkReal x5620=(r00*sj5);
IkReal x5621=(cj5*r01);
IkReal x5622=(r20*sj5);
IkReal x5623=(cj5*r21);
IkReal x5624=((1.0)*sj1);
IkReal x5625=(cj5*r11);
IkReal x5626=(r10*sj5);
IkReal x5627=((1.0)*x5617);
IkReal x5628=((1.0)*x5618);
evalcond[0]=((((-1.0)*x5623*x5627))+(((-1.0)*x5622*x5627))+((r22*x5618)));
evalcond[1]=(cj0+((r02*x5618))+(((-1.0)*x5621*x5627))+(((-1.0)*x5620*x5627)));
evalcond[2]=(sj0+(((-1.0)*x5626*x5627))+(((-1.0)*x5625*x5627))+((r12*x5618)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*r22*x5627))+(((-1.0)*x5623*x5628))+(((-1.0)*x5622*x5628))+(((-1.0)*cj2*x5624)));
evalcond[4]=(((sj0*x5619))+(((-1.0)*x5621*x5628))+((sj0*sj1*sj2))+(((-1.0)*r02*x5627))+(((-1.0)*x5620*x5628)));
evalcond[5]=((((-1.0)*x5626*x5628))+(((-1.0)*r12*x5627))+(((-1.0)*x5625*x5628))+(((-1.0)*cj0*x5619))+(((-1.0)*cj0*sj2*x5624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5629=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x5629.valid){
continue;
}
CheckValue<IkReal> x5630 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5629.value)))+(x5630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5631=IKsin(j4);
IkReal x5632=IKcos(j4);
IkReal x5633=(cj1*cj2);
IkReal x5634=(r00*sj5);
IkReal x5635=(cj5*r01);
IkReal x5636=(r20*sj5);
IkReal x5637=(cj5*r21);
IkReal x5638=((1.0)*sj1);
IkReal x5639=(cj5*r11);
IkReal x5640=(r10*sj5);
IkReal x5641=((1.0)*x5631);
IkReal x5642=((1.0)*x5632);
evalcond[0]=(((r22*x5632))+(((-1.0)*x5636*x5641))+(((-1.0)*x5637*x5641)));
evalcond[1]=((((-1.0)*x5634*x5641))+cj0+(((-1.0)*x5635*x5641))+((r02*x5632)));
evalcond[2]=(((r12*x5632))+sj0+(((-1.0)*x5640*x5641))+(((-1.0)*x5639*x5641)));
evalcond[3]=((((-1.0)*r22*x5641))+((cj1*sj2))+(((-1.0)*cj2*x5638))+(((-1.0)*x5636*x5642))+(((-1.0)*x5637*x5642)));
evalcond[4]=((((-1.0)*x5634*x5642))+(((-1.0)*r02*x5641))+((sj0*sj1*sj2))+((sj0*x5633))+(((-1.0)*x5635*x5642)));
evalcond[5]=((((-1.0)*cj0*x5633))+(((-1.0)*r12*x5641))+(((-1.0)*cj0*sj2*x5638))+(((-1.0)*x5640*x5642))+(((-1.0)*x5639*x5642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5643 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5643.valid){
continue;
}
CheckValue<IkReal> x5644=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x5644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5643.value)+(((1.5707963267949)*(x5644.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5645=IKsin(j4);
IkReal x5646=IKcos(j4);
IkReal x5647=(cj1*cj2);
IkReal x5648=(r00*sj5);
IkReal x5649=(cj5*r01);
IkReal x5650=(r20*sj5);
IkReal x5651=(cj5*r21);
IkReal x5652=((1.0)*sj1);
IkReal x5653=(cj5*r11);
IkReal x5654=(r10*sj5);
IkReal x5655=((1.0)*x5645);
IkReal x5656=((1.0)*x5646);
evalcond[0]=((((-1.0)*x5651*x5655))+((r22*x5646))+(((-1.0)*x5650*x5655)));
evalcond[1]=(cj0+(((-1.0)*x5649*x5655))+(((-1.0)*x5648*x5655))+((r02*x5646)));
evalcond[2]=(sj0+(((-1.0)*x5654*x5655))+(((-1.0)*x5653*x5655))+((r12*x5646)));
evalcond[3]=((((-1.0)*x5651*x5656))+(((-1.0)*r22*x5655))+((cj1*sj2))+(((-1.0)*x5650*x5656))+(((-1.0)*cj2*x5652)));
evalcond[4]=(((sj0*x5647))+(((-1.0)*x5649*x5656))+(((-1.0)*r02*x5655))+(((-1.0)*x5648*x5656))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*cj0*x5647))+(((-1.0)*r12*x5655))+(((-1.0)*x5654*x5656))+(((-1.0)*x5653*x5656))+(((-1.0)*cj0*sj2*x5652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5657=(((cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x5657;
j0eval[1]=IKsign(x5657);
j0eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5658=r20*r20;
IkReal x5659=cj5*cj5;
IkReal x5660=(cj1*sj2);
IkReal x5661=(r20*sj5);
IkReal x5662=(cj5*r21);
IkReal x5663=((1.0)*cj2*sj1);
IkReal x5664=((((-1.0)*x5659*(r21*r21)))+(((-1.0)*(r22*r22)))+((x5658*x5659))+(((-1.0)*x5658))+(((-2.0)*x5661*x5662)));
j4eval[0]=x5664;
j4eval[1]=((IKabs((((r22*x5660))+(((-1.0)*r22*x5663)))))+(IKabs((((x5660*x5662))+((x5660*x5661))+(((-1.0)*x5662*x5663))+(((-1.0)*x5661*x5663))))));
j4eval[2]=IKsign(x5664);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=(((cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.4876660341556)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.4876660341556)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.4876660341556)*py))+IKsqr(((9.4876660341556)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.4876660341556)*py), ((9.4876660341556)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1054)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1054)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5665=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x5665;
j4eval[1]=IKsign(x5665);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5666=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x5666;
j4eval[1]=IKsign(x5666);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5667=cj5*cj5;
IkReal x5668=(r00*r20);
IkReal x5669=(cj5*sj5);
IkReal x5670=(x5668+(((-1.0)*x5667*x5668))+((r00*r21*x5669))+((r01*r20*x5669))+((r02*r22))+((r01*r21*x5667)));
j4eval[0]=x5670;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x5670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5671=cj5*cj5;
IkReal x5672=(r00*r20);
IkReal x5673=(cj5*sj5);
CheckValue<IkReal> x5674=IKPowWithIntegerCheck(IKsign((x5672+((r01*r20*x5673))+(((-1.0)*x5671*x5672))+((r01*r21*x5671))+((r00*r21*x5673))+((r02*r22)))),-1);
if(!x5674.valid){
continue;
}
CheckValue<IkReal> x5675 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5674.value)))+(x5675.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5676=IKcos(j4);
IkReal x5677=IKsin(j4);
IkReal x5678=(cj5*r11);
IkReal x5679=(cj5*r21);
IkReal x5680=(cj5*r01);
IkReal x5681=(sj5*x5676);
IkReal x5682=((1.0)*x5677);
evalcond[0]=(((x5676*x5679))+((r20*x5681))+((r22*x5677)));
evalcond[1]=(sj0+((r02*x5677))+((r00*x5681))+((x5676*x5680)));
evalcond[2]=((((-1.0)*r20*sj5*x5682))+(((-1.0)*x5679*x5682))+((r22*x5676)));
evalcond[3]=(((r02*x5676))+cj0+(((-1.0)*x5680*x5682))+(((-1.0)*r00*sj5*x5682)));
evalcond[4]=(sj0+(((-1.0)*x5678*x5682))+((r12*x5676))+(((-1.0)*r10*sj5*x5682)));
evalcond[5]=(((x5676*x5678))+((r12*x5677))+((r10*x5681))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5683=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x5683.valid){
continue;
}
CheckValue<IkReal> x5684 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5683.value)))+(x5684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5685=IKcos(j4);
IkReal x5686=IKsin(j4);
IkReal x5687=(cj5*r11);
IkReal x5688=(cj5*r21);
IkReal x5689=(cj5*r01);
IkReal x5690=(sj5*x5685);
IkReal x5691=((1.0)*x5686);
evalcond[0]=(((r22*x5686))+((x5685*x5688))+((r20*x5690)));
evalcond[1]=(sj0+((x5685*x5689))+((r02*x5686))+((r00*x5690)));
evalcond[2]=(((r22*x5685))+(((-1.0)*r20*sj5*x5691))+(((-1.0)*x5688*x5691)));
evalcond[3]=(cj0+((r02*x5685))+(((-1.0)*r00*sj5*x5691))+(((-1.0)*x5689*x5691)));
evalcond[4]=((((-1.0)*r10*sj5*x5691))+sj0+(((-1.0)*x5687*x5691))+((r12*x5685)));
evalcond[5]=(((x5685*x5687))+((r12*x5686))+((r10*x5690))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5692 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5692.valid){
continue;
}
CheckValue<IkReal> x5693=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x5693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5692.value)+(((1.5707963267949)*(x5693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5694=IKcos(j4);
IkReal x5695=IKsin(j4);
IkReal x5696=(cj5*r11);
IkReal x5697=(cj5*r21);
IkReal x5698=(cj5*r01);
IkReal x5699=(sj5*x5694);
IkReal x5700=((1.0)*x5695);
evalcond[0]=(((x5694*x5697))+((r22*x5695))+((r20*x5699)));
evalcond[1]=(((x5694*x5698))+sj0+((r02*x5695))+((r00*x5699)));
evalcond[2]=(((r22*x5694))+(((-1.0)*x5697*x5700))+(((-1.0)*r20*sj5*x5700)));
evalcond[3]=((((-1.0)*r00*sj5*x5700))+cj0+((r02*x5694))+(((-1.0)*x5698*x5700)));
evalcond[4]=(sj0+((r12*x5694))+(((-1.0)*r10*sj5*x5700))+(((-1.0)*x5696*x5700)));
evalcond[5]=(((x5694*x5696))+((r10*x5699))+((r12*x5695))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.4876660341556)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.4876660341556)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.4876660341556)*py))+IKsqr(((9.4876660341556)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.4876660341556)*py), ((9.4876660341556)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1054)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1054)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5701=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x5701;
j4eval[1]=IKsign(x5701);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5702=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x5702;
j4eval[1]=IKsign(x5702);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5703=cj5*cj5;
IkReal x5704=(r00*r20);
IkReal x5705=(cj5*sj5);
IkReal x5706=((((-1.0)*x5703*x5704))+((r01*r21*x5703))+((r00*r21*x5705))+((r01*r20*x5705))+((r02*r22))+x5704);
j4eval[0]=x5706;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x5706);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5707=cj5*cj5;
IkReal x5708=(r00*r20);
IkReal x5709=(cj5*sj5);
CheckValue<IkReal> x5710=IKPowWithIntegerCheck(IKsign((((r01*r21*x5707))+((r00*r21*x5709))+((r01*r20*x5709))+(((-1.0)*x5707*x5708))+((r02*r22))+x5708)),-1);
if(!x5710.valid){
continue;
}
CheckValue<IkReal> x5711 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5710.value)))+(x5711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5712=IKcos(j4);
IkReal x5713=IKsin(j4);
IkReal x5714=(sj5*x5712);
IkReal x5715=(cj5*x5712);
IkReal x5716=((1.0)*cj5*x5713);
IkReal x5717=((1.0)*sj5*x5713);
evalcond[0]=(((r22*x5713))+((r21*x5715))+((r20*x5714)));
evalcond[1]=(cj0+((r10*x5714))+((r11*x5715))+((r12*x5713)));
evalcond[2]=(((r22*x5712))+(((-1.0)*r20*x5717))+(((-1.0)*r21*x5716)));
evalcond[3]=((((-1.0)*r00*x5717))+((r02*x5712))+(((-1.0)*r01*x5716))+cj0);
evalcond[4]=(sj0+(((-1.0)*r10*x5717))+((r12*x5712))+(((-1.0)*r11*x5716)));
evalcond[5]=(((r02*x5713))+(((-1.0)*sj0))+((r00*x5714))+((r01*x5715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5718 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5718.valid){
continue;
}
CheckValue<IkReal> x5719=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x5719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5718.value)+(((1.5707963267949)*(x5719.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5720=IKcos(j4);
IkReal x5721=IKsin(j4);
IkReal x5722=(sj5*x5720);
IkReal x5723=(cj5*x5720);
IkReal x5724=((1.0)*cj5*x5721);
IkReal x5725=((1.0)*sj5*x5721);
evalcond[0]=(((r21*x5723))+((r20*x5722))+((r22*x5721)));
evalcond[1]=(((r11*x5723))+cj0+((r12*x5721))+((r10*x5722)));
evalcond[2]=((((-1.0)*r20*x5725))+(((-1.0)*r21*x5724))+((r22*x5720)));
evalcond[3]=(cj0+((r02*x5720))+(((-1.0)*r00*x5725))+(((-1.0)*r01*x5724)));
evalcond[4]=(sj0+((r12*x5720))+(((-1.0)*r11*x5724))+(((-1.0)*r10*x5725)));
evalcond[5]=((((-1.0)*sj0))+((r00*x5722))+((r01*x5723))+((r02*x5721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5726=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x5726.valid){
continue;
}
CheckValue<IkReal> x5727 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5726.value)))+(x5727.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5728=IKcos(j4);
IkReal x5729=IKsin(j4);
IkReal x5730=(sj5*x5728);
IkReal x5731=(cj5*x5728);
IkReal x5732=((1.0)*cj5*x5729);
IkReal x5733=((1.0)*sj5*x5729);
evalcond[0]=(((r21*x5731))+((r20*x5730))+((r22*x5729)));
evalcond[1]=(((r11*x5731))+cj0+((r12*x5729))+((r10*x5730)));
evalcond[2]=((((-1.0)*r21*x5732))+(((-1.0)*r20*x5733))+((r22*x5728)));
evalcond[3]=(cj0+((r02*x5728))+(((-1.0)*r01*x5732))+(((-1.0)*r00*x5733)));
evalcond[4]=(sj0+(((-1.0)*r11*x5732))+((r12*x5728))+(((-1.0)*r10*x5733)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5731))+((r00*x5730))+((r02*x5729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.09829334475201)*px))+(((0.489292297647925)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.489292297647925)*px))+(((-2.09829334475201)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.09829334475201)*px))+(((0.489292297647925)*py))))+IKsqr(((((0.489292297647925)*px))+(((-2.09829334475201)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.09829334475201)*px))+(((0.489292297647925)*py))), ((((0.489292297647925)*px))+(((-2.09829334475201)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5734=IKsin(j0);
IkReal x5735=IKcos(j0);
evalcond[0]=((((0.1054)*x5735))+(((-1.0)*px))+(((0.452)*x5734)));
evalcond[1]=((((0.1054)*x5734))+(((-0.452)*x5735))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5736=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x5736;
j4eval[1]=IKsign(x5736);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5737=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x5737;
j4eval[1]=IKsign(x5737);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5738=cj5*cj5;
IkReal x5739=(r00*r20);
IkReal x5740=(cj5*sj5);
IkReal x5741=((((-1.0)*x5738*x5739))+((r01*r21*x5738))+((r00*r21*x5740))+((r02*r22))+((r01*r20*x5740))+x5739);
j4eval[0]=x5741;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x5741);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5742=cj5*cj5;
IkReal x5743=(r00*r20);
IkReal x5744=(cj5*sj5);
CheckValue<IkReal> x5745=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5742*x5743))+((r00*r21*x5744))+((r01*r21*x5742))+((r02*r22))+((r01*r20*x5744))+x5743)),-1);
if(!x5745.valid){
continue;
}
CheckValue<IkReal> x5746 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5745.value)))+(x5746.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5747=IKcos(j4);
IkReal x5748=IKsin(j4);
IkReal x5749=(cj5*r11);
IkReal x5750=(cj5*r21);
IkReal x5751=(cj5*r01);
IkReal x5752=(sj5*x5747);
IkReal x5753=((1.0)*x5748);
evalcond[0]=(((r22*x5748))+((r20*x5752))+((x5747*x5750)));
evalcond[1]=(sj0+((r00*x5752))+((x5747*x5751))+((r02*x5748)));
evalcond[2]=(((r22*x5747))+(((-1.0)*r20*sj5*x5753))+(((-1.0)*x5750*x5753)));
evalcond[3]=(cj0+(((-1.0)*x5751*x5753))+(((-1.0)*r00*sj5*x5753))+((r02*x5747)));
evalcond[4]=((((-1.0)*x5749*x5753))+sj0+(((-1.0)*r10*sj5*x5753))+((r12*x5747)));
evalcond[5]=(((r12*x5748))+(((-1.0)*cj0))+((x5747*x5749))+((r10*x5752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5754=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x5754.valid){
continue;
}
CheckValue<IkReal> x5755 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5754.value)))+(x5755.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5756=IKcos(j4);
IkReal x5757=IKsin(j4);
IkReal x5758=(cj5*r11);
IkReal x5759=(cj5*r21);
IkReal x5760=(cj5*r01);
IkReal x5761=(sj5*x5756);
IkReal x5762=((1.0)*x5757);
evalcond[0]=(((x5756*x5759))+((r20*x5761))+((r22*x5757)));
evalcond[1]=(((r00*x5761))+sj0+((x5756*x5760))+((r02*x5757)));
evalcond[2]=((((-1.0)*r20*sj5*x5762))+(((-1.0)*x5759*x5762))+((r22*x5756)));
evalcond[3]=(cj0+(((-1.0)*x5760*x5762))+(((-1.0)*r00*sj5*x5762))+((r02*x5756)));
evalcond[4]=(sj0+(((-1.0)*r10*sj5*x5762))+(((-1.0)*x5758*x5762))+((r12*x5756)));
evalcond[5]=(((x5756*x5758))+((r10*x5761))+(((-1.0)*cj0))+((r12*x5757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5763 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5763.valid){
continue;
}
CheckValue<IkReal> x5764=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x5764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5763.value)+(((1.5707963267949)*(x5764.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5765=IKcos(j4);
IkReal x5766=IKsin(j4);
IkReal x5767=(cj5*r11);
IkReal x5768=(cj5*r21);
IkReal x5769=(cj5*r01);
IkReal x5770=(sj5*x5765);
IkReal x5771=((1.0)*x5766);
evalcond[0]=(((r22*x5766))+((x5765*x5768))+((r20*x5770)));
evalcond[1]=(sj0+((r00*x5770))+((x5765*x5769))+((r02*x5766)));
evalcond[2]=((((-1.0)*r20*sj5*x5771))+((r22*x5765))+(((-1.0)*x5768*x5771)));
evalcond[3]=(cj0+(((-1.0)*x5769*x5771))+(((-1.0)*r00*sj5*x5771))+((r02*x5765)));
evalcond[4]=((((-1.0)*r10*sj5*x5771))+sj0+(((-1.0)*x5767*x5771))+((r12*x5765)));
evalcond[5]=(((x5765*x5767))+((r10*x5770))+((r12*x5766))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.09829334475201)*px))+(((0.489292297647925)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.489292297647925)*px))+(((-2.09829334475201)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.09829334475201)*px))+(((0.489292297647925)*py))))+IKsqr(((((0.489292297647925)*px))+(((-2.09829334475201)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.09829334475201)*px))+(((0.489292297647925)*py))), ((((0.489292297647925)*px))+(((-2.09829334475201)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5772=IKsin(j0);
IkReal x5773=IKcos(j0);
evalcond[0]=((((0.1054)*x5773))+(((-1.0)*px))+(((0.452)*x5772)));
evalcond[1]=((((0.1054)*x5772))+(((-0.452)*x5773))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5774=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x5774;
j4eval[1]=IKsign(x5774);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5775=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x5775;
j4eval[1]=IKsign(x5775);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5776=cj5*cj5;
IkReal x5777=(r00*r20);
IkReal x5778=(cj5*sj5);
IkReal x5779=(((r00*r21*x5778))+(((-1.0)*x5776*x5777))+((r01*r20*x5778))+((r02*r22))+((r01*r21*x5776))+x5777);
j4eval[0]=x5779;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x5779);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5780=cj5*cj5;
IkReal x5781=(r00*r20);
IkReal x5782=(cj5*sj5);
CheckValue<IkReal> x5783=IKPowWithIntegerCheck(IKsign((((r01*r21*x5780))+((r01*r20*x5782))+((r02*r22))+((r00*r21*x5782))+(((-1.0)*x5780*x5781))+x5781)),-1);
if(!x5783.valid){
continue;
}
CheckValue<IkReal> x5784 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5783.value)))+(x5784.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5785=IKcos(j4);
IkReal x5786=IKsin(j4);
IkReal x5787=(sj5*x5785);
IkReal x5788=(cj5*x5785);
IkReal x5789=((1.0)*cj5*x5786);
IkReal x5790=((1.0)*sj5*x5786);
evalcond[0]=(((r20*x5787))+((r21*x5788))+((r22*x5786)));
evalcond[1]=(cj0+((r12*x5786))+((r11*x5788))+((r10*x5787)));
evalcond[2]=((((-1.0)*r21*x5789))+(((-1.0)*r20*x5790))+((r22*x5785)));
evalcond[3]=(cj0+(((-1.0)*r00*x5790))+(((-1.0)*r01*x5789))+((r02*x5785)));
evalcond[4]=(sj0+(((-1.0)*r10*x5790))+((r12*x5785))+(((-1.0)*r11*x5789)));
evalcond[5]=((((-1.0)*sj0))+((r00*x5787))+((r01*x5788))+((r02*x5786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5791 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5791.valid){
continue;
}
CheckValue<IkReal> x5792=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x5792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5791.value)+(((1.5707963267949)*(x5792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5793=IKcos(j4);
IkReal x5794=IKsin(j4);
IkReal x5795=(sj5*x5793);
IkReal x5796=(cj5*x5793);
IkReal x5797=((1.0)*cj5*x5794);
IkReal x5798=((1.0)*sj5*x5794);
evalcond[0]=(((r20*x5795))+((r21*x5796))+((r22*x5794)));
evalcond[1]=(((r10*x5795))+cj0+((r12*x5794))+((r11*x5796)));
evalcond[2]=((((-1.0)*r21*x5797))+(((-1.0)*r20*x5798))+((r22*x5793)));
evalcond[3]=(cj0+(((-1.0)*r01*x5797))+(((-1.0)*r00*x5798))+((r02*x5793)));
evalcond[4]=(sj0+((r12*x5793))+(((-1.0)*r10*x5798))+(((-1.0)*r11*x5797)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5796))+((r00*x5795))+((r02*x5794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5799=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x5799.valid){
continue;
}
CheckValue<IkReal> x5800 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5799.value)))+(x5800.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5801=IKcos(j4);
IkReal x5802=IKsin(j4);
IkReal x5803=(sj5*x5801);
IkReal x5804=(cj5*x5801);
IkReal x5805=((1.0)*cj5*x5802);
IkReal x5806=((1.0)*sj5*x5802);
evalcond[0]=(((r21*x5804))+((r22*x5802))+((r20*x5803)));
evalcond[1]=(cj0+((r11*x5804))+((r12*x5802))+((r10*x5803)));
evalcond[2]=((((-1.0)*r20*x5806))+((r22*x5801))+(((-1.0)*r21*x5805)));
evalcond[3]=(cj0+((r02*x5801))+(((-1.0)*r01*x5805))+(((-1.0)*r00*x5806)));
evalcond[4]=(sj0+(((-1.0)*r10*x5806))+(((-1.0)*r11*x5805))+((r12*x5801)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5804))+((r00*x5803))+((r02*x5802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.4876660341556)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.4876660341556)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.4876660341556)*py))+IKsqr(((9.4876660341556)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.4876660341556)*py), ((9.4876660341556)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1054)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1054)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5807=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x5807;
j4eval[1]=IKsign(x5807);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5808=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x5808;
j4eval[1]=IKsign(x5808);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5809=cj5*cj5;
IkReal x5810=(r00*r20);
IkReal x5811=(cj5*sj5);
IkReal x5812=(((r01*r20*x5811))+((r00*r21*x5811))+(((-1.0)*x5809*x5810))+((r01*r21*x5809))+((r02*r22))+x5810);
j4eval[0]=x5812;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x5812);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5813=cj5*cj5;
IkReal x5814=(r00*r20);
IkReal x5815=(cj5*sj5);
CheckValue<IkReal> x5816=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5813*x5814))+((r01*r20*x5815))+((r01*r21*x5813))+((r00*r21*x5815))+((r02*r22))+x5814)),-1);
if(!x5816.valid){
continue;
}
CheckValue<IkReal> x5817 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5816.value)))+(x5817.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5818=IKcos(j4);
IkReal x5819=IKsin(j4);
IkReal x5820=(sj5*x5818);
IkReal x5821=(cj5*x5818);
IkReal x5822=((1.0)*cj5*x5819);
IkReal x5823=((1.0)*sj5*x5819);
evalcond[0]=(((r21*x5821))+((r22*x5819))+((r20*x5820)));
evalcond[1]=(cj0+((r11*x5821))+((r12*x5819))+((r10*x5820)));
evalcond[2]=((((-1.0)*r20*x5823))+(((-1.0)*r21*x5822))+((r22*x5818)));
evalcond[3]=((((-1.0)*r00*x5823))+cj0+(((-1.0)*r01*x5822))+((r02*x5818)));
evalcond[4]=(sj0+((r12*x5818))+(((-1.0)*r10*x5823))+(((-1.0)*r11*x5822)));
evalcond[5]=((((-1.0)*sj0))+((r02*x5819))+((r00*x5820))+((r01*x5821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5824 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5824.valid){
continue;
}
CheckValue<IkReal> x5825=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x5825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5824.value)+(((1.5707963267949)*(x5825.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5826=IKcos(j4);
IkReal x5827=IKsin(j4);
IkReal x5828=(sj5*x5826);
IkReal x5829=(cj5*x5826);
IkReal x5830=((1.0)*cj5*x5827);
IkReal x5831=((1.0)*sj5*x5827);
evalcond[0]=(((r21*x5829))+((r20*x5828))+((r22*x5827)));
evalcond[1]=(cj0+((r12*x5827))+((r11*x5829))+((r10*x5828)));
evalcond[2]=((((-1.0)*r20*x5831))+(((-1.0)*r21*x5830))+((r22*x5826)));
evalcond[3]=(((r02*x5826))+(((-1.0)*r00*x5831))+cj0+(((-1.0)*r01*x5830)));
evalcond[4]=(sj0+((r12*x5826))+(((-1.0)*r10*x5831))+(((-1.0)*r11*x5830)));
evalcond[5]=(((r02*x5827))+(((-1.0)*sj0))+((r00*x5828))+((r01*x5829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5832=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x5832.valid){
continue;
}
CheckValue<IkReal> x5833 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5832.value)))+(x5833.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5834=IKcos(j4);
IkReal x5835=IKsin(j4);
IkReal x5836=(sj5*x5834);
IkReal x5837=(cj5*x5834);
IkReal x5838=((1.0)*cj5*x5835);
IkReal x5839=((1.0)*sj5*x5835);
evalcond[0]=(((r21*x5837))+((r20*x5836))+((r22*x5835)));
evalcond[1]=(cj0+((r12*x5835))+((r11*x5837))+((r10*x5836)));
evalcond[2]=((((-1.0)*r20*x5839))+(((-1.0)*r21*x5838))+((r22*x5834)));
evalcond[3]=(((r02*x5834))+(((-1.0)*r00*x5839))+cj0+(((-1.0)*r01*x5838)));
evalcond[4]=(sj0+((r12*x5834))+(((-1.0)*r10*x5839))+(((-1.0)*r11*x5838)));
evalcond[5]=(((r02*x5835))+(((-1.0)*sj0))+((r00*x5836))+((r01*x5837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.4876660341556)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.4876660341556)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.4876660341556)*py))+IKsqr(((9.4876660341556)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.4876660341556)*py), ((9.4876660341556)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1054)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1054)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5840=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x5840;
j4eval[1]=IKsign(x5840);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5841=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x5841;
j4eval[1]=IKsign(x5841);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5842=cj5*cj5;
IkReal x5843=(r00*r20);
IkReal x5844=(cj5*sj5);
IkReal x5845=(((r00*r21*x5844))+((r01*r20*x5844))+((r01*r21*x5842))+(((-1.0)*x5842*x5843))+((r02*r22))+x5843);
j4eval[0]=x5845;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x5845);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5846=cj5*cj5;
IkReal x5847=(r00*r20);
IkReal x5848=(cj5*sj5);
CheckValue<IkReal> x5849=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5846*x5847))+((r00*r21*x5848))+((r01*r20*x5848))+((r01*r21*x5846))+((r02*r22))+x5847)),-1);
if(!x5849.valid){
continue;
}
CheckValue<IkReal> x5850 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5849.value)))+(x5850.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5851=IKcos(j4);
IkReal x5852=IKsin(j4);
IkReal x5853=(cj5*r11);
IkReal x5854=(cj5*r21);
IkReal x5855=(cj5*r01);
IkReal x5856=(sj5*x5851);
IkReal x5857=((1.0)*x5852);
evalcond[0]=(((x5851*x5854))+((r22*x5852))+((r20*x5856)));
evalcond[1]=(sj0+((r00*x5856))+((x5851*x5855))+((r02*x5852)));
evalcond[2]=(((r22*x5851))+(((-1.0)*x5854*x5857))+(((-1.0)*r20*sj5*x5857)));
evalcond[3]=(cj0+(((-1.0)*r00*sj5*x5857))+(((-1.0)*x5855*x5857))+((r02*x5851)));
evalcond[4]=((((-1.0)*x5853*x5857))+sj0+((r12*x5851))+(((-1.0)*r10*sj5*x5857)));
evalcond[5]=(((r10*x5856))+((r12*x5852))+((x5851*x5853))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5858=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x5858.valid){
continue;
}
CheckValue<IkReal> x5859 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5858.value)))+(x5859.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5860=IKcos(j4);
IkReal x5861=IKsin(j4);
IkReal x5862=(cj5*r11);
IkReal x5863=(cj5*r21);
IkReal x5864=(cj5*r01);
IkReal x5865=(sj5*x5860);
IkReal x5866=((1.0)*x5861);
evalcond[0]=(((x5860*x5863))+((r22*x5861))+((r20*x5865)));
evalcond[1]=(((x5860*x5864))+sj0+((r02*x5861))+((r00*x5865)));
evalcond[2]=((((-1.0)*r20*sj5*x5866))+((r22*x5860))+(((-1.0)*x5863*x5866)));
evalcond[3]=(cj0+((r02*x5860))+(((-1.0)*r00*sj5*x5866))+(((-1.0)*x5864*x5866)));
evalcond[4]=(sj0+(((-1.0)*r10*sj5*x5866))+(((-1.0)*x5862*x5866))+((r12*x5860)));
evalcond[5]=(((x5860*x5862))+((r12*x5861))+((r10*x5865))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5867 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5867.valid){
continue;
}
CheckValue<IkReal> x5868=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x5868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5867.value)+(((1.5707963267949)*(x5868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5869=IKcos(j4);
IkReal x5870=IKsin(j4);
IkReal x5871=(cj5*r11);
IkReal x5872=(cj5*r21);
IkReal x5873=(cj5*r01);
IkReal x5874=(sj5*x5869);
IkReal x5875=((1.0)*x5870);
evalcond[0]=(((r22*x5870))+((x5869*x5872))+((r20*x5874)));
evalcond[1]=(sj0+((x5869*x5873))+((r02*x5870))+((r00*x5874)));
evalcond[2]=((((-1.0)*r20*sj5*x5875))+((r22*x5869))+(((-1.0)*x5872*x5875)));
evalcond[3]=(cj0+(((-1.0)*x5873*x5875))+((r02*x5869))+(((-1.0)*r00*sj5*x5875)));
evalcond[4]=(sj0+(((-1.0)*r10*sj5*x5875))+(((-1.0)*x5871*x5875))+((r12*x5869)));
evalcond[5]=(((x5869*x5871))+((r12*x5870))+((r10*x5874))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.489292297647925)*py))+(((-2.09829334475201)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.09829334475201)*py))+(((0.489292297647925)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.489292297647925)*py))+(((-2.09829334475201)*px))))+IKsqr(((((2.09829334475201)*py))+(((0.489292297647925)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.489292297647925)*py))+(((-2.09829334475201)*px))), ((((2.09829334475201)*py))+(((0.489292297647925)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5876=IKcos(j0);
IkReal x5877=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.452)*x5877))+(((0.1054)*x5876)));
evalcond[1]=((((0.452)*x5876))+(((-1.0)*py))+(((0.1054)*x5877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5878=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x5878;
j4eval[1]=IKsign(x5878);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5879=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x5879;
j4eval[1]=IKsign(x5879);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5880=cj5*cj5;
IkReal x5881=(r00*r20);
IkReal x5882=(cj5*sj5);
IkReal x5883=((((-1.0)*x5880*x5881))+((r00*r21*x5882))+((r01*r21*x5880))+((r01*r20*x5882))+((r02*r22))+x5881);
j4eval[0]=x5883;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x5883);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5884=cj5*cj5;
IkReal x5885=(r00*r20);
IkReal x5886=(cj5*sj5);
CheckValue<IkReal> x5887 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5887.valid){
continue;
}
CheckValue<IkReal> x5888=IKPowWithIntegerCheck(IKsign((((r00*r21*x5886))+((r01*r21*x5884))+((r01*r20*x5886))+((r02*r22))+x5885+(((-1.0)*x5884*x5885)))),-1);
if(!x5888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5887.value)+(((1.5707963267949)*(x5888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5889=IKcos(j4);
IkReal x5890=IKsin(j4);
IkReal x5891=(sj5*x5889);
IkReal x5892=(cj5*x5889);
IkReal x5893=((1.0)*cj5*x5890);
IkReal x5894=((1.0)*sj5*x5890);
evalcond[0]=(((r22*x5890))+((r21*x5892))+((r20*x5891)));
evalcond[1]=(cj0+((r10*x5891))+((r12*x5890))+((r11*x5892)));
evalcond[2]=((((-1.0)*r20*x5894))+(((-1.0)*r21*x5893))+((r22*x5889)));
evalcond[3]=(cj0+(((-1.0)*r00*x5894))+(((-1.0)*r01*x5893))+((r02*x5889)));
evalcond[4]=(sj0+(((-1.0)*r11*x5893))+((r12*x5889))+(((-1.0)*r10*x5894)));
evalcond[5]=((((-1.0)*sj0))+((r02*x5890))+((r00*x5891))+((r01*x5892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5895 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5895.valid){
continue;
}
CheckValue<IkReal> x5896=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x5896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5895.value)+(((1.5707963267949)*(x5896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5897=IKcos(j4);
IkReal x5898=IKsin(j4);
IkReal x5899=(sj5*x5897);
IkReal x5900=(cj5*x5897);
IkReal x5901=((1.0)*cj5*x5898);
IkReal x5902=((1.0)*sj5*x5898);
evalcond[0]=(((r22*x5898))+((r20*x5899))+((r21*x5900)));
evalcond[1]=(cj0+((r10*x5899))+((r12*x5898))+((r11*x5900)));
evalcond[2]=(((r22*x5897))+(((-1.0)*r21*x5901))+(((-1.0)*r20*x5902)));
evalcond[3]=((((-1.0)*r01*x5901))+(((-1.0)*r00*x5902))+cj0+((r02*x5897)));
evalcond[4]=((((-1.0)*r11*x5901))+sj0+((r12*x5897))+(((-1.0)*r10*x5902)));
evalcond[5]=((((-1.0)*sj0))+((r02*x5898))+((r00*x5899))+((r01*x5900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5903=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x5903.valid){
continue;
}
CheckValue<IkReal> x5904 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5903.value)))+(x5904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5905=IKcos(j4);
IkReal x5906=IKsin(j4);
IkReal x5907=(sj5*x5905);
IkReal x5908=(cj5*x5905);
IkReal x5909=((1.0)*cj5*x5906);
IkReal x5910=((1.0)*sj5*x5906);
evalcond[0]=(((r22*x5906))+((r20*x5907))+((r21*x5908)));
evalcond[1]=(((r12*x5906))+cj0+((r10*x5907))+((r11*x5908)));
evalcond[2]=(((r22*x5905))+(((-1.0)*r21*x5909))+(((-1.0)*r20*x5910)));
evalcond[3]=((((-1.0)*r01*x5909))+(((-1.0)*r00*x5910))+cj0+((r02*x5905)));
evalcond[4]=(((r12*x5905))+(((-1.0)*r11*x5909))+sj0+(((-1.0)*r10*x5910)));
evalcond[5]=((((-1.0)*sj0))+((r00*x5907))+((r02*x5906))+((r01*x5908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.489292297647925)*py))+(((-2.09829334475201)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.09829334475201)*py))+(((0.489292297647925)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.489292297647925)*py))+(((-2.09829334475201)*px))))+IKsqr(((((2.09829334475201)*py))+(((0.489292297647925)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.489292297647925)*py))+(((-2.09829334475201)*px))), ((((2.09829334475201)*py))+(((0.489292297647925)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5911=IKcos(j0);
IkReal x5912=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.1054)*x5911))+(((-0.452)*x5912)));
evalcond[1]=((((0.452)*x5911))+(((-1.0)*py))+(((0.1054)*x5912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5913=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x5913;
j4eval[1]=IKsign(x5913);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5914=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x5914;
j4eval[1]=IKsign(x5914);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5915=cj5*cj5;
IkReal x5916=(r00*r20);
IkReal x5917=(cj5*sj5);
IkReal x5918=(((r01*r21*x5915))+((r00*r21*x5917))+(((-1.0)*x5915*x5916))+((r02*r22))+x5916+((r01*r20*x5917)));
j4eval[0]=x5918;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x5918);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5919=cj5*cj5;
IkReal x5920=(r00*r20);
IkReal x5921=(cj5*sj5);
CheckValue<IkReal> x5922=IKPowWithIntegerCheck(IKsign((((r01*r21*x5919))+((r00*r21*x5921))+((r01*r20*x5921))+((r02*r22))+x5920+(((-1.0)*x5919*x5920)))),-1);
if(!x5922.valid){
continue;
}
CheckValue<IkReal> x5923 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5922.value)))+(x5923.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5924=IKcos(j4);
IkReal x5925=IKsin(j4);
IkReal x5926=(cj5*r11);
IkReal x5927=(cj5*r21);
IkReal x5928=(cj5*r01);
IkReal x5929=(sj5*x5924);
IkReal x5930=((1.0)*x5925);
evalcond[0]=(((x5924*x5927))+((r20*x5929))+((r22*x5925)));
evalcond[1]=(((x5924*x5928))+sj0+((r00*x5929))+((r02*x5925)));
evalcond[2]=(((r22*x5924))+(((-1.0)*r20*sj5*x5930))+(((-1.0)*x5927*x5930)));
evalcond[3]=(cj0+(((-1.0)*x5928*x5930))+(((-1.0)*r00*sj5*x5930))+((r02*x5924)));
evalcond[4]=((((-1.0)*x5926*x5930))+sj0+(((-1.0)*r10*sj5*x5930))+((r12*x5924)));
evalcond[5]=(((x5924*x5926))+((r10*x5929))+((r12*x5925))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5931=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x5931.valid){
continue;
}
CheckValue<IkReal> x5932 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5931.value)))+(x5932.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5933=IKcos(j4);
IkReal x5934=IKsin(j4);
IkReal x5935=(cj5*r11);
IkReal x5936=(cj5*r21);
IkReal x5937=(cj5*r01);
IkReal x5938=(sj5*x5933);
IkReal x5939=((1.0)*x5934);
evalcond[0]=(((r20*x5938))+((x5933*x5936))+((r22*x5934)));
evalcond[1]=(sj0+((x5933*x5937))+((r00*x5938))+((r02*x5934)));
evalcond[2]=(((r22*x5933))+(((-1.0)*x5936*x5939))+(((-1.0)*r20*sj5*x5939)));
evalcond[3]=(cj0+(((-1.0)*r00*sj5*x5939))+(((-1.0)*x5937*x5939))+((r02*x5933)));
evalcond[4]=(sj0+(((-1.0)*r10*sj5*x5939))+((r12*x5933))+(((-1.0)*x5935*x5939)));
evalcond[5]=(((r10*x5938))+((x5933*x5935))+((r12*x5934))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5940 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5940.valid){
continue;
}
CheckValue<IkReal> x5941=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x5941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5940.value)+(((1.5707963267949)*(x5941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5942=IKcos(j4);
IkReal x5943=IKsin(j4);
IkReal x5944=(cj5*r11);
IkReal x5945=(cj5*r21);
IkReal x5946=(cj5*r01);
IkReal x5947=(sj5*x5942);
IkReal x5948=((1.0)*x5943);
evalcond[0]=(((x5942*x5945))+((r22*x5943))+((r20*x5947)));
evalcond[1]=(sj0+((x5942*x5946))+((r00*x5947))+((r02*x5943)));
evalcond[2]=((((-1.0)*x5945*x5948))+(((-1.0)*r20*sj5*x5948))+((r22*x5942)));
evalcond[3]=(cj0+(((-1.0)*x5946*x5948))+(((-1.0)*r00*sj5*x5948))+((r02*x5942)));
evalcond[4]=(sj0+(((-1.0)*x5944*x5948))+(((-1.0)*r10*sj5*x5948))+((r12*x5942)));
evalcond[5]=(((x5942*x5944))+((r10*x5947))+((r12*x5943))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5949=(r01*sj5);
IkReal x5950=(cj5*r00);
IkReal x5951=(cj1*sj2);
IkReal x5952=((5000.0)*px);
IkReal x5953=(cj2*sj1);
IkReal x5954=((2260.0)*sj1);
IkReal x5955=((1692.5)*x5951);
IkReal x5956=((1692.5)*x5953);
CheckValue<IkReal> x5957=IKPowWithIntegerCheck(((((-1.0)*x5951))+x5953),-1);
if(!x5957.valid){
continue;
}
CheckValue<IkReal> x5958=IKPowWithIntegerCheck(((((527.0)*x5953))+(((-527.0)*x5951))),-1);
if(!x5958.valid){
continue;
}
if( IKabs(((x5957.value)*(((((-1.0)*x5949))+x5950)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5958.value)*((((x5952*x5953))+((x5950*x5955))+((x5949*x5954))+((x5949*x5956))+(((-1.0)*x5950*x5954))+(((-1.0)*x5950*x5956))+(((-1.0)*x5949*x5955))+(((-1.0)*x5951*x5952)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5957.value)*(((((-1.0)*x5949))+x5950))))+IKsqr(((x5958.value)*((((x5952*x5953))+((x5950*x5955))+((x5949*x5954))+((x5949*x5956))+(((-1.0)*x5950*x5954))+(((-1.0)*x5950*x5956))+(((-1.0)*x5949*x5955))+(((-1.0)*x5951*x5952))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5957.value)*(((((-1.0)*x5949))+x5950))), ((x5958.value)*((((x5952*x5953))+((x5950*x5955))+((x5949*x5954))+((x5949*x5956))+(((-1.0)*x5950*x5954))+(((-1.0)*x5950*x5956))+(((-1.0)*x5949*x5955))+(((-1.0)*x5951*x5952))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5959=IKsin(j0);
IkReal x5960=IKcos(j0);
IkReal x5961=((1.0)*cj5);
IkReal x5962=(cj1*sj2);
IkReal x5963=((0.1135)*cj5);
IkReal x5964=(r11*sj5);
IkReal x5965=((0.452)*cj2);
IkReal x5966=(r01*sj5);
IkReal x5967=(sj1*x5960);
IkReal x5968=((0.452)*x5959);
IkReal x5969=(sj1*x5959);
evalcond[0]=((((-1.0)*r00*x5961))+(((-1.0)*x5959*x5962))+x5966+((cj2*x5969)));
evalcond[1]=((((-1.0)*cj2*x5967))+((x5960*x5962))+(((-1.0)*r10*x5961))+x5964);
evalcond[2]=((((0.1054)*x5960))+(((0.1135)*x5966))+((x5965*x5969))+(((-1.0)*px))+(((-1.0)*r00*x5963))+((sj1*x5968))+(((-1.0)*x5962*x5968)));
evalcond[3]=((((0.452)*x5960*x5962))+(((0.1135)*x5964))+(((-1.0)*py))+(((-1.0)*r10*x5963))+(((-0.452)*x5967))+(((0.1054)*x5959))+(((-1.0)*x5965*x5967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5970=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x5970;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x5970);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5971=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x5971;
j4eval[1]=IKsign(x5971);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x5972=((1.0)*sj0);
IkReal x5973=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x5973;
j4eval[1]=((IKabs((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x5972))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x5972)))))+(IKabs(((((-1.0)*r02*x5972))+((cj0*r12))))));
j4eval[2]=IKsign(x5973);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5974=((-1.0)*r21);
IkReal x5976 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5976)==0){
continue;
}
IkReal x5975=pow(x5976,-0.5);
CheckValue<IkReal> x5977 = IKatan2WithCheck(IkReal(r20),IkReal(x5974),IKFAST_ATAN2_MAGTHRESH);
if(!x5977.valid){
continue;
}
IkReal gconst132=((-1.0)*(x5977.value));
IkReal gconst133=((-1.0)*r20*x5975);
IkReal gconst134=(x5974*x5975);
CheckValue<IkReal> x5978 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5978.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5978.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5979=((-1.0)*r21);
CheckValue<IkReal> x5982 = IKatan2WithCheck(IkReal(r20),IkReal(x5979),IKFAST_ATAN2_MAGTHRESH);
if(!x5982.valid){
continue;
}
IkReal x5980=((-1.0)*(x5982.value));
IkReal x5981=x5975;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x5980;
IkReal gconst132=x5980;
IkReal gconst133=((-1.0)*r20*x5981);
IkReal gconst134=(x5979*x5981);
IkReal x5983=r22*r22;
IkReal x5984=((1.0)*x5983);
CheckValue<IkReal> x5988=IKPowWithIntegerCheck(((-1.0)+x5983),-1);
if(!x5988.valid){
continue;
}
IkReal x5985=x5988.value;
if((((1.0)+(((-1.0)*x5984)))) < -0.00001)
continue;
IkReal x5986=IKsqrt(((1.0)+(((-1.0)*x5984))));
IkReal x5987=(cj0*x5985*x5986);
j4eval[0]=((IKabs(((((-1.0)*x5984*x5987))+x5987)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5989=((-1.0)*r21);
CheckValue<IkReal> x5992 = IKatan2WithCheck(IkReal(r20),IkReal(x5989),IKFAST_ATAN2_MAGTHRESH);
if(!x5992.valid){
continue;
}
IkReal x5990=((-1.0)*(x5992.value));
IkReal x5991=x5975;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x5990;
IkReal gconst132=x5990;
IkReal gconst133=((-1.0)*r20*x5991);
IkReal gconst134=(x5989*x5991);
IkReal x5993=r22*r22;
IkReal x5994=((1.0)*x5993);
CheckValue<IkReal> x5998=IKPowWithIntegerCheck(((-1.0)+x5993),-1);
if(!x5998.valid){
continue;
}
IkReal x5995=x5998.value;
if((((1.0)+(((-1.0)*x5994)))) < -0.00001)
continue;
IkReal x5996=IKsqrt(((1.0)+(((-1.0)*x5994))));
IkReal x5997=(sj0*x5995*x5996);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x5994*x5997))+x5997))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5999=((-1.0)*r21);
CheckValue<IkReal> x6002 = IKatan2WithCheck(IkReal(r20),IkReal(x5999),IKFAST_ATAN2_MAGTHRESH);
if(!x6002.valid){
continue;
}
IkReal x6000=((-1.0)*(x6002.value));
IkReal x6001=x5975;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x6000;
IkReal gconst132=x6000;
IkReal gconst133=((-1.0)*r20*x6001);
IkReal gconst134=(x5999*x6001);
IkReal x6003=((1.0)*(r22*r22));
CheckValue<IkReal> x6007=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6003))),-1);
if(!x6007.valid){
continue;
}
IkReal x6004=x6007.value;
IkReal x6005=((1.0)*x6004);
IkReal x6006=((((-1.0)*x6005*(r20*r20*r20*r20)))+(((-1.0)*x6003))+(((-2.0)*x6004*(r20*r20)*(r21*r21)))+(((-1.0)*x6005*(r21*r21*r21*r21))));
j4eval[0]=x6006;
j4eval[1]=IKsign(x6006);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6008=(gconst133*r20);
IkReal x6009=(gconst134*r21);
IkReal x6010=(cj1*sj2);
IkReal x6011=((1.0)*cj2*sj1);
CheckValue<IkReal> x6012 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6011))+((r22*x6010)))),IkReal((((x6008*x6010))+(((-1.0)*x6008*x6011))+((x6009*x6010))+(((-1.0)*x6009*x6011)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6012.valid){
continue;
}
CheckValue<IkReal> x6013=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6008*x6009))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6009*x6009)))+(((-1.0)*(x6008*x6008))))),-1);
if(!x6013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6012.value)+(((1.5707963267949)*(x6013.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6014=IKsin(j4);
IkReal x6015=IKcos(j4);
IkReal x6016=(cj1*cj2);
IkReal x6017=(gconst134*r11);
IkReal x6018=(gconst133*r00);
IkReal x6019=((1.0)*sj1);
IkReal x6020=(gconst134*r21);
IkReal x6021=(gconst134*r01);
IkReal x6022=(gconst133*r10);
IkReal x6023=(gconst133*r20);
IkReal x6024=((1.0)*x6014);
evalcond[0]=((((-1.0)*x6023*x6024))+(((-1.0)*x6020*x6024))+((r22*x6015)));
evalcond[1]=(cj0+(((-1.0)*x6021*x6024))+((r02*x6015))+(((-1.0)*x6018*x6024)));
evalcond[2]=(sj0+((r12*x6015))+(((-1.0)*x6017*x6024))+(((-1.0)*x6022*x6024)));
evalcond[3]=((((-1.0)*cj2*x6019))+((cj1*sj2))+((r22*x6014))+((x6015*x6020))+((x6015*x6023)));
evalcond[4]=(((r02*x6014))+((x6015*x6018))+((sj0*x6016))+((sj0*sj1*sj2))+((x6015*x6021)));
evalcond[5]=((((-1.0)*cj0*sj2*x6019))+((r12*x6014))+((x6015*x6017))+((x6015*x6022))+(((-1.0)*cj0*x6016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6025=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r01))+((gconst134*r00)))),-1);
if(!x6025.valid){
continue;
}
CheckValue<IkReal> x6026 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst133*r20*sj0))+((gconst134*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6025.value)))+(x6026.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6027=IKsin(j4);
IkReal x6028=IKcos(j4);
IkReal x6029=(cj1*cj2);
IkReal x6030=(gconst134*r11);
IkReal x6031=(gconst133*r00);
IkReal x6032=((1.0)*sj1);
IkReal x6033=(gconst134*r21);
IkReal x6034=(gconst134*r01);
IkReal x6035=(gconst133*r10);
IkReal x6036=(gconst133*r20);
IkReal x6037=((1.0)*x6027);
evalcond[0]=((((-1.0)*x6036*x6037))+((r22*x6028))+(((-1.0)*x6033*x6037)));
evalcond[1]=(((r02*x6028))+cj0+(((-1.0)*x6031*x6037))+(((-1.0)*x6034*x6037)));
evalcond[2]=(sj0+(((-1.0)*x6035*x6037))+((r12*x6028))+(((-1.0)*x6030*x6037)));
evalcond[3]=(((x6028*x6033))+((x6028*x6036))+((cj1*sj2))+(((-1.0)*cj2*x6032))+((r22*x6027)));
evalcond[4]=(((sj0*x6029))+((x6028*x6034))+((x6028*x6031))+((r02*x6027))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*cj0*sj2*x6032))+((x6028*x6035))+((x6028*x6030))+(((-1.0)*cj0*x6029))+((r12*x6027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6038 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst134*r21))+((cj0*gconst133*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6038.valid){
continue;
}
CheckValue<IkReal> x6039=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst134*r10))+((gconst133*r11)))),-1);
if(!x6039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6038.value)+(((1.5707963267949)*(x6039.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6040=IKsin(j4);
IkReal x6041=IKcos(j4);
IkReal x6042=(cj1*cj2);
IkReal x6043=(gconst134*r11);
IkReal x6044=(gconst133*r00);
IkReal x6045=((1.0)*sj1);
IkReal x6046=(gconst134*r21);
IkReal x6047=(gconst134*r01);
IkReal x6048=(gconst133*r10);
IkReal x6049=(gconst133*r20);
IkReal x6050=((1.0)*x6040);
evalcond[0]=((((-1.0)*x6046*x6050))+((r22*x6041))+(((-1.0)*x6049*x6050)));
evalcond[1]=(cj0+(((-1.0)*x6047*x6050))+(((-1.0)*x6044*x6050))+((r02*x6041)));
evalcond[2]=(sj0+(((-1.0)*x6048*x6050))+(((-1.0)*x6043*x6050))+((r12*x6041)));
evalcond[3]=(((x6041*x6046))+((x6041*x6049))+(((-1.0)*cj2*x6045))+((cj1*sj2))+((r22*x6040)));
evalcond[4]=(((x6041*x6047))+((x6041*x6044))+((sj0*x6042))+((sj0*sj1*sj2))+((r02*x6040)));
evalcond[5]=(((x6041*x6043))+((x6041*x6048))+((r12*x6040))+(((-1.0)*cj0*x6042))+(((-1.0)*cj0*sj2*x6045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6053 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6053)==0){
continue;
}
IkReal x6051=pow(x6053,-0.5);
IkReal x6052=((1.0)*x6051);
CheckValue<IkReal> x6054 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6054.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x6054.value))));
IkReal gconst136=(r20*x6052);
IkReal gconst137=(r21*x6052);
CheckValue<IkReal> x6055 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6055.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6055.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x6059 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6059.valid){
continue;
}
IkReal x6056=((1.0)*(x6059.value));
IkReal x6057=x6051;
IkReal x6058=((1.0)*x6057);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6056)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6056)));
IkReal gconst136=(r20*x6058);
IkReal gconst137=(r21*x6058);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6063 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6063.valid){
continue;
}
IkReal x6060=((1.0)*(x6063.value));
IkReal x6061=x6051;
IkReal x6062=((1.0)*x6061);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6060)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6060)));
IkReal gconst136=(r20*x6062);
IkReal gconst137=(r21*x6062);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6067 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6067.valid){
continue;
}
IkReal x6064=((1.0)*(x6067.value));
IkReal x6065=x6051;
IkReal x6066=((1.0)*x6065);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6064)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6064)));
IkReal gconst136=(r20*x6066);
IkReal gconst137=(r21*x6066);
IkReal x6068=r22*r22;
IkReal x6069=(cj0*r12);
IkReal x6070=((1.0)*r02*sj0);
CheckValue<IkReal> x6074=IKPowWithIntegerCheck(((-1.0)+x6068),-1);
if(!x6074.valid){
continue;
}
IkReal x6071=x6074.value;
if((((1.0)+(((-1.0)*x6068)))) < -0.00001)
continue;
IkReal x6072=IKsqrt(((1.0)+(((-1.0)*x6068))));
IkReal x6073=(r22*x6071*x6072);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x6069+(((-1.0)*x6070)))))+(IKabs((((x6069*x6073))+(((-1.0)*x6070*x6073))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6075=((1.0)*sj0);
CheckValue<IkReal> x6076=IKPowWithIntegerCheck(IKsign((((gconst137*r20))+(((-1.0)*gconst136*r21)))),-1);
if(!x6076.valid){
continue;
}
CheckValue<IkReal> x6077 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6075))+((cj0*r12)))),IkReal(((((-1.0)*gconst136*r00*x6075))+(((-1.0)*gconst137*r01*x6075))+((cj0*gconst136*r10))+((cj0*gconst137*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6076.value)))+(x6077.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6078=IKsin(j4);
IkReal x6079=IKcos(j4);
IkReal x6080=(gconst136*r10);
IkReal x6081=(cj1*cj2);
IkReal x6082=(gconst136*r00);
IkReal x6083=((1.0)*sj1);
IkReal x6084=(gconst136*r20);
IkReal x6085=((1.0)*x6078);
IkReal x6086=(gconst137*x6079);
evalcond[0]=(((r22*x6079))+(((-1.0)*x6084*x6085))+(((-1.0)*gconst137*r21*x6085)));
evalcond[1]=((((-1.0)*gconst137*r01*x6085))+cj0+(((-1.0)*x6082*x6085))+((r02*x6079)));
evalcond[2]=((((-1.0)*x6080*x6085))+sj0+(((-1.0)*gconst137*r11*x6085))+((r12*x6079)));
evalcond[3]=(((cj1*sj2))+((r22*x6078))+((x6079*x6084))+((r21*x6086))+(((-1.0)*cj2*x6083)));
evalcond[4]=(((sj0*x6081))+((r01*x6086))+((x6079*x6082))+((sj0*sj1*sj2))+((r02*x6078)));
evalcond[5]=((((-1.0)*cj0*x6081))+((x6079*x6080))+(((-1.0)*cj0*sj2*x6083))+((r11*x6086))+((r12*x6078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6087=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r01))+((gconst137*r00)))),-1);
if(!x6087.valid){
continue;
}
CheckValue<IkReal> x6088 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r20*sj0))+((gconst137*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6087.value)))+(x6088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6089=IKsin(j4);
IkReal x6090=IKcos(j4);
IkReal x6091=(gconst136*r10);
IkReal x6092=(cj1*cj2);
IkReal x6093=(gconst136*r00);
IkReal x6094=((1.0)*sj1);
IkReal x6095=(gconst136*r20);
IkReal x6096=((1.0)*x6089);
IkReal x6097=(gconst137*x6090);
evalcond[0]=((((-1.0)*gconst137*r21*x6096))+(((-1.0)*x6095*x6096))+((r22*x6090)));
evalcond[1]=(cj0+(((-1.0)*x6093*x6096))+(((-1.0)*gconst137*r01*x6096))+((r02*x6090)));
evalcond[2]=(sj0+(((-1.0)*x6091*x6096))+((r12*x6090))+(((-1.0)*gconst137*r11*x6096)));
evalcond[3]=(((x6090*x6095))+((cj1*sj2))+((r21*x6097))+((r22*x6089))+(((-1.0)*cj2*x6094)));
evalcond[4]=(((x6090*x6093))+((sj0*x6092))+((r01*x6097))+((sj0*sj1*sj2))+((r02*x6089)));
evalcond[5]=(((x6090*x6091))+(((-1.0)*cj0*x6092))+((r12*x6089))+((r11*x6097))+(((-1.0)*cj0*sj2*x6094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6098 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r20))+((cj0*gconst137*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6098.valid){
continue;
}
CheckValue<IkReal> x6099=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r10))+((gconst136*r11)))),-1);
if(!x6099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6098.value)+(((1.5707963267949)*(x6099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6100=IKsin(j4);
IkReal x6101=IKcos(j4);
IkReal x6102=(gconst136*r10);
IkReal x6103=(cj1*cj2);
IkReal x6104=(gconst136*r00);
IkReal x6105=((1.0)*sj1);
IkReal x6106=(gconst136*r20);
IkReal x6107=((1.0)*x6100);
IkReal x6108=(gconst137*x6101);
evalcond[0]=(((r22*x6101))+(((-1.0)*gconst137*r21*x6107))+(((-1.0)*x6106*x6107)));
evalcond[1]=((((-1.0)*x6104*x6107))+cj0+(((-1.0)*gconst137*r01*x6107))+((r02*x6101)));
evalcond[2]=(sj0+(((-1.0)*gconst137*r11*x6107))+(((-1.0)*x6102*x6107))+((r12*x6101)));
evalcond[3]=(((r22*x6100))+((r21*x6108))+((x6101*x6106))+((cj1*sj2))+(((-1.0)*cj2*x6105)));
evalcond[4]=(((sj0*x6103))+((x6101*x6104))+((r02*x6100))+((sj0*sj1*sj2))+((r01*x6108)));
evalcond[5]=(((r11*x6108))+((x6101*x6102))+(((-1.0)*cj0*sj2*x6105))+(((-1.0)*cj0*x6103))+((r12*x6100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6111 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6111)==0){
continue;
}
IkReal x6109=pow(x6111,-0.5);
IkReal x6110=((-1.0)*x6109);
CheckValue<IkReal> x6112 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x6112.valid){
continue;
}
IkReal gconst138=((-1.0)*(x6112.value));
IkReal gconst139=(r00*x6110);
IkReal gconst140=(r01*x6110);
CheckValue<IkReal> x6113 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x6113.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6113.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6117 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x6117.valid){
continue;
}
IkReal x6114=((-1.0)*(x6117.value));
IkReal x6115=x6109;
IkReal x6116=((-1.0)*x6115);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x6114;
IkReal gconst138=x6114;
IkReal gconst139=(r00*x6116);
IkReal gconst140=(r01*x6116);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6118=((1.0)*sj0);
CheckValue<IkReal> x6119=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r21))+((gconst140*r20)))),-1);
if(!x6119.valid){
continue;
}
CheckValue<IkReal> x6120 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6118))+((cj0*r12)))),IkReal(((((-1.0)*gconst140*r01*x6118))+(((-1.0)*gconst139*r00*x6118))+((cj0*gconst139*r10))+((cj0*gconst140*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6119.value)))+(x6120.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6121=IKsin(j4);
IkReal x6122=IKcos(j4);
IkReal x6123=(cj1*cj2);
IkReal x6124=(gconst140*r11);
IkReal x6125=((1.0)*sj1);
IkReal x6126=(gconst140*r21);
IkReal x6127=(gconst140*r01);
IkReal x6128=((1.0)*x6121);
IkReal x6129=(gconst139*x6122);
evalcond[0]=((((-1.0)*x6126*x6128))+(((-1.0)*gconst139*r20*x6128))+((r22*x6122)));
evalcond[1]=(cj0+(((-1.0)*gconst139*r00*x6128))+(((-1.0)*x6127*x6128))+((r02*x6122)));
evalcond[2]=(((r12*x6122))+sj0+(((-1.0)*x6124*x6128))+(((-1.0)*gconst139*r10*x6128)));
evalcond[3]=((((-1.0)*cj2*x6125))+((cj1*sj2))+((r20*x6129))+((x6122*x6126))+((r22*x6121)));
evalcond[4]=(((sj0*x6123))+((x6122*x6127))+((r02*x6121))+((sj0*sj1*sj2))+((r00*x6129)));
evalcond[5]=((((-1.0)*cj0*x6123))+((r12*x6121))+((x6122*x6124))+(((-1.0)*cj0*sj2*x6125))+((r10*x6129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6130 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst140*r21))+((cj0*gconst139*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6130.valid){
continue;
}
CheckValue<IkReal> x6131=IKPowWithIntegerCheck(IKsign((((gconst139*r11))+(((-1.0)*gconst140*r10)))),-1);
if(!x6131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6130.value)+(((1.5707963267949)*(x6131.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6132=IKsin(j4);
IkReal x6133=IKcos(j4);
IkReal x6134=(cj1*cj2);
IkReal x6135=(gconst140*r11);
IkReal x6136=((1.0)*sj1);
IkReal x6137=(gconst140*r21);
IkReal x6138=(gconst140*r01);
IkReal x6139=((1.0)*x6132);
IkReal x6140=(gconst139*x6133);
evalcond[0]=((((-1.0)*x6137*x6139))+((r22*x6133))+(((-1.0)*gconst139*r20*x6139)));
evalcond[1]=(cj0+(((-1.0)*gconst139*r00*x6139))+((r02*x6133))+(((-1.0)*x6138*x6139)));
evalcond[2]=(sj0+(((-1.0)*gconst139*r10*x6139))+((r12*x6133))+(((-1.0)*x6135*x6139)));
evalcond[3]=(((r22*x6132))+((cj1*sj2))+(((-1.0)*cj2*x6136))+((x6133*x6137))+((r20*x6140)));
evalcond[4]=(((x6133*x6138))+((r00*x6140))+((r02*x6132))+((sj0*sj1*sj2))+((sj0*x6134)));
evalcond[5]=(((r10*x6140))+(((-1.0)*cj0*sj2*x6136))+((x6133*x6135))+(((-1.0)*cj0*x6134))+((r12*x6132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6143 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6143)==0){
continue;
}
IkReal x6141=pow(x6143,-0.5);
IkReal x6142=((1.0)*x6141);
CheckValue<IkReal> x6144 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x6144.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x6144.value))));
IkReal gconst142=(r00*x6142);
IkReal gconst143=(r01*x6142);
CheckValue<IkReal> x6145 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x6145.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6145.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6149 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x6149.valid){
continue;
}
IkReal x6146=((1.0)*(x6149.value));
IkReal x6147=x6141;
IkReal x6148=((1.0)*x6147);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6146)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6146)));
IkReal gconst142=(r00*x6148);
IkReal gconst143=(r01*x6148);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x6153 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x6153.valid){
continue;
}
IkReal x6150=((1.0)*(x6153.value));
IkReal x6151=x6141;
IkReal x6152=((1.0)*x6151);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6150)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6150)));
IkReal gconst142=(r00*x6152);
IkReal gconst143=(r01*x6152);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6157 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x6157.valid){
continue;
}
IkReal x6154=((1.0)*(x6157.value));
IkReal x6155=x6141;
IkReal x6156=((1.0)*x6155);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6154)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6154)));
IkReal gconst142=(r00*x6156);
IkReal gconst143=(r01*x6156);
IkReal x6158=r02*r02;
IkReal x6159=((1.0)*sj0);
IkReal x6160=(cj0*r12);
CheckValue<IkReal> x6164=IKPowWithIntegerCheck(((-1.0)+x6158),-1);
if(!x6164.valid){
continue;
}
IkReal x6161=x6164.value;
if((((1.0)+(((-1.0)*x6158)))) < -0.00001)
continue;
IkReal x6162=IKsqrt(((1.0)+(((-1.0)*x6158))));
IkReal x6163=(x6161*x6162);
j4eval[0]=((IKabs((((r02*x6160*x6163))+(((-1.0)*x6158*x6159*x6163))+((sj0*x6163)))))+(IKabs(((((-1.0)*r02*x6159))+x6160))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6165=((1.0)*sj0);
CheckValue<IkReal> x6166=IKPowWithIntegerCheck(IKsign((((gconst143*r20))+(((-1.0)*gconst142*r21)))),-1);
if(!x6166.valid){
continue;
}
CheckValue<IkReal> x6167 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6165))+((cj0*r12)))),IkReal(((((-1.0)*gconst143*r01*x6165))+((cj0*gconst143*r11))+((cj0*gconst142*r10))+(((-1.0)*gconst142*r00*x6165)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6166.value)))+(x6167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6168=IKsin(j4);
IkReal x6169=IKcos(j4);
IkReal x6170=(cj1*cj2);
IkReal x6171=(gconst143*r11);
IkReal x6172=((1.0)*sj1);
IkReal x6173=(gconst142*x6169);
IkReal x6174=((1.0)*x6168);
IkReal x6175=(gconst143*x6169);
evalcond[0]=((((-1.0)*gconst143*r21*x6174))+((r22*x6169))+(((-1.0)*gconst142*r20*x6174)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r01*x6174))+((r02*x6169))+(((-1.0)*gconst142*r00*x6174)));
evalcond[2]=(sj0+((r12*x6169))+(((-1.0)*gconst142*r10*x6174))+(((-1.0)*x6171*x6174)));
evalcond[3]=(((r20*x6173))+((cj1*sj2))+((r21*x6175))+(((-1.0)*cj2*x6172))+((r22*x6168)));
evalcond[4]=(((sj0*x6170))+((r02*x6168))+((r00*x6173))+((r01*x6175))+((sj0*sj1*sj2)));
evalcond[5]=(((r10*x6173))+((r12*x6168))+(((-1.0)*cj0*x6170))+(((-1.0)*cj0*sj2*x6172))+((x6169*x6171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6176 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst142*r20*sj0))+((gconst143*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6176.valid){
continue;
}
CheckValue<IkReal> x6177=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r01))+((gconst143*r00)))),-1);
if(!x6177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6176.value)+(((1.5707963267949)*(x6177.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6178=IKsin(j4);
IkReal x6179=IKcos(j4);
IkReal x6180=(cj1*cj2);
IkReal x6181=(gconst143*r11);
IkReal x6182=((1.0)*sj1);
IkReal x6183=(gconst142*x6179);
IkReal x6184=((1.0)*x6178);
IkReal x6185=(gconst143*x6179);
evalcond[0]=((((-1.0)*gconst142*r20*x6184))+(((-1.0)*gconst143*r21*x6184))+((r22*x6179)));
evalcond[1]=(cj0+(((-1.0)*gconst142*r00*x6184))+((r02*x6179))+(((-1.0)*gconst143*r01*x6184)));
evalcond[2]=(sj0+((r12*x6179))+(((-1.0)*gconst142*r10*x6184))+(((-1.0)*x6181*x6184)));
evalcond[3]=(((r21*x6185))+((cj1*sj2))+((r20*x6183))+((r22*x6178))+(((-1.0)*cj2*x6182)));
evalcond[4]=(((r00*x6183))+((r01*x6185))+((r02*x6178))+((sj0*sj1*sj2))+((sj0*x6180)));
evalcond[5]=((((-1.0)*cj0*sj2*x6182))+((r12*x6178))+(((-1.0)*cj0*x6180))+((x6179*x6181))+((r10*x6183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6186 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst142*r20))+((cj0*gconst143*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6186.valid){
continue;
}
CheckValue<IkReal> x6187=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r10))+((gconst142*r11)))),-1);
if(!x6187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6186.value)+(((1.5707963267949)*(x6187.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6188=IKsin(j4);
IkReal x6189=IKcos(j4);
IkReal x6190=(cj1*cj2);
IkReal x6191=(gconst143*r11);
IkReal x6192=((1.0)*sj1);
IkReal x6193=(gconst142*x6189);
IkReal x6194=((1.0)*x6188);
IkReal x6195=(gconst143*x6189);
evalcond[0]=((((-1.0)*gconst142*r20*x6194))+((r22*x6189))+(((-1.0)*gconst143*r21*x6194)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r01*x6194))+((r02*x6189))+(((-1.0)*gconst142*r00*x6194)));
evalcond[2]=(sj0+(((-1.0)*gconst142*r10*x6194))+(((-1.0)*x6191*x6194))+((r12*x6189)));
evalcond[3]=(((r20*x6193))+((r22*x6188))+((cj1*sj2))+((r21*x6195))+(((-1.0)*cj2*x6192)));
evalcond[4]=(((sj0*x6190))+((sj0*sj1*sj2))+((r02*x6188))+((r00*x6193))+((r01*x6195)));
evalcond[5]=(((r10*x6193))+(((-1.0)*cj0*x6190))+(((-1.0)*cj0*sj2*x6192))+((x6189*x6191))+((r12*x6188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6196=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x6196;
j4eval[1]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6196);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6197=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x6197;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x6197);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6198=cj5*cj5;
IkReal x6199=r00*r00;
IkReal x6200=(r00*sj5);
IkReal x6201=(cj5*r01);
IkReal x6202=(x6199+(((2.0)*x6200*x6201))+(((-1.0)*x6198*x6199))+((x6198*(r01*r01)))+(r02*r02));
j4eval[0]=x6202;
j4eval[1]=((IKabs(r02))+(IKabs((x6200+x6201))));
j4eval[2]=IKsign(x6202);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6203=cj5*cj5;
IkReal x6204=r00*r00;
IkReal x6205=(r00*sj5);
IkReal x6206=(cj5*r01);
CheckValue<IkReal> x6207=IKPowWithIntegerCheck(IKsign((x6204+(((2.0)*x6205*x6206))+(((-1.0)*x6203*x6204))+(r02*r02)+((x6203*(r01*r01))))),-1);
if(!x6207.valid){
continue;
}
CheckValue<IkReal> x6208 = IKatan2WithCheck(IkReal((x6205+x6206)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6207.value)))+(x6208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6209=IKcos(j4);
IkReal x6210=IKsin(j4);
IkReal x6211=(r00*sj5);
IkReal x6212=(cj5*r01);
IkReal x6213=((1.0)*cj2);
IkReal x6214=(r20*sj5);
IkReal x6215=(cj5*r21);
IkReal x6216=(cj5*r11);
IkReal x6217=(r10*sj5);
IkReal x6218=((1.0)*x6210);
evalcond[0]=(((r02*x6210))+((x6209*x6211))+((x6209*x6212)));
evalcond[1]=(((r22*x6209))+(((-1.0)*x6215*x6218))+(((-1.0)*x6214*x6218)));
evalcond[2]=((((-1.0)*x6216*x6218))+(((-1.0)*x6217*x6218))+((r12*x6209)));
evalcond[3]=((1.0)+((r02*x6209))+(((-1.0)*x6212*x6218))+(((-1.0)*x6211*x6218)));
evalcond[4]=((((-1.0)*sj1*x6213))+((cj1*sj2))+((x6209*x6215))+((x6209*x6214))+((r22*x6210)));
evalcond[5]=(((r12*x6210))+(((-1.0)*sj1*sj2))+((x6209*x6217))+((x6209*x6216))+(((-1.0)*cj1*x6213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6219 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6219.valid){
continue;
}
CheckValue<IkReal> x6220=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x6220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6219.value)+(((1.5707963267949)*(x6220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6221=IKcos(j4);
IkReal x6222=IKsin(j4);
IkReal x6223=(r00*sj5);
IkReal x6224=(cj5*r01);
IkReal x6225=((1.0)*cj2);
IkReal x6226=(r20*sj5);
IkReal x6227=(cj5*r21);
IkReal x6228=(cj5*r11);
IkReal x6229=(r10*sj5);
IkReal x6230=((1.0)*x6222);
evalcond[0]=(((r02*x6222))+((x6221*x6224))+((x6221*x6223)));
evalcond[1]=((((-1.0)*x6226*x6230))+((r22*x6221))+(((-1.0)*x6227*x6230)));
evalcond[2]=((((-1.0)*x6228*x6230))+(((-1.0)*x6229*x6230))+((r12*x6221)));
evalcond[3]=((1.0)+(((-1.0)*x6224*x6230))+((r02*x6221))+(((-1.0)*x6223*x6230)));
evalcond[4]=((((-1.0)*sj1*x6225))+((cj1*sj2))+((r22*x6222))+((x6221*x6227))+((x6221*x6226)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*cj1*x6225))+((x6221*x6229))+((x6221*x6228))+((r12*x6222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6231 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6231.valid){
continue;
}
CheckValue<IkReal> x6232=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x6232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6231.value)+(((1.5707963267949)*(x6232.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6233=IKcos(j4);
IkReal x6234=IKsin(j4);
IkReal x6235=(r00*sj5);
IkReal x6236=(cj5*r01);
IkReal x6237=((1.0)*cj2);
IkReal x6238=(r20*sj5);
IkReal x6239=(cj5*r21);
IkReal x6240=(cj5*r11);
IkReal x6241=(r10*sj5);
IkReal x6242=((1.0)*x6234);
evalcond[0]=(((x6233*x6235))+((x6233*x6236))+((r02*x6234)));
evalcond[1]=((((-1.0)*x6238*x6242))+(((-1.0)*x6239*x6242))+((r22*x6233)));
evalcond[2]=(((r12*x6233))+(((-1.0)*x6240*x6242))+(((-1.0)*x6241*x6242)));
evalcond[3]=((1.0)+((r02*x6233))+(((-1.0)*x6236*x6242))+(((-1.0)*x6235*x6242)));
evalcond[4]=(((x6233*x6239))+((x6233*x6238))+(((-1.0)*sj1*x6237))+((cj1*sj2))+((r22*x6234)));
evalcond[5]=(((r12*x6234))+(((-1.0)*sj1*sj2))+(((-1.0)*cj1*x6237))+((x6233*x6240))+((x6233*x6241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6243=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x6243;
j4eval[1]=IKsign(x6243);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6244=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x6244;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x6244);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6245=(sj1*sj2);
IkReal x6246=((1.0)*r02);
IkReal x6247=(cj1*cj2);
IkReal x6248=(r00*sj5);
IkReal x6249=(cj5*r01);
IkReal x6250=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x6250;
j4eval[1]=((IKabs((((x6245*x6248))+((x6245*x6249))+((x6247*x6248))+((x6247*x6249)))))+(IKabs(((((-1.0)*x6245*x6246))+(((-1.0)*x6246*x6247))))));
j4eval[2]=IKsign(x6250);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6251=(sj1*sj2);
IkReal x6252=((1.0)*r02);
IkReal x6253=(cj1*cj2);
IkReal x6254=(r00*sj5);
IkReal x6255=(cj5*r01);
CheckValue<IkReal> x6256 = IKatan2WithCheck(IkReal((((x6251*x6254))+((x6251*x6255))+((x6253*x6255))+((x6253*x6254)))),IkReal(((((-1.0)*x6252*x6253))+(((-1.0)*x6251*x6252)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6256.valid){
continue;
}
CheckValue<IkReal> x6257=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x6257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6256.value)+(((1.5707963267949)*(x6257.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6258=IKcos(j4);
IkReal x6259=IKsin(j4);
IkReal x6260=(r00*sj5);
IkReal x6261=(cj5*r01);
IkReal x6262=(r20*sj5);
IkReal x6263=(cj5*r21);
IkReal x6264=(cj5*r11);
IkReal x6265=(r10*sj5);
IkReal x6266=((1.0)*x6259);
evalcond[0]=(((x6258*x6260))+((x6258*x6261))+((r02*x6259)));
evalcond[1]=(((r22*x6258))+(((-1.0)*x6263*x6266))+(((-1.0)*x6262*x6266)));
evalcond[2]=((((-1.0)*x6265*x6266))+((r12*x6258))+(((-1.0)*x6264*x6266)));
evalcond[3]=((-1.0)+(((-1.0)*x6261*x6266))+(((-1.0)*x6260*x6266))+((r02*x6258)));
evalcond[4]=(((sj1*sj2))+((x6258*x6265))+((x6258*x6264))+((cj1*cj2))+((r12*x6259)));
evalcond[5]=(((r22*x6259))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x6258*x6262))+((x6258*x6263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6267 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6267.valid){
continue;
}
CheckValue<IkReal> x6268=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x6268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6267.value)+(((1.5707963267949)*(x6268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6269=IKcos(j4);
IkReal x6270=IKsin(j4);
IkReal x6271=(r00*sj5);
IkReal x6272=(cj5*r01);
IkReal x6273=(r20*sj5);
IkReal x6274=(cj5*r21);
IkReal x6275=(cj5*r11);
IkReal x6276=(r10*sj5);
IkReal x6277=((1.0)*x6270);
evalcond[0]=(((x6269*x6271))+((x6269*x6272))+((r02*x6270)));
evalcond[1]=((((-1.0)*x6274*x6277))+(((-1.0)*x6273*x6277))+((r22*x6269)));
evalcond[2]=((((-1.0)*x6275*x6277))+(((-1.0)*x6276*x6277))+((r12*x6269)));
evalcond[3]=((-1.0)+(((-1.0)*x6272*x6277))+(((-1.0)*x6271*x6277))+((r02*x6269)));
evalcond[4]=(((r12*x6270))+((sj1*sj2))+((x6269*x6276))+((x6269*x6275))+((cj1*cj2)));
evalcond[5]=(((r22*x6270))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x6269*x6274))+((x6269*x6273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6278 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6278.valid){
continue;
}
CheckValue<IkReal> x6279=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x6279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6278.value)+(((1.5707963267949)*(x6279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6280=IKcos(j4);
IkReal x6281=IKsin(j4);
IkReal x6282=(r00*sj5);
IkReal x6283=(cj5*r01);
IkReal x6284=(r20*sj5);
IkReal x6285=(cj5*r21);
IkReal x6286=(cj5*r11);
IkReal x6287=(r10*sj5);
IkReal x6288=((1.0)*x6281);
evalcond[0]=(((r02*x6281))+((x6280*x6283))+((x6280*x6282)));
evalcond[1]=((((-1.0)*x6284*x6288))+(((-1.0)*x6285*x6288))+((r22*x6280)));
evalcond[2]=(((r12*x6280))+(((-1.0)*x6286*x6288))+(((-1.0)*x6287*x6288)));
evalcond[3]=((-1.0)+(((-1.0)*x6282*x6288))+(((-1.0)*x6283*x6288))+((r02*x6280)));
evalcond[4]=(((sj1*sj2))+((r12*x6281))+((cj1*cj2))+((x6280*x6287))+((x6280*x6286)));
evalcond[5]=(((r22*x6281))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x6280*x6285))+((x6280*x6284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6290 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6290)==0){
continue;
}
IkReal x6289=pow(x6290,-0.5);
CheckValue<IkReal> x6291 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6291.valid){
continue;
}
IkReal gconst144=((-1.0)*(x6291.value));
IkReal gconst145=(r10*x6289);
IkReal gconst146=(r11*x6289);
CheckValue<IkReal> x6292 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6292.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6292.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6295 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6295.valid){
continue;
}
IkReal x6293=((-1.0)*(x6295.value));
IkReal x6294=x6289;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x6293;
IkReal gconst144=x6293;
IkReal gconst145=(r10*x6294);
IkReal gconst146=(r11*x6294);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6296=((1.0)*sj0);
CheckValue<IkReal> x6297 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6296))+((cj0*r12)))),IkReal(((((-1.0)*gconst145*r00*x6296))+((cj0*gconst146*r11))+((cj0*gconst145*r10))+(((-1.0)*gconst146*r01*x6296)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6297.valid){
continue;
}
CheckValue<IkReal> x6298=IKPowWithIntegerCheck(IKsign((((gconst146*r20))+(((-1.0)*gconst145*r21)))),-1);
if(!x6298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6297.value)+(((1.5707963267949)*(x6298.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6299=IKsin(j4);
IkReal x6300=IKcos(j4);
IkReal x6301=(cj1*cj2);
IkReal x6302=(gconst146*r11);
IkReal x6303=((1.0)*cj0);
IkReal x6304=(sj1*sj2);
IkReal x6305=(gconst146*r01);
IkReal x6306=(gconst146*r21);
IkReal x6307=(gconst145*x6300);
IkReal x6308=((1.0)*x6299);
IkReal x6309=(gconst145*x6308);
evalcond[0]=(((r22*x6300))+(((-1.0)*r20*x6309))+(((-1.0)*x6306*x6308)));
evalcond[1]=((((-1.0)*x6305*x6308))+cj0+((r02*x6300))+(((-1.0)*r00*x6309)));
evalcond[2]=(sj0+(((-1.0)*x6302*x6308))+(((-1.0)*r10*x6309))+((r12*x6300)));
evalcond[3]=(((r22*x6299))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x6300*x6306))+((r20*x6307)));
evalcond[4]=(((r00*x6307))+((x6300*x6305))+((r02*x6299))+((sj0*x6304))+((sj0*x6301)));
evalcond[5]=(((x6300*x6302))+((r12*x6299))+(((-1.0)*x6303*x6304))+((r10*x6307))+(((-1.0)*x6301*x6303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6310 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst145*r20*sj0))+((gconst146*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6310.valid){
continue;
}
CheckValue<IkReal> x6311=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r01))+((gconst146*r00)))),-1);
if(!x6311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6310.value)+(((1.5707963267949)*(x6311.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6312=IKsin(j4);
IkReal x6313=IKcos(j4);
IkReal x6314=(cj1*cj2);
IkReal x6315=(gconst146*r11);
IkReal x6316=((1.0)*cj0);
IkReal x6317=(sj1*sj2);
IkReal x6318=(gconst146*r01);
IkReal x6319=(gconst146*r21);
IkReal x6320=(gconst145*x6313);
IkReal x6321=((1.0)*x6312);
IkReal x6322=(gconst145*x6321);
evalcond[0]=(((r22*x6313))+(((-1.0)*r20*x6322))+(((-1.0)*x6319*x6321)));
evalcond[1]=((((-1.0)*r00*x6322))+(((-1.0)*x6318*x6321))+cj0+((r02*x6313)));
evalcond[2]=(sj0+(((-1.0)*x6315*x6321))+(((-1.0)*r10*x6322))+((r12*x6313)));
evalcond[3]=(((x6313*x6319))+((cj1*sj2))+((r22*x6312))+(((-1.0)*cj2*sj1))+((r20*x6320)));
evalcond[4]=(((x6313*x6318))+((r02*x6312))+((r00*x6320))+((sj0*x6314))+((sj0*x6317)));
evalcond[5]=(((x6313*x6315))+((r10*x6320))+((r12*x6312))+(((-1.0)*x6316*x6317))+(((-1.0)*x6314*x6316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6325 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6325)==0){
continue;
}
IkReal x6323=pow(x6325,-0.5);
IkReal x6324=((-1.0)*x6323);
CheckValue<IkReal> x6326 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6326.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x6326.value))));
IkReal gconst148=(r10*x6324);
IkReal gconst149=(r11*x6324);
CheckValue<IkReal> x6327 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6327.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6327.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x6331 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6331.valid){
continue;
}
IkReal x6328=((1.0)*(x6331.value));
IkReal x6329=x6323;
IkReal x6330=((-1.0)*x6329);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6328)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6328)));
IkReal gconst148=(r10*x6330);
IkReal gconst149=(r11*x6330);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6335 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6335.valid){
continue;
}
IkReal x6332=((1.0)*(x6335.value));
IkReal x6333=x6323;
IkReal x6334=((-1.0)*x6333);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6332)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6332)));
IkReal gconst148=(r10*x6334);
IkReal gconst149=(r11*x6334);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6339 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6339.valid){
continue;
}
IkReal x6336=((1.0)*(x6339.value));
IkReal x6337=x6323;
IkReal x6338=((-1.0)*x6337);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6336)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6336)));
IkReal gconst148=(r10*x6338);
IkReal gconst149=(r11*x6338);
IkReal x6340=r12*r12;
IkReal x6341=(r02*sj0);
IkReal x6342=((1.0)*x6340);
CheckValue<IkReal> x6346=IKPowWithIntegerCheck(((-1.0)+x6340),-1);
if(!x6346.valid){
continue;
}
IkReal x6343=x6346.value;
if((((1.0)+(((-1.0)*x6342)))) < -0.00001)
continue;
IkReal x6344=IKsqrt(((1.0)+(((-1.0)*x6342))));
IkReal x6345=(cj0*x6343*x6344);
j4eval[0]=((IKabs(((((-1.0)*x6341))+((cj0*r12)))))+(IKabs((x6345+((r12*x6341*x6343*x6344))+(((-1.0)*x6342*x6345))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6347=((1.0)*sj0);
CheckValue<IkReal> x6348=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r21))+((gconst149*r20)))),-1);
if(!x6348.valid){
continue;
}
CheckValue<IkReal> x6349 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6347))+((cj0*r12)))),IkReal((((cj0*gconst149*r11))+((cj0*gconst148*r10))+(((-1.0)*gconst148*r00*x6347))+(((-1.0)*gconst149*r01*x6347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6348.value)))+(x6349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6350=IKsin(j4);
IkReal x6351=IKcos(j4);
IkReal x6352=(cj1*cj2);
IkReal x6353=((1.0)*sj1);
IkReal x6354=(gconst148*x6351);
IkReal x6355=(gconst149*x6351);
IkReal x6356=((1.0)*x6350);
evalcond[0]=((((-1.0)*gconst149*r21*x6356))+((r22*x6351))+(((-1.0)*gconst148*r20*x6356)));
evalcond[1]=(cj0+(((-1.0)*gconst148*r00*x6356))+(((-1.0)*gconst149*r01*x6356))+((r02*x6351)));
evalcond[2]=(sj0+((r12*x6351))+(((-1.0)*gconst148*r10*x6356))+(((-1.0)*gconst149*r11*x6356)));
evalcond[3]=(((r21*x6355))+((cj1*sj2))+((r20*x6354))+((r22*x6350))+(((-1.0)*cj2*x6353)));
evalcond[4]=(((r00*x6354))+((r01*x6355))+((sj0*x6352))+((sj0*sj1*sj2))+((r02*x6350)));
evalcond[5]=(((r10*x6354))+(((-1.0)*cj0*sj2*x6353))+((r11*x6355))+((r12*x6350))+(((-1.0)*cj0*x6352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6357 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst149*r21*sj0))+((gconst148*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6357.valid){
continue;
}
CheckValue<IkReal> x6358=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r01))+((gconst149*r00)))),-1);
if(!x6358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6357.value)+(((1.5707963267949)*(x6358.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6359=IKsin(j4);
IkReal x6360=IKcos(j4);
IkReal x6361=(cj1*cj2);
IkReal x6362=((1.0)*sj1);
IkReal x6363=(gconst148*x6360);
IkReal x6364=(gconst149*x6360);
IkReal x6365=((1.0)*x6359);
evalcond[0]=((((-1.0)*gconst149*r21*x6365))+(((-1.0)*gconst148*r20*x6365))+((r22*x6360)));
evalcond[1]=(cj0+(((-1.0)*gconst148*r00*x6365))+((r02*x6360))+(((-1.0)*gconst149*r01*x6365)));
evalcond[2]=(sj0+((r12*x6360))+(((-1.0)*gconst148*r10*x6365))+(((-1.0)*gconst149*r11*x6365)));
evalcond[3]=(((cj1*sj2))+((r20*x6363))+((r22*x6359))+(((-1.0)*cj2*x6362))+((r21*x6364)));
evalcond[4]=(((r01*x6364))+((r00*x6363))+((sj0*x6361))+((sj0*sj1*sj2))+((r02*x6359)));
evalcond[5]=((((-1.0)*cj0*sj2*x6362))+(((-1.0)*cj0*x6361))+((r11*x6364))+((r12*x6359))+((r10*x6363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6366=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r10))+((gconst148*r11)))),-1);
if(!x6366.valid){
continue;
}
CheckValue<IkReal> x6367 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r20))+((cj0*gconst149*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6366.value)))+(x6367.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6368=IKsin(j4);
IkReal x6369=IKcos(j4);
IkReal x6370=(cj1*cj2);
IkReal x6371=((1.0)*sj1);
IkReal x6372=(gconst148*x6369);
IkReal x6373=(gconst149*x6369);
IkReal x6374=((1.0)*x6368);
evalcond[0]=((((-1.0)*gconst149*r21*x6374))+((r22*x6369))+(((-1.0)*gconst148*r20*x6374)));
evalcond[1]=(cj0+(((-1.0)*gconst148*r00*x6374))+(((-1.0)*gconst149*r01*x6374))+((r02*x6369)));
evalcond[2]=(sj0+((r12*x6369))+(((-1.0)*gconst149*r11*x6374))+(((-1.0)*gconst148*r10*x6374)));
evalcond[3]=(((r21*x6373))+((cj1*sj2))+((r20*x6372))+((r22*x6368))+(((-1.0)*cj2*x6371)));
evalcond[4]=(((r00*x6372))+((r01*x6373))+((sj0*x6370))+((sj0*sj1*sj2))+((r02*x6368)));
evalcond[5]=((((-1.0)*cj0*sj2*x6371))+((r12*x6368))+((r11*x6373))+(((-1.0)*cj0*x6370))+((r10*x6372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6375=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x6375;
j4eval[1]=IKsign(x6375);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6376=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x6376;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x6376);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6377=cj5*cj5;
IkReal x6378=r10*r10;
IkReal x6379=(cj5*r11);
IkReal x6380=(r10*sj5);
IkReal x6381=((r12*r12)+x6378+(((-1.0)*x6377*x6378))+((x6377*(r11*r11)))+(((2.0)*x6379*x6380)));
j4eval[0]=x6381;
j4eval[1]=IKsign(x6381);
j4eval[2]=((IKabs(r12))+(IKabs((x6379+x6380))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6382=cj5*cj5;
IkReal x6383=r10*r10;
IkReal x6384=(r10*sj5);
IkReal x6385=(cj5*r11);
CheckValue<IkReal> x6386 = IKatan2WithCheck(IkReal((x6385+x6384)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6386.valid){
continue;
}
CheckValue<IkReal> x6387=IKPowWithIntegerCheck(IKsign((((x6382*(r11*r11)))+(r12*r12)+x6383+(((2.0)*x6384*x6385))+(((-1.0)*x6382*x6383)))),-1);
if(!x6387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6386.value)+(((1.5707963267949)*(x6387.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6388=IKcos(j4);
IkReal x6389=IKsin(j4);
IkReal x6390=(r00*sj5);
IkReal x6391=(cj5*r01);
IkReal x6392=(r20*sj5);
IkReal x6393=(cj5*r21);
IkReal x6394=(cj5*r11);
IkReal x6395=(r10*sj5);
IkReal x6396=((1.0)*x6389);
evalcond[0]=(((x6388*x6395))+((x6388*x6394))+((r12*x6389)));
evalcond[1]=(((r22*x6388))+(((-1.0)*x6392*x6396))+(((-1.0)*x6393*x6396)));
evalcond[2]=(((r02*x6388))+(((-1.0)*x6390*x6396))+(((-1.0)*x6391*x6396)));
evalcond[3]=((1.0)+(((-1.0)*x6395*x6396))+(((-1.0)*x6394*x6396))+((r12*x6388)));
evalcond[4]=(((sj1*sj2))+((r02*x6389))+((x6388*x6391))+((x6388*x6390))+((cj1*cj2)));
evalcond[5]=(((r22*x6389))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x6388*x6392))+((x6388*x6393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6397 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6397.valid){
continue;
}
CheckValue<IkReal> x6398=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x6398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6397.value)+(((1.5707963267949)*(x6398.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6399=IKcos(j4);
IkReal x6400=IKsin(j4);
IkReal x6401=(r00*sj5);
IkReal x6402=(cj5*r01);
IkReal x6403=(r20*sj5);
IkReal x6404=(cj5*r21);
IkReal x6405=(cj5*r11);
IkReal x6406=(r10*sj5);
IkReal x6407=((1.0)*x6400);
evalcond[0]=(((x6399*x6405))+((x6399*x6406))+((r12*x6400)));
evalcond[1]=((((-1.0)*x6403*x6407))+(((-1.0)*x6404*x6407))+((r22*x6399)));
evalcond[2]=((((-1.0)*x6402*x6407))+(((-1.0)*x6401*x6407))+((r02*x6399)));
evalcond[3]=((1.0)+((r12*x6399))+(((-1.0)*x6406*x6407))+(((-1.0)*x6405*x6407)));
evalcond[4]=(((r02*x6400))+((sj1*sj2))+((x6399*x6402))+((x6399*x6401))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x6399*x6403))+((x6399*x6404))+((r22*x6400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6408=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x6408.valid){
continue;
}
CheckValue<IkReal> x6409 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6408.value)))+(x6409.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6410=IKcos(j4);
IkReal x6411=IKsin(j4);
IkReal x6412=(r00*sj5);
IkReal x6413=(cj5*r01);
IkReal x6414=(r20*sj5);
IkReal x6415=(cj5*r21);
IkReal x6416=(cj5*r11);
IkReal x6417=(r10*sj5);
IkReal x6418=((1.0)*x6411);
evalcond[0]=(((x6410*x6416))+((x6410*x6417))+((r12*x6411)));
evalcond[1]=((((-1.0)*x6414*x6418))+(((-1.0)*x6415*x6418))+((r22*x6410)));
evalcond[2]=(((r02*x6410))+(((-1.0)*x6412*x6418))+(((-1.0)*x6413*x6418)));
evalcond[3]=((1.0)+(((-1.0)*x6417*x6418))+(((-1.0)*x6416*x6418))+((r12*x6410)));
evalcond[4]=(((r02*x6411))+((sj1*sj2))+((x6410*x6413))+((x6410*x6412))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x6410*x6414))+((x6410*x6415))+((r22*x6411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6419=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x6419;
j4eval[1]=IKsign(x6419);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6420=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x6420;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x6420);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6421=(cj2*sj1);
IkReal x6422=(cj1*sj2);
IkReal x6423=(r10*sj5);
IkReal x6424=((1.0)*cj5);
IkReal x6425=(((r01*sj5))+(((-1.0)*r00*x6424)));
j4eval[0]=x6425;
j4eval[1]=IKsign(x6425);
j4eval[2]=((IKabs(((((-1.0)*x6421*x6423))+(((-1.0)*r11*x6421*x6424))+((cj5*r11*x6422))+((x6422*x6423)))))+(IKabs(((((-1.0)*r12*x6422))+((r12*x6421))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6426=(cj2*sj1);
IkReal x6427=(cj1*sj2);
IkReal x6428=(cj5*r11);
IkReal x6429=(r10*sj5);
CheckValue<IkReal> x6430=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x6430.valid){
continue;
}
CheckValue<IkReal> x6431 = IKatan2WithCheck(IkReal(((((-1.0)*x6426*x6428))+(((-1.0)*x6426*x6429))+((x6427*x6429))+((x6427*x6428)))),IkReal(((((-1.0)*r12*x6427))+((r12*x6426)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6430.value)))+(x6431.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6432=IKcos(j4);
IkReal x6433=IKsin(j4);
IkReal x6434=(r00*sj5);
IkReal x6435=(cj5*r01);
IkReal x6436=((1.0)*cj2);
IkReal x6437=(r20*sj5);
IkReal x6438=(cj5*r21);
IkReal x6439=(cj5*r11);
IkReal x6440=(r10*sj5);
IkReal x6441=((1.0)*x6433);
evalcond[0]=(((r12*x6433))+((x6432*x6439))+((x6432*x6440)));
evalcond[1]=(((r22*x6432))+(((-1.0)*x6438*x6441))+(((-1.0)*x6437*x6441)));
evalcond[2]=(((r02*x6432))+(((-1.0)*x6435*x6441))+(((-1.0)*x6434*x6441)));
evalcond[3]=((-1.0)+(((-1.0)*x6439*x6441))+((r12*x6432))+(((-1.0)*x6440*x6441)));
evalcond[4]=(((r22*x6433))+(((-1.0)*sj1*x6436))+((cj1*sj2))+((x6432*x6437))+((x6432*x6438)));
evalcond[5]=((((-1.0)*cj1*x6436))+(((-1.0)*sj1*sj2))+((x6432*x6434))+((x6432*x6435))+((r02*x6433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6442 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6442.valid){
continue;
}
CheckValue<IkReal> x6443=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x6443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6442.value)+(((1.5707963267949)*(x6443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6444=IKcos(j4);
IkReal x6445=IKsin(j4);
IkReal x6446=(r00*sj5);
IkReal x6447=(cj5*r01);
IkReal x6448=((1.0)*cj2);
IkReal x6449=(r20*sj5);
IkReal x6450=(cj5*r21);
IkReal x6451=(cj5*r11);
IkReal x6452=(r10*sj5);
IkReal x6453=((1.0)*x6445);
evalcond[0]=(((r12*x6445))+((x6444*x6452))+((x6444*x6451)));
evalcond[1]=((((-1.0)*x6449*x6453))+((r22*x6444))+(((-1.0)*x6450*x6453)));
evalcond[2]=((((-1.0)*x6447*x6453))+(((-1.0)*x6446*x6453))+((r02*x6444)));
evalcond[3]=((-1.0)+((r12*x6444))+(((-1.0)*x6451*x6453))+(((-1.0)*x6452*x6453)));
evalcond[4]=(((cj1*sj2))+((x6444*x6450))+((x6444*x6449))+((r22*x6445))+(((-1.0)*sj1*x6448)));
evalcond[5]=((((-1.0)*cj1*x6448))+(((-1.0)*sj1*sj2))+((x6444*x6446))+((x6444*x6447))+((r02*x6445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6454 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6454.valid){
continue;
}
CheckValue<IkReal> x6455=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x6455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6454.value)+(((1.5707963267949)*(x6455.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6456=IKcos(j4);
IkReal x6457=IKsin(j4);
IkReal x6458=(r00*sj5);
IkReal x6459=(cj5*r01);
IkReal x6460=((1.0)*cj2);
IkReal x6461=(r20*sj5);
IkReal x6462=(cj5*r21);
IkReal x6463=(cj5*r11);
IkReal x6464=(r10*sj5);
IkReal x6465=((1.0)*x6457);
evalcond[0]=(((x6456*x6463))+((x6456*x6464))+((r12*x6457)));
evalcond[1]=(((r22*x6456))+(((-1.0)*x6461*x6465))+(((-1.0)*x6462*x6465)));
evalcond[2]=((((-1.0)*x6458*x6465))+((r02*x6456))+(((-1.0)*x6459*x6465)));
evalcond[3]=((-1.0)+(((-1.0)*x6464*x6465))+(((-1.0)*x6463*x6465))+((r12*x6456)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*sj1*x6460))+((r22*x6457))+((x6456*x6461))+((x6456*x6462)));
evalcond[5]=(((x6456*x6459))+((x6456*x6458))+(((-1.0)*sj1*sj2))+(((-1.0)*cj1*x6460))+((r02*x6457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6466=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6466);
rxp0_2=(py*r00);
rxp1_0=(r21*x6466);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6467=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6467);
rxp0_2=(py*r00);
rxp1_0=(r21*x6467);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6468=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6468);
rxp0_2=(py*r00);
rxp1_0=(r21*x6468);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r00*sj5))+((cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6471=IKPowWithIntegerCheck((((r00*sj5))+((cj5*r01))),-1);
if(!x6471.valid){
continue;
}
IkReal x6469=x6471.value;
IkReal x6470=((1.0)*sj0*x6469);
cj4array[0]=((((-1.0)*cj1*cj2*x6470))+(((-1.0)*sj1*sj2*x6470)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6472=IKsin(j4);
IkReal x6473=IKcos(j4);
IkReal x6474=(cj5*r21);
IkReal x6475=(r20*sj5);
IkReal x6476=((1.0)*x6472);
evalcond[0]=(r12*x6472);
evalcond[1]=(sj0+((r12*x6473)));
evalcond[2]=((((-1.0)*x6475*x6476))+(((-1.0)*x6474*x6476)));
evalcond[3]=((((-1.0)*cj5*r01*x6476))+(((-1.0)*r00*sj5*x6476)));
evalcond[4]=(((x6473*x6474))+((x6473*x6475))+((cj1*sj2))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6478=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x6478.valid){
continue;
}
IkReal x6477=x6478.value;
cj4array[0]=(((cj2*sj1*x6477))+(((-1.0)*cj1*sj2*x6477)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6479=IKsin(j4);
IkReal x6480=IKcos(j4);
IkReal x6481=(r00*sj5);
IkReal x6482=(cj5*r01);
IkReal x6483=((1.0)*x6479);
evalcond[0]=(r12*x6479);
evalcond[1]=(sj0+((r12*x6480)));
evalcond[2]=((((-1.0)*r20*sj5*x6483))+(((-1.0)*cj5*r21*x6483)));
evalcond[3]=((((-1.0)*x6481*x6483))+(((-1.0)*x6482*x6483)));
evalcond[4]=(((cj1*cj2*sj0))+((x6480*x6482))+((x6480*x6481))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6484=IKPowWithIntegerCheck(r12,-1);
if(!x6484.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6484.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6485=IKsin(j4);
IkReal x6486=IKcos(j4);
IkReal x6487=(cj5*r21);
IkReal x6488=(r00*sj5);
IkReal x6489=(cj5*r01);
IkReal x6490=(r20*sj5);
IkReal x6491=((1.0)*x6485);
evalcond[0]=(r12*x6485);
evalcond[1]=((((-1.0)*x6487*x6491))+(((-1.0)*x6490*x6491)));
evalcond[2]=((((-1.0)*x6488*x6491))+(((-1.0)*x6489*x6491)));
evalcond[3]=(((x6486*x6487))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x6486*x6490)));
evalcond[4]=(((x6486*x6488))+((x6486*x6489))+((cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6492=((1.0)*sj0);
CheckValue<IkReal> x6493 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6492))+((cj0*r12)))),IkReal(((((-1.0)*cj5*r01*x6492))+((cj0*cj5*r11))+(((-1.0)*r00*sj5*x6492))+((cj0*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6493.valid){
continue;
}
CheckValue<IkReal> x6494=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x6494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6493.value)+(((1.5707963267949)*(x6494.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6495=IKsin(j4);
IkReal x6496=IKcos(j4);
IkReal x6497=(cj1*cj2);
IkReal x6498=(r00*sj5);
IkReal x6499=(cj5*r01);
IkReal x6500=(r20*sj5);
IkReal x6501=(cj5*r21);
IkReal x6502=((1.0)*sj1);
IkReal x6503=(cj5*r11);
IkReal x6504=(r10*sj5);
IkReal x6505=((1.0)*x6495);
evalcond[0]=((((-1.0)*x6501*x6505))+(((-1.0)*x6500*x6505))+((r22*x6496)));
evalcond[1]=(cj0+((r02*x6496))+(((-1.0)*x6498*x6505))+(((-1.0)*x6499*x6505)));
evalcond[2]=(sj0+(((-1.0)*x6503*x6505))+((r12*x6496))+(((-1.0)*x6504*x6505)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj2*x6502))+((x6496*x6501))+((x6496*x6500))+((r22*x6495)));
evalcond[4]=(((x6496*x6499))+((x6496*x6498))+((r02*x6495))+((sj0*sj1*sj2))+((sj0*x6497)));
evalcond[5]=(((r12*x6495))+(((-1.0)*cj0*sj2*x6502))+(((-1.0)*cj0*x6497))+((x6496*x6503))+((x6496*x6504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6506=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x6506.valid){
continue;
}
CheckValue<IkReal> x6507 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6506.value)))+(x6507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6508=IKsin(j4);
IkReal x6509=IKcos(j4);
IkReal x6510=(cj1*cj2);
IkReal x6511=(r00*sj5);
IkReal x6512=(cj5*r01);
IkReal x6513=(r20*sj5);
IkReal x6514=(cj5*r21);
IkReal x6515=((1.0)*sj1);
IkReal x6516=(cj5*r11);
IkReal x6517=(r10*sj5);
IkReal x6518=((1.0)*x6508);
evalcond[0]=((((-1.0)*x6514*x6518))+((r22*x6509))+(((-1.0)*x6513*x6518)));
evalcond[1]=(((r02*x6509))+(((-1.0)*x6512*x6518))+cj0+(((-1.0)*x6511*x6518)));
evalcond[2]=(((r12*x6509))+(((-1.0)*x6516*x6518))+sj0+(((-1.0)*x6517*x6518)));
evalcond[3]=(((x6509*x6513))+((x6509*x6514))+(((-1.0)*cj2*x6515))+((cj1*sj2))+((r22*x6508)));
evalcond[4]=(((x6509*x6512))+((x6509*x6511))+((r02*x6508))+((sj0*sj1*sj2))+((sj0*x6510)));
evalcond[5]=(((r12*x6508))+((x6509*x6517))+((x6509*x6516))+(((-1.0)*cj0*x6510))+(((-1.0)*cj0*sj2*x6515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6519 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6519.valid){
continue;
}
CheckValue<IkReal> x6520=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x6520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6519.value)+(((1.5707963267949)*(x6520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6521=IKsin(j4);
IkReal x6522=IKcos(j4);
IkReal x6523=(cj1*cj2);
IkReal x6524=(r00*sj5);
IkReal x6525=(cj5*r01);
IkReal x6526=(r20*sj5);
IkReal x6527=(cj5*r21);
IkReal x6528=((1.0)*sj1);
IkReal x6529=(cj5*r11);
IkReal x6530=(r10*sj5);
IkReal x6531=((1.0)*x6521);
evalcond[0]=((((-1.0)*x6526*x6531))+((r22*x6522))+(((-1.0)*x6527*x6531)));
evalcond[1]=(cj0+((r02*x6522))+(((-1.0)*x6524*x6531))+(((-1.0)*x6525*x6531)));
evalcond[2]=(sj0+(((-1.0)*x6529*x6531))+((r12*x6522))+(((-1.0)*x6530*x6531)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj2*x6528))+((x6522*x6527))+((x6522*x6526))+((r22*x6521)));
evalcond[4]=(((r02*x6521))+((sj0*x6523))+((x6522*x6524))+((x6522*x6525))+((sj0*sj1*sj2)));
evalcond[5]=(((x6522*x6530))+((r12*x6521))+((x6522*x6529))+(((-1.0)*cj0*x6523))+(((-1.0)*cj0*sj2*x6528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6532=r20*r20;
IkReal x6533=cj5*cj5;
IkReal x6534=(cj1*sj2);
IkReal x6535=(r20*sj5);
IkReal x6536=(cj5*r21);
IkReal x6537=((1.0)*cj2*sj1);
CheckValue<IkReal> x6538 = IKatan2WithCheck(IkReal((((r22*x6534))+(((-1.0)*r22*x6537)))),IkReal(((((-1.0)*x6535*x6537))+(((-1.0)*x6536*x6537))+((x6534*x6536))+((x6534*x6535)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6538.valid){
continue;
}
CheckValue<IkReal> x6539=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6535*x6536))+(((-1.0)*x6532))+(((-1.0)*x6533*(r21*r21)))+(((-1.0)*(r22*r22)))+((x6532*x6533)))),-1);
if(!x6539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6538.value)+(((1.5707963267949)*(x6539.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6540=IKsin(j4);
IkReal x6541=IKcos(j4);
IkReal x6542=(cj5*r21);
IkReal x6543=(r20*sj5);
IkReal x6544=((1.0)*x6540);
evalcond[0]=((((-1.0)*x6542*x6544))+((r22*x6541))+(((-1.0)*x6543*x6544)));
evalcond[1]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x6541*x6542))+((x6541*x6543))+((r22*x6540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6545=(sj4*sj5);
IkReal x6546=(cj5*sj4);
IkReal x6547=((1.0)*cj4);
if( IKabs(((((-1.0)*r12*x6547))+((r11*x6546))+((r10*x6545)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x6547))+((r01*x6546))+((r00*x6545)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x6547))+((r11*x6546))+((r10*x6545))))+IKsqr(((((-1.0)*r02*x6547))+((r01*x6546))+((r00*x6545))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x6547))+((r11*x6546))+((r10*x6545))), ((((-1.0)*r02*x6547))+((r01*x6546))+((r00*x6545))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6548=IKsin(j0);
IkReal x6549=IKcos(j0);
IkReal x6550=(cj4*sj5);
IkReal x6551=(cj5*r01);
IkReal x6552=((1.0)*r00);
IkReal x6553=((1.0)*sj2);
IkReal x6554=(cj5*r10);
IkReal x6555=(sj4*sj5);
IkReal x6556=((0.452)*sj2);
IkReal x6557=((1.0)*cj2);
IkReal x6558=(r11*sj5);
IkReal x6559=((0.452)*cj2);
IkReal x6560=((1.0)*sj4);
IkReal x6561=(r01*sj5);
IkReal x6562=(cj5*r11);
IkReal x6563=(cj1*x6548);
IkReal x6564=(cj1*x6549);
IkReal x6565=(sj1*x6549);
IkReal x6566=(sj1*x6548);
evalcond[0]=((((-1.0)*x6551*x6560))+(((-1.0)*x6552*x6555))+x6549+((cj4*r02)));
evalcond[1]=(x6548+(((-1.0)*r10*x6555))+(((-1.0)*x6560*x6562))+((cj4*r12)));
evalcond[2]=(((cj2*x6566))+x6561+(((-1.0)*cj5*x6552))+(((-1.0)*x6553*x6563)));
evalcond[3]=(((sj2*x6564))+x6558+(((-1.0)*x6557*x6565))+(((-1.0)*x6554)));
evalcond[4]=(((cj4*x6551))+((cj2*x6563))+((sj2*x6566))+((r02*sj4))+((r00*x6550)));
evalcond[5]=((((-1.0)*x6557*x6564))+((r12*sj4))+((r10*x6550))+(((-1.0)*x6553*x6565))+((cj4*x6562)));
evalcond[6]=((((-0.1135)*cj5*r00))+(((0.1135)*x6561))+(((0.452)*x6566))+(((0.1054)*x6549))+(((-1.0)*x6556*x6563))+(((-1.0)*px))+((x6559*x6566)));
evalcond[7]=((((0.1135)*x6558))+(((0.1054)*x6548))+(((-0.1135)*x6554))+(((-0.452)*x6565))+(((-1.0)*py))+(((-1.0)*x6559*x6565))+((x6556*x6564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x6567=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6567.valid){
continue;
}
CheckValue<IkReal> x6568 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6568.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6567.value)))+(x6568.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6569=IKsin(j0);
IkReal x6570=IKcos(j0);
IkReal x6571=((1.0)*cj5);
IkReal x6572=(cj1*sj2);
IkReal x6573=((0.1135)*cj5);
IkReal x6574=(r11*sj5);
IkReal x6575=((0.452)*cj2);
IkReal x6576=(r01*sj5);
IkReal x6577=(sj1*x6570);
IkReal x6578=((0.452)*x6569);
IkReal x6579=(sj1*x6569);
evalcond[0]=(((cj2*x6579))+x6576+(((-1.0)*x6569*x6572))+(((-1.0)*r00*x6571)));
evalcond[1]=(x6574+(((-1.0)*r10*x6571))+(((-1.0)*cj2*x6577))+((x6570*x6572)));
evalcond[2]=((((-1.0)*x6572*x6578))+(((0.1135)*x6576))+(((0.1054)*x6570))+((sj1*x6578))+(((-1.0)*px))+(((-1.0)*r00*x6573))+((x6575*x6579)));
evalcond[3]=((((0.452)*x6570*x6572))+(((0.1135)*x6574))+(((-0.452)*x6577))+(((-1.0)*x6575*x6577))+(((-1.0)*r10*x6573))+(((-1.0)*py))+(((0.1054)*x6569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6580=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x6580;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x6580);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6581=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x6581;
j4eval[1]=IKsign(x6581);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6582=((1.0)*sj0);
IkReal x6583=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x6583;
j4eval[1]=((IKabs(((((-1.0)*r00*sj5*x6582))+((cj0*cj5*r11))+((cj0*r10*sj5))+(((-1.0)*cj5*r01*x6582)))))+(IKabs(((((-1.0)*r02*x6582))+((cj0*r12))))));
j4eval[2]=IKsign(x6583);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6584=((-1.0)*r21);
IkReal x6586 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6586)==0){
continue;
}
IkReal x6585=pow(x6586,-0.5);
CheckValue<IkReal> x6587 = IKatan2WithCheck(IkReal(r20),IkReal(x6584),IKFAST_ATAN2_MAGTHRESH);
if(!x6587.valid){
continue;
}
IkReal gconst132=((-1.0)*(x6587.value));
IkReal gconst133=((-1.0)*r20*x6585);
IkReal gconst134=(x6584*x6585);
CheckValue<IkReal> x6588 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6588.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6588.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6589=((-1.0)*r21);
CheckValue<IkReal> x6592 = IKatan2WithCheck(IkReal(r20),IkReal(x6589),IKFAST_ATAN2_MAGTHRESH);
if(!x6592.valid){
continue;
}
IkReal x6590=((-1.0)*(x6592.value));
IkReal x6591=x6585;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x6590;
IkReal gconst132=x6590;
IkReal gconst133=((-1.0)*r20*x6591);
IkReal gconst134=(x6589*x6591);
IkReal x6593=r22*r22;
IkReal x6594=((1.0)*x6593);
CheckValue<IkReal> x6598=IKPowWithIntegerCheck(((-1.0)+x6593),-1);
if(!x6598.valid){
continue;
}
IkReal x6595=x6598.value;
if((((1.0)+(((-1.0)*x6594)))) < -0.00001)
continue;
IkReal x6596=IKsqrt(((1.0)+(((-1.0)*x6594))));
IkReal x6597=(cj0*x6595*x6596);
j4eval[0]=((IKabs((x6597+(((-1.0)*x6594*x6597)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6599=((-1.0)*r21);
CheckValue<IkReal> x6602 = IKatan2WithCheck(IkReal(r20),IkReal(x6599),IKFAST_ATAN2_MAGTHRESH);
if(!x6602.valid){
continue;
}
IkReal x6600=((-1.0)*(x6602.value));
IkReal x6601=x6585;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x6600;
IkReal gconst132=x6600;
IkReal gconst133=((-1.0)*r20*x6601);
IkReal gconst134=(x6599*x6601);
IkReal x6603=r22*r22;
IkReal x6604=((1.0)*x6603);
CheckValue<IkReal> x6608=IKPowWithIntegerCheck(((-1.0)+x6603),-1);
if(!x6608.valid){
continue;
}
IkReal x6605=x6608.value;
if((((1.0)+(((-1.0)*x6604)))) < -0.00001)
continue;
IkReal x6606=IKsqrt(((1.0)+(((-1.0)*x6604))));
IkReal x6607=(sj0*x6605*x6606);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6607+(((-1.0)*x6604*x6607))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6609=((-1.0)*r21);
CheckValue<IkReal> x6612 = IKatan2WithCheck(IkReal(r20),IkReal(x6609),IKFAST_ATAN2_MAGTHRESH);
if(!x6612.valid){
continue;
}
IkReal x6610=((-1.0)*(x6612.value));
IkReal x6611=x6585;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x6610;
IkReal gconst132=x6610;
IkReal gconst133=((-1.0)*r20*x6611);
IkReal gconst134=(x6609*x6611);
IkReal x6613=((1.0)*(r22*r22));
CheckValue<IkReal> x6617=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6613))),-1);
if(!x6617.valid){
continue;
}
IkReal x6614=x6617.value;
IkReal x6615=((1.0)*x6614);
IkReal x6616=((((-2.0)*x6614*(r20*r20)*(r21*r21)))+(((-1.0)*x6613))+(((-1.0)*x6615*(r21*r21*r21*r21)))+(((-1.0)*x6615*(r20*r20*r20*r20))));
j4eval[0]=x6616;
j4eval[1]=IKsign(x6616);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6618=(gconst133*r20);
IkReal x6619=(gconst134*r21);
IkReal x6620=(cj1*sj2);
IkReal x6621=((1.0)*cj2*sj1);
CheckValue<IkReal> x6622=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6618*x6618)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6619*x6619)))+(((-2.0)*x6618*x6619)))),-1);
if(!x6622.valid){
continue;
}
CheckValue<IkReal> x6623 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6621))+((r22*x6620)))),IkReal(((((-1.0)*x6619*x6621))+(((-1.0)*x6618*x6621))+((x6618*x6620))+((x6619*x6620)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6622.value)))+(x6623.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6624=IKsin(j4);
IkReal x6625=IKcos(j4);
IkReal x6626=(cj1*cj2);
IkReal x6627=(gconst134*r11);
IkReal x6628=(gconst133*r00);
IkReal x6629=((1.0)*sj1);
IkReal x6630=(gconst134*r21);
IkReal x6631=(gconst134*r01);
IkReal x6632=(gconst133*r10);
IkReal x6633=(gconst133*r20);
IkReal x6634=((1.0)*x6624);
evalcond[0]=((((-1.0)*x6630*x6634))+((r22*x6625))+(((-1.0)*x6633*x6634)));
evalcond[1]=(((r02*x6625))+(((-1.0)*x6628*x6634))+cj0+(((-1.0)*x6631*x6634)));
evalcond[2]=(sj0+((r12*x6625))+(((-1.0)*x6632*x6634))+(((-1.0)*x6627*x6634)));
evalcond[3]=(((cj1*sj2))+((x6625*x6633))+((x6625*x6630))+((r22*x6624))+(((-1.0)*cj2*x6629)));
evalcond[4]=(((r02*x6624))+((x6625*x6631))+((sj0*sj1*sj2))+((sj0*x6626))+((x6625*x6628)));
evalcond[5]=((((-1.0)*cj0*sj2*x6629))+((r12*x6624))+((x6625*x6632))+((x6625*x6627))+(((-1.0)*cj0*x6626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6635=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r01))+((gconst134*r00)))),-1);
if(!x6635.valid){
continue;
}
CheckValue<IkReal> x6636 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst133*r20*sj0))+((gconst134*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6635.value)))+(x6636.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6637=IKsin(j4);
IkReal x6638=IKcos(j4);
IkReal x6639=(cj1*cj2);
IkReal x6640=(gconst134*r11);
IkReal x6641=(gconst133*r00);
IkReal x6642=((1.0)*sj1);
IkReal x6643=(gconst134*r21);
IkReal x6644=(gconst134*r01);
IkReal x6645=(gconst133*r10);
IkReal x6646=(gconst133*r20);
IkReal x6647=((1.0)*x6637);
evalcond[0]=((((-1.0)*x6646*x6647))+((r22*x6638))+(((-1.0)*x6643*x6647)));
evalcond[1]=(cj0+(((-1.0)*x6641*x6647))+(((-1.0)*x6644*x6647))+((r02*x6638)));
evalcond[2]=(sj0+(((-1.0)*x6640*x6647))+(((-1.0)*x6645*x6647))+((r12*x6638)));
evalcond[3]=(((cj1*sj2))+((x6638*x6646))+((x6638*x6643))+((r22*x6637))+(((-1.0)*cj2*x6642)));
evalcond[4]=(((x6638*x6644))+((x6638*x6641))+((sj0*sj1*sj2))+((r02*x6637))+((sj0*x6639)));
evalcond[5]=((((-1.0)*cj0*x6639))+(((-1.0)*cj0*sj2*x6642))+((x6638*x6640))+((x6638*x6645))+((r12*x6637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6648 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst134*r21))+((cj0*gconst133*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6648.valid){
continue;
}
CheckValue<IkReal> x6649=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst134*r10))+((gconst133*r11)))),-1);
if(!x6649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6648.value)+(((1.5707963267949)*(x6649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6650=IKsin(j4);
IkReal x6651=IKcos(j4);
IkReal x6652=(cj1*cj2);
IkReal x6653=(gconst134*r11);
IkReal x6654=(gconst133*r00);
IkReal x6655=((1.0)*sj1);
IkReal x6656=(gconst134*r21);
IkReal x6657=(gconst134*r01);
IkReal x6658=(gconst133*r10);
IkReal x6659=(gconst133*r20);
IkReal x6660=((1.0)*x6650);
evalcond[0]=((((-1.0)*x6659*x6660))+((r22*x6651))+(((-1.0)*x6656*x6660)));
evalcond[1]=(cj0+(((-1.0)*x6657*x6660))+((r02*x6651))+(((-1.0)*x6654*x6660)));
evalcond[2]=(sj0+(((-1.0)*x6658*x6660))+((r12*x6651))+(((-1.0)*x6653*x6660)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj2*x6655))+((r22*x6650))+((x6651*x6656))+((x6651*x6659)));
evalcond[4]=(((r02*x6650))+((sj0*x6652))+((sj0*sj1*sj2))+((x6651*x6654))+((x6651*x6657)));
evalcond[5]=(((r12*x6650))+(((-1.0)*cj0*x6652))+((x6651*x6653))+((x6651*x6658))+(((-1.0)*cj0*sj2*x6655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6663 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6663)==0){
continue;
}
IkReal x6661=pow(x6663,-0.5);
IkReal x6662=((1.0)*x6661);
CheckValue<IkReal> x6664 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6664.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x6664.value))));
IkReal gconst136=(r20*x6662);
IkReal gconst137=(r21*x6662);
CheckValue<IkReal> x6665 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6665.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6665.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x6669 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6669.valid){
continue;
}
IkReal x6666=((1.0)*(x6669.value));
IkReal x6667=x6661;
IkReal x6668=((1.0)*x6667);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6666)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6666)));
IkReal gconst136=(r20*x6668);
IkReal gconst137=(r21*x6668);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6673 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6673.valid){
continue;
}
IkReal x6670=((1.0)*(x6673.value));
IkReal x6671=x6661;
IkReal x6672=((1.0)*x6671);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6670)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6670)));
IkReal gconst136=(r20*x6672);
IkReal gconst137=(r21*x6672);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6677 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6677.valid){
continue;
}
IkReal x6674=((1.0)*(x6677.value));
IkReal x6675=x6661;
IkReal x6676=((1.0)*x6675);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6674)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6674)));
IkReal gconst136=(r20*x6676);
IkReal gconst137=(r21*x6676);
IkReal x6678=r22*r22;
IkReal x6679=(cj0*r12);
IkReal x6680=((1.0)*r02*sj0);
CheckValue<IkReal> x6684=IKPowWithIntegerCheck(((-1.0)+x6678),-1);
if(!x6684.valid){
continue;
}
IkReal x6681=x6684.value;
if((((1.0)+(((-1.0)*x6678)))) < -0.00001)
continue;
IkReal x6682=IKsqrt(((1.0)+(((-1.0)*x6678))));
IkReal x6683=(r22*x6681*x6682);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x6679+(((-1.0)*x6680)))))+(IKabs(((((-1.0)*x6680*x6683))+((x6679*x6683))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6685=((1.0)*sj0);
CheckValue<IkReal> x6686 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6685))+((cj0*r12)))),IkReal(((((-1.0)*gconst137*r01*x6685))+((cj0*gconst136*r10))+((cj0*gconst137*r11))+(((-1.0)*gconst136*r00*x6685)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6686.valid){
continue;
}
CheckValue<IkReal> x6687=IKPowWithIntegerCheck(IKsign((((gconst137*r20))+(((-1.0)*gconst136*r21)))),-1);
if(!x6687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6686.value)+(((1.5707963267949)*(x6687.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6688=IKsin(j4);
IkReal x6689=IKcos(j4);
IkReal x6690=(gconst136*r10);
IkReal x6691=(cj1*cj2);
IkReal x6692=(gconst136*r00);
IkReal x6693=((1.0)*sj1);
IkReal x6694=(gconst136*r20);
IkReal x6695=((1.0)*x6688);
IkReal x6696=(gconst137*x6689);
evalcond[0]=((((-1.0)*x6694*x6695))+((r22*x6689))+(((-1.0)*gconst137*r21*x6695)));
evalcond[1]=(((r02*x6689))+cj0+(((-1.0)*gconst137*r01*x6695))+(((-1.0)*x6692*x6695)));
evalcond[2]=(((r12*x6689))+sj0+(((-1.0)*gconst137*r11*x6695))+(((-1.0)*x6690*x6695)));
evalcond[3]=((((-1.0)*cj2*x6693))+((cj1*sj2))+((r22*x6688))+((x6689*x6694))+((r21*x6696)));
evalcond[4]=(((r02*x6688))+((sj0*x6691))+((x6689*x6692))+((r01*x6696))+((sj0*sj1*sj2)));
evalcond[5]=(((r12*x6688))+((r11*x6696))+(((-1.0)*cj0*x6691))+((x6689*x6690))+(((-1.0)*cj0*sj2*x6693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6697=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r01))+((gconst137*r00)))),-1);
if(!x6697.valid){
continue;
}
CheckValue<IkReal> x6698 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r20*sj0))+((gconst137*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6697.value)))+(x6698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6699=IKsin(j4);
IkReal x6700=IKcos(j4);
IkReal x6701=(gconst136*r10);
IkReal x6702=(cj1*cj2);
IkReal x6703=(gconst136*r00);
IkReal x6704=((1.0)*sj1);
IkReal x6705=(gconst136*r20);
IkReal x6706=((1.0)*x6699);
IkReal x6707=(gconst137*x6700);
evalcond[0]=((((-1.0)*x6705*x6706))+(((-1.0)*gconst137*r21*x6706))+((r22*x6700)));
evalcond[1]=((((-1.0)*gconst137*r01*x6706))+cj0+(((-1.0)*x6703*x6706))+((r02*x6700)));
evalcond[2]=(sj0+(((-1.0)*x6701*x6706))+((r12*x6700))+(((-1.0)*gconst137*r11*x6706)));
evalcond[3]=(((r21*x6707))+((r22*x6699))+((cj1*sj2))+(((-1.0)*cj2*x6704))+((x6700*x6705)));
evalcond[4]=(((r01*x6707))+((sj0*x6702))+((x6700*x6703))+((sj0*sj1*sj2))+((r02*x6699)));
evalcond[5]=(((r12*x6699))+(((-1.0)*cj0*sj2*x6704))+((r11*x6707))+((x6700*x6701))+(((-1.0)*cj0*x6702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6708 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r20))+((cj0*gconst137*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6708.valid){
continue;
}
CheckValue<IkReal> x6709=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r10))+((gconst136*r11)))),-1);
if(!x6709.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6708.value)+(((1.5707963267949)*(x6709.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6710=IKsin(j4);
IkReal x6711=IKcos(j4);
IkReal x6712=(gconst136*r10);
IkReal x6713=(cj1*cj2);
IkReal x6714=(gconst136*r00);
IkReal x6715=((1.0)*sj1);
IkReal x6716=(gconst136*r20);
IkReal x6717=((1.0)*x6710);
IkReal x6718=(gconst137*x6711);
evalcond[0]=(((r22*x6711))+(((-1.0)*x6716*x6717))+(((-1.0)*gconst137*r21*x6717)));
evalcond[1]=(cj0+((r02*x6711))+(((-1.0)*x6714*x6717))+(((-1.0)*gconst137*r01*x6717)));
evalcond[2]=(sj0+(((-1.0)*gconst137*r11*x6717))+(((-1.0)*x6712*x6717))+((r12*x6711)));
evalcond[3]=(((x6711*x6716))+((cj1*sj2))+(((-1.0)*cj2*x6715))+((r22*x6710))+((r21*x6718)));
evalcond[4]=(((x6711*x6714))+((r02*x6710))+((sj0*sj1*sj2))+((r01*x6718))+((sj0*x6713)));
evalcond[5]=(((r11*x6718))+((x6711*x6712))+(((-1.0)*cj0*x6713))+(((-1.0)*cj0*sj2*x6715))+((r12*x6710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6721 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6721)==0){
continue;
}
IkReal x6719=pow(x6721,-0.5);
IkReal x6720=((-1.0)*x6719);
CheckValue<IkReal> x6722 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x6722.valid){
continue;
}
IkReal gconst138=((-1.0)*(x6722.value));
IkReal gconst139=(r00*x6720);
IkReal gconst140=(r01*x6720);
CheckValue<IkReal> x6723 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x6723.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6723.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6727 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x6727.valid){
continue;
}
IkReal x6724=((-1.0)*(x6727.value));
IkReal x6725=x6719;
IkReal x6726=((-1.0)*x6725);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x6724;
IkReal gconst138=x6724;
IkReal gconst139=(r00*x6726);
IkReal gconst140=(r01*x6726);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6728=((1.0)*sj0);
CheckValue<IkReal> x6729=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r21))+((gconst140*r20)))),-1);
if(!x6729.valid){
continue;
}
CheckValue<IkReal> x6730 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6728))+((cj0*r12)))),IkReal(((((-1.0)*gconst139*r00*x6728))+(((-1.0)*gconst140*r01*x6728))+((cj0*gconst139*r10))+((cj0*gconst140*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6729.value)))+(x6730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6731=IKsin(j4);
IkReal x6732=IKcos(j4);
IkReal x6733=(cj1*cj2);
IkReal x6734=(gconst140*r11);
IkReal x6735=((1.0)*sj1);
IkReal x6736=(gconst140*r21);
IkReal x6737=(gconst140*r01);
IkReal x6738=((1.0)*x6731);
IkReal x6739=(gconst139*x6732);
evalcond[0]=(((r22*x6732))+(((-1.0)*x6736*x6738))+(((-1.0)*gconst139*r20*x6738)));
evalcond[1]=(cj0+(((-1.0)*x6737*x6738))+((r02*x6732))+(((-1.0)*gconst139*r00*x6738)));
evalcond[2]=(sj0+((r12*x6732))+(((-1.0)*gconst139*r10*x6738))+(((-1.0)*x6734*x6738)));
evalcond[3]=(((r22*x6731))+((x6732*x6736))+((cj1*sj2))+(((-1.0)*cj2*x6735))+((r20*x6739)));
evalcond[4]=(((x6732*x6737))+((sj0*x6733))+((sj0*sj1*sj2))+((r00*x6739))+((r02*x6731)));
evalcond[5]=(((x6732*x6734))+(((-1.0)*cj0*x6733))+(((-1.0)*cj0*sj2*x6735))+((r12*x6731))+((r10*x6739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6740 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst140*r21))+((cj0*gconst139*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6740.valid){
continue;
}
CheckValue<IkReal> x6741=IKPowWithIntegerCheck(IKsign((((gconst139*r11))+(((-1.0)*gconst140*r10)))),-1);
if(!x6741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6740.value)+(((1.5707963267949)*(x6741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6742=IKsin(j4);
IkReal x6743=IKcos(j4);
IkReal x6744=(cj1*cj2);
IkReal x6745=(gconst140*r11);
IkReal x6746=((1.0)*sj1);
IkReal x6747=(gconst140*r21);
IkReal x6748=(gconst140*r01);
IkReal x6749=((1.0)*x6742);
IkReal x6750=(gconst139*x6743);
evalcond[0]=((((-1.0)*gconst139*r20*x6749))+(((-1.0)*x6747*x6749))+((r22*x6743)));
evalcond[1]=(((r02*x6743))+(((-1.0)*gconst139*r00*x6749))+cj0+(((-1.0)*x6748*x6749)));
evalcond[2]=(sj0+((r12*x6743))+(((-1.0)*x6745*x6749))+(((-1.0)*gconst139*r10*x6749)));
evalcond[3]=(((cj1*sj2))+((x6743*x6747))+((r20*x6750))+(((-1.0)*cj2*x6746))+((r22*x6742)));
evalcond[4]=(((r02*x6742))+((r00*x6750))+((sj0*x6744))+((x6743*x6748))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*cj0*x6744))+(((-1.0)*cj0*sj2*x6746))+((x6743*x6745))+((r12*x6742))+((r10*x6750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6753 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6753)==0){
continue;
}
IkReal x6751=pow(x6753,-0.5);
IkReal x6752=((1.0)*x6751);
CheckValue<IkReal> x6754 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x6754.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x6754.value))));
IkReal gconst142=(r00*x6752);
IkReal gconst143=(r01*x6752);
CheckValue<IkReal> x6755 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x6755.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6755.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6759 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x6759.valid){
continue;
}
IkReal x6756=((1.0)*(x6759.value));
IkReal x6757=x6751;
IkReal x6758=((1.0)*x6757);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6756)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6756)));
IkReal gconst142=(r00*x6758);
IkReal gconst143=(r01*x6758);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x6763 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x6763.valid){
continue;
}
IkReal x6760=((1.0)*(x6763.value));
IkReal x6761=x6751;
IkReal x6762=((1.0)*x6761);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6760)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6760)));
IkReal gconst142=(r00*x6762);
IkReal gconst143=(r01*x6762);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6767 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x6767.valid){
continue;
}
IkReal x6764=((1.0)*(x6767.value));
IkReal x6765=x6751;
IkReal x6766=((1.0)*x6765);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6764)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6764)));
IkReal gconst142=(r00*x6766);
IkReal gconst143=(r01*x6766);
IkReal x6768=r02*r02;
IkReal x6769=((1.0)*sj0);
IkReal x6770=(cj0*r12);
CheckValue<IkReal> x6774=IKPowWithIntegerCheck(((-1.0)+x6768),-1);
if(!x6774.valid){
continue;
}
IkReal x6771=x6774.value;
if((((1.0)+(((-1.0)*x6768)))) < -0.00001)
continue;
IkReal x6772=IKsqrt(((1.0)+(((-1.0)*x6768))));
IkReal x6773=(x6771*x6772);
j4eval[0]=((IKabs((x6770+(((-1.0)*r02*x6769)))))+(IKabs((((sj0*x6773))+((r02*x6770*x6773))+(((-1.0)*x6768*x6769*x6773))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6775=((1.0)*sj0);
CheckValue<IkReal> x6776 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6775))+((cj0*r12)))),IkReal(((((-1.0)*gconst142*r00*x6775))+((cj0*gconst143*r11))+(((-1.0)*gconst143*r01*x6775))+((cj0*gconst142*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6776.valid){
continue;
}
CheckValue<IkReal> x6777=IKPowWithIntegerCheck(IKsign((((gconst143*r20))+(((-1.0)*gconst142*r21)))),-1);
if(!x6777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6776.value)+(((1.5707963267949)*(x6777.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6778=IKsin(j4);
IkReal x6779=IKcos(j4);
IkReal x6780=(cj1*cj2);
IkReal x6781=(gconst143*r11);
IkReal x6782=((1.0)*sj1);
IkReal x6783=(gconst142*x6779);
IkReal x6784=((1.0)*x6778);
IkReal x6785=(gconst143*x6779);
evalcond[0]=((((-1.0)*gconst143*r21*x6784))+((r22*x6779))+(((-1.0)*gconst142*r20*x6784)));
evalcond[1]=(cj0+((r02*x6779))+(((-1.0)*gconst143*r01*x6784))+(((-1.0)*gconst142*r00*x6784)));
evalcond[2]=(sj0+((r12*x6779))+(((-1.0)*gconst142*r10*x6784))+(((-1.0)*x6781*x6784)));
evalcond[3]=(((r20*x6783))+(((-1.0)*cj2*x6782))+((cj1*sj2))+((r22*x6778))+((r21*x6785)));
evalcond[4]=(((r02*x6778))+((sj0*sj1*sj2))+((r00*x6783))+((r01*x6785))+((sj0*x6780)));
evalcond[5]=(((r12*x6778))+(((-1.0)*cj0*x6780))+((r10*x6783))+(((-1.0)*cj0*sj2*x6782))+((x6779*x6781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6786 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst142*r20*sj0))+((gconst143*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6786.valid){
continue;
}
CheckValue<IkReal> x6787=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r01))+((gconst143*r00)))),-1);
if(!x6787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6786.value)+(((1.5707963267949)*(x6787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6788=IKsin(j4);
IkReal x6789=IKcos(j4);
IkReal x6790=(cj1*cj2);
IkReal x6791=(gconst143*r11);
IkReal x6792=((1.0)*sj1);
IkReal x6793=(gconst142*x6789);
IkReal x6794=((1.0)*x6788);
IkReal x6795=(gconst143*x6789);
evalcond[0]=(((r22*x6789))+(((-1.0)*gconst142*r20*x6794))+(((-1.0)*gconst143*r21*x6794)));
evalcond[1]=((((-1.0)*gconst142*r00*x6794))+cj0+((r02*x6789))+(((-1.0)*gconst143*r01*x6794)));
evalcond[2]=(sj0+((r12*x6789))+(((-1.0)*gconst142*r10*x6794))+(((-1.0)*x6791*x6794)));
evalcond[3]=(((r21*x6795))+((cj1*sj2))+((r20*x6793))+((r22*x6788))+(((-1.0)*cj2*x6792)));
evalcond[4]=(((r00*x6793))+((r01*x6795))+((sj0*x6790))+((r02*x6788))+((sj0*sj1*sj2)));
evalcond[5]=(((r12*x6788))+(((-1.0)*cj0*sj2*x6792))+(((-1.0)*cj0*x6790))+((x6789*x6791))+((r10*x6793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6796 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst142*r20))+((cj0*gconst143*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6796.valid){
continue;
}
CheckValue<IkReal> x6797=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r10))+((gconst142*r11)))),-1);
if(!x6797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6796.value)+(((1.5707963267949)*(x6797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6798=IKsin(j4);
IkReal x6799=IKcos(j4);
IkReal x6800=(cj1*cj2);
IkReal x6801=(gconst143*r11);
IkReal x6802=((1.0)*sj1);
IkReal x6803=(gconst142*x6799);
IkReal x6804=((1.0)*x6798);
IkReal x6805=(gconst143*x6799);
evalcond[0]=(((r22*x6799))+(((-1.0)*gconst143*r21*x6804))+(((-1.0)*gconst142*r20*x6804)));
evalcond[1]=(((r02*x6799))+cj0+(((-1.0)*gconst142*r00*x6804))+(((-1.0)*gconst143*r01*x6804)));
evalcond[2]=(sj0+(((-1.0)*gconst142*r10*x6804))+((r12*x6799))+(((-1.0)*x6801*x6804)));
evalcond[3]=(((r22*x6798))+(((-1.0)*cj2*x6802))+((r21*x6805))+((cj1*sj2))+((r20*x6803)));
evalcond[4]=(((r02*x6798))+((sj0*x6800))+((r01*x6805))+((r00*x6803))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*cj0*sj2*x6802))+((x6799*x6801))+((r10*x6803))+((r12*x6798))+(((-1.0)*cj0*x6800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6806=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x6806;
j4eval[1]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6806);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6807=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x6807;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x6807);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6808=cj5*cj5;
IkReal x6809=r00*r00;
IkReal x6810=(r00*sj5);
IkReal x6811=(cj5*r01);
IkReal x6812=(((x6808*(r01*r01)))+(((2.0)*x6810*x6811))+(((-1.0)*x6808*x6809))+x6809+(r02*r02));
j4eval[0]=x6812;
j4eval[1]=((IKabs(r02))+(IKabs((x6811+x6810))));
j4eval[2]=IKsign(x6812);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6813=cj5*cj5;
IkReal x6814=r00*r00;
IkReal x6815=(r00*sj5);
IkReal x6816=(cj5*r01);
CheckValue<IkReal> x6817 = IKatan2WithCheck(IkReal((x6815+x6816)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6817.valid){
continue;
}
CheckValue<IkReal> x6818=IKPowWithIntegerCheck(IKsign(((((2.0)*x6815*x6816))+((x6813*(r01*r01)))+(((-1.0)*x6813*x6814))+x6814+(r02*r02))),-1);
if(!x6818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6817.value)+(((1.5707963267949)*(x6818.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6819=IKcos(j4);
IkReal x6820=IKsin(j4);
IkReal x6821=(r00*sj5);
IkReal x6822=(cj5*r01);
IkReal x6823=((1.0)*cj2);
IkReal x6824=(r20*sj5);
IkReal x6825=(cj5*r21);
IkReal x6826=(cj5*r11);
IkReal x6827=(r10*sj5);
IkReal x6828=((1.0)*x6820);
evalcond[0]=(((r02*x6820))+((x6819*x6821))+((x6819*x6822)));
evalcond[1]=((((-1.0)*x6824*x6828))+((r22*x6819))+(((-1.0)*x6825*x6828)));
evalcond[2]=(((r12*x6819))+(((-1.0)*x6827*x6828))+(((-1.0)*x6826*x6828)));
evalcond[3]=((1.0)+((r02*x6819))+(((-1.0)*x6821*x6828))+(((-1.0)*x6822*x6828)));
evalcond[4]=(((r22*x6820))+((cj1*sj2))+(((-1.0)*sj1*x6823))+((x6819*x6824))+((x6819*x6825)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x6820))+((x6819*x6826))+((x6819*x6827))+(((-1.0)*cj1*x6823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6829 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6829.valid){
continue;
}
CheckValue<IkReal> x6830=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x6830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6829.value)+(((1.5707963267949)*(x6830.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6831=IKcos(j4);
IkReal x6832=IKsin(j4);
IkReal x6833=(r00*sj5);
IkReal x6834=(cj5*r01);
IkReal x6835=((1.0)*cj2);
IkReal x6836=(r20*sj5);
IkReal x6837=(cj5*r21);
IkReal x6838=(cj5*r11);
IkReal x6839=(r10*sj5);
IkReal x6840=((1.0)*x6832);
evalcond[0]=(((r02*x6832))+((x6831*x6834))+((x6831*x6833)));
evalcond[1]=(((r22*x6831))+(((-1.0)*x6836*x6840))+(((-1.0)*x6837*x6840)));
evalcond[2]=((((-1.0)*x6839*x6840))+((r12*x6831))+(((-1.0)*x6838*x6840)));
evalcond[3]=((1.0)+((r02*x6831))+(((-1.0)*x6834*x6840))+(((-1.0)*x6833*x6840)));
evalcond[4]=(((r22*x6832))+((x6831*x6836))+((x6831*x6837))+((cj1*sj2))+(((-1.0)*sj1*x6835)));
evalcond[5]=(((x6831*x6839))+((x6831*x6838))+(((-1.0)*sj1*sj2))+((r12*x6832))+(((-1.0)*cj1*x6835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6841 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6841.valid){
continue;
}
CheckValue<IkReal> x6842=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x6842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6841.value)+(((1.5707963267949)*(x6842.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6843=IKcos(j4);
IkReal x6844=IKsin(j4);
IkReal x6845=(r00*sj5);
IkReal x6846=(cj5*r01);
IkReal x6847=((1.0)*cj2);
IkReal x6848=(r20*sj5);
IkReal x6849=(cj5*r21);
IkReal x6850=(cj5*r11);
IkReal x6851=(r10*sj5);
IkReal x6852=((1.0)*x6844);
evalcond[0]=(((x6843*x6846))+((x6843*x6845))+((r02*x6844)));
evalcond[1]=(((r22*x6843))+(((-1.0)*x6848*x6852))+(((-1.0)*x6849*x6852)));
evalcond[2]=(((r12*x6843))+(((-1.0)*x6851*x6852))+(((-1.0)*x6850*x6852)));
evalcond[3]=((1.0)+(((-1.0)*x6846*x6852))+(((-1.0)*x6845*x6852))+((r02*x6843)));
evalcond[4]=(((r22*x6844))+((cj1*sj2))+(((-1.0)*sj1*x6847))+((x6843*x6849))+((x6843*x6848)));
evalcond[5]=(((r12*x6844))+(((-1.0)*sj1*sj2))+(((-1.0)*cj1*x6847))+((x6843*x6850))+((x6843*x6851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6853=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x6853;
j4eval[1]=IKsign(x6853);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6854=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x6854;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x6854);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6855=(sj1*sj2);
IkReal x6856=((1.0)*r02);
IkReal x6857=(cj1*cj2);
IkReal x6858=(r00*sj5);
IkReal x6859=(cj5*r01);
IkReal x6860=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x6860;
j4eval[1]=((IKabs(((((-1.0)*x6856*x6857))+(((-1.0)*x6855*x6856)))))+(IKabs((((x6857*x6858))+((x6857*x6859))+((x6855*x6859))+((x6855*x6858))))));
j4eval[2]=IKsign(x6860);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6861=(sj1*sj2);
IkReal x6862=((1.0)*r02);
IkReal x6863=(cj1*cj2);
IkReal x6864=(r00*sj5);
IkReal x6865=(cj5*r01);
CheckValue<IkReal> x6866 = IKatan2WithCheck(IkReal((((x6863*x6865))+((x6863*x6864))+((x6861*x6865))+((x6861*x6864)))),IkReal(((((-1.0)*x6862*x6863))+(((-1.0)*x6861*x6862)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6866.valid){
continue;
}
CheckValue<IkReal> x6867=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x6867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6866.value)+(((1.5707963267949)*(x6867.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6868=IKcos(j4);
IkReal x6869=IKsin(j4);
IkReal x6870=(r00*sj5);
IkReal x6871=(cj5*r01);
IkReal x6872=(r20*sj5);
IkReal x6873=(cj5*r21);
IkReal x6874=(cj5*r11);
IkReal x6875=(r10*sj5);
IkReal x6876=((1.0)*x6869);
evalcond[0]=(((r02*x6869))+((x6868*x6871))+((x6868*x6870)));
evalcond[1]=(((r22*x6868))+(((-1.0)*x6872*x6876))+(((-1.0)*x6873*x6876)));
evalcond[2]=((((-1.0)*x6875*x6876))+((r12*x6868))+(((-1.0)*x6874*x6876)));
evalcond[3]=((-1.0)+((r02*x6868))+(((-1.0)*x6871*x6876))+(((-1.0)*x6870*x6876)));
evalcond[4]=(((r12*x6869))+((sj1*sj2))+((x6868*x6875))+((x6868*x6874))+((cj1*cj2)));
evalcond[5]=(((r22*x6869))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x6868*x6873))+((x6868*x6872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6877 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6877.valid){
continue;
}
CheckValue<IkReal> x6878=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x6878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6877.value)+(((1.5707963267949)*(x6878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6879=IKcos(j4);
IkReal x6880=IKsin(j4);
IkReal x6881=(r00*sj5);
IkReal x6882=(cj5*r01);
IkReal x6883=(r20*sj5);
IkReal x6884=(cj5*r21);
IkReal x6885=(cj5*r11);
IkReal x6886=(r10*sj5);
IkReal x6887=((1.0)*x6880);
evalcond[0]=(((x6879*x6882))+((x6879*x6881))+((r02*x6880)));
evalcond[1]=(((r22*x6879))+(((-1.0)*x6884*x6887))+(((-1.0)*x6883*x6887)));
evalcond[2]=((((-1.0)*x6886*x6887))+((r12*x6879))+(((-1.0)*x6885*x6887)));
evalcond[3]=((-1.0)+((r02*x6879))+(((-1.0)*x6881*x6887))+(((-1.0)*x6882*x6887)));
evalcond[4]=(((x6879*x6886))+((x6879*x6885))+((sj1*sj2))+((cj1*cj2))+((r12*x6880)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x6879*x6884))+((x6879*x6883))+((r22*x6880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6888 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6888.valid){
continue;
}
CheckValue<IkReal> x6889=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x6889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6888.value)+(((1.5707963267949)*(x6889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6890=IKcos(j4);
IkReal x6891=IKsin(j4);
IkReal x6892=(r00*sj5);
IkReal x6893=(cj5*r01);
IkReal x6894=(r20*sj5);
IkReal x6895=(cj5*r21);
IkReal x6896=(cj5*r11);
IkReal x6897=(r10*sj5);
IkReal x6898=((1.0)*x6891);
evalcond[0]=(((r02*x6891))+((x6890*x6892))+((x6890*x6893)));
evalcond[1]=((((-1.0)*x6895*x6898))+(((-1.0)*x6894*x6898))+((r22*x6890)));
evalcond[2]=((((-1.0)*x6896*x6898))+(((-1.0)*x6897*x6898))+((r12*x6890)));
evalcond[3]=((-1.0)+((r02*x6890))+(((-1.0)*x6892*x6898))+(((-1.0)*x6893*x6898)));
evalcond[4]=(((r12*x6891))+((sj1*sj2))+((cj1*cj2))+((x6890*x6896))+((x6890*x6897)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r22*x6891))+((x6890*x6894))+((x6890*x6895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6900 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6900)==0){
continue;
}
IkReal x6899=pow(x6900,-0.5);
CheckValue<IkReal> x6901 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6901.valid){
continue;
}
IkReal gconst144=((-1.0)*(x6901.value));
IkReal gconst145=(r10*x6899);
IkReal gconst146=(r11*x6899);
CheckValue<IkReal> x6902 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6902.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6902.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6905 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6905.valid){
continue;
}
IkReal x6903=((-1.0)*(x6905.value));
IkReal x6904=x6899;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x6903;
IkReal gconst144=x6903;
IkReal gconst145=(r10*x6904);
IkReal gconst146=(r11*x6904);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6906=((1.0)*sj0);
CheckValue<IkReal> x6907 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6906))+((cj0*r12)))),IkReal((((cj0*gconst146*r11))+((cj0*gconst145*r10))+(((-1.0)*gconst145*r00*x6906))+(((-1.0)*gconst146*r01*x6906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6907.valid){
continue;
}
CheckValue<IkReal> x6908=IKPowWithIntegerCheck(IKsign((((gconst146*r20))+(((-1.0)*gconst145*r21)))),-1);
if(!x6908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6907.value)+(((1.5707963267949)*(x6908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6909=IKsin(j4);
IkReal x6910=IKcos(j4);
IkReal x6911=(cj1*cj2);
IkReal x6912=(gconst146*r11);
IkReal x6913=((1.0)*cj0);
IkReal x6914=(sj1*sj2);
IkReal x6915=(gconst146*r01);
IkReal x6916=(gconst146*r21);
IkReal x6917=(gconst145*x6910);
IkReal x6918=((1.0)*x6909);
IkReal x6919=(gconst145*x6918);
evalcond[0]=(((r22*x6910))+(((-1.0)*r20*x6919))+(((-1.0)*x6916*x6918)));
evalcond[1]=(cj0+((r02*x6910))+(((-1.0)*r00*x6919))+(((-1.0)*x6915*x6918)));
evalcond[2]=((((-1.0)*x6912*x6918))+sj0+((r12*x6910))+(((-1.0)*r10*x6919)));
evalcond[3]=(((r22*x6909))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x6910*x6916))+((r20*x6917)));
evalcond[4]=(((r00*x6917))+((sj0*x6914))+((sj0*x6911))+((r02*x6909))+((x6910*x6915)));
evalcond[5]=((((-1.0)*x6911*x6913))+((r10*x6917))+((r12*x6909))+((x6910*x6912))+(((-1.0)*x6913*x6914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6920 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst145*r20*sj0))+((gconst146*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6920.valid){
continue;
}
CheckValue<IkReal> x6921=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r01))+((gconst146*r00)))),-1);
if(!x6921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6920.value)+(((1.5707963267949)*(x6921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6922=IKsin(j4);
IkReal x6923=IKcos(j4);
IkReal x6924=(cj1*cj2);
IkReal x6925=(gconst146*r11);
IkReal x6926=((1.0)*cj0);
IkReal x6927=(sj1*sj2);
IkReal x6928=(gconst146*r01);
IkReal x6929=(gconst146*r21);
IkReal x6930=(gconst145*x6923);
IkReal x6931=((1.0)*x6922);
IkReal x6932=(gconst145*x6931);
evalcond[0]=(((r22*x6923))+(((-1.0)*r20*x6932))+(((-1.0)*x6929*x6931)));
evalcond[1]=(cj0+(((-1.0)*r00*x6932))+((r02*x6923))+(((-1.0)*x6928*x6931)));
evalcond[2]=((((-1.0)*r10*x6932))+sj0+(((-1.0)*x6925*x6931))+((r12*x6923)));
evalcond[3]=(((r20*x6930))+((x6923*x6929))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r22*x6922)));
evalcond[4]=(((sj0*x6924))+((sj0*x6927))+((x6923*x6928))+((r00*x6930))+((r02*x6922)));
evalcond[5]=(((x6923*x6925))+((r10*x6930))+(((-1.0)*x6924*x6926))+((r12*x6922))+(((-1.0)*x6926*x6927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6935 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6935)==0){
continue;
}
IkReal x6933=pow(x6935,-0.5);
IkReal x6934=((-1.0)*x6933);
CheckValue<IkReal> x6936 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6936.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x6936.value))));
IkReal gconst148=(r10*x6934);
IkReal gconst149=(r11*x6934);
CheckValue<IkReal> x6937 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6937.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6937.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x6941 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6941.valid){
continue;
}
IkReal x6938=((1.0)*(x6941.value));
IkReal x6939=x6933;
IkReal x6940=((-1.0)*x6939);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6938)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6938)));
IkReal gconst148=(r10*x6940);
IkReal gconst149=(r11*x6940);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6945 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6945.valid){
continue;
}
IkReal x6942=((1.0)*(x6945.value));
IkReal x6943=x6933;
IkReal x6944=((-1.0)*x6943);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6942)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6942)));
IkReal gconst148=(r10*x6944);
IkReal gconst149=(r11*x6944);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6949 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x6949.valid){
continue;
}
IkReal x6946=((1.0)*(x6949.value));
IkReal x6947=x6933;
IkReal x6948=((-1.0)*x6947);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6946)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6946)));
IkReal gconst148=(r10*x6948);
IkReal gconst149=(r11*x6948);
IkReal x6950=r12*r12;
IkReal x6951=(r02*sj0);
IkReal x6952=((1.0)*x6950);
CheckValue<IkReal> x6956=IKPowWithIntegerCheck(((-1.0)+x6950),-1);
if(!x6956.valid){
continue;
}
IkReal x6953=x6956.value;
if((((1.0)+(((-1.0)*x6952)))) < -0.00001)
continue;
IkReal x6954=IKsqrt(((1.0)+(((-1.0)*x6952))));
IkReal x6955=(cj0*x6953*x6954);
j4eval[0]=((IKabs(((((-1.0)*x6952*x6955))+x6955+((r12*x6951*x6953*x6954)))))+(IKabs(((((-1.0)*x6951))+((cj0*r12))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6957=((1.0)*sj0);
CheckValue<IkReal> x6958 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6957))+((cj0*r12)))),IkReal((((cj0*gconst149*r11))+(((-1.0)*gconst149*r01*x6957))+((cj0*gconst148*r10))+(((-1.0)*gconst148*r00*x6957)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6958.valid){
continue;
}
CheckValue<IkReal> x6959=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r21))+((gconst149*r20)))),-1);
if(!x6959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6958.value)+(((1.5707963267949)*(x6959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6960=IKsin(j4);
IkReal x6961=IKcos(j4);
IkReal x6962=(cj1*cj2);
IkReal x6963=((1.0)*sj1);
IkReal x6964=(gconst148*x6961);
IkReal x6965=(gconst149*x6961);
IkReal x6966=((1.0)*x6960);
evalcond[0]=((((-1.0)*gconst149*r21*x6966))+(((-1.0)*gconst148*r20*x6966))+((r22*x6961)));
evalcond[1]=((((-1.0)*gconst148*r00*x6966))+cj0+(((-1.0)*gconst149*r01*x6966))+((r02*x6961)));
evalcond[2]=((((-1.0)*gconst149*r11*x6966))+sj0+(((-1.0)*gconst148*r10*x6966))+((r12*x6961)));
evalcond[3]=(((r21*x6965))+((r22*x6960))+((cj1*sj2))+(((-1.0)*cj2*x6963))+((r20*x6964)));
evalcond[4]=(((r01*x6965))+((r00*x6964))+((sj0*x6962))+((r02*x6960))+((sj0*sj1*sj2)));
evalcond[5]=(((r10*x6964))+(((-1.0)*cj0*x6962))+(((-1.0)*cj0*sj2*x6963))+((r11*x6965))+((r12*x6960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6967 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst149*r21*sj0))+((gconst148*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6967.valid){
continue;
}
CheckValue<IkReal> x6968=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r01))+((gconst149*r00)))),-1);
if(!x6968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6967.value)+(((1.5707963267949)*(x6968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6969=IKsin(j4);
IkReal x6970=IKcos(j4);
IkReal x6971=(cj1*cj2);
IkReal x6972=((1.0)*sj1);
IkReal x6973=(gconst148*x6970);
IkReal x6974=(gconst149*x6970);
IkReal x6975=((1.0)*x6969);
evalcond[0]=(((r22*x6970))+(((-1.0)*gconst148*r20*x6975))+(((-1.0)*gconst149*r21*x6975)));
evalcond[1]=((((-1.0)*gconst148*r00*x6975))+cj0+(((-1.0)*gconst149*r01*x6975))+((r02*x6970)));
evalcond[2]=(((r12*x6970))+sj0+(((-1.0)*gconst148*r10*x6975))+(((-1.0)*gconst149*r11*x6975)));
evalcond[3]=(((r21*x6974))+((r22*x6969))+((cj1*sj2))+(((-1.0)*cj2*x6972))+((r20*x6973)));
evalcond[4]=(((r00*x6973))+((r01*x6974))+((r02*x6969))+((sj0*x6971))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*cj0*x6971))+(((-1.0)*cj0*sj2*x6972))+((r11*x6974))+((r10*x6973))+((r12*x6969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6976=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r10))+((gconst148*r11)))),-1);
if(!x6976.valid){
continue;
}
CheckValue<IkReal> x6977 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r20))+((cj0*gconst149*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6976.value)))+(x6977.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6978=IKsin(j4);
IkReal x6979=IKcos(j4);
IkReal x6980=(cj1*cj2);
IkReal x6981=((1.0)*sj1);
IkReal x6982=(gconst148*x6979);
IkReal x6983=(gconst149*x6979);
IkReal x6984=((1.0)*x6978);
evalcond[0]=(((r22*x6979))+(((-1.0)*gconst149*r21*x6984))+(((-1.0)*gconst148*r20*x6984)));
evalcond[1]=(cj0+(((-1.0)*gconst148*r00*x6984))+((r02*x6979))+(((-1.0)*gconst149*r01*x6984)));
evalcond[2]=(((r12*x6979))+sj0+(((-1.0)*gconst149*r11*x6984))+(((-1.0)*gconst148*r10*x6984)));
evalcond[3]=(((r22*x6978))+((cj1*sj2))+((r20*x6982))+((r21*x6983))+(((-1.0)*cj2*x6981)));
evalcond[4]=(((r02*x6978))+((r00*x6982))+((sj0*sj1*sj2))+((r01*x6983))+((sj0*x6980)));
evalcond[5]=(((r12*x6978))+((r10*x6982))+(((-1.0)*cj0*x6980))+(((-1.0)*cj0*sj2*x6981))+((r11*x6983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6985=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x6985;
j4eval[1]=IKsign(x6985);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6986=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x6986;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x6986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6987=cj5*cj5;
IkReal x6988=r10*r10;
IkReal x6989=(cj5*r11);
IkReal x6990=(r10*sj5);
IkReal x6991=((r12*r12)+((x6987*(r11*r11)))+(((-1.0)*x6987*x6988))+(((2.0)*x6989*x6990))+x6988);
j4eval[0]=x6991;
j4eval[1]=IKsign(x6991);
j4eval[2]=((IKabs(r12))+(IKabs((x6990+x6989))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6992=cj5*cj5;
IkReal x6993=r10*r10;
IkReal x6994=(r10*sj5);
IkReal x6995=(cj5*r11);
CheckValue<IkReal> x6996 = IKatan2WithCheck(IkReal((x6994+x6995)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6996.valid){
continue;
}
CheckValue<IkReal> x6997=IKPowWithIntegerCheck(IKsign((((x6992*(r11*r11)))+(((-1.0)*x6992*x6993))+(r12*r12)+(((2.0)*x6994*x6995))+x6993)),-1);
if(!x6997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6996.value)+(((1.5707963267949)*(x6997.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6998=IKcos(j4);
IkReal x6999=IKsin(j4);
IkReal x7000=(r00*sj5);
IkReal x7001=(cj5*r01);
IkReal x7002=(r20*sj5);
IkReal x7003=(cj5*r21);
IkReal x7004=(cj5*r11);
IkReal x7005=(r10*sj5);
IkReal x7006=((1.0)*x6999);
evalcond[0]=(((r12*x6999))+((x6998*x7004))+((x6998*x7005)));
evalcond[1]=((((-1.0)*x7003*x7006))+(((-1.0)*x7002*x7006))+((r22*x6998)));
evalcond[2]=(((r02*x6998))+(((-1.0)*x7001*x7006))+(((-1.0)*x7000*x7006)));
evalcond[3]=((1.0)+((r12*x6998))+(((-1.0)*x7005*x7006))+(((-1.0)*x7004*x7006)));
evalcond[4]=(((r02*x6999))+((x6998*x7000))+((x6998*x7001))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x6998*x7002))+((x6998*x7003))+((r22*x6999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7007 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7007.valid){
continue;
}
CheckValue<IkReal> x7008=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x7008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7007.value)+(((1.5707963267949)*(x7008.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7009=IKcos(j4);
IkReal x7010=IKsin(j4);
IkReal x7011=(r00*sj5);
IkReal x7012=(cj5*r01);
IkReal x7013=(r20*sj5);
IkReal x7014=(cj5*r21);
IkReal x7015=(cj5*r11);
IkReal x7016=(r10*sj5);
IkReal x7017=((1.0)*x7010);
evalcond[0]=(((x7009*x7015))+((x7009*x7016))+((r12*x7010)));
evalcond[1]=((((-1.0)*x7013*x7017))+((r22*x7009))+(((-1.0)*x7014*x7017)));
evalcond[2]=((((-1.0)*x7011*x7017))+(((-1.0)*x7012*x7017))+((r02*x7009)));
evalcond[3]=((1.0)+(((-1.0)*x7015*x7017))+((r12*x7009))+(((-1.0)*x7016*x7017)));
evalcond[4]=(((r02*x7010))+((sj1*sj2))+((x7009*x7011))+((x7009*x7012))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r22*x7010))+((x7009*x7013))+((x7009*x7014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7018=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x7018.valid){
continue;
}
CheckValue<IkReal> x7019 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7018.value)))+(x7019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7020=IKcos(j4);
IkReal x7021=IKsin(j4);
IkReal x7022=(r00*sj5);
IkReal x7023=(cj5*r01);
IkReal x7024=(r20*sj5);
IkReal x7025=(cj5*r21);
IkReal x7026=(cj5*r11);
IkReal x7027=(r10*sj5);
IkReal x7028=((1.0)*x7021);
evalcond[0]=(((x7020*x7026))+((x7020*x7027))+((r12*x7021)));
evalcond[1]=((((-1.0)*x7025*x7028))+(((-1.0)*x7024*x7028))+((r22*x7020)));
evalcond[2]=(((r02*x7020))+(((-1.0)*x7022*x7028))+(((-1.0)*x7023*x7028)));
evalcond[3]=((1.0)+((r12*x7020))+(((-1.0)*x7027*x7028))+(((-1.0)*x7026*x7028)));
evalcond[4]=(((x7020*x7023))+((x7020*x7022))+((sj1*sj2))+((r02*x7021))+((cj1*cj2)));
evalcond[5]=(((x7020*x7024))+((x7020*x7025))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r22*x7021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7029=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x7029;
j4eval[1]=IKsign(x7029);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7030=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x7030;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x7030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7031=(cj2*sj1);
IkReal x7032=(cj1*sj2);
IkReal x7033=(r10*sj5);
IkReal x7034=((1.0)*cj5);
IkReal x7035=(((r01*sj5))+(((-1.0)*r00*x7034)));
j4eval[0]=x7035;
j4eval[1]=IKsign(x7035);
j4eval[2]=((IKabs(((((-1.0)*x7031*x7033))+((x7032*x7033))+((cj5*r11*x7032))+(((-1.0)*r11*x7031*x7034)))))+(IKabs((((r12*x7031))+(((-1.0)*r12*x7032))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7036=(cj2*sj1);
IkReal x7037=(cj1*sj2);
IkReal x7038=(cj5*r11);
IkReal x7039=(r10*sj5);
CheckValue<IkReal> x7040=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x7040.valid){
continue;
}
CheckValue<IkReal> x7041 = IKatan2WithCheck(IkReal(((((-1.0)*x7036*x7038))+(((-1.0)*x7036*x7039))+((x7037*x7038))+((x7037*x7039)))),IkReal((((r12*x7036))+(((-1.0)*r12*x7037)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7040.value)))+(x7041.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7042=IKcos(j4);
IkReal x7043=IKsin(j4);
IkReal x7044=(r00*sj5);
IkReal x7045=(cj5*r01);
IkReal x7046=((1.0)*cj2);
IkReal x7047=(r20*sj5);
IkReal x7048=(cj5*r21);
IkReal x7049=(cj5*r11);
IkReal x7050=(r10*sj5);
IkReal x7051=((1.0)*x7043);
evalcond[0]=(((r12*x7043))+((x7042*x7050))+((x7042*x7049)));
evalcond[1]=((((-1.0)*x7047*x7051))+(((-1.0)*x7048*x7051))+((r22*x7042)));
evalcond[2]=((((-1.0)*x7044*x7051))+((r02*x7042))+(((-1.0)*x7045*x7051)));
evalcond[3]=((-1.0)+((r12*x7042))+(((-1.0)*x7049*x7051))+(((-1.0)*x7050*x7051)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*sj1*x7046))+((r22*x7043))+((x7042*x7047))+((x7042*x7048)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*cj1*x7046))+((r02*x7043))+((x7042*x7045))+((x7042*x7044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7052 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7052.valid){
continue;
}
CheckValue<IkReal> x7053=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x7053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7052.value)+(((1.5707963267949)*(x7053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7054=IKcos(j4);
IkReal x7055=IKsin(j4);
IkReal x7056=(r00*sj5);
IkReal x7057=(cj5*r01);
IkReal x7058=((1.0)*cj2);
IkReal x7059=(r20*sj5);
IkReal x7060=(cj5*r21);
IkReal x7061=(cj5*r11);
IkReal x7062=(r10*sj5);
IkReal x7063=((1.0)*x7055);
evalcond[0]=(((x7054*x7061))+((x7054*x7062))+((r12*x7055)));
evalcond[1]=((((-1.0)*x7059*x7063))+(((-1.0)*x7060*x7063))+((r22*x7054)));
evalcond[2]=((((-1.0)*x7056*x7063))+((r02*x7054))+(((-1.0)*x7057*x7063)));
evalcond[3]=((-1.0)+(((-1.0)*x7062*x7063))+((r12*x7054))+(((-1.0)*x7061*x7063)));
evalcond[4]=((((-1.0)*sj1*x7058))+((x7054*x7060))+((cj1*sj2))+((x7054*x7059))+((r22*x7055)));
evalcond[5]=((((-1.0)*cj1*x7058))+(((-1.0)*sj1*sj2))+((r02*x7055))+((x7054*x7057))+((x7054*x7056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7064 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7064.valid){
continue;
}
CheckValue<IkReal> x7065=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x7065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7064.value)+(((1.5707963267949)*(x7065.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7066=IKcos(j4);
IkReal x7067=IKsin(j4);
IkReal x7068=(r00*sj5);
IkReal x7069=(cj5*r01);
IkReal x7070=((1.0)*cj2);
IkReal x7071=(r20*sj5);
IkReal x7072=(cj5*r21);
IkReal x7073=(cj5*r11);
IkReal x7074=(r10*sj5);
IkReal x7075=((1.0)*x7067);
evalcond[0]=(((r12*x7067))+((x7066*x7074))+((x7066*x7073)));
evalcond[1]=(((r22*x7066))+(((-1.0)*x7072*x7075))+(((-1.0)*x7071*x7075)));
evalcond[2]=((((-1.0)*x7069*x7075))+(((-1.0)*x7068*x7075))+((r02*x7066)));
evalcond[3]=((-1.0)+((r12*x7066))+(((-1.0)*x7073*x7075))+(((-1.0)*x7074*x7075)));
evalcond[4]=(((r22*x7067))+((cj1*sj2))+(((-1.0)*sj1*x7070))+((x7066*x7071))+((x7066*x7072)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x7067))+(((-1.0)*cj1*x7070))+((x7066*x7068))+((x7066*x7069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7076=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7076);
rxp0_2=(py*r00);
rxp1_0=(r21*x7076);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7077=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7077);
rxp0_2=(py*r00);
rxp1_0=(r21*x7077);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7078=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7078);
rxp0_2=(py*r00);
rxp1_0=(r21*x7078);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r00*sj5))+((cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7081=IKPowWithIntegerCheck((((r00*sj5))+((cj5*r01))),-1);
if(!x7081.valid){
continue;
}
IkReal x7079=x7081.value;
IkReal x7080=((1.0)*sj0*x7079);
cj4array[0]=((((-1.0)*cj1*cj2*x7080))+(((-1.0)*sj1*sj2*x7080)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7082=IKsin(j4);
IkReal x7083=IKcos(j4);
IkReal x7084=(cj5*r21);
IkReal x7085=(r20*sj5);
IkReal x7086=((1.0)*x7082);
evalcond[0]=(r12*x7082);
evalcond[1]=(sj0+((r12*x7083)));
evalcond[2]=((((-1.0)*x7084*x7086))+(((-1.0)*x7085*x7086)));
evalcond[3]=((((-1.0)*cj5*r01*x7086))+(((-1.0)*r00*sj5*x7086)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x7083*x7084))+((x7083*x7085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7088=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x7088.valid){
continue;
}
IkReal x7087=x7088.value;
cj4array[0]=((((-1.0)*cj1*sj2*x7087))+((cj2*sj1*x7087)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7089=IKsin(j4);
IkReal x7090=IKcos(j4);
IkReal x7091=(r00*sj5);
IkReal x7092=(cj5*r01);
IkReal x7093=((1.0)*x7089);
evalcond[0]=(r12*x7089);
evalcond[1]=(sj0+((r12*x7090)));
evalcond[2]=((((-1.0)*r20*sj5*x7093))+(((-1.0)*cj5*r21*x7093)));
evalcond[3]=((((-1.0)*x7092*x7093))+(((-1.0)*x7091*x7093)));
evalcond[4]=(((cj1*cj2*sj0))+((x7090*x7091))+((x7090*x7092))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7094=IKPowWithIntegerCheck(r12,-1);
if(!x7094.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x7094.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7095=IKsin(j4);
IkReal x7096=IKcos(j4);
IkReal x7097=(cj5*r21);
IkReal x7098=(r00*sj5);
IkReal x7099=(cj5*r01);
IkReal x7100=(r20*sj5);
IkReal x7101=((1.0)*x7095);
evalcond[0]=(r12*x7095);
evalcond[1]=((((-1.0)*x7100*x7101))+(((-1.0)*x7097*x7101)));
evalcond[2]=((((-1.0)*x7098*x7101))+(((-1.0)*x7099*x7101)));
evalcond[3]=(((x7096*x7097))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x7096*x7100)));
evalcond[4]=(((cj1*cj2*sj0))+((x7096*x7099))+((x7096*x7098))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7102=((1.0)*sj0);
CheckValue<IkReal> x7103 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7102))+((cj0*r12)))),IkReal((((cj0*cj5*r11))+((cj0*r10*sj5))+(((-1.0)*cj5*r01*x7102))+(((-1.0)*r00*sj5*x7102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7103.valid){
continue;
}
CheckValue<IkReal> x7104=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x7104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7103.value)+(((1.5707963267949)*(x7104.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7105=IKsin(j4);
IkReal x7106=IKcos(j4);
IkReal x7107=(cj1*cj2);
IkReal x7108=(r00*sj5);
IkReal x7109=(cj5*r01);
IkReal x7110=(r20*sj5);
IkReal x7111=(cj5*r21);
IkReal x7112=((1.0)*sj1);
IkReal x7113=(cj5*r11);
IkReal x7114=(r10*sj5);
IkReal x7115=((1.0)*x7105);
evalcond[0]=((((-1.0)*x7110*x7115))+(((-1.0)*x7111*x7115))+((r22*x7106)));
evalcond[1]=(cj0+((r02*x7106))+(((-1.0)*x7109*x7115))+(((-1.0)*x7108*x7115)));
evalcond[2]=(sj0+((r12*x7106))+(((-1.0)*x7113*x7115))+(((-1.0)*x7114*x7115)));
evalcond[3]=((((-1.0)*cj2*x7112))+((cj1*sj2))+((r22*x7105))+((x7106*x7110))+((x7106*x7111)));
evalcond[4]=(((r02*x7105))+((sj0*x7107))+((x7106*x7108))+((x7106*x7109))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*cj0*x7107))+(((-1.0)*cj0*sj2*x7112))+((r12*x7105))+((x7106*x7114))+((x7106*x7113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7116=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x7116.valid){
continue;
}
CheckValue<IkReal> x7117 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7116.value)))+(x7117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7118=IKsin(j4);
IkReal x7119=IKcos(j4);
IkReal x7120=(cj1*cj2);
IkReal x7121=(r00*sj5);
IkReal x7122=(cj5*r01);
IkReal x7123=(r20*sj5);
IkReal x7124=(cj5*r21);
IkReal x7125=((1.0)*sj1);
IkReal x7126=(cj5*r11);
IkReal x7127=(r10*sj5);
IkReal x7128=((1.0)*x7118);
evalcond[0]=((((-1.0)*x7123*x7128))+((r22*x7119))+(((-1.0)*x7124*x7128)));
evalcond[1]=((((-1.0)*x7121*x7128))+cj0+((r02*x7119))+(((-1.0)*x7122*x7128)));
evalcond[2]=(((r12*x7119))+sj0+(((-1.0)*x7126*x7128))+(((-1.0)*x7127*x7128)));
evalcond[3]=((((-1.0)*cj2*x7125))+((cj1*sj2))+((x7119*x7124))+((x7119*x7123))+((r22*x7118)));
evalcond[4]=(((r02*x7118))+((x7119*x7122))+((x7119*x7121))+((sj0*sj1*sj2))+((sj0*x7120)));
evalcond[5]=(((r12*x7118))+(((-1.0)*cj0*x7120))+((x7119*x7127))+((x7119*x7126))+(((-1.0)*cj0*sj2*x7125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7129 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7129.valid){
continue;
}
CheckValue<IkReal> x7130=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x7130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7129.value)+(((1.5707963267949)*(x7130.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7131=IKsin(j4);
IkReal x7132=IKcos(j4);
IkReal x7133=(cj1*cj2);
IkReal x7134=(r00*sj5);
IkReal x7135=(cj5*r01);
IkReal x7136=(r20*sj5);
IkReal x7137=(cj5*r21);
IkReal x7138=((1.0)*sj1);
IkReal x7139=(cj5*r11);
IkReal x7140=(r10*sj5);
IkReal x7141=((1.0)*x7131);
evalcond[0]=(((r22*x7132))+(((-1.0)*x7136*x7141))+(((-1.0)*x7137*x7141)));
evalcond[1]=(cj0+(((-1.0)*x7134*x7141))+(((-1.0)*x7135*x7141))+((r02*x7132)));
evalcond[2]=(sj0+(((-1.0)*x7140*x7141))+(((-1.0)*x7139*x7141))+((r12*x7132)));
evalcond[3]=(((r22*x7131))+(((-1.0)*cj2*x7138))+((cj1*sj2))+((x7132*x7136))+((x7132*x7137)));
evalcond[4]=(((sj0*x7133))+((x7132*x7134))+((x7132*x7135))+((sj0*sj1*sj2))+((r02*x7131)));
evalcond[5]=((((-1.0)*cj0*sj2*x7138))+((x7132*x7140))+(((-1.0)*cj0*x7133))+((x7132*x7139))+((r12*x7131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7142=cj1*cj1;
IkReal x7143=cj2*cj2;
IkReal x7144=(cj1*sj2);
IkReal x7145=((11300000.0)*px);
IkReal x7146=((10215200.0)*sj1);
IkReal x7147=(cj5*r10);
IkReal x7148=(r11*sj5);
IkReal x7149=(r01*sj5);
IkReal x7150=((11300000.0)*py);
IkReal x7151=(cj2*sj1);
IkReal x7152=(cj5*r00);
IkReal x7153=((1282550.0)*sj1);
IkReal x7154=((1282550.0)*x7151);
IkReal x7155=((10215200.0)*x7142);
CheckValue<IkReal> x7156=IKPowWithIntegerCheck(IKsign(((-5385329.0)+((cj2*x7144*x7146))+((x7144*x7146))+(((-5107600.0)*x7143))+((cj2*x7155))+(((-10215200.0)*cj2))+((x7143*x7155)))),-1);
if(!x7156.valid){
continue;
}
CheckValue<IkReal> x7157 = IKatan2WithCheck(IkReal((((x7149*x7153))+((x7149*x7154))+(((-1.0)*x7152*x7154))+(((-1.0)*x7152*x7153))+(((-2635000.0)*py))+((x7144*x7145))+(((299072.5)*x7148))+(((1282550.0)*x7144*x7152))+(((-1.0)*x7145*x7151))+(((-1.0)*sj1*x7145))+(((-1282550.0)*x7144*x7149))+(((-299072.5)*x7147)))),IkReal(((((-299072.5)*x7152))+(((-2635000.0)*px))+((x7150*x7151))+(((-1.0)*x7148*x7153))+(((-1.0)*x7148*x7154))+((x7147*x7153))+((x7147*x7154))+(((299072.5)*x7149))+(((1282550.0)*x7144*x7148))+((sj1*x7150))+(((-1.0)*x7144*x7150))+(((-1282550.0)*x7144*x7147)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7157.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7156.value)))+(x7157.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7158=IKsin(j0);
IkReal x7159=IKcos(j0);
IkReal x7160=((0.1135)*cj5);
IkReal x7161=((0.1135)*sj5);
IkReal x7162=((0.452)*cj1*sj2);
IkReal x7163=((0.452)*sj1*x7159);
IkReal x7164=((0.452)*sj1*x7158);
evalcond[0]=(x7164+(((-1.0)*x7158*x7162))+(((0.1054)*x7159))+((r01*x7161))+(((-1.0)*r00*x7160))+(((-1.0)*px))+((cj2*x7164)));
evalcond[1]=((((0.1054)*x7158))+((x7159*x7162))+((r11*x7161))+(((-1.0)*x7163))+(((-1.0)*py))+(((-1.0)*r10*x7160))+(((-1.0)*cj2*x7163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x7165=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x7165;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
j4eval[2]=IKsign(x7165);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7166=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x7166;
j4eval[1]=IKsign(x7166);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7167=((1.0)*sj0);
IkReal x7168=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x7168;
j4eval[1]=((IKabs((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x7167))+(((-1.0)*r00*sj5*x7167))+((cj0*r10*sj5)))))+(IKabs(((((-1.0)*r02*x7167))+((cj0*r12))))));
j4eval[2]=IKsign(x7168);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7169=((-1.0)*r21);
IkReal x7171 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7171)==0){
continue;
}
IkReal x7170=pow(x7171,-0.5);
CheckValue<IkReal> x7172 = IKatan2WithCheck(IkReal(r20),IkReal(x7169),IKFAST_ATAN2_MAGTHRESH);
if(!x7172.valid){
continue;
}
IkReal gconst0=((-1.0)*(x7172.value));
IkReal gconst1=((-1.0)*r20*x7170);
IkReal gconst2=(x7169*x7170);
CheckValue<IkReal> x7173 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7173.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7173.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7174=((-1.0)*r21);
CheckValue<IkReal> x7177 = IKatan2WithCheck(IkReal(r20),IkReal(x7174),IKFAST_ATAN2_MAGTHRESH);
if(!x7177.valid){
continue;
}
IkReal x7175=((-1.0)*(x7177.value));
IkReal x7176=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7175;
IkReal gconst0=x7175;
IkReal gconst1=((-1.0)*r20*x7176);
IkReal gconst2=(x7174*x7176);
IkReal x7178=r22*r22;
IkReal x7179=((1.0)*x7178);
CheckValue<IkReal> x7183=IKPowWithIntegerCheck(((-1.0)+x7178),-1);
if(!x7183.valid){
continue;
}
IkReal x7180=x7183.value;
if((((1.0)+(((-1.0)*x7179)))) < -0.00001)
continue;
IkReal x7181=IKsqrt(((1.0)+(((-1.0)*x7179))));
IkReal x7182=(cj0*x7180*x7181);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x7182+(((-1.0)*x7179*x7182))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7184=((-1.0)*r21);
CheckValue<IkReal> x7187 = IKatan2WithCheck(IkReal(r20),IkReal(x7184),IKFAST_ATAN2_MAGTHRESH);
if(!x7187.valid){
continue;
}
IkReal x7185=((-1.0)*(x7187.value));
IkReal x7186=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7185;
IkReal gconst0=x7185;
IkReal gconst1=((-1.0)*r20*x7186);
IkReal gconst2=(x7184*x7186);
IkReal x7188=r22*r22;
IkReal x7189=((1.0)*x7188);
CheckValue<IkReal> x7193=IKPowWithIntegerCheck(((-1.0)+x7188),-1);
if(!x7193.valid){
continue;
}
IkReal x7190=x7193.value;
if((((1.0)+(((-1.0)*x7189)))) < -0.00001)
continue;
IkReal x7191=IKsqrt(((1.0)+(((-1.0)*x7189))));
IkReal x7192=(sj0*x7190*x7191);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7192+(((-1.0)*x7189*x7192))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7194=((-1.0)*r21);
CheckValue<IkReal> x7197 = IKatan2WithCheck(IkReal(r20),IkReal(x7194),IKFAST_ATAN2_MAGTHRESH);
if(!x7197.valid){
continue;
}
IkReal x7195=((-1.0)*(x7197.value));
IkReal x7196=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7195;
IkReal gconst0=x7195;
IkReal gconst1=((-1.0)*r20*x7196);
IkReal gconst2=(x7194*x7196);
IkReal x7198=r22*r22;
IkReal x7199=((1.0)*x7198);
CheckValue<IkReal> x7204=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7199))),-1);
if(!x7204.valid){
continue;
}
IkReal x7200=x7204.value;
IkReal x7201=(sj3*x7200);
IkReal x7202=((1.0)*x7201);
IkReal x7203=((((-1.0)*x7202*(r21*r21*r21*r21)))+(((-2.0)*x7201*(r20*r20)*(r21*r21)))+(((-1.0)*sj3*x7199))+(((-1.0)*x7202*(r20*r20*r20*r20))));
j4eval[0]=x7203;
j4eval[1]=IKsign(x7203);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7205=((-1.0)*r21);
CheckValue<IkReal> x7208 = IKatan2WithCheck(IkReal(r20),IkReal(x7205),IKFAST_ATAN2_MAGTHRESH);
if(!x7208.valid){
continue;
}
IkReal x7206=((-1.0)*(x7208.value));
IkReal x7207=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7206;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x7206;
IkReal gconst1=((-1.0)*r20*x7207);
IkReal gconst2=(x7205*x7207);
IkReal x7209=r22*r22;
IkReal x7210=((1.0)*x7209);
CheckValue<IkReal> x7214=IKPowWithIntegerCheck(((-1.0)+x7209),-1);
if(!x7214.valid){
continue;
}
IkReal x7211=x7214.value;
if((((1.0)+(((-1.0)*x7210)))) < -0.00001)
continue;
IkReal x7212=IKsqrt(((1.0)+(((-1.0)*x7210))));
IkReal x7213=(cj0*x7211*x7212);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x7213+(((-1.0)*x7210*x7213))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7215=((-1.0)*r21);
CheckValue<IkReal> x7218 = IKatan2WithCheck(IkReal(r20),IkReal(x7215),IKFAST_ATAN2_MAGTHRESH);
if(!x7218.valid){
continue;
}
IkReal x7216=((-1.0)*(x7218.value));
IkReal x7217=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7216;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x7216;
IkReal gconst1=((-1.0)*r20*x7217);
IkReal gconst2=(x7215*x7217);
IkReal x7219=r22*r22;
IkReal x7220=((1.0)*x7219);
CheckValue<IkReal> x7224=IKPowWithIntegerCheck(((-1.0)+x7219),-1);
if(!x7224.valid){
continue;
}
IkReal x7221=x7224.value;
if((((1.0)+(((-1.0)*x7220)))) < -0.00001)
continue;
IkReal x7222=IKsqrt(((1.0)+(((-1.0)*x7220))));
IkReal x7223=(sj0*x7221*x7222);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7223+(((-1.0)*x7220*x7223))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7225=((-1.0)*r21);
CheckValue<IkReal> x7228 = IKatan2WithCheck(IkReal(r20),IkReal(x7225),IKFAST_ATAN2_MAGTHRESH);
if(!x7228.valid){
continue;
}
IkReal x7226=((-1.0)*(x7228.value));
IkReal x7227=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7226;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x7226;
IkReal gconst1=((-1.0)*r20*x7227);
IkReal gconst2=(x7225*x7227);
IkReal x7229=r22*r22;
CheckValue<IkReal> x7232=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7229))),-1);
if(!x7232.valid){
continue;
}
IkReal x7230=x7232.value;
IkReal x7231=(x7229+((x7230*(r21*r21*r21*r21)))+(((2.0)*x7230*(r20*r20)*(r21*r21)))+((x7230*(r20*r20*r20*r20))));
j4eval[0]=x7231;
j4eval[1]=IKsign(x7231);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7233=((-1.0)*r21);
CheckValue<IkReal> x7236 = IKatan2WithCheck(IkReal(r20),IkReal(x7233),IKFAST_ATAN2_MAGTHRESH);
if(!x7236.valid){
continue;
}
IkReal x7234=((-1.0)*(x7236.value));
IkReal x7235=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7234;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7234;
IkReal gconst1=((-1.0)*r20*x7235);
IkReal gconst2=(x7233*x7235);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x7237=((-1.0)*r21);
CheckValue<IkReal> x7240 = IKatan2WithCheck(IkReal(r20),IkReal(x7237),IKFAST_ATAN2_MAGTHRESH);
if(!x7240.valid){
continue;
}
IkReal x7238=((-1.0)*(x7240.value));
IkReal x7239=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7238;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7238;
IkReal gconst1=((-1.0)*r20*x7239);
IkReal gconst2=(x7237*x7239);
IkReal x7241=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7245=IKPowWithIntegerCheck(x7241,-1);
if(!x7245.valid){
continue;
}
IkReal x7242=x7245.value;
IkReal x7243=((1.0)*x7242);
IkReal x7244=((((-2.0)*r00*r01*r20*r21*x7242))+(((-1.0)*x7243*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x7243*(r00*r00)*(r20*r20))));
j4eval[0]=x7244;
j4eval[1]=r02;
j4eval[2]=x7241;
j4eval[3]=IKsign(x7244);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7246=((-1.0)*r21);
CheckValue<IkReal> x7249 = IKatan2WithCheck(IkReal(r20),IkReal(x7246),IKFAST_ATAN2_MAGTHRESH);
if(!x7249.valid){
continue;
}
IkReal x7247=((-1.0)*(x7249.value));
IkReal x7248=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7247;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7247;
IkReal gconst1=((-1.0)*r20*x7248);
IkReal gconst2=(x7246*x7248);
IkReal x7250=r22*r22;
CheckValue<IkReal> x7253=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7250))),-1);
if(!x7253.valid){
continue;
}
IkReal x7251=x7253.value;
IkReal x7252=(x7250+(((2.0)*x7251*(r20*r20)*(r21*r21)))+((x7251*(r21*r21*r21*r21)))+((x7251*(r20*r20*r20*r20))));
j4eval[0]=x7252;
j4eval[1]=IKsign(x7252);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7254=(gconst2*r21);
IkReal x7255=(cj1*sj2);
IkReal x7256=(gconst1*r20);
IkReal x7257=((1.0)*cj2*sj1);
CheckValue<IkReal> x7258=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7256*x7256)+(x7254*x7254)+(((2.0)*x7254*x7256)))),-1);
if(!x7258.valid){
continue;
}
CheckValue<IkReal> x7259 = IKatan2WithCheck(IkReal((((r22*x7255))+(((-1.0)*r22*x7257)))),IkReal(((((-1.0)*x7254*x7257))+((x7254*x7255))+(((-1.0)*x7256*x7257))+((x7255*x7256)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7258.value)))+(x7259.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7260=IKsin(j4);
IkReal x7261=IKcos(j4);
IkReal x7262=((1.0)*cj2);
IkReal x7263=((1.0)*gconst1);
IkReal x7264=((1.0)*x7260);
IkReal x7265=((1.0)*gconst2*x7261);
evalcond[0]=(((r22*x7261))+(((-1.0)*r20*x7260*x7263))+(((-1.0)*gconst2*r21*x7264)));
evalcond[1]=(((r12*x7261))+(((-1.0)*gconst2*r11*x7264))+(((-1.0)*r10*x7260*x7263)));
evalcond[2]=((1.0)+((r02*x7261))+(((-1.0)*r00*x7260*x7263))+(((-1.0)*gconst2*r01*x7264)));
evalcond[3]=((((-1.0)*r01*x7265))+(((-1.0)*r00*x7261*x7263))+(((-1.0)*r02*x7264)));
evalcond[4]=((((-1.0)*r22*x7264))+((cj1*sj2))+(((-1.0)*r21*x7265))+(((-1.0)*r20*x7261*x7263))+(((-1.0)*sj1*x7262)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x7264))+(((-1.0)*r11*x7265))+(((-1.0)*r10*x7261*x7263))+(((-1.0)*cj1*x7262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7266=(gconst1*r00);
IkReal x7267=(gconst2*r01);
CheckValue<IkReal> x7268=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7267*x7267)))+(((-1.0)*(r02*r02)))+(((-2.0)*x7266*x7267))+(((-1.0)*(x7266*x7266))))),-1);
if(!x7268.valid){
continue;
}
CheckValue<IkReal> x7269 = IKatan2WithCheck(IkReal(((((-1.0)*x7267))+(((-1.0)*x7266)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7268.value)))+(x7269.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7270=IKsin(j4);
IkReal x7271=IKcos(j4);
IkReal x7272=((1.0)*cj2);
IkReal x7273=((1.0)*gconst1);
IkReal x7274=((1.0)*x7270);
IkReal x7275=((1.0)*gconst2*x7271);
evalcond[0]=((((-1.0)*gconst2*r21*x7274))+(((-1.0)*r20*x7270*x7273))+((r22*x7271)));
evalcond[1]=(((r12*x7271))+(((-1.0)*r10*x7270*x7273))+(((-1.0)*gconst2*r11*x7274)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r01*x7274))+(((-1.0)*r00*x7270*x7273))+((r02*x7271)));
evalcond[3]=((((-1.0)*r00*x7271*x7273))+(((-1.0)*r02*x7274))+(((-1.0)*r01*x7275)));
evalcond[4]=((((-1.0)*r21*x7275))+(((-1.0)*r20*x7271*x7273))+(((-1.0)*r22*x7274))+((cj1*sj2))+(((-1.0)*sj1*x7272)));
evalcond[5]=((((-1.0)*r10*x7271*x7273))+(((-1.0)*r11*x7275))+(((-1.0)*r12*x7274))+(((-1.0)*sj1*sj2))+(((-1.0)*cj1*x7272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7276=IKPowWithIntegerCheck(IKsign((((gconst1*r11))+(((-1.0)*gconst2*r10)))),-1);
if(!x7276.valid){
continue;
}
CheckValue<IkReal> x7277 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r21))+((gconst1*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7276.value)))+(x7277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7278=IKsin(j4);
IkReal x7279=IKcos(j4);
IkReal x7280=((1.0)*cj2);
IkReal x7281=((1.0)*gconst1);
IkReal x7282=((1.0)*x7278);
IkReal x7283=((1.0)*gconst2*x7279);
evalcond[0]=((((-1.0)*r20*x7278*x7281))+(((-1.0)*gconst2*r21*x7282))+((r22*x7279)));
evalcond[1]=((((-1.0)*gconst2*r11*x7282))+((r12*x7279))+(((-1.0)*r10*x7278*x7281)));
evalcond[2]=((1.0)+(((-1.0)*r00*x7278*x7281))+(((-1.0)*gconst2*r01*x7282))+((r02*x7279)));
evalcond[3]=((((-1.0)*r01*x7283))+(((-1.0)*r00*x7279*x7281))+(((-1.0)*r02*x7282)));
evalcond[4]=((((-1.0)*r20*x7279*x7281))+((cj1*sj2))+(((-1.0)*r21*x7283))+(((-1.0)*sj1*x7280))+(((-1.0)*r22*x7282)));
evalcond[5]=((((-1.0)*cj1*x7280))+(((-1.0)*sj1*sj2))+(((-1.0)*r10*x7279*x7281))+(((-1.0)*r12*x7282))+(((-1.0)*r11*x7283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7284=((-1.0)*r21);
CheckValue<IkReal> x7287 = IKatan2WithCheck(IkReal(r20),IkReal(x7284),IKFAST_ATAN2_MAGTHRESH);
if(!x7287.valid){
continue;
}
IkReal x7285=((-1.0)*(x7287.value));
IkReal x7286=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7285;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7285;
IkReal gconst1=((-1.0)*r20*x7286);
IkReal gconst2=(x7284*x7286);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7288=((-1.0)*r21);
CheckValue<IkReal> x7291 = IKatan2WithCheck(IkReal(r20),IkReal(x7288),IKFAST_ATAN2_MAGTHRESH);
if(!x7291.valid){
continue;
}
IkReal x7289=((-1.0)*(x7291.value));
IkReal x7290=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7289;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7289;
IkReal gconst1=((-1.0)*r20*x7290);
IkReal gconst2=(x7288*x7290);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7292=((-1.0)*r21);
CheckValue<IkReal> x7295 = IKatan2WithCheck(IkReal(r20),IkReal(x7292),IKFAST_ATAN2_MAGTHRESH);
if(!x7295.valid){
continue;
}
IkReal x7293=((-1.0)*(x7295.value));
IkReal x7294=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7293;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7293;
IkReal gconst1=((-1.0)*r20*x7294);
IkReal gconst2=(x7292*x7294);
IkReal x7296=r22*r22;
IkReal x7297=(r12*sj1*sj2);
IkReal x7298=(cj1*cj2*r12);
CheckValue<IkReal> x7302=IKPowWithIntegerCheck(((-1.0)+x7296),-1);
if(!x7302.valid){
continue;
}
IkReal x7299=x7302.value;
if((((1.0)+(((-1.0)*x7296)))) < -0.00001)
continue;
IkReal x7300=IKsqrt(((1.0)+(((-1.0)*x7296))));
IkReal x7301=((1.0)*r22*x7299*x7300);
j4eval[0]=((IKabs(((((-1.0)*x7297*x7301))+(((-1.0)*x7298*x7301)))))+(IKabs((x7297+x7298))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7303=(gconst2*r11);
IkReal x7304=(cj1*cj2);
IkReal x7305=(sj1*sj2);
IkReal x7306=(gconst1*r10);
CheckValue<IkReal> x7307 = IKatan2WithCheck(IkReal((((r12*x7305))+((r12*x7304)))),IkReal((((x7303*x7305))+((x7303*x7304))+((x7304*x7306))+((x7305*x7306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7307.valid){
continue;
}
CheckValue<IkReal> x7308=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((2.0)*x7303*x7306))+(x7303*x7303)+(x7306*x7306))),-1);
if(!x7308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7307.value)+(((1.5707963267949)*(x7308.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7309=IKsin(j4);
IkReal x7310=IKcos(j4);
IkReal x7311=(gconst2*r21);
IkReal x7312=(gconst1*r00);
IkReal x7313=(gconst1*r20);
IkReal x7314=(gconst2*r01);
IkReal x7315=(gconst1*r10);
IkReal x7316=(gconst2*r11);
IkReal x7317=((1.0)*x7309);
IkReal x7318=((1.0)*x7310);
evalcond[0]=(((r22*x7310))+(((-1.0)*x7311*x7317))+(((-1.0)*x7313*x7317)));
evalcond[1]=(((r12*x7310))+(((-1.0)*x7316*x7317))+(((-1.0)*x7315*x7317)));
evalcond[2]=((-1.0)+((r02*x7310))+(((-1.0)*x7312*x7317))+(((-1.0)*x7314*x7317)));
evalcond[3]=((((-1.0)*x7312*x7318))+(((-1.0)*x7314*x7318))+(((-1.0)*r02*x7317)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x7316*x7318))+(((-1.0)*r12*x7317))+((cj1*cj2))+(((-1.0)*x7315*x7318)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*x7311*x7318))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x7317))+(((-1.0)*x7313*x7318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7319=(gconst1*r00);
IkReal x7320=(gconst2*r01);
CheckValue<IkReal> x7321=IKPowWithIntegerCheck(IKsign(((x7320*x7320)+(r02*r02)+(x7319*x7319)+(((2.0)*x7319*x7320)))),-1);
if(!x7321.valid){
continue;
}
CheckValue<IkReal> x7322 = IKatan2WithCheck(IkReal(((((-1.0)*x7319))+(((-1.0)*x7320)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7321.value)))+(x7322.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7323=IKsin(j4);
IkReal x7324=IKcos(j4);
IkReal x7325=(gconst2*r21);
IkReal x7326=(gconst1*r00);
IkReal x7327=(gconst1*r20);
IkReal x7328=(gconst2*r01);
IkReal x7329=(gconst1*r10);
IkReal x7330=(gconst2*r11);
IkReal x7331=((1.0)*x7323);
IkReal x7332=((1.0)*x7324);
evalcond[0]=(((r22*x7324))+(((-1.0)*x7327*x7331))+(((-1.0)*x7325*x7331)));
evalcond[1]=((((-1.0)*x7329*x7331))+((r12*x7324))+(((-1.0)*x7330*x7331)));
evalcond[2]=((-1.0)+(((-1.0)*x7326*x7331))+(((-1.0)*x7328*x7331))+((r02*x7324)));
evalcond[3]=((((-1.0)*r02*x7331))+(((-1.0)*x7326*x7332))+(((-1.0)*x7328*x7332)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r12*x7331))+(((-1.0)*x7329*x7332))+((cj1*cj2))+(((-1.0)*x7330*x7332)));
evalcond[5]=((((-1.0)*x7327*x7332))+(((-1.0)*x7325*x7332))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x7331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7333=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r11))+((gconst2*r10)))),-1);
if(!x7333.valid){
continue;
}
CheckValue<IkReal> x7334 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r21))+((gconst1*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7333.value)))+(x7334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7335=IKsin(j4);
IkReal x7336=IKcos(j4);
IkReal x7337=(gconst2*r21);
IkReal x7338=(gconst1*r00);
IkReal x7339=(gconst1*r20);
IkReal x7340=(gconst2*r01);
IkReal x7341=(gconst1*r10);
IkReal x7342=(gconst2*r11);
IkReal x7343=((1.0)*x7335);
IkReal x7344=((1.0)*x7336);
evalcond[0]=(((r22*x7336))+(((-1.0)*x7337*x7343))+(((-1.0)*x7339*x7343)));
evalcond[1]=(((r12*x7336))+(((-1.0)*x7341*x7343))+(((-1.0)*x7342*x7343)));
evalcond[2]=((-1.0)+((r02*x7336))+(((-1.0)*x7340*x7343))+(((-1.0)*x7338*x7343)));
evalcond[3]=((((-1.0)*x7340*x7344))+(((-1.0)*r02*x7343))+(((-1.0)*x7338*x7344)));
evalcond[4]=((((-1.0)*r12*x7343))+((sj1*sj2))+(((-1.0)*x7341*x7344))+(((-1.0)*x7342*x7344))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x7343))+(((-1.0)*x7337*x7344))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x7339*x7344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7345=((-1.0)*r21);
CheckValue<IkReal> x7348 = IKatan2WithCheck(IkReal(r20),IkReal(x7345),IKFAST_ATAN2_MAGTHRESH);
if(!x7348.valid){
continue;
}
IkReal x7346=((-1.0)*(x7348.value));
IkReal x7347=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7346;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7346;
IkReal gconst1=((-1.0)*r20*x7347);
IkReal gconst2=(x7345*x7347);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x7349=((-1.0)*r21);
CheckValue<IkReal> x7352 = IKatan2WithCheck(IkReal(r20),IkReal(x7349),IKFAST_ATAN2_MAGTHRESH);
if(!x7352.valid){
continue;
}
IkReal x7350=((-1.0)*(x7352.value));
IkReal x7351=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7350;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7350;
IkReal gconst1=((-1.0)*r20*x7351);
IkReal gconst2=(x7349*x7351);
IkReal x7353=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7357=IKPowWithIntegerCheck(x7353,-1);
if(!x7357.valid){
continue;
}
IkReal x7354=x7357.value;
IkReal x7355=((1.0)*x7354);
IkReal x7356=((((-1.0)*x7355*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x7355*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x7354)));
j4eval[0]=x7356;
j4eval[1]=IKsign(x7356);
j4eval[2]=r12;
j4eval[3]=x7353;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7358=((-1.0)*r21);
CheckValue<IkReal> x7361 = IKatan2WithCheck(IkReal(r20),IkReal(x7358),IKFAST_ATAN2_MAGTHRESH);
if(!x7361.valid){
continue;
}
IkReal x7359=((-1.0)*(x7361.value));
IkReal x7360=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7359;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7359;
IkReal gconst1=((-1.0)*r20*x7360);
IkReal gconst2=(x7358*x7360);
IkReal x7362=r22*r22;
IkReal x7363=(r02*sj1*sj2);
IkReal x7364=(cj1*cj2*r02);
CheckValue<IkReal> x7368=IKPowWithIntegerCheck(((-1.0)+x7362),-1);
if(!x7368.valid){
continue;
}
IkReal x7365=x7368.value;
if((((1.0)+(((-1.0)*x7362)))) < -0.00001)
continue;
IkReal x7366=IKsqrt(((1.0)+(((-1.0)*x7362))));
IkReal x7367=((1.0)*r22*x7365*x7366);
j4eval[0]=((IKabs(((((-1.0)*x7363*x7367))+(((-1.0)*x7364*x7367)))))+(IKabs((x7363+x7364))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7369=(cj1*cj2);
IkReal x7370=(gconst1*r00);
IkReal x7371=(sj1*sj2);
IkReal x7372=(gconst2*r01);
CheckValue<IkReal> x7373=IKPowWithIntegerCheck(IKsign(((x7372*x7372)+(x7370*x7370)+(((2.0)*x7370*x7372))+(r02*r02))),-1);
if(!x7373.valid){
continue;
}
CheckValue<IkReal> x7374 = IKatan2WithCheck(IkReal((((r02*x7371))+((r02*x7369)))),IkReal((((x7370*x7371))+((x7369*x7370))+((x7369*x7372))+((x7371*x7372)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7373.value)))+(x7374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7375=IKsin(j4);
IkReal x7376=IKcos(j4);
IkReal x7377=(gconst2*r21);
IkReal x7378=(gconst1*r00);
IkReal x7379=(gconst1*r20);
IkReal x7380=(gconst2*r01);
IkReal x7381=(gconst1*r10);
IkReal x7382=(gconst2*r11);
IkReal x7383=((1.0)*x7375);
IkReal x7384=((1.0)*x7376);
evalcond[0]=((((-1.0)*x7377*x7383))+(((-1.0)*x7379*x7383))+((r22*x7376)));
evalcond[1]=(((r02*x7376))+(((-1.0)*x7378*x7383))+(((-1.0)*x7380*x7383)));
evalcond[2]=((1.0)+(((-1.0)*x7381*x7383))+((r12*x7376))+(((-1.0)*x7382*x7383)));
evalcond[3]=((((-1.0)*x7381*x7384))+(((-1.0)*r12*x7383))+(((-1.0)*x7382*x7384)));
evalcond[4]=((((-1.0)*x7378*x7384))+(((-1.0)*r02*x7383))+(((-1.0)*x7380*x7384))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x7383))+(((-1.0)*x7377*x7384))+(((-1.0)*x7379*x7384))+((cj1*sj2))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7385=(gconst1*r10);
IkReal x7386=(gconst2*r11);
CheckValue<IkReal> x7387=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7385*x7386))+(((-1.0)*(x7386*x7386)))+(((-1.0)*(x7385*x7385)))+(((-1.0)*(r12*r12))))),-1);
if(!x7387.valid){
continue;
}
CheckValue<IkReal> x7388 = IKatan2WithCheck(IkReal(((((-1.0)*x7385))+(((-1.0)*x7386)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7387.value)))+(x7388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7389=IKsin(j4);
IkReal x7390=IKcos(j4);
IkReal x7391=(gconst2*r21);
IkReal x7392=(gconst1*r00);
IkReal x7393=(gconst1*r20);
IkReal x7394=(gconst2*r01);
IkReal x7395=(gconst1*r10);
IkReal x7396=(gconst2*r11);
IkReal x7397=((1.0)*x7389);
IkReal x7398=((1.0)*x7390);
evalcond[0]=((((-1.0)*x7393*x7397))+((r22*x7390))+(((-1.0)*x7391*x7397)));
evalcond[1]=((((-1.0)*x7394*x7397))+(((-1.0)*x7392*x7397))+((r02*x7390)));
evalcond[2]=((1.0)+(((-1.0)*x7396*x7397))+(((-1.0)*x7395*x7397))+((r12*x7390)));
evalcond[3]=((((-1.0)*r12*x7397))+(((-1.0)*x7396*x7398))+(((-1.0)*x7395*x7398)));
evalcond[4]=((((-1.0)*x7394*x7398))+(((-1.0)*x7392*x7398))+(((-1.0)*r02*x7397))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x7397))+(((-1.0)*x7393*x7398))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x7391*x7398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7399=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r01))+((gconst2*r00)))),-1);
if(!x7399.valid){
continue;
}
CheckValue<IkReal> x7400 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r21))+((gconst1*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7399.value)))+(x7400.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7401=IKsin(j4);
IkReal x7402=IKcos(j4);
IkReal x7403=(gconst2*r21);
IkReal x7404=(gconst1*r00);
IkReal x7405=(gconst1*r20);
IkReal x7406=(gconst2*r01);
IkReal x7407=(gconst1*r10);
IkReal x7408=(gconst2*r11);
IkReal x7409=((1.0)*x7401);
IkReal x7410=((1.0)*x7402);
evalcond[0]=((((-1.0)*x7403*x7409))+(((-1.0)*x7405*x7409))+((r22*x7402)));
evalcond[1]=(((r02*x7402))+(((-1.0)*x7404*x7409))+(((-1.0)*x7406*x7409)));
evalcond[2]=((1.0)+(((-1.0)*x7408*x7409))+(((-1.0)*x7407*x7409))+((r12*x7402)));
evalcond[3]=((((-1.0)*r12*x7409))+(((-1.0)*x7408*x7410))+(((-1.0)*x7407*x7410)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x7404*x7410))+((cj1*cj2))+(((-1.0)*x7406*x7410))+(((-1.0)*r02*x7409)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x7405*x7410))+(((-1.0)*r22*x7409))+(((-1.0)*x7403*x7410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7411=((-1.0)*r21);
CheckValue<IkReal> x7414 = IKatan2WithCheck(IkReal(r20),IkReal(x7411),IKFAST_ATAN2_MAGTHRESH);
if(!x7414.valid){
continue;
}
IkReal x7412=((-1.0)*(x7414.value));
IkReal x7413=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7412;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7412;
IkReal gconst1=((-1.0)*r20*x7413);
IkReal gconst2=(x7411*x7413);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7415=((-1.0)*r21);
CheckValue<IkReal> x7418 = IKatan2WithCheck(IkReal(r20),IkReal(x7415),IKFAST_ATAN2_MAGTHRESH);
if(!x7418.valid){
continue;
}
IkReal x7416=((-1.0)*(x7418.value));
IkReal x7417=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7416;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7416;
IkReal gconst1=((-1.0)*r20*x7417);
IkReal gconst2=(x7415*x7417);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7419=((-1.0)*r21);
CheckValue<IkReal> x7422 = IKatan2WithCheck(IkReal(r20),IkReal(x7419),IKFAST_ATAN2_MAGTHRESH);
if(!x7422.valid){
continue;
}
IkReal x7420=((-1.0)*(x7422.value));
IkReal x7421=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7420;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7420;
IkReal gconst1=((-1.0)*r20*x7421);
IkReal gconst2=(x7419*x7421);
IkReal x7423=r22*r22;
CheckValue<IkReal> x7426=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7423))),-1);
if(!x7426.valid){
continue;
}
IkReal x7424=x7426.value;
IkReal x7425=(((x7424*(r20*r20*r20*r20)))+((x7424*(r21*r21*r21*r21)))+x7423+(((2.0)*x7424*(r20*r20)*(r21*r21))));
j4eval[0]=x7425;
j4eval[1]=IKsign(x7425);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7427=(gconst2*r21);
IkReal x7428=(cj1*sj2);
IkReal x7429=(gconst1*r20);
IkReal x7430=((1.0)*cj2*sj1);
CheckValue<IkReal> x7431=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7427*x7427)+(((2.0)*x7427*x7429))+(x7429*x7429))),-1);
if(!x7431.valid){
continue;
}
CheckValue<IkReal> x7432 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7430))+((r22*x7428)))),IkReal(((((-1.0)*x7429*x7430))+(((-1.0)*x7427*x7430))+((x7428*x7429))+((x7427*x7428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7431.value)))+(x7432.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7433=IKsin(j4);
IkReal x7434=IKcos(j4);
IkReal x7435=((1.0)*sj1);
IkReal x7436=((1.0)*gconst1);
IkReal x7437=((1.0)*x7433);
IkReal x7438=((1.0)*gconst2*x7434);
evalcond[0]=((((-1.0)*gconst2*r21*x7437))+(((-1.0)*r20*x7433*x7436))+((r22*x7434)));
evalcond[1]=(((r02*x7434))+(((-1.0)*gconst2*r01*x7437))+(((-1.0)*r00*x7433*x7436)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r11*x7437))+(((-1.0)*r10*x7433*x7436))+((r12*x7434)));
evalcond[3]=((((-1.0)*r11*x7438))+(((-1.0)*r12*x7437))+(((-1.0)*r10*x7434*x7436)));
evalcond[4]=((((-1.0)*r20*x7434*x7436))+(((-1.0)*r22*x7437))+((cj1*sj2))+(((-1.0)*r21*x7438))+(((-1.0)*cj2*x7435)));
evalcond[5]=((((-1.0)*r01*x7438))+(((-1.0)*r02*x7437))+(((-1.0)*r00*x7434*x7436))+(((-1.0)*cj1*cj2))+(((-1.0)*sj2*x7435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7439=(gconst1*r10);
IkReal x7440=(gconst2*r11);
CheckValue<IkReal> x7441 = IKatan2WithCheck(IkReal(((((-1.0)*x7439))+(((-1.0)*x7440)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7441.valid){
continue;
}
CheckValue<IkReal> x7442=IKPowWithIntegerCheck(IKsign(((x7440*x7440)+(r12*r12)+(((2.0)*x7439*x7440))+(x7439*x7439))),-1);
if(!x7442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7441.value)+(((1.5707963267949)*(x7442.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7443=IKsin(j4);
IkReal x7444=IKcos(j4);
IkReal x7445=((1.0)*sj1);
IkReal x7446=((1.0)*gconst1);
IkReal x7447=((1.0)*x7443);
IkReal x7448=((1.0)*gconst2*x7444);
evalcond[0]=(((r22*x7444))+(((-1.0)*gconst2*r21*x7447))+(((-1.0)*r20*x7443*x7446)));
evalcond[1]=((((-1.0)*gconst2*r01*x7447))+(((-1.0)*r00*x7443*x7446))+((r02*x7444)));
evalcond[2]=((-1.0)+((r12*x7444))+(((-1.0)*r10*x7443*x7446))+(((-1.0)*gconst2*r11*x7447)));
evalcond[3]=((((-1.0)*r10*x7444*x7446))+(((-1.0)*r11*x7448))+(((-1.0)*r12*x7447)));
evalcond[4]=((((-1.0)*cj2*x7445))+((cj1*sj2))+(((-1.0)*r20*x7444*x7446))+(((-1.0)*r22*x7447))+(((-1.0)*r21*x7448)));
evalcond[5]=((((-1.0)*r01*x7448))+(((-1.0)*cj1*cj2))+(((-1.0)*sj2*x7445))+(((-1.0)*r02*x7447))+(((-1.0)*r00*x7444*x7446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7449=IKPowWithIntegerCheck(IKsign((((gconst1*r01))+(((-1.0)*gconst2*r00)))),-1);
if(!x7449.valid){
continue;
}
CheckValue<IkReal> x7450 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r21))+((gconst1*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7449.value)))+(x7450.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7451=IKsin(j4);
IkReal x7452=IKcos(j4);
IkReal x7453=((1.0)*sj1);
IkReal x7454=((1.0)*gconst1);
IkReal x7455=((1.0)*x7451);
IkReal x7456=((1.0)*gconst2*x7452);
evalcond[0]=(((r22*x7452))+(((-1.0)*r20*x7451*x7454))+(((-1.0)*gconst2*r21*x7455)));
evalcond[1]=(((r02*x7452))+(((-1.0)*gconst2*r01*x7455))+(((-1.0)*r00*x7451*x7454)));
evalcond[2]=((-1.0)+((r12*x7452))+(((-1.0)*r10*x7451*x7454))+(((-1.0)*gconst2*r11*x7455)));
evalcond[3]=((((-1.0)*r10*x7452*x7454))+(((-1.0)*r12*x7455))+(((-1.0)*r11*x7456)));
evalcond[4]=((((-1.0)*r20*x7452*x7454))+((cj1*sj2))+(((-1.0)*cj2*x7453))+(((-1.0)*r22*x7455))+(((-1.0)*r21*x7456)));
evalcond[5]=((((-1.0)*sj2*x7453))+(((-1.0)*r01*x7456))+(((-1.0)*cj1*cj2))+(((-1.0)*r02*x7455))+(((-1.0)*r00*x7452*x7454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7457=((-1.0)*r21);
IkReal x7458=((-1.0)*r20);
CheckValue<IkReal> x7460 = IKatan2WithCheck(IkReal(r20),IkReal(x7457),IKFAST_ATAN2_MAGTHRESH);
if(!x7460.valid){
continue;
}
IkReal x7459=((-1.0)*(x7460.value));
sj5=gconst1;
cj5=gconst2;
j5=x7459;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x7458);
rxp0_2=(py*r00);
rxp1_0=(py*x7457);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x7459;
IkReal gconst1=x7458;
IkReal gconst2=x7457;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7461=((-1.0)*r21);
IkReal x7462=((-1.0)*r20);
CheckValue<IkReal> x7464 = IKatan2WithCheck(IkReal(r20),IkReal(x7461),IKFAST_ATAN2_MAGTHRESH);
if(!x7464.valid){
continue;
}
IkReal x7463=((-1.0)*(x7464.value));
sj5=gconst1;
cj5=gconst2;
j5=x7463;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x7462);
rxp0_2=(py*r00);
rxp1_0=(py*x7461);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x7463;
IkReal gconst1=x7462;
IkReal gconst2=x7461;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7465=((-1.0)*r21);
IkReal x7466=((-1.0)*r20);
CheckValue<IkReal> x7468 = IKatan2WithCheck(IkReal(r20),IkReal(x7465),IKFAST_ATAN2_MAGTHRESH);
if(!x7468.valid){
continue;
}
IkReal x7467=((-1.0)*(x7468.value));
sj5=gconst1;
cj5=gconst2;
j5=x7467;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x7466);
rxp0_2=(py*r00);
rxp1_0=(py*x7465);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x7467;
IkReal gconst1=x7466;
IkReal gconst2=x7465;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7471=IKPowWithIntegerCheck(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01))),-1);
if(!x7471.valid){
continue;
}
IkReal x7469=x7471.value;
IkReal x7470=((1.0)*sj0*x7469);
cj4array[0]=((((-1.0)*cj1*cj2*x7470))+(((-1.0)*sj1*sj2*x7470)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7472=IKsin(j4);
IkReal x7473=IKcos(j4);
IkReal x7474=(gconst2*r21);
IkReal x7475=((1.0)*x7473);
IkReal x7476=((1.0)*x7472);
IkReal x7477=(gconst1*x7476);
evalcond[0]=((-1.0)*r12*x7472);
evalcond[1]=(sj0+((r12*x7473)));
evalcond[2]=((((-1.0)*r20*x7477))+(((-1.0)*x7474*x7476)));
evalcond[3]=((((-1.0)*r00*x7477))+(((-1.0)*gconst2*r01*x7476)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst1*r20*x7475))+(((-1.0)*x7474*x7475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7479=IKPowWithIntegerCheck(((((-1.0)*gconst2*r21))+(((-1.0)*gconst1*r20))),-1);
if(!x7479.valid){
continue;
}
IkReal x7478=x7479.value;
cj4array[0]=(((cj2*sj1*x7478))+(((-1.0)*cj1*sj2*x7478)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7480=IKsin(j4);
IkReal x7481=IKcos(j4);
IkReal x7482=(gconst1*r00);
IkReal x7483=(gconst2*r01);
IkReal x7484=((1.0)*x7481);
IkReal x7485=((1.0)*x7480);
evalcond[0]=((-1.0)*r12*x7480);
evalcond[1]=(sj0+((r12*x7481)));
evalcond[2]=((((-1.0)*gconst2*r21*x7485))+(((-1.0)*gconst1*r20*x7485)));
evalcond[3]=((((-1.0)*x7482*x7485))+(((-1.0)*x7483*x7485)));
evalcond[4]=((((-1.0)*x7482*x7484))+((cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*x7483*x7484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7486=IKPowWithIntegerCheck(r12,-1);
if(!x7486.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x7486.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7487=IKsin(j4);
IkReal x7488=IKcos(j4);
IkReal x7489=(gconst1*r00);
IkReal x7490=(gconst2*r01);
IkReal x7491=(gconst1*r20);
IkReal x7492=(gconst2*r21);
IkReal x7493=((1.0)*x7488);
IkReal x7494=((1.0)*x7487);
evalcond[0]=((-1.0)*r12*x7487);
evalcond[1]=((((-1.0)*x7491*x7494))+(((-1.0)*x7492*x7494)));
evalcond[2]=((((-1.0)*x7489*x7494))+(((-1.0)*x7490*x7494)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x7491*x7493))+(((-1.0)*x7492*x7493)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*x7489*x7493))+((sj0*sj1*sj2))+(((-1.0)*x7490*x7493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7495=(gconst2*r21);
IkReal x7496=(cj1*sj2);
IkReal x7497=(gconst1*r20);
IkReal x7498=((1.0)*cj2*sj1);
CheckValue<IkReal> x7499=IKPowWithIntegerCheck(IKsign(((x7495*x7495)+(x7497*x7497)+(r22*r22)+(((2.0)*x7495*x7497)))),-1);
if(!x7499.valid){
continue;
}
CheckValue<IkReal> x7500 = IKatan2WithCheck(IkReal((((r22*x7496))+(((-1.0)*r22*x7498)))),IkReal((((x7496*x7497))+(((-1.0)*x7495*x7498))+(((-1.0)*x7497*x7498))+((x7495*x7496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7499.value)))+(x7500.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7501=IKsin(j4);
IkReal x7502=IKcos(j4);
IkReal x7503=(cj1*cj2);
IkReal x7504=(gconst2*r21);
IkReal x7505=(gconst1*r00);
IkReal x7506=((1.0)*sj1);
IkReal x7507=(gconst1*r20);
IkReal x7508=(gconst2*r01);
IkReal x7509=(gconst1*r10);
IkReal x7510=(gconst2*r11);
IkReal x7511=((1.0)*x7501);
IkReal x7512=((1.0)*x7502);
evalcond[0]=((((-1.0)*x7507*x7511))+((r22*x7502))+(((-1.0)*x7504*x7511)));
evalcond[1]=(cj0+(((-1.0)*x7508*x7511))+((r02*x7502))+(((-1.0)*x7505*x7511)));
evalcond[2]=(sj0+((r12*x7502))+(((-1.0)*x7510*x7511))+(((-1.0)*x7509*x7511)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*x7507*x7512))+(((-1.0)*cj2*x7506))+(((-1.0)*x7504*x7512))+(((-1.0)*r22*x7511)));
evalcond[4]=(((sj0*x7503))+(((-1.0)*x7508*x7512))+(((-1.0)*r02*x7511))+((sj0*sj1*sj2))+(((-1.0)*x7505*x7512)));
evalcond[5]=((((-1.0)*x7510*x7512))+(((-1.0)*x7509*x7512))+(((-1.0)*r12*x7511))+(((-1.0)*cj0*sj2*x7506))+(((-1.0)*cj0*x7503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7513 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst2*r21*sj0))+((gconst1*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7513.valid){
continue;
}
CheckValue<IkReal> x7514=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r01))+((gconst2*r00)))),-1);
if(!x7514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7513.value)+(((1.5707963267949)*(x7514.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7515=IKsin(j4);
IkReal x7516=IKcos(j4);
IkReal x7517=(cj1*cj2);
IkReal x7518=(gconst2*r21);
IkReal x7519=(gconst1*r00);
IkReal x7520=((1.0)*sj1);
IkReal x7521=(gconst1*r20);
IkReal x7522=(gconst2*r01);
IkReal x7523=(gconst1*r10);
IkReal x7524=(gconst2*r11);
IkReal x7525=((1.0)*x7515);
IkReal x7526=((1.0)*x7516);
evalcond[0]=((((-1.0)*x7521*x7525))+((r22*x7516))+(((-1.0)*x7518*x7525)));
evalcond[1]=(cj0+(((-1.0)*x7522*x7525))+((r02*x7516))+(((-1.0)*x7519*x7525)));
evalcond[2]=(sj0+(((-1.0)*x7523*x7525))+((r12*x7516))+(((-1.0)*x7524*x7525)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj2*x7520))+(((-1.0)*x7521*x7526))+(((-1.0)*x7518*x7526))+(((-1.0)*r22*x7525)));
evalcond[4]=(((sj0*x7517))+(((-1.0)*x7522*x7526))+(((-1.0)*r02*x7525))+(((-1.0)*x7519*x7526))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*cj0*sj2*x7520))+(((-1.0)*x7523*x7526))+(((-1.0)*cj0*x7517))+(((-1.0)*x7524*x7526))+(((-1.0)*r12*x7525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7527 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r20))+((cj0*gconst2*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7527.valid){
continue;
}
CheckValue<IkReal> x7528=IKPowWithIntegerCheck(IKsign((((gconst1*r11))+(((-1.0)*gconst2*r10)))),-1);
if(!x7528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7527.value)+(((1.5707963267949)*(x7528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7529=IKsin(j4);
IkReal x7530=IKcos(j4);
IkReal x7531=(cj1*cj2);
IkReal x7532=(gconst2*r21);
IkReal x7533=(gconst1*r00);
IkReal x7534=((1.0)*sj1);
IkReal x7535=(gconst1*r20);
IkReal x7536=(gconst2*r01);
IkReal x7537=(gconst1*r10);
IkReal x7538=(gconst2*r11);
IkReal x7539=((1.0)*x7529);
IkReal x7540=((1.0)*x7530);
evalcond[0]=(((r22*x7530))+(((-1.0)*x7532*x7539))+(((-1.0)*x7535*x7539)));
evalcond[1]=(cj0+(((-1.0)*x7533*x7539))+(((-1.0)*x7536*x7539))+((r02*x7530)));
evalcond[2]=(sj0+(((-1.0)*x7538*x7539))+(((-1.0)*x7537*x7539))+((r12*x7530)));
evalcond[3]=((((-1.0)*x7535*x7540))+((cj1*sj2))+(((-1.0)*r22*x7539))+(((-1.0)*x7532*x7540))+(((-1.0)*cj2*x7534)));
evalcond[4]=((((-1.0)*x7533*x7540))+((sj0*x7531))+((sj0*sj1*sj2))+(((-1.0)*x7536*x7540))+(((-1.0)*r02*x7539)));
evalcond[5]=((((-1.0)*r12*x7539))+(((-1.0)*x7537*x7540))+(((-1.0)*x7538*x7540))+(((-1.0)*cj0*sj2*x7534))+(((-1.0)*cj0*x7531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7541=((-1.0)*r21);
CheckValue<IkReal> x7544 = IKatan2WithCheck(IkReal(r20),IkReal(x7541),IKFAST_ATAN2_MAGTHRESH);
if(!x7544.valid){
continue;
}
IkReal x7542=((-1.0)*(x7544.value));
IkReal x7543=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7542;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x7542;
IkReal gconst1=((-1.0)*r20*x7543);
IkReal gconst2=(x7541*x7543);
IkReal x7545=r22*r22;
IkReal x7546=((1.0)*x7545);
CheckValue<IkReal> x7550=IKPowWithIntegerCheck(((-1.0)+x7545),-1);
if(!x7550.valid){
continue;
}
IkReal x7547=x7550.value;
if((((1.0)+(((-1.0)*x7546)))) < -0.00001)
continue;
IkReal x7548=IKsqrt(((1.0)+(((-1.0)*x7546))));
IkReal x7549=(cj0*x7547*x7548);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x7549+(((-1.0)*x7546*x7549))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7551=((-1.0)*r21);
CheckValue<IkReal> x7554 = IKatan2WithCheck(IkReal(r20),IkReal(x7551),IKFAST_ATAN2_MAGTHRESH);
if(!x7554.valid){
continue;
}
IkReal x7552=((-1.0)*(x7554.value));
IkReal x7553=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7552;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x7552;
IkReal gconst1=((-1.0)*r20*x7553);
IkReal gconst2=(x7551*x7553);
IkReal x7555=r22*r22;
IkReal x7556=((1.0)*x7555);
CheckValue<IkReal> x7560=IKPowWithIntegerCheck(((-1.0)+x7555),-1);
if(!x7560.valid){
continue;
}
IkReal x7557=x7560.value;
if((((1.0)+(((-1.0)*x7556)))) < -0.00001)
continue;
IkReal x7558=IKsqrt(((1.0)+(((-1.0)*x7556))));
IkReal x7559=(sj0*x7557*x7558);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7556*x7559))+x7559))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7561=((-1.0)*r21);
CheckValue<IkReal> x7564 = IKatan2WithCheck(IkReal(r20),IkReal(x7561),IKFAST_ATAN2_MAGTHRESH);
if(!x7564.valid){
continue;
}
IkReal x7562=((-1.0)*(x7564.value));
IkReal x7563=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7562;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x7562;
IkReal gconst1=((-1.0)*r20*x7563);
IkReal gconst2=(x7561*x7563);
IkReal x7565=((1.0)*(r22*r22));
CheckValue<IkReal> x7569=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7565))),-1);
if(!x7569.valid){
continue;
}
IkReal x7566=x7569.value;
IkReal x7567=((1.0)*x7566);
IkReal x7568=((((-1.0)*x7567*(r21*r21*r21*r21)))+(((-2.0)*x7566*(r20*r20)*(r21*r21)))+(((-1.0)*x7565))+(((-1.0)*x7567*(r20*r20*r20*r20))));
j4eval[0]=x7568;
j4eval[1]=IKsign(x7568);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7570=((-1.0)*r21);
CheckValue<IkReal> x7573 = IKatan2WithCheck(IkReal(r20),IkReal(x7570),IKFAST_ATAN2_MAGTHRESH);
if(!x7573.valid){
continue;
}
IkReal x7571=((-1.0)*(x7573.value));
IkReal x7572=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7571;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7571;
IkReal gconst1=((-1.0)*r20*x7572);
IkReal gconst2=(x7570*x7572);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7574=((-1.0)*r21);
CheckValue<IkReal> x7577 = IKatan2WithCheck(IkReal(r20),IkReal(x7574),IKFAST_ATAN2_MAGTHRESH);
if(!x7577.valid){
continue;
}
IkReal x7575=((-1.0)*(x7577.value));
IkReal x7576=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7575;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7575;
IkReal gconst1=((-1.0)*r20*x7576);
IkReal gconst2=(x7574*x7576);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7578=((-1.0)*r21);
CheckValue<IkReal> x7581 = IKatan2WithCheck(IkReal(r20),IkReal(x7578),IKFAST_ATAN2_MAGTHRESH);
if(!x7581.valid){
continue;
}
IkReal x7579=((-1.0)*(x7581.value));
IkReal x7580=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7579;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7579;
IkReal gconst1=((-1.0)*r20*x7580);
IkReal gconst2=(x7578*x7580);
IkReal x7582=r22*r22;
IkReal x7583=(cj2*r02*sj1);
CheckValue<IkReal> x7588=IKPowWithIntegerCheck(((-1.0)+x7582),-1);
if(!x7588.valid){
continue;
}
IkReal x7584=x7588.value;
IkReal x7585=((1.0)*cj1*r02*sj2);
if((((1.0)+(((-1.0)*x7582)))) < -0.00001)
continue;
IkReal x7586=IKsqrt(((1.0)+(((-1.0)*x7582))));
IkReal x7587=(r22*x7584*x7586);
j4eval[0]=((IKabs(((((-1.0)*x7585))+x7583)))+(IKabs(((((-1.0)*x7585*x7587))+((x7583*x7587))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7589=(gconst1*r00);
IkReal x7590=(cj1*sj2);
IkReal x7591=(gconst2*r01);
IkReal x7592=((1.0)*cj2*sj1);
CheckValue<IkReal> x7593=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r11))+((gconst2*r10)))),-1);
if(!x7593.valid){
continue;
}
CheckValue<IkReal> x7594 = IKatan2WithCheck(IkReal(((((-1.0)*x7591*x7592))+(((-1.0)*x7589*x7592))+((x7589*x7590))+((x7590*x7591)))),IkReal((((cj2*r02*sj1))+(((-1.0)*r02*x7590)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7593.value)))+(x7594.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7595=IKcos(j4);
IkReal x7596=IKsin(j4);
IkReal x7597=(gconst1*r10);
IkReal x7598=((1.0)*cj2);
IkReal x7599=(gconst1*r20);
IkReal x7600=(gconst1*r00);
IkReal x7601=(gconst2*x7595);
IkReal x7602=((1.0)*x7596);
evalcond[0]=(((r01*x7601))+((r02*x7596))+((x7595*x7600)));
evalcond[1]=((((-1.0)*x7599*x7602))+((r22*x7595))+(((-1.0)*gconst2*r21*x7602)));
evalcond[2]=((((-1.0)*x7597*x7602))+(((-1.0)*gconst2*r11*x7602))+((r12*x7595)));
evalcond[3]=((1.0)+((r02*x7595))+(((-1.0)*gconst2*r01*x7602))+(((-1.0)*x7600*x7602)));
evalcond[4]=(((x7595*x7599))+((cj1*sj2))+((r21*x7601))+(((-1.0)*sj1*x7598))+((r22*x7596)));
evalcond[5]=(((x7595*x7597))+((r11*x7601))+(((-1.0)*cj1*x7598))+(((-1.0)*sj1*sj2))+((r12*x7596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7603=(gconst2*r01);
IkReal x7604=(gconst1*r00);
CheckValue<IkReal> x7605 = IKatan2WithCheck(IkReal((x7604+x7603)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7605.valid){
continue;
}
CheckValue<IkReal> x7606=IKPowWithIntegerCheck(IKsign(((x7604*x7604)+(x7603*x7603)+(r02*r02)+(((2.0)*x7603*x7604)))),-1);
if(!x7606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7605.value)+(((1.5707963267949)*(x7606.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7607=IKcos(j4);
IkReal x7608=IKsin(j4);
IkReal x7609=(gconst1*r10);
IkReal x7610=((1.0)*cj2);
IkReal x7611=(gconst1*r20);
IkReal x7612=(gconst1*r00);
IkReal x7613=(gconst2*x7607);
IkReal x7614=((1.0)*x7608);
evalcond[0]=(((r01*x7613))+((x7607*x7612))+((r02*x7608)));
evalcond[1]=((((-1.0)*gconst2*r21*x7614))+(((-1.0)*x7611*x7614))+((r22*x7607)));
evalcond[2]=(((r12*x7607))+(((-1.0)*x7609*x7614))+(((-1.0)*gconst2*r11*x7614)));
evalcond[3]=((1.0)+(((-1.0)*x7612*x7614))+(((-1.0)*gconst2*r01*x7614))+((r02*x7607)));
evalcond[4]=(((r21*x7613))+((cj1*sj2))+((r22*x7608))+((x7607*x7611))+(((-1.0)*sj1*x7610)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x7608))+((r11*x7613))+(((-1.0)*cj1*x7610))+((x7607*x7609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7615=IKPowWithIntegerCheck(IKsign((((gconst1*r11))+(((-1.0)*gconst2*r10)))),-1);
if(!x7615.valid){
continue;
}
CheckValue<IkReal> x7616 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r21))+((gconst1*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7615.value)))+(x7616.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7617=IKcos(j4);
IkReal x7618=IKsin(j4);
IkReal x7619=(gconst1*r10);
IkReal x7620=((1.0)*cj2);
IkReal x7621=(gconst1*r20);
IkReal x7622=(gconst1*r00);
IkReal x7623=(gconst2*x7617);
IkReal x7624=((1.0)*x7618);
evalcond[0]=(((x7617*x7622))+((r01*x7623))+((r02*x7618)));
evalcond[1]=((((-1.0)*x7621*x7624))+(((-1.0)*gconst2*r21*x7624))+((r22*x7617)));
evalcond[2]=((((-1.0)*gconst2*r11*x7624))+((r12*x7617))+(((-1.0)*x7619*x7624)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r01*x7624))+(((-1.0)*x7622*x7624))+((r02*x7617)));
evalcond[4]=(((x7617*x7621))+((r21*x7623))+(((-1.0)*sj1*x7620))+((cj1*sj2))+((r22*x7618)));
evalcond[5]=(((r12*x7618))+(((-1.0)*sj1*sj2))+((x7617*x7619))+(((-1.0)*cj1*x7620))+((r11*x7623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7625=((-1.0)*r21);
CheckValue<IkReal> x7628 = IKatan2WithCheck(IkReal(r20),IkReal(x7625),IKFAST_ATAN2_MAGTHRESH);
if(!x7628.valid){
continue;
}
IkReal x7626=((-1.0)*(x7628.value));
IkReal x7627=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7626;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7626;
IkReal gconst1=((-1.0)*r20*x7627);
IkReal gconst2=(x7625*x7627);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x7629=((-1.0)*r21);
CheckValue<IkReal> x7632 = IKatan2WithCheck(IkReal(r20),IkReal(x7629),IKFAST_ATAN2_MAGTHRESH);
if(!x7632.valid){
continue;
}
IkReal x7630=((-1.0)*(x7632.value));
IkReal x7631=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7630;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7630;
IkReal gconst1=((-1.0)*r20*x7631);
IkReal gconst2=(x7629*x7631);
IkReal x7633=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7637=IKPowWithIntegerCheck(x7633,-1);
if(!x7637.valid){
continue;
}
IkReal x7634=x7637.value;
IkReal x7635=((1.0)*x7634);
IkReal x7636=((((-1.0)*x7635*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x7634))+(((-1.0)*(r02*r02)))+(((-1.0)*x7635*(r01*r01)*(r21*r21))));
j4eval[0]=x7636;
j4eval[1]=IKsign(x7636);
j4eval[2]=r02;
j4eval[3]=x7633;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7638=((-1.0)*r21);
CheckValue<IkReal> x7641 = IKatan2WithCheck(IkReal(r20),IkReal(x7638),IKFAST_ATAN2_MAGTHRESH);
if(!x7641.valid){
continue;
}
IkReal x7639=((-1.0)*(x7641.value));
IkReal x7640=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7639;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7639;
IkReal gconst1=((-1.0)*r20*x7640);
IkReal gconst2=(x7638*x7640);
IkReal x7642=r22*r22;
IkReal x7643=(cj2*r02*sj1);
CheckValue<IkReal> x7648=IKPowWithIntegerCheck(((-1.0)+x7642),-1);
if(!x7648.valid){
continue;
}
IkReal x7644=x7648.value;
IkReal x7645=((1.0)*cj1*r02*sj2);
if((((1.0)+(((-1.0)*x7642)))) < -0.00001)
continue;
IkReal x7646=IKsqrt(((1.0)+(((-1.0)*x7642))));
IkReal x7647=(r22*x7644*x7646);
j4eval[0]=((IKabs(((((-1.0)*x7645))+x7643)))+(IKabs((((x7643*x7647))+(((-1.0)*x7645*x7647))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7649=(gconst1*r00);
IkReal x7650=(cj1*sj2);
IkReal x7651=(gconst2*r01);
IkReal x7652=((1.0)*cj2*sj1);
CheckValue<IkReal> x7653=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r11))+((gconst2*r10)))),-1);
if(!x7653.valid){
continue;
}
CheckValue<IkReal> x7654 = IKatan2WithCheck(IkReal(((((-1.0)*x7649*x7652))+(((-1.0)*x7651*x7652))+((x7650*x7651))+((x7649*x7650)))),IkReal(((((-1.0)*r02*x7650))+((cj2*r02*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7653.value)))+(x7654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7655=IKcos(j4);
IkReal x7656=IKsin(j4);
IkReal x7657=(gconst1*r10);
IkReal x7658=(gconst1*r20);
IkReal x7659=(gconst1*r00);
IkReal x7660=(gconst2*x7655);
IkReal x7661=((1.0)*x7656);
evalcond[0]=(((r01*x7660))+((r02*x7656))+((x7655*x7659)));
evalcond[1]=((((-1.0)*gconst2*r21*x7661))+((r22*x7655))+(((-1.0)*x7658*x7661)));
evalcond[2]=((((-1.0)*x7657*x7661))+(((-1.0)*gconst2*r11*x7661))+((r12*x7655)));
evalcond[3]=((-1.0)+((r02*x7655))+(((-1.0)*gconst2*r01*x7661))+(((-1.0)*x7659*x7661)));
evalcond[4]=(((r11*x7660))+((sj1*sj2))+((x7655*x7657))+((cj1*cj2))+((r12*x7656)));
evalcond[5]=(((r22*x7656))+((r21*x7660))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x7655*x7658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7662=(gconst2*r01);
IkReal x7663=(gconst1*r00);
CheckValue<IkReal> x7664 = IKatan2WithCheck(IkReal((x7663+x7662)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7664.valid){
continue;
}
CheckValue<IkReal> x7665=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7662*x7662)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x7663*x7663)))+(((-2.0)*x7662*x7663)))),-1);
if(!x7665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7664.value)+(((1.5707963267949)*(x7665.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7666=IKcos(j4);
IkReal x7667=IKsin(j4);
IkReal x7668=(gconst1*r10);
IkReal x7669=(gconst1*r20);
IkReal x7670=(gconst1*r00);
IkReal x7671=(gconst2*x7666);
IkReal x7672=((1.0)*x7667);
evalcond[0]=(((r01*x7671))+((r02*x7667))+((x7666*x7670)));
evalcond[1]=((((-1.0)*gconst2*r21*x7672))+((r22*x7666))+(((-1.0)*x7669*x7672)));
evalcond[2]=(((r12*x7666))+(((-1.0)*gconst2*r11*x7672))+(((-1.0)*x7668*x7672)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r01*x7672))+(((-1.0)*x7670*x7672))+((r02*x7666)));
evalcond[4]=(((r11*x7671))+((x7666*x7668))+((r12*x7667))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((x7666*x7669))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r21*x7671))+((r22*x7667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7673=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r11))+((gconst2*r10)))),-1);
if(!x7673.valid){
continue;
}
CheckValue<IkReal> x7674 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r21))+((gconst1*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7673.value)))+(x7674.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7675=IKcos(j4);
IkReal x7676=IKsin(j4);
IkReal x7677=(gconst1*r10);
IkReal x7678=(gconst1*r20);
IkReal x7679=(gconst1*r00);
IkReal x7680=(gconst2*x7675);
IkReal x7681=((1.0)*x7676);
evalcond[0]=(((x7675*x7679))+((r02*x7676))+((r01*x7680)));
evalcond[1]=((((-1.0)*gconst2*r21*x7681))+((r22*x7675))+(((-1.0)*x7678*x7681)));
evalcond[2]=(((r12*x7675))+(((-1.0)*gconst2*r11*x7681))+(((-1.0)*x7677*x7681)));
evalcond[3]=((-1.0)+((r02*x7675))+(((-1.0)*gconst2*r01*x7681))+(((-1.0)*x7679*x7681)));
evalcond[4]=(((r12*x7676))+((x7675*x7677))+((sj1*sj2))+((r11*x7680))+((cj1*cj2)));
evalcond[5]=(((r22*x7676))+((x7675*x7678))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r21*x7680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7682=((-1.0)*r21);
CheckValue<IkReal> x7685 = IKatan2WithCheck(IkReal(r20),IkReal(x7682),IKFAST_ATAN2_MAGTHRESH);
if(!x7685.valid){
continue;
}
IkReal x7683=((-1.0)*(x7685.value));
IkReal x7684=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7683;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7683;
IkReal gconst1=((-1.0)*r20*x7684);
IkReal gconst2=(x7682*x7684);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7686=((-1.0)*r21);
CheckValue<IkReal> x7689 = IKatan2WithCheck(IkReal(r20),IkReal(x7686),IKFAST_ATAN2_MAGTHRESH);
if(!x7689.valid){
continue;
}
IkReal x7687=((-1.0)*(x7689.value));
IkReal x7688=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7687;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7687;
IkReal gconst1=((-1.0)*r20*x7688);
IkReal gconst2=(x7686*x7688);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7690=((-1.0)*r21);
CheckValue<IkReal> x7693 = IKatan2WithCheck(IkReal(r20),IkReal(x7690),IKFAST_ATAN2_MAGTHRESH);
if(!x7693.valid){
continue;
}
IkReal x7691=((-1.0)*(x7693.value));
IkReal x7692=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7691;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7691;
IkReal gconst1=((-1.0)*r20*x7692);
IkReal gconst2=(x7690*x7692);
IkReal x7694=r22*r22;
IkReal x7695=(cj2*r12*sj1);
CheckValue<IkReal> x7700=IKPowWithIntegerCheck(((-1.0)+x7694),-1);
if(!x7700.valid){
continue;
}
IkReal x7696=x7700.value;
IkReal x7697=((1.0)*cj1*r12*sj2);
if((((1.0)+(((-1.0)*x7694)))) < -0.00001)
continue;
IkReal x7698=IKsqrt(((1.0)+(((-1.0)*x7694))));
IkReal x7699=(r22*x7696*x7698);
j4eval[0]=((IKabs(((((-1.0)*x7697))+x7695)))+(IKabs((((x7695*x7699))+(((-1.0)*x7697*x7699))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7701=(cj1*sj2);
IkReal x7702=(gconst1*r10);
IkReal x7703=(cj2*sj1);
IkReal x7704=((1.0)*gconst2);
CheckValue<IkReal> x7705 = IKatan2WithCheck(IkReal((((gconst2*r11*x7701))+(((-1.0)*r11*x7703*x7704))+((x7701*x7702))+(((-1.0)*x7702*x7703)))),IkReal((((r12*x7703))+(((-1.0)*r12*x7701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7705.valid){
continue;
}
CheckValue<IkReal> x7706=IKPowWithIntegerCheck(IKsign((((gconst1*r01))+(((-1.0)*r00*x7704)))),-1);
if(!x7706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7705.value)+(((1.5707963267949)*(x7706.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7707=IKcos(j4);
IkReal x7708=IKsin(j4);
IkReal x7709=(gconst1*r10);
IkReal x7710=(gconst1*r20);
IkReal x7711=(gconst1*r00);
IkReal x7712=(gconst2*x7707);
IkReal x7713=((1.0)*x7708);
evalcond[0]=(((r12*x7708))+((r11*x7712))+((x7707*x7709)));
evalcond[1]=((((-1.0)*gconst2*r21*x7713))+((r22*x7707))+(((-1.0)*x7710*x7713)));
evalcond[2]=((((-1.0)*x7711*x7713))+((r02*x7707))+(((-1.0)*gconst2*r01*x7713)));
evalcond[3]=((1.0)+((r12*x7707))+(((-1.0)*gconst2*r11*x7713))+(((-1.0)*x7709*x7713)));
evalcond[4]=(((r02*x7708))+((sj1*sj2))+((x7707*x7711))+((cj1*cj2))+((r01*x7712)));
evalcond[5]=(((r21*x7712))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x7707*x7710))+((r22*x7708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7714=(gconst1*r10);
IkReal x7715=(gconst2*r11);
CheckValue<IkReal> x7716=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x7714*x7714)+(x7715*x7715)+(((2.0)*x7714*x7715)))),-1);
if(!x7716.valid){
continue;
}
CheckValue<IkReal> x7717 = IKatan2WithCheck(IkReal((x7715+x7714)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7716.value)))+(x7717.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7718=IKcos(j4);
IkReal x7719=IKsin(j4);
IkReal x7720=(gconst1*r10);
IkReal x7721=(gconst1*r20);
IkReal x7722=(gconst1*r00);
IkReal x7723=(gconst2*x7718);
IkReal x7724=((1.0)*x7719);
evalcond[0]=(((r12*x7719))+((x7718*x7720))+((r11*x7723)));
evalcond[1]=((((-1.0)*gconst2*r21*x7724))+((r22*x7718))+(((-1.0)*x7721*x7724)));
evalcond[2]=(((r02*x7718))+(((-1.0)*gconst2*r01*x7724))+(((-1.0)*x7722*x7724)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r11*x7724))+((r12*x7718))+(((-1.0)*x7720*x7724)));
evalcond[4]=(((r02*x7719))+((r01*x7723))+((sj1*sj2))+((x7718*x7722))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r21*x7723))+((x7718*x7721))+((r22*x7719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7725=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r01))+((gconst2*r00)))),-1);
if(!x7725.valid){
continue;
}
CheckValue<IkReal> x7726 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r21))+((gconst1*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7725.value)))+(x7726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7727=IKcos(j4);
IkReal x7728=IKsin(j4);
IkReal x7729=(gconst1*r10);
IkReal x7730=(gconst1*r20);
IkReal x7731=(gconst1*r00);
IkReal x7732=(gconst2*x7727);
IkReal x7733=((1.0)*x7728);
evalcond[0]=(((r11*x7732))+((r12*x7728))+((x7727*x7729)));
evalcond[1]=((((-1.0)*x7730*x7733))+((r22*x7727))+(((-1.0)*gconst2*r21*x7733)));
evalcond[2]=((((-1.0)*x7731*x7733))+(((-1.0)*gconst2*r01*x7733))+((r02*x7727)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r11*x7733))+((r12*x7727))+(((-1.0)*x7729*x7733)));
evalcond[4]=(((x7727*x7731))+((sj1*sj2))+((cj1*cj2))+((r01*x7732))+((r02*x7728)));
evalcond[5]=(((r21*x7732))+((cj1*sj2))+((r22*x7728))+(((-1.0)*cj2*sj1))+((x7727*x7730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7734=((-1.0)*r21);
CheckValue<IkReal> x7737 = IKatan2WithCheck(IkReal(r20),IkReal(x7734),IKFAST_ATAN2_MAGTHRESH);
if(!x7737.valid){
continue;
}
IkReal x7735=((-1.0)*(x7737.value));
IkReal x7736=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7735;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7735;
IkReal gconst1=((-1.0)*r20*x7736);
IkReal gconst2=(x7734*x7736);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x7738=((-1.0)*r21);
CheckValue<IkReal> x7741 = IKatan2WithCheck(IkReal(r20),IkReal(x7738),IKFAST_ATAN2_MAGTHRESH);
if(!x7741.valid){
continue;
}
IkReal x7739=((-1.0)*(x7741.value));
IkReal x7740=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7739;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7739;
IkReal gconst1=((-1.0)*r20*x7740);
IkReal gconst2=(x7738*x7740);
IkReal x7742=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7746=IKPowWithIntegerCheck(x7742,-1);
if(!x7746.valid){
continue;
}
IkReal x7743=x7746.value;
IkReal x7744=((1.0)*x7743);
IkReal x7745=((((-1.0)*x7744*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x7744*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x7743)));
j4eval[0]=x7745;
j4eval[1]=IKsign(x7745);
j4eval[2]=r12;
j4eval[3]=x7742;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7747=((-1.0)*r21);
CheckValue<IkReal> x7750 = IKatan2WithCheck(IkReal(r20),IkReal(x7747),IKFAST_ATAN2_MAGTHRESH);
if(!x7750.valid){
continue;
}
IkReal x7748=((-1.0)*(x7750.value));
IkReal x7749=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7748;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7748;
IkReal gconst1=((-1.0)*r20*x7749);
IkReal gconst2=(x7747*x7749);
IkReal x7751=r22*r22;
IkReal x7752=(cj2*r12*sj1);
CheckValue<IkReal> x7757=IKPowWithIntegerCheck(((-1.0)+x7751),-1);
if(!x7757.valid){
continue;
}
IkReal x7753=x7757.value;
IkReal x7754=((1.0)*cj1*r12*sj2);
if((((1.0)+(((-1.0)*x7751)))) < -0.00001)
continue;
IkReal x7755=IKsqrt(((1.0)+(((-1.0)*x7751))));
IkReal x7756=(r22*x7753*x7755);
j4eval[0]=((IKabs((((x7752*x7756))+(((-1.0)*x7754*x7756)))))+(IKabs(((((-1.0)*x7754))+x7752))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7758=(cj1*sj2);
IkReal x7759=(gconst1*r10);
IkReal x7760=(cj2*sj1);
IkReal x7761=((1.0)*gconst2);
CheckValue<IkReal> x7762=IKPowWithIntegerCheck(IKsign((((gconst1*r01))+(((-1.0)*r00*x7761)))),-1);
if(!x7762.valid){
continue;
}
CheckValue<IkReal> x7763 = IKatan2WithCheck(IkReal((((gconst2*r11*x7758))+(((-1.0)*x7759*x7760))+((x7758*x7759))+(((-1.0)*r11*x7760*x7761)))),IkReal(((((-1.0)*r12*x7758))+((r12*x7760)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7762.value)))+(x7763.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7764=IKcos(j4);
IkReal x7765=IKsin(j4);
IkReal x7766=(gconst1*r10);
IkReal x7767=((1.0)*sj1);
IkReal x7768=(gconst2*x7764);
IkReal x7769=((1.0)*x7765);
IkReal x7770=(gconst1*x7764);
IkReal x7771=(gconst1*x7769);
evalcond[0]=(((x7764*x7766))+((r12*x7765))+((r11*x7768)));
evalcond[1]=(((r22*x7764))+(((-1.0)*r20*x7771))+(((-1.0)*gconst2*r21*x7769)));
evalcond[2]=((((-1.0)*gconst2*r01*x7769))+(((-1.0)*r00*x7771))+((r02*x7764)));
evalcond[3]=((-1.0)+(((-1.0)*x7766*x7769))+(((-1.0)*gconst2*r11*x7769))+((r12*x7764)));
evalcond[4]=(((r22*x7765))+((cj1*sj2))+((r20*x7770))+(((-1.0)*cj2*x7767))+((r21*x7768)));
evalcond[5]=(((r00*x7770))+(((-1.0)*cj1*cj2))+(((-1.0)*sj2*x7767))+((r02*x7765))+((r01*x7768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7772=(gconst1*r10);
IkReal x7773=(gconst2*r11);
CheckValue<IkReal> x7774 = IKatan2WithCheck(IkReal((x7773+x7772)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7774.valid){
continue;
}
CheckValue<IkReal> x7775=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7772*x7772)))+(((-1.0)*(x7773*x7773)))+(((-1.0)*(r12*r12)))+(((-2.0)*x7772*x7773)))),-1);
if(!x7775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7774.value)+(((1.5707963267949)*(x7775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7776=IKcos(j4);
IkReal x7777=IKsin(j4);
IkReal x7778=(gconst1*r10);
IkReal x7779=((1.0)*sj1);
IkReal x7780=(gconst2*x7776);
IkReal x7781=((1.0)*x7777);
IkReal x7782=(gconst1*x7776);
IkReal x7783=(gconst1*x7781);
evalcond[0]=(((x7776*x7778))+((r11*x7780))+((r12*x7777)));
evalcond[1]=((((-1.0)*gconst2*r21*x7781))+((r22*x7776))+(((-1.0)*r20*x7783)));
evalcond[2]=((((-1.0)*r00*x7783))+((r02*x7776))+(((-1.0)*gconst2*r01*x7781)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r11*x7781))+((r12*x7776))+(((-1.0)*x7778*x7781)));
evalcond[4]=(((r22*x7777))+((cj1*sj2))+((r21*x7780))+(((-1.0)*cj2*x7779))+((r20*x7782)));
evalcond[5]=(((r01*x7780))+(((-1.0)*cj1*cj2))+((r00*x7782))+(((-1.0)*sj2*x7779))+((r02*x7777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7784=IKPowWithIntegerCheck(IKsign((((gconst1*r01))+(((-1.0)*gconst2*r00)))),-1);
if(!x7784.valid){
continue;
}
CheckValue<IkReal> x7785 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r21))+((gconst1*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7784.value)))+(x7785.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7786=IKcos(j4);
IkReal x7787=IKsin(j4);
IkReal x7788=(gconst1*r10);
IkReal x7789=((1.0)*sj1);
IkReal x7790=(gconst2*x7786);
IkReal x7791=((1.0)*x7787);
IkReal x7792=(gconst1*x7786);
IkReal x7793=(gconst1*x7791);
evalcond[0]=(((r12*x7787))+((x7786*x7788))+((r11*x7790)));
evalcond[1]=((((-1.0)*gconst2*r21*x7791))+((r22*x7786))+(((-1.0)*r20*x7793)));
evalcond[2]=((((-1.0)*r00*x7793))+((r02*x7786))+(((-1.0)*gconst2*r01*x7791)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r11*x7791))+((r12*x7786))+(((-1.0)*x7788*x7791)));
evalcond[4]=(((r22*x7787))+(((-1.0)*cj2*x7789))+((cj1*sj2))+((r20*x7792))+((r21*x7790)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*sj2*x7789))+((r00*x7792))+((r01*x7790))+((r02*x7787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7794=((-1.0)*r21);
IkReal x7795=((-1.0)*r20);
CheckValue<IkReal> x7797 = IKatan2WithCheck(IkReal(r20),IkReal(x7794),IKFAST_ATAN2_MAGTHRESH);
if(!x7797.valid){
continue;
}
IkReal x7796=((-1.0)*(x7797.value));
sj5=gconst1;
cj5=gconst2;
j5=x7796;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x7795);
rxp0_2=(py*r00);
rxp1_0=(py*x7794);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x7796;
IkReal gconst1=x7795;
IkReal gconst2=x7794;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7798=((-1.0)*r21);
IkReal x7799=((-1.0)*r20);
CheckValue<IkReal> x7801 = IKatan2WithCheck(IkReal(r20),IkReal(x7798),IKFAST_ATAN2_MAGTHRESH);
if(!x7801.valid){
continue;
}
IkReal x7800=((-1.0)*(x7801.value));
sj5=gconst1;
cj5=gconst2;
j5=x7800;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x7799);
rxp0_2=(py*r00);
rxp1_0=(py*x7798);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x7800;
IkReal gconst1=x7799;
IkReal gconst2=x7798;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7802=((-1.0)*r21);
IkReal x7803=((-1.0)*r20);
CheckValue<IkReal> x7805 = IKatan2WithCheck(IkReal(r20),IkReal(x7802),IKFAST_ATAN2_MAGTHRESH);
if(!x7805.valid){
continue;
}
IkReal x7804=((-1.0)*(x7805.value));
sj5=gconst1;
cj5=gconst2;
j5=x7804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x7803);
rxp0_2=(py*r00);
rxp1_0=(py*x7802);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x7804;
IkReal gconst1=x7803;
IkReal gconst2=x7802;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7808=IKPowWithIntegerCheck((((gconst1*r00))+((gconst2*r01))),-1);
if(!x7808.valid){
continue;
}
IkReal x7806=x7808.value;
IkReal x7807=((1.0)*sj0*x7806);
cj4array[0]=((((-1.0)*cj1*cj2*x7807))+(((-1.0)*sj1*sj2*x7807)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7809=IKsin(j4);
IkReal x7810=IKcos(j4);
IkReal x7811=(gconst1*r20);
IkReal x7812=(gconst2*r21);
IkReal x7813=((1.0)*x7809);
evalcond[0]=(r12*x7809);
evalcond[1]=(sj0+((r12*x7810)));
evalcond[2]=((((-1.0)*x7811*x7813))+(((-1.0)*x7812*x7813)));
evalcond[3]=((((-1.0)*gconst1*r00*x7813))+(((-1.0)*gconst2*r01*x7813)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x7810*x7811))+((x7810*x7812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7815=IKPowWithIntegerCheck((((gconst2*r21))+((gconst1*r20))),-1);
if(!x7815.valid){
continue;
}
IkReal x7814=x7815.value;
cj4array[0]=(((cj2*sj1*x7814))+(((-1.0)*cj1*sj2*x7814)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7816=IKsin(j4);
IkReal x7817=IKcos(j4);
IkReal x7818=(gconst2*r01);
IkReal x7819=((1.0)*x7816);
IkReal x7820=(gconst1*x7819);
evalcond[0]=(r12*x7816);
evalcond[1]=(sj0+((r12*x7817)));
evalcond[2]=((((-1.0)*r20*x7820))+(((-1.0)*gconst2*r21*x7819)));
evalcond[3]=((((-1.0)*r00*x7820))+(((-1.0)*x7818*x7819)));
evalcond[4]=(((cj1*cj2*sj0))+((x7817*x7818))+((sj0*sj1*sj2))+((gconst1*r00*x7817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7821=IKPowWithIntegerCheck(r12,-1);
if(!x7821.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x7821.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7822=IKsin(j4);
IkReal x7823=IKcos(j4);
IkReal x7824=(gconst1*r20);
IkReal x7825=(gconst1*r00);
IkReal x7826=(gconst2*x7823);
IkReal x7827=((1.0)*x7822);
evalcond[0]=(r12*x7822);
evalcond[1]=((((-1.0)*x7824*x7827))+(((-1.0)*gconst2*r21*x7827)));
evalcond[2]=((((-1.0)*x7825*x7827))+(((-1.0)*gconst2*r01*x7827)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r21*x7826))+((x7823*x7824)));
evalcond[4]=(((cj1*cj2*sj0))+((x7823*x7825))+((r01*x7826))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7828=(gconst2*r21);
IkReal x7829=(cj1*sj2);
IkReal x7830=(gconst1*r20);
IkReal x7831=((1.0)*cj2*sj1);
CheckValue<IkReal> x7832=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7830*x7830)))+(((-2.0)*x7828*x7830))+(((-1.0)*(r22*r22)))+(((-1.0)*(x7828*x7828))))),-1);
if(!x7832.valid){
continue;
}
CheckValue<IkReal> x7833 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7831))+((r22*x7829)))),IkReal(((((-1.0)*x7828*x7831))+((x7828*x7829))+(((-1.0)*x7830*x7831))+((x7829*x7830)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7832.value)))+(x7833.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7834=IKsin(j4);
IkReal x7835=IKcos(j4);
IkReal x7836=(cj1*cj2);
IkReal x7837=(gconst1*r10);
IkReal x7838=((1.0)*sj1);
IkReal x7839=(gconst1*r20);
IkReal x7840=(gconst1*r00);
IkReal x7841=(gconst2*x7835);
IkReal x7842=((1.0)*x7834);
evalcond[0]=((((-1.0)*x7839*x7842))+(((-1.0)*gconst2*r21*x7842))+((r22*x7835)));
evalcond[1]=(cj0+(((-1.0)*x7840*x7842))+(((-1.0)*gconst2*r01*x7842))+((r02*x7835)));
evalcond[2]=((((-1.0)*x7837*x7842))+((r12*x7835))+sj0+(((-1.0)*gconst2*r11*x7842)));
evalcond[3]=(((r21*x7841))+((cj1*sj2))+((x7835*x7839))+(((-1.0)*cj2*x7838))+((r22*x7834)));
evalcond[4]=(((x7835*x7840))+((r01*x7841))+((sj0*sj1*sj2))+((r02*x7834))+((sj0*x7836)));
evalcond[5]=(((r12*x7834))+((x7835*x7837))+(((-1.0)*cj0*sj2*x7838))+(((-1.0)*cj0*x7836))+((r11*x7841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7843 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst2*r21*sj0))+((gconst1*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7843.valid){
continue;
}
CheckValue<IkReal> x7844=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r01))+((gconst2*r00)))),-1);
if(!x7844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7843.value)+(((1.5707963267949)*(x7844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7845=IKsin(j4);
IkReal x7846=IKcos(j4);
IkReal x7847=(cj1*cj2);
IkReal x7848=(gconst1*r10);
IkReal x7849=((1.0)*sj1);
IkReal x7850=(gconst1*r20);
IkReal x7851=(gconst1*r00);
IkReal x7852=(gconst2*x7846);
IkReal x7853=((1.0)*x7845);
evalcond[0]=((((-1.0)*gconst2*r21*x7853))+(((-1.0)*x7850*x7853))+((r22*x7846)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r01*x7853))+(((-1.0)*x7851*x7853))+((r02*x7846)));
evalcond[2]=((((-1.0)*x7848*x7853))+((r12*x7846))+sj0+(((-1.0)*gconst2*r11*x7853)));
evalcond[3]=(((cj1*sj2))+((r21*x7852))+((r22*x7845))+(((-1.0)*cj2*x7849))+((x7846*x7850)));
evalcond[4]=(((r01*x7852))+((sj0*sj1*sj2))+((x7846*x7851))+((r02*x7845))+((sj0*x7847)));
evalcond[5]=(((r12*x7845))+((r11*x7852))+(((-1.0)*cj0*sj2*x7849))+((x7846*x7848))+(((-1.0)*cj0*x7847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7854 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r20))+((cj0*gconst2*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7854.valid){
continue;
}
CheckValue<IkReal> x7855=IKPowWithIntegerCheck(IKsign((((gconst1*r11))+(((-1.0)*gconst2*r10)))),-1);
if(!x7855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7854.value)+(((1.5707963267949)*(x7855.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7856=IKsin(j4);
IkReal x7857=IKcos(j4);
IkReal x7858=(cj1*cj2);
IkReal x7859=(gconst1*r10);
IkReal x7860=((1.0)*sj1);
IkReal x7861=(gconst1*r20);
IkReal x7862=(gconst1*r00);
IkReal x7863=(gconst2*x7857);
IkReal x7864=((1.0)*x7856);
evalcond[0]=(((r22*x7857))+(((-1.0)*gconst2*r21*x7864))+(((-1.0)*x7861*x7864)));
evalcond[1]=((((-1.0)*x7862*x7864))+cj0+((r02*x7857))+(((-1.0)*gconst2*r01*x7864)));
evalcond[2]=((((-1.0)*x7859*x7864))+((r12*x7857))+sj0+(((-1.0)*gconst2*r11*x7864)));
evalcond[3]=(((r22*x7856))+((cj1*sj2))+((x7857*x7861))+((r21*x7863))+(((-1.0)*cj2*x7860)));
evalcond[4]=(((r02*x7856))+((sj0*x7858))+((x7857*x7862))+((r01*x7863))+((sj0*sj1*sj2)));
evalcond[5]=(((r12*x7856))+((x7857*x7859))+(((-1.0)*cj0*sj2*x7860))+((r11*x7863))+(((-1.0)*cj0*x7858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7865=((-1.0)*r21);
CheckValue<IkReal> x7868 = IKatan2WithCheck(IkReal(r20),IkReal(x7865),IKFAST_ATAN2_MAGTHRESH);
if(!x7868.valid){
continue;
}
IkReal x7866=((-1.0)*(x7868.value));
IkReal x7867=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7866;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7866;
IkReal gconst1=((-1.0)*r20*x7867);
IkReal gconst2=(x7865*x7867);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7869=gconst2*gconst2;
IkReal x7870=gconst1*gconst1;
IkReal x7871=(cj3*r00);
IkReal x7872=(r00*sj3);
IkReal x7873=(gconst1*gconst2);
IkReal x7874=(cj3*r01);
IkReal x7875=(r10*x7870);
IkReal x7876=(r11*x7869);
IkReal x7877=((1.0)*r01*sj3);
CheckValue<IkReal> x7878 = IKatan2WithCheck(IkReal((((gconst2*r12*x7872))+(((-1.0)*gconst1*r12*x7877)))),IkReal(((((-1.0)*r11*x7873*x7877))+(((-1.0)*x7875*x7877))+((r10*x7872*x7873))+((x7872*x7876)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7878.valid){
continue;
}
CheckValue<IkReal> x7879=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((x7874*x7876))+((r10*x7873*x7874))+((r11*x7871*x7873))+((x7871*x7875)))),-1);
if(!x7879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7878.value)+(((1.5707963267949)*(x7879.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7880=IKsin(j4);
IkReal x7881=IKcos(j4);
IkReal x7882=(cj1*sj2);
IkReal x7883=(cj3*r20);
IkReal x7884=(r20*sj3);
IkReal x7885=(sj1*sj2);
IkReal x7886=((1.0)*r21);
IkReal x7887=(gconst1*sj3);
IkReal x7888=((1.0)*r01);
IkReal x7889=((1.0)*cj2);
IkReal x7890=((1.0)*r11);
IkReal x7891=(gconst2*r10);
IkReal x7892=(cj3*gconst1);
IkReal x7893=(r00*sj3);
IkReal x7894=((1.0)*cj3);
IkReal x7895=(sj1*x7889);
IkReal x7896=(sj3*x7880);
IkReal x7897=(gconst1*x7881);
IkReal x7898=(gconst2*x7880);
IkReal x7899=((1.0)*x7880);
IkReal x7900=(cj3*gconst2*x7881);
IkReal x7901=(gconst2*sj3*x7881);
evalcond[0]=((((-1.0)*x7886*x7898))+(((-1.0)*gconst1*r20*x7899))+((r22*x7881)));
evalcond[1]=(((r12*x7881))+(((-1.0)*gconst1*r10*x7899))+(((-1.0)*x7890*x7898)));
evalcond[2]=((1.0)+(((-1.0)*x7888*x7898))+(((-1.0)*gconst1*r00*x7899))+((r02*x7881)));
evalcond[3]=((((-1.0)*x7888*x7892))+((r00*x7881*x7887))+((r02*x7896))+((cj3*gconst2*r00))+((r01*x7901)));
evalcond[4]=((((-1.0)*x7888*x7900))+(((-1.0)*r02*x7880*x7894))+(((-1.0)*x7887*x7888))+((gconst2*x7893))+(((-1.0)*r00*x7881*x7892)));
evalcond[5]=((((-1.0)*x7886*x7892))+((gconst2*x7883))+((r21*x7901))+((r22*x7896))+x7885+((x7884*x7897))+((cj1*cj2)));
evalcond[6]=(((cj3*x7891))+(((-1.0)*x7895))+x7882+((r12*x7896))+((r11*x7901))+(((-1.0)*x7890*x7892))+((r10*x7881*x7887)));
evalcond[7]=((((-1.0)*x7895))+((gconst2*x7884))+(((-1.0)*r22*x7880*x7894))+x7882+(((-1.0)*x7886*x7900))+(((-1.0)*x7886*x7887))+(((-1.0)*x7883*x7897)));
evalcond[8]=((((-1.0)*r12*x7880*x7894))+(((-1.0)*x7890*x7900))+(((-1.0)*x7887*x7890))+(((-1.0)*x7885))+(((-1.0)*cj1*x7889))+(((-1.0)*r10*x7881*x7892))+((sj3*x7891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7902=IKPowWithIntegerCheck(IKsign((((gconst1*r11))+(((-1.0)*gconst2*r10)))),-1);
if(!x7902.valid){
continue;
}
CheckValue<IkReal> x7903 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r21))+((gconst1*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7902.value)))+(x7903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7904=IKsin(j4);
IkReal x7905=IKcos(j4);
IkReal x7906=(cj1*sj2);
IkReal x7907=(cj3*r20);
IkReal x7908=(r20*sj3);
IkReal x7909=(sj1*sj2);
IkReal x7910=((1.0)*r21);
IkReal x7911=(gconst1*sj3);
IkReal x7912=((1.0)*r01);
IkReal x7913=((1.0)*cj2);
IkReal x7914=((1.0)*r11);
IkReal x7915=(gconst2*r10);
IkReal x7916=(cj3*gconst1);
IkReal x7917=(r00*sj3);
IkReal x7918=((1.0)*cj3);
IkReal x7919=(sj1*x7913);
IkReal x7920=(sj3*x7904);
IkReal x7921=(gconst1*x7905);
IkReal x7922=(gconst2*x7904);
IkReal x7923=((1.0)*x7904);
IkReal x7924=(cj3*gconst2*x7905);
IkReal x7925=(gconst2*sj3*x7905);
evalcond[0]=((((-1.0)*x7910*x7922))+((r22*x7905))+(((-1.0)*gconst1*r20*x7923)));
evalcond[1]=((((-1.0)*gconst1*r10*x7923))+(((-1.0)*x7914*x7922))+((r12*x7905)));
evalcond[2]=((1.0)+((r02*x7905))+(((-1.0)*x7912*x7922))+(((-1.0)*gconst1*r00*x7923)));
evalcond[3]=((((-1.0)*x7912*x7916))+((r02*x7920))+((cj3*gconst2*r00))+((r00*x7905*x7911))+((r01*x7925)));
evalcond[4]=(((gconst2*x7917))+(((-1.0)*x7912*x7924))+(((-1.0)*x7911*x7912))+(((-1.0)*r02*x7904*x7918))+(((-1.0)*r00*x7905*x7916)));
evalcond[5]=(((r22*x7920))+x7909+(((-1.0)*x7910*x7916))+((gconst2*x7907))+((x7908*x7921))+((cj1*cj2))+((r21*x7925)));
evalcond[6]=((((-1.0)*x7919))+((r12*x7920))+x7906+(((-1.0)*x7914*x7916))+((r10*x7905*x7911))+((r11*x7925))+((cj3*x7915)));
evalcond[7]=((((-1.0)*x7919))+(((-1.0)*x7907*x7921))+(((-1.0)*r22*x7904*x7918))+(((-1.0)*x7910*x7924))+x7906+(((-1.0)*x7910*x7911))+((gconst2*x7908)));
evalcond[8]=((((-1.0)*x7909))+((sj3*x7915))+(((-1.0)*x7911*x7914))+(((-1.0)*r12*x7904*x7918))+(((-1.0)*cj1*x7913))+(((-1.0)*x7914*x7924))+(((-1.0)*r10*x7905*x7916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7926=((-1.0)*r21);
CheckValue<IkReal> x7929 = IKatan2WithCheck(IkReal(r20),IkReal(x7926),IKFAST_ATAN2_MAGTHRESH);
if(!x7929.valid){
continue;
}
IkReal x7927=((-1.0)*(x7929.value));
IkReal x7928=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7927;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7927;
IkReal gconst1=((-1.0)*r20*x7928);
IkReal gconst2=(x7926*x7928);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7930=gconst2*gconst2;
IkReal x7931=gconst1*gconst1;
IkReal x7932=(cj3*r00);
IkReal x7933=(r00*sj3);
IkReal x7934=(gconst1*gconst2);
IkReal x7935=(cj3*r01);
IkReal x7936=(r10*x7931);
IkReal x7937=(r11*x7930);
IkReal x7938=((1.0)*r01*sj3);
CheckValue<IkReal> x7939 = IKatan2WithCheck(IkReal((((gconst2*r12*x7933))+(((-1.0)*gconst1*r12*x7938)))),IkReal((((x7933*x7937))+(((-1.0)*x7936*x7938))+((r10*x7933*x7934))+(((-1.0)*r11*x7934*x7938)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7939.valid){
continue;
}
CheckValue<IkReal> x7940=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((x7932*x7936))+((r10*x7934*x7935))+((r11*x7932*x7934))+((x7935*x7937)))),-1);
if(!x7940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7939.value)+(((1.5707963267949)*(x7940.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7941=IKsin(j4);
IkReal x7942=IKcos(j4);
IkReal x7943=(sj1*sj2);
IkReal x7944=(cj1*cj2);
IkReal x7945=(cj3*r20);
IkReal x7946=(r20*sj3);
IkReal x7947=((1.0)*r21);
IkReal x7948=(gconst1*sj3);
IkReal x7949=((1.0)*r01);
IkReal x7950=(cj2*sj1);
IkReal x7951=(cj1*sj2);
IkReal x7952=((1.0)*r11);
IkReal x7953=(gconst2*r10);
IkReal x7954=(cj3*gconst1);
IkReal x7955=(r00*sj3);
IkReal x7956=((1.0)*cj3);
IkReal x7957=(sj3*x7941);
IkReal x7958=(gconst1*x7942);
IkReal x7959=(gconst2*x7941);
IkReal x7960=((1.0)*x7941);
IkReal x7961=(x7944+x7943);
IkReal x7962=(cj3*gconst2*x7942);
IkReal x7963=(gconst2*sj3*x7942);
evalcond[0]=((((-1.0)*x7947*x7959))+(((-1.0)*gconst1*r20*x7960))+((r22*x7942)));
evalcond[1]=((((-1.0)*x7952*x7959))+((r12*x7942))+(((-1.0)*gconst1*r10*x7960)));
evalcond[2]=((-1.0)+((r02*x7942))+(((-1.0)*x7949*x7959))+(((-1.0)*gconst1*r00*x7960)));
evalcond[3]=(((r01*x7963))+((cj3*gconst2*r00))+((r02*x7957))+(((-1.0)*x7949*x7954))+((r00*x7942*x7948)));
evalcond[4]=((((-1.0)*r00*x7942*x7954))+((gconst2*x7955))+(((-1.0)*x7949*x7962))+(((-1.0)*r02*x7941*x7956))+(((-1.0)*x7948*x7949)));
evalcond[5]=((((-1.0)*x7947*x7954))+((r21*x7963))+((r22*x7957))+x7961+((x7946*x7958))+((gconst2*x7945)));
evalcond[6]=(((r12*x7957))+((r11*x7963))+(((-1.0)*x7952*x7954))+(((-1.0)*x7951))+x7950+((r10*x7942*x7948))+((cj3*x7953)));
evalcond[7]=((((-1.0)*r12*x7941*x7956))+(((-1.0)*x7952*x7962))+x7961+(((-1.0)*x7948*x7952))+((sj3*x7953))+(((-1.0)*r10*x7942*x7954)));
evalcond[8]=((((-1.0)*x7950))+x7951+(((-1.0)*x7945*x7958))+(((-1.0)*r22*x7941*x7956))+(((-1.0)*x7947*x7948))+(((-1.0)*x7947*x7962))+((gconst2*x7946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7964=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r11))+((gconst2*r10)))),-1);
if(!x7964.valid){
continue;
}
CheckValue<IkReal> x7965 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r21))+((gconst1*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7964.value)))+(x7965.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x7966=IKsin(j4);
IkReal x7967=IKcos(j4);
IkReal x7968=(sj1*sj2);
IkReal x7969=(cj1*cj2);
IkReal x7970=(cj3*r20);
IkReal x7971=(r20*sj3);
IkReal x7972=((1.0)*r21);
IkReal x7973=(gconst1*sj3);
IkReal x7974=((1.0)*r01);
IkReal x7975=(cj2*sj1);
IkReal x7976=(cj1*sj2);
IkReal x7977=((1.0)*r11);
IkReal x7978=(gconst2*r10);
IkReal x7979=(cj3*gconst1);
IkReal x7980=(r00*sj3);
IkReal x7981=((1.0)*cj3);
IkReal x7982=(sj3*x7966);
IkReal x7983=(gconst1*x7967);
IkReal x7984=(gconst2*x7966);
IkReal x7985=((1.0)*x7966);
IkReal x7986=(x7968+x7969);
IkReal x7987=(cj3*gconst2*x7967);
IkReal x7988=(gconst2*sj3*x7967);
evalcond[0]=((((-1.0)*gconst1*r20*x7985))+(((-1.0)*x7972*x7984))+((r22*x7967)));
evalcond[1]=(((r12*x7967))+(((-1.0)*x7977*x7984))+(((-1.0)*gconst1*r10*x7985)));
evalcond[2]=((-1.0)+((r02*x7967))+(((-1.0)*x7974*x7984))+(((-1.0)*gconst1*r00*x7985)));
evalcond[3]=(((r01*x7988))+((cj3*gconst2*r00))+((r02*x7982))+((r00*x7967*x7973))+(((-1.0)*x7974*x7979)));
evalcond[4]=((((-1.0)*x7973*x7974))+(((-1.0)*r02*x7966*x7981))+(((-1.0)*x7974*x7987))+((gconst2*x7980))+(((-1.0)*r00*x7967*x7979)));
evalcond[5]=(((gconst2*x7970))+((r22*x7982))+x7986+((x7971*x7983))+((r21*x7988))+(((-1.0)*x7972*x7979)));
evalcond[6]=(x7975+(((-1.0)*x7976))+((r10*x7967*x7973))+((cj3*x7978))+((r12*x7982))+((r11*x7988))+(((-1.0)*x7977*x7979)));
evalcond[7]=((((-1.0)*r12*x7966*x7981))+(((-1.0)*r10*x7967*x7979))+(((-1.0)*x7973*x7977))+x7986+((sj3*x7978))+(((-1.0)*x7977*x7987)));
evalcond[8]=(((gconst2*x7971))+x7976+(((-1.0)*x7972*x7987))+(((-1.0)*x7975))+(((-1.0)*x7972*x7973))+(((-1.0)*r22*x7966*x7981))+(((-1.0)*x7970*x7983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7989=((-1.0)*r21);
CheckValue<IkReal> x7992 = IKatan2WithCheck(IkReal(r20),IkReal(x7989),IKFAST_ATAN2_MAGTHRESH);
if(!x7992.valid){
continue;
}
IkReal x7990=((-1.0)*(x7992.value));
IkReal x7991=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x7990;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7990;
IkReal gconst1=((-1.0)*r20*x7991);
IkReal gconst2=(x7989*x7991);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7993=gconst2*gconst2;
IkReal x7994=gconst1*gconst1;
IkReal x7995=(r10*sj3);
IkReal x7996=(gconst1*gconst2);
IkReal x7997=(cj3*r11);
IkReal x7998=(cj3*r10);
IkReal x7999=((1.0)*r11*sj3);
IkReal x8000=(r00*x7994);
IkReal x8001=(r01*x7993);
CheckValue<IkReal> x8002=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((x7997*x8001))+((x7998*x8000))+((r01*x7996*x7998))+((r00*x7996*x7997)))),-1);
if(!x8002.valid){
continue;
}
CheckValue<IkReal> x8003 = IKatan2WithCheck(IkReal((((gconst2*r02*x7995))+(((-1.0)*gconst1*r02*x7999)))),IkReal(((((-1.0)*x7999*x8000))+(((-1.0)*r01*x7996*x7999))+((x7995*x8001))+((r00*x7995*x7996)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8002.value)))+(x8003.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8004=IKsin(j4);
IkReal x8005=IKcos(j4);
IkReal x8006=(sj1*sj2);
IkReal x8007=(cj1*cj2);
IkReal x8008=(gconst1*sj3);
IkReal x8009=((1.0)*r21);
IkReal x8010=((1.0)*cj3);
IkReal x8011=(cj2*sj1);
IkReal x8012=(cj1*sj2);
IkReal x8013=((1.0)*r11);
IkReal x8014=(gconst2*sj3);
IkReal x8015=(cj3*gconst2);
IkReal x8016=((1.0)*r01);
IkReal x8017=(r20*x8005);
IkReal x8018=(gconst2*x8005);
IkReal x8019=(sj3*x8004);
IkReal x8020=(gconst2*x8004);
IkReal x8021=(r10*x8005);
IkReal x8022=(r00*x8005);
IkReal x8023=(x8006+x8007);
IkReal x8024=((1.0)*gconst1*x8004);
evalcond[0]=((((-1.0)*r20*x8024))+(((-1.0)*x8009*x8020))+((r22*x8005)));
evalcond[1]=(((r02*x8005))+(((-1.0)*x8016*x8020))+(((-1.0)*r00*x8024)));
evalcond[2]=((1.0)+(((-1.0)*x8013*x8020))+((r12*x8005))+(((-1.0)*r10*x8024)));
evalcond[3]=(((r11*x8005*x8014))+((r12*x8019))+(((-1.0)*gconst1*r11*x8010))+((r10*x8015))+((x8008*x8021)));
evalcond[4]=((((-1.0)*x8008*x8013))+(((-1.0)*gconst1*x8010*x8021))+((r10*x8014))+(((-1.0)*r11*x8010*x8018))+(((-1.0)*r12*x8004*x8010)));
evalcond[5]=(((r21*x8005*x8014))+((x8008*x8017))+((r22*x8019))+(((-1.0)*cj3*gconst1*x8009))+x8023+((r20*x8015)));
evalcond[6]=(((r02*x8019))+(((-1.0)*gconst1*r01*x8010))+((r00*x8015))+((r01*x8005*x8014))+(((-1.0)*x8012))+x8011+((x8008*x8022)));
evalcond[7]=((((-1.0)*x8008*x8016))+((r00*x8014))+(((-1.0)*gconst1*x8010*x8022))+(((-1.0)*r01*x8010*x8018))+(((-1.0)*r02*x8004*x8010))+x8023);
evalcond[8]=((((-1.0)*x8008*x8009))+(((-1.0)*x8011))+(((-1.0)*gconst1*x8010*x8017))+x8012+((r20*x8014))+(((-1.0)*r22*x8004*x8010))+(((-1.0)*x8005*x8009*x8015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8025=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r01))+((gconst2*r00)))),-1);
if(!x8025.valid){
continue;
}
CheckValue<IkReal> x8026 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r21))+((gconst1*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8025.value)))+(x8026.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8027=IKsin(j4);
IkReal x8028=IKcos(j4);
IkReal x8029=(sj1*sj2);
IkReal x8030=(cj1*cj2);
IkReal x8031=(gconst1*sj3);
IkReal x8032=((1.0)*r21);
IkReal x8033=((1.0)*cj3);
IkReal x8034=(cj2*sj1);
IkReal x8035=(cj1*sj2);
IkReal x8036=((1.0)*r11);
IkReal x8037=(gconst2*sj3);
IkReal x8038=(cj3*gconst2);
IkReal x8039=((1.0)*r01);
IkReal x8040=(r20*x8028);
IkReal x8041=(gconst2*x8028);
IkReal x8042=(sj3*x8027);
IkReal x8043=(gconst2*x8027);
IkReal x8044=(r10*x8028);
IkReal x8045=(r00*x8028);
IkReal x8046=(x8029+x8030);
IkReal x8047=((1.0)*gconst1*x8027);
evalcond[0]=((((-1.0)*r20*x8047))+(((-1.0)*x8032*x8043))+((r22*x8028)));
evalcond[1]=(((r02*x8028))+(((-1.0)*x8039*x8043))+(((-1.0)*r00*x8047)));
evalcond[2]=((1.0)+(((-1.0)*x8036*x8043))+(((-1.0)*r10*x8047))+((r12*x8028)));
evalcond[3]=(((r10*x8038))+(((-1.0)*gconst1*r11*x8033))+((r11*x8028*x8037))+((x8031*x8044))+((r12*x8042)));
evalcond[4]=((((-1.0)*r12*x8027*x8033))+((r10*x8037))+(((-1.0)*gconst1*x8033*x8044))+(((-1.0)*r11*x8033*x8041))+(((-1.0)*x8031*x8036)));
evalcond[5]=(((r21*x8028*x8037))+((r20*x8038))+(((-1.0)*cj3*gconst1*x8032))+((x8031*x8040))+x8046+((r22*x8042)));
evalcond[6]=(((r01*x8028*x8037))+(((-1.0)*x8035))+((r02*x8042))+(((-1.0)*gconst1*r01*x8033))+((x8031*x8045))+x8034+((r00*x8038)));
evalcond[7]=((((-1.0)*gconst1*x8033*x8045))+(((-1.0)*r02*x8027*x8033))+(((-1.0)*r01*x8033*x8041))+x8046+((r00*x8037))+(((-1.0)*x8031*x8039)));
evalcond[8]=((((-1.0)*x8028*x8032*x8038))+(((-1.0)*x8034))+(((-1.0)*gconst1*x8033*x8040))+((r20*x8037))+(((-1.0)*r22*x8027*x8033))+x8035+(((-1.0)*x8031*x8032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8048=((-1.0)*r21);
CheckValue<IkReal> x8051 = IKatan2WithCheck(IkReal(r20),IkReal(x8048),IKFAST_ATAN2_MAGTHRESH);
if(!x8051.valid){
continue;
}
IkReal x8049=((-1.0)*(x8051.value));
IkReal x8050=x7170;
sj5=gconst1;
cj5=gconst2;
j5=x8049;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8049;
IkReal gconst1=((-1.0)*r20*x8050);
IkReal gconst2=(x8048*x8050);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8052=gconst2*gconst2;
IkReal x8053=gconst1*gconst1;
IkReal x8054=(r10*sj3);
IkReal x8055=(gconst1*gconst2);
IkReal x8056=(cj3*r11);
IkReal x8057=(cj3*r10);
IkReal x8058=((1.0)*r11*sj3);
IkReal x8059=(r00*x8053);
IkReal x8060=(r01*x8052);
CheckValue<IkReal> x8061 = IKatan2WithCheck(IkReal((((gconst2*r02*x8054))+(((-1.0)*gconst1*r02*x8058)))),IkReal((((x8054*x8060))+(((-1.0)*r01*x8055*x8058))+((r00*x8054*x8055))+(((-1.0)*x8058*x8059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8061.valid){
continue;
}
CheckValue<IkReal> x8062=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((r00*x8055*x8056))+((r01*x8055*x8057))+((x8056*x8060))+((x8057*x8059)))),-1);
if(!x8062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8061.value)+(((1.5707963267949)*(x8062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8063=IKsin(j4);
IkReal x8064=IKcos(j4);
IkReal x8065=(cj1*sj2);
IkReal x8066=(gconst1*sj3);
IkReal x8067=((1.0)*r21);
IkReal x8068=(sj1*sj2);
IkReal x8069=(cj3*gconst2);
IkReal x8070=((1.0)*cj2);
IkReal x8071=((1.0)*r11);
IkReal x8072=(gconst2*sj3);
IkReal x8073=(gconst1*r00);
IkReal x8074=(cj3*gconst1);
IkReal x8075=((1.0)*r01);
IkReal x8076=(sj1*x8070);
IkReal x8077=(r20*x8064);
IkReal x8078=(sj3*x8063);
IkReal x8079=(gconst2*x8063);
IkReal x8080=((1.0)*x8063);
IkReal x8081=(r10*x8064);
IkReal x8082=((1.0)*x8074);
evalcond[0]=(((r22*x8064))+(((-1.0)*gconst1*r20*x8080))+(((-1.0)*x8067*x8079)));
evalcond[1]=(((r02*x8064))+(((-1.0)*x8075*x8079))+(((-1.0)*x8073*x8080)));
evalcond[2]=((-1.0)+(((-1.0)*gconst1*r10*x8080))+(((-1.0)*x8071*x8079))+((r12*x8064)));
evalcond[3]=(((r10*x8069))+((r11*x8064*x8072))+((x8066*x8081))+(((-1.0)*x8071*x8074))+((r12*x8078)));
evalcond[4]=(((r10*x8072))+(((-1.0)*x8064*x8069*x8071))+(((-1.0)*cj3*r12*x8080))+(((-1.0)*x8081*x8082))+(((-1.0)*x8066*x8071)));
evalcond[5]=(((x8066*x8077))+(((-1.0)*x8067*x8074))+((r22*x8078))+((r20*x8069))+((cj1*cj2))+x8068+((r21*x8064*x8072)));
evalcond[6]=(((r02*x8078))+((r00*x8064*x8066))+((r01*x8064*x8072))+((r00*x8069))+(((-1.0)*x8076))+(((-1.0)*x8074*x8075))+x8065);
evalcond[7]=(((r20*x8072))+(((-1.0)*cj3*r22*x8080))+(((-1.0)*x8064*x8067*x8069))+(((-1.0)*x8076))+(((-1.0)*x8077*x8082))+x8065+(((-1.0)*x8066*x8067)));
evalcond[8]=((((-1.0)*x8068))+(((-1.0)*cj3*r02*x8080))+(((-1.0)*cj3*x8064*x8073))+(((-1.0)*x8064*x8069*x8075))+((r00*x8072))+(((-1.0)*cj1*x8070))+(((-1.0)*x8066*x8075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8083=IKPowWithIntegerCheck(IKsign((((gconst1*r01))+(((-1.0)*gconst2*r00)))),-1);
if(!x8083.valid){
continue;
}
CheckValue<IkReal> x8084 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r21))+((gconst1*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8083.value)))+(x8084.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8085=IKsin(j4);
IkReal x8086=IKcos(j4);
IkReal x8087=(cj1*sj2);
IkReal x8088=(gconst1*sj3);
IkReal x8089=((1.0)*r21);
IkReal x8090=(sj1*sj2);
IkReal x8091=(cj3*gconst2);
IkReal x8092=((1.0)*cj2);
IkReal x8093=((1.0)*r11);
IkReal x8094=(gconst2*sj3);
IkReal x8095=(gconst1*r00);
IkReal x8096=(cj3*gconst1);
IkReal x8097=((1.0)*r01);
IkReal x8098=(sj1*x8092);
IkReal x8099=(r20*x8086);
IkReal x8100=(sj3*x8085);
IkReal x8101=(gconst2*x8085);
IkReal x8102=((1.0)*x8085);
IkReal x8103=(r10*x8086);
IkReal x8104=((1.0)*x8096);
evalcond[0]=((((-1.0)*x8089*x8101))+((r22*x8086))+(((-1.0)*gconst1*r20*x8102)));
evalcond[1]=((((-1.0)*x8095*x8102))+(((-1.0)*x8097*x8101))+((r02*x8086)));
evalcond[2]=((-1.0)+(((-1.0)*gconst1*r10*x8102))+((r12*x8086))+(((-1.0)*x8093*x8101)));
evalcond[3]=((((-1.0)*x8093*x8096))+((r10*x8091))+((r11*x8086*x8094))+((r12*x8100))+((x8088*x8103)));
evalcond[4]=(((r10*x8094))+(((-1.0)*x8103*x8104))+(((-1.0)*x8088*x8093))+(((-1.0)*cj3*r12*x8102))+(((-1.0)*x8086*x8091*x8093)));
evalcond[5]=(((r21*x8086*x8094))+((x8088*x8099))+(((-1.0)*x8089*x8096))+((r22*x8100))+((cj1*cj2))+x8090+((r20*x8091)));
evalcond[6]=(((r02*x8100))+(((-1.0)*x8098))+((r00*x8091))+x8087+((r01*x8086*x8094))+((r00*x8086*x8088))+(((-1.0)*x8096*x8097)));
evalcond[7]=((((-1.0)*x8099*x8104))+(((-1.0)*x8086*x8089*x8091))+(((-1.0)*x8098))+(((-1.0)*cj3*r22*x8102))+(((-1.0)*x8088*x8089))+x8087+((r20*x8094)));
evalcond[8]=((((-1.0)*x8090))+((r00*x8094))+(((-1.0)*cj3*x8086*x8095))+(((-1.0)*x8088*x8097))+(((-1.0)*cj3*r02*x8102))+(((-1.0)*x8086*x8091*x8097))+(((-1.0)*cj1*x8092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x8105=((-1.0)*r21);
IkReal x8106=((-1.0)*r20);
CheckValue<IkReal> x8108 = IKatan2WithCheck(IkReal(r20),IkReal(x8105),IKFAST_ATAN2_MAGTHRESH);
if(!x8108.valid){
continue;
}
IkReal x8107=((-1.0)*(x8108.value));
sj5=gconst1;
cj5=gconst2;
j5=x8107;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8106);
rxp0_2=(py*r00);
rxp1_0=(py*x8105);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8107;
IkReal gconst1=x8106;
IkReal gconst2=x8105;
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8109=((-1.0)*r21);
IkReal x8110=((-1.0)*r20);
CheckValue<IkReal> x8112 = IKatan2WithCheck(IkReal(r20),IkReal(x8109),IKFAST_ATAN2_MAGTHRESH);
if(!x8112.valid){
continue;
}
IkReal x8111=((-1.0)*(x8112.value));
sj5=gconst1;
cj5=gconst2;
j5=x8111;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8110);
rxp0_2=(py*r00);
rxp1_0=(py*x8109);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8111;
IkReal gconst1=x8110;
IkReal gconst2=x8109;
IkReal x8113=((1.0)*sj3);
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=((((-1.0)*x8113))+(((-1.0)*x8113*(r21*r21)))+((sj3*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8114=((-1.0)*r21);
IkReal x8115=((-1.0)*r20);
CheckValue<IkReal> x8117 = IKatan2WithCheck(IkReal(r20),IkReal(x8114),IKFAST_ATAN2_MAGTHRESH);
if(!x8117.valid){
continue;
}
IkReal x8116=((-1.0)*(x8117.value));
sj5=gconst1;
cj5=gconst2;
j5=x8116;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8115);
rxp0_2=(py*r00);
rxp1_0=(py*x8114);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8116;
IkReal gconst1=x8115;
IkReal gconst2=x8114;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8119=IKPowWithIntegerCheck(r12,-1);
if(!x8119.valid){
continue;
}
IkReal x8118=x8119.value;
CheckValue<IkReal> x8120=IKPowWithIntegerCheck(sj3,-1);
if(!x8120.valid){
continue;
}
if( IKabs((x8118*(x8120.value)*(((((-1.0)*cj0*cj1*sj2))+((cj0*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x8118)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x8118*(x8120.value)*(((((-1.0)*cj0*cj1*sj2))+((cj0*cj2*sj1))))))+IKsqr(((-1.0)*sj0*x8118))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x8118*(x8120.value)*(((((-1.0)*cj0*cj1*sj2))+((cj0*cj2*sj1))))), ((-1.0)*sj0*x8118));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8121=IKsin(j4);
IkReal x8122=IKcos(j4);
IkReal x8123=(gconst1*sj3);
IkReal x8124=((1.0)*r21);
IkReal x8125=(cj2*sj0);
IkReal x8126=(sj1*sj2);
IkReal x8127=((1.0)*gconst1);
IkReal x8128=((1.0)*r01);
IkReal x8129=((1.0)*cj2);
IkReal x8130=(cj0*cj1);
IkReal x8131=(gconst2*sj3);
IkReal x8132=(cj1*sj2);
IkReal x8133=(cj3*gconst2);
IkReal x8134=(r20*x8122);
IkReal x8135=(cj3*x8122);
IkReal x8136=(r12*x8121);
IkReal x8137=(gconst2*x8121);
evalcond[0]=(sj0+((r12*x8122)));
evalcond[1]=((((-1.0)*x8124*x8137))+(((-1.0)*r20*x8121*x8127)));
evalcond[2]=(cj0+(((-1.0)*x8128*x8137))+(((-1.0)*r00*x8121*x8127)));
evalcond[3]=((((-1.0)*cj0*sj1*x8129))+((sj2*x8130))+((sj3*x8136)));
evalcond[4]=((((-1.0)*cj3*x8136))+(((-1.0)*x8129*x8130))+(((-1.0)*cj0*x8126)));
evalcond[5]=(((r21*x8122*x8131))+(((-1.0)*cj3*gconst1*x8124))+((r20*x8133))+((x8123*x8134))+((cj1*cj2))+x8126);
evalcond[6]=((((-1.0)*x8122*x8124*x8133))+(((-1.0)*cj3*x8127*x8134))+(((-1.0)*x8123*x8124))+((r20*x8131))+x8132+(((-1.0)*sj1*x8129)));
evalcond[7]=(((r00*x8133))+(((-1.0)*sj0*x8132))+(((-1.0)*cj3*r01*x8127))+((r01*x8122*x8131))+((sj1*x8125))+((r00*x8122*x8123)));
evalcond[8]=((((-1.0)*r00*x8127*x8135))+((r00*x8131))+(((-1.0)*x8123*x8128))+(((-1.0)*x8122*x8128*x8133))+((cj1*x8125))+((sj0*x8126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8138=((1.0)*gconst2);
CheckValue<IkReal> x8139=IKPowWithIntegerCheck(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8138))),-1);
if(!x8139.valid){
continue;
}
CheckValue<IkReal> x8140=IKPowWithIntegerCheck((((gconst2*r21*sj3))+((gconst1*r20*sj3))),-1);
if(!x8140.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x8139.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8140.value)*((((cj3*gconst1*r21))+(((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))+(((-1.0)*cj3*r20*x8138)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x8139.value)))+IKsqr(((x8140.value)*((((cj3*gconst1*r21))+(((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))+(((-1.0)*cj3*r20*x8138))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x8139.value)), ((x8140.value)*((((cj3*gconst1*r21))+(((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))+(((-1.0)*cj3*r20*x8138))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8141=IKsin(j4);
IkReal x8142=IKcos(j4);
IkReal x8143=(gconst1*sj3);
IkReal x8144=((1.0)*r21);
IkReal x8145=(cj2*sj0);
IkReal x8146=(sj1*sj2);
IkReal x8147=((1.0)*gconst1);
IkReal x8148=((1.0)*r01);
IkReal x8149=((1.0)*cj2);
IkReal x8150=(cj0*cj1);
IkReal x8151=(gconst2*sj3);
IkReal x8152=(cj1*sj2);
IkReal x8153=(cj3*gconst2);
IkReal x8154=(r20*x8142);
IkReal x8155=(cj3*x8142);
IkReal x8156=(r12*x8141);
IkReal x8157=(gconst2*x8141);
evalcond[0]=(sj0+((r12*x8142)));
evalcond[1]=((((-1.0)*x8144*x8157))+(((-1.0)*r20*x8141*x8147)));
evalcond[2]=(cj0+(((-1.0)*x8148*x8157))+(((-1.0)*r00*x8141*x8147)));
evalcond[3]=(((sj3*x8156))+((sj2*x8150))+(((-1.0)*cj0*sj1*x8149)));
evalcond[4]=((((-1.0)*x8149*x8150))+(((-1.0)*cj0*x8146))+(((-1.0)*cj3*x8156)));
evalcond[5]=(((x8143*x8154))+((r21*x8142*x8151))+((r20*x8153))+(((-1.0)*cj3*gconst1*x8144))+((cj1*cj2))+x8146);
evalcond[6]=(((r20*x8151))+(((-1.0)*cj3*x8147*x8154))+(((-1.0)*x8143*x8144))+(((-1.0)*x8142*x8144*x8153))+(((-1.0)*sj1*x8149))+x8152);
evalcond[7]=(((r00*x8142*x8143))+((r01*x8142*x8151))+((sj1*x8145))+((r00*x8153))+(((-1.0)*cj3*r01*x8147))+(((-1.0)*sj0*x8152)));
evalcond[8]=(((sj0*x8146))+(((-1.0)*x8143*x8148))+(((-1.0)*x8142*x8148*x8153))+((r00*x8151))+((cj1*x8145))+(((-1.0)*r00*x8147*x8155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8158=IKPowWithIntegerCheck(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01))),-1);
if(!x8158.valid){
continue;
}
CheckValue<IkReal> x8159=IKPowWithIntegerCheck(r12,-1);
if(!x8159.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x8158.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x8159.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x8158.value)))+IKsqr(((-1.0)*sj0*(x8159.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x8158.value)), ((-1.0)*sj0*(x8159.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8160=IKsin(j4);
IkReal x8161=IKcos(j4);
IkReal x8162=(gconst1*sj3);
IkReal x8163=((1.0)*r21);
IkReal x8164=(cj2*sj0);
IkReal x8165=(sj1*sj2);
IkReal x8166=((1.0)*gconst1);
IkReal x8167=((1.0)*r01);
IkReal x8168=((1.0)*cj2);
IkReal x8169=(cj0*cj1);
IkReal x8170=(gconst2*sj3);
IkReal x8171=(cj1*sj2);
IkReal x8172=(cj3*gconst2);
IkReal x8173=(r20*x8161);
IkReal x8174=(cj3*x8161);
IkReal x8175=(r12*x8160);
IkReal x8176=(gconst2*x8160);
evalcond[0]=(((r12*x8161))+sj0);
evalcond[1]=((((-1.0)*r20*x8160*x8166))+(((-1.0)*x8163*x8176)));
evalcond[2]=((((-1.0)*r00*x8160*x8166))+cj0+(((-1.0)*x8167*x8176)));
evalcond[3]=(((sj2*x8169))+(((-1.0)*cj0*sj1*x8168))+((sj3*x8175)));
evalcond[4]=((((-1.0)*cj0*x8165))+(((-1.0)*cj3*x8175))+(((-1.0)*x8168*x8169)));
evalcond[5]=(((x8162*x8173))+((r20*x8172))+(((-1.0)*cj3*gconst1*x8163))+((cj1*cj2))+((r21*x8161*x8170))+x8165);
evalcond[6]=((((-1.0)*sj1*x8168))+((r20*x8170))+(((-1.0)*x8161*x8163*x8172))+(((-1.0)*x8162*x8163))+(((-1.0)*cj3*x8166*x8173))+x8171);
evalcond[7]=((((-1.0)*cj3*r01*x8166))+((sj1*x8164))+((r00*x8161*x8162))+((r00*x8172))+(((-1.0)*sj0*x8171))+((r01*x8161*x8170)));
evalcond[8]=((((-1.0)*x8161*x8167*x8172))+(((-1.0)*r00*x8166*x8174))+(((-1.0)*x8162*x8167))+((cj1*x8164))+((sj0*x8165))+((r00*x8170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8177=gconst1*gconst1;
IkReal x8178=r20*r20;
IkReal x8179=gconst2*gconst2;
IkReal x8180=r21*r21;
IkReal x8181=(gconst2*r21);
IkReal x8182=(cj1*cj2);
IkReal x8183=((1.0)*sj3);
IkReal x8184=(sj1*sj2);
IkReal x8185=(cj3*r20);
IkReal x8186=(gconst1*r20);
IkReal x8187=((1.0)*r21);
IkReal x8188=(cj3*gconst1);
CheckValue<IkReal> x8189=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8183*(r22*r22)))+(((-1.0)*x8179*x8180*x8183))+(((-1.0)*x8177*x8178*x8183))+(((-2.0)*sj3*x8181*x8186)))),-1);
if(!x8189.valid){
continue;
}
CheckValue<IkReal> x8190 = IKatan2WithCheck(IkReal((((r22*x8182))+((r22*x8184))+((gconst2*r22*x8185))+(((-1.0)*r22*x8187*x8188)))),IkReal((((r21*x8179*x8185))+(((-1.0)*gconst2*x8180*x8188))+((x8184*x8186))+((x8182*x8186))+(((-1.0)*x8177*x8185*x8187))+((gconst2*x8178*x8188))+((x8181*x8182))+((x8181*x8184)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8189.value)))+(x8190.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8191=IKsin(j4);
IkReal x8192=IKcos(j4);
IkReal x8193=(gconst1*sj3);
IkReal x8194=((1.0)*r21);
IkReal x8195=(cj2*sj1);
IkReal x8196=(sj1*sj2);
IkReal x8197=((1.0)*gconst1);
IkReal x8198=((1.0)*cj0);
IkReal x8199=((1.0)*r01);
IkReal x8200=(cj1*cj2);
IkReal x8201=((1.0)*r11);
IkReal x8202=(gconst2*sj3);
IkReal x8203=(cj3*gconst2);
IkReal x8204=(cj1*sj2);
IkReal x8205=(r20*x8192);
IkReal x8206=(cj3*x8192);
IkReal x8207=(sj3*x8191);
IkReal x8208=(gconst2*x8191);
IkReal x8209=((1.0)*cj3*x8191);
evalcond[0]=((((-1.0)*r20*x8191*x8197))+((r22*x8192))+(((-1.0)*x8194*x8208)));
evalcond[1]=(cj0+(((-1.0)*r00*x8191*x8197))+((r02*x8192))+(((-1.0)*x8199*x8208)));
evalcond[2]=(((r12*x8192))+sj0+(((-1.0)*r10*x8191*x8197))+(((-1.0)*x8201*x8208)));
evalcond[3]=(((r22*x8207))+((x8193*x8205))+(((-1.0)*cj3*gconst1*x8194))+((r21*x8192*x8202))+x8196+x8200+((r20*x8203)));
evalcond[4]=(((r02*x8207))+((r01*x8192*x8202))+(((-1.0)*sj0*x8204))+(((-1.0)*cj3*r01*x8197))+((sj0*x8195))+((r00*x8203))+((r00*x8192*x8193)));
evalcond[5]=(((r12*x8207))+((cj0*x8204))+((r10*x8192*x8193))+(((-1.0)*x8195*x8198))+((r10*x8203))+((r11*x8192*x8202))+(((-1.0)*cj3*r11*x8197)));
evalcond[6]=((((-1.0)*cj3*x8197*x8205))+(((-1.0)*x8195))+(((-1.0)*x8192*x8194*x8203))+(((-1.0)*x8193*x8194))+(((-1.0)*r22*x8209))+x8204+((r20*x8202)));
evalcond[7]=(((sj0*x8200))+(((-1.0)*x8192*x8199*x8203))+((sj0*x8196))+(((-1.0)*r02*x8209))+(((-1.0)*x8193*x8199))+((r00*x8202))+(((-1.0)*r00*x8197*x8206)));
evalcond[8]=((((-1.0)*x8196*x8198))+(((-1.0)*x8198*x8200))+(((-1.0)*x8192*x8201*x8203))+(((-1.0)*r10*x8197*x8206))+(((-1.0)*x8193*x8201))+(((-1.0)*r12*x8209))+((r10*x8202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8210 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst2*r21*sj0))+((gconst1*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8210.valid){
continue;
}
CheckValue<IkReal> x8211=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r01))+((gconst2*r00)))),-1);
if(!x8211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8210.value)+(((1.5707963267949)*(x8211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8212=IKsin(j4);
IkReal x8213=IKcos(j4);
IkReal x8214=(gconst1*sj3);
IkReal x8215=((1.0)*r21);
IkReal x8216=(cj2*sj1);
IkReal x8217=(sj1*sj2);
IkReal x8218=((1.0)*gconst1);
IkReal x8219=((1.0)*cj0);
IkReal x8220=((1.0)*r01);
IkReal x8221=(cj1*cj2);
IkReal x8222=((1.0)*r11);
IkReal x8223=(gconst2*sj3);
IkReal x8224=(cj3*gconst2);
IkReal x8225=(cj1*sj2);
IkReal x8226=(r20*x8213);
IkReal x8227=(cj3*x8213);
IkReal x8228=(sj3*x8212);
IkReal x8229=(gconst2*x8212);
IkReal x8230=((1.0)*cj3*x8212);
evalcond[0]=((((-1.0)*r20*x8212*x8218))+((r22*x8213))+(((-1.0)*x8215*x8229)));
evalcond[1]=((((-1.0)*x8220*x8229))+cj0+((r02*x8213))+(((-1.0)*r00*x8212*x8218)));
evalcond[2]=(sj0+((r12*x8213))+(((-1.0)*r10*x8212*x8218))+(((-1.0)*x8222*x8229)));
evalcond[3]=(((r20*x8224))+((r21*x8213*x8223))+((r22*x8228))+(((-1.0)*cj3*gconst1*x8215))+((x8214*x8226))+x8221+x8217);
evalcond[4]=((((-1.0)*sj0*x8225))+((r02*x8228))+(((-1.0)*cj3*r01*x8218))+((r00*x8213*x8214))+((r00*x8224))+((sj0*x8216))+((r01*x8213*x8223)));
evalcond[5]=(((r12*x8228))+((cj0*x8225))+((r11*x8213*x8223))+((r10*x8213*x8214))+(((-1.0)*cj3*r11*x8218))+((r10*x8224))+(((-1.0)*x8216*x8219)));
evalcond[6]=(((r20*x8223))+(((-1.0)*cj3*x8218*x8226))+(((-1.0)*x8213*x8215*x8224))+(((-1.0)*x8216))+(((-1.0)*r22*x8230))+(((-1.0)*x8214*x8215))+x8225);
evalcond[7]=((((-1.0)*r02*x8230))+((r00*x8223))+(((-1.0)*x8214*x8220))+((sj0*x8221))+(((-1.0)*r00*x8218*x8227))+((sj0*x8217))+(((-1.0)*x8213*x8220*x8224)));
evalcond[8]=((((-1.0)*x8219*x8221))+(((-1.0)*x8214*x8222))+((r10*x8223))+(((-1.0)*r10*x8218*x8227))+(((-1.0)*r12*x8230))+(((-1.0)*x8217*x8219))+(((-1.0)*x8213*x8222*x8224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8231 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r20))+((cj0*gconst2*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8231.valid){
continue;
}
CheckValue<IkReal> x8232=IKPowWithIntegerCheck(IKsign((((gconst1*r11))+(((-1.0)*gconst2*r10)))),-1);
if(!x8232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8231.value)+(((1.5707963267949)*(x8232.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8233=IKsin(j4);
IkReal x8234=IKcos(j4);
IkReal x8235=(gconst1*sj3);
IkReal x8236=((1.0)*r21);
IkReal x8237=(cj2*sj1);
IkReal x8238=(sj1*sj2);
IkReal x8239=((1.0)*gconst1);
IkReal x8240=((1.0)*cj0);
IkReal x8241=((1.0)*r01);
IkReal x8242=(cj1*cj2);
IkReal x8243=((1.0)*r11);
IkReal x8244=(gconst2*sj3);
IkReal x8245=(cj3*gconst2);
IkReal x8246=(cj1*sj2);
IkReal x8247=(r20*x8234);
IkReal x8248=(cj3*x8234);
IkReal x8249=(sj3*x8233);
IkReal x8250=(gconst2*x8233);
IkReal x8251=((1.0)*cj3*x8233);
evalcond[0]=((((-1.0)*r20*x8233*x8239))+((r22*x8234))+(((-1.0)*x8236*x8250)));
evalcond[1]=(((r02*x8234))+(((-1.0)*r00*x8233*x8239))+cj0+(((-1.0)*x8241*x8250)));
evalcond[2]=(((r12*x8234))+sj0+(((-1.0)*x8243*x8250))+(((-1.0)*r10*x8233*x8239)));
evalcond[3]=((((-1.0)*cj3*gconst1*x8236))+((r20*x8245))+((r21*x8234*x8244))+((x8235*x8247))+((r22*x8249))+x8238+x8242);
evalcond[4]=(((r01*x8234*x8244))+(((-1.0)*sj0*x8246))+((r02*x8249))+((r00*x8234*x8235))+(((-1.0)*cj3*r01*x8239))+((sj0*x8237))+((r00*x8245)));
evalcond[5]=(((r10*x8245))+((cj0*x8246))+(((-1.0)*x8237*x8240))+(((-1.0)*cj3*r11*x8239))+((r10*x8234*x8235))+((r12*x8249))+((r11*x8234*x8244)));
evalcond[6]=(((r20*x8244))+(((-1.0)*r22*x8251))+(((-1.0)*x8237))+(((-1.0)*x8234*x8236*x8245))+(((-1.0)*x8235*x8236))+x8246+(((-1.0)*cj3*x8239*x8247)));
evalcond[7]=((((-1.0)*x8234*x8241*x8245))+((sj0*x8242))+(((-1.0)*r00*x8239*x8248))+((sj0*x8238))+(((-1.0)*r02*x8251))+((r00*x8244))+(((-1.0)*x8235*x8241)));
evalcond[8]=(((r10*x8244))+(((-1.0)*x8240*x8242))+(((-1.0)*r12*x8251))+(((-1.0)*x8238*x8240))+(((-1.0)*x8234*x8243*x8245))+(((-1.0)*r10*x8239*x8248))+(((-1.0)*x8235*x8243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8254 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8254)==0){
continue;
}
IkReal x8252=pow(x8254,-0.5);
IkReal x8253=((1.0)*x8252);
CheckValue<IkReal> x8255 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8255.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x8255.value))));
IkReal gconst4=(r20*x8253);
IkReal gconst5=(r21*x8253);
CheckValue<IkReal> x8256 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8256.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8256.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8260 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8260.valid){
continue;
}
IkReal x8257=((1.0)*(x8260.value));
IkReal x8258=x8252;
IkReal x8259=((1.0)*x8258);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8257)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8257)));
IkReal gconst4=(r20*x8259);
IkReal gconst5=(r21*x8259);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8264 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8264.valid){
continue;
}
IkReal x8261=((1.0)*(x8264.value));
IkReal x8262=x8252;
IkReal x8263=((1.0)*x8262);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8261)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8261)));
IkReal gconst4=(r20*x8263);
IkReal gconst5=(r21*x8263);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x8268 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8268.valid){
continue;
}
IkReal x8265=((1.0)*(x8268.value));
IkReal x8266=x8252;
IkReal x8267=((1.0)*x8266);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8265)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8265)));
IkReal gconst4=(r20*x8267);
IkReal gconst5=(r21*x8267);
IkReal x8269=r22*r22;
IkReal x8270=(cj0*r12);
IkReal x8271=((1.0)*r02*sj0);
CheckValue<IkReal> x8275=IKPowWithIntegerCheck(((-1.0)+x8269),-1);
if(!x8275.valid){
continue;
}
IkReal x8272=x8275.value;
if((((1.0)+(((-1.0)*x8269)))) < -0.00001)
continue;
IkReal x8273=IKsqrt(((1.0)+(((-1.0)*x8269))));
IkReal x8274=(r22*x8272*x8273);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x8271))+x8270)))+(IKabs(((((-1.0)*x8271*x8274))+((x8270*x8274))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8279 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8279.valid){
continue;
}
IkReal x8276=((1.0)*(x8279.value));
IkReal x8277=x8252;
IkReal x8278=((1.0)*x8277);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8276)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8276)));
IkReal gconst4=(r20*x8278);
IkReal gconst5=(r21*x8278);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8283 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8283.valid){
continue;
}
IkReal x8280=((1.0)*(x8283.value));
IkReal x8281=x8252;
IkReal x8282=((1.0)*x8281);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8280)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8280)));
IkReal gconst4=(r20*x8282);
IkReal gconst5=(r21*x8282);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8287 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8287.valid){
continue;
}
IkReal x8284=((1.0)*(x8287.value));
IkReal x8285=x8252;
IkReal x8286=((1.0)*x8285);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8284)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8284)));
IkReal gconst4=(r20*x8286);
IkReal gconst5=(r21*x8286);
IkReal x8288=((1.0)*sj3);
IkReal x8289=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8293=IKPowWithIntegerCheck(x8289,-1);
if(!x8293.valid){
continue;
}
IkReal x8290=x8293.value;
IkReal x8291=(r00*x8290);
IkReal x8292=(r01*x8290);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=x8289;
j4eval[3]=IKsign(((((-1.0)*x8288*x8292*(r21*r21*r21)))+(((-1.0)*r02*r22*x8288))+(((-1.0)*r20*x8288*x8291*(r21*r21)))+(((-1.0)*x8288*x8291*(r20*r20*r20)))+(((-1.0)*r21*x8288*x8292*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8297 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8297.valid){
continue;
}
IkReal x8294=((1.0)*(x8297.value));
IkReal x8295=x8252;
IkReal x8296=((1.0)*x8295);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8294)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8294)));
IkReal gconst4=(r20*x8296);
IkReal gconst5=(r21*x8296);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8301 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8301.valid){
continue;
}
IkReal x8298=((1.0)*(x8301.value));
IkReal x8299=x8252;
IkReal x8300=((1.0)*x8299);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8298)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8298)));
IkReal gconst4=(r20*x8300);
IkReal gconst5=(r21*x8300);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8305 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8305.valid){
continue;
}
IkReal x8302=((1.0)*(x8305.value));
IkReal x8303=x8252;
IkReal x8304=((1.0)*x8303);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8302)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8302)));
IkReal gconst4=(r20*x8304);
IkReal gconst5=(r21*x8304);
IkReal x8306=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8310=IKPowWithIntegerCheck(x8306,-1);
if(!x8310.valid){
continue;
}
IkReal x8307=x8310.value;
IkReal x8308=((1.0)*x8307);
IkReal x8309=((((-2.0)*r00*r01*r20*r21*x8307))+(((-1.0)*(r02*r02)))+(((-1.0)*x8308*(r01*r01)*(r21*r21)))+(((-1.0)*x8308*(r00*r00)*(r20*r20))));
j4eval[0]=x8309;
j4eval[1]=IKsign(x8309);
j4eval[2]=r02;
j4eval[3]=x8306;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8311=(gconst4*r00);
IkReal x8312=(gconst5*r01);
CheckValue<IkReal> x8313=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8311*x8311)))+(((-2.0)*x8311*x8312))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8312*x8312))))),-1);
if(!x8313.valid){
continue;
}
CheckValue<IkReal> x8314 = IKatan2WithCheck(IkReal(((((-1.0)*x8312))+(((-1.0)*x8311)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8313.value)))+(x8314.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8315=IKsin(j4);
IkReal x8316=IKcos(j4);
IkReal x8317=((1.0)*sj1);
IkReal x8318=(gconst5*r11);
IkReal x8319=(gconst5*r21);
IkReal x8320=(gconst5*r01);
IkReal x8321=((1.0)*x8316);
IkReal x8322=((1.0)*x8315);
IkReal x8323=(gconst4*x8322);
evalcond[0]=((((-1.0)*r20*x8323))+((r22*x8316))+(((-1.0)*x8319*x8322)));
evalcond[1]=((((-1.0)*x8318*x8322))+(((-1.0)*r10*x8323))+((r12*x8316)));
evalcond[2]=((1.0)+(((-1.0)*r00*x8323))+((r02*x8316))+(((-1.0)*x8320*x8322)));
evalcond[3]=((((-1.0)*gconst4*r00*x8321))+(((-1.0)*x8320*x8321))+(((-1.0)*r02*x8322)));
evalcond[4]=((((-1.0)*gconst4*r20*x8321))+(((-1.0)*r22*x8322))+((cj1*sj2))+(((-1.0)*cj2*x8317))+(((-1.0)*x8319*x8321)));
evalcond[5]=((((-1.0)*gconst4*r10*x8321))+(((-1.0)*x8318*x8321))+(((-1.0)*cj1*cj2))+(((-1.0)*sj2*x8317))+(((-1.0)*r12*x8322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8324 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r11))+((gconst4*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8324.valid){
continue;
}
CheckValue<IkReal> x8325=IKPowWithIntegerCheck(IKsign((((gconst5*r20))+(((-1.0)*gconst4*r21)))),-1);
if(!x8325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8324.value)+(((1.5707963267949)*(x8325.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8326=IKsin(j4);
IkReal x8327=IKcos(j4);
IkReal x8328=((1.0)*sj1);
IkReal x8329=(gconst5*r11);
IkReal x8330=(gconst5*r21);
IkReal x8331=(gconst5*r01);
IkReal x8332=((1.0)*x8327);
IkReal x8333=((1.0)*x8326);
IkReal x8334=(gconst4*x8333);
evalcond[0]=((((-1.0)*r20*x8334))+((r22*x8327))+(((-1.0)*x8330*x8333)));
evalcond[1]=((((-1.0)*r10*x8334))+((r12*x8327))+(((-1.0)*x8329*x8333)));
evalcond[2]=((1.0)+((r02*x8327))+(((-1.0)*r00*x8334))+(((-1.0)*x8331*x8333)));
evalcond[3]=((((-1.0)*gconst4*r00*x8332))+(((-1.0)*r02*x8333))+(((-1.0)*x8331*x8332)));
evalcond[4]=((((-1.0)*r22*x8333))+(((-1.0)*gconst4*r20*x8332))+((cj1*sj2))+(((-1.0)*x8330*x8332))+(((-1.0)*cj2*x8328)));
evalcond[5]=((((-1.0)*r12*x8333))+(((-1.0)*cj1*cj2))+(((-1.0)*x8329*x8332))+(((-1.0)*gconst4*r10*x8332))+(((-1.0)*sj2*x8328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8335 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8335.valid){
continue;
}
CheckValue<IkReal> x8336=IKPowWithIntegerCheck(IKsign((((gconst4*r11))+(((-1.0)*gconst5*r10)))),-1);
if(!x8336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8335.value)+(((1.5707963267949)*(x8336.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8337=IKsin(j4);
IkReal x8338=IKcos(j4);
IkReal x8339=((1.0)*sj1);
IkReal x8340=(gconst5*r11);
IkReal x8341=(gconst5*r21);
IkReal x8342=(gconst5*r01);
IkReal x8343=((1.0)*x8338);
IkReal x8344=((1.0)*x8337);
IkReal x8345=(gconst4*x8344);
evalcond[0]=(((r22*x8338))+(((-1.0)*x8341*x8344))+(((-1.0)*r20*x8345)));
evalcond[1]=(((r12*x8338))+(((-1.0)*x8340*x8344))+(((-1.0)*r10*x8345)));
evalcond[2]=((1.0)+(((-1.0)*x8342*x8344))+(((-1.0)*r00*x8345))+((r02*x8338)));
evalcond[3]=((((-1.0)*x8342*x8343))+(((-1.0)*r02*x8344))+(((-1.0)*gconst4*r00*x8343)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*x8341*x8343))+(((-1.0)*gconst4*r20*x8343))+(((-1.0)*r22*x8344))+(((-1.0)*cj2*x8339)));
evalcond[5]=((((-1.0)*sj2*x8339))+(((-1.0)*cj1*cj2))+(((-1.0)*gconst4*r10*x8343))+(((-1.0)*x8340*x8343))+(((-1.0)*r12*x8344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8349 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8349.valid){
continue;
}
IkReal x8346=((1.0)*(x8349.value));
IkReal x8347=x8252;
IkReal x8348=((1.0)*x8347);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8346)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8346)));
IkReal gconst4=(r20*x8348);
IkReal gconst5=(r21*x8348);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8353 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8353.valid){
continue;
}
IkReal x8350=((1.0)*(x8353.value));
IkReal x8351=x8252;
IkReal x8352=((1.0)*x8351);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8350)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8350)));
IkReal gconst4=(r20*x8352);
IkReal gconst5=(r21*x8352);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8357 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8357.valid){
continue;
}
IkReal x8354=((1.0)*(x8357.value));
IkReal x8355=x8252;
IkReal x8356=((1.0)*x8355);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8354)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8354)));
IkReal gconst4=(r20*x8356);
IkReal gconst5=(r21*x8356);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8358=(gconst5*r01);
IkReal x8359=(gconst4*r00);
CheckValue<IkReal> x8360 = IKatan2WithCheck(IkReal((x8358+x8359)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8360.valid){
continue;
}
CheckValue<IkReal> x8361=IKPowWithIntegerCheck(IKsign(((x8359*x8359)+(((2.0)*x8358*x8359))+(x8358*x8358)+(r02*r02))),-1);
if(!x8361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8360.value)+(((1.5707963267949)*(x8361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8362=IKcos(j4);
IkReal x8363=IKsin(j4);
IkReal x8364=((1.0)*cj2);
IkReal x8365=(gconst4*x8362);
IkReal x8366=(gconst5*x8362);
IkReal x8367=((1.0)*gconst4*x8363);
IkReal x8368=((1.0)*gconst5*x8363);
evalcond[0]=(((r01*x8366))+((r00*x8365))+((r02*x8363)));
evalcond[1]=(((r22*x8362))+(((-1.0)*r21*x8368))+(((-1.0)*r20*x8367)));
evalcond[2]=((((-1.0)*r11*x8368))+((r12*x8362))+(((-1.0)*r10*x8367)));
evalcond[3]=((1.0)+(((-1.0)*r01*x8368))+(((-1.0)*r00*x8367))+((r02*x8362)));
evalcond[4]=(((r22*x8363))+((cj1*sj2))+((r20*x8365))+(((-1.0)*sj1*x8364))+((r21*x8366)));
evalcond[5]=((((-1.0)*cj1*x8364))+(((-1.0)*sj1*sj2))+((r12*x8363))+((r10*x8365))+((r11*x8366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8369 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r11))+((gconst4*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8369.valid){
continue;
}
CheckValue<IkReal> x8370=IKPowWithIntegerCheck(IKsign((((gconst5*r20))+(((-1.0)*gconst4*r21)))),-1);
if(!x8370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8369.value)+(((1.5707963267949)*(x8370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8371=IKcos(j4);
IkReal x8372=IKsin(j4);
IkReal x8373=((1.0)*cj2);
IkReal x8374=(gconst4*x8371);
IkReal x8375=(gconst5*x8371);
IkReal x8376=((1.0)*gconst4*x8372);
IkReal x8377=((1.0)*gconst5*x8372);
evalcond[0]=(((r00*x8374))+((r02*x8372))+((r01*x8375)));
evalcond[1]=((((-1.0)*r20*x8376))+((r22*x8371))+(((-1.0)*r21*x8377)));
evalcond[2]=(((r12*x8371))+(((-1.0)*r10*x8376))+(((-1.0)*r11*x8377)));
evalcond[3]=((1.0)+(((-1.0)*r01*x8377))+(((-1.0)*r00*x8376))+((r02*x8371)));
evalcond[4]=(((r20*x8374))+((cj1*sj2))+((r21*x8375))+(((-1.0)*sj1*x8373))+((r22*x8372)));
evalcond[5]=(((r10*x8374))+(((-1.0)*cj1*x8373))+(((-1.0)*sj1*sj2))+((r12*x8372))+((r11*x8375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8378 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8378.valid){
continue;
}
CheckValue<IkReal> x8379=IKPowWithIntegerCheck(IKsign((((gconst4*r11))+(((-1.0)*gconst5*r10)))),-1);
if(!x8379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8378.value)+(((1.5707963267949)*(x8379.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8380=IKcos(j4);
IkReal x8381=IKsin(j4);
IkReal x8382=((1.0)*cj2);
IkReal x8383=(gconst4*x8380);
IkReal x8384=(gconst5*x8380);
IkReal x8385=((1.0)*gconst4*x8381);
IkReal x8386=((1.0)*gconst5*x8381);
evalcond[0]=(((r02*x8381))+((r01*x8384))+((r00*x8383)));
evalcond[1]=(((r22*x8380))+(((-1.0)*r21*x8386))+(((-1.0)*r20*x8385)));
evalcond[2]=((((-1.0)*r10*x8385))+((r12*x8380))+(((-1.0)*r11*x8386)));
evalcond[3]=((1.0)+((r02*x8380))+(((-1.0)*r01*x8386))+(((-1.0)*r00*x8385)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*sj1*x8382))+((r21*x8384))+((r22*x8381))+((r20*x8383)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x8381))+((r10*x8383))+(((-1.0)*cj1*x8382))+((r11*x8384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8390 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8390.valid){
continue;
}
IkReal x8387=((1.0)*(x8390.value));
IkReal x8388=x8252;
IkReal x8389=((1.0)*x8388);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8387)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8387)));
IkReal gconst4=(r20*x8389);
IkReal gconst5=(r21*x8389);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8394 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8394.valid){
continue;
}
IkReal x8391=((1.0)*(x8394.value));
IkReal x8392=x8252;
IkReal x8393=((1.0)*x8392);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8391)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8391)));
IkReal gconst4=(r20*x8393);
IkReal gconst5=(r21*x8393);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8398 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8398.valid){
continue;
}
IkReal x8395=((1.0)*(x8398.value));
IkReal x8396=x8252;
IkReal x8397=((1.0)*x8396);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8395)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8395)));
IkReal gconst4=(r20*x8397);
IkReal gconst5=(r21*x8397);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8399=(gconst5*r01);
IkReal x8400=(gconst4*r00);
CheckValue<IkReal> x8401=IKPowWithIntegerCheck(IKsign(((x8400*x8400)+(((2.0)*x8399*x8400))+(r02*r02)+(x8399*x8399))),-1);
if(!x8401.valid){
continue;
}
CheckValue<IkReal> x8402 = IKatan2WithCheck(IkReal((x8399+x8400)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8401.value)))+(x8402.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8403=IKcos(j4);
IkReal x8404=IKsin(j4);
IkReal x8405=(gconst4*x8403);
IkReal x8406=(gconst5*x8403);
IkReal x8407=((1.0)*gconst4*x8404);
IkReal x8408=((1.0)*gconst5*x8404);
evalcond[0]=(((r00*x8405))+((r01*x8406))+((r02*x8404)));
evalcond[1]=((((-1.0)*r20*x8407))+(((-1.0)*r21*x8408))+((r22*x8403)));
evalcond[2]=(((r12*x8403))+(((-1.0)*r11*x8408))+(((-1.0)*r10*x8407)));
evalcond[3]=((1.0)+(((-1.0)*r01*x8408))+((r02*x8403))+(((-1.0)*r00*x8407)));
evalcond[4]=(((r22*x8404))+((sj1*sj2))+((r21*x8406))+((cj1*cj2))+((r20*x8405)));
evalcond[5]=(((r11*x8406))+((r12*x8404))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r10*x8405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8409 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r11))+((gconst4*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8409.valid){
continue;
}
CheckValue<IkReal> x8410=IKPowWithIntegerCheck(IKsign((((gconst5*r20))+(((-1.0)*gconst4*r21)))),-1);
if(!x8410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8409.value)+(((1.5707963267949)*(x8410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8411=IKcos(j4);
IkReal x8412=IKsin(j4);
IkReal x8413=(gconst4*x8411);
IkReal x8414=(gconst5*x8411);
IkReal x8415=((1.0)*gconst4*x8412);
IkReal x8416=((1.0)*gconst5*x8412);
evalcond[0]=(((r02*x8412))+((r00*x8413))+((r01*x8414)));
evalcond[1]=((((-1.0)*r20*x8415))+(((-1.0)*r21*x8416))+((r22*x8411)));
evalcond[2]=((((-1.0)*r11*x8416))+((r12*x8411))+(((-1.0)*r10*x8415)));
evalcond[3]=((1.0)+((r02*x8411))+(((-1.0)*r00*x8415))+(((-1.0)*r01*x8416)));
evalcond[4]=(((r20*x8413))+((sj1*sj2))+((r21*x8414))+((cj1*cj2))+((r22*x8412)));
evalcond[5]=(((r12*x8412))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r11*x8414))+((r10*x8413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8417 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8417.valid){
continue;
}
CheckValue<IkReal> x8418=IKPowWithIntegerCheck(IKsign((((gconst4*r11))+(((-1.0)*gconst5*r10)))),-1);
if(!x8418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8417.value)+(((1.5707963267949)*(x8418.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8419=IKcos(j4);
IkReal x8420=IKsin(j4);
IkReal x8421=(gconst4*x8419);
IkReal x8422=(gconst5*x8419);
IkReal x8423=((1.0)*gconst4*x8420);
IkReal x8424=((1.0)*gconst5*x8420);
evalcond[0]=(((r02*x8420))+((r01*x8422))+((r00*x8421)));
evalcond[1]=((((-1.0)*r21*x8424))+((r22*x8419))+(((-1.0)*r20*x8423)));
evalcond[2]=((((-1.0)*r10*x8423))+((r12*x8419))+(((-1.0)*r11*x8424)));
evalcond[3]=((1.0)+((r02*x8419))+(((-1.0)*r01*x8424))+(((-1.0)*r00*x8423)));
evalcond[4]=(((r21*x8422))+((r20*x8421))+((sj1*sj2))+((cj1*cj2))+((r22*x8420)));
evalcond[5]=(((r10*x8421))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r11*x8422))+((r12*x8420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8428 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8428.valid){
continue;
}
IkReal x8425=((1.0)*(x8428.value));
IkReal x8426=x8252;
IkReal x8427=((1.0)*x8426);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8425)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8425)));
IkReal gconst4=(r20*x8427);
IkReal gconst5=(r21*x8427);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8432 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8432.valid){
continue;
}
IkReal x8429=((1.0)*(x8432.value));
IkReal x8430=x8252;
IkReal x8431=((1.0)*x8430);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8429)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8429)));
IkReal gconst4=(r20*x8431);
IkReal gconst5=(r21*x8431);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8436 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8436.valid){
continue;
}
IkReal x8433=((1.0)*(x8436.value));
IkReal x8434=x8252;
IkReal x8435=((1.0)*x8434);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8433)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8433)));
IkReal gconst4=(r20*x8435);
IkReal gconst5=(r21*x8435);
IkReal x8437=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8441=IKPowWithIntegerCheck(x8437,-1);
if(!x8441.valid){
continue;
}
IkReal x8438=x8441.value;
IkReal x8439=((1.0)*x8438);
IkReal x8440=((((-1.0)*x8439*(r00*r00)*(r20*r20)))+(((-1.0)*x8439*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x8438)));
j4eval[0]=x8440;
j4eval[1]=IKsign(x8440);
j4eval[2]=r02;
j4eval[3]=x8437;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8442=(gconst4*r00);
IkReal x8443=(gconst5*r01);
CheckValue<IkReal> x8444=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8442*x8443))+(((-1.0)*(x8443*x8443)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8442*x8442))))),-1);
if(!x8444.valid){
continue;
}
CheckValue<IkReal> x8445 = IKatan2WithCheck(IkReal(((((-1.0)*x8442))+(((-1.0)*x8443)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8444.value)))+(x8445.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8446=IKsin(j4);
IkReal x8447=IKcos(j4);
IkReal x8448=(gconst5*r11);
IkReal x8449=(gconst5*r21);
IkReal x8450=(gconst5*r01);
IkReal x8451=((1.0)*x8447);
IkReal x8452=((1.0)*x8446);
IkReal x8453=(gconst4*x8452);
evalcond[0]=(((r22*x8447))+(((-1.0)*x8449*x8452))+(((-1.0)*r20*x8453)));
evalcond[1]=(((r12*x8447))+(((-1.0)*r10*x8453))+(((-1.0)*x8448*x8452)));
evalcond[2]=((1.0)+(((-1.0)*r00*x8453))+(((-1.0)*x8450*x8452))+((r02*x8447)));
evalcond[3]=((((-1.0)*gconst4*r00*x8451))+(((-1.0)*x8450*x8451))+(((-1.0)*r02*x8452)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x8452))+(((-1.0)*x8449*x8451))+(((-1.0)*gconst4*r20*x8451))+((cj1*cj2)));
evalcond[5]=((((-1.0)*gconst4*r10*x8451))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x8452))+(((-1.0)*x8448*x8451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8454 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r11))+((gconst4*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8454.valid){
continue;
}
CheckValue<IkReal> x8455=IKPowWithIntegerCheck(IKsign((((gconst5*r20))+(((-1.0)*gconst4*r21)))),-1);
if(!x8455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8454.value)+(((1.5707963267949)*(x8455.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8456=IKsin(j4);
IkReal x8457=IKcos(j4);
IkReal x8458=(gconst5*r11);
IkReal x8459=(gconst5*r21);
IkReal x8460=(gconst5*r01);
IkReal x8461=((1.0)*x8457);
IkReal x8462=((1.0)*x8456);
IkReal x8463=(gconst4*x8462);
evalcond[0]=((((-1.0)*x8459*x8462))+((r22*x8457))+(((-1.0)*r20*x8463)));
evalcond[1]=((((-1.0)*r10*x8463))+((r12*x8457))+(((-1.0)*x8458*x8462)));
evalcond[2]=((1.0)+((r02*x8457))+(((-1.0)*x8460*x8462))+(((-1.0)*r00*x8463)));
evalcond[3]=((((-1.0)*gconst4*r00*x8461))+(((-1.0)*r02*x8462))+(((-1.0)*x8460*x8461)));
evalcond[4]=((((-1.0)*x8459*x8461))+((sj1*sj2))+(((-1.0)*gconst4*r20*x8461))+((cj1*cj2))+(((-1.0)*r22*x8462)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst4*r10*x8461))+(((-1.0)*r12*x8462))+(((-1.0)*x8458*x8461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8464 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8464.valid){
continue;
}
CheckValue<IkReal> x8465=IKPowWithIntegerCheck(IKsign((((gconst4*r11))+(((-1.0)*gconst5*r10)))),-1);
if(!x8465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8464.value)+(((1.5707963267949)*(x8465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8466=IKsin(j4);
IkReal x8467=IKcos(j4);
IkReal x8468=(gconst5*r11);
IkReal x8469=(gconst5*r21);
IkReal x8470=(gconst5*r01);
IkReal x8471=((1.0)*x8467);
IkReal x8472=((1.0)*x8466);
IkReal x8473=(gconst4*x8472);
evalcond[0]=(((r22*x8467))+(((-1.0)*x8469*x8472))+(((-1.0)*r20*x8473)));
evalcond[1]=(((r12*x8467))+(((-1.0)*r10*x8473))+(((-1.0)*x8468*x8472)));
evalcond[2]=((1.0)+(((-1.0)*x8470*x8472))+((r02*x8467))+(((-1.0)*r00*x8473)));
evalcond[3]=((((-1.0)*gconst4*r00*x8471))+(((-1.0)*r02*x8472))+(((-1.0)*x8470*x8471)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*gconst4*r20*x8471))+(((-1.0)*r22*x8472))+((cj1*cj2))+(((-1.0)*x8469*x8471)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst4*r10*x8471))+(((-1.0)*x8468*x8471))+(((-1.0)*r12*x8472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x8474=((-1.0)*r21);
CheckValue<IkReal> x8476 = IKatan2WithCheck(IkReal(r20),IkReal(x8474),IKFAST_ATAN2_MAGTHRESH);
if(!x8476.valid){
continue;
}
IkReal x8475=((1.0)*(x8476.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8475)));
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x8474);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8475)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x8477=((1.0)*r01*r21);
IkReal x8478=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x8478))+(((-1.0)*x8477)));
j4eval[1]=(((sj3*x8477))+((sj3*x8478)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8479=((-1.0)*r21);
CheckValue<IkReal> x8481 = IKatan2WithCheck(IkReal(r20),IkReal(x8479),IKFAST_ATAN2_MAGTHRESH);
if(!x8481.valid){
continue;
}
IkReal x8480=((1.0)*(x8481.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8480)));
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x8479);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8480)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x8482=((1.0)*r01*r21);
IkReal x8483=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x8483))+(((-1.0)*x8482)));
j4eval[1]=((((-1.0)*cj3*x8482))+(((-1.0)*cj3*x8483)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8484=((-1.0)*r21);
CheckValue<IkReal> x8486 = IKatan2WithCheck(IkReal(r20),IkReal(x8484),IKFAST_ATAN2_MAGTHRESH);
if(!x8486.valid){
continue;
}
IkReal x8485=((1.0)*(x8486.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8485)));
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x8484);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8485)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x8487=((1.0)*sj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((r01*r21*x8487))+((r00*r20*x8487)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8488=IKPowWithIntegerCheck(r12,-1);
if(!x8488.valid){
continue;
}
CheckValue<IkReal> x8489=IKPowWithIntegerCheck(sj3,-1);
if(!x8489.valid){
continue;
}
CheckValue<IkReal> x8490=IKPowWithIntegerCheck((((gconst5*r01*sj3))+((gconst4*r00*sj3))),-1);
if(!x8490.valid){
continue;
}
if( IKabs(((x8488.value)*(x8489.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8490.value)*(((((-1.0)*cj3*gconst5*r00))+((cj3*gconst4*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8488.value)*(x8489.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x8490.value)*(((((-1.0)*cj3*gconst5*r00))+((cj3*gconst4*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x8488.value)*(x8489.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x8490.value)*(((((-1.0)*cj3*gconst5*r00))+((cj3*gconst4*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8491=IKsin(j4);
IkReal x8492=IKcos(j4);
IkReal x8493=(cj1*sj2);
IkReal x8494=(gconst5*sj3);
IkReal x8495=(gconst4*sj3);
IkReal x8496=((1.0)*r21);
IkReal x8497=(sj1*sj2);
IkReal x8498=((1.0)*cj2);
IkReal x8499=((1.0)*r01);
IkReal x8500=((1.0)*cj3);
IkReal x8501=(cj3*gconst5);
IkReal x8502=(sj1*x8498);
IkReal x8503=(gconst4*x8499);
IkReal x8504=(r12*x8491);
IkReal x8505=(r00*x8492);
IkReal x8506=((1.0)*gconst4*r20);
IkReal x8507=(gconst5*x8491);
IkReal x8508=(cj3*x8492);
evalcond[0]=(r12*x8492);
evalcond[1]=(((sj3*x8504))+x8493+(((-1.0)*x8502)));
evalcond[2]=((((-1.0)*x8491*x8506))+(((-1.0)*x8496*x8507)));
evalcond[3]=((1.0)+(((-1.0)*x8499*x8507))+(((-1.0)*gconst4*r00*x8491)));
evalcond[4]=((((-1.0)*cj1*x8498))+(((-1.0)*x8497))+(((-1.0)*x8500*x8504)));
evalcond[5]=(((r01*x8492*x8494))+((r00*x8501))+(((-1.0)*cj3*x8503))+((x8495*x8505)));
evalcond[6]=(((r00*x8494))+(((-1.0)*x8492*x8499*x8501))+(((-1.0)*x8495*x8499))+(((-1.0)*gconst4*x8500*x8505)));
evalcond[7]=(x8497+((r20*x8492*x8495))+((r21*x8492*x8494))+((cj1*cj2))+((r20*x8501))+(((-1.0)*cj3*gconst4*x8496)));
evalcond[8]=(x8493+(((-1.0)*x8492*x8496*x8501))+(((-1.0)*x8502))+(((-1.0)*x8495*x8496))+((r20*x8494))+(((-1.0)*gconst4*r20*x8492*x8500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8509=((1.0)*r00);
IkReal x8510=((1.0)*gconst5*r01);
CheckValue<IkReal> x8511=IKPowWithIntegerCheck(((((-1.0)*gconst4*x8509))+(((-1.0)*x8510))),-1);
if(!x8511.valid){
continue;
}
CheckValue<IkReal> x8512=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst4*x8509))+(((-1.0)*cj3*x8510))),-1);
if(!x8512.valid){
continue;
}
if( IKabs(((-1.0)*(x8511.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8512.value)*((((gconst4*r01*sj3))+(((-1.0)*gconst5*sj3*x8509)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x8511.value)))+IKsqr(((x8512.value)*((((gconst4*r01*sj3))+(((-1.0)*gconst5*sj3*x8509))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x8511.value)), ((x8512.value)*((((gconst4*r01*sj3))+(((-1.0)*gconst5*sj3*x8509))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8513=IKsin(j4);
IkReal x8514=IKcos(j4);
IkReal x8515=(cj1*sj2);
IkReal x8516=(gconst5*sj3);
IkReal x8517=(gconst4*sj3);
IkReal x8518=((1.0)*r21);
IkReal x8519=(sj1*sj2);
IkReal x8520=((1.0)*cj2);
IkReal x8521=((1.0)*r01);
IkReal x8522=((1.0)*cj3);
IkReal x8523=(cj3*gconst5);
IkReal x8524=(sj1*x8520);
IkReal x8525=(gconst4*x8521);
IkReal x8526=(r12*x8513);
IkReal x8527=(r00*x8514);
IkReal x8528=((1.0)*gconst4*r20);
IkReal x8529=(gconst5*x8513);
IkReal x8530=(cj3*x8514);
evalcond[0]=(r12*x8514);
evalcond[1]=(x8515+((sj3*x8526))+(((-1.0)*x8524)));
evalcond[2]=((((-1.0)*x8518*x8529))+(((-1.0)*x8513*x8528)));
evalcond[3]=((1.0)+(((-1.0)*x8521*x8529))+(((-1.0)*gconst4*r00*x8513)));
evalcond[4]=((((-1.0)*cj1*x8520))+(((-1.0)*x8519))+(((-1.0)*x8522*x8526)));
evalcond[5]=((((-1.0)*cj3*x8525))+((x8517*x8527))+((r01*x8514*x8516))+((r00*x8523)));
evalcond[6]=((((-1.0)*x8517*x8521))+(((-1.0)*x8514*x8521*x8523))+((r00*x8516))+(((-1.0)*gconst4*x8522*x8527)));
evalcond[7]=(((r20*x8523))+x8519+(((-1.0)*cj3*gconst4*x8518))+((r21*x8514*x8516))+((cj1*cj2))+((r20*x8514*x8517)));
evalcond[8]=(x8515+(((-1.0)*x8517*x8518))+(((-1.0)*x8514*x8518*x8523))+(((-1.0)*x8524))+(((-1.0)*gconst4*r20*x8514*x8522))+((r20*x8516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8531=((1.0)*r00);
IkReal x8532=(gconst5*r01);
CheckValue<IkReal> x8533=IKPowWithIntegerCheck(((((-1.0)*x8532))+(((-1.0)*gconst4*x8531))),-1);
if(!x8533.valid){
continue;
}
CheckValue<IkReal> x8534=IKPowWithIntegerCheck((((gconst4*r00*sj3))+((sj3*x8532))),-1);
if(!x8534.valid){
continue;
}
if( IKabs(((-1.0)*(x8533.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8534.value)*((((cj3*gconst4*r01))+(((-1.0)*cj3*gconst5*x8531)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x8533.value)))+IKsqr(((x8534.value)*((((cj3*gconst4*r01))+(((-1.0)*cj3*gconst5*x8531))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x8533.value)), ((x8534.value)*((((cj3*gconst4*r01))+(((-1.0)*cj3*gconst5*x8531))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8535=IKsin(j4);
IkReal x8536=IKcos(j4);
IkReal x8537=(cj1*sj2);
IkReal x8538=(gconst5*sj3);
IkReal x8539=(gconst4*sj3);
IkReal x8540=((1.0)*r21);
IkReal x8541=(sj1*sj2);
IkReal x8542=((1.0)*cj2);
IkReal x8543=((1.0)*r01);
IkReal x8544=((1.0)*cj3);
IkReal x8545=(cj3*gconst5);
IkReal x8546=(sj1*x8542);
IkReal x8547=(gconst4*x8543);
IkReal x8548=(r12*x8535);
IkReal x8549=(r00*x8536);
IkReal x8550=((1.0)*gconst4*r20);
IkReal x8551=(gconst5*x8535);
IkReal x8552=(cj3*x8536);
evalcond[0]=(r12*x8536);
evalcond[1]=((((-1.0)*x8546))+x8537+((sj3*x8548)));
evalcond[2]=((((-1.0)*x8540*x8551))+(((-1.0)*x8535*x8550)));
evalcond[3]=((1.0)+(((-1.0)*x8543*x8551))+(((-1.0)*gconst4*r00*x8535)));
evalcond[4]=((((-1.0)*x8544*x8548))+(((-1.0)*cj1*x8542))+(((-1.0)*x8541)));
evalcond[5]=(((r00*x8545))+((x8539*x8549))+(((-1.0)*cj3*x8547))+((r01*x8536*x8538)));
evalcond[6]=((((-1.0)*x8539*x8543))+(((-1.0)*gconst4*x8544*x8549))+((r00*x8538))+(((-1.0)*x8536*x8543*x8545)));
evalcond[7]=(x8541+((r20*x8536*x8539))+((r20*x8545))+((cj1*cj2))+(((-1.0)*cj3*gconst4*x8540))+((r21*x8536*x8538)));
evalcond[8]=((((-1.0)*x8539*x8540))+(((-1.0)*x8546))+x8537+(((-1.0)*x8536*x8540*x8545))+((r20*x8538))+(((-1.0)*gconst4*r20*x8536*x8544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8553=gconst5*gconst5;
IkReal x8554=gconst4*gconst4;
IkReal x8555=(gconst5*r21);
IkReal x8556=((1.0)*sj3);
IkReal x8557=(gconst4*r00);
IkReal x8558=(cj3*r00);
IkReal x8559=(gconst5*r20);
IkReal x8560=(r20*x8554);
IkReal x8561=(r21*x8553);
IkReal x8562=((1.0)*cj3*gconst4*r01);
CheckValue<IkReal> x8563=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8555*x8556*x8557))+(((-1.0)*r01*x8556*x8561))+(((-1.0)*r00*x8556*x8560))+(((-1.0)*r02*r22*x8556))+(((-1.0)*gconst4*r01*x8556*x8559)))),-1);
if(!x8563.valid){
continue;
}
CheckValue<IkReal> x8564 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8562))+((gconst5*r22*x8558)))),IkReal(((((-1.0)*x8555*x8562))+((cj3*x8557*x8559))+(((-1.0)*cj3*r01*x8560))+((x8558*x8561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8563.value)))+(x8564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8565=IKsin(j4);
IkReal x8566=IKcos(j4);
IkReal x8567=(cj1*sj2);
IkReal x8568=((1.0)*cj3);
IkReal x8569=(gconst5*r11);
IkReal x8570=(gconst5*sj3);
IkReal x8571=(gconst4*sj3);
IkReal x8572=((1.0)*r21);
IkReal x8573=(sj1*sj2);
IkReal x8574=((1.0)*cj2);
IkReal x8575=(cj3*gconst5);
IkReal x8576=(sj1*x8574);
IkReal x8577=((1.0)*gconst4*r01);
IkReal x8578=(r12*x8565);
IkReal x8579=(r00*x8566);
IkReal x8580=(r22*x8565);
IkReal x8581=(r02*x8565);
IkReal x8582=(gconst5*x8565);
IkReal x8583=(r20*x8566);
IkReal x8584=(gconst5*x8566);
IkReal x8585=(r10*x8566);
IkReal x8586=((1.0)*gconst4*x8565);
evalcond[0]=((((-1.0)*r20*x8586))+(((-1.0)*x8572*x8582))+((r22*x8566)));
evalcond[1]=((((-1.0)*r10*x8586))+((r12*x8566))+(((-1.0)*x8565*x8569)));
evalcond[2]=((1.0)+((r02*x8566))+(((-1.0)*r01*x8582))+(((-1.0)*r00*x8586)));
evalcond[3]=(((sj3*x8581))+(((-1.0)*gconst4*r01*x8568))+((r00*x8575))+((r01*x8566*x8570))+((x8571*x8579)));
evalcond[4]=((((-1.0)*r01*x8568*x8584))+(((-1.0)*x8568*x8581))+((r00*x8570))+(((-1.0)*r01*x8571))+(((-1.0)*gconst4*x8568*x8579)));
evalcond[5]=(((sj3*x8580))+(((-1.0)*gconst4*r21*x8568))+x8573+((r21*x8566*x8570))+((cj1*cj2))+((r20*x8575))+((x8571*x8583)));
evalcond[6]=(((sj3*x8578))+x8567+(((-1.0)*x8576))+((sj3*x8566*x8569))+((r10*x8575))+(((-1.0)*gconst4*r11*x8568))+((x8571*x8585)));
evalcond[7]=((((-1.0)*gconst4*x8568*x8583))+x8567+(((-1.0)*x8576))+(((-1.0)*x8571*x8572))+(((-1.0)*x8568*x8580))+((r20*x8570))+(((-1.0)*r21*x8568*x8584)));
evalcond[8]=((((-1.0)*gconst4*x8568*x8585))+(((-1.0)*x8566*x8568*x8569))+(((-1.0)*r11*x8571))+(((-1.0)*x8573))+(((-1.0)*x8568*x8578))+((r10*x8570))+(((-1.0)*cj1*x8574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8587 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r11))+((gconst4*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8587.valid){
continue;
}
CheckValue<IkReal> x8588=IKPowWithIntegerCheck(IKsign((((gconst5*r20))+(((-1.0)*gconst4*r21)))),-1);
if(!x8588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8587.value)+(((1.5707963267949)*(x8588.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8589=IKsin(j4);
IkReal x8590=IKcos(j4);
IkReal x8591=(cj1*sj2);
IkReal x8592=((1.0)*cj3);
IkReal x8593=(gconst5*r11);
IkReal x8594=(gconst5*sj3);
IkReal x8595=(gconst4*sj3);
IkReal x8596=((1.0)*r21);
IkReal x8597=(sj1*sj2);
IkReal x8598=((1.0)*cj2);
IkReal x8599=(cj3*gconst5);
IkReal x8600=(sj1*x8598);
IkReal x8601=((1.0)*gconst4*r01);
IkReal x8602=(r12*x8589);
IkReal x8603=(r00*x8590);
IkReal x8604=(r22*x8589);
IkReal x8605=(r02*x8589);
IkReal x8606=(gconst5*x8589);
IkReal x8607=(r20*x8590);
IkReal x8608=(gconst5*x8590);
IkReal x8609=(r10*x8590);
IkReal x8610=((1.0)*gconst4*x8589);
evalcond[0]=((((-1.0)*r20*x8610))+(((-1.0)*x8596*x8606))+((r22*x8590)));
evalcond[1]=((((-1.0)*x8589*x8593))+(((-1.0)*r10*x8610))+((r12*x8590)));
evalcond[2]=((1.0)+(((-1.0)*r00*x8610))+(((-1.0)*r01*x8606))+((r02*x8590)));
evalcond[3]=((((-1.0)*gconst4*r01*x8592))+((sj3*x8605))+((r00*x8599))+((r01*x8590*x8594))+((x8595*x8603)));
evalcond[4]=((((-1.0)*gconst4*x8592*x8603))+(((-1.0)*r01*x8595))+(((-1.0)*x8592*x8605))+((r00*x8594))+(((-1.0)*r01*x8592*x8608)));
evalcond[5]=(((r21*x8590*x8594))+x8597+((sj3*x8604))+(((-1.0)*gconst4*r21*x8592))+((r20*x8599))+((cj1*cj2))+((x8595*x8607)));
evalcond[6]=((((-1.0)*gconst4*r11*x8592))+x8591+((sj3*x8602))+((sj3*x8590*x8593))+((r10*x8599))+(((-1.0)*x8600))+((x8595*x8609)));
evalcond[7]=((((-1.0)*gconst4*x8592*x8607))+x8591+(((-1.0)*x8592*x8604))+((r20*x8594))+(((-1.0)*x8595*x8596))+(((-1.0)*r21*x8592*x8608))+(((-1.0)*x8600)));
evalcond[8]=((((-1.0)*gconst4*x8592*x8609))+(((-1.0)*x8597))+(((-1.0)*r11*x8595))+(((-1.0)*x8592*x8602))+(((-1.0)*x8590*x8592*x8593))+((r10*x8594))+(((-1.0)*cj1*x8598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8611 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8611.valid){
continue;
}
CheckValue<IkReal> x8612=IKPowWithIntegerCheck(IKsign((((gconst4*r11))+(((-1.0)*gconst5*r10)))),-1);
if(!x8612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8611.value)+(((1.5707963267949)*(x8612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8613=IKsin(j4);
IkReal x8614=IKcos(j4);
IkReal x8615=(cj1*sj2);
IkReal x8616=((1.0)*cj3);
IkReal x8617=(gconst5*r11);
IkReal x8618=(gconst5*sj3);
IkReal x8619=(gconst4*sj3);
IkReal x8620=((1.0)*r21);
IkReal x8621=(sj1*sj2);
IkReal x8622=((1.0)*cj2);
IkReal x8623=(cj3*gconst5);
IkReal x8624=(sj1*x8622);
IkReal x8625=((1.0)*gconst4*r01);
IkReal x8626=(r12*x8613);
IkReal x8627=(r00*x8614);
IkReal x8628=(r22*x8613);
IkReal x8629=(r02*x8613);
IkReal x8630=(gconst5*x8613);
IkReal x8631=(r20*x8614);
IkReal x8632=(gconst5*x8614);
IkReal x8633=(r10*x8614);
IkReal x8634=((1.0)*gconst4*x8613);
evalcond[0]=((((-1.0)*x8620*x8630))+((r22*x8614))+(((-1.0)*r20*x8634)));
evalcond[1]=(((r12*x8614))+(((-1.0)*r10*x8634))+(((-1.0)*x8613*x8617)));
evalcond[2]=((1.0)+(((-1.0)*r00*x8634))+(((-1.0)*r01*x8630))+((r02*x8614)));
evalcond[3]=(((r01*x8614*x8618))+((x8619*x8627))+((sj3*x8629))+((r00*x8623))+(((-1.0)*gconst4*r01*x8616)));
evalcond[4]=((((-1.0)*gconst4*x8616*x8627))+((r00*x8618))+(((-1.0)*r01*x8619))+(((-1.0)*r01*x8616*x8632))+(((-1.0)*x8616*x8629)));
evalcond[5]=((((-1.0)*gconst4*r21*x8616))+x8621+((r20*x8623))+((r21*x8614*x8618))+((cj1*cj2))+((sj3*x8628))+((x8619*x8631)));
evalcond[6]=((((-1.0)*x8624))+x8615+(((-1.0)*gconst4*r11*x8616))+((sj3*x8626))+((x8619*x8633))+((r10*x8623))+((sj3*x8614*x8617)));
evalcond[7]=((((-1.0)*x8624))+x8615+((r20*x8618))+(((-1.0)*gconst4*x8616*x8631))+(((-1.0)*r21*x8616*x8632))+(((-1.0)*x8619*x8620))+(((-1.0)*x8616*x8628)));
evalcond[8]=((((-1.0)*x8621))+(((-1.0)*x8614*x8616*x8617))+(((-1.0)*gconst4*x8616*x8633))+(((-1.0)*cj1*x8622))+((r10*x8618))+(((-1.0)*r11*x8619))+(((-1.0)*x8616*x8626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8638 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8638.valid){
continue;
}
IkReal x8635=((1.0)*(x8638.value));
IkReal x8636=x8252;
IkReal x8637=((1.0)*x8636);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8635)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8635)));
IkReal gconst4=(r20*x8637);
IkReal gconst5=(r21*x8637);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8642 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8642.valid){
continue;
}
IkReal x8639=((1.0)*(x8642.value));
IkReal x8640=x8252;
IkReal x8641=((1.0)*x8640);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8639)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8639)));
IkReal gconst4=(r20*x8641);
IkReal gconst5=(r21*x8641);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8646 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8646.valid){
continue;
}
IkReal x8643=((1.0)*(x8646.value));
IkReal x8644=x8252;
IkReal x8645=((1.0)*x8644);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8643)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8643)));
IkReal gconst4=(r20*x8645);
IkReal gconst5=(r21*x8645);
IkReal x8647=((1.0)*sj3);
IkReal x8648=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8652=IKPowWithIntegerCheck(x8648,-1);
if(!x8652.valid){
continue;
}
IkReal x8649=x8652.value;
IkReal x8650=(r00*x8649);
IkReal x8651=(r01*x8649);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=x8648;
j4eval[3]=IKsign(((((-1.0)*r21*x8647*x8651*(r20*r20)))+(((-1.0)*x8647*x8650*(r20*r20*r20)))+(((-1.0)*r02*r22*x8647))+(((-1.0)*r20*x8647*x8650*(r21*r21)))+(((-1.0)*x8647*x8651*(r21*r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8656 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8656.valid){
continue;
}
IkReal x8653=((1.0)*(x8656.value));
IkReal x8654=x8252;
IkReal x8655=((1.0)*x8654);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8653)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8653)));
IkReal gconst4=(r20*x8655);
IkReal gconst5=(r21*x8655);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8660 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8660.valid){
continue;
}
IkReal x8657=((1.0)*(x8660.value));
IkReal x8658=x8252;
IkReal x8659=((1.0)*x8658);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8657)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8657)));
IkReal gconst4=(r20*x8659);
IkReal gconst5=(r21*x8659);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8664 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8664.valid){
continue;
}
IkReal x8661=((1.0)*(x8664.value));
IkReal x8662=x8252;
IkReal x8663=((1.0)*x8662);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8661)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8661)));
IkReal gconst4=(r20*x8663);
IkReal gconst5=(r21*x8663);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8665=(gconst4*r00);
IkReal x8666=(gconst5*r01);
CheckValue<IkReal> x8667 = IKatan2WithCheck(IkReal(((((-1.0)*x8665))+(((-1.0)*x8666)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8667.valid){
continue;
}
CheckValue<IkReal> x8668=IKPowWithIntegerCheck(IKsign(((((2.0)*x8665*x8666))+(x8666*x8666)+(x8665*x8665)+(r02*r02))),-1);
if(!x8668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8667.value)+(((1.5707963267949)*(x8668.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8669=IKsin(j4);
IkReal x8670=IKcos(j4);
IkReal x8671=(gconst5*r11);
IkReal x8672=(gconst5*r21);
IkReal x8673=(gconst5*r01);
IkReal x8674=((1.0)*x8670);
IkReal x8675=((1.0)*x8669);
IkReal x8676=(gconst4*x8675);
evalcond[0]=((((-1.0)*x8672*x8675))+((r22*x8670))+(((-1.0)*r20*x8676)));
evalcond[1]=(((r12*x8670))+(((-1.0)*r10*x8676))+(((-1.0)*x8671*x8675)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x8676))+((r02*x8670))+(((-1.0)*x8673*x8675)));
evalcond[3]=((((-1.0)*gconst4*r00*x8674))+(((-1.0)*r02*x8675))+(((-1.0)*x8673*x8674)));
evalcond[4]=((((-1.0)*gconst4*r10*x8674))+(((-1.0)*r12*x8675))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x8671*x8674)));
evalcond[5]=((((-1.0)*x8672*x8674))+(((-1.0)*gconst4*r20*x8674))+(((-1.0)*r22*x8675))+((cj1*sj2))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8677=IKPowWithIntegerCheck(IKsign((((gconst4*r21))+(((-1.0)*gconst5*r20)))),-1);
if(!x8677.valid){
continue;
}
CheckValue<IkReal> x8678 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r11))+((gconst4*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8677.value)))+(x8678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8679=IKsin(j4);
IkReal x8680=IKcos(j4);
IkReal x8681=(gconst5*r11);
IkReal x8682=(gconst5*r21);
IkReal x8683=(gconst5*r01);
IkReal x8684=((1.0)*x8680);
IkReal x8685=((1.0)*x8679);
IkReal x8686=(gconst4*x8685);
evalcond[0]=((((-1.0)*x8682*x8685))+((r22*x8680))+(((-1.0)*r20*x8686)));
evalcond[1]=((((-1.0)*x8681*x8685))+((r12*x8680))+(((-1.0)*r10*x8686)));
evalcond[2]=((-1.0)+(((-1.0)*x8683*x8685))+(((-1.0)*r00*x8686))+((r02*x8680)));
evalcond[3]=((((-1.0)*x8683*x8684))+(((-1.0)*r02*x8685))+(((-1.0)*gconst4*r00*x8684)));
evalcond[4]=((((-1.0)*x8681*x8684))+(((-1.0)*gconst4*r10*x8684))+(((-1.0)*r12*x8685))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x8682*x8684))+(((-1.0)*gconst4*r20*x8684))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x8685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8687 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8687.valid){
continue;
}
CheckValue<IkReal> x8688=IKPowWithIntegerCheck(IKsign((((gconst5*r10))+(((-1.0)*gconst4*r11)))),-1);
if(!x8688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8687.value)+(((1.5707963267949)*(x8688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8689=IKsin(j4);
IkReal x8690=IKcos(j4);
IkReal x8691=(gconst5*r11);
IkReal x8692=(gconst5*r21);
IkReal x8693=(gconst5*r01);
IkReal x8694=((1.0)*x8690);
IkReal x8695=((1.0)*x8689);
IkReal x8696=(gconst4*x8695);
evalcond[0]=(((r22*x8690))+(((-1.0)*r20*x8696))+(((-1.0)*x8692*x8695)));
evalcond[1]=((((-1.0)*x8691*x8695))+(((-1.0)*r10*x8696))+((r12*x8690)));
evalcond[2]=((-1.0)+((r02*x8690))+(((-1.0)*r00*x8696))+(((-1.0)*x8693*x8695)));
evalcond[3]=((((-1.0)*gconst4*r00*x8694))+(((-1.0)*r02*x8695))+(((-1.0)*x8693*x8694)));
evalcond[4]=((((-1.0)*x8691*x8694))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x8695))+(((-1.0)*gconst4*r10*x8694)));
evalcond[5]=((((-1.0)*gconst4*r20*x8694))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x8695))+(((-1.0)*x8692*x8694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8700 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8700.valid){
continue;
}
IkReal x8697=((1.0)*(x8700.value));
IkReal x8698=x8252;
IkReal x8699=((1.0)*x8698);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8697)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8697)));
IkReal gconst4=(r20*x8699);
IkReal gconst5=(r21*x8699);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8704 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8704.valid){
continue;
}
IkReal x8701=((1.0)*(x8704.value));
IkReal x8702=x8252;
IkReal x8703=((1.0)*x8702);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8701)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8701)));
IkReal gconst4=(r20*x8703);
IkReal gconst5=(r21*x8703);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8708 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8708.valid){
continue;
}
IkReal x8705=((1.0)*(x8708.value));
IkReal x8706=x8252;
IkReal x8707=((1.0)*x8706);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8705)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8705)));
IkReal gconst4=(r20*x8707);
IkReal gconst5=(r21*x8707);
IkReal x8709=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8713=IKPowWithIntegerCheck(x8709,-1);
if(!x8713.valid){
continue;
}
IkReal x8710=x8713.value;
IkReal x8711=((1.0)*x8710);
IkReal x8712=((((-2.0)*r00*r01*r20*r21*x8710))+(((-1.0)*(r02*r02)))+(((-1.0)*x8711*(r00*r00)*(r20*r20)))+(((-1.0)*x8711*(r01*r01)*(r21*r21))));
j4eval[0]=x8712;
j4eval[1]=IKsign(x8712);
j4eval[2]=r02;
j4eval[3]=x8709;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8714=(gconst5*r01);
IkReal x8715=(gconst4*r00);
CheckValue<IkReal> x8716 = IKatan2WithCheck(IkReal((x8714+x8715)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8716.valid){
continue;
}
CheckValue<IkReal> x8717=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8714*x8714)))+(((-1.0)*(r02*r02)))+(((-2.0)*x8714*x8715))+(((-1.0)*(x8715*x8715))))),-1);
if(!x8717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8716.value)+(((1.5707963267949)*(x8717.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8718=IKcos(j4);
IkReal x8719=IKsin(j4);
IkReal x8720=(gconst4*x8718);
IkReal x8721=(gconst5*x8718);
IkReal x8722=((1.0)*gconst4*x8719);
IkReal x8723=((1.0)*gconst5*x8719);
evalcond[0]=(((r02*x8719))+((r01*x8721))+((r00*x8720)));
evalcond[1]=((((-1.0)*r21*x8723))+(((-1.0)*r20*x8722))+((r22*x8718)));
evalcond[2]=((((-1.0)*r10*x8722))+((r12*x8718))+(((-1.0)*r11*x8723)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x8723))+((r02*x8718))+(((-1.0)*r00*x8722)));
evalcond[4]=(((r11*x8721))+((r10*x8720))+((sj1*sj2))+((cj1*cj2))+((r12*x8719)));
evalcond[5]=(((r21*x8721))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r20*x8720))+((r22*x8719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8724=IKPowWithIntegerCheck(IKsign((((gconst4*r21))+(((-1.0)*gconst5*r20)))),-1);
if(!x8724.valid){
continue;
}
CheckValue<IkReal> x8725 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r11))+((gconst4*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8724.value)))+(x8725.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8726=IKcos(j4);
IkReal x8727=IKsin(j4);
IkReal x8728=(gconst4*x8726);
IkReal x8729=(gconst5*x8726);
IkReal x8730=((1.0)*gconst4*x8727);
IkReal x8731=((1.0)*gconst5*x8727);
evalcond[0]=(((r02*x8727))+((r01*x8729))+((r00*x8728)));
evalcond[1]=(((r22*x8726))+(((-1.0)*r20*x8730))+(((-1.0)*r21*x8731)));
evalcond[2]=(((r12*x8726))+(((-1.0)*r10*x8730))+(((-1.0)*r11*x8731)));
evalcond[3]=((-1.0)+((r02*x8726))+(((-1.0)*r00*x8730))+(((-1.0)*r01*x8731)));
evalcond[4]=(((r11*x8729))+((r10*x8728))+((r12*x8727))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((r21*x8729))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r22*x8727))+((r20*x8728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8732 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8732.valid){
continue;
}
CheckValue<IkReal> x8733=IKPowWithIntegerCheck(IKsign((((gconst5*r10))+(((-1.0)*gconst4*r11)))),-1);
if(!x8733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8732.value)+(((1.5707963267949)*(x8733.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8734=IKcos(j4);
IkReal x8735=IKsin(j4);
IkReal x8736=(gconst4*x8734);
IkReal x8737=(gconst5*x8734);
IkReal x8738=((1.0)*gconst4*x8735);
IkReal x8739=((1.0)*gconst5*x8735);
evalcond[0]=(((r02*x8735))+((r00*x8736))+((r01*x8737)));
evalcond[1]=(((r22*x8734))+(((-1.0)*r20*x8738))+(((-1.0)*r21*x8739)));
evalcond[2]=(((r12*x8734))+(((-1.0)*r10*x8738))+(((-1.0)*r11*x8739)));
evalcond[3]=((-1.0)+((r02*x8734))+(((-1.0)*r00*x8738))+(((-1.0)*r01*x8739)));
evalcond[4]=(((r11*x8737))+((r10*x8736))+((r12*x8735))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((r21*x8737))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r22*x8735))+((r20*x8736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8743 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8743.valid){
continue;
}
IkReal x8740=((1.0)*(x8743.value));
IkReal x8741=x8252;
IkReal x8742=((1.0)*x8741);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8740)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8740)));
IkReal gconst4=(r20*x8742);
IkReal gconst5=(r21*x8742);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8747 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8747.valid){
continue;
}
IkReal x8744=((1.0)*(x8747.value));
IkReal x8745=x8252;
IkReal x8746=((1.0)*x8745);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8744)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8744)));
IkReal gconst4=(r20*x8746);
IkReal gconst5=(r21*x8746);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8751 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8751.valid){
continue;
}
IkReal x8748=((1.0)*(x8751.value));
IkReal x8749=x8252;
IkReal x8750=((1.0)*x8749);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8748)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8748)));
IkReal gconst4=(r20*x8750);
IkReal gconst5=(r21*x8750);
IkReal x8752=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8756=IKPowWithIntegerCheck(x8752,-1);
if(!x8756.valid){
continue;
}
IkReal x8753=x8756.value;
IkReal x8754=((1.0)*x8753);
IkReal x8755=((((-1.0)*(r02*r02)))+(((-1.0)*x8754*(r00*r00)*(r20*r20)))+(((-1.0)*x8754*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x8753)));
j4eval[0]=x8755;
j4eval[1]=IKsign(x8755);
j4eval[2]=r02;
j4eval[3]=x8752;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8757=(gconst5*r01);
IkReal x8758=(gconst4*r00);
CheckValue<IkReal> x8759=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8757*x8758))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8757*x8757)))+(((-1.0)*(x8758*x8758))))),-1);
if(!x8759.valid){
continue;
}
CheckValue<IkReal> x8760 = IKatan2WithCheck(IkReal((x8758+x8757)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8759.value)))+(x8760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8761=IKcos(j4);
IkReal x8762=IKsin(j4);
IkReal x8763=(gconst4*x8761);
IkReal x8764=(gconst5*x8761);
IkReal x8765=((1.0)*gconst4*x8762);
IkReal x8766=((1.0)*gconst5*x8762);
evalcond[0]=(((r01*x8764))+((r00*x8763))+((r02*x8762)));
evalcond[1]=((((-1.0)*r21*x8766))+(((-1.0)*r20*x8765))+((r22*x8761)));
evalcond[2]=((((-1.0)*r10*x8765))+((r12*x8761))+(((-1.0)*r11*x8766)));
evalcond[3]=((-1.0)+((r02*x8761))+(((-1.0)*r01*x8766))+(((-1.0)*r00*x8765)));
evalcond[4]=(((sj1*sj2))+((r20*x8763))+((r21*x8764))+((cj1*cj2))+((r22*x8762)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r12*x8762))+((r10*x8763))+((r11*x8764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8767=IKPowWithIntegerCheck(IKsign((((gconst4*r21))+(((-1.0)*gconst5*r20)))),-1);
if(!x8767.valid){
continue;
}
CheckValue<IkReal> x8768 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r11))+((gconst4*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8767.value)))+(x8768.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8769=IKcos(j4);
IkReal x8770=IKsin(j4);
IkReal x8771=(gconst4*x8769);
IkReal x8772=(gconst5*x8769);
IkReal x8773=((1.0)*gconst4*x8770);
IkReal x8774=((1.0)*gconst5*x8770);
evalcond[0]=(((r00*x8771))+((r01*x8772))+((r02*x8770)));
evalcond[1]=((((-1.0)*r20*x8773))+(((-1.0)*r21*x8774))+((r22*x8769)));
evalcond[2]=((((-1.0)*r10*x8773))+((r12*x8769))+(((-1.0)*r11*x8774)));
evalcond[3]=((-1.0)+((r02*x8769))+(((-1.0)*r00*x8773))+(((-1.0)*r01*x8774)));
evalcond[4]=(((sj1*sj2))+((r20*x8771))+((cj1*cj2))+((r21*x8772))+((r22*x8770)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r10*x8771))+((r12*x8770))+((r11*x8772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8775 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8775.valid){
continue;
}
CheckValue<IkReal> x8776=IKPowWithIntegerCheck(IKsign((((gconst5*r10))+(((-1.0)*gconst4*r11)))),-1);
if(!x8776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8775.value)+(((1.5707963267949)*(x8776.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8777=IKcos(j4);
IkReal x8778=IKsin(j4);
IkReal x8779=(gconst4*x8777);
IkReal x8780=(gconst5*x8777);
IkReal x8781=((1.0)*gconst4*x8778);
IkReal x8782=((1.0)*gconst5*x8778);
evalcond[0]=(((r00*x8779))+((r01*x8780))+((r02*x8778)));
evalcond[1]=((((-1.0)*r20*x8781))+(((-1.0)*r21*x8782))+((r22*x8777)));
evalcond[2]=(((r12*x8777))+(((-1.0)*r10*x8781))+(((-1.0)*r11*x8782)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x8781))+(((-1.0)*r01*x8782))+((r02*x8777)));
evalcond[4]=(((r21*x8780))+((sj1*sj2))+((r20*x8779))+((cj1*cj2))+((r22*x8778)));
evalcond[5]=(((cj2*sj1))+((r11*x8780))+(((-1.0)*cj1*sj2))+((r10*x8779))+((r12*x8778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8786 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8786.valid){
continue;
}
IkReal x8783=((1.0)*(x8786.value));
IkReal x8784=x8252;
IkReal x8785=((1.0)*x8784);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8783)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8783)));
IkReal gconst4=(r20*x8785);
IkReal gconst5=(r21*x8785);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8790 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8790.valid){
continue;
}
IkReal x8787=((1.0)*(x8790.value));
IkReal x8788=x8252;
IkReal x8789=((1.0)*x8788);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8787)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8787)));
IkReal gconst4=(r20*x8789);
IkReal gconst5=(r21*x8789);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8794 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8794.valid){
continue;
}
IkReal x8791=((1.0)*(x8794.value));
IkReal x8792=x8252;
IkReal x8793=((1.0)*x8792);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8791)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8791)));
IkReal gconst4=(r20*x8793);
IkReal gconst5=(r21*x8793);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8795=(gconst4*r00);
IkReal x8796=(gconst5*r01);
CheckValue<IkReal> x8797 = IKatan2WithCheck(IkReal(((((-1.0)*x8795))+(((-1.0)*x8796)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8797.valid){
continue;
}
CheckValue<IkReal> x8798=IKPowWithIntegerCheck(IKsign(((x8795*x8795)+(((2.0)*x8795*x8796))+(r02*r02)+(x8796*x8796))),-1);
if(!x8798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8797.value)+(((1.5707963267949)*(x8798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8799=IKsin(j4);
IkReal x8800=IKcos(j4);
IkReal x8801=(gconst5*r11);
IkReal x8802=(gconst5*r21);
IkReal x8803=(gconst5*r01);
IkReal x8804=((1.0)*x8800);
IkReal x8805=((1.0)*x8799);
IkReal x8806=(gconst4*x8805);
evalcond[0]=((((-1.0)*r20*x8806))+((r22*x8800))+(((-1.0)*x8802*x8805)));
evalcond[1]=((((-1.0)*r10*x8806))+((r12*x8800))+(((-1.0)*x8801*x8805)));
evalcond[2]=((-1.0)+(((-1.0)*x8803*x8805))+((r02*x8800))+(((-1.0)*r00*x8806)));
evalcond[3]=((((-1.0)*x8803*x8804))+(((-1.0)*r02*x8805))+(((-1.0)*gconst4*r00*x8804)));
evalcond[4]=((((-1.0)*r22*x8805))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x8802*x8804))+(((-1.0)*gconst4*r20*x8804)));
evalcond[5]=((((-1.0)*r12*x8805))+((cj2*sj1))+(((-1.0)*gconst4*r10*x8804))+(((-1.0)*cj1*sj2))+(((-1.0)*x8801*x8804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8807=IKPowWithIntegerCheck(IKsign((((gconst4*r21))+(((-1.0)*gconst5*r20)))),-1);
if(!x8807.valid){
continue;
}
CheckValue<IkReal> x8808 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r11))+((gconst4*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8807.value)))+(x8808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8809=IKsin(j4);
IkReal x8810=IKcos(j4);
IkReal x8811=(gconst5*r11);
IkReal x8812=(gconst5*r21);
IkReal x8813=(gconst5*r01);
IkReal x8814=((1.0)*x8810);
IkReal x8815=((1.0)*x8809);
IkReal x8816=(gconst4*x8815);
evalcond[0]=(((r22*x8810))+(((-1.0)*r20*x8816))+(((-1.0)*x8812*x8815)));
evalcond[1]=((((-1.0)*r10*x8816))+((r12*x8810))+(((-1.0)*x8811*x8815)));
evalcond[2]=((-1.0)+((r02*x8810))+(((-1.0)*x8813*x8815))+(((-1.0)*r00*x8816)));
evalcond[3]=((((-1.0)*r02*x8815))+(((-1.0)*x8813*x8814))+(((-1.0)*gconst4*r00*x8814)));
evalcond[4]=((((-1.0)*r22*x8815))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x8812*x8814))+(((-1.0)*gconst4*r20*x8814)));
evalcond[5]=((((-1.0)*gconst4*r10*x8814))+((cj2*sj1))+(((-1.0)*r12*x8815))+(((-1.0)*cj1*sj2))+(((-1.0)*x8811*x8814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8817 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8817.valid){
continue;
}
CheckValue<IkReal> x8818=IKPowWithIntegerCheck(IKsign((((gconst5*r10))+(((-1.0)*gconst4*r11)))),-1);
if(!x8818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8817.value)+(((1.5707963267949)*(x8818.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8819=IKsin(j4);
IkReal x8820=IKcos(j4);
IkReal x8821=(gconst5*r11);
IkReal x8822=(gconst5*r21);
IkReal x8823=(gconst5*r01);
IkReal x8824=((1.0)*x8820);
IkReal x8825=((1.0)*x8819);
IkReal x8826=(gconst4*x8825);
evalcond[0]=(((r22*x8820))+(((-1.0)*r20*x8826))+(((-1.0)*x8822*x8825)));
evalcond[1]=((((-1.0)*x8821*x8825))+((r12*x8820))+(((-1.0)*r10*x8826)));
evalcond[2]=((-1.0)+((r02*x8820))+(((-1.0)*r00*x8826))+(((-1.0)*x8823*x8825)));
evalcond[3]=((((-1.0)*r02*x8825))+(((-1.0)*x8823*x8824))+(((-1.0)*gconst4*r00*x8824)));
evalcond[4]=(((sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst4*r20*x8824))+(((-1.0)*x8822*x8824))+(((-1.0)*r22*x8825)));
evalcond[5]=((((-1.0)*gconst4*r10*x8824))+((cj2*sj1))+(((-1.0)*r12*x8825))+(((-1.0)*x8821*x8824))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x8827=((-1.0)*r21);
CheckValue<IkReal> x8829 = IKatan2WithCheck(IkReal(r20),IkReal(x8827),IKFAST_ATAN2_MAGTHRESH);
if(!x8829.valid){
continue;
}
IkReal x8828=((1.0)*(x8829.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8828)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x8827);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8828)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x8830=((1.0)*r01*r21);
IkReal x8831=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x8830))+(((-1.0)*x8831)));
j4eval[1]=(((sj3*x8831))+((sj3*x8830)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8832=((-1.0)*r21);
CheckValue<IkReal> x8834 = IKatan2WithCheck(IkReal(r20),IkReal(x8832),IKFAST_ATAN2_MAGTHRESH);
if(!x8834.valid){
continue;
}
IkReal x8833=((1.0)*(x8834.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8833)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x8832);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8833)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x8835=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((r00*r20*x8835))+((r01*r21*x8835)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8836=((-1.0)*r21);
CheckValue<IkReal> x8838 = IKatan2WithCheck(IkReal(r20),IkReal(x8836),IKFAST_ATAN2_MAGTHRESH);
if(!x8838.valid){
continue;
}
IkReal x8837=((1.0)*(x8838.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8837)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x8836);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8837)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x8839=((1.0)*sj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((r00*r20*x8839))+((r01*r21*x8839)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8840=IKPowWithIntegerCheck(r12,-1);
if(!x8840.valid){
continue;
}
CheckValue<IkReal> x8841=IKPowWithIntegerCheck(sj3,-1);
if(!x8841.valid){
continue;
}
CheckValue<IkReal> x8842=IKPowWithIntegerCheck((((gconst5*r01*sj3))+((gconst4*r00*sj3))),-1);
if(!x8842.valid){
continue;
}
if( IKabs(((x8840.value)*(x8841.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8842.value)*(((((-1.0)*cj3*gconst5*r00))+((cj3*gconst4*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8840.value)*(x8841.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))))))+IKsqr(((x8842.value)*(((((-1.0)*cj3*gconst5*r00))+((cj3*gconst4*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x8840.value)*(x8841.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))))), ((x8842.value)*(((((-1.0)*cj3*gconst5*r00))+((cj3*gconst4*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8843=IKsin(j4);
IkReal x8844=IKcos(j4);
IkReal x8845=(sj1*sj2);
IkReal x8846=(cj1*cj2);
IkReal x8847=((1.0)*gconst4);
IkReal x8848=(cj3*r01);
IkReal x8849=(gconst5*sj3);
IkReal x8850=(gconst4*sj3);
IkReal x8851=(cj2*sj1);
IkReal x8852=(cj1*sj2);
IkReal x8853=((1.0)*gconst5);
IkReal x8854=(cj3*r20);
IkReal x8855=(r12*x8843);
IkReal x8856=(r00*x8844);
IkReal x8857=(r21*x8844);
IkReal x8858=(x8845+x8846);
evalcond[0]=(r12*x8844);
evalcond[1]=(((sj3*x8855))+x8851+(((-1.0)*x8852)));
evalcond[2]=(x8858+(((-1.0)*cj3*x8855)));
evalcond[3]=((((-1.0)*r20*x8843*x8847))+(((-1.0)*r21*x8843*x8853)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x8843*x8853))+(((-1.0)*r00*x8843*x8847)));
evalcond[5]=(((x8850*x8856))+((cj3*gconst5*r00))+((r01*x8844*x8849))+(((-1.0)*x8847*x8848)));
evalcond[6]=((((-1.0)*r01*sj3*x8847))+(((-1.0)*x8844*x8848*x8853))+(((-1.0)*cj3*x8847*x8856))+((r00*x8849)));
evalcond[7]=(x8858+(((-1.0)*cj3*r21*x8847))+((r20*x8844*x8850))+((x8849*x8857))+((gconst5*x8854)));
evalcond[8]=((((-1.0)*r21*sj3*x8847))+(((-1.0)*x8844*x8847*x8854))+x8852+((r20*x8849))+(((-1.0)*cj3*x8853*x8857))+(((-1.0)*x8851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8859=IKPowWithIntegerCheck(cj3,-1);
if(!x8859.valid){
continue;
}
CheckValue<IkReal> x8860=IKPowWithIntegerCheck(r12,-1);
if(!x8860.valid){
continue;
}
CheckValue<IkReal> x8861=IKPowWithIntegerCheck((((gconst5*r01*sj3))+((gconst4*r00*sj3))),-1);
if(!x8861.valid){
continue;
}
if( IKabs(((x8859.value)*(x8860.value)*((((sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8861.value)*(((((-1.0)*cj3*gconst5*r00))+((cj3*gconst4*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8859.value)*(x8860.value)*((((sj1*sj2))+((cj1*cj2))))))+IKsqr(((x8861.value)*(((((-1.0)*cj3*gconst5*r00))+((cj3*gconst4*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x8859.value)*(x8860.value)*((((sj1*sj2))+((cj1*cj2))))), ((x8861.value)*(((((-1.0)*cj3*gconst5*r00))+((cj3*gconst4*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8862=IKsin(j4);
IkReal x8863=IKcos(j4);
IkReal x8864=(sj1*sj2);
IkReal x8865=(cj1*cj2);
IkReal x8866=((1.0)*gconst4);
IkReal x8867=(cj3*r01);
IkReal x8868=(gconst5*sj3);
IkReal x8869=(gconst4*sj3);
IkReal x8870=(cj2*sj1);
IkReal x8871=(cj1*sj2);
IkReal x8872=((1.0)*gconst5);
IkReal x8873=(cj3*r20);
IkReal x8874=(r12*x8862);
IkReal x8875=(r00*x8863);
IkReal x8876=(r21*x8863);
IkReal x8877=(x8864+x8865);
evalcond[0]=(r12*x8863);
evalcond[1]=((((-1.0)*x8871))+x8870+((sj3*x8874)));
evalcond[2]=(x8877+(((-1.0)*cj3*x8874)));
evalcond[3]=((((-1.0)*r20*x8862*x8866))+(((-1.0)*r21*x8862*x8872)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x8862*x8872))+(((-1.0)*r00*x8862*x8866)));
evalcond[5]=((((-1.0)*x8866*x8867))+((cj3*gconst5*r00))+((r01*x8863*x8868))+((x8869*x8875)));
evalcond[6]=((((-1.0)*x8863*x8867*x8872))+(((-1.0)*cj3*x8866*x8875))+((r00*x8868))+(((-1.0)*r01*sj3*x8866)));
evalcond[7]=(((gconst5*x8873))+((r20*x8863*x8869))+x8877+(((-1.0)*cj3*r21*x8866))+((x8868*x8876)));
evalcond[8]=((((-1.0)*x8870))+((r20*x8868))+x8871+(((-1.0)*r21*sj3*x8866))+(((-1.0)*cj3*x8872*x8876))+(((-1.0)*x8863*x8866*x8873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8878=((1.0)*r00);
IkReal x8879=(gconst5*r01);
CheckValue<IkReal> x8880=IKPowWithIntegerCheck(((((-1.0)*x8879))+(((-1.0)*gconst4*x8878))),-1);
if(!x8880.valid){
continue;
}
CheckValue<IkReal> x8881=IKPowWithIntegerCheck((((gconst4*r00*sj3))+((sj3*x8879))),-1);
if(!x8881.valid){
continue;
}
if( IKabs(x8880.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8881.value)*(((((-1.0)*cj3*gconst5*x8878))+((cj3*gconst4*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x8880.value)+IKsqr(((x8881.value)*(((((-1.0)*cj3*gconst5*x8878))+((cj3*gconst4*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x8880.value, ((x8881.value)*(((((-1.0)*cj3*gconst5*x8878))+((cj3*gconst4*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8882=IKsin(j4);
IkReal x8883=IKcos(j4);
IkReal x8884=(sj1*sj2);
IkReal x8885=(cj1*cj2);
IkReal x8886=((1.0)*gconst4);
IkReal x8887=(cj3*r01);
IkReal x8888=(gconst5*sj3);
IkReal x8889=(gconst4*sj3);
IkReal x8890=(cj2*sj1);
IkReal x8891=(cj1*sj2);
IkReal x8892=((1.0)*gconst5);
IkReal x8893=(cj3*r20);
IkReal x8894=(r12*x8882);
IkReal x8895=(r00*x8883);
IkReal x8896=(r21*x8883);
IkReal x8897=(x8884+x8885);
evalcond[0]=(r12*x8883);
evalcond[1]=((((-1.0)*x8891))+x8890+((sj3*x8894)));
evalcond[2]=(x8897+(((-1.0)*cj3*x8894)));
evalcond[3]=((((-1.0)*r20*x8882*x8886))+(((-1.0)*r21*x8882*x8892)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x8882*x8886))+(((-1.0)*r01*x8882*x8892)));
evalcond[5]=(((x8889*x8895))+(((-1.0)*x8886*x8887))+((r01*x8883*x8888))+((cj3*gconst5*r00)));
evalcond[6]=(((r00*x8888))+(((-1.0)*cj3*x8886*x8895))+(((-1.0)*x8883*x8887*x8892))+(((-1.0)*r01*sj3*x8886)));
evalcond[7]=(((r20*x8883*x8889))+x8897+((gconst5*x8893))+(((-1.0)*cj3*r21*x8886))+((x8888*x8896)));
evalcond[8]=((((-1.0)*r21*sj3*x8886))+(((-1.0)*x8890))+x8891+(((-1.0)*cj3*x8892*x8896))+((r20*x8888))+(((-1.0)*x8883*x8886*x8893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8898=gconst5*gconst5;
IkReal x8899=gconst4*gconst4;
IkReal x8900=(gconst5*r21);
IkReal x8901=((1.0)*sj3);
IkReal x8902=(gconst4*r00);
IkReal x8903=(cj3*r00);
IkReal x8904=(gconst5*r20);
IkReal x8905=(r20*x8899);
IkReal x8906=(r21*x8898);
IkReal x8907=((1.0)*cj3*gconst4*r01);
CheckValue<IkReal> x8908=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r01*x8901*x8904))+(((-1.0)*x8900*x8901*x8902))+(((-1.0)*r01*x8901*x8906))+(((-1.0)*r02*r22*x8901))+(((-1.0)*r00*x8901*x8905)))),-1);
if(!x8908.valid){
continue;
}
CheckValue<IkReal> x8909 = IKatan2WithCheck(IkReal((((gconst5*r22*x8903))+(((-1.0)*r22*x8907)))),IkReal(((((-1.0)*x8900*x8907))+(((-1.0)*cj3*r01*x8905))+((x8903*x8906))+((cj3*x8902*x8904)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8908.value)))+(x8909.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8910=IKsin(j4);
IkReal x8911=IKcos(j4);
IkReal x8912=(sj1*sj2);
IkReal x8913=(cj1*cj2);
IkReal x8914=(cj1*sj2);
IkReal x8915=((1.0)*cj3);
IkReal x8916=(gconst5*r11);
IkReal x8917=(gconst5*sj3);
IkReal x8918=(gconst4*sj3);
IkReal x8919=((1.0)*r21);
IkReal x8920=(cj2*sj1);
IkReal x8921=(cj3*gconst5);
IkReal x8922=((1.0)*gconst4*r01);
IkReal x8923=(r12*x8910);
IkReal x8924=(r00*x8911);
IkReal x8925=(r22*x8910);
IkReal x8926=(r02*x8910);
IkReal x8927=(gconst5*x8910);
IkReal x8928=(r20*x8911);
IkReal x8929=(gconst5*x8911);
IkReal x8930=(r10*x8911);
IkReal x8931=(x8912+x8913);
IkReal x8932=((1.0)*gconst4*x8910);
evalcond[0]=((((-1.0)*r20*x8932))+(((-1.0)*x8919*x8927))+((r22*x8911)));
evalcond[1]=((((-1.0)*r10*x8932))+(((-1.0)*x8910*x8916))+((r12*x8911)));
evalcond[2]=((-1.0)+((r02*x8911))+(((-1.0)*r01*x8927))+(((-1.0)*r00*x8932)));
evalcond[3]=((((-1.0)*gconst4*r01*x8915))+((x8918*x8924))+((r01*x8911*x8917))+((r00*x8921))+((sj3*x8926)));
evalcond[4]=(((r00*x8917))+(((-1.0)*r01*x8918))+(((-1.0)*gconst4*x8915*x8924))+(((-1.0)*r01*x8915*x8929))+(((-1.0)*x8915*x8926)));
evalcond[5]=(((r20*x8921))+x8931+(((-1.0)*gconst4*r21*x8915))+((x8918*x8928))+((sj3*x8925))+((r21*x8911*x8917)));
evalcond[6]=((((-1.0)*x8914))+((sj3*x8911*x8916))+(((-1.0)*gconst4*r11*x8915))+x8920+((x8918*x8930))+((r10*x8921))+((sj3*x8923)));
evalcond[7]=((((-1.0)*x8911*x8915*x8916))+x8931+(((-1.0)*r11*x8918))+(((-1.0)*x8915*x8923))+((r10*x8917))+(((-1.0)*gconst4*x8915*x8930)));
evalcond[8]=((((-1.0)*x8918*x8919))+x8914+(((-1.0)*gconst4*x8915*x8928))+(((-1.0)*r21*x8915*x8929))+(((-1.0)*x8915*x8925))+(((-1.0)*x8920))+((r20*x8917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8933=IKPowWithIntegerCheck(IKsign((((gconst4*r21))+(((-1.0)*gconst5*r20)))),-1);
if(!x8933.valid){
continue;
}
CheckValue<IkReal> x8934 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r11))+((gconst4*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8933.value)))+(x8934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8935=IKsin(j4);
IkReal x8936=IKcos(j4);
IkReal x8937=(sj1*sj2);
IkReal x8938=(cj1*cj2);
IkReal x8939=(cj1*sj2);
IkReal x8940=((1.0)*cj3);
IkReal x8941=(gconst5*r11);
IkReal x8942=(gconst5*sj3);
IkReal x8943=(gconst4*sj3);
IkReal x8944=((1.0)*r21);
IkReal x8945=(cj2*sj1);
IkReal x8946=(cj3*gconst5);
IkReal x8947=((1.0)*gconst4*r01);
IkReal x8948=(r12*x8935);
IkReal x8949=(r00*x8936);
IkReal x8950=(r22*x8935);
IkReal x8951=(r02*x8935);
IkReal x8952=(gconst5*x8935);
IkReal x8953=(r20*x8936);
IkReal x8954=(gconst5*x8936);
IkReal x8955=(r10*x8936);
IkReal x8956=(x8937+x8938);
IkReal x8957=((1.0)*gconst4*x8935);
evalcond[0]=((((-1.0)*x8944*x8952))+(((-1.0)*r20*x8957))+((r22*x8936)));
evalcond[1]=(((r12*x8936))+(((-1.0)*r10*x8957))+(((-1.0)*x8935*x8941)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x8952))+(((-1.0)*r00*x8957))+((r02*x8936)));
evalcond[3]=(((r01*x8936*x8942))+((x8943*x8949))+((r00*x8946))+((sj3*x8951))+(((-1.0)*gconst4*r01*x8940)));
evalcond[4]=((((-1.0)*r01*x8943))+(((-1.0)*x8940*x8951))+((r00*x8942))+(((-1.0)*r01*x8940*x8954))+(((-1.0)*gconst4*x8940*x8949)));
evalcond[5]=((((-1.0)*gconst4*r21*x8940))+x8956+((x8943*x8953))+((r21*x8936*x8942))+((r20*x8946))+((sj3*x8950)));
evalcond[6]=(x8945+((x8943*x8955))+((r10*x8946))+((sj3*x8936*x8941))+((sj3*x8948))+(((-1.0)*x8939))+(((-1.0)*gconst4*r11*x8940)));
evalcond[7]=((((-1.0)*gconst4*x8940*x8955))+x8956+(((-1.0)*x8940*x8948))+((r10*x8942))+(((-1.0)*x8936*x8940*x8941))+(((-1.0)*r11*x8943)));
evalcond[8]=((((-1.0)*gconst4*x8940*x8953))+x8939+(((-1.0)*r21*x8940*x8954))+(((-1.0)*x8940*x8950))+(((-1.0)*x8943*x8944))+(((-1.0)*x8945))+((r20*x8942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8958 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8958.valid){
continue;
}
CheckValue<IkReal> x8959=IKPowWithIntegerCheck(IKsign((((gconst5*r10))+(((-1.0)*gconst4*r11)))),-1);
if(!x8959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8958.value)+(((1.5707963267949)*(x8959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8960=IKsin(j4);
IkReal x8961=IKcos(j4);
IkReal x8962=(sj1*sj2);
IkReal x8963=(cj1*cj2);
IkReal x8964=(cj1*sj2);
IkReal x8965=((1.0)*cj3);
IkReal x8966=(gconst5*r11);
IkReal x8967=(gconst5*sj3);
IkReal x8968=(gconst4*sj3);
IkReal x8969=((1.0)*r21);
IkReal x8970=(cj2*sj1);
IkReal x8971=(cj3*gconst5);
IkReal x8972=((1.0)*gconst4*r01);
IkReal x8973=(r12*x8960);
IkReal x8974=(r00*x8961);
IkReal x8975=(r22*x8960);
IkReal x8976=(r02*x8960);
IkReal x8977=(gconst5*x8960);
IkReal x8978=(r20*x8961);
IkReal x8979=(gconst5*x8961);
IkReal x8980=(r10*x8961);
IkReal x8981=(x8963+x8962);
IkReal x8982=((1.0)*gconst4*x8960);
evalcond[0]=(((r22*x8961))+(((-1.0)*r20*x8982))+(((-1.0)*x8969*x8977)));
evalcond[1]=((((-1.0)*x8960*x8966))+(((-1.0)*r10*x8982))+((r12*x8961)));
evalcond[2]=((-1.0)+((r02*x8961))+(((-1.0)*r01*x8977))+(((-1.0)*r00*x8982)));
evalcond[3]=(((r01*x8961*x8967))+((x8968*x8974))+((sj3*x8976))+((r00*x8971))+(((-1.0)*gconst4*r01*x8965)));
evalcond[4]=((((-1.0)*r01*x8968))+(((-1.0)*x8965*x8976))+((r00*x8967))+(((-1.0)*gconst4*x8965*x8974))+(((-1.0)*r01*x8965*x8979)));
evalcond[5]=((((-1.0)*gconst4*r21*x8965))+((r20*x8971))+((x8968*x8978))+x8981+((sj3*x8975))+((r21*x8961*x8967)));
evalcond[6]=(((r10*x8971))+x8970+((sj3*x8973))+(((-1.0)*x8964))+(((-1.0)*gconst4*r11*x8965))+((x8968*x8980))+((sj3*x8961*x8966)));
evalcond[7]=(x8981+(((-1.0)*x8961*x8965*x8966))+((r10*x8967))+(((-1.0)*x8965*x8973))+(((-1.0)*gconst4*x8965*x8980))+(((-1.0)*r11*x8968)));
evalcond[8]=((((-1.0)*x8968*x8969))+(((-1.0)*r21*x8965*x8979))+x8964+(((-1.0)*x8965*x8975))+(((-1.0)*gconst4*x8965*x8978))+(((-1.0)*x8970))+((r20*x8967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8986 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8986.valid){
continue;
}
IkReal x8983=((1.0)*(x8986.value));
IkReal x8984=x8252;
IkReal x8985=((1.0)*x8984);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8983)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8983)));
IkReal gconst4=(r20*x8985);
IkReal gconst5=(r21*x8985);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8990 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8990.valid){
continue;
}
IkReal x8987=((1.0)*(x8990.value));
IkReal x8988=x8252;
IkReal x8989=((1.0)*x8988);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8987)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8987)));
IkReal gconst4=(r20*x8989);
IkReal gconst5=(r21*x8989);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8994 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8994.valid){
continue;
}
IkReal x8991=((1.0)*(x8994.value));
IkReal x8992=x8252;
IkReal x8993=((1.0)*x8992);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8991)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8991)));
IkReal gconst4=(r20*x8993);
IkReal gconst5=(r21*x8993);
IkReal x8995=((1.0)*sj3);
IkReal x8996=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9000=IKPowWithIntegerCheck(x8996,-1);
if(!x9000.valid){
continue;
}
IkReal x8997=x9000.value;
IkReal x8998=(r10*x8997);
IkReal x8999=(r11*x8997);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=x8996;
j4eval[3]=IKsign(((((-1.0)*r20*x8995*x8998*(r21*r21)))+(((-1.0)*r21*x8995*x8999*(r20*r20)))+(((-1.0)*x8995*x8999*(r21*r21*r21)))+(((-1.0)*r12*r22*x8995))+(((-1.0)*x8995*x8998*(r20*r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9004 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9004.valid){
continue;
}
IkReal x9001=((1.0)*(x9004.value));
IkReal x9002=x8252;
IkReal x9003=((1.0)*x9002);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9001)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9001)));
IkReal gconst4=(r20*x9003);
IkReal gconst5=(r21*x9003);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9008 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9008.valid){
continue;
}
IkReal x9005=((1.0)*(x9008.value));
IkReal x9006=x8252;
IkReal x9007=((1.0)*x9006);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9005)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9005)));
IkReal gconst4=(r20*x9007);
IkReal gconst5=(r21*x9007);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9012 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9012.valid){
continue;
}
IkReal x9009=((1.0)*(x9012.value));
IkReal x9010=x8252;
IkReal x9011=((1.0)*x9010);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9009)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9009)));
IkReal gconst4=(r20*x9011);
IkReal gconst5=(r21*x9011);
IkReal x9013=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9017=IKPowWithIntegerCheck(x9013,-1);
if(!x9017.valid){
continue;
}
IkReal x9014=x9017.value;
IkReal x9015=((1.0)*x9014);
IkReal x9016=((((-1.0)*x9015*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x9014))+(((-1.0)*(r12*r12)))+(((-1.0)*x9015*(r11*r11)*(r21*r21))));
j4eval[0]=x9016;
j4eval[1]=IKsign(x9016);
j4eval[2]=r12;
j4eval[3]=x9013;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9018=(gconst5*r11);
IkReal x9019=(gconst4*r10);
CheckValue<IkReal> x9020=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9018*x9018)))+(((-1.0)*(x9019*x9019)))+(((-2.0)*x9018*x9019))+(((-1.0)*(r12*r12))))),-1);
if(!x9020.valid){
continue;
}
CheckValue<IkReal> x9021 = IKatan2WithCheck(IkReal(((((-1.0)*x9018))+(((-1.0)*x9019)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9020.value)))+(x9021.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9022=IKsin(j4);
IkReal x9023=IKcos(j4);
IkReal x9024=((1.0)*gconst5);
IkReal x9025=((1.0)*x9022);
IkReal x9026=(gconst4*x9025);
IkReal x9027=((1.0)*gconst4*x9023);
evalcond[0]=(((r22*x9023))+(((-1.0)*r21*x9022*x9024))+(((-1.0)*r20*x9026)));
evalcond[1]=(((r02*x9023))+(((-1.0)*r01*x9022*x9024))+(((-1.0)*r00*x9026)));
evalcond[2]=((1.0)+(((-1.0)*r11*x9022*x9024))+((r12*x9023))+(((-1.0)*r10*x9026)));
evalcond[3]=((((-1.0)*r12*x9025))+(((-1.0)*r11*x9023*x9024))+(((-1.0)*r10*x9027)));
evalcond[4]=(((sj1*sj2))+((cj1*cj2))+(((-1.0)*r01*x9023*x9024))+(((-1.0)*r02*x9025))+(((-1.0)*r00*x9027)));
evalcond[5]=((((-1.0)*r21*x9023*x9024))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r20*x9027))+(((-1.0)*r22*x9025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9028=IKPowWithIntegerCheck(IKsign((((gconst4*r21))+(((-1.0)*gconst5*r20)))),-1);
if(!x9028.valid){
continue;
}
CheckValue<IkReal> x9029 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r00))+((gconst5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9028.value)))+(x9029.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9030=IKsin(j4);
IkReal x9031=IKcos(j4);
IkReal x9032=((1.0)*gconst5);
IkReal x9033=((1.0)*x9030);
IkReal x9034=(gconst4*x9033);
IkReal x9035=((1.0)*gconst4*x9031);
evalcond[0]=((((-1.0)*r21*x9030*x9032))+((r22*x9031))+(((-1.0)*r20*x9034)));
evalcond[1]=((((-1.0)*r01*x9030*x9032))+((r02*x9031))+(((-1.0)*r00*x9034)));
evalcond[2]=((1.0)+(((-1.0)*r10*x9034))+(((-1.0)*r11*x9030*x9032))+((r12*x9031)));
evalcond[3]=((((-1.0)*r10*x9035))+(((-1.0)*r12*x9033))+(((-1.0)*r11*x9031*x9032)));
evalcond[4]=(((sj1*sj2))+((cj1*cj2))+(((-1.0)*r01*x9031*x9032))+(((-1.0)*r00*x9035))+(((-1.0)*r02*x9033)));
evalcond[5]=((((-1.0)*r21*x9031*x9032))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r20*x9035))+(((-1.0)*r22*x9033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9036=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r01))+((gconst5*r00)))),-1);
if(!x9036.valid){
continue;
}
CheckValue<IkReal> x9037 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9036.value)))+(x9037.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9038=IKsin(j4);
IkReal x9039=IKcos(j4);
IkReal x9040=((1.0)*gconst5);
IkReal x9041=((1.0)*x9038);
IkReal x9042=(gconst4*x9041);
IkReal x9043=((1.0)*gconst4*x9039);
evalcond[0]=(((r22*x9039))+(((-1.0)*r21*x9038*x9040))+(((-1.0)*r20*x9042)));
evalcond[1]=((((-1.0)*r00*x9042))+((r02*x9039))+(((-1.0)*r01*x9038*x9040)));
evalcond[2]=((1.0)+(((-1.0)*r10*x9042))+(((-1.0)*r11*x9038*x9040))+((r12*x9039)));
evalcond[3]=((((-1.0)*r11*x9039*x9040))+(((-1.0)*r10*x9043))+(((-1.0)*r12*x9041)));
evalcond[4]=((((-1.0)*r01*x9039*x9040))+((sj1*sj2))+(((-1.0)*r00*x9043))+((cj1*cj2))+(((-1.0)*r02*x9041)));
evalcond[5]=((((-1.0)*r21*x9039*x9040))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x9041))+(((-1.0)*r20*x9043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9047 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9047.valid){
continue;
}
IkReal x9044=((1.0)*(x9047.value));
IkReal x9045=x8252;
IkReal x9046=((1.0)*x9045);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9044)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9044)));
IkReal gconst4=(r20*x9046);
IkReal gconst5=(r21*x9046);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9051 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9051.valid){
continue;
}
IkReal x9048=((1.0)*(x9051.value));
IkReal x9049=x8252;
IkReal x9050=((1.0)*x9049);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9048)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9048)));
IkReal gconst4=(r20*x9050);
IkReal gconst5=(r21*x9050);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9055 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9055.valid){
continue;
}
IkReal x9052=((1.0)*(x9055.value));
IkReal x9053=x8252;
IkReal x9054=((1.0)*x9053);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9052)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9052)));
IkReal gconst4=(r20*x9054);
IkReal gconst5=(r21*x9054);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9056=(gconst5*r11);
IkReal x9057=(gconst4*r10);
CheckValue<IkReal> x9058 = IKatan2WithCheck(IkReal((x9056+x9057)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9058.valid){
continue;
}
CheckValue<IkReal> x9059=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9056*x9056)+(((2.0)*x9056*x9057))+(x9057*x9057))),-1);
if(!x9059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9058.value)+(((1.5707963267949)*(x9059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9060=IKcos(j4);
IkReal x9061=IKsin(j4);
IkReal x9062=(gconst4*x9060);
IkReal x9063=(gconst5*x9060);
IkReal x9064=((1.0)*gconst4*x9061);
IkReal x9065=((1.0)*gconst5*x9061);
evalcond[0]=(((r11*x9063))+((r12*x9061))+((r10*x9062)));
evalcond[1]=(((r22*x9060))+(((-1.0)*r20*x9064))+(((-1.0)*r21*x9065)));
evalcond[2]=((((-1.0)*r01*x9065))+((r02*x9060))+(((-1.0)*r00*x9064)));
evalcond[3]=((1.0)+((r12*x9060))+(((-1.0)*r10*x9064))+(((-1.0)*r11*x9065)));
evalcond[4]=(((r00*x9062))+((r01*x9063))+((r02*x9061))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((r22*x9061))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r21*x9063))+((r20*x9062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9066=IKPowWithIntegerCheck(IKsign((((gconst4*r21))+(((-1.0)*gconst5*r20)))),-1);
if(!x9066.valid){
continue;
}
CheckValue<IkReal> x9067 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r00))+((gconst5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9066.value)))+(x9067.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9068=IKcos(j4);
IkReal x9069=IKsin(j4);
IkReal x9070=(gconst4*x9068);
IkReal x9071=(gconst5*x9068);
IkReal x9072=((1.0)*gconst4*x9069);
IkReal x9073=((1.0)*gconst5*x9069);
evalcond[0]=(((r12*x9069))+((r11*x9071))+((r10*x9070)));
evalcond[1]=(((r22*x9068))+(((-1.0)*r20*x9072))+(((-1.0)*r21*x9073)));
evalcond[2]=(((r02*x9068))+(((-1.0)*r00*x9072))+(((-1.0)*r01*x9073)));
evalcond[3]=((1.0)+((r12*x9068))+(((-1.0)*r11*x9073))+(((-1.0)*r10*x9072)));
evalcond[4]=(((r02*x9069))+((sj1*sj2))+((r00*x9070))+((r01*x9071))+((cj1*cj2)));
evalcond[5]=(((r22*x9069))+((r21*x9071))+((r20*x9070))+((cj1*sj2))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9074=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r01))+((gconst5*r00)))),-1);
if(!x9074.valid){
continue;
}
CheckValue<IkReal> x9075 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9074.value)))+(x9075.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9076=IKcos(j4);
IkReal x9077=IKsin(j4);
IkReal x9078=(gconst4*x9076);
IkReal x9079=(gconst5*x9076);
IkReal x9080=((1.0)*gconst4*x9077);
IkReal x9081=((1.0)*gconst5*x9077);
evalcond[0]=(((r11*x9079))+((r12*x9077))+((r10*x9078)));
evalcond[1]=((((-1.0)*r21*x9081))+(((-1.0)*r20*x9080))+((r22*x9076)));
evalcond[2]=((((-1.0)*r01*x9081))+(((-1.0)*r00*x9080))+((r02*x9076)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9080))+((r12*x9076))+(((-1.0)*r11*x9081)));
evalcond[4]=(((sj1*sj2))+((r00*x9078))+((r01*x9079))+((cj1*cj2))+((r02*x9077)));
evalcond[5]=(((r21*x9079))+((r20*x9078))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r22*x9077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9085 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9085.valid){
continue;
}
IkReal x9082=((1.0)*(x9085.value));
IkReal x9083=x8252;
IkReal x9084=((1.0)*x9083);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9082)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9082)));
IkReal gconst4=(r20*x9084);
IkReal gconst5=(r21*x9084);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9089 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9089.valid){
continue;
}
IkReal x9086=((1.0)*(x9089.value));
IkReal x9087=x8252;
IkReal x9088=((1.0)*x9087);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9086)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9086)));
IkReal gconst4=(r20*x9088);
IkReal gconst5=(r21*x9088);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9093 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9093.valid){
continue;
}
IkReal x9090=((1.0)*(x9093.value));
IkReal x9091=x8252;
IkReal x9092=((1.0)*x9091);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9090)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9090)));
IkReal gconst4=(r20*x9092);
IkReal gconst5=(r21*x9092);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9094=(gconst5*r11);
IkReal x9095=(gconst4*r10);
CheckValue<IkReal> x9096 = IKatan2WithCheck(IkReal((x9094+x9095)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9096.valid){
continue;
}
CheckValue<IkReal> x9097=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9095*x9095)+(x9094*x9094)+(((2.0)*x9094*x9095)))),-1);
if(!x9097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9096.value)+(((1.5707963267949)*(x9097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9098=IKcos(j4);
IkReal x9099=IKsin(j4);
IkReal x9100=(gconst4*x9098);
IkReal x9101=(gconst5*x9098);
IkReal x9102=((1.0)*gconst4*x9099);
IkReal x9103=((1.0)*gconst5*x9099);
evalcond[0]=(((r10*x9100))+((r12*x9099))+((r11*x9101)));
evalcond[1]=((((-1.0)*r21*x9103))+(((-1.0)*r20*x9102))+((r22*x9098)));
evalcond[2]=((((-1.0)*r01*x9103))+(((-1.0)*r00*x9102))+((r02*x9098)));
evalcond[3]=((1.0)+((r12*x9098))+(((-1.0)*r10*x9102))+(((-1.0)*r11*x9103)));
evalcond[4]=(((sj1*sj2))+((r21*x9101))+((r22*x9099))+((cj1*cj2))+((r20*x9100)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r02*x9099))+((r01*x9101))+((r00*x9100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9104=IKPowWithIntegerCheck(IKsign((((gconst4*r21))+(((-1.0)*gconst5*r20)))),-1);
if(!x9104.valid){
continue;
}
CheckValue<IkReal> x9105 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r00))+((gconst5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9104.value)))+(x9105.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9106=IKcos(j4);
IkReal x9107=IKsin(j4);
IkReal x9108=(gconst4*x9106);
IkReal x9109=(gconst5*x9106);
IkReal x9110=((1.0)*gconst4*x9107);
IkReal x9111=((1.0)*gconst5*x9107);
evalcond[0]=(((r10*x9108))+((r12*x9107))+((r11*x9109)));
evalcond[1]=(((r22*x9106))+(((-1.0)*r21*x9111))+(((-1.0)*r20*x9110)));
evalcond[2]=(((r02*x9106))+(((-1.0)*r01*x9111))+(((-1.0)*r00*x9110)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9110))+((r12*x9106))+(((-1.0)*r11*x9111)));
evalcond[4]=(((sj1*sj2))+((r22*x9107))+((r21*x9109))+((cj1*cj2))+((r20*x9108)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r02*x9107))+((r01*x9109))+((r00*x9108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9112=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r01))+((gconst5*r00)))),-1);
if(!x9112.valid){
continue;
}
CheckValue<IkReal> x9113 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9112.value)))+(x9113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9114=IKcos(j4);
IkReal x9115=IKsin(j4);
IkReal x9116=(gconst4*x9114);
IkReal x9117=(gconst5*x9114);
IkReal x9118=((1.0)*gconst4*x9115);
IkReal x9119=((1.0)*gconst5*x9115);
evalcond[0]=(((r12*x9115))+((r11*x9117))+((r10*x9116)));
evalcond[1]=((((-1.0)*r21*x9119))+((r22*x9114))+(((-1.0)*r20*x9118)));
evalcond[2]=((((-1.0)*r01*x9119))+((r02*x9114))+(((-1.0)*r00*x9118)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9118))+((r12*x9114))+(((-1.0)*r11*x9119)));
evalcond[4]=(((r21*x9117))+((sj1*sj2))+((r20*x9116))+((cj1*cj2))+((r22*x9115)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((r01*x9117))+((r00*x9116))+((r02*x9115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9123 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9123.valid){
continue;
}
IkReal x9120=((1.0)*(x9123.value));
IkReal x9121=x8252;
IkReal x9122=((1.0)*x9121);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9120)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9120)));
IkReal gconst4=(r20*x9122);
IkReal gconst5=(r21*x9122);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9127 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9127.valid){
continue;
}
IkReal x9124=((1.0)*(x9127.value));
IkReal x9125=x8252;
IkReal x9126=((1.0)*x9125);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9124)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9124)));
IkReal gconst4=(r20*x9126);
IkReal gconst5=(r21*x9126);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9131 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9131.valid){
continue;
}
IkReal x9128=((1.0)*(x9131.value));
IkReal x9129=x8252;
IkReal x9130=((1.0)*x9129);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9128)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9128)));
IkReal gconst4=(r20*x9130);
IkReal gconst5=(r21*x9130);
IkReal x9132=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9136=IKPowWithIntegerCheck(x9132,-1);
if(!x9136.valid){
continue;
}
IkReal x9133=x9136.value;
IkReal x9134=((1.0)*x9133);
IkReal x9135=((((-2.0)*r10*r11*r20*r21*x9133))+(((-1.0)*x9134*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9134*(r11*r11)*(r21*r21))));
j4eval[0]=x9135;
j4eval[1]=IKsign(x9135);
j4eval[2]=r12;
j4eval[3]=x9132;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9137=(gconst5*r11);
IkReal x9138=(gconst4*r10);
CheckValue<IkReal> x9139 = IKatan2WithCheck(IkReal(((((-1.0)*x9137))+(((-1.0)*x9138)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9139.valid){
continue;
}
CheckValue<IkReal> x9140=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9137*x9138))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9137*x9137)))+(((-1.0)*(x9138*x9138))))),-1);
if(!x9140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9139.value)+(((1.5707963267949)*(x9140.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9141=IKsin(j4);
IkReal x9142=IKcos(j4);
IkReal x9143=((1.0)*gconst5);
IkReal x9144=((1.0)*x9141);
IkReal x9145=(gconst4*x9144);
IkReal x9146=((1.0)*gconst4*x9142);
evalcond[0]=((((-1.0)*r20*x9145))+(((-1.0)*r21*x9141*x9143))+((r22*x9142)));
evalcond[1]=((((-1.0)*r00*x9145))+(((-1.0)*r01*x9141*x9143))+((r02*x9142)));
evalcond[2]=((1.0)+(((-1.0)*r11*x9141*x9143))+(((-1.0)*r10*x9145))+((r12*x9142)));
evalcond[3]=((((-1.0)*r11*x9142*x9143))+(((-1.0)*r10*x9146))+(((-1.0)*r12*x9144)));
evalcond[4]=((((-1.0)*r20*x9146))+((sj1*sj2))+(((-1.0)*r22*x9144))+(((-1.0)*r21*x9142*x9143))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r00*x9146))+(((-1.0)*r01*x9142*x9143))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x9144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9147=IKPowWithIntegerCheck(IKsign((((gconst4*r21))+(((-1.0)*gconst5*r20)))),-1);
if(!x9147.valid){
continue;
}
CheckValue<IkReal> x9148 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r00))+((gconst5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9147.value)))+(x9148.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9149=IKsin(j4);
IkReal x9150=IKcos(j4);
IkReal x9151=((1.0)*gconst5);
IkReal x9152=((1.0)*x9149);
IkReal x9153=(gconst4*x9152);
IkReal x9154=((1.0)*gconst4*x9150);
evalcond[0]=(((r22*x9150))+(((-1.0)*r20*x9153))+(((-1.0)*r21*x9149*x9151)));
evalcond[1]=(((r02*x9150))+(((-1.0)*r01*x9149*x9151))+(((-1.0)*r00*x9153)));
evalcond[2]=((1.0)+(((-1.0)*r11*x9149*x9151))+(((-1.0)*r10*x9153))+((r12*x9150)));
evalcond[3]=((((-1.0)*r12*x9152))+(((-1.0)*r11*x9150*x9151))+(((-1.0)*r10*x9154)));
evalcond[4]=((((-1.0)*r20*x9154))+((sj1*sj2))+(((-1.0)*r22*x9152))+((cj1*cj2))+(((-1.0)*r21*x9150*x9151)));
evalcond[5]=((((-1.0)*r02*x9152))+((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r01*x9150*x9151))+(((-1.0)*r00*x9154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9155=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r01))+((gconst5*r00)))),-1);
if(!x9155.valid){
continue;
}
CheckValue<IkReal> x9156 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9155.value)))+(x9156.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9157=IKsin(j4);
IkReal x9158=IKcos(j4);
IkReal x9159=((1.0)*gconst5);
IkReal x9160=((1.0)*x9157);
IkReal x9161=(gconst4*x9160);
IkReal x9162=((1.0)*gconst4*x9158);
evalcond[0]=(((r22*x9158))+(((-1.0)*r21*x9157*x9159))+(((-1.0)*r20*x9161)));
evalcond[1]=(((r02*x9158))+(((-1.0)*r01*x9157*x9159))+(((-1.0)*r00*x9161)));
evalcond[2]=((1.0)+(((-1.0)*r11*x9157*x9159))+(((-1.0)*r10*x9161))+((r12*x9158)));
evalcond[3]=((((-1.0)*r12*x9160))+(((-1.0)*r11*x9158*x9159))+(((-1.0)*r10*x9162)));
evalcond[4]=((((-1.0)*r21*x9158*x9159))+(((-1.0)*r22*x9160))+((sj1*sj2))+(((-1.0)*r20*x9162))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x9160))+(((-1.0)*r01*x9158*x9159))+(((-1.0)*r00*x9162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9163=((-1.0)*px);
CheckValue<IkReal> x9165 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9165.valid){
continue;
}
IkReal x9164=((1.0)*(x9165.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9164)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9163);
rxp1_1=(px*r21);
rxp1_2=(r11*x9163);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9164)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x9166=((1.0)*r11*r21);
IkReal x9167=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x9167))+(((-1.0)*x9166)));
j4eval[1]=(((sj3*x9167))+((sj3*x9166)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9168=((-1.0)*px);
CheckValue<IkReal> x9170 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9170.valid){
continue;
}
IkReal x9169=((1.0)*(x9170.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9169)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9168);
rxp1_1=(px*r21);
rxp1_2=(r11*x9168);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9169)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x9171=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r11*r21*x9171))+((r10*r20*x9171)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9172=((-1.0)*px);
CheckValue<IkReal> x9174 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9174.valid){
continue;
}
IkReal x9173=((1.0)*(x9174.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9173)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9172);
rxp1_1=(px*r21);
rxp1_2=(r11*x9172);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9173)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x9175=((1.0)*sj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((r11*r21*x9175))+((r10*r20*x9175)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9176=IKPowWithIntegerCheck(r02,-1);
if(!x9176.valid){
continue;
}
CheckValue<IkReal> x9177=IKPowWithIntegerCheck(sj3,-1);
if(!x9177.valid){
continue;
}
CheckValue<IkReal> x9178=IKPowWithIntegerCheck((((gconst4*r10*sj3))+((gconst5*r11*sj3))),-1);
if(!x9178.valid){
continue;
}
if( IKabs(((x9176.value)*(x9177.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9178.value)*(((((-1.0)*cj3*gconst5*r10))+((cj3*gconst4*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9176.value)*(x9177.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))))))+IKsqr(((x9178.value)*(((((-1.0)*cj3*gconst5*r10))+((cj3*gconst4*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9176.value)*(x9177.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))))), ((x9178.value)*(((((-1.0)*cj3*gconst5*r10))+((cj3*gconst4*r11))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9179=IKsin(j4);
IkReal x9180=IKcos(j4);
IkReal x9181=(sj1*sj2);
IkReal x9182=(cj1*cj2);
IkReal x9183=(cj1*sj2);
IkReal x9184=((1.0)*gconst4);
IkReal x9185=(cj3*gconst5);
IkReal x9186=((1.0)*r11);
IkReal x9187=(r21*sj3);
IkReal x9188=(r10*sj3);
IkReal x9189=(cj2*sj1);
IkReal x9190=((1.0)*r21);
IkReal x9191=(r11*sj3);
IkReal x9192=(r20*sj3);
IkReal x9193=(gconst5*x9179);
IkReal x9194=(cj3*x9180);
IkReal x9195=(r02*x9179);
IkReal x9196=(gconst5*x9180);
IkReal x9197=(gconst4*x9180);
IkReal x9198=(x9182+x9181);
evalcond[0]=(r02*x9180);
evalcond[1]=(x9189+((sj3*x9195))+(((-1.0)*x9183)));
evalcond[2]=(x9198+(((-1.0)*cj3*x9195)));
evalcond[3]=((((-1.0)*r20*x9179*x9184))+(((-1.0)*x9190*x9193)));
evalcond[4]=((1.0)+(((-1.0)*r10*x9179*x9184))+(((-1.0)*x9186*x9193)));
evalcond[5]=((((-1.0)*cj3*r11*x9184))+((r10*x9185))+((x9191*x9196))+((x9188*x9197)));
evalcond[6]=((((-1.0)*x9184*x9191))+(((-1.0)*x9180*x9185*x9186))+(((-1.0)*r10*x9184*x9194))+((gconst5*x9188)));
evalcond[7]=(x9198+((r20*x9185))+((x9187*x9196))+((x9192*x9197))+(((-1.0)*cj3*r21*x9184)));
evalcond[8]=((((-1.0)*x9180*x9185*x9190))+(((-1.0)*x9184*x9187))+((gconst5*x9192))+x9183+(((-1.0)*r20*x9184*x9194))+(((-1.0)*x9189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9199=IKPowWithIntegerCheck(cj3,-1);
if(!x9199.valid){
continue;
}
CheckValue<IkReal> x9200=IKPowWithIntegerCheck(r02,-1);
if(!x9200.valid){
continue;
}
CheckValue<IkReal> x9201=IKPowWithIntegerCheck((((gconst4*r10*sj3))+((gconst5*r11*sj3))),-1);
if(!x9201.valid){
continue;
}
if( IKabs(((x9199.value)*(x9200.value)*((((sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9201.value)*(((((-1.0)*cj3*gconst5*r10))+((cj3*gconst4*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9199.value)*(x9200.value)*((((sj1*sj2))+((cj1*cj2))))))+IKsqr(((x9201.value)*(((((-1.0)*cj3*gconst5*r10))+((cj3*gconst4*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9199.value)*(x9200.value)*((((sj1*sj2))+((cj1*cj2))))), ((x9201.value)*(((((-1.0)*cj3*gconst5*r10))+((cj3*gconst4*r11))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9202=IKsin(j4);
IkReal x9203=IKcos(j4);
IkReal x9204=(sj1*sj2);
IkReal x9205=(cj1*cj2);
IkReal x9206=(cj1*sj2);
IkReal x9207=((1.0)*gconst4);
IkReal x9208=(cj3*gconst5);
IkReal x9209=((1.0)*r11);
IkReal x9210=(r21*sj3);
IkReal x9211=(r10*sj3);
IkReal x9212=(cj2*sj1);
IkReal x9213=((1.0)*r21);
IkReal x9214=(r11*sj3);
IkReal x9215=(r20*sj3);
IkReal x9216=(gconst5*x9202);
IkReal x9217=(cj3*x9203);
IkReal x9218=(r02*x9202);
IkReal x9219=(gconst5*x9203);
IkReal x9220=(gconst4*x9203);
IkReal x9221=(x9205+x9204);
evalcond[0]=(r02*x9203);
evalcond[1]=(x9212+((sj3*x9218))+(((-1.0)*x9206)));
evalcond[2]=((((-1.0)*cj3*x9218))+x9221);
evalcond[3]=((((-1.0)*x9213*x9216))+(((-1.0)*r20*x9202*x9207)));
evalcond[4]=((1.0)+(((-1.0)*r10*x9202*x9207))+(((-1.0)*x9209*x9216)));
evalcond[5]=(((r10*x9208))+((x9214*x9219))+(((-1.0)*cj3*r11*x9207))+((x9211*x9220)));
evalcond[6]=((((-1.0)*x9207*x9214))+(((-1.0)*x9203*x9208*x9209))+(((-1.0)*r10*x9207*x9217))+((gconst5*x9211)));
evalcond[7]=(((r20*x9208))+x9221+((x9210*x9219))+((x9215*x9220))+(((-1.0)*cj3*r21*x9207)));
evalcond[8]=(x9206+(((-1.0)*x9207*x9210))+(((-1.0)*r20*x9207*x9217))+(((-1.0)*x9203*x9208*x9213))+(((-1.0)*x9212))+((gconst5*x9215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9222=(gconst4*r10);
IkReal x9223=(gconst5*r11);
CheckValue<IkReal> x9224=IKPowWithIntegerCheck(((((-1.0)*x9223))+(((-1.0)*x9222))),-1);
if(!x9224.valid){
continue;
}
CheckValue<IkReal> x9225=IKPowWithIntegerCheck((((sj3*x9222))+((sj3*x9223))),-1);
if(!x9225.valid){
continue;
}
if( IKabs(((-1.0)*(x9224.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9225.value)*(((((-1.0)*cj3*gconst5*r10))+((cj3*gconst4*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9224.value)))+IKsqr(((x9225.value)*(((((-1.0)*cj3*gconst5*r10))+((cj3*gconst4*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9224.value)), ((x9225.value)*(((((-1.0)*cj3*gconst5*r10))+((cj3*gconst4*r11))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9226=IKsin(j4);
IkReal x9227=IKcos(j4);
IkReal x9228=(sj1*sj2);
IkReal x9229=(cj1*cj2);
IkReal x9230=(cj1*sj2);
IkReal x9231=((1.0)*gconst4);
IkReal x9232=(cj3*gconst5);
IkReal x9233=((1.0)*r11);
IkReal x9234=(r21*sj3);
IkReal x9235=(r10*sj3);
IkReal x9236=(cj2*sj1);
IkReal x9237=((1.0)*r21);
IkReal x9238=(r11*sj3);
IkReal x9239=(r20*sj3);
IkReal x9240=(gconst5*x9226);
IkReal x9241=(cj3*x9227);
IkReal x9242=(r02*x9226);
IkReal x9243=(gconst5*x9227);
IkReal x9244=(gconst4*x9227);
IkReal x9245=(x9229+x9228);
evalcond[0]=(r02*x9227);
evalcond[1]=(((sj3*x9242))+x9236+(((-1.0)*x9230)));
evalcond[2]=(x9245+(((-1.0)*cj3*x9242)));
evalcond[3]=((((-1.0)*r20*x9226*x9231))+(((-1.0)*x9237*x9240)));
evalcond[4]=((1.0)+(((-1.0)*r10*x9226*x9231))+(((-1.0)*x9233*x9240)));
evalcond[5]=(((x9238*x9243))+((x9235*x9244))+((r10*x9232))+(((-1.0)*cj3*r11*x9231)));
evalcond[6]=((((-1.0)*r10*x9231*x9241))+(((-1.0)*x9227*x9232*x9233))+((gconst5*x9235))+(((-1.0)*x9231*x9238)));
evalcond[7]=(x9245+((x9239*x9244))+((x9234*x9243))+(((-1.0)*cj3*r21*x9231))+((r20*x9232)));
evalcond[8]=(x9230+(((-1.0)*r20*x9231*x9241))+(((-1.0)*x9227*x9232*x9237))+((gconst5*x9239))+(((-1.0)*x9231*x9234))+(((-1.0)*x9236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9246=gconst4*gconst4;
IkReal x9247=gconst5*gconst5;
IkReal x9248=((1.0)*sj3);
IkReal x9249=(r10*r21);
IkReal x9250=(gconst4*gconst5);
IkReal x9251=(cj3*r10);
IkReal x9252=(r20*x9246);
IkReal x9253=((1.0)*cj3*r11);
CheckValue<IkReal> x9254 = IKatan2WithCheck(IkReal(((((-1.0)*gconst4*r22*x9253))+((gconst5*r22*x9251)))),IkReal((((r20*x9250*x9251))+((cj3*x9247*x9249))+(((-1.0)*r21*x9250*x9253))+(((-1.0)*x9252*x9253)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9254.valid){
continue;
}
CheckValue<IkReal> x9255=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*r21*x9247*x9248))+(((-1.0)*r10*x9248*x9252))+(((-1.0)*r11*r20*x9248*x9250))+(((-1.0)*x9248*x9249*x9250))+(((-1.0)*r12*r22*x9248)))),-1);
if(!x9255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9254.value)+(((1.5707963267949)*(x9255.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9256=IKsin(j4);
IkReal x9257=IKcos(j4);
IkReal x9258=(sj1*sj2);
IkReal x9259=(cj1*cj2);
IkReal x9260=(cj1*sj2);
IkReal x9261=((1.0)*gconst4);
IkReal x9262=(cj3*gconst5);
IkReal x9263=(gconst5*sj3);
IkReal x9264=(cj2*sj1);
IkReal x9265=((1.0)*x9257);
IkReal x9266=(r12*x9256);
IkReal x9267=((1.0)*x9256);
IkReal x9268=(cj3*x9257);
IkReal x9269=(sj3*x9256);
IkReal x9270=(x9258+x9259);
IkReal x9271=(gconst4*sj3*x9257);
evalcond[0]=((((-1.0)*r20*x9256*x9261))+(((-1.0)*gconst5*r21*x9267))+((r22*x9257)));
evalcond[1]=((((-1.0)*gconst5*r01*x9267))+((r02*x9257))+(((-1.0)*r00*x9256*x9261)));
evalcond[2]=((1.0)+((r12*x9257))+(((-1.0)*r10*x9256*x9261))+(((-1.0)*gconst5*r11*x9267)));
evalcond[3]=(((r10*x9271))+(((-1.0)*cj3*r11*x9261))+((r10*x9262))+((sj3*x9266))+((r11*x9257*x9263)));
evalcond[4]=((((-1.0)*r11*sj3*x9261))+(((-1.0)*r11*x9262*x9265))+(((-1.0)*cj3*x9266))+((r10*x9263))+(((-1.0)*r10*x9261*x9268)));
evalcond[5]=(((r22*x9269))+x9270+((r20*x9262))+((r20*x9271))+(((-1.0)*cj3*r21*x9261))+((r21*x9257*x9263)));
evalcond[6]=((((-1.0)*cj3*r01*x9261))+x9264+((r00*x9271))+((r00*x9262))+((r01*x9257*x9263))+(((-1.0)*x9260))+((r02*x9269)));
evalcond[7]=((((-1.0)*r00*x9261*x9268))+(((-1.0)*r01*sj3*x9261))+(((-1.0)*cj3*r02*x9267))+x9270+((r00*x9263))+(((-1.0)*r01*x9262*x9265)));
evalcond[8]=(x9260+(((-1.0)*cj3*r22*x9267))+((r20*x9263))+(((-1.0)*r21*x9262*x9265))+(((-1.0)*r20*x9261*x9268))+(((-1.0)*x9264))+(((-1.0)*r21*sj3*x9261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9272=IKPowWithIntegerCheck(IKsign((((gconst4*r21))+(((-1.0)*gconst5*r20)))),-1);
if(!x9272.valid){
continue;
}
CheckValue<IkReal> x9273 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r00))+((gconst5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9272.value)))+(x9273.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9274=IKsin(j4);
IkReal x9275=IKcos(j4);
IkReal x9276=(sj1*sj2);
IkReal x9277=(cj1*cj2);
IkReal x9278=(cj1*sj2);
IkReal x9279=((1.0)*gconst4);
IkReal x9280=(cj3*gconst5);
IkReal x9281=(gconst5*sj3);
IkReal x9282=(cj2*sj1);
IkReal x9283=((1.0)*x9275);
IkReal x9284=(r12*x9274);
IkReal x9285=((1.0)*x9274);
IkReal x9286=(cj3*x9275);
IkReal x9287=(sj3*x9274);
IkReal x9288=(x9276+x9277);
IkReal x9289=(gconst4*sj3*x9275);
evalcond[0]=((((-1.0)*gconst5*r21*x9285))+(((-1.0)*r20*x9274*x9279))+((r22*x9275)));
evalcond[1]=(((r02*x9275))+(((-1.0)*gconst5*r01*x9285))+(((-1.0)*r00*x9274*x9279)));
evalcond[2]=((1.0)+((r12*x9275))+(((-1.0)*r10*x9274*x9279))+(((-1.0)*gconst5*r11*x9285)));
evalcond[3]=(((r10*x9289))+((r10*x9280))+(((-1.0)*cj3*r11*x9279))+((r11*x9275*x9281))+((sj3*x9284)));
evalcond[4]=((((-1.0)*r11*sj3*x9279))+((r10*x9281))+(((-1.0)*r10*x9279*x9286))+(((-1.0)*r11*x9280*x9283))+(((-1.0)*cj3*x9284)));
evalcond[5]=(((r22*x9287))+x9288+((r20*x9289))+((r20*x9280))+((r21*x9275*x9281))+(((-1.0)*cj3*r21*x9279)));
evalcond[6]=(((r02*x9287))+((r01*x9275*x9281))+x9282+(((-1.0)*cj3*r01*x9279))+((r00*x9289))+((r00*x9280))+(((-1.0)*x9278)));
evalcond[7]=((((-1.0)*r01*sj3*x9279))+x9288+((r00*x9281))+(((-1.0)*cj3*r02*x9285))+(((-1.0)*r00*x9279*x9286))+(((-1.0)*r01*x9280*x9283)));
evalcond[8]=(x9278+(((-1.0)*r21*x9280*x9283))+((r20*x9281))+(((-1.0)*cj3*r22*x9285))+(((-1.0)*r20*x9279*x9286))+(((-1.0)*x9282))+(((-1.0)*r21*sj3*x9279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9290=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r01))+((gconst5*r00)))),-1);
if(!x9290.valid){
continue;
}
CheckValue<IkReal> x9291 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9290.value)))+(x9291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9292=IKsin(j4);
IkReal x9293=IKcos(j4);
IkReal x9294=(sj1*sj2);
IkReal x9295=(cj1*cj2);
IkReal x9296=(cj1*sj2);
IkReal x9297=((1.0)*gconst4);
IkReal x9298=(cj3*gconst5);
IkReal x9299=(gconst5*sj3);
IkReal x9300=(cj2*sj1);
IkReal x9301=((1.0)*x9293);
IkReal x9302=(r12*x9292);
IkReal x9303=((1.0)*x9292);
IkReal x9304=(cj3*x9293);
IkReal x9305=(sj3*x9292);
IkReal x9306=(x9294+x9295);
IkReal x9307=(gconst4*sj3*x9293);
evalcond[0]=(((r22*x9293))+(((-1.0)*r20*x9292*x9297))+(((-1.0)*gconst5*r21*x9303)));
evalcond[1]=((((-1.0)*gconst5*r01*x9303))+((r02*x9293))+(((-1.0)*r00*x9292*x9297)));
evalcond[2]=((1.0)+(((-1.0)*r10*x9292*x9297))+(((-1.0)*gconst5*r11*x9303))+((r12*x9293)));
evalcond[3]=(((r10*x9298))+(((-1.0)*cj3*r11*x9297))+((r11*x9293*x9299))+((r10*x9307))+((sj3*x9302)));
evalcond[4]=((((-1.0)*r11*x9298*x9301))+(((-1.0)*r11*sj3*x9297))+((r10*x9299))+(((-1.0)*cj3*x9302))+(((-1.0)*r10*x9297*x9304)));
evalcond[5]=(((r22*x9305))+x9306+((r21*x9293*x9299))+((r20*x9298))+((r20*x9307))+(((-1.0)*cj3*r21*x9297)));
evalcond[6]=(((r02*x9305))+x9300+((r00*x9298))+(((-1.0)*x9296))+(((-1.0)*cj3*r01*x9297))+((r01*x9293*x9299))+((r00*x9307)));
evalcond[7]=(x9306+(((-1.0)*r01*x9298*x9301))+(((-1.0)*r01*sj3*x9297))+(((-1.0)*r00*x9297*x9304))+((r00*x9299))+(((-1.0)*cj3*r02*x9303)));
evalcond[8]=((((-1.0)*r21*sj3*x9297))+(((-1.0)*r21*x9298*x9301))+x9296+(((-1.0)*r20*x9297*x9304))+(((-1.0)*cj3*r22*x9303))+((r20*x9299))+(((-1.0)*x9300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9311 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9311.valid){
continue;
}
IkReal x9308=((1.0)*(x9311.value));
IkReal x9309=x8252;
IkReal x9310=((1.0)*x9309);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9308)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9308)));
IkReal gconst4=(r20*x9310);
IkReal gconst5=(r21*x9310);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9315 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9315.valid){
continue;
}
IkReal x9312=((1.0)*(x9315.value));
IkReal x9313=x8252;
IkReal x9314=((1.0)*x9313);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9312)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9312)));
IkReal gconst4=(r20*x9314);
IkReal gconst5=(r21*x9314);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9319 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9319.valid){
continue;
}
IkReal x9316=((1.0)*(x9319.value));
IkReal x9317=x8252;
IkReal x9318=((1.0)*x9317);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9316)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9316)));
IkReal gconst4=(r20*x9318);
IkReal gconst5=(r21*x9318);
IkReal x9320=((1.0)*sj3);
IkReal x9321=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9325=IKPowWithIntegerCheck(x9321,-1);
if(!x9325.valid){
continue;
}
IkReal x9322=x9325.value;
IkReal x9323=(r10*x9322);
IkReal x9324=(r11*x9322);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=x9321;
j4eval[3]=IKsign(((((-1.0)*r20*x9320*x9323*(r21*r21)))+(((-1.0)*x9320*x9323*(r20*r20*r20)))+(((-1.0)*r21*x9320*x9324*(r20*r20)))+(((-1.0)*r12*r22*x9320))+(((-1.0)*x9320*x9324*(r21*r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9329 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9329.valid){
continue;
}
IkReal x9326=((1.0)*(x9329.value));
IkReal x9327=x8252;
IkReal x9328=((1.0)*x9327);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9326)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9326)));
IkReal gconst4=(r20*x9328);
IkReal gconst5=(r21*x9328);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9333 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9333.valid){
continue;
}
IkReal x9330=((1.0)*(x9333.value));
IkReal x9331=x8252;
IkReal x9332=((1.0)*x9331);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9330)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9330)));
IkReal gconst4=(r20*x9332);
IkReal gconst5=(r21*x9332);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9337 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9337.valid){
continue;
}
IkReal x9334=((1.0)*(x9337.value));
IkReal x9335=x8252;
IkReal x9336=((1.0)*x9335);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9334)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9334)));
IkReal gconst4=(r20*x9336);
IkReal gconst5=(r21*x9336);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9338=(gconst5*r11);
IkReal x9339=(gconst4*r10);
CheckValue<IkReal> x9340=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9338*x9338)+(((2.0)*x9338*x9339))+(x9339*x9339))),-1);
if(!x9340.valid){
continue;
}
CheckValue<IkReal> x9341 = IKatan2WithCheck(IkReal(((((-1.0)*x9338))+(((-1.0)*x9339)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9340.value)))+(x9341.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9342=IKsin(j4);
IkReal x9343=IKcos(j4);
IkReal x9344=((1.0)*sj1);
IkReal x9345=((1.0)*gconst5);
IkReal x9346=((1.0)*x9342);
IkReal x9347=(gconst4*x9346);
IkReal x9348=((1.0)*gconst4*x9343);
evalcond[0]=((((-1.0)*r21*x9342*x9345))+(((-1.0)*r20*x9347))+((r22*x9343)));
evalcond[1]=((((-1.0)*r01*x9342*x9345))+(((-1.0)*r00*x9347))+((r02*x9343)));
evalcond[2]=((-1.0)+((r12*x9343))+(((-1.0)*r10*x9347))+(((-1.0)*r11*x9342*x9345)));
evalcond[3]=((((-1.0)*r10*x9348))+(((-1.0)*r11*x9343*x9345))+(((-1.0)*r12*x9346)));
evalcond[4]=((((-1.0)*r22*x9346))+((cj1*sj2))+(((-1.0)*r20*x9348))+(((-1.0)*cj2*x9344))+(((-1.0)*r21*x9343*x9345)));
evalcond[5]=((((-1.0)*sj2*x9344))+(((-1.0)*r02*x9346))+(((-1.0)*r01*x9343*x9345))+(((-1.0)*cj1*cj2))+(((-1.0)*r00*x9348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9349 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r00))+((gconst5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9349.valid){
continue;
}
CheckValue<IkReal> x9350=IKPowWithIntegerCheck(IKsign((((gconst5*r20))+(((-1.0)*gconst4*r21)))),-1);
if(!x9350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9349.value)+(((1.5707963267949)*(x9350.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9351=IKsin(j4);
IkReal x9352=IKcos(j4);
IkReal x9353=((1.0)*sj1);
IkReal x9354=((1.0)*gconst5);
IkReal x9355=((1.0)*x9351);
IkReal x9356=(gconst4*x9355);
IkReal x9357=((1.0)*gconst4*x9352);
evalcond[0]=((((-1.0)*r21*x9351*x9354))+(((-1.0)*r20*x9356))+((r22*x9352)));
evalcond[1]=((((-1.0)*r01*x9351*x9354))+(((-1.0)*r00*x9356))+((r02*x9352)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x9356))+(((-1.0)*r11*x9351*x9354))+((r12*x9352)));
evalcond[3]=((((-1.0)*r11*x9352*x9354))+(((-1.0)*r10*x9357))+(((-1.0)*r12*x9355)));
evalcond[4]=((((-1.0)*r22*x9355))+((cj1*sj2))+(((-1.0)*r21*x9352*x9354))+(((-1.0)*r20*x9357))+(((-1.0)*cj2*x9353)));
evalcond[5]=((((-1.0)*r02*x9355))+(((-1.0)*sj2*x9353))+(((-1.0)*cj1*cj2))+(((-1.0)*r01*x9352*x9354))+(((-1.0)*r00*x9357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9358=IKPowWithIntegerCheck(IKsign((((gconst4*r01))+(((-1.0)*gconst5*r00)))),-1);
if(!x9358.valid){
continue;
}
CheckValue<IkReal> x9359 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9358.value)))+(x9359.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9360=IKsin(j4);
IkReal x9361=IKcos(j4);
IkReal x9362=((1.0)*sj1);
IkReal x9363=((1.0)*gconst5);
IkReal x9364=((1.0)*x9360);
IkReal x9365=(gconst4*x9364);
IkReal x9366=((1.0)*gconst4*x9361);
evalcond[0]=((((-1.0)*r20*x9365))+((r22*x9361))+(((-1.0)*r21*x9360*x9363)));
evalcond[1]=((((-1.0)*r01*x9360*x9363))+((r02*x9361))+(((-1.0)*r00*x9365)));
evalcond[2]=((-1.0)+((r12*x9361))+(((-1.0)*r10*x9365))+(((-1.0)*r11*x9360*x9363)));
evalcond[3]=((((-1.0)*r10*x9366))+(((-1.0)*r11*x9361*x9363))+(((-1.0)*r12*x9364)));
evalcond[4]=((((-1.0)*cj2*x9362))+((cj1*sj2))+(((-1.0)*r20*x9366))+(((-1.0)*r22*x9364))+(((-1.0)*r21*x9361*x9363)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*r02*x9364))+(((-1.0)*r00*x9366))+(((-1.0)*sj2*x9362))+(((-1.0)*r01*x9361*x9363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9370 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9370.valid){
continue;
}
IkReal x9367=((1.0)*(x9370.value));
IkReal x9368=x8252;
IkReal x9369=((1.0)*x9368);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9367)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9367)));
IkReal gconst4=(r20*x9369);
IkReal gconst5=(r21*x9369);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9374 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9374.valid){
continue;
}
IkReal x9371=((1.0)*(x9374.value));
IkReal x9372=x8252;
IkReal x9373=((1.0)*x9372);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9371)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9371)));
IkReal gconst4=(r20*x9373);
IkReal gconst5=(r21*x9373);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9378 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9378.valid){
continue;
}
IkReal x9375=((1.0)*(x9378.value));
IkReal x9376=x8252;
IkReal x9377=((1.0)*x9376);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9375)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9375)));
IkReal gconst4=(r20*x9377);
IkReal gconst5=(r21*x9377);
IkReal x9379=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9383=IKPowWithIntegerCheck(x9379,-1);
if(!x9383.valid){
continue;
}
IkReal x9380=x9383.value;
IkReal x9381=((1.0)*x9380);
IkReal x9382=((((-1.0)*(r12*r12)))+(((-1.0)*x9381*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x9380))+(((-1.0)*x9381*(r11*r11)*(r21*r21))));
j4eval[0]=x9382;
j4eval[1]=IKsign(x9382);
j4eval[2]=r12;
j4eval[3]=x9379;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9384=(gconst5*r11);
IkReal x9385=(gconst4*r10);
CheckValue<IkReal> x9386=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9384*x9385))+(((-1.0)*(x9384*x9384)))+(((-1.0)*(x9385*x9385)))+(((-1.0)*(r12*r12))))),-1);
if(!x9386.valid){
continue;
}
CheckValue<IkReal> x9387 = IKatan2WithCheck(IkReal((x9384+x9385)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9386.value)))+(x9387.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9388=IKcos(j4);
IkReal x9389=IKsin(j4);
IkReal x9390=((1.0)*cj2);
IkReal x9391=(gconst4*x9388);
IkReal x9392=(gconst5*x9388);
IkReal x9393=((1.0)*gconst4*x9389);
IkReal x9394=((1.0)*gconst5*x9389);
evalcond[0]=(((r10*x9391))+((r11*x9392))+((r12*x9389)));
evalcond[1]=(((r22*x9388))+(((-1.0)*r20*x9393))+(((-1.0)*r21*x9394)));
evalcond[2]=(((r02*x9388))+(((-1.0)*r00*x9393))+(((-1.0)*r01*x9394)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9393))+(((-1.0)*r11*x9394))+((r12*x9388)));
evalcond[4]=(((r20*x9391))+((cj1*sj2))+((r22*x9389))+(((-1.0)*sj1*x9390))+((r21*x9392)));
evalcond[5]=(((r01*x9392))+((r02*x9389))+(((-1.0)*cj1*x9390))+(((-1.0)*sj1*sj2))+((r00*x9391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9395 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r00))+((gconst5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9395.valid){
continue;
}
CheckValue<IkReal> x9396=IKPowWithIntegerCheck(IKsign((((gconst5*r20))+(((-1.0)*gconst4*r21)))),-1);
if(!x9396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9395.value)+(((1.5707963267949)*(x9396.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9397=IKcos(j4);
IkReal x9398=IKsin(j4);
IkReal x9399=((1.0)*cj2);
IkReal x9400=(gconst4*x9397);
IkReal x9401=(gconst5*x9397);
IkReal x9402=((1.0)*gconst4*x9398);
IkReal x9403=((1.0)*gconst5*x9398);
evalcond[0]=(((r11*x9401))+((r12*x9398))+((r10*x9400)));
evalcond[1]=((((-1.0)*r20*x9402))+(((-1.0)*r21*x9403))+((r22*x9397)));
evalcond[2]=(((r02*x9397))+(((-1.0)*r00*x9402))+(((-1.0)*r01*x9403)));
evalcond[3]=((-1.0)+((r12*x9397))+(((-1.0)*r10*x9402))+(((-1.0)*r11*x9403)));
evalcond[4]=(((cj1*sj2))+((r20*x9400))+((r22*x9398))+((r21*x9401))+(((-1.0)*sj1*x9399)));
evalcond[5]=(((r01*x9401))+(((-1.0)*cj1*x9399))+(((-1.0)*sj1*sj2))+((r02*x9398))+((r00*x9400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9404=IKPowWithIntegerCheck(IKsign((((gconst4*r01))+(((-1.0)*gconst5*r00)))),-1);
if(!x9404.valid){
continue;
}
CheckValue<IkReal> x9405 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9404.value)))+(x9405.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9406=IKcos(j4);
IkReal x9407=IKsin(j4);
IkReal x9408=((1.0)*cj2);
IkReal x9409=(gconst4*x9406);
IkReal x9410=(gconst5*x9406);
IkReal x9411=((1.0)*gconst4*x9407);
IkReal x9412=((1.0)*gconst5*x9407);
evalcond[0]=(((r12*x9407))+((r11*x9410))+((r10*x9409)));
evalcond[1]=((((-1.0)*r20*x9411))+((r22*x9406))+(((-1.0)*r21*x9412)));
evalcond[2]=((((-1.0)*r00*x9411))+(((-1.0)*r01*x9412))+((r02*x9406)));
evalcond[3]=((-1.0)+((r12*x9406))+(((-1.0)*r11*x9412))+(((-1.0)*r10*x9411)));
evalcond[4]=(((r22*x9407))+((r21*x9410))+((cj1*sj2))+(((-1.0)*sj1*x9408))+((r20*x9409)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9410))+((r02*x9407))+(((-1.0)*cj1*x9408))+((r00*x9409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9416 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9416.valid){
continue;
}
IkReal x9413=((1.0)*(x9416.value));
IkReal x9414=x8252;
IkReal x9415=((1.0)*x9414);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9413)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9413)));
IkReal gconst4=(r20*x9415);
IkReal gconst5=(r21*x9415);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9420 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9420.valid){
continue;
}
IkReal x9417=((1.0)*(x9420.value));
IkReal x9418=x8252;
IkReal x9419=((1.0)*x9418);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9417)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9417)));
IkReal gconst4=(r20*x9419);
IkReal gconst5=(r21*x9419);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9424 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9424.valid){
continue;
}
IkReal x9421=((1.0)*(x9424.value));
IkReal x9422=x8252;
IkReal x9423=((1.0)*x9422);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9421)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9421)));
IkReal gconst4=(r20*x9423);
IkReal gconst5=(r21*x9423);
IkReal x9425=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9429=IKPowWithIntegerCheck(x9425,-1);
if(!x9429.valid){
continue;
}
IkReal x9426=x9429.value;
IkReal x9427=((1.0)*x9426);
IkReal x9428=((((-1.0)*x9427*(r10*r10)*(r20*r20)))+(((-1.0)*x9427*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x9426))+(((-1.0)*(r12*r12))));
j4eval[0]=x9428;
j4eval[1]=IKsign(x9428);
j4eval[2]=r12;
j4eval[3]=x9425;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9430=(gconst5*r11);
IkReal x9431=(gconst4*r10);
CheckValue<IkReal> x9432 = IKatan2WithCheck(IkReal((x9430+x9431)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9432.valid){
continue;
}
CheckValue<IkReal> x9433=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9431*x9431)))+(((-1.0)*(x9430*x9430)))+(((-1.0)*(r12*r12)))+(((-2.0)*x9430*x9431)))),-1);
if(!x9433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9432.value)+(((1.5707963267949)*(x9433.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9434=IKcos(j4);
IkReal x9435=IKsin(j4);
IkReal x9436=(gconst4*x9434);
IkReal x9437=(gconst5*x9434);
IkReal x9438=((1.0)*gconst4*x9435);
IkReal x9439=((1.0)*gconst5*x9435);
evalcond[0]=(((r11*x9437))+((r10*x9436))+((r12*x9435)));
evalcond[1]=(((r22*x9434))+(((-1.0)*r21*x9439))+(((-1.0)*r20*x9438)));
evalcond[2]=(((r02*x9434))+(((-1.0)*r01*x9439))+(((-1.0)*r00*x9438)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9438))+(((-1.0)*r11*x9439))+((r12*x9434)));
evalcond[4]=(((r22*x9435))+((sj1*sj2))+((r20*x9436))+((r21*x9437))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r02*x9435))+((r01*x9437))+((r00*x9436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9440 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r00))+((gconst5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9440.valid){
continue;
}
CheckValue<IkReal> x9441=IKPowWithIntegerCheck(IKsign((((gconst5*r20))+(((-1.0)*gconst4*r21)))),-1);
if(!x9441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9440.value)+(((1.5707963267949)*(x9441.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9442=IKcos(j4);
IkReal x9443=IKsin(j4);
IkReal x9444=(gconst4*x9442);
IkReal x9445=(gconst5*x9442);
IkReal x9446=((1.0)*gconst4*x9443);
IkReal x9447=((1.0)*gconst5*x9443);
evalcond[0]=(((r10*x9444))+((r12*x9443))+((r11*x9445)));
evalcond[1]=(((r22*x9442))+(((-1.0)*r20*x9446))+(((-1.0)*r21*x9447)));
evalcond[2]=((((-1.0)*r00*x9446))+(((-1.0)*r01*x9447))+((r02*x9442)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9446))+((r12*x9442))+(((-1.0)*r11*x9447)));
evalcond[4]=(((r22*x9443))+((sj1*sj2))+((r21*x9445))+((cj1*cj2))+((r20*x9444)));
evalcond[5]=(((r00*x9444))+((r01*x9445))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r02*x9443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9448=IKPowWithIntegerCheck(IKsign((((gconst4*r01))+(((-1.0)*gconst5*r00)))),-1);
if(!x9448.valid){
continue;
}
CheckValue<IkReal> x9449 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9448.value)))+(x9449.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9450=IKcos(j4);
IkReal x9451=IKsin(j4);
IkReal x9452=(gconst4*x9450);
IkReal x9453=(gconst5*x9450);
IkReal x9454=((1.0)*gconst4*x9451);
IkReal x9455=((1.0)*gconst5*x9451);
evalcond[0]=(((r10*x9452))+((r12*x9451))+((r11*x9453)));
evalcond[1]=(((r22*x9450))+(((-1.0)*r20*x9454))+(((-1.0)*r21*x9455)));
evalcond[2]=((((-1.0)*r00*x9454))+(((-1.0)*r01*x9455))+((r02*x9450)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9454))+((r12*x9450))+(((-1.0)*r11*x9455)));
evalcond[4]=(((r22*x9451))+((sj1*sj2))+((r21*x9453))+((cj1*cj2))+((r20*x9452)));
evalcond[5]=(((r00*x9452))+((r01*x9453))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r02*x9451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9459 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9459.valid){
continue;
}
IkReal x9456=((1.0)*(x9459.value));
IkReal x9457=x8252;
IkReal x9458=((1.0)*x9457);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9456)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9456)));
IkReal gconst4=(r20*x9458);
IkReal gconst5=(r21*x9458);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9463 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9463.valid){
continue;
}
IkReal x9460=((1.0)*(x9463.value));
IkReal x9461=x8252;
IkReal x9462=((1.0)*x9461);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9460)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9460)));
IkReal gconst4=(r20*x9462);
IkReal gconst5=(r21*x9462);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9467 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9467.valid){
continue;
}
IkReal x9464=((1.0)*(x9467.value));
IkReal x9465=x8252;
IkReal x9466=((1.0)*x9465);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9464)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9464)));
IkReal gconst4=(r20*x9466);
IkReal gconst5=(r21*x9466);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9468=(gconst5*r11);
IkReal x9469=(gconst4*r10);
CheckValue<IkReal> x9470 = IKatan2WithCheck(IkReal(((((-1.0)*x9469))+(((-1.0)*x9468)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9470.valid){
continue;
}
CheckValue<IkReal> x9471=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((2.0)*x9468*x9469))+(x9469*x9469)+(x9468*x9468))),-1);
if(!x9471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9470.value)+(((1.5707963267949)*(x9471.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9472=IKsin(j4);
IkReal x9473=IKcos(j4);
IkReal x9474=((1.0)*gconst5);
IkReal x9475=((1.0)*x9472);
IkReal x9476=(gconst4*x9475);
IkReal x9477=((1.0)*gconst4*x9473);
evalcond[0]=(((r22*x9473))+(((-1.0)*r21*x9472*x9474))+(((-1.0)*r20*x9476)));
evalcond[1]=((((-1.0)*r00*x9476))+(((-1.0)*r01*x9472*x9474))+((r02*x9473)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x9476))+((r12*x9473))+(((-1.0)*r11*x9472*x9474)));
evalcond[3]=((((-1.0)*r11*x9473*x9474))+(((-1.0)*r10*x9477))+(((-1.0)*r12*x9475)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x9475))+(((-1.0)*r21*x9473*x9474))+((cj1*cj2))+(((-1.0)*r20*x9477)));
evalcond[5]=((((-1.0)*r02*x9475))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r00*x9477))+(((-1.0)*r01*x9473*x9474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9478 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r00))+((gconst5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9478.valid){
continue;
}
CheckValue<IkReal> x9479=IKPowWithIntegerCheck(IKsign((((gconst5*r20))+(((-1.0)*gconst4*r21)))),-1);
if(!x9479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9478.value)+(((1.5707963267949)*(x9479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9480=IKsin(j4);
IkReal x9481=IKcos(j4);
IkReal x9482=((1.0)*gconst5);
IkReal x9483=((1.0)*x9480);
IkReal x9484=(gconst4*x9483);
IkReal x9485=((1.0)*gconst4*x9481);
evalcond[0]=((((-1.0)*r20*x9484))+(((-1.0)*r21*x9480*x9482))+((r22*x9481)));
evalcond[1]=((((-1.0)*r00*x9484))+((r02*x9481))+(((-1.0)*r01*x9480*x9482)));
evalcond[2]=((-1.0)+(((-1.0)*r11*x9480*x9482))+(((-1.0)*r10*x9484))+((r12*x9481)));
evalcond[3]=((((-1.0)*r11*x9481*x9482))+(((-1.0)*r10*x9485))+(((-1.0)*r12*x9483)));
evalcond[4]=((((-1.0)*r20*x9485))+((sj1*sj2))+(((-1.0)*r22*x9483))+(((-1.0)*r21*x9481*x9482))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r02*x9483))+(((-1.0)*cj2*sj1))+(((-1.0)*r00*x9485))+(((-1.0)*r01*x9481*x9482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9486=IKPowWithIntegerCheck(IKsign((((gconst4*r01))+(((-1.0)*gconst5*r00)))),-1);
if(!x9486.valid){
continue;
}
CheckValue<IkReal> x9487 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9486.value)))+(x9487.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9488=IKsin(j4);
IkReal x9489=IKcos(j4);
IkReal x9490=((1.0)*gconst5);
IkReal x9491=((1.0)*x9488);
IkReal x9492=(gconst4*x9491);
IkReal x9493=((1.0)*gconst4*x9489);
evalcond[0]=((((-1.0)*r21*x9488*x9490))+(((-1.0)*r20*x9492))+((r22*x9489)));
evalcond[1]=((((-1.0)*r01*x9488*x9490))+((r02*x9489))+(((-1.0)*r00*x9492)));
evalcond[2]=((-1.0)+((r12*x9489))+(((-1.0)*r11*x9488*x9490))+(((-1.0)*r10*x9492)));
evalcond[3]=((((-1.0)*r12*x9491))+(((-1.0)*r11*x9489*x9490))+(((-1.0)*r10*x9493)));
evalcond[4]=((((-1.0)*r22*x9491))+((sj1*sj2))+(((-1.0)*r21*x9489*x9490))+(((-1.0)*r20*x9493))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r02*x9491))+(((-1.0)*r01*x9489*x9490))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r00*x9493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9494=((-1.0)*px);
CheckValue<IkReal> x9496 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9496.valid){
continue;
}
IkReal x9495=((1.0)*(x9496.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9495)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9494);
rxp1_1=(px*r21);
rxp1_2=(r11*x9494);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9495)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x9497=((1.0)*r11*r21);
IkReal x9498=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x9498))+(((-1.0)*x9497)));
j4eval[1]=(((sj3*x9498))+((sj3*x9497)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9499=((-1.0)*px);
CheckValue<IkReal> x9501 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9501.valid){
continue;
}
IkReal x9500=((1.0)*(x9501.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9500)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9499);
rxp1_1=(px*r21);
rxp1_2=(r11*x9499);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9500)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x9502=((1.0)*cj3);
IkReal x9503=(r10*r20);
IkReal x9504=(r11*r21);
j4eval[0]=((((-1.0)*x9503))+(((-1.0)*x9504)));
j4eval[1]=((((-1.0)*x9502*x9503))+(((-1.0)*x9502*x9504)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9505=((-1.0)*px);
CheckValue<IkReal> x9507 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9507.valid){
continue;
}
IkReal x9506=((1.0)*(x9507.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9506)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9505);
rxp1_1=(px*r21);
rxp1_2=(r11*x9505);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9506)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x9508=((1.0)*sj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((r11*r21*x9508))+((r10*r20*x9508)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9509=IKPowWithIntegerCheck(r02,-1);
if(!x9509.valid){
continue;
}
CheckValue<IkReal> x9510=IKPowWithIntegerCheck(sj3,-1);
if(!x9510.valid){
continue;
}
CheckValue<IkReal> x9511=IKPowWithIntegerCheck((((gconst4*r10*sj3))+((gconst5*r11*sj3))),-1);
if(!x9511.valid){
continue;
}
if( IKabs(((x9509.value)*(x9510.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9511.value)*(((((-1.0)*cj3*gconst5*r10))+((cj3*gconst4*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9509.value)*(x9510.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x9511.value)*(((((-1.0)*cj3*gconst5*r10))+((cj3*gconst4*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9509.value)*(x9510.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x9511.value)*(((((-1.0)*cj3*gconst5*r10))+((cj3*gconst4*r11))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9512=IKsin(j4);
IkReal x9513=IKcos(j4);
IkReal x9514=(cj1*sj2);
IkReal x9515=((1.0)*gconst4);
IkReal x9516=(r21*sj3);
IkReal x9517=(sj1*sj2);
IkReal x9518=(gconst5*r10);
IkReal x9519=((1.0)*cj2);
IkReal x9520=(gconst5*r21);
IkReal x9521=(r11*sj3);
IkReal x9522=(gconst5*r20);
IkReal x9523=(sj1*x9519);
IkReal x9524=((1.0)*gconst5*r11);
IkReal x9525=(cj3*x9513);
IkReal x9526=((1.0)*x9512);
IkReal x9527=(gconst5*x9513);
IkReal x9528=(gconst4*sj3*x9513);
evalcond[0]=(r02*x9513);
evalcond[1]=(((r02*sj3*x9512))+x9514+(((-1.0)*x9523)));
evalcond[2]=((((-1.0)*r20*x9512*x9515))+(((-1.0)*x9520*x9526)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9512*x9515))+(((-1.0)*x9512*x9524)));
evalcond[4]=((((-1.0)*x9517))+(((-1.0)*cj1*x9519))+(((-1.0)*cj3*r02*x9526)));
evalcond[5]=(((x9521*x9527))+((r10*x9528))+(((-1.0)*cj3*r11*x9515))+((cj3*x9518)));
evalcond[6]=(((sj3*x9518))+(((-1.0)*r10*x9515*x9525))+(((-1.0)*x9515*x9521))+(((-1.0)*x9524*x9525)));
evalcond[7]=(((r20*x9528))+((x9516*x9527))+((cj3*x9522))+x9517+(((-1.0)*cj3*r21*x9515))+((cj1*cj2)));
evalcond[8]=((((-1.0)*x9515*x9516))+x9514+((sj3*x9522))+(((-1.0)*r20*x9515*x9525))+(((-1.0)*x9523))+(((-1.0)*x9520*x9525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9529=((1.0)*r10);
IkReal x9530=((1.0)*gconst5*r11);
CheckValue<IkReal> x9531=IKPowWithIntegerCheck(((((-1.0)*x9530))+(((-1.0)*gconst4*x9529))),-1);
if(!x9531.valid){
continue;
}
CheckValue<IkReal> x9532=IKPowWithIntegerCheck(((((-1.0)*cj3*x9530))+(((-1.0)*cj3*gconst4*x9529))),-1);
if(!x9532.valid){
continue;
}
if( IKabs(x9531.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9532.value)*(((((-1.0)*gconst5*sj3*x9529))+((gconst4*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9531.value)+IKsqr(((x9532.value)*(((((-1.0)*gconst5*sj3*x9529))+((gconst4*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9531.value, ((x9532.value)*(((((-1.0)*gconst5*sj3*x9529))+((gconst4*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9533=IKsin(j4);
IkReal x9534=IKcos(j4);
IkReal x9535=(cj1*sj2);
IkReal x9536=((1.0)*gconst4);
IkReal x9537=(r21*sj3);
IkReal x9538=(sj1*sj2);
IkReal x9539=(gconst5*r10);
IkReal x9540=((1.0)*cj2);
IkReal x9541=(gconst5*r21);
IkReal x9542=(r11*sj3);
IkReal x9543=(gconst5*r20);
IkReal x9544=(sj1*x9540);
IkReal x9545=((1.0)*gconst5*r11);
IkReal x9546=(cj3*x9534);
IkReal x9547=((1.0)*x9533);
IkReal x9548=(gconst5*x9534);
IkReal x9549=(gconst4*sj3*x9534);
evalcond[0]=(r02*x9534);
evalcond[1]=(((r02*sj3*x9533))+x9535+(((-1.0)*x9544)));
evalcond[2]=((((-1.0)*x9541*x9547))+(((-1.0)*r20*x9533*x9536)));
evalcond[3]=((-1.0)+(((-1.0)*x9533*x9545))+(((-1.0)*r10*x9533*x9536)));
evalcond[4]=((((-1.0)*cj3*r02*x9547))+(((-1.0)*x9538))+(((-1.0)*cj1*x9540)));
evalcond[5]=(((cj3*x9539))+(((-1.0)*cj3*r11*x9536))+((r10*x9549))+((x9542*x9548)));
evalcond[6]=((((-1.0)*x9536*x9542))+(((-1.0)*r10*x9536*x9546))+((sj3*x9539))+(((-1.0)*x9545*x9546)));
evalcond[7]=(((x9537*x9548))+((cj3*x9543))+((r20*x9549))+(((-1.0)*cj3*r21*x9536))+x9538+((cj1*cj2)));
evalcond[8]=((((-1.0)*x9536*x9537))+(((-1.0)*r20*x9536*x9546))+x9535+(((-1.0)*x9541*x9546))+((sj3*x9543))+(((-1.0)*x9544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9550=(gconst4*r10);
IkReal x9551=(gconst5*r11);
CheckValue<IkReal> x9552=IKPowWithIntegerCheck(((((-1.0)*x9550))+(((-1.0)*x9551))),-1);
if(!x9552.valid){
continue;
}
CheckValue<IkReal> x9553=IKPowWithIntegerCheck((((sj3*x9551))+((sj3*x9550))),-1);
if(!x9553.valid){
continue;
}
if( IKabs(x9552.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9553.value)*(((((-1.0)*cj3*gconst5*r10))+((cj3*gconst4*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9552.value)+IKsqr(((x9553.value)*(((((-1.0)*cj3*gconst5*r10))+((cj3*gconst4*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9552.value, ((x9553.value)*(((((-1.0)*cj3*gconst5*r10))+((cj3*gconst4*r11))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9554=IKsin(j4);
IkReal x9555=IKcos(j4);
IkReal x9556=(cj1*sj2);
IkReal x9557=((1.0)*gconst4);
IkReal x9558=(r21*sj3);
IkReal x9559=(sj1*sj2);
IkReal x9560=(gconst5*r10);
IkReal x9561=((1.0)*cj2);
IkReal x9562=(gconst5*r21);
IkReal x9563=(r11*sj3);
IkReal x9564=(gconst5*r20);
IkReal x9565=(sj1*x9561);
IkReal x9566=((1.0)*gconst5*r11);
IkReal x9567=(cj3*x9555);
IkReal x9568=((1.0)*x9554);
IkReal x9569=(gconst5*x9555);
IkReal x9570=(gconst4*sj3*x9555);
evalcond[0]=(r02*x9555);
evalcond[1]=(((r02*sj3*x9554))+(((-1.0)*x9565))+x9556);
evalcond[2]=((((-1.0)*r20*x9554*x9557))+(((-1.0)*x9562*x9568)));
evalcond[3]=((-1.0)+(((-1.0)*x9554*x9566))+(((-1.0)*r10*x9554*x9557)));
evalcond[4]=((((-1.0)*cj3*r02*x9568))+(((-1.0)*cj1*x9561))+(((-1.0)*x9559)));
evalcond[5]=(((x9563*x9569))+((cj3*x9560))+(((-1.0)*cj3*r11*x9557))+((r10*x9570)));
evalcond[6]=((((-1.0)*x9566*x9567))+((sj3*x9560))+(((-1.0)*x9557*x9563))+(((-1.0)*r10*x9557*x9567)));
evalcond[7]=(((x9558*x9569))+((cj3*x9564))+x9559+(((-1.0)*cj3*r21*x9557))+((cj1*cj2))+((r20*x9570)));
evalcond[8]=(((sj3*x9564))+(((-1.0)*x9565))+(((-1.0)*x9562*x9567))+x9556+(((-1.0)*r20*x9557*x9567))+(((-1.0)*x9557*x9558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9571=gconst4*gconst4;
IkReal x9572=gconst5*gconst5;
IkReal x9573=((1.0)*sj3);
IkReal x9574=(r10*r21);
IkReal x9575=(gconst4*gconst5);
IkReal x9576=(cj3*r10);
IkReal x9577=(r20*x9571);
IkReal x9578=((1.0)*cj3*r11);
CheckValue<IkReal> x9579 = IKatan2WithCheck(IkReal((((gconst5*r22*x9576))+(((-1.0)*gconst4*r22*x9578)))),IkReal(((((-1.0)*x9577*x9578))+((r20*x9575*x9576))+(((-1.0)*r21*x9575*x9578))+((cj3*x9572*x9574)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9579.valid){
continue;
}
CheckValue<IkReal> x9580=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*r21*x9572*x9573))+(((-1.0)*r10*x9573*x9577))+(((-1.0)*r11*r20*x9573*x9575))+(((-1.0)*x9573*x9574*x9575))+(((-1.0)*r12*r22*x9573)))),-1);
if(!x9580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9579.value)+(((1.5707963267949)*(x9580.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9581=IKsin(j4);
IkReal x9582=IKcos(j4);
IkReal x9583=(cj1*sj2);
IkReal x9584=((1.0)*gconst4);
IkReal x9585=(cj3*gconst5);
IkReal x9586=(gconst5*sj3);
IkReal x9587=(sj1*sj2);
IkReal x9588=((1.0)*cj2);
IkReal x9589=(sj1*x9588);
IkReal x9590=((1.0)*x9582);
IkReal x9591=(r12*x9581);
IkReal x9592=((1.0)*x9581);
IkReal x9593=(cj3*x9582);
IkReal x9594=(sj3*x9581);
IkReal x9595=(gconst4*sj3*x9582);
evalcond[0]=(((r22*x9582))+(((-1.0)*r20*x9581*x9584))+(((-1.0)*gconst5*r21*x9592)));
evalcond[1]=((((-1.0)*r00*x9581*x9584))+(((-1.0)*gconst5*r01*x9592))+((r02*x9582)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x9581*x9584))+(((-1.0)*gconst5*r11*x9592))+((r12*x9582)));
evalcond[3]=(((r10*x9585))+((r11*x9582*x9586))+((r10*x9595))+((sj3*x9591))+(((-1.0)*cj3*r11*x9584)));
evalcond[4]=((((-1.0)*cj3*x9591))+(((-1.0)*r11*x9585*x9590))+(((-1.0)*r10*x9584*x9593))+((r10*x9586))+(((-1.0)*r11*sj3*x9584)));
evalcond[5]=(((r20*x9595))+((r20*x9585))+((r21*x9582*x9586))+(((-1.0)*cj3*r21*x9584))+((r22*x9594))+x9587+((cj1*cj2)));
evalcond[6]=(((r00*x9585))+((r00*x9595))+x9583+(((-1.0)*x9589))+((r02*x9594))+((r01*x9582*x9586))+(((-1.0)*cj3*r01*x9584)));
evalcond[7]=(((r20*x9586))+(((-1.0)*cj3*r22*x9592))+(((-1.0)*r21*sj3*x9584))+(((-1.0)*r20*x9584*x9593))+x9583+(((-1.0)*x9589))+(((-1.0)*r21*x9585*x9590)));
evalcond[8]=((((-1.0)*r01*sj3*x9584))+(((-1.0)*r00*x9584*x9593))+((r00*x9586))+(((-1.0)*cj3*r02*x9592))+(((-1.0)*x9587))+(((-1.0)*r01*x9585*x9590))+(((-1.0)*cj1*x9588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9596 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r00))+((gconst5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9596.valid){
continue;
}
CheckValue<IkReal> x9597=IKPowWithIntegerCheck(IKsign((((gconst5*r20))+(((-1.0)*gconst4*r21)))),-1);
if(!x9597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9596.value)+(((1.5707963267949)*(x9597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9598=IKsin(j4);
IkReal x9599=IKcos(j4);
IkReal x9600=(cj1*sj2);
IkReal x9601=((1.0)*gconst4);
IkReal x9602=(cj3*gconst5);
IkReal x9603=(gconst5*sj3);
IkReal x9604=(sj1*sj2);
IkReal x9605=((1.0)*cj2);
IkReal x9606=(sj1*x9605);
IkReal x9607=((1.0)*x9599);
IkReal x9608=(r12*x9598);
IkReal x9609=((1.0)*x9598);
IkReal x9610=(cj3*x9599);
IkReal x9611=(sj3*x9598);
IkReal x9612=(gconst4*sj3*x9599);
evalcond[0]=((((-1.0)*r20*x9598*x9601))+(((-1.0)*gconst5*r21*x9609))+((r22*x9599)));
evalcond[1]=((((-1.0)*gconst5*r01*x9609))+(((-1.0)*r00*x9598*x9601))+((r02*x9599)));
evalcond[2]=((-1.0)+(((-1.0)*gconst5*r11*x9609))+((r12*x9599))+(((-1.0)*r10*x9598*x9601)));
evalcond[3]=(((sj3*x9608))+((r10*x9612))+((r10*x9602))+(((-1.0)*cj3*r11*x9601))+((r11*x9599*x9603)));
evalcond[4]=((((-1.0)*r11*sj3*x9601))+(((-1.0)*r11*x9602*x9607))+((r10*x9603))+(((-1.0)*r10*x9601*x9610))+(((-1.0)*cj3*x9608)));
evalcond[5]=(((r20*x9612))+(((-1.0)*cj3*r21*x9601))+((r22*x9611))+((r21*x9599*x9603))+((r20*x9602))+x9604+((cj1*cj2)));
evalcond[6]=(((r00*x9612))+(((-1.0)*x9606))+((r01*x9599*x9603))+(((-1.0)*cj3*r01*x9601))+((r00*x9602))+((r02*x9611))+x9600);
evalcond[7]=((((-1.0)*x9606))+(((-1.0)*r21*x9602*x9607))+((r20*x9603))+x9600+(((-1.0)*cj3*r22*x9609))+(((-1.0)*r21*sj3*x9601))+(((-1.0)*r20*x9601*x9610)));
evalcond[8]=((((-1.0)*cj1*x9605))+(((-1.0)*r00*x9601*x9610))+(((-1.0)*r01*sj3*x9601))+(((-1.0)*cj3*r02*x9609))+((r00*x9603))+(((-1.0)*x9604))+(((-1.0)*r01*x9602*x9607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9613=IKPowWithIntegerCheck(IKsign((((gconst4*r01))+(((-1.0)*gconst5*r00)))),-1);
if(!x9613.valid){
continue;
}
CheckValue<IkReal> x9614 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r20))+((gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9613.value)))+(x9614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9615=IKsin(j4);
IkReal x9616=IKcos(j4);
IkReal x9617=(cj1*sj2);
IkReal x9618=((1.0)*gconst4);
IkReal x9619=(cj3*gconst5);
IkReal x9620=(gconst5*sj3);
IkReal x9621=(sj1*sj2);
IkReal x9622=((1.0)*cj2);
IkReal x9623=(sj1*x9622);
IkReal x9624=((1.0)*x9616);
IkReal x9625=(r12*x9615);
IkReal x9626=((1.0)*x9615);
IkReal x9627=(cj3*x9616);
IkReal x9628=(sj3*x9615);
IkReal x9629=(gconst4*sj3*x9616);
evalcond[0]=((((-1.0)*gconst5*r21*x9626))+((r22*x9616))+(((-1.0)*r20*x9615*x9618)));
evalcond[1]=(((r02*x9616))+(((-1.0)*gconst5*r01*x9626))+(((-1.0)*r00*x9615*x9618)));
evalcond[2]=((-1.0)+(((-1.0)*gconst5*r11*x9626))+((r12*x9616))+(((-1.0)*r10*x9615*x9618)));
evalcond[3]=(((sj3*x9625))+((r10*x9629))+(((-1.0)*cj3*r11*x9618))+((r10*x9619))+((r11*x9616*x9620)));
evalcond[4]=((((-1.0)*cj3*x9625))+((r10*x9620))+(((-1.0)*r10*x9618*x9627))+(((-1.0)*r11*sj3*x9618))+(((-1.0)*r11*x9619*x9624)));
evalcond[5]=(((r20*x9619))+((r20*x9629))+((r21*x9616*x9620))+((r22*x9628))+x9621+(((-1.0)*cj3*r21*x9618))+((cj1*cj2)));
evalcond[6]=(((r00*x9629))+((r00*x9619))+((r02*x9628))+x9617+(((-1.0)*cj3*r01*x9618))+((r01*x9616*x9620))+(((-1.0)*x9623)));
evalcond[7]=((((-1.0)*r20*x9618*x9627))+((r20*x9620))+x9617+(((-1.0)*r21*x9619*x9624))+(((-1.0)*r21*sj3*x9618))+(((-1.0)*x9623))+(((-1.0)*cj3*r22*x9626)));
evalcond[8]=(((r00*x9620))+(((-1.0)*r00*x9618*x9627))+(((-1.0)*r01*sj3*x9618))+(((-1.0)*x9621))+(((-1.0)*r01*x9619*x9624))+(((-1.0)*cj1*x9622))+(((-1.0)*cj3*r02*x9626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9630=((-1.0)*r21);
CheckValue<IkReal> x9632 = IKatan2WithCheck(IkReal(r20),IkReal(x9630),IKFAST_ATAN2_MAGTHRESH);
if(!x9632.valid){
continue;
}
IkReal x9631=((1.0)*(x9632.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9631)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x9630);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9631)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9633=((-1.0)*r21);
CheckValue<IkReal> x9635 = IKatan2WithCheck(IkReal(r20),IkReal(x9633),IKFAST_ATAN2_MAGTHRESH);
if(!x9635.valid){
continue;
}
IkReal x9634=((1.0)*(x9635.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9634)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x9633);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9634)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x9636=((1.0)*sj3);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=((((-1.0)*x9636*(r00*r00)))+x9636+((x9636*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9637=((-1.0)*r21);
CheckValue<IkReal> x9639 = IKatan2WithCheck(IkReal(r20),IkReal(x9637),IKFAST_ATAN2_MAGTHRESH);
if(!x9639.valid){
continue;
}
IkReal x9638=((1.0)*(x9639.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9638)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x9637);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9638)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9640=((-1.0)*r21);
CheckValue<IkReal> x9642 = IKatan2WithCheck(IkReal(r20),IkReal(x9640),IKFAST_ATAN2_MAGTHRESH);
if(!x9642.valid){
continue;
}
IkReal x9641=((1.0)*(x9642.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9641)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x9640);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9641)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9643=((-1.0)*r21);
CheckValue<IkReal> x9645 = IKatan2WithCheck(IkReal(r20),IkReal(x9643),IKFAST_ATAN2_MAGTHRESH);
if(!x9645.valid){
continue;
}
IkReal x9644=((1.0)*(x9645.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9644)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x9643);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9644)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9646=((-1.0)*r21);
CheckValue<IkReal> x9648 = IKatan2WithCheck(IkReal(r20),IkReal(x9646),IKFAST_ATAN2_MAGTHRESH);
if(!x9648.valid){
continue;
}
IkReal x9647=((1.0)*(x9648.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9647)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x9646);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9647)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9651=IKPowWithIntegerCheck(((((-1.0)*gconst4*r00))+(((-1.0)*gconst5*r01))),-1);
if(!x9651.valid){
continue;
}
IkReal x9649=x9651.value;
IkReal x9650=((1.0)*sj0*x9649);
cj4array[0]=((((-1.0)*cj1*cj2*x9650))+(((-1.0)*sj1*sj2*x9650)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9652=IKsin(j4);
IkReal x9653=IKcos(j4);
IkReal x9654=((1.0)*gconst5);
IkReal x9655=((1.0)*gconst4*r20);
evalcond[0]=((-1.0)*r12*x9652);
evalcond[1]=(sj0+((r12*x9653)));
evalcond[2]=((((-1.0)*r21*x9652*x9654))+(((-1.0)*x9652*x9655)));
evalcond[3]=((((-1.0)*r01*x9652*x9654))+(((-1.0)*gconst4*r00*x9652)));
evalcond[4]=((((-1.0)*r21*x9653*x9654))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x9653*x9655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9657=IKPowWithIntegerCheck(((((-1.0)*gconst5*r21))+(((-1.0)*gconst4*r20))),-1);
if(!x9657.valid){
continue;
}
IkReal x9656=x9657.value;
cj4array[0]=((((-1.0)*cj1*sj2*x9656))+((cj2*sj1*x9656)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9658=IKsin(j4);
IkReal x9659=IKcos(j4);
IkReal x9660=((1.0)*gconst4);
IkReal x9661=((1.0)*gconst5*x9658);
evalcond[0]=((-1.0)*r12*x9658);
evalcond[1]=(sj0+((r12*x9659)));
evalcond[2]=((((-1.0)*r20*x9658*x9660))+(((-1.0)*r21*x9661)));
evalcond[3]=((((-1.0)*r00*x9658*x9660))+(((-1.0)*r01*x9661)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r00*x9659*x9660))+((sj0*sj1*sj2))+(((-1.0)*gconst5*r01*x9659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9662=IKPowWithIntegerCheck(r12,-1);
if(!x9662.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9662.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9663=IKsin(j4);
IkReal x9664=IKcos(j4);
IkReal x9665=(gconst5*r01);
IkReal x9666=(gconst5*r21);
IkReal x9667=((1.0)*x9663);
IkReal x9668=((1.0)*x9664);
IkReal x9669=(gconst4*x9668);
evalcond[0]=((-1.0)*r12*x9663);
evalcond[1]=((((-1.0)*gconst4*r20*x9667))+(((-1.0)*x9666*x9667)));
evalcond[2]=((((-1.0)*x9665*x9667))+(((-1.0)*gconst4*r00*x9667)));
evalcond[3]=((((-1.0)*r20*x9669))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x9666*x9668)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r00*x9669))+(((-1.0)*x9665*x9668))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9670=((-1.0)*r21);
CheckValue<IkReal> x9672 = IKatan2WithCheck(IkReal(r20),IkReal(x9670),IKFAST_ATAN2_MAGTHRESH);
if(!x9672.valid){
continue;
}
IkReal x9671=((1.0)*(x9672.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9671)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x9670);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9671)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9673=((-1.0)*r21);
CheckValue<IkReal> x9675 = IKatan2WithCheck(IkReal(r20),IkReal(x9673),IKFAST_ATAN2_MAGTHRESH);
if(!x9675.valid){
continue;
}
IkReal x9674=((1.0)*(x9675.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9674)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x9673);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9674)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9676=((-1.0)*r21);
CheckValue<IkReal> x9678 = IKatan2WithCheck(IkReal(r20),IkReal(x9676),IKFAST_ATAN2_MAGTHRESH);
if(!x9678.valid){
continue;
}
IkReal x9677=((1.0)*(x9678.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9677)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x9676);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9677)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9681=IKPowWithIntegerCheck((((gconst4*r00))+((gconst5*r01))),-1);
if(!x9681.valid){
continue;
}
IkReal x9679=x9681.value;
IkReal x9680=((1.0)*sj0*x9679);
cj4array[0]=((((-1.0)*cj1*cj2*x9680))+(((-1.0)*sj1*sj2*x9680)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9682=IKsin(j4);
IkReal x9683=IKcos(j4);
IkReal x9684=(gconst4*r20);
IkReal x9685=(gconst5*r21);
IkReal x9686=((1.0)*x9682);
evalcond[0]=(r12*x9682);
evalcond[1]=(sj0+((r12*x9683)));
evalcond[2]=((((-1.0)*x9685*x9686))+(((-1.0)*x9684*x9686)));
evalcond[3]=((((-1.0)*gconst5*r01*x9686))+(((-1.0)*gconst4*r00*x9686)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x9683*x9685))+((x9683*x9684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9688=IKPowWithIntegerCheck((((gconst4*r20))+((gconst5*r21))),-1);
if(!x9688.valid){
continue;
}
IkReal x9687=x9688.value;
cj4array[0]=(((cj2*sj1*x9687))+(((-1.0)*cj1*sj2*x9687)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9689=IKsin(j4);
IkReal x9690=IKcos(j4);
IkReal x9691=(gconst5*r01);
IkReal x9692=(gconst4*r00);
IkReal x9693=((1.0)*x9689);
evalcond[0]=(r12*x9689);
evalcond[1]=(sj0+((r12*x9690)));
evalcond[2]=((((-1.0)*gconst5*r21*x9693))+(((-1.0)*gconst4*r20*x9693)));
evalcond[3]=((((-1.0)*x9692*x9693))+(((-1.0)*x9691*x9693)));
evalcond[4]=(((cj1*cj2*sj0))+((x9690*x9692))+((x9690*x9691))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9694=IKPowWithIntegerCheck(r12,-1);
if(!x9694.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9694.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9695=IKsin(j4);
IkReal x9696=IKcos(j4);
IkReal x9697=(gconst4*r20);
IkReal x9698=(gconst5*r01);
IkReal x9699=(gconst5*r21);
IkReal x9700=(gconst4*r00);
IkReal x9701=((1.0)*x9695);
evalcond[0]=(r12*x9695);
evalcond[1]=((((-1.0)*x9699*x9701))+(((-1.0)*x9697*x9701)));
evalcond[2]=((((-1.0)*x9700*x9701))+(((-1.0)*x9698*x9701)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x9696*x9699))+((x9696*x9697)));
evalcond[4]=(((cj1*cj2*sj0))+((x9696*x9700))+((x9696*x9698))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9703=IKPowWithIntegerCheck(r12,-1);
if(!x9703.valid){
continue;
}
IkReal x9702=x9703.value;
CheckValue<IkReal> x9704=IKPowWithIntegerCheck(sj3,-1);
if(!x9704.valid){
continue;
}
if( IKabs((x9702*(x9704.value)*(((((-1.0)*cj0*cj1*sj2))+((cj0*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x9702)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9702*(x9704.value)*(((((-1.0)*cj0*cj1*sj2))+((cj0*cj2*sj1))))))+IKsqr(((-1.0)*sj0*x9702))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9702*(x9704.value)*(((((-1.0)*cj0*cj1*sj2))+((cj0*cj2*sj1))))), ((-1.0)*sj0*x9702));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9705=IKsin(j4);
IkReal x9706=IKcos(j4);
IkReal x9707=((1.0)*gconst4);
IkReal x9708=(cj1*cj2);
IkReal x9709=((1.0)*cj0);
IkReal x9710=(cj3*r01);
IkReal x9711=(cj2*sj1);
IkReal x9712=(r21*sj3);
IkReal x9713=(sj1*sj2);
IkReal x9714=(cj3*r00);
IkReal x9715=((1.0)*gconst5);
IkReal x9716=(cj3*r20);
IkReal x9717=(cj1*sj2);
IkReal x9718=(cj3*r21);
IkReal x9719=(gconst5*sj3);
IkReal x9720=(r12*x9705);
IkReal x9721=(sj3*x9706);
evalcond[0]=(sj0+((r12*x9706)));
evalcond[1]=((((-1.0)*r21*x9705*x9715))+(((-1.0)*r20*x9705*x9707)));
evalcond[2]=(cj0+(((-1.0)*r00*x9705*x9707))+(((-1.0)*r01*x9705*x9715)));
evalcond[3]=((((-1.0)*x9709*x9711))+((sj3*x9720))+((cj0*x9717)));
evalcond[4]=((((-1.0)*x9709*x9713))+(((-1.0)*x9708*x9709))+(((-1.0)*cj3*x9720)));
evalcond[5]=((((-1.0)*x9707*x9718))+((gconst5*x9706*x9712))+x9713+x9708+((gconst4*r20*x9721))+((gconst5*x9716)));
evalcond[6]=((((-1.0)*x9706*x9707*x9716))+(((-1.0)*x9707*x9712))+x9717+((r20*x9719))+(((-1.0)*x9706*x9715*x9718))+(((-1.0)*x9711)));
evalcond[7]=((((-1.0)*sj0*x9717))+(((-1.0)*x9707*x9710))+((gconst4*r00*x9721))+((sj0*x9711))+((gconst5*x9714))+((r01*x9706*x9719)));
evalcond[8]=((((-1.0)*x9706*x9707*x9714))+(((-1.0)*x9706*x9710*x9715))+((sj0*x9708))+(((-1.0)*r01*sj3*x9707))+((sj0*x9713))+((r00*x9719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9722=((1.0)*gconst5);
CheckValue<IkReal> x9723=IKPowWithIntegerCheck(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9722))),-1);
if(!x9723.valid){
continue;
}
CheckValue<IkReal> x9724=IKPowWithIntegerCheck((((gconst5*r21*sj3))+((gconst4*r20*sj3))),-1);
if(!x9724.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9723.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9724.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj3*r20*x9722))+(((-1.0)*cj1*cj2))+((cj3*gconst4*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9723.value)))+IKsqr(((x9724.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj3*r20*x9722))+(((-1.0)*cj1*cj2))+((cj3*gconst4*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9723.value)), ((x9724.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj3*r20*x9722))+(((-1.0)*cj1*cj2))+((cj3*gconst4*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9725=IKsin(j4);
IkReal x9726=IKcos(j4);
IkReal x9727=((1.0)*gconst4);
IkReal x9728=(cj1*cj2);
IkReal x9729=((1.0)*cj0);
IkReal x9730=(cj3*r01);
IkReal x9731=(cj2*sj1);
IkReal x9732=(r21*sj3);
IkReal x9733=(sj1*sj2);
IkReal x9734=(cj3*r00);
IkReal x9735=((1.0)*gconst5);
IkReal x9736=(cj3*r20);
IkReal x9737=(cj1*sj2);
IkReal x9738=(cj3*r21);
IkReal x9739=(gconst5*sj3);
IkReal x9740=(r12*x9725);
IkReal x9741=(sj3*x9726);
evalcond[0]=(sj0+((r12*x9726)));
evalcond[1]=((((-1.0)*r21*x9725*x9735))+(((-1.0)*r20*x9725*x9727)));
evalcond[2]=((((-1.0)*r01*x9725*x9735))+cj0+(((-1.0)*r00*x9725*x9727)));
evalcond[3]=((((-1.0)*x9729*x9731))+((sj3*x9740))+((cj0*x9737)));
evalcond[4]=((((-1.0)*x9729*x9733))+(((-1.0)*cj3*x9740))+(((-1.0)*x9728*x9729)));
evalcond[5]=(x9728+x9733+((gconst5*x9736))+((gconst5*x9726*x9732))+(((-1.0)*x9727*x9738))+((gconst4*r20*x9741)));
evalcond[6]=((((-1.0)*x9726*x9727*x9736))+((r20*x9739))+x9737+(((-1.0)*x9727*x9732))+(((-1.0)*x9731))+(((-1.0)*x9726*x9735*x9738)));
evalcond[7]=(((r01*x9726*x9739))+(((-1.0)*sj0*x9737))+((gconst4*r00*x9741))+((gconst5*x9734))+(((-1.0)*x9727*x9730))+((sj0*x9731)));
evalcond[8]=((((-1.0)*x9726*x9727*x9734))+(((-1.0)*x9726*x9730*x9735))+((sj0*x9733))+(((-1.0)*r01*sj3*x9727))+((sj0*x9728))+((r00*x9739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9742=IKPowWithIntegerCheck(((((-1.0)*gconst4*r00))+(((-1.0)*gconst5*r01))),-1);
if(!x9742.valid){
continue;
}
CheckValue<IkReal> x9743=IKPowWithIntegerCheck(r12,-1);
if(!x9743.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9742.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x9743.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9742.value)))+IKsqr(((-1.0)*sj0*(x9743.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9742.value)), ((-1.0)*sj0*(x9743.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9744=IKsin(j4);
IkReal x9745=IKcos(j4);
IkReal x9746=((1.0)*gconst4);
IkReal x9747=(cj1*cj2);
IkReal x9748=((1.0)*cj0);
IkReal x9749=(cj3*r01);
IkReal x9750=(cj2*sj1);
IkReal x9751=(r21*sj3);
IkReal x9752=(sj1*sj2);
IkReal x9753=(cj3*r00);
IkReal x9754=((1.0)*gconst5);
IkReal x9755=(cj3*r20);
IkReal x9756=(cj1*sj2);
IkReal x9757=(cj3*r21);
IkReal x9758=(gconst5*sj3);
IkReal x9759=(r12*x9744);
IkReal x9760=(sj3*x9745);
evalcond[0]=(sj0+((r12*x9745)));
evalcond[1]=((((-1.0)*r20*x9744*x9746))+(((-1.0)*r21*x9744*x9754)));
evalcond[2]=(cj0+(((-1.0)*r01*x9744*x9754))+(((-1.0)*r00*x9744*x9746)));
evalcond[3]=((((-1.0)*x9748*x9750))+((cj0*x9756))+((sj3*x9759)));
evalcond[4]=((((-1.0)*x9747*x9748))+(((-1.0)*x9748*x9752))+(((-1.0)*cj3*x9759)));
evalcond[5]=((((-1.0)*x9746*x9757))+((gconst5*x9755))+((gconst4*r20*x9760))+((gconst5*x9745*x9751))+x9752+x9747);
evalcond[6]=((((-1.0)*x9746*x9751))+(((-1.0)*x9750))+x9756+(((-1.0)*x9745*x9746*x9755))+((r20*x9758))+(((-1.0)*x9745*x9754*x9757)));
evalcond[7]=(((gconst5*x9753))+(((-1.0)*x9746*x9749))+((r01*x9745*x9758))+((sj0*x9750))+((gconst4*r00*x9760))+(((-1.0)*sj0*x9756)));
evalcond[8]=(((sj0*x9747))+((r00*x9758))+(((-1.0)*r01*sj3*x9746))+((sj0*x9752))+(((-1.0)*x9745*x9749*x9754))+(((-1.0)*x9745*x9746*x9753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9761=((1.0)*sj0);
CheckValue<IkReal> x9762 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x9761))+((cj0*r12)))),IkReal(((((-1.0)*gconst4*r00*x9761))+((cj0*gconst4*r10))+((cj0*gconst5*r11))+(((-1.0)*gconst5*r01*x9761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9762.valid){
continue;
}
CheckValue<IkReal> x9763=IKPowWithIntegerCheck(IKsign((((gconst5*r20))+(((-1.0)*gconst4*r21)))),-1);
if(!x9763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9762.value)+(((1.5707963267949)*(x9763.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9764=IKsin(j4);
IkReal x9765=IKcos(j4);
IkReal x9766=((1.0)*gconst4);
IkReal x9767=(cj2*sj0);
IkReal x9768=(cj3*gconst5);
IkReal x9769=(gconst5*sj3);
IkReal x9770=(sj1*sj2);
IkReal x9771=((1.0)*cj0);
IkReal x9772=(cj1*cj2);
IkReal x9773=(cj1*sj2);
IkReal x9774=((1.0)*x9765);
IkReal x9775=(r12*x9764);
IkReal x9776=((1.0)*cj2*sj1);
IkReal x9777=((1.0)*x9764);
IkReal x9778=(cj3*x9765);
IkReal x9779=(sj3*x9764);
IkReal x9780=(gconst4*sj3*x9765);
evalcond[0]=(((r22*x9765))+(((-1.0)*r20*x9764*x9766))+(((-1.0)*gconst5*r21*x9777)));
evalcond[1]=(cj0+(((-1.0)*gconst5*r01*x9777))+((r02*x9765))+(((-1.0)*r00*x9764*x9766)));
evalcond[2]=(((r12*x9765))+sj0+(((-1.0)*gconst5*r11*x9777))+(((-1.0)*r10*x9764*x9766)));
evalcond[3]=(((r22*x9779))+(((-1.0)*cj3*r21*x9766))+x9770+x9772+((r20*x9780))+((r21*x9765*x9769))+((r20*x9768)));
evalcond[4]=(((r00*x9780))+((r00*x9768))+(((-1.0)*cj3*r01*x9766))+((r02*x9779))+((sj1*x9767))+((r01*x9765*x9769))+(((-1.0)*sj0*x9773)));
evalcond[5]=((((-1.0)*cj3*r11*x9766))+((r10*x9768))+(((-1.0)*cj2*sj1*x9771))+((r11*x9765*x9769))+((r10*x9780))+((sj3*x9775))+((cj0*x9773)));
evalcond[6]=(x9773+(((-1.0)*cj3*r22*x9777))+(((-1.0)*r21*sj3*x9766))+((r20*x9769))+(((-1.0)*r21*x9768*x9774))+(((-1.0)*r20*x9766*x9778))+(((-1.0)*x9776)));
evalcond[7]=(((r00*x9769))+(((-1.0)*r00*x9766*x9778))+((cj1*x9767))+(((-1.0)*r01*x9768*x9774))+(((-1.0)*r01*sj3*x9766))+((sj0*x9770))+(((-1.0)*cj3*r02*x9777)));
evalcond[8]=((((-1.0)*r11*sj3*x9766))+((r10*x9769))+(((-1.0)*r11*x9768*x9774))+(((-1.0)*x9771*x9772))+(((-1.0)*r10*x9766*x9778))+(((-1.0)*cj3*x9775))+(((-1.0)*x9770*x9771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9781 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst5*r21*sj0))+((gconst4*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9781.valid){
continue;
}
CheckValue<IkReal> x9782=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r01))+((gconst5*r00)))),-1);
if(!x9782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9781.value)+(((1.5707963267949)*(x9782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9783=IKsin(j4);
IkReal x9784=IKcos(j4);
IkReal x9785=((1.0)*gconst4);
IkReal x9786=(cj2*sj0);
IkReal x9787=(cj3*gconst5);
IkReal x9788=(gconst5*sj3);
IkReal x9789=(sj1*sj2);
IkReal x9790=((1.0)*cj0);
IkReal x9791=(cj1*cj2);
IkReal x9792=(cj1*sj2);
IkReal x9793=((1.0)*x9784);
IkReal x9794=(r12*x9783);
IkReal x9795=((1.0)*cj2*sj1);
IkReal x9796=((1.0)*x9783);
IkReal x9797=(cj3*x9784);
IkReal x9798=(sj3*x9783);
IkReal x9799=(gconst4*sj3*x9784);
evalcond[0]=((((-1.0)*r20*x9783*x9785))+((r22*x9784))+(((-1.0)*gconst5*r21*x9796)));
evalcond[1]=((((-1.0)*r00*x9783*x9785))+cj0+(((-1.0)*gconst5*r01*x9796))+((r02*x9784)));
evalcond[2]=(sj0+(((-1.0)*gconst5*r11*x9796))+(((-1.0)*r10*x9783*x9785))+((r12*x9784)));
evalcond[3]=(((r20*x9799))+((r21*x9784*x9788))+x9791+x9789+((r20*x9787))+((r22*x9798))+(((-1.0)*cj3*r21*x9785)));
evalcond[4]=(((r00*x9787))+((sj1*x9786))+((r02*x9798))+((r01*x9784*x9788))+(((-1.0)*cj3*r01*x9785))+((r00*x9799))+(((-1.0)*sj0*x9792)));
evalcond[5]=(((sj3*x9794))+((r10*x9799))+((r10*x9787))+((r11*x9784*x9788))+(((-1.0)*cj2*sj1*x9790))+((cj0*x9792))+(((-1.0)*cj3*r11*x9785)));
evalcond[6]=((((-1.0)*r20*x9785*x9797))+(((-1.0)*r21*sj3*x9785))+(((-1.0)*x9795))+(((-1.0)*cj3*r22*x9796))+x9792+(((-1.0)*r21*x9787*x9793))+((r20*x9788)));
evalcond[7]=(((r00*x9788))+(((-1.0)*r01*sj3*x9785))+((sj0*x9789))+(((-1.0)*cj3*r02*x9796))+(((-1.0)*r01*x9787*x9793))+(((-1.0)*r00*x9785*x9797))+((cj1*x9786)));
evalcond[8]=((((-1.0)*r11*sj3*x9785))+(((-1.0)*x9790*x9791))+(((-1.0)*x9789*x9790))+(((-1.0)*r10*x9785*x9797))+(((-1.0)*cj3*x9794))+((r10*x9788))+(((-1.0)*r11*x9787*x9793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9800 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst4*r20))+((cj0*gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9800.valid){
continue;
}
CheckValue<IkReal> x9801=IKPowWithIntegerCheck(IKsign((((gconst4*r11))+(((-1.0)*gconst5*r10)))),-1);
if(!x9801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9800.value)+(((1.5707963267949)*(x9801.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9802=IKsin(j4);
IkReal x9803=IKcos(j4);
IkReal x9804=((1.0)*gconst4);
IkReal x9805=(cj2*sj0);
IkReal x9806=(cj3*gconst5);
IkReal x9807=(gconst5*sj3);
IkReal x9808=(sj1*sj2);
IkReal x9809=((1.0)*cj0);
IkReal x9810=(cj1*cj2);
IkReal x9811=(cj1*sj2);
IkReal x9812=((1.0)*x9803);
IkReal x9813=(r12*x9802);
IkReal x9814=((1.0)*cj2*sj1);
IkReal x9815=((1.0)*x9802);
IkReal x9816=(cj3*x9803);
IkReal x9817=(sj3*x9802);
IkReal x9818=(gconst4*sj3*x9803);
evalcond[0]=((((-1.0)*gconst5*r21*x9815))+((r22*x9803))+(((-1.0)*r20*x9802*x9804)));
evalcond[1]=((((-1.0)*r00*x9802*x9804))+cj0+((r02*x9803))+(((-1.0)*gconst5*r01*x9815)));
evalcond[2]=(((r12*x9803))+sj0+(((-1.0)*gconst5*r11*x9815))+(((-1.0)*r10*x9802*x9804)));
evalcond[3]=(((r21*x9803*x9807))+((r22*x9817))+(((-1.0)*cj3*r21*x9804))+((r20*x9806))+x9810+x9808+((r20*x9818)));
evalcond[4]=(((r00*x9806))+(((-1.0)*cj3*r01*x9804))+((sj1*x9805))+((r02*x9817))+(((-1.0)*sj0*x9811))+((r01*x9803*x9807))+((r00*x9818)));
evalcond[5]=(((r10*x9806))+((r11*x9803*x9807))+((sj3*x9813))+(((-1.0)*cj3*r11*x9804))+((cj0*x9811))+((r10*x9818))+(((-1.0)*cj2*sj1*x9809)));
evalcond[6]=((((-1.0)*r21*x9806*x9812))+(((-1.0)*x9814))+(((-1.0)*cj3*r22*x9815))+(((-1.0)*r20*x9804*x9816))+(((-1.0)*r21*sj3*x9804))+((r20*x9807))+x9811);
evalcond[7]=(((r00*x9807))+(((-1.0)*r01*sj3*x9804))+(((-1.0)*r01*x9806*x9812))+((sj0*x9808))+((cj1*x9805))+(((-1.0)*cj3*r02*x9815))+(((-1.0)*r00*x9804*x9816)));
evalcond[8]=(((r10*x9807))+(((-1.0)*x9809*x9810))+(((-1.0)*x9808*x9809))+(((-1.0)*r10*x9804*x9816))+(((-1.0)*r11*sj3*x9804))+(((-1.0)*r11*x9806*x9812))+(((-1.0)*cj3*x9813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9821 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x9821)==0){
continue;
}
IkReal x9819=pow(x9821,-0.5);
IkReal x9820=((-1.0)*x9819);
CheckValue<IkReal> x9822 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x9822.valid){
continue;
}
IkReal gconst6=((-1.0)*(x9822.value));
IkReal gconst7=(r00*x9820);
IkReal gconst8=(r01*x9820);
CheckValue<IkReal> x9823 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x9823.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x9823.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x9827 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x9827.valid){
continue;
}
IkReal x9824=((-1.0)*(x9827.value));
IkReal x9825=x9819;
IkReal x9826=((-1.0)*x9825);
sj5=gconst7;
cj5=gconst8;
j5=x9824;
IkReal gconst6=x9824;
IkReal gconst7=(r00*x9826);
IkReal gconst8=(r01*x9826);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9828=((1.0)*sj0);
CheckValue<IkReal> x9829=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r21))+((gconst8*r20)))),-1);
if(!x9829.valid){
continue;
}
CheckValue<IkReal> x9830 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x9828))+((cj0*r12)))),IkReal((((cj0*gconst8*r11))+((cj0*gconst7*r10))+(((-1.0)*gconst8*r01*x9828))+(((-1.0)*gconst7*r00*x9828)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9829.value)))+(x9830.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9831=IKsin(j4);
IkReal x9832=IKcos(j4);
IkReal x9833=(cj2*sj0);
IkReal x9834=((1.0)*r11);
IkReal x9835=(sj1*sj2);
IkReal x9836=(r10*sj3);
IkReal x9837=(cj3*gconst7);
IkReal x9838=((1.0)*cj0);
IkReal x9839=((1.0)*r01);
IkReal x9840=(gconst7*r10);
IkReal x9841=(cj2*sj1);
IkReal x9842=(cj1*cj2);
IkReal x9843=(gconst7*r20);
IkReal x9844=(gconst8*r00);
IkReal x9845=(gconst8*r20);
IkReal x9846=(gconst7*sj3);
IkReal x9847=(cj1*sj2);
IkReal x9848=((1.0)*r21);
IkReal x9849=((1.0)*gconst7*r00);
IkReal x9850=(cj3*x9832);
IkReal x9851=(gconst7*x9832);
IkReal x9852=(r12*x9831);
IkReal x9853=((1.0)*x9831);
IkReal x9854=(sj3*x9831);
IkReal x9855=(gconst8*x9831);
IkReal x9856=(gconst8*sj3*x9832);
evalcond[0]=((((-1.0)*x9848*x9855))+((r22*x9832))+(((-1.0)*x9843*x9853)));
evalcond[1]=(cj0+(((-1.0)*x9831*x9849))+(((-1.0)*x9839*x9855))+((r02*x9832)));
evalcond[2]=((((-1.0)*x9840*x9853))+sj0+((r12*x9832))+(((-1.0)*x9834*x9855)));
evalcond[3]=(((r21*x9856))+(((-1.0)*x9837*x9848))+((sj3*x9832*x9843))+((r22*x9854))+x9842+x9835+((cj3*x9845)));
evalcond[4]=((((-1.0)*sj0*x9847))+((r02*x9854))+(((-1.0)*x9837*x9839))+((r00*x9832*x9846))+((sj1*x9833))+((r01*x9856))+((cj3*x9844)));
evalcond[5]=(((r11*x9856))+(((-1.0)*x9834*x9837))+((x9836*x9851))+((cj3*gconst8*r10))+(((-1.0)*x9838*x9841))+((sj3*x9852))+((cj0*x9847)));
evalcond[6]=((((-1.0)*x9841))+(((-1.0)*r20*x9832*x9837))+(((-1.0)*cj3*r22*x9853))+(((-1.0)*gconst8*x9848*x9850))+(((-1.0)*x9846*x9848))+x9847+((sj3*x9845)));
evalcond[7]=((((-1.0)*x9839*x9846))+((cj1*x9833))+((sj0*x9835))+(((-1.0)*r00*x9832*x9837))+(((-1.0)*gconst8*x9839*x9850))+(((-1.0)*cj3*r02*x9853))+((sj3*x9844)));
evalcond[8]=((((-1.0)*cj3*x9852))+(((-1.0)*gconst8*x9834*x9850))+((gconst8*x9836))+(((-1.0)*x9835*x9838))+(((-1.0)*x9838*x9842))+(((-1.0)*r10*x9832*x9837))+(((-1.0)*x9834*x9846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9857=IKPowWithIntegerCheck(IKsign((((gconst7*r11))+(((-1.0)*gconst8*r10)))),-1);
if(!x9857.valid){
continue;
}
CheckValue<IkReal> x9858 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r20))+((cj0*gconst8*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9857.value)))+(x9858.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9859=IKsin(j4);
IkReal x9860=IKcos(j4);
IkReal x9861=(cj2*sj0);
IkReal x9862=((1.0)*r11);
IkReal x9863=(sj1*sj2);
IkReal x9864=(r10*sj3);
IkReal x9865=(cj3*gconst7);
IkReal x9866=((1.0)*cj0);
IkReal x9867=((1.0)*r01);
IkReal x9868=(gconst7*r10);
IkReal x9869=(cj2*sj1);
IkReal x9870=(cj1*cj2);
IkReal x9871=(gconst7*r20);
IkReal x9872=(gconst8*r00);
IkReal x9873=(gconst8*r20);
IkReal x9874=(gconst7*sj3);
IkReal x9875=(cj1*sj2);
IkReal x9876=((1.0)*r21);
IkReal x9877=((1.0)*gconst7*r00);
IkReal x9878=(cj3*x9860);
IkReal x9879=(gconst7*x9860);
IkReal x9880=(r12*x9859);
IkReal x9881=((1.0)*x9859);
IkReal x9882=(sj3*x9859);
IkReal x9883=(gconst8*x9859);
IkReal x9884=(gconst8*sj3*x9860);
evalcond[0]=(((r22*x9860))+(((-1.0)*x9871*x9881))+(((-1.0)*x9876*x9883)));
evalcond[1]=(cj0+(((-1.0)*x9867*x9883))+((r02*x9860))+(((-1.0)*x9859*x9877)));
evalcond[2]=(sj0+(((-1.0)*x9862*x9883))+(((-1.0)*x9868*x9881))+((r12*x9860)));
evalcond[3]=(((r21*x9884))+(((-1.0)*x9865*x9876))+((r22*x9882))+((cj3*x9873))+((sj3*x9860*x9871))+x9863+x9870);
evalcond[4]=(((sj1*x9861))+(((-1.0)*sj0*x9875))+((r01*x9884))+((cj3*x9872))+((r00*x9860*x9874))+((r02*x9882))+(((-1.0)*x9865*x9867)));
evalcond[5]=(((x9864*x9879))+(((-1.0)*x9866*x9869))+((cj0*x9875))+((r11*x9884))+((cj3*gconst8*r10))+((sj3*x9880))+(((-1.0)*x9862*x9865)));
evalcond[6]=((((-1.0)*gconst8*x9876*x9878))+(((-1.0)*r20*x9860*x9865))+(((-1.0)*x9874*x9876))+(((-1.0)*x9869))+((sj3*x9873))+(((-1.0)*cj3*r22*x9881))+x9875);
evalcond[7]=(((cj1*x9861))+((sj0*x9863))+(((-1.0)*x9867*x9874))+(((-1.0)*r00*x9860*x9865))+(((-1.0)*cj3*r02*x9881))+((sj3*x9872))+(((-1.0)*gconst8*x9867*x9878)));
evalcond[8]=((((-1.0)*cj3*x9880))+(((-1.0)*gconst8*x9862*x9878))+(((-1.0)*x9866*x9870))+(((-1.0)*x9862*x9874))+(((-1.0)*r10*x9860*x9865))+(((-1.0)*x9863*x9866))+((gconst8*x9864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9887 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x9887)==0){
continue;
}
IkReal x9885=pow(x9887,-0.5);
IkReal x9886=((1.0)*x9885);
CheckValue<IkReal> x9888 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x9888.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x9888.value))));
IkReal gconst10=(r00*x9886);
IkReal gconst11=(r01*x9886);
CheckValue<IkReal> x9889 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x9889.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9889.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x9893 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x9893.valid){
continue;
}
IkReal x9890=((1.0)*(x9893.value));
IkReal x9891=x9885;
IkReal x9892=((1.0)*x9891);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x9890)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x9890)));
IkReal gconst10=(r00*x9892);
IkReal gconst11=(r01*x9892);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x9897 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x9897.valid){
continue;
}
IkReal x9894=((1.0)*(x9897.value));
IkReal x9895=x9885;
IkReal x9896=((1.0)*x9895);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x9894)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x9894)));
IkReal gconst10=(r00*x9896);
IkReal gconst11=(r01*x9896);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9901 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x9901.valid){
continue;
}
IkReal x9898=((1.0)*(x9901.value));
IkReal x9899=x9885;
IkReal x9900=((1.0)*x9899);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x9898)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x9898)));
IkReal gconst10=(r00*x9900);
IkReal gconst11=(r01*x9900);
IkReal x9902=r02*r02;
IkReal x9903=((1.0)*sj0);
IkReal x9904=(cj0*r12);
CheckValue<IkReal> x9908=IKPowWithIntegerCheck(((-1.0)+x9902),-1);
if(!x9908.valid){
continue;
}
IkReal x9905=x9908.value;
if((((1.0)+(((-1.0)*x9902)))) < -0.00001)
continue;
IkReal x9906=IKsqrt(((1.0)+(((-1.0)*x9902))));
IkReal x9907=(x9905*x9906);
j4eval[0]=((IKabs(((((-1.0)*r02*x9903))+x9904)))+(IKabs((((r02*x9904*x9907))+(((-1.0)*x9902*x9903*x9907))+((sj0*x9907))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*r22);
op[1]=((((-2.0)*gconst10*r20))+(((-2.0)*gconst11*r21)));
op[2]=r22;
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*r22);
op[1]=((((-2.0)*gconst10*r20))+(((-2.0)*gconst11*r21)));
op[2]=r22;
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x9912 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x9912.valid){
continue;
}
IkReal x9909=((1.0)*(x9912.value));
IkReal x9910=x9885;
IkReal x9911=((1.0)*x9910);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x9909)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x9909)));
IkReal gconst10=(r00*x9911);
IkReal gconst11=(r01*x9911);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9916 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x9916.valid){
continue;
}
IkReal x9913=((1.0)*(x9916.value));
IkReal x9914=x9885;
IkReal x9915=((1.0)*x9914);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x9913)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x9913)));
IkReal gconst10=(r00*x9915);
IkReal gconst11=(r01*x9915);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9920 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x9920.valid){
continue;
}
IkReal x9917=((1.0)*(x9920.value));
IkReal x9918=x9885;
IkReal x9919=((1.0)*x9918);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x9917)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x9917)));
IkReal gconst10=(r00*x9919);
IkReal gconst11=(r01*x9919);
IkReal x9921=((1.0)*sj3);
CheckValue<IkReal> x9928=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x9928.valid){
continue;
}
IkReal x9922=x9928.value;
IkReal x9923=(r10*x9922);
IkReal x9924=(r21*x9922);
IkReal x9925=(r20*x9922);
IkReal x9926=(r11*x9922);
IkReal x9927=(r00*r01*x9922);
j4eval[0]=IKsign(((((-1.0)*r20*x9921*x9923*(r00*r00)))+(((-1.0)*r11*x9921*x9924*(r01*r01)))+(((-1.0)*r00*r01*r21*x9921*x9923))+(((-1.0)*r12*r22*x9921))+(((-1.0)*r00*r01*r11*x9921*x9925))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x9932 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x9932.valid){
continue;
}
IkReal x9929=((1.0)*(x9932.value));
IkReal x9930=x9885;
IkReal x9931=((1.0)*x9930);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x9929)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x9929)));
IkReal gconst10=(r00*x9931);
IkReal gconst11=(r01*x9931);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9936 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x9936.valid){
continue;
}
IkReal x9933=((1.0)*(x9936.value));
IkReal x9934=x9885;
IkReal x9935=((1.0)*x9934);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x9933)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x9933)));
IkReal gconst10=(r00*x9935);
IkReal gconst11=(r01*x9935);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9940 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x9940.valid){
continue;
}
IkReal x9937=((1.0)*(x9940.value));
IkReal x9938=x9885;
IkReal x9939=((1.0)*x9938);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x9937)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x9937)));
IkReal gconst10=(r00*x9939);
IkReal gconst11=(r01*x9939);
IkReal x9941=((1.0)+(((-1.0)*(r02*r02))));
CheckValue<IkReal> x9945=IKPowWithIntegerCheck(x9941,-1);
if(!x9945.valid){
continue;
}
IkReal x9942=x9945.value;
IkReal x9943=((1.0)*x9942);
IkReal x9944=((((-1.0)*x9943*(r01*r01)*(r11*r11)))+(((-1.0)*(r12*r12)))+(((-2.0)*r00*r01*r10*r11*x9942))+(((-1.0)*x9943*(r00*r00)*(r10*r10))));
j4eval[0]=x9944;
j4eval[1]=IKsign(x9944);
j4eval[2]=r12;
j4eval[3]=x9941;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9946=(gconst10*r10);
IkReal x9947=(gconst11*r11);
CheckValue<IkReal> x9948=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9946*x9947))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9946*x9946)))+(((-1.0)*(x9947*x9947))))),-1);
if(!x9948.valid){
continue;
}
CheckValue<IkReal> x9949 = IKatan2WithCheck(IkReal(((((-1.0)*x9946))+(((-1.0)*x9947)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9948.value)))+(x9949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9950=IKsin(j4);
IkReal x9951=IKcos(j4);
IkReal x9952=(gconst11*r21);
IkReal x9953=(gconst10*r20);
IkReal x9954=(gconst11*r11);
IkReal x9955=(gconst10*r10);
IkReal x9956=(gconst10*r00);
IkReal x9957=(gconst11*r01);
IkReal x9958=((1.0)*x9950);
IkReal x9959=((1.0)*x9951);
evalcond[0]=((((-1.0)*x9953*x9958))+(((-1.0)*x9952*x9958))+((r22*x9951)));
evalcond[1]=(((r02*x9951))+(((-1.0)*x9957*x9958))+(((-1.0)*x9956*x9958)));
evalcond[2]=((1.0)+(((-1.0)*x9955*x9958))+(((-1.0)*x9954*x9958))+((r12*x9951)));
evalcond[3]=((((-1.0)*x9955*x9959))+(((-1.0)*r12*x9958))+(((-1.0)*x9954*x9959)));
evalcond[4]=((((-1.0)*r02*x9958))+((sj1*sj2))+(((-1.0)*x9957*x9959))+(((-1.0)*x9956*x9959))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x9953*x9959))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x9958))+(((-1.0)*x9952*x9959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9960 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst10*r00))+((gconst11*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9960.valid){
continue;
}
CheckValue<IkReal> x9961=IKPowWithIntegerCheck(IKsign((((gconst10*r21))+(((-1.0)*gconst11*r20)))),-1);
if(!x9961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9960.value)+(((1.5707963267949)*(x9961.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9962=IKsin(j4);
IkReal x9963=IKcos(j4);
IkReal x9964=(gconst11*r21);
IkReal x9965=(gconst10*r20);
IkReal x9966=(gconst11*r11);
IkReal x9967=(gconst10*r10);
IkReal x9968=(gconst10*r00);
IkReal x9969=(gconst11*r01);
IkReal x9970=((1.0)*x9962);
IkReal x9971=((1.0)*x9963);
evalcond[0]=(((r22*x9963))+(((-1.0)*x9964*x9970))+(((-1.0)*x9965*x9970)));
evalcond[1]=(((r02*x9963))+(((-1.0)*x9968*x9970))+(((-1.0)*x9969*x9970)));
evalcond[2]=((1.0)+(((-1.0)*x9966*x9970))+(((-1.0)*x9967*x9970))+((r12*x9963)));
evalcond[3]=((((-1.0)*x9966*x9971))+(((-1.0)*x9967*x9971))+(((-1.0)*r12*x9970)));
evalcond[4]=((((-1.0)*r02*x9970))+(((-1.0)*x9968*x9971))+(((-1.0)*x9969*x9971))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x9970))+(((-1.0)*x9964*x9971))+(((-1.0)*x9965*x9971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9972=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r01))+((gconst11*r00)))),-1);
if(!x9972.valid){
continue;
}
CheckValue<IkReal> x9973 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst11*r21))+((gconst10*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9972.value)))+(x9973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9974=IKsin(j4);
IkReal x9975=IKcos(j4);
IkReal x9976=(gconst11*r21);
IkReal x9977=(gconst10*r20);
IkReal x9978=(gconst11*r11);
IkReal x9979=(gconst10*r10);
IkReal x9980=(gconst10*r00);
IkReal x9981=(gconst11*r01);
IkReal x9982=((1.0)*x9974);
IkReal x9983=((1.0)*x9975);
evalcond[0]=(((r22*x9975))+(((-1.0)*x9976*x9982))+(((-1.0)*x9977*x9982)));
evalcond[1]=((((-1.0)*x9981*x9982))+(((-1.0)*x9980*x9982))+((r02*x9975)));
evalcond[2]=((1.0)+((r12*x9975))+(((-1.0)*x9978*x9982))+(((-1.0)*x9979*x9982)));
evalcond[3]=((((-1.0)*x9978*x9983))+(((-1.0)*x9979*x9983))+(((-1.0)*r12*x9982)));
evalcond[4]=((((-1.0)*x9981*x9983))+((sj1*sj2))+(((-1.0)*r02*x9982))+(((-1.0)*x9980*x9983))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x9982))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x9976*x9983))+(((-1.0)*x9977*x9983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x9987 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x9987.valid){
continue;
}
IkReal x9984=((1.0)*(x9987.value));
IkReal x9985=x9885;
IkReal x9986=((1.0)*x9985);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x9984)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x9984)));
IkReal gconst10=(r00*x9986);
IkReal gconst11=(r01*x9986);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9991 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x9991.valid){
continue;
}
IkReal x9988=((1.0)*(x9991.value));
IkReal x9989=x9885;
IkReal x9990=((1.0)*x9989);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x9988)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x9988)));
IkReal gconst10=(r00*x9990);
IkReal gconst11=(r01*x9990);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9995 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x9995.valid){
continue;
}
IkReal x9992=((1.0)*(x9995.value));
IkReal x9993=x9885;
IkReal x9994=((1.0)*x9993);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x9992)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x9992)));
IkReal gconst10=(r00*x9994);
IkReal gconst11=(r01*x9994);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9996=(gconst11*r11);
IkReal x9997=(gconst10*r10);
CheckValue<IkReal> x9998 = IKatan2WithCheck(IkReal((x9997+x9996)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9998.valid){
continue;
}
CheckValue<IkReal> x9999=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9997*x9997)+(((2.0)*x9996*x9997))+(x9996*x9996))),-1);
if(!x9999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9998.value)+(((1.5707963267949)*(x9999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10000=IKcos(j4);
IkReal x10001=IKsin(j4);
IkReal x10002=(gconst11*r21);
IkReal x10003=((1.0)*x10001);
IkReal x10004=(gconst11*x10000);
IkReal x10005=(gconst10*x10000);
evalcond[0]=(((r12*x10001))+((r10*x10005))+((r11*x10004)));
evalcond[1]=((((-1.0)*x10002*x10003))+((r22*x10000))+(((-1.0)*gconst10*r20*x10003)));
evalcond[2]=(((r02*x10000))+(((-1.0)*gconst11*r01*x10003))+(((-1.0)*gconst10*r00*x10003)));
evalcond[3]=((1.0)+(((-1.0)*gconst10*r10*x10003))+((r12*x10000))+(((-1.0)*gconst11*r11*x10003)));
evalcond[4]=(((r02*x10001))+((sj1*sj2))+((r01*x10004))+((r00*x10005))+((cj1*cj2)));
evalcond[5]=(((r22*x10001))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x10000*x10002))+((r20*x10005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10006 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst10*r00))+((gconst11*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10006.valid){
continue;
}
CheckValue<IkReal> x10007=IKPowWithIntegerCheck(IKsign((((gconst10*r21))+(((-1.0)*gconst11*r20)))),-1);
if(!x10007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10006.value)+(((1.5707963267949)*(x10007.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10008=IKcos(j4);
IkReal x10009=IKsin(j4);
IkReal x10010=(gconst11*r21);
IkReal x10011=((1.0)*x10009);
IkReal x10012=(gconst11*x10008);
IkReal x10013=(gconst10*x10008);
evalcond[0]=(((r12*x10009))+((r10*x10013))+((r11*x10012)));
evalcond[1]=(((r22*x10008))+(((-1.0)*x10010*x10011))+(((-1.0)*gconst10*r20*x10011)));
evalcond[2]=(((r02*x10008))+(((-1.0)*gconst11*r01*x10011))+(((-1.0)*gconst10*r00*x10011)));
evalcond[3]=((1.0)+((r12*x10008))+(((-1.0)*gconst11*r11*x10011))+(((-1.0)*gconst10*r10*x10011)));
evalcond[4]=(((r02*x10009))+((sj1*sj2))+((r00*x10013))+((r01*x10012))+((cj1*cj2)));
evalcond[5]=(((r22*x10009))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r20*x10013))+((x10008*x10010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10014=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r01))+((gconst11*r00)))),-1);
if(!x10014.valid){
continue;
}
CheckValue<IkReal> x10015 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst11*r21))+((gconst10*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10014.value)))+(x10015.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10016=IKcos(j4);
IkReal x10017=IKsin(j4);
IkReal x10018=(gconst11*r21);
IkReal x10019=((1.0)*x10017);
IkReal x10020=(gconst11*x10016);
IkReal x10021=(gconst10*x10016);
evalcond[0]=(((r12*x10017))+((r10*x10021))+((r11*x10020)));
evalcond[1]=((((-1.0)*x10018*x10019))+((r22*x10016))+(((-1.0)*gconst10*r20*x10019)));
evalcond[2]=((((-1.0)*gconst11*r01*x10019))+((r02*x10016))+(((-1.0)*gconst10*r00*x10019)));
evalcond[3]=((1.0)+(((-1.0)*gconst11*r11*x10019))+(((-1.0)*gconst10*r10*x10019))+((r12*x10016)));
evalcond[4]=(((r02*x10017))+((sj1*sj2))+((r01*x10020))+((r00*x10021))+((cj1*cj2)));
evalcond[5]=(((r22*x10017))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r20*x10021))+((x10016*x10018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10022=gconst10*gconst10;
IkReal x10023=gconst11*gconst11;
IkReal x10024=(r10*r21);
IkReal x10025=(r11*r20);
IkReal x10026=((1.0)*sj3);
IkReal x10027=(r11*r21);
IkReal x10028=((1.0)*cj3);
IkReal x10029=(cj3*gconst11*r10);
IkReal x10030=(gconst10*gconst11*x10026);
CheckValue<IkReal> x10031 = IKatan2WithCheck(IkReal(((((-1.0)*gconst10*r11*r22*x10028))+((r22*x10029)))),IkReal(((((-1.0)*x10022*x10025*x10028))+((gconst10*r20*x10029))+(((-1.0)*gconst10*gconst11*x10027*x10028))+((cj3*x10023*x10024)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10031.valid){
continue;
}
CheckValue<IkReal> x10032=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10025*x10030))+(((-1.0)*x10024*x10030))+(((-1.0)*r10*r20*x10022*x10026))+(((-1.0)*r12*r22*x10026))+(((-1.0)*x10023*x10026*x10027)))),-1);
if(!x10032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10031.value)+(((1.5707963267949)*(x10032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10033=IKsin(j4);
IkReal x10034=IKcos(j4);
IkReal x10035=(sj1*sj2);
IkReal x10036=(cj1*cj2);
IkReal x10037=(gconst11*sj3);
IkReal x10038=(gconst10*sj3);
IkReal x10039=((1.0)*r11);
IkReal x10040=(cj3*gconst11);
IkReal x10041=(cj1*sj2);
IkReal x10042=(cj2*sj1);
IkReal x10043=((1.0)*r21);
IkReal x10044=(r10*x10034);
IkReal x10045=(r20*x10034);
IkReal x10046=((1.0)*cj3*gconst10);
IkReal x10047=(r12*x10033);
IkReal x10048=(r00*x10034);
IkReal x10049=((1.0)*x10033);
IkReal x10050=(r01*x10034);
IkReal x10051=(sj3*x10033);
IkReal x10052=(x10036+x10035);
IkReal x10053=(gconst11*x10049);
evalcond[0]=((((-1.0)*gconst10*r20*x10049))+(((-1.0)*gconst11*x10033*x10043))+((r22*x10034)));
evalcond[1]=((((-1.0)*r01*x10053))+((r02*x10034))+(((-1.0)*gconst10*r00*x10049)));
evalcond[2]=((1.0)+(((-1.0)*gconst10*r10*x10049))+(((-1.0)*gconst11*x10033*x10039))+((r12*x10034)));
evalcond[3]=(((r10*x10040))+((sj3*x10047))+((r11*x10034*x10037))+((x10038*x10044))+(((-1.0)*cj3*gconst10*x10039)));
evalcond[4]=((((-1.0)*x10044*x10046))+((r10*x10037))+(((-1.0)*x10034*x10039*x10040))+(((-1.0)*x10038*x10039))+(((-1.0)*cj3*x10047)));
evalcond[5]=((((-1.0)*cj3*gconst10*x10043))+x10052+((r22*x10051))+((r20*x10040))+((r21*x10034*x10037))+((x10038*x10045)));
evalcond[6]=((((-1.0)*r01*x10046))+(((-1.0)*x10041))+((x10037*x10050))+((r00*x10040))+((r02*x10051))+x10042+((x10038*x10048)));
evalcond[7]=(x10052+((r00*x10037))+(((-1.0)*cj3*r02*x10049))+(((-1.0)*x10046*x10048))+(((-1.0)*x10040*x10050))+(((-1.0)*r01*x10038)));
evalcond[8]=((((-1.0)*x10042))+(((-1.0)*x10038*x10043))+(((-1.0)*x10045*x10046))+((r20*x10037))+x10041+(((-1.0)*x10034*x10040*x10043))+(((-1.0)*cj3*r22*x10049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10054 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst10*r00))+((gconst11*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10054.valid){
continue;
}
CheckValue<IkReal> x10055=IKPowWithIntegerCheck(IKsign((((gconst10*r21))+(((-1.0)*gconst11*r20)))),-1);
if(!x10055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10054.value)+(((1.5707963267949)*(x10055.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10056=IKsin(j4);
IkReal x10057=IKcos(j4);
IkReal x10058=(sj1*sj2);
IkReal x10059=(cj1*cj2);
IkReal x10060=(gconst11*sj3);
IkReal x10061=(gconst10*sj3);
IkReal x10062=((1.0)*r11);
IkReal x10063=(cj3*gconst11);
IkReal x10064=(cj1*sj2);
IkReal x10065=(cj2*sj1);
IkReal x10066=((1.0)*r21);
IkReal x10067=(r10*x10057);
IkReal x10068=(r20*x10057);
IkReal x10069=((1.0)*cj3*gconst10);
IkReal x10070=(r12*x10056);
IkReal x10071=(r00*x10057);
IkReal x10072=((1.0)*x10056);
IkReal x10073=(r01*x10057);
IkReal x10074=(sj3*x10056);
IkReal x10075=(x10059+x10058);
IkReal x10076=(gconst11*x10072);
evalcond[0]=((((-1.0)*gconst11*x10056*x10066))+(((-1.0)*gconst10*r20*x10072))+((r22*x10057)));
evalcond[1]=(((r02*x10057))+(((-1.0)*gconst10*r00*x10072))+(((-1.0)*r01*x10076)));
evalcond[2]=((1.0)+(((-1.0)*gconst11*x10056*x10062))+(((-1.0)*gconst10*r10*x10072))+((r12*x10057)));
evalcond[3]=(((r11*x10057*x10060))+((r10*x10063))+((sj3*x10070))+(((-1.0)*cj3*gconst10*x10062))+((x10061*x10067)));
evalcond[4]=(((r10*x10060))+(((-1.0)*x10057*x10062*x10063))+(((-1.0)*x10067*x10069))+(((-1.0)*x10061*x10062))+(((-1.0)*cj3*x10070)));
evalcond[5]=((((-1.0)*cj3*gconst10*x10066))+((r20*x10063))+x10075+((r21*x10057*x10060))+((r22*x10074))+((x10061*x10068)));
evalcond[6]=(((x10060*x10073))+((r00*x10063))+x10065+((r02*x10074))+(((-1.0)*r01*x10069))+((x10061*x10071))+(((-1.0)*x10064)));
evalcond[7]=(((r00*x10060))+(((-1.0)*cj3*r02*x10072))+(((-1.0)*x10063*x10073))+x10075+(((-1.0)*r01*x10061))+(((-1.0)*x10069*x10071)));
evalcond[8]=((((-1.0)*cj3*r22*x10072))+(((-1.0)*x10068*x10069))+((r20*x10060))+x10064+(((-1.0)*x10061*x10066))+(((-1.0)*x10057*x10063*x10066))+(((-1.0)*x10065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10077=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r01))+((gconst11*r00)))),-1);
if(!x10077.valid){
continue;
}
CheckValue<IkReal> x10078 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst11*r21))+((gconst10*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10077.value)))+(x10078.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10079=IKsin(j4);
IkReal x10080=IKcos(j4);
IkReal x10081=(sj1*sj2);
IkReal x10082=(cj1*cj2);
IkReal x10083=(gconst11*sj3);
IkReal x10084=(gconst10*sj3);
IkReal x10085=((1.0)*r11);
IkReal x10086=(cj3*gconst11);
IkReal x10087=(cj1*sj2);
IkReal x10088=(cj2*sj1);
IkReal x10089=((1.0)*r21);
IkReal x10090=(r10*x10080);
IkReal x10091=(r20*x10080);
IkReal x10092=((1.0)*cj3*gconst10);
IkReal x10093=(r12*x10079);
IkReal x10094=(r00*x10080);
IkReal x10095=((1.0)*x10079);
IkReal x10096=(r01*x10080);
IkReal x10097=(sj3*x10079);
IkReal x10098=(x10082+x10081);
IkReal x10099=(gconst11*x10095);
evalcond[0]=((((-1.0)*gconst11*x10079*x10089))+(((-1.0)*gconst10*r20*x10095))+((r22*x10080)));
evalcond[1]=((((-1.0)*r01*x10099))+(((-1.0)*gconst10*r00*x10095))+((r02*x10080)));
evalcond[2]=((1.0)+(((-1.0)*gconst11*x10079*x10085))+(((-1.0)*gconst10*r10*x10095))+((r12*x10080)));
evalcond[3]=(((x10084*x10090))+((r11*x10080*x10083))+(((-1.0)*cj3*gconst10*x10085))+((sj3*x10093))+((r10*x10086)));
evalcond[4]=((((-1.0)*cj3*x10093))+(((-1.0)*x10084*x10085))+(((-1.0)*x10080*x10085*x10086))+(((-1.0)*x10090*x10092))+((r10*x10083)));
evalcond[5]=(((x10084*x10091))+(((-1.0)*cj3*gconst10*x10089))+((r20*x10086))+x10098+((r22*x10097))+((r21*x10080*x10083)));
evalcond[6]=((((-1.0)*r01*x10092))+((x10084*x10094))+((r00*x10086))+((r02*x10097))+((x10083*x10096))+x10088+(((-1.0)*x10087)));
evalcond[7]=((((-1.0)*x10092*x10094))+((r00*x10083))+(((-1.0)*x10086*x10096))+x10098+(((-1.0)*cj3*r02*x10095))+(((-1.0)*r01*x10084)));
evalcond[8]=((((-1.0)*cj3*r22*x10095))+((r20*x10083))+(((-1.0)*x10084*x10089))+(((-1.0)*x10080*x10086*x10089))+x10087+(((-1.0)*x10091*x10092))+(((-1.0)*x10088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10103 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x10103.valid){
continue;
}
IkReal x10100=((1.0)*(x10103.value));
IkReal x10101=x9885;
IkReal x10102=((1.0)*x10101);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10100)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10100)));
IkReal gconst10=(r00*x10102);
IkReal gconst11=(r01*x10102);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10107 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x10107.valid){
continue;
}
IkReal x10104=((1.0)*(x10107.value));
IkReal x10105=x9885;
IkReal x10106=((1.0)*x10105);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10104)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10104)));
IkReal gconst10=(r00*x10106);
IkReal gconst11=(r01*x10106);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10111 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x10111.valid){
continue;
}
IkReal x10108=((1.0)*(x10111.value));
IkReal x10109=x9885;
IkReal x10110=((1.0)*x10109);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10108)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10108)));
IkReal gconst10=(r00*x10110);
IkReal gconst11=(r01*x10110);
IkReal x10112=((1.0)*sj3);
CheckValue<IkReal> x10119=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x10119.valid){
continue;
}
IkReal x10113=x10119.value;
IkReal x10114=(r10*x10113);
IkReal x10115=(r21*x10113);
IkReal x10116=(r20*x10113);
IkReal x10117=(r11*x10113);
IkReal x10118=(r00*r01*x10113);
j4eval[0]=IKsign(((((-1.0)*r00*r01*r11*x10112*x10116))+(((-1.0)*r11*x10112*x10115*(r01*r01)))+(((-1.0)*r00*r01*r21*x10112*x10114))+(((-1.0)*r20*x10112*x10114*(r00*r00)))+(((-1.0)*r12*r22*x10112))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10123 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x10123.valid){
continue;
}
IkReal x10120=((1.0)*(x10123.value));
IkReal x10121=x9885;
IkReal x10122=((1.0)*x10121);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10120)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10120)));
IkReal gconst10=(r00*x10122);
IkReal gconst11=(r01*x10122);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10127 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x10127.valid){
continue;
}
IkReal x10124=((1.0)*(x10127.value));
IkReal x10125=x9885;
IkReal x10126=((1.0)*x10125);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10124)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10124)));
IkReal gconst10=(r00*x10126);
IkReal gconst11=(r01*x10126);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10131 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x10131.valid){
continue;
}
IkReal x10128=((1.0)*(x10131.value));
IkReal x10129=x9885;
IkReal x10130=((1.0)*x10129);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10128)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10128)));
IkReal gconst10=(r00*x10130);
IkReal gconst11=(r01*x10130);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10132=(gconst10*r10);
IkReal x10133=(gconst11*r11);
CheckValue<IkReal> x10134=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((2.0)*x10132*x10133))+(x10133*x10133)+(x10132*x10132))),-1);
if(!x10134.valid){
continue;
}
CheckValue<IkReal> x10135 = IKatan2WithCheck(IkReal(((((-1.0)*x10133))+(((-1.0)*x10132)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10134.value)))+(x10135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10136=IKsin(j4);
IkReal x10137=IKcos(j4);
IkReal x10138=(gconst11*r21);
IkReal x10139=(gconst10*r20);
IkReal x10140=((1.0)*cj2);
IkReal x10141=(gconst11*r11);
IkReal x10142=(gconst10*r10);
IkReal x10143=(gconst10*r00);
IkReal x10144=(gconst11*r01);
IkReal x10145=((1.0)*x10136);
IkReal x10146=((1.0)*x10137);
evalcond[0]=(((r22*x10137))+(((-1.0)*x10138*x10145))+(((-1.0)*x10139*x10145)));
evalcond[1]=((((-1.0)*x10143*x10145))+((r02*x10137))+(((-1.0)*x10144*x10145)));
evalcond[2]=((-1.0)+(((-1.0)*x10142*x10145))+(((-1.0)*x10141*x10145))+((r12*x10137)));
evalcond[3]=((((-1.0)*x10142*x10146))+(((-1.0)*r12*x10145))+(((-1.0)*x10141*x10146)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*sj1*x10140))+(((-1.0)*x10138*x10146))+(((-1.0)*r22*x10145))+(((-1.0)*x10139*x10146)));
evalcond[5]=((((-1.0)*cj1*x10140))+(((-1.0)*sj1*sj2))+(((-1.0)*x10143*x10146))+(((-1.0)*r02*x10145))+(((-1.0)*x10144*x10146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10147 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst10*r00))+((gconst11*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10147.valid){
continue;
}
CheckValue<IkReal> x10148=IKPowWithIntegerCheck(IKsign((((gconst11*r20))+(((-1.0)*gconst10*r21)))),-1);
if(!x10148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10147.value)+(((1.5707963267949)*(x10148.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10149=IKsin(j4);
IkReal x10150=IKcos(j4);
IkReal x10151=(gconst11*r21);
IkReal x10152=(gconst10*r20);
IkReal x10153=((1.0)*cj2);
IkReal x10154=(gconst11*r11);
IkReal x10155=(gconst10*r10);
IkReal x10156=(gconst10*r00);
IkReal x10157=(gconst11*r01);
IkReal x10158=((1.0)*x10149);
IkReal x10159=((1.0)*x10150);
evalcond[0]=((((-1.0)*x10151*x10158))+((r22*x10150))+(((-1.0)*x10152*x10158)));
evalcond[1]=(((r02*x10150))+(((-1.0)*x10156*x10158))+(((-1.0)*x10157*x10158)));
evalcond[2]=((-1.0)+((r12*x10150))+(((-1.0)*x10154*x10158))+(((-1.0)*x10155*x10158)));
evalcond[3]=((((-1.0)*x10154*x10159))+(((-1.0)*r12*x10158))+(((-1.0)*x10155*x10159)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*x10151*x10159))+(((-1.0)*sj1*x10153))+(((-1.0)*r22*x10158))+(((-1.0)*x10152*x10159)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x10158))+(((-1.0)*cj1*x10153))+(((-1.0)*x10156*x10159))+(((-1.0)*x10157*x10159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10160=IKPowWithIntegerCheck(IKsign((((gconst10*r01))+(((-1.0)*gconst11*r00)))),-1);
if(!x10160.valid){
continue;
}
CheckValue<IkReal> x10161 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst11*r21))+((gconst10*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10160.value)))+(x10161.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10162=IKsin(j4);
IkReal x10163=IKcos(j4);
IkReal x10164=(gconst11*r21);
IkReal x10165=(gconst10*r20);
IkReal x10166=((1.0)*cj2);
IkReal x10167=(gconst11*r11);
IkReal x10168=(gconst10*r10);
IkReal x10169=(gconst10*r00);
IkReal x10170=(gconst11*r01);
IkReal x10171=((1.0)*x10162);
IkReal x10172=((1.0)*x10163);
evalcond[0]=(((r22*x10163))+(((-1.0)*x10165*x10171))+(((-1.0)*x10164*x10171)));
evalcond[1]=((((-1.0)*x10169*x10171))+((r02*x10163))+(((-1.0)*x10170*x10171)));
evalcond[2]=((-1.0)+((r12*x10163))+(((-1.0)*x10167*x10171))+(((-1.0)*x10168*x10171)));
evalcond[3]=((((-1.0)*r12*x10171))+(((-1.0)*x10167*x10172))+(((-1.0)*x10168*x10172)));
evalcond[4]=((((-1.0)*sj1*x10166))+(((-1.0)*r22*x10171))+((cj1*sj2))+(((-1.0)*x10165*x10172))+(((-1.0)*x10164*x10172)));
evalcond[5]=((((-1.0)*x10169*x10172))+(((-1.0)*sj1*sj2))+(((-1.0)*x10170*x10172))+(((-1.0)*cj1*x10166))+(((-1.0)*r02*x10171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10176 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x10176.valid){
continue;
}
IkReal x10173=((1.0)*(x10176.value));
IkReal x10174=x9885;
IkReal x10175=((1.0)*x10174);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10173)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10173)));
IkReal gconst10=(r00*x10175);
IkReal gconst11=(r01*x10175);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10180 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x10180.valid){
continue;
}
IkReal x10177=((1.0)*(x10180.value));
IkReal x10178=x9885;
IkReal x10179=((1.0)*x10178);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10177)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10177)));
IkReal gconst10=(r00*x10179);
IkReal gconst11=(r01*x10179);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10184 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x10184.valid){
continue;
}
IkReal x10181=((1.0)*(x10184.value));
IkReal x10182=x9885;
IkReal x10183=((1.0)*x10182);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10181)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10181)));
IkReal gconst10=(r00*x10183);
IkReal gconst11=(r01*x10183);
IkReal x10185=((1.0)+(((-1.0)*(r02*r02))));
CheckValue<IkReal> x10189=IKPowWithIntegerCheck(x10185,-1);
if(!x10189.valid){
continue;
}
IkReal x10186=x10189.value;
IkReal x10187=((1.0)*x10186);
IkReal x10188=((((-1.0)*x10187*(r01*r01)*(r11*r11)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10187*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x10186)));
j4eval[0]=x10188;
j4eval[1]=IKsign(x10188);
j4eval[2]=r12;
j4eval[3]=x10185;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10190=(gconst11*r11);
IkReal x10191=(gconst10*r10);
CheckValue<IkReal> x10192=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10190*x10191))+(((-1.0)*(x10190*x10190)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10191*x10191))))),-1);
if(!x10192.valid){
continue;
}
CheckValue<IkReal> x10193 = IKatan2WithCheck(IkReal((x10190+x10191)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10192.value)))+(x10193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10194=IKcos(j4);
IkReal x10195=IKsin(j4);
IkReal x10196=(gconst11*r21);
IkReal x10197=((1.0)*cj2);
IkReal x10198=((1.0)*x10195);
IkReal x10199=(gconst11*x10194);
IkReal x10200=(gconst10*x10194);
evalcond[0]=(((r11*x10199))+((r10*x10200))+((r12*x10195)));
evalcond[1]=(((r22*x10194))+(((-1.0)*gconst10*r20*x10198))+(((-1.0)*x10196*x10198)));
evalcond[2]=(((r02*x10194))+(((-1.0)*gconst11*r01*x10198))+(((-1.0)*gconst10*r00*x10198)));
evalcond[3]=((-1.0)+(((-1.0)*gconst10*r10*x10198))+((r12*x10194))+(((-1.0)*gconst11*r11*x10198)));
evalcond[4]=(((cj1*sj2))+((r22*x10195))+(((-1.0)*sj1*x10197))+((r20*x10200))+((x10194*x10196)));
evalcond[5]=(((r02*x10195))+(((-1.0)*cj1*x10197))+(((-1.0)*sj1*sj2))+((r00*x10200))+((r01*x10199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10201 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst10*r00))+((gconst11*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10201.valid){
continue;
}
CheckValue<IkReal> x10202=IKPowWithIntegerCheck(IKsign((((gconst11*r20))+(((-1.0)*gconst10*r21)))),-1);
if(!x10202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10201.value)+(((1.5707963267949)*(x10202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10203=IKcos(j4);
IkReal x10204=IKsin(j4);
IkReal x10205=(gconst11*r21);
IkReal x10206=((1.0)*cj2);
IkReal x10207=((1.0)*x10204);
IkReal x10208=(gconst11*x10203);
IkReal x10209=(gconst10*x10203);
evalcond[0]=(((r10*x10209))+((r12*x10204))+((r11*x10208)));
evalcond[1]=(((r22*x10203))+(((-1.0)*gconst10*r20*x10207))+(((-1.0)*x10205*x10207)));
evalcond[2]=(((r02*x10203))+(((-1.0)*gconst10*r00*x10207))+(((-1.0)*gconst11*r01*x10207)));
evalcond[3]=((-1.0)+(((-1.0)*gconst10*r10*x10207))+(((-1.0)*gconst11*r11*x10207))+((r12*x10203)));
evalcond[4]=(((r22*x10204))+((cj1*sj2))+((x10203*x10205))+(((-1.0)*sj1*x10206))+((r20*x10209)));
evalcond[5]=((((-1.0)*cj1*x10206))+((r02*x10204))+(((-1.0)*sj1*sj2))+((r00*x10209))+((r01*x10208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10210=IKPowWithIntegerCheck(IKsign((((gconst10*r01))+(((-1.0)*gconst11*r00)))),-1);
if(!x10210.valid){
continue;
}
CheckValue<IkReal> x10211 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst11*r21))+((gconst10*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10210.value)))+(x10211.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10212=IKcos(j4);
IkReal x10213=IKsin(j4);
IkReal x10214=(gconst11*r21);
IkReal x10215=((1.0)*cj2);
IkReal x10216=((1.0)*x10213);
IkReal x10217=(gconst11*x10212);
IkReal x10218=(gconst10*x10212);
evalcond[0]=(((r11*x10217))+((r10*x10218))+((r12*x10213)));
evalcond[1]=((((-1.0)*x10214*x10216))+(((-1.0)*gconst10*r20*x10216))+((r22*x10212)));
evalcond[2]=(((r02*x10212))+(((-1.0)*gconst10*r00*x10216))+(((-1.0)*gconst11*r01*x10216)));
evalcond[3]=((-1.0)+(((-1.0)*gconst11*r11*x10216))+((r12*x10212))+(((-1.0)*gconst10*r10*x10216)));
evalcond[4]=((((-1.0)*sj1*x10215))+((r20*x10218))+((cj1*sj2))+((r22*x10213))+((x10212*x10214)));
evalcond[5]=(((r01*x10217))+(((-1.0)*sj1*sj2))+((r00*x10218))+((r02*x10213))+(((-1.0)*cj1*x10215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10219=gconst10*gconst10;
IkReal x10220=gconst11*gconst11;
IkReal x10221=(r10*r21);
IkReal x10222=(r11*r20);
IkReal x10223=((1.0)*sj3);
IkReal x10224=(r11*r21);
IkReal x10225=((1.0)*cj3);
IkReal x10226=(cj3*gconst11*r10);
IkReal x10227=(gconst10*gconst11*x10223);
CheckValue<IkReal> x10228=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x10219*x10223))+(((-1.0)*x10222*x10227))+(((-1.0)*r12*r22*x10223))+(((-1.0)*x10220*x10223*x10224))+(((-1.0)*x10221*x10227)))),-1);
if(!x10228.valid){
continue;
}
CheckValue<IkReal> x10229 = IKatan2WithCheck(IkReal((((r22*x10226))+(((-1.0)*gconst10*r11*r22*x10225)))),IkReal((((cj3*x10220*x10221))+(((-1.0)*gconst10*gconst11*x10224*x10225))+(((-1.0)*x10219*x10222*x10225))+((gconst10*r20*x10226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10228.value)))+(x10229.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10230=IKsin(j4);
IkReal x10231=IKcos(j4);
IkReal x10232=(cj1*sj2);
IkReal x10233=(cj1*cj2);
IkReal x10234=(gconst11*sj3);
IkReal x10235=(gconst10*sj3);
IkReal x10236=((1.0)*r11);
IkReal x10237=(sj1*sj2);
IkReal x10238=(cj3*gconst11);
IkReal x10239=((1.0)*r21);
IkReal x10240=((1.0)*cj2*sj1);
IkReal x10241=(r10*x10231);
IkReal x10242=(r20*x10231);
IkReal x10243=((1.0)*cj3*gconst10);
IkReal x10244=(r12*x10230);
IkReal x10245=(r00*x10231);
IkReal x10246=((1.0)*x10230);
IkReal x10247=(r01*x10231);
IkReal x10248=(sj3*x10230);
IkReal x10249=(gconst11*x10246);
evalcond[0]=(((r22*x10231))+(((-1.0)*gconst11*x10230*x10239))+(((-1.0)*gconst10*r20*x10246)));
evalcond[1]=((((-1.0)*r01*x10249))+((r02*x10231))+(((-1.0)*gconst10*r00*x10246)));
evalcond[2]=((-1.0)+(((-1.0)*gconst10*r10*x10246))+(((-1.0)*gconst11*x10230*x10236))+((r12*x10231)));
evalcond[3]=(((sj3*x10244))+((r11*x10231*x10234))+(((-1.0)*cj3*gconst10*x10236))+((x10235*x10241))+((r10*x10238)));
evalcond[4]=((((-1.0)*x10241*x10243))+(((-1.0)*x10235*x10236))+(((-1.0)*x10231*x10236*x10238))+(((-1.0)*cj3*x10244))+((r10*x10234)));
evalcond[5]=(((r21*x10231*x10234))+((r22*x10248))+(((-1.0)*cj3*gconst10*x10239))+x10233+x10237+((x10235*x10242))+((r20*x10238)));
evalcond[6]=(((x10234*x10247))+((r02*x10248))+(((-1.0)*r01*x10243))+(((-1.0)*x10240))+x10232+((r00*x10238))+((x10235*x10245)));
evalcond[7]=((((-1.0)*cj3*r22*x10246))+(((-1.0)*x10235*x10239))+(((-1.0)*x10240))+x10232+(((-1.0)*x10231*x10238*x10239))+((r20*x10234))+(((-1.0)*x10242*x10243)));
evalcond[8]=((((-1.0)*r01*x10235))+(((-1.0)*cj3*r02*x10246))+(((-1.0)*x10233))+(((-1.0)*x10237))+((r00*x10234))+(((-1.0)*x10238*x10247))+(((-1.0)*x10243*x10245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10250 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst10*r00))+((gconst11*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10250.valid){
continue;
}
CheckValue<IkReal> x10251=IKPowWithIntegerCheck(IKsign((((gconst11*r20))+(((-1.0)*gconst10*r21)))),-1);
if(!x10251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10250.value)+(((1.5707963267949)*(x10251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10252=IKsin(j4);
IkReal x10253=IKcos(j4);
IkReal x10254=(cj1*sj2);
IkReal x10255=(cj1*cj2);
IkReal x10256=(gconst11*sj3);
IkReal x10257=(gconst10*sj3);
IkReal x10258=((1.0)*r11);
IkReal x10259=(sj1*sj2);
IkReal x10260=(cj3*gconst11);
IkReal x10261=((1.0)*r21);
IkReal x10262=((1.0)*cj2*sj1);
IkReal x10263=(r10*x10253);
IkReal x10264=(r20*x10253);
IkReal x10265=((1.0)*cj3*gconst10);
IkReal x10266=(r12*x10252);
IkReal x10267=(r00*x10253);
IkReal x10268=((1.0)*x10252);
IkReal x10269=(r01*x10253);
IkReal x10270=(sj3*x10252);
IkReal x10271=(gconst11*x10268);
evalcond[0]=(((r22*x10253))+(((-1.0)*gconst11*x10252*x10261))+(((-1.0)*gconst10*r20*x10268)));
evalcond[1]=(((r02*x10253))+(((-1.0)*r01*x10271))+(((-1.0)*gconst10*r00*x10268)));
evalcond[2]=((-1.0)+((r12*x10253))+(((-1.0)*gconst10*r10*x10268))+(((-1.0)*gconst11*x10252*x10258)));
evalcond[3]=(((sj3*x10266))+((x10257*x10263))+(((-1.0)*cj3*gconst10*x10258))+((r10*x10260))+((r11*x10253*x10256)));
evalcond[4]=(((r10*x10256))+(((-1.0)*cj3*x10266))+(((-1.0)*x10263*x10265))+(((-1.0)*x10257*x10258))+(((-1.0)*x10253*x10258*x10260)));
evalcond[5]=(((x10257*x10264))+((r20*x10260))+x10259+x10255+((r21*x10253*x10256))+(((-1.0)*cj3*gconst10*x10261))+((r22*x10270)));
evalcond[6]=(((x10257*x10267))+((x10256*x10269))+(((-1.0)*x10262))+((r00*x10260))+(((-1.0)*r01*x10265))+x10254+((r02*x10270)));
evalcond[7]=((((-1.0)*x10257*x10261))+(((-1.0)*x10253*x10260*x10261))+(((-1.0)*x10262))+(((-1.0)*cj3*r22*x10268))+x10254+(((-1.0)*x10264*x10265))+((r20*x10256)));
evalcond[8]=((((-1.0)*x10260*x10269))+(((-1.0)*x10255))+(((-1.0)*x10259))+(((-1.0)*cj3*r02*x10268))+(((-1.0)*r01*x10257))+((r00*x10256))+(((-1.0)*x10265*x10267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10272=IKPowWithIntegerCheck(IKsign((((gconst10*r01))+(((-1.0)*gconst11*r00)))),-1);
if(!x10272.valid){
continue;
}
CheckValue<IkReal> x10273 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst11*r21))+((gconst10*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10272.value)))+(x10273.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10274=IKsin(j4);
IkReal x10275=IKcos(j4);
IkReal x10276=(cj1*sj2);
IkReal x10277=(cj1*cj2);
IkReal x10278=(gconst11*sj3);
IkReal x10279=(gconst10*sj3);
IkReal x10280=((1.0)*r11);
IkReal x10281=(sj1*sj2);
IkReal x10282=(cj3*gconst11);
IkReal x10283=((1.0)*r21);
IkReal x10284=((1.0)*cj2*sj1);
IkReal x10285=(r10*x10275);
IkReal x10286=(r20*x10275);
IkReal x10287=((1.0)*cj3*gconst10);
IkReal x10288=(r12*x10274);
IkReal x10289=(r00*x10275);
IkReal x10290=((1.0)*x10274);
IkReal x10291=(r01*x10275);
IkReal x10292=(sj3*x10274);
IkReal x10293=(gconst11*x10290);
evalcond[0]=((((-1.0)*gconst11*x10274*x10283))+(((-1.0)*gconst10*r20*x10290))+((r22*x10275)));
evalcond[1]=((((-1.0)*r01*x10293))+((r02*x10275))+(((-1.0)*gconst10*r00*x10290)));
evalcond[2]=((-1.0)+(((-1.0)*gconst11*x10274*x10280))+((r12*x10275))+(((-1.0)*gconst10*r10*x10290)));
evalcond[3]=(((x10279*x10285))+((sj3*x10288))+(((-1.0)*cj3*gconst10*x10280))+((r10*x10282))+((r11*x10275*x10278)));
evalcond[4]=((((-1.0)*x10275*x10280*x10282))+(((-1.0)*x10279*x10280))+(((-1.0)*x10285*x10287))+(((-1.0)*cj3*x10288))+((r10*x10278)));
evalcond[5]=(((r20*x10282))+((r21*x10275*x10278))+((x10279*x10286))+(((-1.0)*cj3*gconst10*x10283))+x10277+x10281+((r22*x10292)));
evalcond[6]=(((x10279*x10289))+((x10278*x10291))+x10276+((r02*x10292))+(((-1.0)*r01*x10287))+(((-1.0)*x10284))+((r00*x10282)));
evalcond[7]=((((-1.0)*x10275*x10282*x10283))+((r20*x10278))+(((-1.0)*x10279*x10283))+(((-1.0)*cj3*r22*x10290))+x10276+(((-1.0)*x10284))+(((-1.0)*x10286*x10287)));
evalcond[8]=((((-1.0)*x10282*x10291))+((r00*x10278))+(((-1.0)*r01*x10279))+(((-1.0)*x10281))+(((-1.0)*x10287*x10289))+(((-1.0)*x10277))+(((-1.0)*cj3*r02*x10290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10294=((-1.0)*py);
CheckValue<IkReal> x10296 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x10296.valid){
continue;
}
IkReal x10295=((1.0)*(x10296.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10295)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10294);
rxp0_2=(py*r00);
rxp1_0=(r21*x10294);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10295)));
IkReal gconst10=((1.0)*r00);
IkReal gconst11=((1.0)*r01);
j4eval[0]=-1.0;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10297=((-1.0)*py);
CheckValue<IkReal> x10299 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x10299.valid){
continue;
}
IkReal x10298=((1.0)*(x10299.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10298)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10297);
rxp0_2=(py*r00);
rxp1_0=(r21*x10297);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10298)));
IkReal gconst10=((1.0)*r00);
IkReal gconst11=((1.0)*r01);
IkReal x10300=((1.0)*sj3);
j4eval[0]=-1.0;
j4eval[1]=(((r01*r21*x10300))+((r00*r20*x10300)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10301=((-1.0)*py);
CheckValue<IkReal> x10303 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x10303.valid){
continue;
}
IkReal x10302=((1.0)*(x10303.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10302)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10301);
rxp0_2=(py*r00);
rxp1_0=(r21*x10301);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10302)));
IkReal gconst10=((1.0)*r00);
IkReal gconst11=((1.0)*r01);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10304=((-1.0)*py);
CheckValue<IkReal> x10306 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x10306.valid){
continue;
}
IkReal x10305=((1.0)*(x10306.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10305)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10304);
rxp0_2=(py*r00);
rxp1_0=(r21*x10304);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10305)));
IkReal gconst10=((1.0)*r00);
IkReal gconst11=((1.0)*r01);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10307=((-1.0)*py);
CheckValue<IkReal> x10309 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x10309.valid){
continue;
}
IkReal x10308=((1.0)*(x10309.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10308)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10307);
rxp0_2=(py*r00);
rxp1_0=(r21*x10307);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10308)));
IkReal gconst10=((1.0)*r00);
IkReal gconst11=((1.0)*r01);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10310=((-1.0)*py);
CheckValue<IkReal> x10312 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x10312.valid){
continue;
}
IkReal x10311=((1.0)*(x10312.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10311)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10310);
rxp0_2=(py*r00);
rxp1_0=(r21*x10310);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10311)));
IkReal gconst10=((1.0)*r00);
IkReal gconst11=((1.0)*r01);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10315=IKPowWithIntegerCheck(((((-1.0)*gconst10*r00))+(((-1.0)*gconst11*r01))),-1);
if(!x10315.valid){
continue;
}
IkReal x10313=x10315.value;
IkReal x10314=((1.0)*sj0*x10313);
cj4array[0]=((((-1.0)*sj1*sj2*x10314))+(((-1.0)*cj1*cj2*x10314)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10316=IKsin(j4);
IkReal x10317=IKcos(j4);
IkReal x10318=((1.0)*gconst10);
IkReal x10319=((1.0)*gconst11*r21);
evalcond[0]=((-1.0)*r12*x10316);
evalcond[1]=(sj0+((r12*x10317)));
evalcond[2]=((((-1.0)*x10316*x10319))+(((-1.0)*r20*x10316*x10318)));
evalcond[3]=((((-1.0)*gconst11*r01*x10316))+(((-1.0)*r00*x10316*x10318)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r20*x10317*x10318))+(((-1.0)*x10317*x10319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10321=IKPowWithIntegerCheck(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21))),-1);
if(!x10321.valid){
continue;
}
IkReal x10320=x10321.value;
cj4array[0]=((((-1.0)*cj1*sj2*x10320))+((cj2*sj1*x10320)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10322=IKsin(j4);
IkReal x10323=IKcos(j4);
IkReal x10324=(gconst11*r01);
IkReal x10325=((1.0)*gconst10*r00);
IkReal x10326=((1.0)*x10322);
evalcond[0]=((-1.0)*r12*x10322);
evalcond[1]=(sj0+((r12*x10323)));
evalcond[2]=((((-1.0)*gconst10*r20*x10326))+(((-1.0)*gconst11*r21*x10326)));
evalcond[3]=((((-1.0)*x10324*x10326))+(((-1.0)*x10322*x10325)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*x10323*x10324))+((sj0*sj1*sj2))+(((-1.0)*x10323*x10325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10327=IKPowWithIntegerCheck(r12,-1);
if(!x10327.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10327.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10328=IKsin(j4);
IkReal x10329=IKcos(j4);
IkReal x10330=(gconst10*r00);
IkReal x10331=(gconst11*r21);
IkReal x10332=(gconst10*r20);
IkReal x10333=(gconst11*r01);
IkReal x10334=((1.0)*x10329);
IkReal x10335=((1.0)*x10328);
evalcond[0]=((-1.0)*r12*x10328);
evalcond[1]=((((-1.0)*x10331*x10335))+(((-1.0)*x10332*x10335)));
evalcond[2]=((((-1.0)*x10333*x10335))+(((-1.0)*x10330*x10335)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x10331*x10334))+(((-1.0)*x10332*x10334)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*x10333*x10334))+(((-1.0)*x10330*x10334))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10336=((-1.0)*py);
CheckValue<IkReal> x10338 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x10338.valid){
continue;
}
IkReal x10337=((1.0)*(x10338.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10337)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10336);
rxp0_2=(py*r00);
rxp1_0=(r21*x10336);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10337)));
IkReal gconst10=((1.0)*r00);
IkReal gconst11=((1.0)*r01);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10339=((-1.0)*py);
CheckValue<IkReal> x10341 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x10341.valid){
continue;
}
IkReal x10340=((1.0)*(x10341.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10340)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10339);
rxp0_2=(py*r00);
rxp1_0=(r21*x10339);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10340)));
IkReal gconst10=((1.0)*r00);
IkReal gconst11=((1.0)*r01);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10342=((-1.0)*py);
CheckValue<IkReal> x10344 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x10344.valid){
continue;
}
IkReal x10343=((1.0)*(x10344.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10343)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10342);
rxp0_2=(py*r00);
rxp1_0=(r21*x10342);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10343)));
IkReal gconst10=((1.0)*r00);
IkReal gconst11=((1.0)*r01);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10347=IKPowWithIntegerCheck((((gconst10*r00))+((gconst11*r01))),-1);
if(!x10347.valid){
continue;
}
IkReal x10345=x10347.value;
IkReal x10346=((1.0)*sj0*x10345);
cj4array[0]=((((-1.0)*cj1*cj2*x10346))+(((-1.0)*sj1*sj2*x10346)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10348=IKsin(j4);
IkReal x10349=IKcos(j4);
IkReal x10350=(gconst11*r21);
IkReal x10351=(gconst10*r20);
IkReal x10352=((1.0)*x10348);
evalcond[0]=(r12*x10348);
evalcond[1]=(sj0+((r12*x10349)));
evalcond[2]=((((-1.0)*x10351*x10352))+(((-1.0)*x10350*x10352)));
evalcond[3]=((((-1.0)*gconst11*r01*x10352))+(((-1.0)*gconst10*r00*x10352)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x10349*x10351))+((x10349*x10350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10354=IKPowWithIntegerCheck((((gconst11*r21))+((gconst10*r20))),-1);
if(!x10354.valid){
continue;
}
IkReal x10353=x10354.value;
cj4array[0]=(((cj2*sj1*x10353))+(((-1.0)*cj1*sj2*x10353)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10355=IKsin(j4);
IkReal x10356=IKcos(j4);
IkReal x10357=(gconst10*r00);
IkReal x10358=(gconst11*r01);
IkReal x10359=((1.0)*x10355);
evalcond[0]=(r12*x10355);
evalcond[1]=(sj0+((r12*x10356)));
evalcond[2]=((((-1.0)*gconst11*r21*x10359))+(((-1.0)*gconst10*r20*x10359)));
evalcond[3]=((((-1.0)*x10357*x10359))+(((-1.0)*x10358*x10359)));
evalcond[4]=(((cj1*cj2*sj0))+((sj0*sj1*sj2))+((x10356*x10358))+((x10356*x10357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10360=IKPowWithIntegerCheck(r12,-1);
if(!x10360.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10360.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10361=IKsin(j4);
IkReal x10362=IKcos(j4);
IkReal x10363=(gconst11*r21);
IkReal x10364=(gconst11*r01);
IkReal x10365=(gconst10*x10362);
IkReal x10366=((1.0)*x10361);
evalcond[0]=(r12*x10361);
evalcond[1]=((((-1.0)*gconst10*r20*x10366))+(((-1.0)*x10363*x10366)));
evalcond[2]=((((-1.0)*x10364*x10366))+(((-1.0)*gconst10*r00*x10366)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x10362*x10363))+((r20*x10365)));
evalcond[4]=(((cj1*cj2*sj0))+((r00*x10365))+((x10362*x10364))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10368=IKPowWithIntegerCheck(r12,-1);
if(!x10368.valid){
continue;
}
IkReal x10367=x10368.value;
CheckValue<IkReal> x10369=IKPowWithIntegerCheck(sj3,-1);
if(!x10369.valid){
continue;
}
if( IKabs((x10367*(x10369.value)*(((((-1.0)*cj0*cj1*sj2))+((cj0*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x10367)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10367*(x10369.value)*(((((-1.0)*cj0*cj1*sj2))+((cj0*cj2*sj1))))))+IKsqr(((-1.0)*sj0*x10367))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10367*(x10369.value)*(((((-1.0)*cj0*cj1*sj2))+((cj0*cj2*sj1))))), ((-1.0)*sj0*x10367));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10370=IKsin(j4);
IkReal x10371=IKcos(j4);
IkReal x10372=(gconst11*sj3);
IkReal x10373=(gconst11*r21);
IkReal x10374=((1.0)*cj2);
IkReal x10375=(cj0*cj1);
IkReal x10376=(cj2*sj0);
IkReal x10377=(sj1*sj2);
IkReal x10378=((1.0)*cj3);
IkReal x10379=(gconst10*r01);
IkReal x10380=(gconst10*sj3);
IkReal x10381=(cj3*gconst11);
IkReal x10382=(cj1*sj2);
IkReal x10383=((1.0)*x10370);
IkReal x10384=(r00*x10371);
IkReal x10385=(r01*x10371);
IkReal x10386=(gconst10*r20*x10371);
evalcond[0]=(sj0+((r12*x10371)));
evalcond[1]=((((-1.0)*gconst10*r20*x10383))+(((-1.0)*x10373*x10383)));
evalcond[2]=((((-1.0)*gconst11*r01*x10383))+cj0+(((-1.0)*gconst10*r00*x10383)));
evalcond[3]=(((sj2*x10375))+(((-1.0)*cj0*sj1*x10374))+((r12*sj3*x10370)));
evalcond[4]=((((-1.0)*x10374*x10375))+(((-1.0)*cj0*x10377))+(((-1.0)*r12*x10370*x10378)));
evalcond[5]=(((r21*x10371*x10372))+(((-1.0)*gconst10*r21*x10378))+x10377+((cj1*cj2))+((r20*x10371*x10380))+((r20*x10381)));
evalcond[6]=((((-1.0)*x10371*x10373*x10378))+((r20*x10372))+x10382+(((-1.0)*r21*x10380))+(((-1.0)*x10378*x10386))+(((-1.0)*sj1*x10374)));
evalcond[7]=(((x10372*x10385))+((x10380*x10384))+((sj1*x10376))+(((-1.0)*x10378*x10379))+(((-1.0)*sj0*x10382))+((r00*x10381)));
evalcond[8]=(((r00*x10372))+(((-1.0)*sj3*x10379))+((cj1*x10376))+(((-1.0)*gconst11*x10378*x10385))+((sj0*x10377))+(((-1.0)*gconst10*x10378*x10384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10387=((1.0)*gconst11);
CheckValue<IkReal> x10388=IKPowWithIntegerCheck(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x10387))),-1);
if(!x10388.valid){
continue;
}
CheckValue<IkReal> x10389=IKPowWithIntegerCheck((((gconst10*r20*sj3))+((gconst11*r21*sj3))),-1);
if(!x10389.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10388.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10389.value)*(((((-1.0)*cj3*r20*x10387))+(((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))+((cj3*gconst10*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10388.value)))+IKsqr(((x10389.value)*(((((-1.0)*cj3*r20*x10387))+(((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))+((cj3*gconst10*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10388.value)), ((x10389.value)*(((((-1.0)*cj3*r20*x10387))+(((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))+((cj3*gconst10*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10390=IKsin(j4);
IkReal x10391=IKcos(j4);
IkReal x10392=(gconst11*sj3);
IkReal x10393=(gconst11*r21);
IkReal x10394=((1.0)*cj2);
IkReal x10395=(cj0*cj1);
IkReal x10396=(cj2*sj0);
IkReal x10397=(sj1*sj2);
IkReal x10398=((1.0)*cj3);
IkReal x10399=(gconst10*r01);
IkReal x10400=(gconst10*sj3);
IkReal x10401=(cj3*gconst11);
IkReal x10402=(cj1*sj2);
IkReal x10403=((1.0)*x10390);
IkReal x10404=(r00*x10391);
IkReal x10405=(r01*x10391);
IkReal x10406=(gconst10*r20*x10391);
evalcond[0]=(sj0+((r12*x10391)));
evalcond[1]=((((-1.0)*gconst10*r20*x10403))+(((-1.0)*x10393*x10403)));
evalcond[2]=(cj0+(((-1.0)*gconst11*r01*x10403))+(((-1.0)*gconst10*r00*x10403)));
evalcond[3]=((((-1.0)*cj0*sj1*x10394))+((r12*sj3*x10390))+((sj2*x10395)));
evalcond[4]=((((-1.0)*r12*x10390*x10398))+(((-1.0)*cj0*x10397))+(((-1.0)*x10394*x10395)));
evalcond[5]=((((-1.0)*gconst10*r21*x10398))+((r20*x10391*x10400))+((r21*x10391*x10392))+x10397+((r20*x10401))+((cj1*cj2)));
evalcond[6]=((((-1.0)*x10391*x10393*x10398))+(((-1.0)*x10398*x10406))+x10402+(((-1.0)*sj1*x10394))+(((-1.0)*r21*x10400))+((r20*x10392)));
evalcond[7]=((((-1.0)*x10398*x10399))+((x10400*x10404))+((r00*x10401))+(((-1.0)*sj0*x10402))+((x10392*x10405))+((sj1*x10396)));
evalcond[8]=(((sj0*x10397))+(((-1.0)*gconst10*x10398*x10404))+(((-1.0)*gconst11*x10398*x10405))+((cj1*x10396))+((r00*x10392))+(((-1.0)*sj3*x10399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10407=IKPowWithIntegerCheck(((((-1.0)*gconst10*r00))+(((-1.0)*gconst11*r01))),-1);
if(!x10407.valid){
continue;
}
CheckValue<IkReal> x10408=IKPowWithIntegerCheck(r12,-1);
if(!x10408.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10407.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10408.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10407.value)))+IKsqr(((-1.0)*sj0*(x10408.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10407.value)), ((-1.0)*sj0*(x10408.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10409=IKsin(j4);
IkReal x10410=IKcos(j4);
IkReal x10411=(gconst11*sj3);
IkReal x10412=(gconst11*r21);
IkReal x10413=((1.0)*cj2);
IkReal x10414=(cj0*cj1);
IkReal x10415=(cj2*sj0);
IkReal x10416=(sj1*sj2);
IkReal x10417=((1.0)*cj3);
IkReal x10418=(gconst10*r01);
IkReal x10419=(gconst10*sj3);
IkReal x10420=(cj3*gconst11);
IkReal x10421=(cj1*sj2);
IkReal x10422=((1.0)*x10409);
IkReal x10423=(r00*x10410);
IkReal x10424=(r01*x10410);
IkReal x10425=(gconst10*r20*x10410);
evalcond[0]=(sj0+((r12*x10410)));
evalcond[1]=((((-1.0)*x10412*x10422))+(((-1.0)*gconst10*r20*x10422)));
evalcond[2]=(cj0+(((-1.0)*gconst10*r00*x10422))+(((-1.0)*gconst11*r01*x10422)));
evalcond[3]=(((r12*sj3*x10409))+((sj2*x10414))+(((-1.0)*cj0*sj1*x10413)));
evalcond[4]=((((-1.0)*r12*x10409*x10417))+(((-1.0)*x10413*x10414))+(((-1.0)*cj0*x10416)));
evalcond[5]=((((-1.0)*gconst10*r21*x10417))+((r20*x10410*x10419))+x10416+((cj1*cj2))+((r20*x10420))+((r21*x10410*x10411)));
evalcond[6]=((((-1.0)*x10410*x10412*x10417))+(((-1.0)*sj1*x10413))+(((-1.0)*x10417*x10425))+x10421+((r20*x10411))+(((-1.0)*r21*x10419)));
evalcond[7]=(((r00*x10420))+((x10411*x10424))+(((-1.0)*sj0*x10421))+((x10419*x10423))+((sj1*x10415))+(((-1.0)*x10417*x10418)));
evalcond[8]=(((r00*x10411))+(((-1.0)*gconst11*x10417*x10424))+(((-1.0)*gconst10*x10417*x10423))+(((-1.0)*sj3*x10418))+((cj1*x10415))+((sj0*x10416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10429 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x10429.valid){
continue;
}
IkReal x10426=((1.0)*(x10429.value));
IkReal x10427=x9885;
IkReal x10428=((1.0)*x10427);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10426)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10426)));
IkReal gconst10=(r00*x10428);
IkReal gconst11=(r01*x10428);
IkReal x10430=r02*r02;
IkReal x10431=((1.0)*sj0);
IkReal x10432=(cj0*r12);
CheckValue<IkReal> x10436=IKPowWithIntegerCheck(((-1.0)+x10430),-1);
if(!x10436.valid){
continue;
}
IkReal x10433=x10436.value;
if((((1.0)+(((-1.0)*x10430)))) < -0.00001)
continue;
IkReal x10434=IKsqrt(((1.0)+(((-1.0)*x10430))));
IkReal x10435=(x10433*x10434);
j4eval[0]=((IKabs((x10432+(((-1.0)*r02*x10431)))))+(IKabs(((((-1.0)*x10430*x10431*x10435))+((sj0*x10435))+((r02*x10432*x10435))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10437=(r02*sj3);
IkReal x10438=(gconst10*r21);
IkReal x10439=(cj3*r20);
IkReal x10440=(gconst11*r20);
IkReal x10441=(cj3*gconst11);
IkReal x10442=(cj2*sj1);
IkReal x10443=(cj1*sj2);
CheckValue<IkReal> x10444=IKPowWithIntegerCheck((((gconst11*r01*r21*x10441))+((gconst10*gconst11*r01*x10439))+((r00*x10438*x10441))+((r00*x10439*(gconst10*gconst10)))),-1);
if(!x10444.valid){
continue;
}
CheckValue<IkReal> x10445=IKPowWithIntegerCheck(((((-1.0)*gconst10*x10439))+(((-1.0)*r21*x10441))),-1);
if(!x10445.valid){
continue;
}
if( IKabs(((x10444.value)*((((cj0*gconst10*x10439))+((x10437*x10440))+((cj0*r21*x10441))+(((-1.0)*r02*x10442))+((r02*x10443))+(((-1.0)*x10437*x10438)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10445.value)*(((((-1.0)*x10443))+(((-1.0)*sj3*x10440))+((sj3*x10438))+x10442)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10444.value)*((((cj0*gconst10*x10439))+((x10437*x10440))+((cj0*r21*x10441))+(((-1.0)*r02*x10442))+((r02*x10443))+(((-1.0)*x10437*x10438))))))+IKsqr(((x10445.value)*(((((-1.0)*x10443))+(((-1.0)*sj3*x10440))+((sj3*x10438))+x10442))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10444.value)*((((cj0*gconst10*x10439))+((x10437*x10440))+((cj0*r21*x10441))+(((-1.0)*r02*x10442))+((r02*x10443))+(((-1.0)*x10437*x10438))))), ((x10445.value)*(((((-1.0)*x10443))+(((-1.0)*sj3*x10440))+((sj3*x10438))+x10442))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10446=IKsin(j4);
IkReal x10447=IKcos(j4);
IkReal x10448=(gconst11*sj3);
IkReal x10449=(gconst11*r21);
IkReal x10450=(cj2*sj0);
IkReal x10451=((1.0)*cj3);
IkReal x10452=(sj1*sj2);
IkReal x10453=(gconst10*r01);
IkReal x10454=((1.0)*cj0);
IkReal x10455=(gconst10*r11);
IkReal x10456=(cj3*gconst11);
IkReal x10457=(cj1*cj2);
IkReal x10458=((1.0)*sj3);
IkReal x10459=(cj2*sj1);
IkReal x10460=(gconst10*r21);
IkReal x10461=(cj1*sj2);
IkReal x10462=((1.0)*x10446);
IkReal x10463=(r01*x10447);
IkReal x10464=(gconst10*x10447);
IkReal x10465=(sj3*x10446);
IkReal x10466=(r11*x10447);
IkReal x10467=(r10*x10464);
evalcond[0]=((((-1.0)*gconst10*r20*x10462))+(((-1.0)*x10449*x10462)));
evalcond[1]=(cj0+((r02*x10447))+(((-1.0)*gconst11*r01*x10462))+(((-1.0)*gconst10*r00*x10462)));
evalcond[2]=((((-1.0)*gconst10*r10*x10462))+sj0+((r12*x10447))+(((-1.0)*gconst11*r11*x10462)));
evalcond[3]=(((r21*x10447*x10448))+((r20*sj3*x10464))+x10452+x10457+(((-1.0)*x10451*x10460))+((r20*x10456)));
evalcond[4]=((((-1.0)*r20*x10451*x10464))+(((-1.0)*x10459))+(((-1.0)*x10447*x10449*x10451))+((r20*x10448))+x10461+(((-1.0)*x10458*x10460)));
evalcond[5]=(((r00*x10456))+((sj1*x10450))+((r00*sj3*x10464))+((x10448*x10463))+(((-1.0)*x10451*x10453))+((r02*x10465))+(((-1.0)*sj0*x10461)));
evalcond[6]=(((r10*x10456))+((r12*x10465))+((cj0*x10461))+((x10448*x10466))+(((-1.0)*x10451*x10455))+((sj3*x10467))+(((-1.0)*x10454*x10459)));
evalcond[7]=((((-1.0)*r00*x10451*x10464))+(((-1.0)*x10453*x10458))+((sj0*x10452))+((r00*x10448))+(((-1.0)*gconst11*x10451*x10463))+(((-1.0)*r02*x10446*x10451))+((cj1*x10450)));
evalcond[8]=((((-1.0)*x10455*x10458))+(((-1.0)*x10452*x10454))+(((-1.0)*r12*x10446*x10451))+(((-1.0)*gconst11*x10451*x10466))+((r10*x10448))+(((-1.0)*x10451*x10467))+(((-1.0)*x10454*x10457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10468=((1.0)*sj0);
CheckValue<IkReal> x10469=IKPowWithIntegerCheck(IKsign((((gconst11*r20))+(((-1.0)*gconst10*r21)))),-1);
if(!x10469.valid){
continue;
}
CheckValue<IkReal> x10470 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x10468))+((cj0*r12)))),IkReal((((cj0*gconst10*r10))+((cj0*gconst11*r11))+(((-1.0)*gconst11*r01*x10468))+(((-1.0)*gconst10*r00*x10468)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10469.value)))+(x10470.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10471=IKsin(j4);
IkReal x10472=IKcos(j4);
IkReal x10473=(gconst11*sj3);
IkReal x10474=(gconst11*r21);
IkReal x10475=(cj2*sj0);
IkReal x10476=((1.0)*cj3);
IkReal x10477=(sj1*sj2);
IkReal x10478=(gconst10*r01);
IkReal x10479=((1.0)*cj0);
IkReal x10480=(gconst10*r11);
IkReal x10481=(cj3*gconst11);
IkReal x10482=(cj1*cj2);
IkReal x10483=((1.0)*sj3);
IkReal x10484=(cj2*sj1);
IkReal x10485=(gconst10*r21);
IkReal x10486=(cj1*sj2);
IkReal x10487=((1.0)*x10471);
IkReal x10488=(r01*x10472);
IkReal x10489=(gconst10*x10472);
IkReal x10490=(sj3*x10471);
IkReal x10491=(r11*x10472);
IkReal x10492=(r10*x10489);
evalcond[0]=((((-1.0)*gconst10*r20*x10487))+(((-1.0)*x10474*x10487)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r01*x10487))+(((-1.0)*gconst10*r00*x10487))+((r02*x10472)));
evalcond[2]=(sj0+((r12*x10472))+(((-1.0)*gconst11*r11*x10487))+(((-1.0)*gconst10*r10*x10487)));
evalcond[3]=((((-1.0)*x10476*x10485))+((r20*sj3*x10489))+((r21*x10472*x10473))+x10477+x10482+((r20*x10481)));
evalcond[4]=((((-1.0)*r20*x10476*x10489))+((r20*x10473))+(((-1.0)*x10484))+(((-1.0)*x10483*x10485))+x10486+(((-1.0)*x10472*x10474*x10476)));
evalcond[5]=(((r00*x10481))+(((-1.0)*x10476*x10478))+((x10473*x10488))+((sj1*x10475))+((r02*x10490))+((r00*sj3*x10489))+(((-1.0)*sj0*x10486)));
evalcond[6]=(((r10*x10481))+((x10473*x10491))+(((-1.0)*x10476*x10480))+((r12*x10490))+((sj3*x10492))+((cj0*x10486))+(((-1.0)*x10479*x10484)));
evalcond[7]=((((-1.0)*gconst11*x10476*x10488))+((sj0*x10477))+((r00*x10473))+(((-1.0)*x10478*x10483))+(((-1.0)*r02*x10471*x10476))+(((-1.0)*r00*x10476*x10489))+((cj1*x10475)));
evalcond[8]=((((-1.0)*x10477*x10479))+(((-1.0)*gconst11*x10476*x10491))+(((-1.0)*x10476*x10492))+(((-1.0)*x10480*x10483))+(((-1.0)*x10479*x10482))+(((-1.0)*r12*x10471*x10476))+((r10*x10473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10493=((1.0)*sj0);
CheckValue<IkReal> x10494=IKPowWithIntegerCheck(IKsign((((gconst11*r20))+(((-1.0)*gconst10*r21)))),-1);
if(!x10494.valid){
continue;
}
CheckValue<IkReal> x10495 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x10493))+((cj0*r12)))),IkReal(((((-1.0)*gconst10*r00*x10493))+(((-1.0)*gconst11*r01*x10493))+((cj0*gconst10*r10))+((cj0*gconst11*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10494.value)))+(x10495.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10496=IKsin(j4);
IkReal x10497=IKcos(j4);
IkReal x10498=(gconst11*sj3);
IkReal x10499=(gconst11*r21);
IkReal x10500=(cj2*sj0);
IkReal x10501=((1.0)*cj3);
IkReal x10502=(sj1*sj2);
IkReal x10503=(gconst10*r01);
IkReal x10504=((1.0)*cj0);
IkReal x10505=(gconst10*r11);
IkReal x10506=(cj3*gconst11);
IkReal x10507=(cj1*cj2);
IkReal x10508=((1.0)*sj3);
IkReal x10509=(cj2*sj1);
IkReal x10510=(gconst10*r21);
IkReal x10511=(cj1*sj2);
IkReal x10512=((1.0)*x10496);
IkReal x10513=(r01*x10497);
IkReal x10514=(gconst10*x10497);
IkReal x10515=(sj3*x10496);
IkReal x10516=(r11*x10497);
IkReal x10517=(r10*x10514);
evalcond[0]=((((-1.0)*gconst10*r20*x10512))+((r22*x10497))+(((-1.0)*x10499*x10512)));
evalcond[1]=(cj0+(((-1.0)*gconst10*r00*x10512))+(((-1.0)*gconst11*r01*x10512))+((r02*x10497)));
evalcond[2]=(sj0+((r12*x10497))+(((-1.0)*gconst11*r11*x10512))+(((-1.0)*gconst10*r10*x10512)));
evalcond[3]=(((r21*x10497*x10498))+((r20*x10506))+(((-1.0)*x10501*x10510))+x10502+x10507+((r20*sj3*x10514))+((r22*x10515)));
evalcond[4]=((((-1.0)*x10501*x10503))+((r00*x10506))+((sj1*x10500))+((x10498*x10513))+((r00*sj3*x10514))+((r02*x10515))+(((-1.0)*sj0*x10511)));
evalcond[5]=(((r12*x10515))+(((-1.0)*x10501*x10505))+((cj0*x10511))+((r10*x10506))+((sj3*x10517))+((x10498*x10516))+(((-1.0)*x10504*x10509)));
evalcond[6]=((((-1.0)*r22*x10496*x10501))+(((-1.0)*r20*x10501*x10514))+(((-1.0)*x10508*x10510))+x10511+(((-1.0)*x10509))+((r20*x10498))+(((-1.0)*x10497*x10499*x10501)));
evalcond[7]=(((cj1*x10500))+(((-1.0)*x10503*x10508))+((sj0*x10502))+(((-1.0)*r02*x10496*x10501))+(((-1.0)*r00*x10501*x10514))+(((-1.0)*gconst11*x10501*x10513))+((r00*x10498)));
evalcond[8]=((((-1.0)*x10501*x10517))+((r10*x10498))+(((-1.0)*x10502*x10504))+(((-1.0)*x10504*x10507))+(((-1.0)*x10505*x10508))+(((-1.0)*r12*x10496*x10501))+(((-1.0)*gconst11*x10501*x10516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10518=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r01))+((gconst11*r00)))),-1);
if(!x10518.valid){
continue;
}
CheckValue<IkReal> x10519 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst10*r20*sj0))+((gconst11*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10518.value)))+(x10519.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10520=IKsin(j4);
IkReal x10521=IKcos(j4);
IkReal x10522=(gconst11*sj3);
IkReal x10523=(gconst11*r21);
IkReal x10524=(cj2*sj0);
IkReal x10525=((1.0)*cj3);
IkReal x10526=(sj1*sj2);
IkReal x10527=(gconst10*r01);
IkReal x10528=((1.0)*cj0);
IkReal x10529=(gconst10*r11);
IkReal x10530=(cj3*gconst11);
IkReal x10531=(cj1*cj2);
IkReal x10532=((1.0)*sj3);
IkReal x10533=(cj2*sj1);
IkReal x10534=(gconst10*r21);
IkReal x10535=(cj1*sj2);
IkReal x10536=((1.0)*x10520);
IkReal x10537=(r01*x10521);
IkReal x10538=(gconst10*x10521);
IkReal x10539=(sj3*x10520);
IkReal x10540=(r11*x10521);
IkReal x10541=(r10*x10538);
evalcond[0]=(((r22*x10521))+(((-1.0)*x10523*x10536))+(((-1.0)*gconst10*r20*x10536)));
evalcond[1]=((((-1.0)*gconst11*r01*x10536))+cj0+((r02*x10521))+(((-1.0)*gconst10*r00*x10536)));
evalcond[2]=(sj0+(((-1.0)*gconst11*r11*x10536))+((r12*x10521))+(((-1.0)*gconst10*r10*x10536)));
evalcond[3]=(((r22*x10539))+x10526+x10531+((r20*sj3*x10538))+((r20*x10530))+(((-1.0)*x10525*x10534))+((r21*x10521*x10522)));
evalcond[4]=(((r02*x10539))+((sj1*x10524))+(((-1.0)*sj0*x10535))+((r00*sj3*x10538))+((x10522*x10537))+((r00*x10530))+(((-1.0)*x10525*x10527)));
evalcond[5]=(((r10*x10530))+((cj0*x10535))+((sj3*x10541))+((r12*x10539))+(((-1.0)*x10528*x10533))+((x10522*x10540))+(((-1.0)*x10525*x10529)));
evalcond[6]=((((-1.0)*r22*x10520*x10525))+(((-1.0)*x10521*x10523*x10525))+(((-1.0)*r20*x10525*x10538))+(((-1.0)*x10533))+x10535+(((-1.0)*x10532*x10534))+((r20*x10522)));
evalcond[7]=(((sj0*x10526))+(((-1.0)*gconst11*x10525*x10537))+((r00*x10522))+((cj1*x10524))+(((-1.0)*r00*x10525*x10538))+(((-1.0)*r02*x10520*x10525))+(((-1.0)*x10527*x10532)));
evalcond[8]=((((-1.0)*x10526*x10528))+((r10*x10522))+(((-1.0)*gconst11*x10525*x10540))+(((-1.0)*r12*x10520*x10525))+(((-1.0)*x10529*x10532))+(((-1.0)*x10528*x10531))+(((-1.0)*x10525*x10541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10542=IKPowWithIntegerCheck(IKsign((((gconst10*r11))+(((-1.0)*gconst11*r10)))),-1);
if(!x10542.valid){
continue;
}
CheckValue<IkReal> x10543 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst11*r21))+((cj0*gconst10*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10542.value)))+(x10543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10544=IKsin(j4);
IkReal x10545=IKcos(j4);
IkReal x10546=(gconst11*sj3);
IkReal x10547=(gconst11*r21);
IkReal x10548=(cj2*sj0);
IkReal x10549=((1.0)*cj3);
IkReal x10550=(sj1*sj2);
IkReal x10551=(gconst10*r01);
IkReal x10552=((1.0)*cj0);
IkReal x10553=(gconst10*r11);
IkReal x10554=(cj3*gconst11);
IkReal x10555=(cj1*cj2);
IkReal x10556=((1.0)*sj3);
IkReal x10557=(cj2*sj1);
IkReal x10558=(gconst10*r21);
IkReal x10559=(cj1*sj2);
IkReal x10560=((1.0)*x10544);
IkReal x10561=(r01*x10545);
IkReal x10562=(gconst10*x10545);
IkReal x10563=(sj3*x10544);
IkReal x10564=(r11*x10545);
IkReal x10565=(r10*x10562);
evalcond[0]=((((-1.0)*x10547*x10560))+((r22*x10545))+(((-1.0)*gconst10*r20*x10560)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r01*x10560))+((r02*x10545))+(((-1.0)*gconst10*r00*x10560)));
evalcond[2]=(sj0+((r12*x10545))+(((-1.0)*gconst10*r10*x10560))+(((-1.0)*gconst11*r11*x10560)));
evalcond[3]=(((r20*sj3*x10562))+((r20*x10554))+x10555+x10550+((r22*x10563))+((r21*x10545*x10546))+(((-1.0)*x10549*x10558)));
evalcond[4]=(((x10546*x10561))+((r00*sj3*x10562))+((sj1*x10548))+(((-1.0)*sj0*x10559))+((r02*x10563))+((r00*x10554))+(((-1.0)*x10549*x10551)));
evalcond[5]=(((x10546*x10564))+((r10*x10554))+((cj0*x10559))+((r12*x10563))+(((-1.0)*x10552*x10557))+(((-1.0)*x10549*x10553))+((sj3*x10565)));
evalcond[6]=((((-1.0)*x10545*x10547*x10549))+(((-1.0)*r20*x10549*x10562))+(((-1.0)*x10556*x10558))+(((-1.0)*x10557))+x10559+((r20*x10546))+(((-1.0)*r22*x10544*x10549)));
evalcond[7]=((((-1.0)*gconst11*x10549*x10561))+(((-1.0)*r02*x10544*x10549))+(((-1.0)*x10551*x10556))+((sj0*x10550))+((r00*x10546))+(((-1.0)*r00*x10549*x10562))+((cj1*x10548)));
evalcond[8]=((((-1.0)*gconst11*x10549*x10564))+(((-1.0)*r12*x10544*x10549))+(((-1.0)*x10550*x10552))+(((-1.0)*x10549*x10565))+((r10*x10546))+(((-1.0)*x10553*x10556))+(((-1.0)*x10552*x10555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x10566=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x10566;
j4eval[1]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x10566);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x10567=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x10567;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x10567);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x10568=cj5*cj5;
IkReal x10569=(r00*sj3);
IkReal x10570=((1.0)*sj3);
IkReal x10571=(cj5*sj5);
IkReal x10572=((((-1.0)*r01*r21*x10568*x10570))+(((-1.0)*r21*x10569*x10571))+((r20*x10568*x10569))+(((-1.0)*r20*x10569))+(((-1.0)*r02*r22*x10570))+(((-1.0)*r01*r20*x10570*x10571)));
j4eval[0]=x10572;
j4eval[1]=IKsign(x10572);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x10573=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x10573;
j4eval[1]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x10573);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x10574=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x10574;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x10574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x10575=cj5*cj5;
IkReal x10576=r00*r00;
IkReal x10577=(cj5*r01);
IkReal x10578=(r00*sj5);
IkReal x10579=((((-2.0)*x10577*x10578))+(((-1.0)*(r02*r02)))+(((-1.0)*x10576))+((x10575*x10576))+(((-1.0)*x10575*(r01*r01))));
j4eval[0]=x10579;
j4eval[1]=IKsign(x10579);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x10577))+(((-1.0)*x10578))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10580=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10580);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10580);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10581=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10581);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10581);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x10582=((1.0)*sj5);
IkReal x10583=((1.0)*cj5);
j4eval[0]=((((-1.0)*r01*x10583))+(((-1.0)*r00*x10582)));
j4eval[1]=((((-1.0)*r11*x10583))+(((-1.0)*r10*x10582)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10584=((1.0)*cj5);
IkReal x10585=((1.0)*sj5);
CheckValue<IkReal> x10586=IKPowWithIntegerCheck(((((-1.0)*r01*x10584))+(((-1.0)*r00*x10585))),-1);
if(!x10586.valid){
continue;
}
CheckValue<IkReal> x10587=IKPowWithIntegerCheck(((((-1.0)*r11*x10584))+(((-1.0)*r10*x10585))),-1);
if(!x10587.valid){
continue;
}
if( IKabs(((-1.0)*(x10586.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10587.value)*((((sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10586.value)))+IKsqr(((x10587.value)*((((sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10586.value)), ((x10587.value)*((((sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10588=IKsin(j4);
IkReal x10589=IKcos(j4);
IkReal x10590=((1.0)*sj1);
IkReal x10591=(cj5*r11);
IkReal x10592=(r00*sj5);
IkReal x10593=(r10*sj5);
IkReal x10594=((1.0)*cj5*r01);
IkReal x10595=((1.0)*x10589);
IkReal x10596=((1.0)*x10588);
evalcond[0]=(r22*x10589);
evalcond[1]=((((-1.0)*cj2*x10590))+((cj1*sj2))+(((-1.0)*r22*x10596)));
evalcond[2]=((((-1.0)*x10593*x10596))+(((-1.0)*x10591*x10596)));
evalcond[3]=((((-1.0)*x10592*x10595))+(((-1.0)*x10589*x10594)));
evalcond[4]=((1.0)+(((-1.0)*x10592*x10596))+(((-1.0)*x10588*x10594)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*x10593*x10595))+(((-1.0)*x10591*x10595))+(((-1.0)*sj2*x10590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10597=IKPowWithIntegerCheck(r22,-1);
if(!x10597.valid){
continue;
}
CheckValue<IkReal> x10598=IKPowWithIntegerCheck(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))),-1);
if(!x10598.valid){
continue;
}
if( IKabs(((x10597.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10598.value)*((((sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10597.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))))))+IKsqr(((x10598.value)*((((sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10597.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))))), ((x10598.value)*((((sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10599=IKsin(j4);
IkReal x10600=IKcos(j4);
IkReal x10601=((1.0)*sj1);
IkReal x10602=(cj5*r11);
IkReal x10603=(r00*sj5);
IkReal x10604=(r10*sj5);
IkReal x10605=((1.0)*cj5*r01);
IkReal x10606=((1.0)*x10600);
IkReal x10607=((1.0)*x10599);
evalcond[0]=(r22*x10600);
evalcond[1]=((((-1.0)*cj2*x10601))+((cj1*sj2))+(((-1.0)*r22*x10607)));
evalcond[2]=((((-1.0)*x10604*x10607))+(((-1.0)*x10602*x10607)));
evalcond[3]=((((-1.0)*x10600*x10605))+(((-1.0)*x10603*x10606)));
evalcond[4]=((1.0)+(((-1.0)*x10603*x10607))+(((-1.0)*x10599*x10605)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*x10604*x10606))+(((-1.0)*sj2*x10601))+(((-1.0)*x10602*x10606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10608=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10608);
rxp0_2=(py*r00);
rxp1_0=(r21*x10608);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x10609=((1.0)*sj5);
IkReal x10610=((1.0)*cj5);
j4eval[0]=((((-1.0)*r00*x10609))+(((-1.0)*r01*x10610)));
j4eval[1]=((((-1.0)*r21*x10610))+(((-1.0)*r20*x10609)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10611=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10611);
rxp0_2=(py*r00);
rxp1_0=(r21*x10611);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10612=((1.0)*sj2);
CheckValue<IkReal> x10613=IKPowWithIntegerCheck(r12,-1);
if(!x10613.valid){
continue;
}
CheckValue<IkReal> x10614=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x10614.valid){
continue;
}
if( IKabs(((x10613.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj1*x10612)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10614.value)*((((cj2*sj1))+(((-1.0)*cj1*x10612)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10613.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj1*x10612))))))+IKsqr(((x10614.value)*((((cj2*sj1))+(((-1.0)*cj1*x10612))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10613.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj1*x10612))))), ((x10614.value)*((((cj2*sj1))+(((-1.0)*cj1*x10612))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10615=IKsin(j4);
IkReal x10616=IKcos(j4);
IkReal x10617=((1.0)*cj5);
IkReal x10618=((1.0)*sj1);
IkReal x10619=((1.0)*x10615);
IkReal x10620=((1.0)*sj5*x10616);
evalcond[0]=(r12*x10616);
evalcond[1]=((((-1.0)*r21*x10615*x10617))+(((-1.0)*r20*sj5*x10619)));
evalcond[2]=((((-1.0)*r01*x10616*x10617))+(((-1.0)*r00*x10620)));
evalcond[3]=((((-1.0)*cj1*cj2))+(((-1.0)*r12*x10619))+(((-1.0)*sj2*x10618)));
evalcond[4]=((1.0)+(((-1.0)*r01*x10615*x10617))+(((-1.0)*r00*sj5*x10619)));
evalcond[5]=((((-1.0)*cj2*x10618))+((cj1*sj2))+(((-1.0)*r20*x10620))+(((-1.0)*r21*x10616*x10617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10621=((1.0)*cj5);
IkReal x10622=((1.0)*sj5);
CheckValue<IkReal> x10623=IKPowWithIntegerCheck(((((-1.0)*r00*x10622))+(((-1.0)*r01*x10621))),-1);
if(!x10623.valid){
continue;
}
CheckValue<IkReal> x10624=IKPowWithIntegerCheck(((((-1.0)*r20*x10622))+(((-1.0)*r21*x10621))),-1);
if(!x10624.valid){
continue;
}
if( IKabs(((-1.0)*(x10623.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10624.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10623.value)))+IKsqr(((x10624.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10623.value)), ((x10624.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10625=IKsin(j4);
IkReal x10626=IKcos(j4);
IkReal x10627=((1.0)*cj5);
IkReal x10628=((1.0)*sj1);
IkReal x10629=((1.0)*x10625);
IkReal x10630=((1.0)*sj5*x10626);
evalcond[0]=(r12*x10626);
evalcond[1]=((((-1.0)*r21*x10625*x10627))+(((-1.0)*r20*sj5*x10629)));
evalcond[2]=((((-1.0)*r00*x10630))+(((-1.0)*r01*x10626*x10627)));
evalcond[3]=((((-1.0)*sj2*x10628))+(((-1.0)*r12*x10629))+(((-1.0)*cj1*cj2)));
evalcond[4]=((1.0)+(((-1.0)*r00*sj5*x10629))+(((-1.0)*r01*x10625*x10627)));
evalcond[5]=((((-1.0)*r21*x10626*x10627))+(((-1.0)*cj2*x10628))+((cj1*sj2))+(((-1.0)*r20*x10630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10631=cj5*cj5;
IkReal x10632=r00*r00;
IkReal x10633=(cj5*r01);
IkReal x10634=(r00*sj5);
CheckValue<IkReal> x10635 = IKatan2WithCheck(IkReal(((((-1.0)*x10633))+(((-1.0)*x10634)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10635.valid){
continue;
}
CheckValue<IkReal> x10636=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x10632))+(((-1.0)*x10631*(r01*r01)))+((x10631*x10632))+(((-2.0)*x10633*x10634)))),-1);
if(!x10636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10635.value)+(((1.5707963267949)*(x10636.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10637=IKsin(j4);
IkReal x10638=IKcos(j4);
IkReal x10639=(r00*sj5);
IkReal x10640=(cj5*r01);
IkReal x10641=(r20*sj5);
IkReal x10642=((1.0)*sj1);
IkReal x10643=(cj5*r21);
IkReal x10644=(cj5*r11);
IkReal x10645=(r10*sj5);
IkReal x10646=((1.0)*x10637);
IkReal x10647=((1.0)*x10638);
evalcond[0]=((((-1.0)*x10641*x10646))+((r22*x10638))+(((-1.0)*x10643*x10646)));
evalcond[1]=((((-1.0)*x10645*x10646))+(((-1.0)*x10644*x10646))+((r12*x10638)));
evalcond[2]=((1.0)+(((-1.0)*x10639*x10646))+(((-1.0)*x10640*x10646))+((r02*x10638)));
evalcond[3]=((((-1.0)*r02*x10646))+(((-1.0)*x10639*x10647))+(((-1.0)*x10640*x10647)));
evalcond[4]=((((-1.0)*cj2*x10642))+(((-1.0)*x10641*x10647))+((cj1*sj2))+(((-1.0)*r22*x10646))+(((-1.0)*x10643*x10647)));
evalcond[5]=((((-1.0)*sj2*x10642))+(((-1.0)*cj1*cj2))+(((-1.0)*x10645*x10647))+(((-1.0)*r12*x10646))+(((-1.0)*x10644*x10647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10648 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10648.valid){
continue;
}
CheckValue<IkReal> x10649=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x10649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10648.value)+(((1.5707963267949)*(x10649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10650=IKsin(j4);
IkReal x10651=IKcos(j4);
IkReal x10652=(r00*sj5);
IkReal x10653=(cj5*r01);
IkReal x10654=(r20*sj5);
IkReal x10655=((1.0)*sj1);
IkReal x10656=(cj5*r21);
IkReal x10657=(cj5*r11);
IkReal x10658=(r10*sj5);
IkReal x10659=((1.0)*x10650);
IkReal x10660=((1.0)*x10651);
evalcond[0]=((((-1.0)*x10656*x10659))+(((-1.0)*x10654*x10659))+((r22*x10651)));
evalcond[1]=((((-1.0)*x10657*x10659))+(((-1.0)*x10658*x10659))+((r12*x10651)));
evalcond[2]=((1.0)+(((-1.0)*x10653*x10659))+((r02*x10651))+(((-1.0)*x10652*x10659)));
evalcond[3]=((((-1.0)*x10653*x10660))+(((-1.0)*r02*x10659))+(((-1.0)*x10652*x10660)));
evalcond[4]=((((-1.0)*x10654*x10660))+(((-1.0)*r22*x10659))+((cj1*sj2))+(((-1.0)*x10656*x10660))+(((-1.0)*cj2*x10655)));
evalcond[5]=((((-1.0)*r12*x10659))+(((-1.0)*sj2*x10655))+(((-1.0)*x10658*x10660))+(((-1.0)*cj1*cj2))+(((-1.0)*x10657*x10660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10661 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10661.valid){
continue;
}
CheckValue<IkReal> x10662=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x10662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10661.value)+(((1.5707963267949)*(x10662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10663=IKsin(j4);
IkReal x10664=IKcos(j4);
IkReal x10665=(r00*sj5);
IkReal x10666=(cj5*r01);
IkReal x10667=(r20*sj5);
IkReal x10668=((1.0)*sj1);
IkReal x10669=(cj5*r21);
IkReal x10670=(cj5*r11);
IkReal x10671=(r10*sj5);
IkReal x10672=((1.0)*x10663);
IkReal x10673=((1.0)*x10664);
evalcond[0]=((((-1.0)*x10669*x10672))+((r22*x10664))+(((-1.0)*x10667*x10672)));
evalcond[1]=(((r12*x10664))+(((-1.0)*x10671*x10672))+(((-1.0)*x10670*x10672)));
evalcond[2]=((1.0)+((r02*x10664))+(((-1.0)*x10665*x10672))+(((-1.0)*x10666*x10672)));
evalcond[3]=((((-1.0)*r02*x10672))+(((-1.0)*x10665*x10673))+(((-1.0)*x10666*x10673)));
evalcond[4]=((((-1.0)*x10669*x10673))+(((-1.0)*cj2*x10668))+((cj1*sj2))+(((-1.0)*r22*x10672))+(((-1.0)*x10667*x10673)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*x10671*x10673))+(((-1.0)*x10670*x10673))+(((-1.0)*sj2*x10668))+(((-1.0)*r12*x10672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x10674=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x10674;
j4eval[1]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x10674);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x10675=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x10675;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x10675);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x10676=cj5*cj5;
IkReal x10677=r00*r00;
IkReal x10678=(r00*sj5);
IkReal x10679=(cj5*r01);
IkReal x10680=((((2.0)*x10678*x10679))+((x10676*(r01*r01)))+(((-1.0)*x10676*x10677))+(r02*r02)+x10677);
j4eval[0]=x10680;
j4eval[1]=((IKabs((x10679+x10678)))+(IKabs(r02)));
j4eval[2]=IKsign(x10680);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10681=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10681);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10681);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r11))+((r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10682=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10682);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10682);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[1]=(((cj5*r11))+((r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10683=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x10683.valid){
continue;
}
CheckValue<IkReal> x10684=IKPowWithIntegerCheck((((cj5*r11))+((r10*sj5))),-1);
if(!x10684.valid){
continue;
}
if( IKabs(((-1.0)*(x10683.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10684.value)*((((sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10683.value)))+IKsqr(((x10684.value)*((((sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10683.value)), ((x10684.value)*((((sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10685=IKcos(j4);
IkReal x10686=IKsin(j4);
IkReal x10687=(cj5*r11);
IkReal x10688=((1.0)*cj2);
IkReal x10689=(r10*sj5);
IkReal x10690=(r00*sj5);
IkReal x10691=(cj5*r01);
IkReal x10692=((1.0)*x10686);
evalcond[0]=(r22*x10685);
evalcond[1]=(((cj1*sj2))+(((-1.0)*sj1*x10688))+((r22*x10686)));
evalcond[2]=(((x10685*x10691))+((x10685*x10690)));
evalcond[3]=((((-1.0)*x10687*x10692))+(((-1.0)*x10689*x10692)));
evalcond[4]=((1.0)+(((-1.0)*x10691*x10692))+(((-1.0)*x10690*x10692)));
evalcond[5]=((((-1.0)*cj1*x10688))+(((-1.0)*sj1*sj2))+((x10685*x10689))+((x10685*x10687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10693=IKPowWithIntegerCheck(r22,-1);
if(!x10693.valid){
continue;
}
CheckValue<IkReal> x10694=IKPowWithIntegerCheck((((cj5*r11))+((r10*sj5))),-1);
if(!x10694.valid){
continue;
}
if( IKabs(((x10693.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10694.value)*((((sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10693.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x10694.value)*((((sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10693.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x10694.value)*((((sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10695=IKcos(j4);
IkReal x10696=IKsin(j4);
IkReal x10697=(cj5*r11);
IkReal x10698=((1.0)*cj2);
IkReal x10699=(r10*sj5);
IkReal x10700=(r00*sj5);
IkReal x10701=(cj5*r01);
IkReal x10702=((1.0)*x10696);
evalcond[0]=(r22*x10695);
evalcond[1]=(((cj1*sj2))+((r22*x10696))+(((-1.0)*sj1*x10698)));
evalcond[2]=(((x10695*x10701))+((x10695*x10700)));
evalcond[3]=((((-1.0)*x10699*x10702))+(((-1.0)*x10697*x10702)));
evalcond[4]=((1.0)+(((-1.0)*x10700*x10702))+(((-1.0)*x10701*x10702)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*cj1*x10698))+((x10695*x10699))+((x10695*x10697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10703=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10703);
rxp0_2=(py*r00);
rxp1_0=(r21*x10703);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10704=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10704);
rxp0_2=(py*r00);
rxp1_0=(r21*x10704);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[1]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10705=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x10705.valid){
continue;
}
CheckValue<IkReal> x10706=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x10706.valid){
continue;
}
if( IKabs(((-1.0)*(x10705.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10706.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10705.value)))+IKsqr(((x10706.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10705.value)), ((x10706.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10707=IKcos(j4);
IkReal x10708=IKsin(j4);
IkReal x10709=(cj5*r21);
IkReal x10710=((1.0)*cj2);
IkReal x10711=(r00*sj5);
IkReal x10712=(cj5*r01);
IkReal x10713=(r20*sj5);
IkReal x10714=((1.0)*x10708);
evalcond[0]=(r12*x10707);
evalcond[1]=(((x10707*x10711))+((x10707*x10712)));
evalcond[2]=((((-1.0)*cj1*x10710))+(((-1.0)*sj1*sj2))+((r12*x10708)));
evalcond[3]=((((-1.0)*x10713*x10714))+(((-1.0)*x10709*x10714)));
evalcond[4]=((1.0)+(((-1.0)*x10711*x10714))+(((-1.0)*x10712*x10714)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*sj1*x10710))+((x10707*x10709))+((x10707*x10713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10715=IKPowWithIntegerCheck(r12,-1);
if(!x10715.valid){
continue;
}
CheckValue<IkReal> x10716=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x10716.valid){
continue;
}
if( IKabs(((x10715.value)*((((sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10716.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10715.value)*((((sj1*sj2))+((cj1*cj2))))))+IKsqr(((x10716.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10715.value)*((((sj1*sj2))+((cj1*cj2))))), ((x10716.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10717=IKcos(j4);
IkReal x10718=IKsin(j4);
IkReal x10719=(cj5*r21);
IkReal x10720=((1.0)*cj2);
IkReal x10721=(r00*sj5);
IkReal x10722=(cj5*r01);
IkReal x10723=(r20*sj5);
IkReal x10724=((1.0)*x10718);
evalcond[0]=(r12*x10717);
evalcond[1]=(((x10717*x10721))+((x10717*x10722)));
evalcond[2]=(((r12*x10718))+(((-1.0)*sj1*sj2))+(((-1.0)*cj1*x10720)));
evalcond[3]=((((-1.0)*x10719*x10724))+(((-1.0)*x10723*x10724)));
evalcond[4]=((1.0)+(((-1.0)*x10721*x10724))+(((-1.0)*x10722*x10724)));
evalcond[5]=(((x10717*x10723))+((cj1*sj2))+((x10717*x10719))+(((-1.0)*sj1*x10720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10725=cj5*cj5;
IkReal x10726=r00*r00;
IkReal x10727=(r00*sj5);
IkReal x10728=(cj5*r01);
CheckValue<IkReal> x10729=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10725*x10726))+((x10725*(r01*r01)))+(r02*r02)+x10726+(((2.0)*x10727*x10728)))),-1);
if(!x10729.valid){
continue;
}
CheckValue<IkReal> x10730 = IKatan2WithCheck(IkReal((x10728+x10727)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10729.value)))+(x10730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10731=IKcos(j4);
IkReal x10732=IKsin(j4);
IkReal x10733=(r00*sj5);
IkReal x10734=(cj5*r01);
IkReal x10735=((1.0)*cj2);
IkReal x10736=(r20*sj5);
IkReal x10737=(cj5*r21);
IkReal x10738=(cj5*r11);
IkReal x10739=(r10*sj5);
IkReal x10740=((1.0)*x10732);
evalcond[0]=(((x10731*x10733))+((x10731*x10734))+((r02*x10732)));
evalcond[1]=((((-1.0)*x10737*x10740))+(((-1.0)*x10736*x10740))+((r22*x10731)));
evalcond[2]=((((-1.0)*x10738*x10740))+(((-1.0)*x10739*x10740))+((r12*x10731)));
evalcond[3]=((1.0)+((r02*x10731))+(((-1.0)*x10733*x10740))+(((-1.0)*x10734*x10740)));
evalcond[4]=(((x10731*x10737))+((x10731*x10736))+((cj1*sj2))+(((-1.0)*sj1*x10735))+((r22*x10732)));
evalcond[5]=(((x10731*x10738))+((x10731*x10739))+(((-1.0)*sj1*sj2))+(((-1.0)*cj1*x10735))+((r12*x10732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10741 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10741.valid){
continue;
}
CheckValue<IkReal> x10742=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x10742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10741.value)+(((1.5707963267949)*(x10742.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10743=IKcos(j4);
IkReal x10744=IKsin(j4);
IkReal x10745=(r00*sj5);
IkReal x10746=(cj5*r01);
IkReal x10747=((1.0)*cj2);
IkReal x10748=(r20*sj5);
IkReal x10749=(cj5*r21);
IkReal x10750=(cj5*r11);
IkReal x10751=(r10*sj5);
IkReal x10752=((1.0)*x10744);
evalcond[0]=(((x10743*x10746))+((x10743*x10745))+((r02*x10744)));
evalcond[1]=(((r22*x10743))+(((-1.0)*x10748*x10752))+(((-1.0)*x10749*x10752)));
evalcond[2]=((((-1.0)*x10750*x10752))+(((-1.0)*x10751*x10752))+((r12*x10743)));
evalcond[3]=((1.0)+(((-1.0)*x10746*x10752))+(((-1.0)*x10745*x10752))+((r02*x10743)));
evalcond[4]=(((x10743*x10749))+((x10743*x10748))+((cj1*sj2))+((r22*x10744))+(((-1.0)*sj1*x10747)));
evalcond[5]=(((x10743*x10751))+((x10743*x10750))+(((-1.0)*sj1*sj2))+(((-1.0)*cj1*x10747))+((r12*x10744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10753 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10753.valid){
continue;
}
CheckValue<IkReal> x10754=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x10754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10753.value)+(((1.5707963267949)*(x10754.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10755=IKcos(j4);
IkReal x10756=IKsin(j4);
IkReal x10757=(r00*sj5);
IkReal x10758=(cj5*r01);
IkReal x10759=((1.0)*cj2);
IkReal x10760=(r20*sj5);
IkReal x10761=(cj5*r21);
IkReal x10762=(cj5*r11);
IkReal x10763=(r10*sj5);
IkReal x10764=((1.0)*x10756);
evalcond[0]=(((r02*x10756))+((x10755*x10757))+((x10755*x10758)));
evalcond[1]=(((r22*x10755))+(((-1.0)*x10761*x10764))+(((-1.0)*x10760*x10764)));
evalcond[2]=((((-1.0)*x10762*x10764))+(((-1.0)*x10763*x10764))+((r12*x10755)));
evalcond[3]=((1.0)+(((-1.0)*x10757*x10764))+((r02*x10755))+(((-1.0)*x10758*x10764)));
evalcond[4]=(((cj1*sj2))+((r22*x10756))+((x10755*x10760))+((x10755*x10761))+(((-1.0)*sj1*x10759)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x10755*x10762))+((x10755*x10763))+(((-1.0)*cj1*x10759))+((r12*x10756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10766 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x10766)==0){
continue;
}
IkReal x10765=pow(x10766,-0.5);
CheckValue<IkReal> x10767 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x10767.valid){
continue;
}
IkReal gconst24=((-1.0)*(x10767.value));
IkReal gconst25=(r10*x10765);
IkReal gconst26=(r11*x10765);
CheckValue<IkReal> x10768 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x10768.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x10768.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10771 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x10771.valid){
continue;
}
IkReal x10769=((-1.0)*(x10771.value));
IkReal x10770=x10765;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x10769;
IkReal gconst24=x10769;
IkReal gconst25=(r10*x10770);
IkReal gconst26=(r11*x10770);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10772=gconst26*gconst26;
IkReal x10773=gconst25*gconst25;
IkReal x10774=(cj3*r20);
IkReal x10775=(r21*sj3);
IkReal x10776=(cj3*r21);
IkReal x10777=(gconst25*gconst26*r01);
IkReal x10778=(gconst26*r00*sj3);
IkReal x10779=((1.0)*r01*sj3);
CheckValue<IkReal> x10780 = IKatan2WithCheck(IkReal((((r22*x10778))+(((-1.0)*gconst25*r22*x10779)))),IkReal(((((-1.0)*r20*x10773*x10779))+((r00*x10772*x10775))+((gconst25*r20*x10778))+(((-1.0)*x10775*x10777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10780.valid){
continue;
}
CheckValue<IkReal> x10781=IKPowWithIntegerCheck(IKsign((((r00*x10773*x10774))+((x10774*x10777))+((r01*x10772*x10776))+((gconst25*gconst26*r00*x10776))+((cj3*r02*r22)))),-1);
if(!x10781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10780.value)+(((1.5707963267949)*(x10781.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10782=IKsin(j4);
IkReal x10783=IKcos(j4);
IkReal x10784=(cj1*sj2);
IkReal x10785=(cj3*gconst26);
IkReal x10786=((1.0)*gconst25);
IkReal x10787=(r21*sj3);
IkReal x10788=(sj1*sj2);
IkReal x10789=((1.0)*cj2);
IkReal x10790=(gconst26*r01);
IkReal x10791=(gconst26*sj3);
IkReal x10792=(sj1*x10789);
IkReal x10793=(sj3*x10783);
IkReal x10794=(r12*x10782);
IkReal x10795=((1.0)*x10783);
IkReal x10796=(cj3*x10783);
IkReal x10797=(sj3*x10782);
IkReal x10798=((1.0)*cj3*x10782);
IkReal x10799=((1.0)*gconst26*x10782);
evalcond[0]=(((r22*x10783))+(((-1.0)*r21*x10799))+(((-1.0)*r20*x10782*x10786)));
evalcond[1]=((((-1.0)*r10*x10782*x10786))+(((-1.0)*r11*x10799))+((r12*x10783)));
evalcond[2]=((1.0)+((r02*x10783))+(((-1.0)*r00*x10782*x10786))+(((-1.0)*x10782*x10790)));
evalcond[3]=(((r02*x10797))+((gconst25*r00*x10793))+((x10790*x10793))+((r00*x10785))+(((-1.0)*cj3*r01*x10786)));
evalcond[4]=((((-1.0)*r02*x10798))+(((-1.0)*r01*sj3*x10786))+(((-1.0)*r00*x10786*x10796))+((r00*x10791))+(((-1.0)*r01*x10785*x10795)));
evalcond[5]=(((gconst26*x10783*x10787))+(((-1.0)*cj3*r21*x10786))+((gconst25*r20*x10793))+((r20*x10785))+((cj1*cj2))+x10788+((r22*x10797)));
evalcond[6]=(((r11*x10783*x10791))+((gconst25*r10*x10793))+(((-1.0)*x10792))+((sj3*x10794))+x10784+(((-1.0)*cj3*r11*x10786))+((r10*x10785)));
evalcond[7]=(((r20*x10791))+(((-1.0)*x10792))+(((-1.0)*r21*x10785*x10795))+(((-1.0)*x10786*x10787))+x10784+(((-1.0)*r22*x10798))+(((-1.0)*r20*x10786*x10796)));
evalcond[8]=(((r10*x10791))+(((-1.0)*cj1*x10789))+(((-1.0)*cj3*x10794))+(((-1.0)*r10*x10786*x10796))+(((-1.0)*x10788))+(((-1.0)*r11*sj3*x10786))+(((-1.0)*r11*x10785*x10795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10800=IKPowWithIntegerCheck(IKsign((((gconst26*r20))+(((-1.0)*gconst25*r21)))),-1);
if(!x10800.valid){
continue;
}
CheckValue<IkReal> x10801 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst25*r10))+((gconst26*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10800.value)))+(x10801.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10802=IKsin(j4);
IkReal x10803=IKcos(j4);
IkReal x10804=(cj1*sj2);
IkReal x10805=(cj3*gconst26);
IkReal x10806=((1.0)*gconst25);
IkReal x10807=(r21*sj3);
IkReal x10808=(sj1*sj2);
IkReal x10809=((1.0)*cj2);
IkReal x10810=(gconst26*r01);
IkReal x10811=(gconst26*sj3);
IkReal x10812=(sj1*x10809);
IkReal x10813=(sj3*x10803);
IkReal x10814=(r12*x10802);
IkReal x10815=((1.0)*x10803);
IkReal x10816=(cj3*x10803);
IkReal x10817=(sj3*x10802);
IkReal x10818=((1.0)*cj3*x10802);
IkReal x10819=((1.0)*gconst26*x10802);
evalcond[0]=((((-1.0)*r20*x10802*x10806))+((r22*x10803))+(((-1.0)*r21*x10819)));
evalcond[1]=((((-1.0)*r10*x10802*x10806))+(((-1.0)*r11*x10819))+((r12*x10803)));
evalcond[2]=((1.0)+(((-1.0)*r00*x10802*x10806))+(((-1.0)*x10802*x10810))+((r02*x10803)));
evalcond[3]=(((r02*x10817))+((gconst25*r00*x10813))+((x10810*x10813))+((r00*x10805))+(((-1.0)*cj3*r01*x10806)));
evalcond[4]=((((-1.0)*r02*x10818))+(((-1.0)*r01*x10805*x10815))+(((-1.0)*r01*sj3*x10806))+(((-1.0)*r00*x10806*x10816))+((r00*x10811)));
evalcond[5]=(((r22*x10817))+((r20*x10805))+((gconst26*x10803*x10807))+(((-1.0)*cj3*r21*x10806))+((cj1*cj2))+((gconst25*r20*x10813))+x10808);
evalcond[6]=(((r10*x10805))+((gconst25*r10*x10813))+((sj3*x10814))+(((-1.0)*cj3*r11*x10806))+(((-1.0)*x10812))+((r11*x10803*x10811))+x10804);
evalcond[7]=(((r20*x10811))+(((-1.0)*r21*x10805*x10815))+(((-1.0)*r20*x10806*x10816))+(((-1.0)*x10806*x10807))+(((-1.0)*r22*x10818))+(((-1.0)*x10812))+x10804);
evalcond[8]=((((-1.0)*cj3*x10814))+(((-1.0)*r11*sj3*x10806))+(((-1.0)*x10808))+(((-1.0)*cj1*x10809))+(((-1.0)*r10*x10806*x10816))+((r10*x10811))+(((-1.0)*r11*x10805*x10815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10822 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x10822)==0){
continue;
}
IkReal x10820=pow(x10822,-0.5);
IkReal x10821=((-1.0)*x10820);
CheckValue<IkReal> x10823 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x10823.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x10823.value))));
IkReal gconst28=(r10*x10821);
IkReal gconst29=(r11*x10821);
CheckValue<IkReal> x10824 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x10824.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10824.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10828 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x10828.valid){
continue;
}
IkReal x10825=((1.0)*(x10828.value));
IkReal x10826=x10820;
IkReal x10827=((-1.0)*x10826);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x10825)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x10825)));
IkReal gconst28=(r10*x10827);
IkReal gconst29=(r11*x10827);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10832 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x10832.valid){
continue;
}
IkReal x10829=((1.0)*(x10832.value));
IkReal x10830=x10820;
IkReal x10831=((-1.0)*x10830);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x10829)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x10829)));
IkReal gconst28=(r10*x10831);
IkReal gconst29=(r11*x10831);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10836 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x10836.valid){
continue;
}
IkReal x10833=((1.0)*(x10836.value));
IkReal x10834=x10820;
IkReal x10835=((-1.0)*x10834);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x10833)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x10833)));
IkReal gconst28=(r10*x10835);
IkReal gconst29=(r11*x10835);
IkReal x10837=((1.0)*sj3);
CheckValue<IkReal> x10844=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x10844.valid){
continue;
}
IkReal x10838=x10844.value;
IkReal x10839=(r20*x10838);
IkReal x10840=(r21*x10838);
IkReal x10841=(r00*x10838);
IkReal x10842=(r10*r11*x10838);
IkReal x10843=(r01*x10837*x10838);
j4eval[0]=IKsign(((((-1.0)*r02*r22*x10837))+(((-1.0)*r01*x10837*x10840*(r11*r11)))+(((-1.0)*r01*r10*r11*x10837*x10839))+(((-1.0)*r00*r10*r11*x10837*x10840))+(((-1.0)*r00*x10837*x10839*(r10*r10)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10848 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x10848.valid){
continue;
}
IkReal x10845=((1.0)*(x10848.value));
IkReal x10846=x10820;
IkReal x10847=((-1.0)*x10846);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x10845)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x10845)));
IkReal gconst28=(r10*x10847);
IkReal gconst29=(r11*x10847);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10852 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x10852.valid){
continue;
}
IkReal x10849=((1.0)*(x10852.value));
IkReal x10850=x10820;
IkReal x10851=((-1.0)*x10850);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x10849)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x10849)));
IkReal gconst28=(r10*x10851);
IkReal gconst29=(r11*x10851);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10856 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x10856.valid){
continue;
}
IkReal x10853=((1.0)*(x10856.value));
IkReal x10854=x10820;
IkReal x10855=((-1.0)*x10854);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x10853)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x10853)));
IkReal gconst28=(r10*x10855);
IkReal gconst29=(r11*x10855);
IkReal x10857=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x10861=IKPowWithIntegerCheck(x10857,-1);
if(!x10861.valid){
continue;
}
IkReal x10858=x10861.value;
IkReal x10859=((1.0)*x10858);
IkReal x10860=((((-1.0)*(r02*r02)))+(((-1.0)*x10859*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x10858))+(((-1.0)*x10859*(r01*r01)*(r11*r11))));
j4eval[0]=x10860;
j4eval[1]=IKsign(x10860);
j4eval[2]=r02;
j4eval[3]=x10857;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10862=(gconst29*r01);
IkReal x10863=(gconst28*r00);
CheckValue<IkReal> x10864 = IKatan2WithCheck(IkReal(((((-1.0)*x10862))+(((-1.0)*x10863)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10864.valid){
continue;
}
CheckValue<IkReal> x10865=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10863*x10863)))+(((-2.0)*x10862*x10863))+(((-1.0)*(x10862*x10862))))),-1);
if(!x10865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10864.value)+(((1.5707963267949)*(x10865.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10866=IKsin(j4);
IkReal x10867=IKcos(j4);
IkReal x10868=((1.0)*gconst28);
IkReal x10869=((1.0)*sj1);
IkReal x10870=((1.0)*x10866);
IkReal x10871=((1.0)*gconst29*x10867);
evalcond[0]=((((-1.0)*r20*x10866*x10868))+((r22*x10867))+(((-1.0)*gconst29*r21*x10870)));
evalcond[1]=(((r12*x10867))+(((-1.0)*r10*x10866*x10868))+(((-1.0)*gconst29*r11*x10870)));
evalcond[2]=((1.0)+(((-1.0)*r00*x10866*x10868))+(((-1.0)*gconst29*r01*x10870))+((r02*x10867)));
evalcond[3]=((((-1.0)*r01*x10871))+(((-1.0)*r00*x10867*x10868))+(((-1.0)*r02*x10870)));
evalcond[4]=((((-1.0)*r22*x10870))+(((-1.0)*r21*x10871))+((cj1*sj2))+(((-1.0)*r20*x10867*x10868))+(((-1.0)*cj2*x10869)));
evalcond[5]=((((-1.0)*r11*x10871))+(((-1.0)*r12*x10870))+(((-1.0)*cj1*cj2))+(((-1.0)*r10*x10867*x10868))+(((-1.0)*sj2*x10869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10872=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r21))+((gconst29*r20)))),-1);
if(!x10872.valid){
continue;
}
CheckValue<IkReal> x10873 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst28*r10))+((gconst29*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10872.value)))+(x10873.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10874=IKsin(j4);
IkReal x10875=IKcos(j4);
IkReal x10876=((1.0)*gconst28);
IkReal x10877=((1.0)*sj1);
IkReal x10878=((1.0)*x10874);
IkReal x10879=((1.0)*gconst29*x10875);
evalcond[0]=((((-1.0)*r20*x10874*x10876))+(((-1.0)*gconst29*r21*x10878))+((r22*x10875)));
evalcond[1]=(((r12*x10875))+(((-1.0)*r10*x10874*x10876))+(((-1.0)*gconst29*r11*x10878)));
evalcond[2]=((1.0)+((r02*x10875))+(((-1.0)*r00*x10874*x10876))+(((-1.0)*gconst29*r01*x10878)));
evalcond[3]=((((-1.0)*r00*x10875*x10876))+(((-1.0)*r01*x10879))+(((-1.0)*r02*x10878)));
evalcond[4]=((((-1.0)*r22*x10878))+(((-1.0)*r21*x10879))+(((-1.0)*r20*x10875*x10876))+((cj1*sj2))+(((-1.0)*cj2*x10877)));
evalcond[5]=((((-1.0)*r10*x10875*x10876))+(((-1.0)*r11*x10879))+(((-1.0)*r12*x10878))+(((-1.0)*cj1*cj2))+(((-1.0)*sj2*x10877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10880=IKPowWithIntegerCheck(IKsign((((gconst28*r11))+(((-1.0)*gconst29*r10)))),-1);
if(!x10880.valid){
continue;
}
CheckValue<IkReal> x10881 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst29*r21))+((gconst28*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10880.value)))+(x10881.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10882=IKsin(j4);
IkReal x10883=IKcos(j4);
IkReal x10884=((1.0)*gconst28);
IkReal x10885=((1.0)*sj1);
IkReal x10886=((1.0)*x10882);
IkReal x10887=((1.0)*gconst29*x10883);
evalcond[0]=((((-1.0)*gconst29*r21*x10886))+((r22*x10883))+(((-1.0)*r20*x10882*x10884)));
evalcond[1]=((((-1.0)*r10*x10882*x10884))+((r12*x10883))+(((-1.0)*gconst29*r11*x10886)));
evalcond[2]=((1.0)+((r02*x10883))+(((-1.0)*gconst29*r01*x10886))+(((-1.0)*r00*x10882*x10884)));
evalcond[3]=((((-1.0)*r01*x10887))+(((-1.0)*r02*x10886))+(((-1.0)*r00*x10883*x10884)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*cj2*x10885))+(((-1.0)*r22*x10886))+(((-1.0)*r21*x10887))+(((-1.0)*r20*x10883*x10884)));
evalcond[5]=((((-1.0)*sj2*x10885))+(((-1.0)*cj1*cj2))+(((-1.0)*r11*x10887))+(((-1.0)*r10*x10883*x10884))+(((-1.0)*r12*x10886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10891 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x10891.valid){
continue;
}
IkReal x10888=((1.0)*(x10891.value));
IkReal x10889=x10820;
IkReal x10890=((-1.0)*x10889);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x10888)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x10888)));
IkReal gconst28=(r10*x10890);
IkReal gconst29=(r11*x10890);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10895 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x10895.valid){
continue;
}
IkReal x10892=((1.0)*(x10895.value));
IkReal x10893=x10820;
IkReal x10894=((-1.0)*x10893);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x10892)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x10892)));
IkReal gconst28=(r10*x10894);
IkReal gconst29=(r11*x10894);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10899 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x10899.valid){
continue;
}
IkReal x10896=((1.0)*(x10899.value));
IkReal x10897=x10820;
IkReal x10898=((-1.0)*x10897);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x10896)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x10896)));
IkReal gconst28=(r10*x10898);
IkReal gconst29=(r11*x10898);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10900=(gconst29*r01);
IkReal x10901=(gconst28*r00);
CheckValue<IkReal> x10902=IKPowWithIntegerCheck(IKsign(((x10901*x10901)+(((2.0)*x10900*x10901))+(x10900*x10900)+(r02*r02))),-1);
if(!x10902.valid){
continue;
}
CheckValue<IkReal> x10903 = IKatan2WithCheck(IkReal((x10901+x10900)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10902.value)))+(x10903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10904=IKcos(j4);
IkReal x10905=IKsin(j4);
IkReal x10906=((1.0)*sj1);
IkReal x10907=(gconst28*x10904);
IkReal x10908=(gconst29*x10904);
IkReal x10909=((1.0)*gconst28*x10905);
IkReal x10910=((1.0)*gconst29*x10905);
evalcond[0]=(((r01*x10908))+((r00*x10907))+((r02*x10905)));
evalcond[1]=(((r22*x10904))+(((-1.0)*r20*x10909))+(((-1.0)*r21*x10910)));
evalcond[2]=(((r12*x10904))+(((-1.0)*r11*x10910))+(((-1.0)*r10*x10909)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10909))+(((-1.0)*r01*x10910))+((r02*x10904)));
evalcond[4]=(((r22*x10905))+((cj1*sj2))+((r20*x10907))+(((-1.0)*cj2*x10906))+((r21*x10908)));
evalcond[5]=(((r12*x10905))+(((-1.0)*cj1*cj2))+(((-1.0)*sj2*x10906))+((r10*x10907))+((r11*x10908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10911=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r21))+((gconst29*r20)))),-1);
if(!x10911.valid){
continue;
}
CheckValue<IkReal> x10912 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst28*r10))+((gconst29*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10911.value)))+(x10912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10913=IKcos(j4);
IkReal x10914=IKsin(j4);
IkReal x10915=((1.0)*sj1);
IkReal x10916=(gconst28*x10913);
IkReal x10917=(gconst29*x10913);
IkReal x10918=((1.0)*gconst28*x10914);
IkReal x10919=((1.0)*gconst29*x10914);
evalcond[0]=(((r02*x10914))+((r00*x10916))+((r01*x10917)));
evalcond[1]=((((-1.0)*r20*x10918))+(((-1.0)*r21*x10919))+((r22*x10913)));
evalcond[2]=((((-1.0)*r10*x10918))+(((-1.0)*r11*x10919))+((r12*x10913)));
evalcond[3]=((1.0)+((r02*x10913))+(((-1.0)*r00*x10918))+(((-1.0)*r01*x10919)));
evalcond[4]=(((cj1*sj2))+((r21*x10917))+((r22*x10914))+(((-1.0)*cj2*x10915))+((r20*x10916)));
evalcond[5]=((((-1.0)*sj2*x10915))+(((-1.0)*cj1*cj2))+((r12*x10914))+((r11*x10917))+((r10*x10916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10920=IKPowWithIntegerCheck(IKsign((((gconst28*r11))+(((-1.0)*gconst29*r10)))),-1);
if(!x10920.valid){
continue;
}
CheckValue<IkReal> x10921 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst29*r21))+((gconst28*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10920.value)))+(x10921.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10922=IKcos(j4);
IkReal x10923=IKsin(j4);
IkReal x10924=((1.0)*sj1);
IkReal x10925=(gconst28*x10922);
IkReal x10926=(gconst29*x10922);
IkReal x10927=((1.0)*gconst28*x10923);
IkReal x10928=((1.0)*gconst29*x10923);
evalcond[0]=(((r02*x10923))+((r01*x10926))+((r00*x10925)));
evalcond[1]=((((-1.0)*r21*x10928))+(((-1.0)*r20*x10927))+((r22*x10922)));
evalcond[2]=((((-1.0)*r10*x10927))+(((-1.0)*r11*x10928))+((r12*x10922)));
evalcond[3]=((1.0)+((r02*x10922))+(((-1.0)*r01*x10928))+(((-1.0)*r00*x10927)));
evalcond[4]=(((cj1*sj2))+((r21*x10926))+((r22*x10923))+(((-1.0)*cj2*x10924))+((r20*x10925)));
evalcond[5]=((((-1.0)*sj2*x10924))+((r10*x10925))+(((-1.0)*cj1*cj2))+((r12*x10923))+((r11*x10926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10929=((-1.0)*r10);
CheckValue<IkReal> x10932 = IKatan2WithCheck(IkReal(x10929),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x10932.valid){
continue;
}
IkReal x10930=((1.0)*(x10932.value));
IkReal x10931=x10820;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x10930)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst27=((3.14159265358979)+(((-1.0)*x10930)));
IkReal gconst28=(x10929*x10931);
IkReal gconst29=((-1.0)*r11*x10931);
IkReal x10933=x10820;
IkReal x10934=((2.0)*x10933);
j4eval[0]=((IKabs(((1.0)+(((-1.0)*r02)))))+(IKabs((((r00*r10*x10934))+((r01*r11*x10934))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
{
IkReal j4eval[1];
IkReal x10935=((-1.0)*r10);
CheckValue<IkReal> x10938 = IKatan2WithCheck(IkReal(x10935),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x10938.valid){
continue;
}
IkReal x10936=((1.0)*(x10938.value));
IkReal x10937=x10820;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x10936)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst27=((3.14159265358979)+(((-1.0)*x10936)));
IkReal gconst28=(x10935*x10937);
IkReal gconst29=((-1.0)*r11*x10937);
IkReal x10939=x10820;
IkReal x10940=((1.0)*cj3*x10939);
j4eval[0]=((IKabs((cj3*r12)))+(((0.5)*(IKabs(((((-1.0)*x10940*(r11*r11)))+(((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))+(((-1.0)*x10940*(r10*r10)))))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x10941=((1.0)*gconst28);
IkReal x10942=(cj3*r10);
IkReal x10943=(gconst29*r10*sj3);
IkReal x10944=((1.0)*cj1*cj2);
IkReal x10945=((1.0)*sj1*sj2);
IkReal x10946=(cj3*gconst29*r11);
IkReal x10947=(r11*sj3*x10941);
IkReal x10948=(x10947+x10945+x10944);
op[0]=(((gconst28*x10942))+(((-1.0)*x10948))+x10943+x10946);
op[1]=((-2.0)*cj3*r12);
op[2]=((((-1.0)*x10941*x10942))+(((-1.0)*x10948))+(((-1.0)*x10946))+x10943);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+(((-1.0)*r02)));
op[1]=((((-2.0)*gconst29*r01))+(((-2.0)*gconst28*r00)));
op[2]=((1.0)+r02);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10949=gconst29*gconst29;
IkReal x10950=gconst28*gconst28;
IkReal x10951=(cj3*r00);
IkReal x10952=((1.0)*sj3);
IkReal x10953=(gconst28*gconst29*r20);
IkReal x10954=(r21*x10949);
IkReal x10955=((1.0)*cj3*r01);
IkReal x10956=(gconst28*gconst29*r21);
IkReal x10957=(r20*x10950);
CheckValue<IkReal> x10958=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x10952))+(((-1.0)*r01*x10952*x10954))+(((-1.0)*r01*x10952*x10953))+(((-1.0)*r00*x10952*x10956))+(((-1.0)*r00*x10952*x10957)))),-1);
if(!x10958.valid){
continue;
}
CheckValue<IkReal> x10959 = IKatan2WithCheck(IkReal((((gconst29*r22*x10951))+(((-1.0)*gconst28*r22*x10955)))),IkReal(((((-1.0)*x10955*x10956))+(((-1.0)*x10955*x10957))+((x10951*x10953))+((x10951*x10954)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10958.value)))+(x10959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10960=IKsin(j4);
IkReal x10961=IKcos(j4);
IkReal x10962=(cj1*sj2);
IkReal x10963=((1.0)*gconst28);
IkReal x10964=(gconst29*sj3);
IkReal x10965=(sj1*sj2);
IkReal x10966=(cj3*gconst29);
IkReal x10967=((1.0)*cj2);
IkReal x10968=(sj1*x10967);
IkReal x10969=(r12*x10960);
IkReal x10970=(cj3*x10961);
IkReal x10971=(sj3*x10960);
IkReal x10972=((1.0)*cj3*x10960);
IkReal x10973=((1.0)*gconst29*x10960);
IkReal x10974=(gconst28*sj3*x10961);
IkReal x10975=((1.0)*x10961*x10966);
evalcond[0]=((((-1.0)*r21*x10973))+((r22*x10961))+(((-1.0)*r20*x10960*x10963)));
evalcond[1]=((((-1.0)*r10*x10960*x10963))+(((-1.0)*r11*x10973))+((r12*x10961)));
evalcond[2]=((1.0)+((r02*x10961))+(((-1.0)*r00*x10960*x10963))+(((-1.0)*r01*x10973)));
evalcond[3]=(((r02*x10971))+((r00*x10966))+((r00*x10974))+(((-1.0)*cj3*r01*x10963))+((r01*x10961*x10964)));
evalcond[4]=((((-1.0)*r00*x10963*x10970))+((r00*x10964))+(((-1.0)*r01*sj3*x10963))+(((-1.0)*r02*x10972))+(((-1.0)*r01*x10975)));
evalcond[5]=((((-1.0)*cj3*r21*x10963))+((r22*x10971))+((r20*x10974))+((r20*x10966))+((cj1*cj2))+x10965+((r21*x10961*x10964)));
evalcond[6]=(((sj3*x10969))+(((-1.0)*cj3*r11*x10963))+((r11*x10961*x10964))+((r10*x10966))+(((-1.0)*x10968))+((r10*x10974))+x10962);
evalcond[7]=((((-1.0)*r21*x10975))+(((-1.0)*r20*x10963*x10970))+(((-1.0)*r22*x10972))+((r20*x10964))+(((-1.0)*r21*sj3*x10963))+(((-1.0)*x10968))+x10962);
evalcond[8]=((((-1.0)*cj1*x10967))+(((-1.0)*r11*sj3*x10963))+(((-1.0)*cj3*x10969))+(((-1.0)*r10*x10963*x10970))+((r10*x10964))+(((-1.0)*x10965))+(((-1.0)*r11*x10975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10976=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r21))+((gconst29*r20)))),-1);
if(!x10976.valid){
continue;
}
CheckValue<IkReal> x10977 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst28*r10))+((gconst29*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10976.value)))+(x10977.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10978=IKsin(j4);
IkReal x10979=IKcos(j4);
IkReal x10980=(cj1*sj2);
IkReal x10981=((1.0)*gconst28);
IkReal x10982=(gconst29*sj3);
IkReal x10983=(sj1*sj2);
IkReal x10984=(cj3*gconst29);
IkReal x10985=((1.0)*cj2);
IkReal x10986=(sj1*x10985);
IkReal x10987=(r12*x10978);
IkReal x10988=(cj3*x10979);
IkReal x10989=(sj3*x10978);
IkReal x10990=((1.0)*cj3*x10978);
IkReal x10991=((1.0)*gconst29*x10978);
IkReal x10992=(gconst28*sj3*x10979);
IkReal x10993=((1.0)*x10979*x10984);
evalcond[0]=((((-1.0)*r20*x10978*x10981))+(((-1.0)*r21*x10991))+((r22*x10979)));
evalcond[1]=((((-1.0)*r10*x10978*x10981))+(((-1.0)*r11*x10991))+((r12*x10979)));
evalcond[2]=((1.0)+((r02*x10979))+(((-1.0)*r01*x10991))+(((-1.0)*r00*x10978*x10981)));
evalcond[3]=((((-1.0)*cj3*r01*x10981))+((r00*x10984))+((r00*x10992))+((r01*x10979*x10982))+((r02*x10989)));
evalcond[4]=(((r00*x10982))+(((-1.0)*r01*x10993))+(((-1.0)*r00*x10981*x10988))+(((-1.0)*r02*x10990))+(((-1.0)*r01*sj3*x10981)));
evalcond[5]=(((r22*x10989))+(((-1.0)*cj3*r21*x10981))+((r21*x10979*x10982))+((r20*x10992))+((r20*x10984))+((cj1*cj2))+x10983);
evalcond[6]=(((sj3*x10987))+((r11*x10979*x10982))+((r10*x10984))+((r10*x10992))+(((-1.0)*x10986))+(((-1.0)*cj3*r11*x10981))+x10980);
evalcond[7]=((((-1.0)*r22*x10990))+(((-1.0)*r21*x10993))+(((-1.0)*r20*x10981*x10988))+((r20*x10982))+(((-1.0)*r21*sj3*x10981))+(((-1.0)*x10986))+x10980);
evalcond[8]=((((-1.0)*r10*x10981*x10988))+(((-1.0)*cj3*x10987))+(((-1.0)*x10983))+(((-1.0)*r11*sj3*x10981))+((r10*x10982))+(((-1.0)*r11*x10993))+(((-1.0)*cj1*x10985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10994=IKPowWithIntegerCheck(IKsign((((gconst28*r11))+(((-1.0)*gconst29*r10)))),-1);
if(!x10994.valid){
continue;
}
CheckValue<IkReal> x10995 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst29*r21))+((gconst28*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10994.value)))+(x10995.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10996=IKsin(j4);
IkReal x10997=IKcos(j4);
IkReal x10998=(cj1*sj2);
IkReal x10999=((1.0)*gconst28);
IkReal x11000=(gconst29*sj3);
IkReal x11001=(sj1*sj2);
IkReal x11002=(cj3*gconst29);
IkReal x11003=((1.0)*cj2);
IkReal x11004=(sj1*x11003);
IkReal x11005=(r12*x10996);
IkReal x11006=(cj3*x10997);
IkReal x11007=(sj3*x10996);
IkReal x11008=((1.0)*cj3*x10996);
IkReal x11009=((1.0)*gconst29*x10996);
IkReal x11010=(gconst28*sj3*x10997);
IkReal x11011=((1.0)*x10997*x11002);
evalcond[0]=(((r22*x10997))+(((-1.0)*r20*x10996*x10999))+(((-1.0)*r21*x11009)));
evalcond[1]=(((r12*x10997))+(((-1.0)*r10*x10996*x10999))+(((-1.0)*r11*x11009)));
evalcond[2]=((1.0)+((r02*x10997))+(((-1.0)*r00*x10996*x10999))+(((-1.0)*r01*x11009)));
evalcond[3]=(((r02*x11007))+((r00*x11002))+((r00*x11010))+((r01*x10997*x11000))+(((-1.0)*cj3*r01*x10999)));
evalcond[4]=((((-1.0)*r02*x11008))+(((-1.0)*r01*x11011))+(((-1.0)*r00*x10999*x11006))+((r00*x11000))+(((-1.0)*r01*sj3*x10999)));
evalcond[5]=(((r20*x11010))+((r20*x11002))+x11001+((r22*x11007))+((cj1*cj2))+((r21*x10997*x11000))+(((-1.0)*cj3*r21*x10999)));
evalcond[6]=((((-1.0)*x11004))+((r10*x11002))+((r10*x11010))+((r11*x10997*x11000))+(((-1.0)*cj3*r11*x10999))+((sj3*x11005))+x10998);
evalcond[7]=((((-1.0)*r22*x11008))+(((-1.0)*r20*x10999*x11006))+(((-1.0)*x11004))+((r20*x11000))+(((-1.0)*r21*sj3*x10999))+x10998+(((-1.0)*r21*x11011)));
evalcond[8]=(((r10*x11000))+(((-1.0)*cj3*x11005))+(((-1.0)*r11*x11011))+(((-1.0)*r11*sj3*x10999))+(((-1.0)*r10*x10999*x11006))+(((-1.0)*x11001))+(((-1.0)*cj1*x11003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11012=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11012);
rxp0_2=(py*r00);
rxp1_0=(r21*x11012);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x11013=(r00*sj5);
IkReal x11014=(cj5*r01);
j4eval[0]=((((-1.0)*x11014))+(((-1.0)*x11013)));
j4eval[1]=(((sj3*x11014))+((sj3*x11013)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11015=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11015);
rxp0_2=(py*r00);
rxp1_0=(r21*x11015);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x11016=((1.0)*r00*sj5);
IkReal x11017=((1.0)*cj5*r01);
j4eval[0]=((((-1.0)*x11017))+(((-1.0)*x11016)));
j4eval[1]=((((-1.0)*cj3*x11016))+(((-1.0)*cj3*x11017)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11018=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11018);
rxp0_2=(py*r00);
rxp1_0=(r21*x11018);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((cj5*r01*sj3))+((r00*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11019=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11019);
rxp0_2=(py*r00);
rxp1_0=(r21*x11019);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r12;
j4eval[1]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11020=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11020);
rxp0_2=(py*r00);
rxp1_0=(r21*x11020);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[1]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11021=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x11021.valid){
continue;
}
CheckValue<IkReal> x11022=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x11022.valid){
continue;
}
if( IKabs(((-1.0)*(x11021.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11022.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11021.value)))+IKsqr(((x11022.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11021.value)), ((x11022.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11023=IKcos(j4);
IkReal x11024=IKsin(j4);
IkReal x11025=(sj5*x11023);
IkReal x11026=((1.0)*x11024);
IkReal x11027=(cj5*x11023);
evalcond[0]=(r12*x11023);
evalcond[1]=(((r01*x11027))+((r00*x11025)));
evalcond[2]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r12*x11024)));
evalcond[3]=((((-1.0)*r20*sj5*x11026))+(((-1.0)*cj5*r21*x11026)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r01*x11026))+(((-1.0)*r00*sj5*x11026)));
evalcond[5]=(((r20*x11025))+((r21*x11027))+((sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11028=((1.0)*sj2);
CheckValue<IkReal> x11029=IKPowWithIntegerCheck(r12,-1);
if(!x11029.valid){
continue;
}
CheckValue<IkReal> x11030=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x11030.valid){
continue;
}
if( IKabs(((x11029.value)*((((cj2*sj1))+(((-1.0)*cj1*x11028)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11030.value)*(((((-1.0)*sj1*x11028))+(((-1.0)*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11029.value)*((((cj2*sj1))+(((-1.0)*cj1*x11028))))))+IKsqr(((x11030.value)*(((((-1.0)*sj1*x11028))+(((-1.0)*cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11029.value)*((((cj2*sj1))+(((-1.0)*cj1*x11028))))), ((x11030.value)*(((((-1.0)*sj1*x11028))+(((-1.0)*cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11031=IKcos(j4);
IkReal x11032=IKsin(j4);
IkReal x11033=(sj5*x11031);
IkReal x11034=((1.0)*x11032);
IkReal x11035=(cj5*x11031);
evalcond[0]=(r12*x11031);
evalcond[1]=(((r01*x11035))+((r00*x11033)));
evalcond[2]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r12*x11032)));
evalcond[3]=((((-1.0)*r20*sj5*x11034))+(((-1.0)*cj5*r21*x11034)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r01*x11034))+(((-1.0)*r00*sj5*x11034)));
evalcond[5]=(((r20*x11033))+((r21*x11035))+((sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11036=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11036);
rxp0_2=(py*r00);
rxp1_0=(r21*x11036);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r12;
j4eval[1]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11037=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11037);
rxp0_2=(py*r00);
rxp1_0=(r21*x11037);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11038=((1.0)*sj5);
IkReal x11039=((1.0)*cj5);
j4eval[0]=((((-1.0)*r01*x11039))+(((-1.0)*r00*x11038)));
j4eval[1]=((((-1.0)*r21*x11039))+(((-1.0)*r20*x11038)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11040=((1.0)*cj5);
IkReal x11041=((1.0)*sj5);
CheckValue<IkReal> x11042=IKPowWithIntegerCheck(((((-1.0)*r01*x11040))+(((-1.0)*r00*x11041))),-1);
if(!x11042.valid){
continue;
}
CheckValue<IkReal> x11043=IKPowWithIntegerCheck(((((-1.0)*r21*x11040))+(((-1.0)*r20*x11041))),-1);
if(!x11043.valid){
continue;
}
if( IKabs(((-1.0)*(x11042.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11043.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11042.value)))+IKsqr(((x11043.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11042.value)), ((x11043.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11044=IKsin(j4);
IkReal x11045=IKcos(j4);
IkReal x11046=((1.0)*x11044);
IkReal x11047=((1.0)*cj5*x11045);
IkReal x11048=((1.0)*sj5*x11045);
evalcond[0]=(r12*x11045);
evalcond[1]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x11046)));
evalcond[2]=((((-1.0)*cj5*r21*x11046))+(((-1.0)*r20*sj5*x11046)));
evalcond[3]=((((-1.0)*r01*x11047))+(((-1.0)*r00*x11048)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r01*x11046))+(((-1.0)*r00*sj5*x11046)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r21*x11047))+(((-1.0)*r20*x11048))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11049=((1.0)*sj1);
CheckValue<IkReal> x11050=IKPowWithIntegerCheck(r12,-1);
if(!x11050.valid){
continue;
}
CheckValue<IkReal> x11051=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x11051.valid){
continue;
}
if( IKabs(((x11050.value)*(((((-1.0)*cj2*x11049))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11051.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj2*x11049)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11050.value)*(((((-1.0)*cj2*x11049))+((cj1*sj2))))))+IKsqr(((x11051.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj2*x11049))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11050.value)*(((((-1.0)*cj2*x11049))+((cj1*sj2))))), ((x11051.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj2*x11049))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11052=IKsin(j4);
IkReal x11053=IKcos(j4);
IkReal x11054=((1.0)*x11052);
IkReal x11055=((1.0)*cj5*x11053);
IkReal x11056=((1.0)*sj5*x11053);
evalcond[0]=(r12*x11053);
evalcond[1]=((((-1.0)*r12*x11054))+((cj1*sj2))+(((-1.0)*cj2*sj1)));
evalcond[2]=((((-1.0)*cj5*r21*x11054))+(((-1.0)*r20*sj5*x11054)));
evalcond[3]=((((-1.0)*r00*x11056))+(((-1.0)*r01*x11055)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r01*x11054))+(((-1.0)*r00*sj5*x11054)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r20*x11056))+(((-1.0)*r21*x11055))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11057=IKPowWithIntegerCheck(r12,-1);
if(!x11057.valid){
continue;
}
CheckValue<IkReal> x11058=IKPowWithIntegerCheck(sj3,-1);
if(!x11058.valid){
continue;
}
CheckValue<IkReal> x11059=IKPowWithIntegerCheck((((cj5*r01*sj3))+((r00*sj3*sj5))),-1);
if(!x11059.valid){
continue;
}
if( IKabs(((x11057.value)*(x11058.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11059.value)*((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11057.value)*(x11058.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x11059.value)*((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11057.value)*(x11058.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x11059.value)*((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11060=IKsin(j4);
IkReal x11061=IKcos(j4);
IkReal x11062=(cj1*sj2);
IkReal x11063=(r20*sj3);
IkReal x11064=((1.0)*sj5);
IkReal x11065=(cj3*r01);
IkReal x11066=(sj1*sj2);
IkReal x11067=((1.0)*cj3);
IkReal x11068=((1.0)*cj2);
IkReal x11069=(cj3*cj5);
IkReal x11070=(r00*sj3);
IkReal x11071=(sj1*x11068);
IkReal x11072=(sj5*x11061);
IkReal x11073=(r12*x11060);
IkReal x11074=(cj5*x11061);
IkReal x11075=((1.0)*cj5*x11060);
IkReal x11076=(sj3*x11074);
evalcond[0]=(r12*x11061);
evalcond[1]=(((sj3*x11073))+x11062+(((-1.0)*x11071)));
evalcond[2]=((((-1.0)*r21*x11075))+(((-1.0)*r20*x11060*x11064)));
evalcond[3]=((1.0)+(((-1.0)*r01*x11075))+(((-1.0)*r00*x11060*x11064)));
evalcond[4]=((((-1.0)*cj1*x11068))+(((-1.0)*x11067*x11073))+(((-1.0)*x11066)));
evalcond[5]=(((r00*x11069))+(((-1.0)*x11064*x11065))+((r01*x11076))+((x11070*x11072)));
evalcond[6]=(((cj5*x11070))+(((-1.0)*cj3*r00*x11061*x11064))+(((-1.0)*x11065*x11074))+(((-1.0)*r01*sj3*x11064)));
evalcond[7]=(((r20*x11069))+((r21*x11076))+(((-1.0)*cj3*r21*x11064))+x11066+((x11063*x11072))+((cj1*cj2)));
evalcond[8]=(((cj5*x11063))+x11062+(((-1.0)*x11071))+(((-1.0)*r21*sj3*x11064))+(((-1.0)*r21*x11067*x11074))+(((-1.0)*cj3*r20*x11061*x11064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11077=((1.0)*cj5*r01);
IkReal x11078=((1.0)*r00*sj5);
CheckValue<IkReal> x11079=IKPowWithIntegerCheck(((((-1.0)*x11078))+(((-1.0)*x11077))),-1);
if(!x11079.valid){
continue;
}
CheckValue<IkReal> x11080=IKPowWithIntegerCheck(((((-1.0)*cj3*x11077))+(((-1.0)*cj3*x11078))),-1);
if(!x11080.valid){
continue;
}
if( IKabs(((-1.0)*(x11079.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11080.value)*(((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11079.value)))+IKsqr(((x11080.value)*(((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11079.value)), ((x11080.value)*(((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11081=IKsin(j4);
IkReal x11082=IKcos(j4);
IkReal x11083=(cj1*sj2);
IkReal x11084=(r20*sj3);
IkReal x11085=((1.0)*sj5);
IkReal x11086=(cj3*r01);
IkReal x11087=(sj1*sj2);
IkReal x11088=((1.0)*cj3);
IkReal x11089=((1.0)*cj2);
IkReal x11090=(cj3*cj5);
IkReal x11091=(r00*sj3);
IkReal x11092=(sj1*x11089);
IkReal x11093=(sj5*x11082);
IkReal x11094=(r12*x11081);
IkReal x11095=(cj5*x11082);
IkReal x11096=((1.0)*cj5*x11081);
IkReal x11097=(sj3*x11095);
evalcond[0]=(r12*x11082);
evalcond[1]=((((-1.0)*x11092))+x11083+((sj3*x11094)));
evalcond[2]=((((-1.0)*r20*x11081*x11085))+(((-1.0)*r21*x11096)));
evalcond[3]=((1.0)+(((-1.0)*r00*x11081*x11085))+(((-1.0)*r01*x11096)));
evalcond[4]=((((-1.0)*cj1*x11089))+(((-1.0)*x11087))+(((-1.0)*x11088*x11094)));
evalcond[5]=(((r00*x11090))+((r01*x11097))+((x11091*x11093))+(((-1.0)*x11085*x11086)));
evalcond[6]=(((cj5*x11091))+(((-1.0)*r01*sj3*x11085))+(((-1.0)*cj3*r00*x11082*x11085))+(((-1.0)*x11086*x11095)));
evalcond[7]=((((-1.0)*cj3*r21*x11085))+((x11084*x11093))+((r20*x11090))+x11087+((cj1*cj2))+((r21*x11097)));
evalcond[8]=((((-1.0)*cj3*r20*x11082*x11085))+(((-1.0)*x11092))+(((-1.0)*r21*sj3*x11085))+x11083+((cj5*x11084))+(((-1.0)*r21*x11088*x11095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11098=(cj5*r01);
IkReal x11099=(r00*sj5);
CheckValue<IkReal> x11100=IKPowWithIntegerCheck(((((-1.0)*x11098))+(((-1.0)*x11099))),-1);
if(!x11100.valid){
continue;
}
CheckValue<IkReal> x11101=IKPowWithIntegerCheck((((sj3*x11099))+((sj3*x11098))),-1);
if(!x11101.valid){
continue;
}
if( IKabs(((-1.0)*(x11100.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11101.value)*((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11100.value)))+IKsqr(((x11101.value)*((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11100.value)), ((x11101.value)*((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11102=IKsin(j4);
IkReal x11103=IKcos(j4);
IkReal x11104=(cj1*sj2);
IkReal x11105=(r20*sj3);
IkReal x11106=((1.0)*sj5);
IkReal x11107=(cj3*r01);
IkReal x11108=(sj1*sj2);
IkReal x11109=((1.0)*cj3);
IkReal x11110=((1.0)*cj2);
IkReal x11111=(cj3*cj5);
IkReal x11112=(r00*sj3);
IkReal x11113=(sj1*x11110);
IkReal x11114=(sj5*x11103);
IkReal x11115=(r12*x11102);
IkReal x11116=(cj5*x11103);
IkReal x11117=((1.0)*cj5*x11102);
IkReal x11118=(sj3*x11116);
evalcond[0]=(r12*x11103);
evalcond[1]=(((sj3*x11115))+x11104+(((-1.0)*x11113)));
evalcond[2]=((((-1.0)*r21*x11117))+(((-1.0)*r20*x11102*x11106)));
evalcond[3]=((1.0)+(((-1.0)*r00*x11102*x11106))+(((-1.0)*r01*x11117)));
evalcond[4]=((((-1.0)*x11108))+(((-1.0)*cj1*x11110))+(((-1.0)*x11109*x11115)));
evalcond[5]=(((x11112*x11114))+((r00*x11111))+((r01*x11118))+(((-1.0)*x11106*x11107)));
evalcond[6]=(((cj5*x11112))+(((-1.0)*cj3*r00*x11103*x11106))+(((-1.0)*r01*sj3*x11106))+(((-1.0)*x11107*x11116)));
evalcond[7]=(((x11105*x11114))+(((-1.0)*cj3*r21*x11106))+x11108+((r21*x11118))+((r20*x11111))+((cj1*cj2)));
evalcond[8]=(((cj5*x11105))+(((-1.0)*cj3*r20*x11103*x11106))+x11104+(((-1.0)*r21*sj3*x11106))+(((-1.0)*r21*x11109*x11116))+(((-1.0)*x11113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11119=cj5*cj5;
IkReal x11120=(r00*sj3);
IkReal x11121=((1.0)*r22);
IkReal x11122=(cj3*r01);
IkReal x11123=((1.0)*r20);
IkReal x11124=(r01*sj3);
IkReal x11125=(cj5*sj5);
IkReal x11126=(cj3*r00);
IkReal x11127=(r20*x11119);
IkReal x11128=(r21*x11119);
IkReal x11129=((1.0)*r21*x11125);
CheckValue<IkReal> x11130 = IKatan2WithCheck(IkReal((((cj5*r22*x11126))+(((-1.0)*sj5*x11121*x11122)))),IkReal((((x11122*x11127))+(((-1.0)*x11122*x11129))+(((-1.0)*x11122*x11123))+((r20*x11125*x11126))+((x11126*x11128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11130.valid){
continue;
}
CheckValue<IkReal> x11131=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11123*x11124*x11125))+(((-1.0)*x11120*x11123))+(((-1.0)*x11120*x11129))+(((-1.0)*x11124*x11128))+((x11120*x11127))+(((-1.0)*r02*sj3*x11121)))),-1);
if(!x11131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11130.value)+(((1.5707963267949)*(x11131.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11132=IKsin(j4);
IkReal x11133=IKcos(j4);
IkReal x11134=(cj1*sj2);
IkReal x11135=(r20*sj3);
IkReal x11136=((1.0)*sj5);
IkReal x11137=(cj3*r01);
IkReal x11138=(cj3*r10);
IkReal x11139=(sj1*sj2);
IkReal x11140=((1.0)*cj3);
IkReal x11141=((1.0)*cj2);
IkReal x11142=(cj3*cj5);
IkReal x11143=(cj5*sj3);
IkReal x11144=(sj1*x11141);
IkReal x11145=(sj5*x11133);
IkReal x11146=(r12*x11132);
IkReal x11147=(r22*x11132);
IkReal x11148=(r02*x11132);
IkReal x11149=(cj5*x11133);
IkReal x11150=((1.0)*cj5*x11132);
IkReal x11151=(x11133*x11143);
evalcond[0]=(((r22*x11133))+(((-1.0)*r20*x11132*x11136))+(((-1.0)*r21*x11150)));
evalcond[1]=((((-1.0)*r10*x11132*x11136))+((r12*x11133))+(((-1.0)*r11*x11150)));
evalcond[2]=((1.0)+((r02*x11133))+(((-1.0)*r01*x11150))+(((-1.0)*r00*x11132*x11136)));
evalcond[3]=(((r01*x11151))+((r00*x11142))+((r00*sj3*x11145))+((sj3*x11148))+(((-1.0)*x11136*x11137)));
evalcond[4]=((((-1.0)*x11140*x11148))+((r00*x11143))+(((-1.0)*x11137*x11149))+(((-1.0)*r01*sj3*x11136))+(((-1.0)*cj3*r00*x11133*x11136)));
evalcond[5]=(((x11135*x11145))+((r21*x11151))+(((-1.0)*cj3*r21*x11136))+x11139+((cj1*cj2))+((r20*x11142))+((sj3*x11147)));
evalcond[6]=((((-1.0)*cj3*r11*x11136))+((cj5*x11138))+((r10*sj3*x11145))+((r11*x11151))+x11134+((sj3*x11146))+(((-1.0)*x11144)));
evalcond[7]=((((-1.0)*x11140*x11147))+(((-1.0)*cj3*r20*x11133*x11136))+((cj5*x11135))+(((-1.0)*r21*sj3*x11136))+x11134+(((-1.0)*r21*x11140*x11149))+(((-1.0)*x11144)));
evalcond[8]=((((-1.0)*x11140*x11146))+(((-1.0)*x11139))+(((-1.0)*cj1*x11141))+(((-1.0)*x11133*x11136*x11138))+((r10*x11143))+(((-1.0)*r11*sj3*x11136))+(((-1.0)*r11*x11140*x11149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11152 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11152.valid){
continue;
}
CheckValue<IkReal> x11153=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x11153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11152.value)+(((1.5707963267949)*(x11153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11154=IKsin(j4);
IkReal x11155=IKcos(j4);
IkReal x11156=(cj1*sj2);
IkReal x11157=(r20*sj3);
IkReal x11158=((1.0)*sj5);
IkReal x11159=(cj3*r01);
IkReal x11160=(cj3*r10);
IkReal x11161=(sj1*sj2);
IkReal x11162=((1.0)*cj3);
IkReal x11163=((1.0)*cj2);
IkReal x11164=(cj3*cj5);
IkReal x11165=(cj5*sj3);
IkReal x11166=(sj1*x11163);
IkReal x11167=(sj5*x11155);
IkReal x11168=(r12*x11154);
IkReal x11169=(r22*x11154);
IkReal x11170=(r02*x11154);
IkReal x11171=(cj5*x11155);
IkReal x11172=((1.0)*cj5*x11154);
IkReal x11173=(x11155*x11165);
evalcond[0]=((((-1.0)*r20*x11154*x11158))+((r22*x11155))+(((-1.0)*r21*x11172)));
evalcond[1]=((((-1.0)*r11*x11172))+((r12*x11155))+(((-1.0)*r10*x11154*x11158)));
evalcond[2]=((1.0)+(((-1.0)*r01*x11172))+((r02*x11155))+(((-1.0)*r00*x11154*x11158)));
evalcond[3]=((((-1.0)*x11158*x11159))+((sj3*x11170))+((r01*x11173))+((r00*x11164))+((r00*sj3*x11167)));
evalcond[4]=((((-1.0)*cj3*r00*x11155*x11158))+((r00*x11165))+(((-1.0)*r01*sj3*x11158))+(((-1.0)*x11159*x11171))+(((-1.0)*x11162*x11170)));
evalcond[5]=((((-1.0)*cj3*r21*x11158))+((r20*x11164))+((sj3*x11169))+x11161+((x11157*x11167))+((cj1*cj2))+((r21*x11173)));
evalcond[6]=(((r10*sj3*x11167))+((sj3*x11168))+(((-1.0)*cj3*r11*x11158))+((r11*x11173))+(((-1.0)*x11166))+x11156+((cj5*x11160)));
evalcond[7]=((((-1.0)*cj3*r20*x11155*x11158))+(((-1.0)*r21*x11162*x11171))+(((-1.0)*x11166))+(((-1.0)*r21*sj3*x11158))+x11156+(((-1.0)*x11162*x11169))+((cj5*x11157)));
evalcond[8]=((((-1.0)*x11155*x11158*x11160))+(((-1.0)*cj1*x11163))+(((-1.0)*x11161))+(((-1.0)*r11*sj3*x11158))+(((-1.0)*x11162*x11168))+((r10*x11165))+(((-1.0)*r11*x11162*x11171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11174 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11174.valid){
continue;
}
CheckValue<IkReal> x11175=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x11175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11174.value)+(((1.5707963267949)*(x11175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11176=IKsin(j4);
IkReal x11177=IKcos(j4);
IkReal x11178=(cj1*sj2);
IkReal x11179=(r20*sj3);
IkReal x11180=((1.0)*sj5);
IkReal x11181=(cj3*r01);
IkReal x11182=(cj3*r10);
IkReal x11183=(sj1*sj2);
IkReal x11184=((1.0)*cj3);
IkReal x11185=((1.0)*cj2);
IkReal x11186=(cj3*cj5);
IkReal x11187=(cj5*sj3);
IkReal x11188=(sj1*x11185);
IkReal x11189=(sj5*x11177);
IkReal x11190=(r12*x11176);
IkReal x11191=(r22*x11176);
IkReal x11192=(r02*x11176);
IkReal x11193=(cj5*x11177);
IkReal x11194=((1.0)*cj5*x11176);
IkReal x11195=(x11177*x11187);
evalcond[0]=((((-1.0)*r20*x11176*x11180))+((r22*x11177))+(((-1.0)*r21*x11194)));
evalcond[1]=(((r12*x11177))+(((-1.0)*r11*x11194))+(((-1.0)*r10*x11176*x11180)));
evalcond[2]=((1.0)+(((-1.0)*r01*x11194))+((r02*x11177))+(((-1.0)*r00*x11176*x11180)));
evalcond[3]=(((sj3*x11192))+((r01*x11195))+(((-1.0)*x11180*x11181))+((r00*x11186))+((r00*sj3*x11189)));
evalcond[4]=((((-1.0)*r01*sj3*x11180))+((r00*x11187))+(((-1.0)*x11184*x11192))+(((-1.0)*x11181*x11193))+(((-1.0)*cj3*r00*x11177*x11180)));
evalcond[5]=(((sj3*x11191))+((r21*x11195))+((r20*x11186))+x11183+((x11179*x11189))+(((-1.0)*cj3*r21*x11180))+((cj1*cj2)));
evalcond[6]=(((sj3*x11190))+((r11*x11195))+(((-1.0)*x11188))+(((-1.0)*cj3*r11*x11180))+x11178+((cj5*x11182))+((r10*sj3*x11189)));
evalcond[7]=((((-1.0)*r21*sj3*x11180))+(((-1.0)*x11188))+(((-1.0)*cj3*r20*x11177*x11180))+(((-1.0)*x11184*x11191))+x11178+(((-1.0)*r21*x11184*x11193))+((cj5*x11179)));
evalcond[8]=((((-1.0)*x11184*x11190))+(((-1.0)*r11*x11184*x11193))+(((-1.0)*x11177*x11180*x11182))+(((-1.0)*r11*sj3*x11180))+(((-1.0)*cj1*x11185))+(((-1.0)*x11183))+((r10*x11187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11196=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x11196;
j4eval[1]=IKsign(x11196);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11197=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x11197;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x11197);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11198=cj5*cj5;
IkReal x11199=(r00*sj3);
IkReal x11200=((1.0)*sj3);
IkReal x11201=(cj5*sj5);
IkReal x11202=((((-1.0)*r20*x11199))+((r20*x11198*x11199))+(((-1.0)*r01*r21*x11198*x11200))+(((-1.0)*r01*r20*x11200*x11201))+(((-1.0)*r21*x11199*x11201))+(((-1.0)*r02*r22*x11200)));
j4eval[0]=x11202;
j4eval[1]=IKsign(x11202);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x11203=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x11203;
j4eval[1]=IKsign(x11203);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x11204=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x11204;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x11204);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x11205=cj5*cj5;
IkReal x11206=r00*r00;
IkReal x11207=(r00*sj5);
IkReal x11208=(cj5*r01);
IkReal x11209=((((2.0)*x11207*x11208))+x11206+((x11205*(r01*r01)))+(r02*r02)+(((-1.0)*x11205*x11206)));
j4eval[0]=x11209;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x11208))+(((-1.0)*x11207))))));
j4eval[2]=IKsign(x11209);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11210=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11210);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11210);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x11211=((1.0)*sj5);
IkReal x11212=((1.0)*cj5);
j4eval[0]=((((-1.0)*r01*x11212))+(((-1.0)*r00*x11211)));
j4eval[1]=((((-1.0)*r11*x11212))+(((-1.0)*r10*x11211)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11213=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11213);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11213);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11214=((1.0)*sj1);
CheckValue<IkReal> x11215=IKPowWithIntegerCheck(r22,-1);
if(!x11215.valid){
continue;
}
CheckValue<IkReal> x11216=IKPowWithIntegerCheck(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))),-1);
if(!x11216.valid){
continue;
}
if( IKabs(((x11215.value)*((((cj1*sj2))+(((-1.0)*cj2*x11214)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11216.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj2*x11214)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11215.value)*((((cj1*sj2))+(((-1.0)*cj2*x11214))))))+IKsqr(((x11216.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj2*x11214))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11215.value)*((((cj1*sj2))+(((-1.0)*cj2*x11214))))), ((x11216.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj2*x11214))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11217=IKsin(j4);
IkReal x11218=IKcos(j4);
IkReal x11219=(cj5*r11);
IkReal x11220=(r10*sj5);
IkReal x11221=((1.0)*cj5*r01);
IkReal x11222=((1.0)*r00*sj5);
IkReal x11223=((1.0)*x11217);
IkReal x11224=((1.0)*x11218);
evalcond[0]=(r22*x11218);
evalcond[1]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x11223)));
evalcond[2]=((((-1.0)*x11220*x11223))+(((-1.0)*x11219*x11223)));
evalcond[3]=((((-1.0)*x11218*x11222))+(((-1.0)*x11218*x11221)));
evalcond[4]=((-1.0)+(((-1.0)*x11217*x11221))+(((-1.0)*x11217*x11222)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*x11220*x11224))+(((-1.0)*x11219*x11224))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11225=((1.0)*cj5);
IkReal x11226=((1.0)*sj5);
CheckValue<IkReal> x11227=IKPowWithIntegerCheck(((((-1.0)*r00*x11226))+(((-1.0)*r01*x11225))),-1);
if(!x11227.valid){
continue;
}
CheckValue<IkReal> x11228=IKPowWithIntegerCheck(((((-1.0)*r11*x11225))+(((-1.0)*r10*x11226))),-1);
if(!x11228.valid){
continue;
}
if( IKabs(x11227.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11228.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x11227.value)+IKsqr(((x11228.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x11227.value, ((x11228.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11229=IKsin(j4);
IkReal x11230=IKcos(j4);
IkReal x11231=(cj5*r11);
IkReal x11232=(r10*sj5);
IkReal x11233=((1.0)*cj5*r01);
IkReal x11234=((1.0)*r00*sj5);
IkReal x11235=((1.0)*x11229);
IkReal x11236=((1.0)*x11230);
evalcond[0]=(r22*x11230);
evalcond[1]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x11235)));
evalcond[2]=((((-1.0)*x11231*x11235))+(((-1.0)*x11232*x11235)));
evalcond[3]=((((-1.0)*x11230*x11234))+(((-1.0)*x11230*x11233)));
evalcond[4]=((-1.0)+(((-1.0)*x11229*x11233))+(((-1.0)*x11229*x11234)));
evalcond[5]=((((-1.0)*x11231*x11236))+(((-1.0)*x11232*x11236))+((sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11237=((-1.0)*py);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11237);
rxp0_2=(py*r00);
rxp1_0=(r21*x11237);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11238=((-1.0)*py);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11238);
rxp0_2=(py*r00);
rxp1_0=(r21*x11238);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x11239=((1.0)*sj5);
IkReal x11240=((1.0)*cj5);
j4eval[0]=((((-1.0)*r01*x11240))+(((-1.0)*r00*x11239)));
j4eval[1]=((((-1.0)*r20*x11239))+(((-1.0)*r21*x11240)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11241=((1.0)*cj5);
IkReal x11242=((1.0)*sj5);
CheckValue<IkReal> x11243=IKPowWithIntegerCheck(((((-1.0)*r01*x11241))+(((-1.0)*r00*x11242))),-1);
if(!x11243.valid){
continue;
}
CheckValue<IkReal> x11244=IKPowWithIntegerCheck(((((-1.0)*r21*x11241))+(((-1.0)*r20*x11242))),-1);
if(!x11244.valid){
continue;
}
if( IKabs(x11243.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11244.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x11243.value)+IKsqr(((x11244.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x11243.value, ((x11244.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11245=IKsin(j4);
IkReal x11246=IKcos(j4);
IkReal x11247=((1.0)*cj5);
IkReal x11248=((1.0)*x11245);
IkReal x11249=((1.0)*sj5*x11246);
evalcond[0]=(r12*x11246);
evalcond[1]=(((sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x11248)));
evalcond[2]=((((-1.0)*r21*x11245*x11247))+(((-1.0)*r20*sj5*x11248)));
evalcond[3]=((((-1.0)*r00*x11249))+(((-1.0)*r01*x11246*x11247)));
evalcond[4]=((-1.0)+(((-1.0)*r00*sj5*x11248))+(((-1.0)*r01*x11245*x11247)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r20*x11249))+(((-1.0)*r21*x11246*x11247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11250=IKPowWithIntegerCheck(r12,-1);
if(!x11250.valid){
continue;
}
CheckValue<IkReal> x11251=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x11251.valid){
continue;
}
if( IKabs(((x11250.value)*((((sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11251.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11250.value)*((((sj1*sj2))+((cj1*cj2))))))+IKsqr(((x11251.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11250.value)*((((sj1*sj2))+((cj1*cj2))))), ((x11251.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11252=IKsin(j4);
IkReal x11253=IKcos(j4);
IkReal x11254=((1.0)*cj5);
IkReal x11255=((1.0)*x11252);
IkReal x11256=((1.0)*sj5*x11253);
evalcond[0]=(r12*x11253);
evalcond[1]=(((sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x11255)));
evalcond[2]=((((-1.0)*r21*x11252*x11254))+(((-1.0)*r20*sj5*x11255)));
evalcond[3]=((((-1.0)*r00*x11256))+(((-1.0)*r01*x11253*x11254)));
evalcond[4]=((-1.0)+(((-1.0)*r00*sj5*x11255))+(((-1.0)*r01*x11252*x11254)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x11253*x11254))+(((-1.0)*r20*x11256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11257=cj5*cj5;
IkReal x11258=r00*r00;
IkReal x11259=(r00*sj5);
IkReal x11260=(cj5*r01);
CheckValue<IkReal> x11261=IKPowWithIntegerCheck(IKsign((x11258+(((-1.0)*x11257*x11258))+((x11257*(r01*r01)))+(r02*r02)+(((2.0)*x11259*x11260)))),-1);
if(!x11261.valid){
continue;
}
CheckValue<IkReal> x11262 = IKatan2WithCheck(IkReal(((((-1.0)*x11259))+(((-1.0)*x11260)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11261.value)))+(x11262.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11263=IKsin(j4);
IkReal x11264=IKcos(j4);
IkReal x11265=(r00*sj5);
IkReal x11266=(cj5*r01);
IkReal x11267=(r20*sj5);
IkReal x11268=(cj5*r11);
IkReal x11269=(cj5*r21);
IkReal x11270=(r10*sj5);
IkReal x11271=((1.0)*x11263);
IkReal x11272=((1.0)*x11264);
evalcond[0]=(((r22*x11264))+(((-1.0)*x11269*x11271))+(((-1.0)*x11267*x11271)));
evalcond[1]=((((-1.0)*x11268*x11271))+(((-1.0)*x11270*x11271))+((r12*x11264)));
evalcond[2]=((-1.0)+(((-1.0)*x11265*x11271))+((r02*x11264))+(((-1.0)*x11266*x11271)));
evalcond[3]=((((-1.0)*x11265*x11272))+(((-1.0)*r02*x11271))+(((-1.0)*x11266*x11272)));
evalcond[4]=((((-1.0)*r12*x11271))+((sj1*sj2))+(((-1.0)*x11268*x11272))+((cj1*cj2))+(((-1.0)*x11270*x11272)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x11271))+(((-1.0)*x11269*x11272))+(((-1.0)*x11267*x11272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11273 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11273.valid){
continue;
}
CheckValue<IkReal> x11274=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x11274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11273.value)+(((1.5707963267949)*(x11274.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11275=IKsin(j4);
IkReal x11276=IKcos(j4);
IkReal x11277=(r00*sj5);
IkReal x11278=(cj5*r01);
IkReal x11279=(r20*sj5);
IkReal x11280=(cj5*r11);
IkReal x11281=(cj5*r21);
IkReal x11282=(r10*sj5);
IkReal x11283=((1.0)*x11275);
IkReal x11284=((1.0)*x11276);
evalcond[0]=(((r22*x11276))+(((-1.0)*x11281*x11283))+(((-1.0)*x11279*x11283)));
evalcond[1]=((((-1.0)*x11282*x11283))+((r12*x11276))+(((-1.0)*x11280*x11283)));
evalcond[2]=((-1.0)+(((-1.0)*x11278*x11283))+((r02*x11276))+(((-1.0)*x11277*x11283)));
evalcond[3]=((((-1.0)*r02*x11283))+(((-1.0)*x11278*x11284))+(((-1.0)*x11277*x11284)));
evalcond[4]=((((-1.0)*r12*x11283))+(((-1.0)*x11282*x11284))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x11280*x11284)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r22*x11283))+(((-1.0)*cj2*sj1))+(((-1.0)*x11281*x11284))+(((-1.0)*x11279*x11284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11285 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11285.valid){
continue;
}
CheckValue<IkReal> x11286=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x11286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11285.value)+(((1.5707963267949)*(x11286.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11287=IKsin(j4);
IkReal x11288=IKcos(j4);
IkReal x11289=(r00*sj5);
IkReal x11290=(cj5*r01);
IkReal x11291=(r20*sj5);
IkReal x11292=(cj5*r11);
IkReal x11293=(cj5*r21);
IkReal x11294=(r10*sj5);
IkReal x11295=((1.0)*x11287);
IkReal x11296=((1.0)*x11288);
evalcond[0]=(((r22*x11288))+(((-1.0)*x11291*x11295))+(((-1.0)*x11293*x11295)));
evalcond[1]=((((-1.0)*x11294*x11295))+((r12*x11288))+(((-1.0)*x11292*x11295)));
evalcond[2]=((-1.0)+((r02*x11288))+(((-1.0)*x11290*x11295))+(((-1.0)*x11289*x11295)));
evalcond[3]=((((-1.0)*r02*x11295))+(((-1.0)*x11290*x11296))+(((-1.0)*x11289*x11296)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x11294*x11296))+(((-1.0)*x11292*x11296))+((cj1*cj2))+(((-1.0)*r12*x11295)));
evalcond[5]=((((-1.0)*x11291*x11296))+(((-1.0)*r22*x11295))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x11293*x11296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x11297=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x11297;
j4eval[1]=IKsign(x11297);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x11298=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x11298;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
j4eval[2]=IKsign(x11298);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x11299=(sj1*sj2);
IkReal x11300=((1.0)*r02);
IkReal x11301=(cj1*cj2);
IkReal x11302=(r00*sj5);
IkReal x11303=(cj5*r01);
IkReal x11304=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x11304;
j4eval[1]=((IKabs(((((-1.0)*x11299*x11300))+(((-1.0)*x11300*x11301)))))+(IKabs((((x11301*x11302))+((x11301*x11303))+((x11299*x11303))+((x11299*x11302))))));
j4eval[2]=IKsign(x11304);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11305=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11305);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11305);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[1]=(((cj5*r11))+((r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11306=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11306);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11306);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((cj5*r11))+((r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11307=((1.0)*sj2);
CheckValue<IkReal> x11308=IKPowWithIntegerCheck(r22,-1);
if(!x11308.valid){
continue;
}
CheckValue<IkReal> x11309=IKPowWithIntegerCheck((((cj5*r11))+((r10*sj5))),-1);
if(!x11309.valid){
continue;
}
if( IKabs(((x11308.value)*((((cj2*sj1))+(((-1.0)*cj1*x11307)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11309.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj1*x11307)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11308.value)*((((cj2*sj1))+(((-1.0)*cj1*x11307))))))+IKsqr(((x11309.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj1*x11307))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11308.value)*((((cj2*sj1))+(((-1.0)*cj1*x11307))))), ((x11309.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj1*x11307))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11310=IKcos(j4);
IkReal x11311=IKsin(j4);
IkReal x11312=(cj5*r11);
IkReal x11313=(r10*sj5);
IkReal x11314=(r00*sj5);
IkReal x11315=(cj5*r01);
IkReal x11316=((1.0)*x11311);
evalcond[0]=(r22*x11310);
evalcond[1]=(((r22*x11311))+((cj1*sj2))+(((-1.0)*cj2*sj1)));
evalcond[2]=(((x11310*x11315))+((x11310*x11314)));
evalcond[3]=((((-1.0)*x11313*x11316))+(((-1.0)*x11312*x11316)));
evalcond[4]=((-1.0)+(((-1.0)*x11314*x11316))+(((-1.0)*x11315*x11316)));
evalcond[5]=(((sj1*sj2))+((x11310*x11312))+((x11310*x11313))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11317=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x11317.valid){
continue;
}
CheckValue<IkReal> x11318=IKPowWithIntegerCheck((((cj5*r11))+((r10*sj5))),-1);
if(!x11318.valid){
continue;
}
if( IKabs(x11317.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11318.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x11317.value)+IKsqr(((x11318.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x11317.value, ((x11318.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11319=IKcos(j4);
IkReal x11320=IKsin(j4);
IkReal x11321=(cj5*r11);
IkReal x11322=(r10*sj5);
IkReal x11323=(r00*sj5);
IkReal x11324=(cj5*r01);
IkReal x11325=((1.0)*x11320);
evalcond[0]=(r22*x11319);
evalcond[1]=(((r22*x11320))+((cj1*sj2))+(((-1.0)*cj2*sj1)));
evalcond[2]=(((x11319*x11323))+((x11319*x11324)));
evalcond[3]=((((-1.0)*x11322*x11325))+(((-1.0)*x11321*x11325)));
evalcond[4]=((-1.0)+(((-1.0)*x11323*x11325))+(((-1.0)*x11324*x11325)));
evalcond[5]=(((sj1*sj2))+((x11319*x11321))+((x11319*x11322))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x11326=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x11326;
j4eval[1]=IKsign(x11326);
j4eval[2]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x11327=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x11327;
j4eval[1]=IKsign(x11327);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x11328=cj5*cj5;
IkReal x11329=r00*r00;
IkReal x11330=(r00*sj5);
IkReal x11331=(cj5*r01);
IkReal x11332=((((-1.0)*(r02*r02)))+(((-1.0)*x11328*(r01*r01)))+(((-1.0)*x11329))+((x11328*x11329))+(((-2.0)*x11330*x11331)));
j4eval[0]=x11332;
j4eval[1]=IKsign(x11332);
j4eval[2]=((IKabs(r02))+(IKabs((x11331+x11330))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11333=cj5*cj5;
IkReal x11334=r00*r00;
IkReal x11335=(r00*sj5);
IkReal x11336=(cj5*r01);
CheckValue<IkReal> x11337=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-2.0)*x11335*x11336))+(((-1.0)*x11333*(r01*r01)))+((x11333*x11334))+(((-1.0)*x11334)))),-1);
if(!x11337.valid){
continue;
}
CheckValue<IkReal> x11338 = IKatan2WithCheck(IkReal((x11336+x11335)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11337.value)))+(x11338.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11339=IKcos(j4);
IkReal x11340=IKsin(j4);
IkReal x11341=(cj5*r21);
IkReal x11342=(cj5*r11);
IkReal x11343=(cj5*r01);
IkReal x11344=(sj5*x11339);
IkReal x11345=((1.0)*x11340);
evalcond[0]=(((x11339*x11343))+((r00*x11344))+((r02*x11340)));
evalcond[1]=(((x11339*x11342))+((r10*x11344))+((r12*x11340)));
evalcond[2]=((1.0)+((x11339*x11341))+((r20*x11344))+((r22*x11340)));
evalcond[3]=((((-1.0)*r20*sj5*x11345))+((r22*x11339))+(((-1.0)*x11341*x11345)));
evalcond[4]=(((r12*x11339))+(((-1.0)*x11342*x11345))+(((-1.0)*r10*sj5*x11345)));
evalcond[5]=((-1.0)+(((-1.0)*x11343*x11345))+(((-1.0)*r00*sj5*x11345))+((r02*x11339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11346 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11346.valid){
continue;
}
CheckValue<IkReal> x11347=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x11347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11346.value)+(((1.5707963267949)*(x11347.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11348=IKcos(j4);
IkReal x11349=IKsin(j4);
IkReal x11350=(cj5*r21);
IkReal x11351=(cj5*r11);
IkReal x11352=(cj5*r01);
IkReal x11353=(sj5*x11348);
IkReal x11354=((1.0)*x11349);
evalcond[0]=(((r00*x11353))+((x11348*x11352))+((r02*x11349)));
evalcond[1]=(((r10*x11353))+((r12*x11349))+((x11348*x11351)));
evalcond[2]=((1.0)+((r20*x11353))+((r22*x11349))+((x11348*x11350)));
evalcond[3]=((((-1.0)*x11350*x11354))+(((-1.0)*r20*sj5*x11354))+((r22*x11348)));
evalcond[4]=((((-1.0)*x11351*x11354))+((r12*x11348))+(((-1.0)*r10*sj5*x11354)));
evalcond[5]=((-1.0)+(((-1.0)*r00*sj5*x11354))+(((-1.0)*x11352*x11354))+((r02*x11348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11355=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x11355.valid){
continue;
}
CheckValue<IkReal> x11356 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11355.value)))+(x11356.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11357=IKcos(j4);
IkReal x11358=IKsin(j4);
IkReal x11359=(cj5*r21);
IkReal x11360=(cj5*r11);
IkReal x11361=(cj5*r01);
IkReal x11362=(sj5*x11357);
IkReal x11363=((1.0)*x11358);
evalcond[0]=(((r02*x11358))+((r00*x11362))+((x11357*x11361)));
evalcond[1]=(((r12*x11358))+((x11357*x11360))+((r10*x11362)));
evalcond[2]=((1.0)+((r22*x11358))+((r20*x11362))+((x11357*x11359)));
evalcond[3]=((((-1.0)*r20*sj5*x11363))+(((-1.0)*x11359*x11363))+((r22*x11357)));
evalcond[4]=(((r12*x11357))+(((-1.0)*r10*sj5*x11363))+(((-1.0)*x11360*x11363)));
evalcond[5]=((-1.0)+((r02*x11357))+(((-1.0)*r00*sj5*x11363))+(((-1.0)*x11361*x11363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x11364=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x11364;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x11364);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x11365=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x11365;
j4eval[1]=IKsign(x11365);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x11366=cj5*cj5;
IkReal x11367=r00*r00;
IkReal x11368=(r00*sj5);
IkReal x11369=(cj5*r01);
IkReal x11370=((((-1.0)*x11367))+(((-1.0)*(r02*r02)))+(((-1.0)*x11366*(r01*r01)))+((x11366*x11367))+(((-2.0)*x11368*x11369)));
j4eval[0]=x11370;
j4eval[1]=IKsign(x11370);
j4eval[2]=((IKabs(r02))+(IKabs((x11368+x11369))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11371=cj5*cj5;
IkReal x11372=r00*r00;
IkReal x11373=(r00*sj5);
IkReal x11374=(cj5*r01);
CheckValue<IkReal> x11375 = IKatan2WithCheck(IkReal((x11374+x11373)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11375.valid){
continue;
}
CheckValue<IkReal> x11376=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11372))+(((-1.0)*x11371*(r01*r01)))+(((-1.0)*(r02*r02)))+(((-2.0)*x11373*x11374))+((x11371*x11372)))),-1);
if(!x11376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11375.value)+(((1.5707963267949)*(x11376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11377=IKcos(j4);
IkReal x11378=IKsin(j4);
IkReal x11379=(cj5*r21);
IkReal x11380=(cj5*r11);
IkReal x11381=(cj5*r01);
IkReal x11382=(sj5*x11377);
IkReal x11383=((1.0)*x11378);
evalcond[0]=(((r00*x11382))+((r02*x11378))+((x11377*x11381)));
evalcond[1]=(((r10*x11382))+((r12*x11378))+((x11377*x11380)));
evalcond[2]=((-1.0)+((x11377*x11379))+((r20*x11382))+((r22*x11378)));
evalcond[3]=((((-1.0)*x11379*x11383))+((r22*x11377))+(((-1.0)*r20*sj5*x11383)));
evalcond[4]=((((-1.0)*x11380*x11383))+((r12*x11377))+(((-1.0)*r10*sj5*x11383)));
evalcond[5]=((-1.0)+(((-1.0)*x11381*x11383))+((r02*x11377))+(((-1.0)*r00*sj5*x11383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11384=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x11384.valid){
continue;
}
CheckValue<IkReal> x11385 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11384.value)))+(x11385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11386=IKcos(j4);
IkReal x11387=IKsin(j4);
IkReal x11388=(cj5*r21);
IkReal x11389=(cj5*r11);
IkReal x11390=(cj5*r01);
IkReal x11391=(sj5*x11386);
IkReal x11392=((1.0)*x11387);
evalcond[0]=(((r02*x11387))+((r00*x11391))+((x11386*x11390)));
evalcond[1]=(((r12*x11387))+((x11386*x11389))+((r10*x11391)));
evalcond[2]=((-1.0)+((r20*x11391))+((x11386*x11388))+((r22*x11387)));
evalcond[3]=((((-1.0)*r20*sj5*x11392))+(((-1.0)*x11388*x11392))+((r22*x11386)));
evalcond[4]=(((r12*x11386))+(((-1.0)*r10*sj5*x11392))+(((-1.0)*x11389*x11392)));
evalcond[5]=((-1.0)+((r02*x11386))+(((-1.0)*x11390*x11392))+(((-1.0)*r00*sj5*x11392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11393 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11393.valid){
continue;
}
CheckValue<IkReal> x11394=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x11394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11393.value)+(((1.5707963267949)*(x11394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11395=IKcos(j4);
IkReal x11396=IKsin(j4);
IkReal x11397=(cj5*r21);
IkReal x11398=(cj5*r11);
IkReal x11399=(cj5*r01);
IkReal x11400=(sj5*x11395);
IkReal x11401=((1.0)*x11396);
evalcond[0]=(((r02*x11396))+((x11395*x11399))+((r00*x11400)));
evalcond[1]=(((r10*x11400))+((r12*x11396))+((x11395*x11398)));
evalcond[2]=((-1.0)+((x11395*x11397))+((r20*x11400))+((r22*x11396)));
evalcond[3]=((((-1.0)*x11397*x11401))+(((-1.0)*r20*sj5*x11401))+((r22*x11395)));
evalcond[4]=(((r12*x11395))+(((-1.0)*r10*sj5*x11401))+(((-1.0)*x11398*x11401)));
evalcond[5]=((-1.0)+((r02*x11395))+(((-1.0)*r00*sj5*x11401))+(((-1.0)*x11399*x11401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x11402=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x11402;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x11402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x11403=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x11403;
j4eval[1]=IKsign(x11403);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x11404=cj5*cj5;
IkReal x11405=r00*r00;
IkReal x11406=(r00*sj5);
IkReal x11407=(cj5*r01);
IkReal x11408=((((-2.0)*x11406*x11407))+(((-1.0)*(r02*r02)))+(((-1.0)*x11404*(r01*r01)))+((x11404*x11405))+(((-1.0)*x11405)));
j4eval[0]=x11408;
j4eval[1]=IKsign(x11408);
j4eval[2]=((IKabs(r02))+(IKabs((x11407+x11406))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11409=cj5*cj5;
IkReal x11410=r00*r00;
IkReal x11411=(r00*sj5);
IkReal x11412=(cj5*r01);
CheckValue<IkReal> x11413 = IKatan2WithCheck(IkReal((x11412+x11411)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11413.valid){
continue;
}
CheckValue<IkReal> x11414=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11411*x11412))+(((-1.0)*(r02*r02)))+(((-1.0)*x11410))+(((-1.0)*x11409*(r01*r01)))+((x11409*x11410)))),-1);
if(!x11414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11413.value)+(((1.5707963267949)*(x11414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11415=IKcos(j4);
IkReal x11416=IKsin(j4);
IkReal x11417=(cj5*r21);
IkReal x11418=(cj5*r11);
IkReal x11419=(cj5*r01);
IkReal x11420=(sj5*x11415);
IkReal x11421=((1.0)*x11416);
evalcond[0]=(((x11415*x11419))+((r02*x11416))+((r00*x11420)));
evalcond[1]=(((x11415*x11418))+((r10*x11420))+((r12*x11416)));
evalcond[2]=((-1.0)+((x11415*x11417))+((r20*x11420))+((r22*x11416)));
evalcond[3]=((((-1.0)*r20*sj5*x11421))+(((-1.0)*x11417*x11421))+((r22*x11415)));
evalcond[4]=(((r12*x11415))+(((-1.0)*r10*sj5*x11421))+(((-1.0)*x11418*x11421)));
evalcond[5]=((-1.0)+(((-1.0)*x11419*x11421))+((r02*x11415))+(((-1.0)*r00*sj5*x11421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11422=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x11422.valid){
continue;
}
CheckValue<IkReal> x11423 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11422.value)))+(x11423.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11424=IKcos(j4);
IkReal x11425=IKsin(j4);
IkReal x11426=(cj5*r21);
IkReal x11427=(cj5*r11);
IkReal x11428=(cj5*r01);
IkReal x11429=(sj5*x11424);
IkReal x11430=((1.0)*x11425);
evalcond[0]=(((r02*x11425))+((r00*x11429))+((x11424*x11428)));
evalcond[1]=(((r10*x11429))+((r12*x11425))+((x11424*x11427)));
evalcond[2]=((-1.0)+((r20*x11429))+((r22*x11425))+((x11424*x11426)));
evalcond[3]=((((-1.0)*r20*sj5*x11430))+(((-1.0)*x11426*x11430))+((r22*x11424)));
evalcond[4]=((((-1.0)*r10*sj5*x11430))+((r12*x11424))+(((-1.0)*x11427*x11430)));
evalcond[5]=((-1.0)+((r02*x11424))+(((-1.0)*x11428*x11430))+(((-1.0)*r00*sj5*x11430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11431 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11431.valid){
continue;
}
CheckValue<IkReal> x11432=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x11432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11431.value)+(((1.5707963267949)*(x11432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11433=IKcos(j4);
IkReal x11434=IKsin(j4);
IkReal x11435=(cj5*r21);
IkReal x11436=(cj5*r11);
IkReal x11437=(cj5*r01);
IkReal x11438=(sj5*x11433);
IkReal x11439=((1.0)*x11434);
evalcond[0]=(((r02*x11434))+((r00*x11438))+((x11433*x11437)));
evalcond[1]=(((r10*x11438))+((r12*x11434))+((x11433*x11436)));
evalcond[2]=((-1.0)+((r20*x11438))+((r22*x11434))+((x11433*x11435)));
evalcond[3]=((((-1.0)*r20*sj5*x11439))+(((-1.0)*x11435*x11439))+((r22*x11433)));
evalcond[4]=((((-1.0)*x11436*x11439))+(((-1.0)*r10*sj5*x11439))+((r12*x11433)));
evalcond[5]=((-1.0)+((r02*x11433))+(((-1.0)*x11437*x11439))+(((-1.0)*r00*sj5*x11439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11440=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x11440;
j4eval[1]=IKsign(x11440);
j4eval[2]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11441=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x11441;
j4eval[1]=IKsign(x11441);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11442=cj5*cj5;
IkReal x11443=r00*r00;
IkReal x11444=(r00*sj5);
IkReal x11445=(cj5*r01);
IkReal x11446=((((-1.0)*x11443))+(((-1.0)*(r02*r02)))+(((-1.0)*x11442*(r01*r01)))+(((-2.0)*x11444*x11445))+((x11442*x11443)));
j4eval[0]=x11446;
j4eval[1]=IKsign(x11446);
j4eval[2]=((IKabs(r02))+(IKabs((x11445+x11444))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11447=cj5*cj5;
IkReal x11448=r00*r00;
IkReal x11449=(r00*sj5);
IkReal x11450=(cj5*r01);
CheckValue<IkReal> x11451 = IKatan2WithCheck(IkReal((x11450+x11449)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11451.valid){
continue;
}
CheckValue<IkReal> x11452=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11448))+(((-1.0)*(r02*r02)))+((x11447*x11448))+(((-2.0)*x11449*x11450))+(((-1.0)*x11447*(r01*r01))))),-1);
if(!x11452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11451.value)+(((1.5707963267949)*(x11452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11453=IKcos(j4);
IkReal x11454=IKsin(j4);
IkReal x11455=(cj5*r21);
IkReal x11456=(cj5*r11);
IkReal x11457=(cj5*r01);
IkReal x11458=(sj5*x11453);
IkReal x11459=((1.0)*x11454);
evalcond[0]=(((r02*x11454))+((x11453*x11457))+((r00*x11458)));
evalcond[1]=(((r10*x11458))+((x11453*x11456))+((r12*x11454)));
evalcond[2]=((1.0)+((r20*x11458))+((x11453*x11455))+((r22*x11454)));
evalcond[3]=((((-1.0)*x11455*x11459))+((r22*x11453))+(((-1.0)*r20*sj5*x11459)));
evalcond[4]=((((-1.0)*x11456*x11459))+(((-1.0)*r10*sj5*x11459))+((r12*x11453)));
evalcond[5]=((-1.0)+((r02*x11453))+(((-1.0)*x11457*x11459))+(((-1.0)*r00*sj5*x11459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11460 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11460.valid){
continue;
}
CheckValue<IkReal> x11461=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x11461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11460.value)+(((1.5707963267949)*(x11461.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11462=IKcos(j4);
IkReal x11463=IKsin(j4);
IkReal x11464=(cj5*r21);
IkReal x11465=(cj5*r11);
IkReal x11466=(cj5*r01);
IkReal x11467=(sj5*x11462);
IkReal x11468=((1.0)*x11463);
evalcond[0]=(((x11462*x11466))+((r02*x11463))+((r00*x11467)));
evalcond[1]=(((r12*x11463))+((r10*x11467))+((x11462*x11465)));
evalcond[2]=((1.0)+((r22*x11463))+((r20*x11467))+((x11462*x11464)));
evalcond[3]=((((-1.0)*x11464*x11468))+((r22*x11462))+(((-1.0)*r20*sj5*x11468)));
evalcond[4]=(((r12*x11462))+(((-1.0)*x11465*x11468))+(((-1.0)*r10*sj5*x11468)));
evalcond[5]=((-1.0)+(((-1.0)*r00*sj5*x11468))+(((-1.0)*x11466*x11468))+((r02*x11462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11469=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x11469.valid){
continue;
}
CheckValue<IkReal> x11470 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11469.value)))+(x11470.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11471=IKcos(j4);
IkReal x11472=IKsin(j4);
IkReal x11473=(cj5*r21);
IkReal x11474=(cj5*r11);
IkReal x11475=(cj5*r01);
IkReal x11476=(sj5*x11471);
IkReal x11477=((1.0)*x11472);
evalcond[0]=(((r00*x11476))+((x11471*x11475))+((r02*x11472)));
evalcond[1]=(((r12*x11472))+((x11471*x11474))+((r10*x11476)));
evalcond[2]=((1.0)+((x11471*x11473))+((r22*x11472))+((r20*x11476)));
evalcond[3]=(((r22*x11471))+(((-1.0)*r20*sj5*x11477))+(((-1.0)*x11473*x11477)));
evalcond[4]=(((r12*x11471))+(((-1.0)*x11474*x11477))+(((-1.0)*r10*sj5*x11477)));
evalcond[5]=((-1.0)+(((-1.0)*x11475*x11477))+((r02*x11471))+(((-1.0)*r00*sj5*x11477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x11478=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x11478;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x11478);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x11479=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x11479;
j4eval[1]=IKsign(x11479);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x11480=cj5*cj5;
IkReal x11481=r00*r00;
IkReal x11482=(r00*sj5);
IkReal x11483=(cj5*r01);
IkReal x11484=((((-1.0)*x11480*(r01*r01)))+(((-1.0)*x11481))+(((-1.0)*(r02*r02)))+(((-2.0)*x11482*x11483))+((x11480*x11481)));
j4eval[0]=x11484;
j4eval[1]=IKsign(x11484);
j4eval[2]=((IKabs(r02))+(IKabs((x11483+x11482))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11485=cj5*cj5;
IkReal x11486=r00*r00;
IkReal x11487=(r00*sj5);
IkReal x11488=(cj5*r01);
CheckValue<IkReal> x11489 = IKatan2WithCheck(IkReal((x11488+x11487)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11489.valid){
continue;
}
CheckValue<IkReal> x11490=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11486))+(((-1.0)*(r02*r02)))+(((-2.0)*x11487*x11488))+(((-1.0)*x11485*(r01*r01)))+((x11485*x11486)))),-1);
if(!x11490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11489.value)+(((1.5707963267949)*(x11490.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11491=IKcos(j4);
IkReal x11492=IKsin(j4);
IkReal x11493=(cj5*r21);
IkReal x11494=(cj5*r11);
IkReal x11495=(cj5*r01);
IkReal x11496=(sj5*x11491);
IkReal x11497=((1.0)*x11492);
evalcond[0]=(((r00*x11496))+((x11491*x11495))+((r02*x11492)));
evalcond[1]=(((x11491*x11494))+((r10*x11496))+((r12*x11492)));
evalcond[2]=((-1.0)+((r22*x11492))+((x11491*x11493))+((r20*x11496)));
evalcond[3]=(((r22*x11491))+(((-1.0)*x11493*x11497))+(((-1.0)*r20*sj5*x11497)));
evalcond[4]=((((-1.0)*r10*sj5*x11497))+(((-1.0)*x11494*x11497))+((r12*x11491)));
evalcond[5]=((-1.0)+((r02*x11491))+(((-1.0)*x11495*x11497))+(((-1.0)*r00*sj5*x11497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11498=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x11498.valid){
continue;
}
CheckValue<IkReal> x11499 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11498.value)))+(x11499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11500=IKcos(j4);
IkReal x11501=IKsin(j4);
IkReal x11502=(cj5*r21);
IkReal x11503=(cj5*r11);
IkReal x11504=(cj5*r01);
IkReal x11505=(sj5*x11500);
IkReal x11506=((1.0)*x11501);
evalcond[0]=(((x11500*x11504))+((r00*x11505))+((r02*x11501)));
evalcond[1]=(((x11500*x11503))+((r12*x11501))+((r10*x11505)));
evalcond[2]=((-1.0)+((x11500*x11502))+((r20*x11505))+((r22*x11501)));
evalcond[3]=((((-1.0)*r20*sj5*x11506))+(((-1.0)*x11502*x11506))+((r22*x11500)));
evalcond[4]=(((r12*x11500))+(((-1.0)*r10*sj5*x11506))+(((-1.0)*x11503*x11506)));
evalcond[5]=((-1.0)+(((-1.0)*x11504*x11506))+(((-1.0)*r00*sj5*x11506))+((r02*x11500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11507 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11507.valid){
continue;
}
CheckValue<IkReal> x11508=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x11508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11507.value)+(((1.5707963267949)*(x11508.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11509=IKcos(j4);
IkReal x11510=IKsin(j4);
IkReal x11511=(cj5*r21);
IkReal x11512=(cj5*r11);
IkReal x11513=(cj5*r01);
IkReal x11514=(sj5*x11509);
IkReal x11515=((1.0)*x11510);
evalcond[0]=(((x11509*x11513))+((r02*x11510))+((r00*x11514)));
evalcond[1]=(((x11509*x11512))+((r12*x11510))+((r10*x11514)));
evalcond[2]=((-1.0)+((x11509*x11511))+((r20*x11514))+((r22*x11510)));
evalcond[3]=((((-1.0)*x11511*x11515))+(((-1.0)*r20*sj5*x11515))+((r22*x11509)));
evalcond[4]=((((-1.0)*r10*sj5*x11515))+((r12*x11509))+(((-1.0)*x11512*x11515)));
evalcond[5]=((-1.0)+(((-1.0)*r00*sj5*x11515))+(((-1.0)*x11513*x11515))+((r02*x11509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x11516=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x11516;
j4eval[1]=IKsign(x11516);
j4eval[2]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x11517=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x11517;
j4eval[1]=IKsign(x11517);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x11518=cj5*cj5;
IkReal x11519=r00*r00;
IkReal x11520=(r00*sj5);
IkReal x11521=(cj5*r01);
IkReal x11522=((((-1.0)*x11519))+(((-1.0)*x11518*(r01*r01)))+(((-1.0)*(r02*r02)))+(((-2.0)*x11520*x11521))+((x11518*x11519)));
j4eval[0]=x11522;
j4eval[1]=IKsign(x11522);
j4eval[2]=((IKabs(r02))+(IKabs((x11520+x11521))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11523=cj5*cj5;
IkReal x11524=r00*r00;
IkReal x11525=(r00*sj5);
IkReal x11526=(cj5*r01);
CheckValue<IkReal> x11527=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x11523*x11524))+(((-1.0)*x11524))+(((-1.0)*x11523*(r01*r01)))+(((-2.0)*x11525*x11526)))),-1);
if(!x11527.valid){
continue;
}
CheckValue<IkReal> x11528 = IKatan2WithCheck(IkReal((x11526+x11525)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11527.value)))+(x11528.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11529=IKcos(j4);
IkReal x11530=IKsin(j4);
IkReal x11531=(cj5*r21);
IkReal x11532=(cj5*r11);
IkReal x11533=(cj5*r01);
IkReal x11534=(sj5*x11529);
IkReal x11535=((1.0)*x11530);
evalcond[0]=(((x11529*x11533))+((r00*x11534))+((r02*x11530)));
evalcond[1]=(((x11529*x11532))+((r12*x11530))+((r10*x11534)));
evalcond[2]=((1.0)+((r22*x11530))+((x11529*x11531))+((r20*x11534)));
evalcond[3]=((((-1.0)*x11531*x11535))+((r22*x11529))+(((-1.0)*r20*sj5*x11535)));
evalcond[4]=((((-1.0)*x11532*x11535))+((r12*x11529))+(((-1.0)*r10*sj5*x11535)));
evalcond[5]=((-1.0)+(((-1.0)*x11533*x11535))+(((-1.0)*r00*sj5*x11535))+((r02*x11529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11536 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11536.valid){
continue;
}
CheckValue<IkReal> x11537=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x11537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11536.value)+(((1.5707963267949)*(x11537.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11538=IKcos(j4);
IkReal x11539=IKsin(j4);
IkReal x11540=(cj5*r21);
IkReal x11541=(cj5*r11);
IkReal x11542=(cj5*r01);
IkReal x11543=(sj5*x11538);
IkReal x11544=((1.0)*x11539);
evalcond[0]=(((r00*x11543))+((x11538*x11542))+((r02*x11539)));
evalcond[1]=(((r10*x11543))+((r12*x11539))+((x11538*x11541)));
evalcond[2]=((1.0)+((r22*x11539))+((x11538*x11540))+((r20*x11543)));
evalcond[3]=(((r22*x11538))+(((-1.0)*x11540*x11544))+(((-1.0)*r20*sj5*x11544)));
evalcond[4]=(((r12*x11538))+(((-1.0)*x11541*x11544))+(((-1.0)*r10*sj5*x11544)));
evalcond[5]=((-1.0)+(((-1.0)*r00*sj5*x11544))+(((-1.0)*x11542*x11544))+((r02*x11538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11545=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x11545.valid){
continue;
}
CheckValue<IkReal> x11546 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11545.value)))+(x11546.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11547=IKcos(j4);
IkReal x11548=IKsin(j4);
IkReal x11549=(cj5*r21);
IkReal x11550=(cj5*r11);
IkReal x11551=(cj5*r01);
IkReal x11552=(sj5*x11547);
IkReal x11553=((1.0)*x11548);
evalcond[0]=(((x11547*x11551))+((r00*x11552))+((r02*x11548)));
evalcond[1]=(((x11547*x11550))+((r12*x11548))+((r10*x11552)));
evalcond[2]=((1.0)+((x11547*x11549))+((r22*x11548))+((r20*x11552)));
evalcond[3]=(((r22*x11547))+(((-1.0)*x11549*x11553))+(((-1.0)*r20*sj5*x11553)));
evalcond[4]=((((-1.0)*r10*sj5*x11553))+(((-1.0)*x11550*x11553))+((r12*x11547)));
evalcond[5]=((-1.0)+(((-1.0)*x11551*x11553))+(((-1.0)*r00*sj5*x11553))+((r02*x11547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x11554=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x11554;
j4eval[1]=IKsign(x11554);
j4eval[2]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x11555=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x11555;
j4eval[1]=IKsign(x11555);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x11556=cj5*cj5;
IkReal x11557=r00*r00;
IkReal x11558=(r00*sj5);
IkReal x11559=(cj5*r01);
IkReal x11560=((((-1.0)*x11556*(r01*r01)))+(((-2.0)*x11558*x11559))+(((-1.0)*(r02*r02)))+((x11556*x11557))+(((-1.0)*x11557)));
j4eval[0]=x11560;
j4eval[1]=IKsign(x11560);
j4eval[2]=((IKabs(r02))+(IKabs((x11559+x11558))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11561=cj5*cj5;
IkReal x11562=r00*r00;
IkReal x11563=(r00*sj5);
IkReal x11564=(cj5*r01);
CheckValue<IkReal> x11565=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11563*x11564))+((x11561*x11562))+(((-1.0)*(r02*r02)))+(((-1.0)*x11561*(r01*r01)))+(((-1.0)*x11562)))),-1);
if(!x11565.valid){
continue;
}
CheckValue<IkReal> x11566 = IKatan2WithCheck(IkReal((x11563+x11564)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11565.value)))+(x11566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11567=IKcos(j4);
IkReal x11568=IKsin(j4);
IkReal x11569=(cj5*r21);
IkReal x11570=(cj5*r11);
IkReal x11571=(cj5*r01);
IkReal x11572=(sj5*x11567);
IkReal x11573=((1.0)*x11568);
evalcond[0]=(((x11567*x11571))+((r00*x11572))+((r02*x11568)));
evalcond[1]=(((x11567*x11570))+((r10*x11572))+((r12*x11568)));
evalcond[2]=((1.0)+((r20*x11572))+((r22*x11568))+((x11567*x11569)));
evalcond[3]=((((-1.0)*r20*sj5*x11573))+(((-1.0)*x11569*x11573))+((r22*x11567)));
evalcond[4]=((((-1.0)*x11570*x11573))+((r12*x11567))+(((-1.0)*r10*sj5*x11573)));
evalcond[5]=((-1.0)+(((-1.0)*r00*sj5*x11573))+(((-1.0)*x11571*x11573))+((r02*x11567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11574 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11574.valid){
continue;
}
CheckValue<IkReal> x11575=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x11575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11574.value)+(((1.5707963267949)*(x11575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11576=IKcos(j4);
IkReal x11577=IKsin(j4);
IkReal x11578=(cj5*r21);
IkReal x11579=(cj5*r11);
IkReal x11580=(cj5*r01);
IkReal x11581=(sj5*x11576);
IkReal x11582=((1.0)*x11577);
evalcond[0]=(((r02*x11577))+((r00*x11581))+((x11576*x11580)));
evalcond[1]=(((x11576*x11579))+((r12*x11577))+((r10*x11581)));
evalcond[2]=((1.0)+((r20*x11581))+((x11576*x11578))+((r22*x11577)));
evalcond[3]=((((-1.0)*x11578*x11582))+(((-1.0)*r20*sj5*x11582))+((r22*x11576)));
evalcond[4]=((((-1.0)*x11579*x11582))+(((-1.0)*r10*sj5*x11582))+((r12*x11576)));
evalcond[5]=((-1.0)+(((-1.0)*r00*sj5*x11582))+(((-1.0)*x11580*x11582))+((r02*x11576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11583=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x11583.valid){
continue;
}
CheckValue<IkReal> x11584 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11583.value)))+(x11584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11585=IKcos(j4);
IkReal x11586=IKsin(j4);
IkReal x11587=(cj5*r21);
IkReal x11588=(cj5*r11);
IkReal x11589=(cj5*r01);
IkReal x11590=(sj5*x11585);
IkReal x11591=((1.0)*x11586);
evalcond[0]=(((x11585*x11589))+((r00*x11590))+((r02*x11586)));
evalcond[1]=(((x11585*x11588))+((r10*x11590))+((r12*x11586)));
evalcond[2]=((1.0)+((x11585*x11587))+((r20*x11590))+((r22*x11586)));
evalcond[3]=((((-1.0)*r20*sj5*x11591))+((r22*x11585))+(((-1.0)*x11587*x11591)));
evalcond[4]=((((-1.0)*x11588*x11591))+(((-1.0)*r10*sj5*x11591))+((r12*x11585)));
evalcond[5]=((-1.0)+(((-1.0)*r00*sj5*x11591))+((r02*x11585))+(((-1.0)*x11589*x11591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11592=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x11592;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x11592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11593=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x11593;
j4eval[1]=IKsign(x11593);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11594=cj5*cj5;
IkReal x11595=r00*r00;
IkReal x11596=(r00*sj5);
IkReal x11597=(cj5*r01);
IkReal x11598=((((-1.0)*(r02*r02)))+((x11594*x11595))+(((-1.0)*x11595))+(((-1.0)*x11594*(r01*r01)))+(((-2.0)*x11596*x11597)));
j4eval[0]=x11598;
j4eval[1]=IKsign(x11598);
j4eval[2]=((IKabs(r02))+(IKabs((x11597+x11596))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11599=cj5*cj5;
IkReal x11600=r00*r00;
IkReal x11601=(r00*sj5);
IkReal x11602=(cj5*r01);
CheckValue<IkReal> x11603 = IKatan2WithCheck(IkReal((x11602+x11601)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11603.valid){
continue;
}
CheckValue<IkReal> x11604=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x11600))+(((-2.0)*x11601*x11602))+(((-1.0)*x11599*(r01*r01)))+((x11599*x11600)))),-1);
if(!x11604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11603.value)+(((1.5707963267949)*(x11604.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11605=IKcos(j4);
IkReal x11606=IKsin(j4);
IkReal x11607=(cj5*r21);
IkReal x11608=(cj5*r11);
IkReal x11609=(cj5*r01);
IkReal x11610=(sj5*x11605);
IkReal x11611=((1.0)*x11606);
evalcond[0]=(((x11605*x11609))+((r02*x11606))+((r00*x11610)));
evalcond[1]=(((x11605*x11608))+((r12*x11606))+((r10*x11610)));
evalcond[2]=((-1.0)+((r22*x11606))+((x11605*x11607))+((r20*x11610)));
evalcond[3]=((((-1.0)*r20*sj5*x11611))+((r22*x11605))+(((-1.0)*x11607*x11611)));
evalcond[4]=((((-1.0)*r10*sj5*x11611))+(((-1.0)*x11608*x11611))+((r12*x11605)));
evalcond[5]=((-1.0)+(((-1.0)*x11609*x11611))+(((-1.0)*r00*sj5*x11611))+((r02*x11605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11612=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x11612.valid){
continue;
}
CheckValue<IkReal> x11613 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11612.value)))+(x11613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11614=IKcos(j4);
IkReal x11615=IKsin(j4);
IkReal x11616=(cj5*r21);
IkReal x11617=(cj5*r11);
IkReal x11618=(cj5*r01);
IkReal x11619=(sj5*x11614);
IkReal x11620=((1.0)*x11615);
evalcond[0]=(((r02*x11615))+((r00*x11619))+((x11614*x11618)));
evalcond[1]=(((r12*x11615))+((x11614*x11617))+((r10*x11619)));
evalcond[2]=((-1.0)+((r22*x11615))+((r20*x11619))+((x11614*x11616)));
evalcond[3]=((((-1.0)*r20*sj5*x11620))+(((-1.0)*x11616*x11620))+((r22*x11614)));
evalcond[4]=(((r12*x11614))+(((-1.0)*r10*sj5*x11620))+(((-1.0)*x11617*x11620)));
evalcond[5]=((-1.0)+(((-1.0)*r00*sj5*x11620))+(((-1.0)*x11618*x11620))+((r02*x11614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11621 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11621.valid){
continue;
}
CheckValue<IkReal> x11622=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x11622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11621.value)+(((1.5707963267949)*(x11622.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11623=IKcos(j4);
IkReal x11624=IKsin(j4);
IkReal x11625=(cj5*r21);
IkReal x11626=(cj5*r11);
IkReal x11627=(cj5*r01);
IkReal x11628=(sj5*x11623);
IkReal x11629=((1.0)*x11624);
evalcond[0]=(((x11623*x11627))+((r02*x11624))+((r00*x11628)));
evalcond[1]=(((r12*x11624))+((x11623*x11626))+((r10*x11628)));
evalcond[2]=((-1.0)+((x11623*x11625))+((r22*x11624))+((r20*x11628)));
evalcond[3]=((((-1.0)*r20*sj5*x11629))+((r22*x11623))+(((-1.0)*x11625*x11629)));
evalcond[4]=(((r12*x11623))+(((-1.0)*r10*sj5*x11629))+(((-1.0)*x11626*x11629)));
evalcond[5]=((-1.0)+(((-1.0)*r00*sj5*x11629))+((r02*x11623))+(((-1.0)*x11627*x11629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11630=((-1.0)*py);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11630);
rxp0_2=(py*r00);
rxp1_0=(r21*x11630);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[1]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11631=((-1.0)*py);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11631);
rxp0_2=(py*r00);
rxp1_0=(r21*x11631);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11632=((1.0)*sj2);
CheckValue<IkReal> x11633=IKPowWithIntegerCheck(r12,-1);
if(!x11633.valid){
continue;
}
CheckValue<IkReal> x11634=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x11634.valid){
continue;
}
if( IKabs(((x11633.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj1*x11632)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11634.value)*((((cj2*sj1))+(((-1.0)*cj1*x11632)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11633.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj1*x11632))))))+IKsqr(((x11634.value)*((((cj2*sj1))+(((-1.0)*cj1*x11632))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11633.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*sj1*x11632))))), ((x11634.value)*((((cj2*sj1))+(((-1.0)*cj1*x11632))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11635=IKcos(j4);
IkReal x11636=IKsin(j4);
IkReal x11637=(cj5*r21);
IkReal x11638=(r00*sj5);
IkReal x11639=(cj5*r01);
IkReal x11640=(r20*sj5);
IkReal x11641=((1.0)*x11636);
evalcond[0]=(r12*x11635);
evalcond[1]=(((r12*x11636))+((sj1*sj2))+((cj1*cj2)));
evalcond[2]=(((x11635*x11639))+((x11635*x11638)));
evalcond[3]=((((-1.0)*x11640*x11641))+(((-1.0)*x11637*x11641)));
evalcond[4]=((-1.0)+(((-1.0)*x11639*x11641))+(((-1.0)*x11638*x11641)));
evalcond[5]=(((x11635*x11640))+((x11635*x11637))+((cj1*sj2))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11642=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x11642.valid){
continue;
}
CheckValue<IkReal> x11643=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x11643.valid){
continue;
}
if( IKabs(x11642.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11643.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x11642.value)+IKsqr(((x11643.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x11642.value, ((x11643.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11644=IKcos(j4);
IkReal x11645=IKsin(j4);
IkReal x11646=(cj5*r21);
IkReal x11647=(r00*sj5);
IkReal x11648=(cj5*r01);
IkReal x11649=(r20*sj5);
IkReal x11650=((1.0)*x11645);
evalcond[0]=(r12*x11644);
evalcond[1]=(((r12*x11645))+((sj1*sj2))+((cj1*cj2)));
evalcond[2]=(((x11644*x11648))+((x11644*x11647)));
evalcond[3]=((((-1.0)*x11646*x11650))+(((-1.0)*x11649*x11650)));
evalcond[4]=((-1.0)+(((-1.0)*x11647*x11650))+(((-1.0)*x11648*x11650)));
evalcond[5]=(((x11644*x11649))+((x11644*x11646))+((cj1*sj2))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11651=(sj1*sj2);
IkReal x11652=((1.0)*r02);
IkReal x11653=(cj1*cj2);
IkReal x11654=(r00*sj5);
IkReal x11655=(cj5*r01);
CheckValue<IkReal> x11656 = IKatan2WithCheck(IkReal((((x11653*x11654))+((x11653*x11655))+((x11651*x11655))+((x11651*x11654)))),IkReal(((((-1.0)*x11652*x11653))+(((-1.0)*x11651*x11652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11656.valid){
continue;
}
CheckValue<IkReal> x11657=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x11657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11656.value)+(((1.5707963267949)*(x11657.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11658=IKcos(j4);
IkReal x11659=IKsin(j4);
IkReal x11660=(r00*sj5);
IkReal x11661=(cj5*r01);
IkReal x11662=(r20*sj5);
IkReal x11663=(cj5*r21);
IkReal x11664=(cj5*r11);
IkReal x11665=(r10*sj5);
IkReal x11666=((1.0)*x11659);
evalcond[0]=(((r02*x11659))+((x11658*x11661))+((x11658*x11660)));
evalcond[1]=(((r22*x11658))+(((-1.0)*x11662*x11666))+(((-1.0)*x11663*x11666)));
evalcond[2]=(((r12*x11658))+(((-1.0)*x11664*x11666))+(((-1.0)*x11665*x11666)));
evalcond[3]=((-1.0)+((r02*x11658))+(((-1.0)*x11660*x11666))+(((-1.0)*x11661*x11666)));
evalcond[4]=(((r12*x11659))+((sj1*sj2))+((cj1*cj2))+((x11658*x11665))+((x11658*x11664)));
evalcond[5]=(((cj1*sj2))+((r22*x11659))+(((-1.0)*cj2*sj1))+((x11658*x11663))+((x11658*x11662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11667 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11667.valid){
continue;
}
CheckValue<IkReal> x11668=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x11668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11667.value)+(((1.5707963267949)*(x11668.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11669=IKcos(j4);
IkReal x11670=IKsin(j4);
IkReal x11671=(r00*sj5);
IkReal x11672=(cj5*r01);
IkReal x11673=(r20*sj5);
IkReal x11674=(cj5*r21);
IkReal x11675=(cj5*r11);
IkReal x11676=(r10*sj5);
IkReal x11677=((1.0)*x11670);
evalcond[0]=(((r02*x11670))+((x11669*x11671))+((x11669*x11672)));
evalcond[1]=((((-1.0)*x11673*x11677))+(((-1.0)*x11674*x11677))+((r22*x11669)));
evalcond[2]=((((-1.0)*x11676*x11677))+(((-1.0)*x11675*x11677))+((r12*x11669)));
evalcond[3]=((-1.0)+(((-1.0)*x11671*x11677))+(((-1.0)*x11672*x11677))+((r02*x11669)));
evalcond[4]=(((x11669*x11676))+((x11669*x11675))+((r12*x11670))+((sj1*sj2))+((cj1*cj2)));
evalcond[5]=(((r22*x11670))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x11669*x11674))+((x11669*x11673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11678 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11678.valid){
continue;
}
CheckValue<IkReal> x11679=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x11679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11678.value)+(((1.5707963267949)*(x11679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11680=IKcos(j4);
IkReal x11681=IKsin(j4);
IkReal x11682=(r00*sj5);
IkReal x11683=(cj5*r01);
IkReal x11684=(r20*sj5);
IkReal x11685=(cj5*r21);
IkReal x11686=(cj5*r11);
IkReal x11687=(r10*sj5);
IkReal x11688=((1.0)*x11681);
evalcond[0]=(((r02*x11681))+((x11680*x11682))+((x11680*x11683)));
evalcond[1]=((((-1.0)*x11684*x11688))+((r22*x11680))+(((-1.0)*x11685*x11688)));
evalcond[2]=((((-1.0)*x11687*x11688))+((r12*x11680))+(((-1.0)*x11686*x11688)));
evalcond[3]=((-1.0)+((r02*x11680))+(((-1.0)*x11682*x11688))+(((-1.0)*x11683*x11688)));
evalcond[4]=(((r12*x11681))+((sj1*sj2))+((x11680*x11686))+((x11680*x11687))+((cj1*cj2)));
evalcond[5]=(((r22*x11681))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x11680*x11685))+((x11680*x11684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11690 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x11690)==0){
continue;
}
IkReal x11689=pow(x11690,-0.5);
CheckValue<IkReal> x11691 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11691.valid){
continue;
}
IkReal gconst30=((-1.0)*(x11691.value));
IkReal gconst31=(r20*x11689);
IkReal gconst32=(r21*x11689);
CheckValue<IkReal> x11692 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11692.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11692.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11695 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11695.valid){
continue;
}
IkReal x11693=((-1.0)*(x11695.value));
IkReal x11694=x11689;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x11693;
IkReal gconst30=x11693;
IkReal gconst31=(r20*x11694);
IkReal gconst32=(r21*x11694);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11696=gconst32*gconst32;
IkReal x11697=gconst31*gconst31;
IkReal x11698=(r01*r11);
IkReal x11699=(gconst31*r10);
IkReal x11700=((1.0)*sj3);
IkReal x11701=(gconst31*gconst32);
IkReal x11702=(cj3*r00);
IkReal x11703=(gconst32*r00*sj3);
IkReal x11704=(r10*x11697);
CheckValue<IkReal> x11705=IKPowWithIntegerCheck(IKsign((((cj3*x11696*x11698))+((cj3*r02*r12))+((r11*x11701*x11702))+((cj3*gconst32*r01*x11699))+((x11702*x11704)))),-1);
if(!x11705.valid){
continue;
}
CheckValue<IkReal> x11706 = IKatan2WithCheck(IkReal(((((-1.0)*gconst31*r01*r12*x11700))+((r12*x11703)))),IkReal(((((-1.0)*r01*x11700*x11704))+(((-1.0)*x11698*x11700*x11701))+((x11699*x11703))+((r00*r11*sj3*x11696)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11705.value)))+(x11706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11707=IKsin(j4);
IkReal x11708=IKcos(j4);
IkReal x11709=(sj1*sj2);
IkReal x11710=(cj1*cj2);
IkReal x11711=((1.0)*cj3);
IkReal x11712=(gconst32*sj3);
IkReal x11713=(cj3*gconst32);
IkReal x11714=(cj1*sj2);
IkReal x11715=(gconst31*sj3);
IkReal x11716=((1.0)*r21);
IkReal x11717=(cj2*sj1);
IkReal x11718=((1.0)*r11);
IkReal x11719=((1.0)*r01);
IkReal x11720=(r01*x11708);
IkReal x11721=(r12*x11707);
IkReal x11722=(r21*x11708);
IkReal x11723=(r22*x11707);
IkReal x11724=(r10*x11708);
IkReal x11725=(r11*x11708);
IkReal x11726=(gconst32*x11707);
IkReal x11727=(r02*x11707);
IkReal x11728=(r00*x11708);
IkReal x11729=(x11710+x11709);
IkReal x11730=(gconst31*r20*x11708);
IkReal x11731=((1.0)*gconst31*x11707);
evalcond[0]=((((-1.0)*r20*x11731))+((r22*x11708))+(((-1.0)*x11716*x11726)));
evalcond[1]=((((-1.0)*r10*x11731))+((r12*x11708))+(((-1.0)*x11718*x11726)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x11731))+(((-1.0)*x11719*x11726))+((r02*x11708)));
evalcond[3]=(((r00*x11713))+((x11712*x11720))+(((-1.0)*gconst31*r01*x11711))+((sj3*x11727))+((x11715*x11728)));
evalcond[4]=((((-1.0)*x11715*x11719))+((r00*x11712))+(((-1.0)*gconst31*x11711*x11728))+(((-1.0)*gconst32*x11711*x11720))+(((-1.0)*x11711*x11727)));
evalcond[5]=(x11729+((r20*x11713))+((x11712*x11722))+((r20*x11708*x11715))+((sj3*x11723))+(((-1.0)*gconst31*r21*x11711)));
evalcond[6]=(x11717+((x11712*x11725))+(((-1.0)*x11714))+(((-1.0)*gconst31*r11*x11711))+((r10*x11713))+((sj3*x11721))+((x11715*x11724)));
evalcond[7]=(x11729+(((-1.0)*x11715*x11718))+(((-1.0)*gconst31*x11711*x11724))+((r10*x11712))+(((-1.0)*gconst32*x11711*x11725))+(((-1.0)*x11711*x11721)));
evalcond[8]=(x11714+(((-1.0)*x11715*x11716))+((r20*x11712))+(((-1.0)*x11717))+(((-1.0)*x11711*x11730))+(((-1.0)*gconst32*x11711*x11722))+(((-1.0)*x11711*x11723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11732 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst31*r20))+((gconst32*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11732.valid){
continue;
}
CheckValue<IkReal> x11733=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*r11))+((gconst32*r10)))),-1);
if(!x11733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11732.value)+(((1.5707963267949)*(x11733.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11734=IKsin(j4);
IkReal x11735=IKcos(j4);
IkReal x11736=(sj1*sj2);
IkReal x11737=(cj1*cj2);
IkReal x11738=((1.0)*cj3);
IkReal x11739=(gconst32*sj3);
IkReal x11740=(cj3*gconst32);
IkReal x11741=(cj1*sj2);
IkReal x11742=(gconst31*sj3);
IkReal x11743=((1.0)*r21);
IkReal x11744=(cj2*sj1);
IkReal x11745=((1.0)*r11);
IkReal x11746=((1.0)*r01);
IkReal x11747=(r01*x11735);
IkReal x11748=(r12*x11734);
IkReal x11749=(r21*x11735);
IkReal x11750=(r22*x11734);
IkReal x11751=(r10*x11735);
IkReal x11752=(r11*x11735);
IkReal x11753=(gconst32*x11734);
IkReal x11754=(r02*x11734);
IkReal x11755=(r00*x11735);
IkReal x11756=(x11737+x11736);
IkReal x11757=(gconst31*r20*x11735);
IkReal x11758=((1.0)*gconst31*x11734);
evalcond[0]=((((-1.0)*x11743*x11753))+((r22*x11735))+(((-1.0)*r20*x11758)));
evalcond[1]=((((-1.0)*x11745*x11753))+(((-1.0)*r10*x11758))+((r12*x11735)));
evalcond[2]=((-1.0)+((r02*x11735))+(((-1.0)*x11746*x11753))+(((-1.0)*r00*x11758)));
evalcond[3]=(((r00*x11740))+((x11742*x11755))+((sj3*x11754))+(((-1.0)*gconst31*r01*x11738))+((x11739*x11747)));
evalcond[4]=(((r00*x11739))+(((-1.0)*gconst32*x11738*x11747))+(((-1.0)*x11742*x11746))+(((-1.0)*x11738*x11754))+(((-1.0)*gconst31*x11738*x11755)));
evalcond[5]=(x11756+((r20*x11740))+((sj3*x11750))+((r20*x11735*x11742))+((x11739*x11749))+(((-1.0)*gconst31*r21*x11738)));
evalcond[6]=(((x11739*x11752))+x11744+((x11742*x11751))+(((-1.0)*x11741))+((r10*x11740))+(((-1.0)*gconst31*r11*x11738))+((sj3*x11748)));
evalcond[7]=(x11756+(((-1.0)*x11738*x11748))+(((-1.0)*x11742*x11745))+((r10*x11739))+(((-1.0)*gconst31*x11738*x11751))+(((-1.0)*gconst32*x11738*x11752)));
evalcond[8]=(x11741+(((-1.0)*gconst32*x11738*x11749))+(((-1.0)*x11744))+(((-1.0)*x11742*x11743))+((r20*x11739))+(((-1.0)*x11738*x11757))+(((-1.0)*x11738*x11750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11761 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x11761)==0){
continue;
}
IkReal x11759=pow(x11761,-0.5);
IkReal x11760=((-1.0)*x11759);
CheckValue<IkReal> x11762 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11762.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x11762.value))));
IkReal gconst34=(r20*x11760);
IkReal gconst35=(r21*x11760);
CheckValue<IkReal> x11763 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11763.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11763.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11767 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11767.valid){
continue;
}
IkReal x11764=((1.0)*(x11767.value));
IkReal x11765=x11759;
IkReal x11766=((-1.0)*x11765);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11764)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11764)));
IkReal gconst34=(r20*x11766);
IkReal gconst35=(r21*x11766);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11771 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11771.valid){
continue;
}
IkReal x11768=((1.0)*(x11771.value));
IkReal x11769=x11759;
IkReal x11770=((-1.0)*x11769);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11768)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11768)));
IkReal gconst34=(r20*x11770);
IkReal gconst35=(r21*x11770);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11775 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11775.valid){
continue;
}
IkReal x11772=((1.0)*(x11775.value));
IkReal x11773=x11759;
IkReal x11774=((-1.0)*x11773);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11772)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11772)));
IkReal gconst34=(r20*x11774);
IkReal gconst35=(r21*x11774);
IkReal x11776=((1.0)*sj3);
IkReal x11777=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11781=IKPowWithIntegerCheck(x11777,-1);
if(!x11781.valid){
continue;
}
IkReal x11778=x11781.value;
IkReal x11779=(r00*x11778);
IkReal x11780=(r01*x11778);
j4eval[0]=IKsign(((((-1.0)*r20*x11776*x11779*(r21*r21)))+(((-1.0)*r21*x11776*x11780*(r20*r20)))+(((-1.0)*r02*r22*x11776))+(((-1.0)*x11776*x11779*(r20*r20*r20)))+(((-1.0)*x11776*x11780*(r21*r21*r21)))));
j4eval[1]=cj3;
j4eval[2]=r12;
j4eval[3]=x11777;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11785 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11785.valid){
continue;
}
IkReal x11782=((1.0)*(x11785.value));
IkReal x11783=x11759;
IkReal x11784=((-1.0)*x11783);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11782)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11782)));
IkReal gconst34=(r20*x11784);
IkReal gconst35=(r21*x11784);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11789 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11789.valid){
continue;
}
IkReal x11786=((1.0)*(x11789.value));
IkReal x11787=x11759;
IkReal x11788=((-1.0)*x11787);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11786)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11786)));
IkReal gconst34=(r20*x11788);
IkReal gconst35=(r21*x11788);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11793 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11793.valid){
continue;
}
IkReal x11790=((1.0)*(x11793.value));
IkReal x11791=x11759;
IkReal x11792=((-1.0)*x11791);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11790)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11790)));
IkReal gconst34=(r20*x11792);
IkReal gconst35=(r21*x11792);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11794=(gconst35*r01);
IkReal x11795=(gconst34*r00);
CheckValue<IkReal> x11796=IKPowWithIntegerCheck(IKsign(((x11795*x11795)+(((2.0)*x11794*x11795))+(r02*r02)+(x11794*x11794))),-1);
if(!x11796.valid){
continue;
}
CheckValue<IkReal> x11797 = IKatan2WithCheck(IkReal(((((-1.0)*x11795))+(((-1.0)*x11794)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11796.value)))+(x11797.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11798=IKsin(j4);
IkReal x11799=IKcos(j4);
IkReal x11800=((1.0)*gconst34);
IkReal x11801=(gconst35*r21);
IkReal x11802=(gconst35*r01);
IkReal x11803=(gconst35*r11);
IkReal x11804=((1.0)*x11798);
IkReal x11805=((1.0)*x11799);
evalcond[0]=((((-1.0)*r20*x11798*x11800))+((r22*x11799))+(((-1.0)*x11801*x11804)));
evalcond[1]=(((r12*x11799))+(((-1.0)*x11803*x11804))+(((-1.0)*r10*x11798*x11800)));
evalcond[2]=((-1.0)+(((-1.0)*x11802*x11804))+((r02*x11799))+(((-1.0)*r00*x11798*x11800)));
evalcond[3]=((((-1.0)*r00*x11799*x11800))+(((-1.0)*x11802*x11805))+(((-1.0)*r02*x11804)));
evalcond[4]=((((-1.0)*x11803*x11805))+((sj1*sj2))+(((-1.0)*r12*x11804))+(((-1.0)*r10*x11799*x11800))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r20*x11799*x11800))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x11804))+(((-1.0)*x11801*x11805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11806=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r20))+((gconst34*r21)))),-1);
if(!x11806.valid){
continue;
}
CheckValue<IkReal> x11807 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst35*r11))+((gconst34*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11806.value)))+(x11807.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11808=IKsin(j4);
IkReal x11809=IKcos(j4);
IkReal x11810=((1.0)*gconst34);
IkReal x11811=(gconst35*r21);
IkReal x11812=(gconst35*r01);
IkReal x11813=(gconst35*r11);
IkReal x11814=((1.0)*x11808);
IkReal x11815=((1.0)*x11809);
evalcond[0]=((((-1.0)*r20*x11808*x11810))+((r22*x11809))+(((-1.0)*x11811*x11814)));
evalcond[1]=((((-1.0)*r10*x11808*x11810))+(((-1.0)*x11813*x11814))+((r12*x11809)));
evalcond[2]=((-1.0)+(((-1.0)*x11812*x11814))+(((-1.0)*r00*x11808*x11810))+((r02*x11809)));
evalcond[3]=((((-1.0)*x11812*x11815))+(((-1.0)*r00*x11809*x11810))+(((-1.0)*r02*x11814)));
evalcond[4]=((((-1.0)*x11813*x11815))+((sj1*sj2))+(((-1.0)*r12*x11814))+((cj1*cj2))+(((-1.0)*r10*x11809*x11810)));
evalcond[5]=((((-1.0)*r22*x11814))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r20*x11809*x11810))+(((-1.0)*x11811*x11815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11816=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*r11))+((gconst35*r10)))),-1);
if(!x11816.valid){
continue;
}
CheckValue<IkReal> x11817 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst34*r20))+((gconst35*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11816.value)))+(x11817.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11818=IKsin(j4);
IkReal x11819=IKcos(j4);
IkReal x11820=((1.0)*gconst34);
IkReal x11821=(gconst35*r21);
IkReal x11822=(gconst35*r01);
IkReal x11823=(gconst35*r11);
IkReal x11824=((1.0)*x11818);
IkReal x11825=((1.0)*x11819);
evalcond[0]=((((-1.0)*x11821*x11824))+((r22*x11819))+(((-1.0)*r20*x11818*x11820)));
evalcond[1]=((((-1.0)*r10*x11818*x11820))+(((-1.0)*x11823*x11824))+((r12*x11819)));
evalcond[2]=((-1.0)+(((-1.0)*x11822*x11824))+(((-1.0)*r00*x11818*x11820))+((r02*x11819)));
evalcond[3]=((((-1.0)*x11822*x11825))+(((-1.0)*r02*x11824))+(((-1.0)*r00*x11819*x11820)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x11823*x11825))+(((-1.0)*r12*x11824))+((cj1*cj2))+(((-1.0)*r10*x11819*x11820)));
evalcond[5]=((((-1.0)*x11821*x11825))+(((-1.0)*r20*x11819*x11820))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x11824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11829 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11829.valid){
continue;
}
IkReal x11826=((1.0)*(x11829.value));
IkReal x11827=x11759;
IkReal x11828=((-1.0)*x11827);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11826)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11826)));
IkReal gconst34=(r20*x11828);
IkReal gconst35=(r21*x11828);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11833 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11833.valid){
continue;
}
IkReal x11830=((1.0)*(x11833.value));
IkReal x11831=x11759;
IkReal x11832=((-1.0)*x11831);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11830)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11830)));
IkReal gconst34=(r20*x11832);
IkReal gconst35=(r21*x11832);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11837 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11837.valid){
continue;
}
IkReal x11834=((1.0)*(x11837.value));
IkReal x11835=x11759;
IkReal x11836=((-1.0)*x11835);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11834)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11834)));
IkReal gconst34=(r20*x11836);
IkReal gconst35=(r21*x11836);
IkReal x11838=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11842=IKPowWithIntegerCheck(x11838,-1);
if(!x11842.valid){
continue;
}
IkReal x11839=x11842.value;
IkReal x11840=((1.0)*x11839);
IkReal x11841=((((-1.0)*x11840*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x11839))+(((-1.0)*x11840*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02))));
j4eval[0]=x11841;
j4eval[1]=r02;
j4eval[2]=x11838;
j4eval[3]=IKsign(x11841);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11843=(gconst35*r01);
IkReal x11844=(gconst34*r00);
CheckValue<IkReal> x11845 = IKatan2WithCheck(IkReal((x11844+x11843)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11845.valid){
continue;
}
CheckValue<IkReal> x11846=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11844*x11844)))+(((-2.0)*x11843*x11844))+(((-1.0)*(x11843*x11843))))),-1);
if(!x11846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11845.value)+(((1.5707963267949)*(x11846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11847=IKcos(j4);
IkReal x11848=IKsin(j4);
IkReal x11849=(gconst34*r10);
IkReal x11850=(gconst34*r00);
IkReal x11851=(gconst34*r20);
IkReal x11852=(gconst35*x11847);
IkReal x11853=((1.0)*x11848);
evalcond[0]=(((r01*x11852))+((x11847*x11850))+((r02*x11848)));
evalcond[1]=((((-1.0)*x11851*x11853))+(((-1.0)*gconst35*r21*x11853))+((r22*x11847)));
evalcond[2]=((((-1.0)*x11849*x11853))+(((-1.0)*gconst35*r11*x11853))+((r12*x11847)));
evalcond[3]=((-1.0)+(((-1.0)*x11850*x11853))+(((-1.0)*gconst35*r01*x11853))+((r02*x11847)));
evalcond[4]=(((sj1*sj2))+((r11*x11852))+((r12*x11848))+((cj1*cj2))+((x11847*x11849)));
evalcond[5]=(((r21*x11852))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r22*x11848))+((x11847*x11851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11854=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r20))+((gconst34*r21)))),-1);
if(!x11854.valid){
continue;
}
CheckValue<IkReal> x11855 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst35*r11))+((gconst34*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11854.value)))+(x11855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11856=IKcos(j4);
IkReal x11857=IKsin(j4);
IkReal x11858=(gconst34*r10);
IkReal x11859=(gconst34*r00);
IkReal x11860=(gconst34*r20);
IkReal x11861=(gconst35*x11856);
IkReal x11862=((1.0)*x11857);
evalcond[0]=(((r01*x11861))+((r02*x11857))+((x11856*x11859)));
evalcond[1]=((((-1.0)*x11860*x11862))+((r22*x11856))+(((-1.0)*gconst35*r21*x11862)));
evalcond[2]=((((-1.0)*gconst35*r11*x11862))+((r12*x11856))+(((-1.0)*x11858*x11862)));
evalcond[3]=((-1.0)+(((-1.0)*x11859*x11862))+(((-1.0)*gconst35*r01*x11862))+((r02*x11856)));
evalcond[4]=(((sj1*sj2))+((r12*x11857))+((r11*x11861))+((cj1*cj2))+((x11856*x11858)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x11856*x11860))+((r22*x11857))+((r21*x11861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11863=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*r11))+((gconst35*r10)))),-1);
if(!x11863.valid){
continue;
}
CheckValue<IkReal> x11864 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst34*r20))+((gconst35*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11863.value)))+(x11864.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11865=IKcos(j4);
IkReal x11866=IKsin(j4);
IkReal x11867=(gconst34*r10);
IkReal x11868=(gconst34*r00);
IkReal x11869=(gconst34*r20);
IkReal x11870=(gconst35*x11865);
IkReal x11871=((1.0)*x11866);
evalcond[0]=(((r02*x11866))+((r01*x11870))+((x11865*x11868)));
evalcond[1]=((((-1.0)*x11869*x11871))+((r22*x11865))+(((-1.0)*gconst35*r21*x11871)));
evalcond[2]=((((-1.0)*x11867*x11871))+((r12*x11865))+(((-1.0)*gconst35*r11*x11871)));
evalcond[3]=((-1.0)+((r02*x11865))+(((-1.0)*x11868*x11871))+(((-1.0)*gconst35*r01*x11871)));
evalcond[4]=(((sj1*sj2))+((r12*x11866))+((r11*x11870))+((cj1*cj2))+((x11865*x11867)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r22*x11866))+((r21*x11870))+((x11865*x11869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11875 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11875.valid){
continue;
}
IkReal x11872=((1.0)*(x11875.value));
IkReal x11873=x11759;
IkReal x11874=((-1.0)*x11873);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11872)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11872)));
IkReal gconst34=(r20*x11874);
IkReal gconst35=(r21*x11874);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11879 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11879.valid){
continue;
}
IkReal x11876=((1.0)*(x11879.value));
IkReal x11877=x11759;
IkReal x11878=((-1.0)*x11877);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11876)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11876)));
IkReal gconst34=(r20*x11878);
IkReal gconst35=(r21*x11878);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11883 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11883.valid){
continue;
}
IkReal x11880=((1.0)*(x11883.value));
IkReal x11881=x11759;
IkReal x11882=((-1.0)*x11881);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11880)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11880)));
IkReal gconst34=(r20*x11882);
IkReal gconst35=(r21*x11882);
IkReal x11884=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11888=IKPowWithIntegerCheck(x11884,-1);
if(!x11888.valid){
continue;
}
IkReal x11885=x11888.value;
IkReal x11886=((1.0)*x11885);
IkReal x11887=((((-1.0)*x11886*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11885))+(((-1.0)*x11886*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02))));
j4eval[0]=x11887;
j4eval[1]=r02;
j4eval[2]=x11884;
j4eval[3]=IKsign(x11887);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11889=(gconst35*r01);
IkReal x11890=(gconst34*r00);
CheckValue<IkReal> x11891 = IKatan2WithCheck(IkReal((x11889+x11890)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11891.valid){
continue;
}
CheckValue<IkReal> x11892=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11889*x11889)))+(((-2.0)*x11889*x11890))+(((-1.0)*(x11890*x11890))))),-1);
if(!x11892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11891.value)+(((1.5707963267949)*(x11892.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11893=IKcos(j4);
IkReal x11894=IKsin(j4);
IkReal x11895=(gconst34*r10);
IkReal x11896=(gconst34*r00);
IkReal x11897=(gconst34*r20);
IkReal x11898=(gconst35*x11893);
IkReal x11899=((1.0)*x11894);
evalcond[0]=(((r01*x11898))+((r02*x11894))+((x11893*x11896)));
evalcond[1]=((((-1.0)*x11897*x11899))+((r22*x11893))+(((-1.0)*gconst35*r21*x11899)));
evalcond[2]=((((-1.0)*x11895*x11899))+(((-1.0)*gconst35*r11*x11899))+((r12*x11893)));
evalcond[3]=((-1.0)+((r02*x11893))+(((-1.0)*gconst35*r01*x11899))+(((-1.0)*x11896*x11899)));
evalcond[4]=(((r21*x11898))+((r22*x11894))+((sj1*sj2))+((x11893*x11897))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*sj2))+((x11893*x11895))+((r11*x11898))+((r12*x11894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11900=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r20))+((gconst34*r21)))),-1);
if(!x11900.valid){
continue;
}
CheckValue<IkReal> x11901 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst35*r11))+((gconst34*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11900.value)))+(x11901.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11902=IKcos(j4);
IkReal x11903=IKsin(j4);
IkReal x11904=(gconst34*r10);
IkReal x11905=(gconst34*r00);
IkReal x11906=(gconst34*r20);
IkReal x11907=(gconst35*x11902);
IkReal x11908=((1.0)*x11903);
evalcond[0]=(((x11902*x11905))+((r01*x11907))+((r02*x11903)));
evalcond[1]=(((r22*x11902))+(((-1.0)*gconst35*r21*x11908))+(((-1.0)*x11906*x11908)));
evalcond[2]=((((-1.0)*gconst35*r11*x11908))+((r12*x11902))+(((-1.0)*x11904*x11908)));
evalcond[3]=((-1.0)+(((-1.0)*x11905*x11908))+((r02*x11902))+(((-1.0)*gconst35*r01*x11908)));
evalcond[4]=(((x11902*x11906))+((r22*x11903))+((sj1*sj2))+((r21*x11907))+((cj1*cj2)));
evalcond[5]=(((x11902*x11904))+((cj2*sj1))+((r12*x11903))+(((-1.0)*cj1*sj2))+((r11*x11907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11909=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*r11))+((gconst35*r10)))),-1);
if(!x11909.valid){
continue;
}
CheckValue<IkReal> x11910 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst34*r20))+((gconst35*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11909.value)))+(x11910.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11911=IKcos(j4);
IkReal x11912=IKsin(j4);
IkReal x11913=(gconst34*r10);
IkReal x11914=(gconst34*r00);
IkReal x11915=(gconst34*r20);
IkReal x11916=(gconst35*x11911);
IkReal x11917=((1.0)*x11912);
evalcond[0]=(((r01*x11916))+((r02*x11912))+((x11911*x11914)));
evalcond[1]=(((r22*x11911))+(((-1.0)*gconst35*r21*x11917))+(((-1.0)*x11915*x11917)));
evalcond[2]=((((-1.0)*x11913*x11917))+(((-1.0)*gconst35*r11*x11917))+((r12*x11911)));
evalcond[3]=((-1.0)+(((-1.0)*x11914*x11917))+(((-1.0)*gconst35*r01*x11917))+((r02*x11911)));
evalcond[4]=(((r22*x11912))+((sj1*sj2))+((r21*x11916))+((cj1*cj2))+((x11911*x11915)));
evalcond[5]=(((r11*x11916))+((cj2*sj1))+(((-1.0)*cj1*sj2))+((x11911*x11913))+((r12*x11912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11921 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11921.valid){
continue;
}
IkReal x11918=((1.0)*(x11921.value));
IkReal x11919=x11759;
IkReal x11920=((-1.0)*x11919);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11918)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11918)));
IkReal gconst34=(r20*x11920);
IkReal gconst35=(r21*x11920);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11925 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11925.valid){
continue;
}
IkReal x11922=((1.0)*(x11925.value));
IkReal x11923=x11759;
IkReal x11924=((-1.0)*x11923);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11922)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11922)));
IkReal gconst34=(r20*x11924);
IkReal gconst35=(r21*x11924);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11929 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11929.valid){
continue;
}
IkReal x11926=((1.0)*(x11929.value));
IkReal x11927=x11759;
IkReal x11928=((-1.0)*x11927);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11926)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11926)));
IkReal gconst34=(r20*x11928);
IkReal gconst35=(r21*x11928);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11930=(gconst35*r01);
IkReal x11931=(gconst34*r00);
CheckValue<IkReal> x11932=IKPowWithIntegerCheck(IKsign(((x11930*x11930)+(x11931*x11931)+(((2.0)*x11930*x11931))+(r02*r02))),-1);
if(!x11932.valid){
continue;
}
CheckValue<IkReal> x11933 = IKatan2WithCheck(IkReal(((((-1.0)*x11931))+(((-1.0)*x11930)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11932.value)))+(x11933.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11934=IKsin(j4);
IkReal x11935=IKcos(j4);
IkReal x11936=((1.0)*gconst34);
IkReal x11937=(gconst35*r21);
IkReal x11938=(gconst35*r01);
IkReal x11939=(gconst35*r11);
IkReal x11940=((1.0)*x11934);
IkReal x11941=((1.0)*x11935);
evalcond[0]=((((-1.0)*x11937*x11940))+(((-1.0)*r20*x11934*x11936))+((r22*x11935)));
evalcond[1]=((((-1.0)*r10*x11934*x11936))+((r12*x11935))+(((-1.0)*x11939*x11940)));
evalcond[2]=((-1.0)+((r02*x11935))+(((-1.0)*x11938*x11940))+(((-1.0)*r00*x11934*x11936)));
evalcond[3]=((((-1.0)*r02*x11940))+(((-1.0)*x11938*x11941))+(((-1.0)*r00*x11935*x11936)));
evalcond[4]=((((-1.0)*x11937*x11941))+(((-1.0)*r22*x11940))+((sj1*sj2))+(((-1.0)*r20*x11935*x11936))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r10*x11935*x11936))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11940))+(((-1.0)*x11939*x11941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11942=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r20))+((gconst34*r21)))),-1);
if(!x11942.valid){
continue;
}
CheckValue<IkReal> x11943 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst35*r11))+((gconst34*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11942.value)))+(x11943.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11944=IKsin(j4);
IkReal x11945=IKcos(j4);
IkReal x11946=((1.0)*gconst34);
IkReal x11947=(gconst35*r21);
IkReal x11948=(gconst35*r01);
IkReal x11949=(gconst35*r11);
IkReal x11950=((1.0)*x11944);
IkReal x11951=((1.0)*x11945);
evalcond[0]=((((-1.0)*x11947*x11950))+(((-1.0)*r20*x11944*x11946))+((r22*x11945)));
evalcond[1]=(((r12*x11945))+(((-1.0)*r10*x11944*x11946))+(((-1.0)*x11949*x11950)));
evalcond[2]=((-1.0)+((r02*x11945))+(((-1.0)*x11948*x11950))+(((-1.0)*r00*x11944*x11946)));
evalcond[3]=((((-1.0)*r02*x11950))+(((-1.0)*r00*x11945*x11946))+(((-1.0)*x11948*x11951)));
evalcond[4]=((((-1.0)*x11947*x11951))+((sj1*sj2))+(((-1.0)*r22*x11950))+((cj1*cj2))+(((-1.0)*r20*x11945*x11946)));
evalcond[5]=((((-1.0)*r12*x11950))+((cj2*sj1))+(((-1.0)*r10*x11945*x11946))+(((-1.0)*cj1*sj2))+(((-1.0)*x11949*x11951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11952=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*r11))+((gconst35*r10)))),-1);
if(!x11952.valid){
continue;
}
CheckValue<IkReal> x11953 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst34*r20))+((gconst35*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11952.value)))+(x11953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11954=IKsin(j4);
IkReal x11955=IKcos(j4);
IkReal x11956=((1.0)*gconst34);
IkReal x11957=(gconst35*r21);
IkReal x11958=(gconst35*r01);
IkReal x11959=(gconst35*r11);
IkReal x11960=((1.0)*x11954);
IkReal x11961=((1.0)*x11955);
evalcond[0]=((((-1.0)*r20*x11954*x11956))+(((-1.0)*x11957*x11960))+((r22*x11955)));
evalcond[1]=(((r12*x11955))+(((-1.0)*x11959*x11960))+(((-1.0)*r10*x11954*x11956)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x11954*x11956))+(((-1.0)*x11958*x11960))+((r02*x11955)));
evalcond[3]=((((-1.0)*x11958*x11961))+(((-1.0)*r02*x11960))+(((-1.0)*r00*x11955*x11956)));
evalcond[4]=((((-1.0)*x11957*x11961))+(((-1.0)*r20*x11955*x11956))+((sj1*sj2))+(((-1.0)*r22*x11960))+((cj1*cj2)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r12*x11960))+(((-1.0)*x11959*x11961))+(((-1.0)*r10*x11955*x11956))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11962=((-1.0)*r20);
IkReal x11963=((-1.0)*r21);
CheckValue<IkReal> x11965 = IKatan2WithCheck(IkReal(x11962),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11965.valid){
continue;
}
IkReal x11964=((1.0)*(x11965.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11964)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11962);
rxp0_2=(py*r00);
rxp1_0=(py*x11963);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11964)));
IkReal gconst34=x11962;
IkReal gconst35=x11963;
IkReal x11966=((1.0)*r01*r21);
IkReal x11967=((1.0)*r00*r20);
j4eval[0]=(x11966+x11967);
j4eval[1]=((((-1.0)*sj3*x11967))+(((-1.0)*sj3*x11966)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11968=((-1.0)*r20);
IkReal x11969=((-1.0)*r21);
CheckValue<IkReal> x11971 = IKatan2WithCheck(IkReal(x11968),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11971.valid){
continue;
}
IkReal x11970=((1.0)*(x11971.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11970)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11968);
rxp0_2=(py*r00);
rxp1_0=(py*x11969);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11970)));
IkReal gconst34=x11968;
IkReal gconst35=x11969;
IkReal x11972=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r20*x11972))+(((-1.0)*r01*r21*x11972)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11973=((-1.0)*r20);
IkReal x11974=((-1.0)*r21);
CheckValue<IkReal> x11976 = IKatan2WithCheck(IkReal(x11973),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11976.valid){
continue;
}
IkReal x11975=((1.0)*(x11976.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11975)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11973);
rxp0_2=(py*r00);
rxp1_0=(py*x11974);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11975)));
IkReal gconst34=x11973;
IkReal gconst35=x11974;
IkReal x11977=((1.0)*sj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r00*r20*x11977))+(((-1.0)*r01*r21*x11977)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11978=IKPowWithIntegerCheck(r12,-1);
if(!x11978.valid){
continue;
}
CheckValue<IkReal> x11979=IKPowWithIntegerCheck(sj3,-1);
if(!x11979.valid){
continue;
}
CheckValue<IkReal> x11980=IKPowWithIntegerCheck((((gconst35*r01*sj3))+((gconst34*r00*sj3))),-1);
if(!x11980.valid){
continue;
}
if( IKabs(((x11978.value)*(x11979.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11980.value)*(((((-1.0)*cj3*gconst35*r00))+((cj3*gconst34*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11978.value)*(x11979.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))))))+IKsqr(((x11980.value)*(((((-1.0)*cj3*gconst35*r00))+((cj3*gconst34*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11978.value)*(x11979.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))))), ((x11980.value)*(((((-1.0)*cj3*gconst35*r00))+((cj3*gconst34*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11981=IKsin(j4);
IkReal x11982=IKcos(j4);
IkReal x11983=(sj1*sj2);
IkReal x11984=(cj1*cj2);
IkReal x11985=(cj3*gconst35);
IkReal x11986=(gconst35*sj3);
IkReal x11987=(cj2*sj1);
IkReal x11988=(cj1*sj2);
IkReal x11989=((1.0)*gconst34);
IkReal x11990=(r01*x11982);
IkReal x11991=(r12*x11981);
IkReal x11992=(r00*x11989);
IkReal x11993=(cj3*x11982);
IkReal x11994=(r21*x11982);
IkReal x11995=(x11983+x11984);
IkReal x11996=((1.0)*gconst35*x11981);
IkReal x11997=(gconst34*sj3*x11982);
evalcond[0]=(r12*x11982);
evalcond[1]=(x11987+(((-1.0)*x11988))+((sj3*x11991)));
evalcond[2]=(x11995+(((-1.0)*cj3*x11991)));
evalcond[3]=((((-1.0)*r20*x11981*x11989))+(((-1.0)*r21*x11996)));
evalcond[4]=((-1.0)+(((-1.0)*x11981*x11992))+(((-1.0)*r01*x11996)));
evalcond[5]=((((-1.0)*cj3*r01*x11989))+((r00*x11997))+((r00*x11985))+((x11986*x11990)));
evalcond[6]=((((-1.0)*x11992*x11993))+(((-1.0)*r01*sj3*x11989))+(((-1.0)*x11985*x11990))+((r00*x11986)));
evalcond[7]=(((r20*x11997))+x11995+(((-1.0)*cj3*r21*x11989))+((r20*x11985))+((x11986*x11994)));
evalcond[8]=(x11988+(((-1.0)*r21*sj3*x11989))+(((-1.0)*x11985*x11994))+((r20*x11986))+(((-1.0)*x11987))+(((-1.0)*r20*x11989*x11993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11998=IKPowWithIntegerCheck(cj3,-1);
if(!x11998.valid){
continue;
}
CheckValue<IkReal> x11999=IKPowWithIntegerCheck(r12,-1);
if(!x11999.valid){
continue;
}
CheckValue<IkReal> x12000=IKPowWithIntegerCheck((((gconst35*r01*sj3))+((gconst34*r00*sj3))),-1);
if(!x12000.valid){
continue;
}
if( IKabs(((x11998.value)*(x11999.value)*((((sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12000.value)*(((((-1.0)*cj3*gconst35*r00))+((cj3*gconst34*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11998.value)*(x11999.value)*((((sj1*sj2))+((cj1*cj2))))))+IKsqr(((x12000.value)*(((((-1.0)*cj3*gconst35*r00))+((cj3*gconst34*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11998.value)*(x11999.value)*((((sj1*sj2))+((cj1*cj2))))), ((x12000.value)*(((((-1.0)*cj3*gconst35*r00))+((cj3*gconst34*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12001=IKsin(j4);
IkReal x12002=IKcos(j4);
IkReal x12003=(sj1*sj2);
IkReal x12004=(cj1*cj2);
IkReal x12005=(cj3*gconst35);
IkReal x12006=(gconst35*sj3);
IkReal x12007=(cj2*sj1);
IkReal x12008=(cj1*sj2);
IkReal x12009=((1.0)*gconst34);
IkReal x12010=(r01*x12002);
IkReal x12011=(r12*x12001);
IkReal x12012=(r00*x12009);
IkReal x12013=(cj3*x12002);
IkReal x12014=(r21*x12002);
IkReal x12015=(x12004+x12003);
IkReal x12016=((1.0)*gconst35*x12001);
IkReal x12017=(gconst34*sj3*x12002);
evalcond[0]=(r12*x12002);
evalcond[1]=((((-1.0)*x12008))+((sj3*x12011))+x12007);
evalcond[2]=(x12015+(((-1.0)*cj3*x12011)));
evalcond[3]=((((-1.0)*r20*x12001*x12009))+(((-1.0)*r21*x12016)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x12016))+(((-1.0)*x12001*x12012)));
evalcond[5]=((((-1.0)*cj3*r01*x12009))+((r00*x12005))+((r00*x12017))+((x12006*x12010)));
evalcond[6]=((((-1.0)*x12005*x12010))+((r00*x12006))+(((-1.0)*r01*sj3*x12009))+(((-1.0)*x12012*x12013)));
evalcond[7]=(((r20*x12005))+(((-1.0)*cj3*r21*x12009))+x12015+((r20*x12017))+((x12006*x12014)));
evalcond[8]=((((-1.0)*x12007))+(((-1.0)*x12005*x12014))+((r20*x12006))+x12008+(((-1.0)*r20*x12009*x12013))+(((-1.0)*r21*sj3*x12009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12018=(gconst35*r01);
IkReal x12019=(gconst34*r00);
CheckValue<IkReal> x12020=IKPowWithIntegerCheck(((((-1.0)*x12019))+(((-1.0)*x12018))),-1);
if(!x12020.valid){
continue;
}
CheckValue<IkReal> x12021=IKPowWithIntegerCheck((((sj3*x12018))+((sj3*x12019))),-1);
if(!x12021.valid){
continue;
}
if( IKabs(x12020.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12021.value)*(((((-1.0)*cj3*gconst35*r00))+((cj3*gconst34*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12020.value)+IKsqr(((x12021.value)*(((((-1.0)*cj3*gconst35*r00))+((cj3*gconst34*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12020.value, ((x12021.value)*(((((-1.0)*cj3*gconst35*r00))+((cj3*gconst34*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12022=IKsin(j4);
IkReal x12023=IKcos(j4);
IkReal x12024=(sj1*sj2);
IkReal x12025=(cj1*cj2);
IkReal x12026=(cj3*gconst35);
IkReal x12027=(gconst35*sj3);
IkReal x12028=(cj2*sj1);
IkReal x12029=(cj1*sj2);
IkReal x12030=((1.0)*gconst34);
IkReal x12031=(r01*x12023);
IkReal x12032=(r12*x12022);
IkReal x12033=(r00*x12030);
IkReal x12034=(cj3*x12023);
IkReal x12035=(r21*x12023);
IkReal x12036=(x12024+x12025);
IkReal x12037=((1.0)*gconst35*x12022);
IkReal x12038=(gconst34*sj3*x12023);
evalcond[0]=(r12*x12023);
evalcond[1]=((((-1.0)*x12029))+x12028+((sj3*x12032)));
evalcond[2]=((((-1.0)*cj3*x12032))+x12036);
evalcond[3]=((((-1.0)*r20*x12022*x12030))+(((-1.0)*r21*x12037)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x12037))+(((-1.0)*x12022*x12033)));
evalcond[5]=((((-1.0)*cj3*r01*x12030))+((x12027*x12031))+((r00*x12038))+((r00*x12026)));
evalcond[6]=((((-1.0)*x12033*x12034))+(((-1.0)*x12026*x12031))+((r00*x12027))+(((-1.0)*r01*sj3*x12030)));
evalcond[7]=(((r20*x12026))+((x12027*x12035))+((r20*x12038))+(((-1.0)*cj3*r21*x12030))+x12036);
evalcond[8]=((((-1.0)*x12026*x12035))+((r20*x12027))+(((-1.0)*x12028))+x12029+(((-1.0)*r20*x12030*x12034))+(((-1.0)*r21*sj3*x12030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12039=gconst34*gconst34;
IkReal x12040=gconst35*gconst35;
IkReal x12041=(cj3*r20);
IkReal x12042=((1.0)*r01);
IkReal x12043=(gconst34*gconst35);
IkReal x12044=(cj3*r00);
IkReal x12045=(r21*x12040);
IkReal x12046=((1.0)*r00*sj3);
CheckValue<IkReal> x12047=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj3*x12042*x12045))+(((-1.0)*r21*x12043*x12046))+(((-1.0)*r20*x12039*x12046))+(((-1.0)*r02*r22*sj3))+(((-1.0)*r20*sj3*x12042*x12043)))),-1);
if(!x12047.valid){
continue;
}
CheckValue<IkReal> x12048 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*gconst34*r22*x12042))+((gconst35*r22*x12044)))),IkReal(((((-1.0)*cj3*r21*x12042*x12043))+((r00*x12041*x12043))+(((-1.0)*x12039*x12041*x12042))+((x12044*x12045)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12047.value)))+(x12048.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12049=IKsin(j4);
IkReal x12050=IKcos(j4);
IkReal x12051=(sj1*sj2);
IkReal x12052=(cj1*cj2);
IkReal x12053=(gconst35*r01);
IkReal x12054=(gconst34*r10);
IkReal x12055=(gconst34*sj3);
IkReal x12056=((1.0)*r11);
IkReal x12057=(cj3*gconst35);
IkReal x12058=(gconst34*r00);
IkReal x12059=(gconst35*sj3);
IkReal x12060=(cj1*sj2);
IkReal x12061=(cj2*sj1);
IkReal x12062=(gconst35*r11);
IkReal x12063=(gconst34*r20);
IkReal x12064=(gconst35*r21);
IkReal x12065=((1.0)*x12049);
IkReal x12066=(sj3*x12049);
IkReal x12067=(sj3*x12050);
IkReal x12068=((1.0)*cj3*gconst34);
IkReal x12069=(x12052+x12051);
IkReal x12070=((1.0)*cj3*x12050);
evalcond[0]=((((-1.0)*x12064*x12065))+((r22*x12050))+(((-1.0)*x12063*x12065)));
evalcond[1]=((((-1.0)*x12054*x12065))+(((-1.0)*gconst35*x12049*x12056))+((r12*x12050)));
evalcond[2]=((-1.0)+(((-1.0)*x12053*x12065))+((r02*x12050))+(((-1.0)*x12058*x12065)));
evalcond[3]=(((x12053*x12067))+((r00*x12057))+((r02*x12066))+(((-1.0)*r01*x12068))+((r00*x12050*x12055)));
evalcond[4]=((((-1.0)*x12053*x12070))+((r00*x12059))+(((-1.0)*cj3*r02*x12065))+(((-1.0)*x12058*x12070))+(((-1.0)*r01*x12055)));
evalcond[5]=(((r20*x12057))+((r22*x12066))+((r20*x12050*x12055))+x12069+(((-1.0)*r21*x12068))+((r21*x12050*x12059)));
evalcond[6]=(((r10*x12057))+(((-1.0)*x12060))+((r12*x12066))+(((-1.0)*cj3*gconst34*x12056))+((x12054*x12067))+x12061+((r11*x12050*x12059)));
evalcond[7]=(((r10*x12059))+(((-1.0)*cj3*r12*x12065))+(((-1.0)*x12055*x12056))+x12069+(((-1.0)*x12050*x12056*x12057))+(((-1.0)*x12054*x12070)));
evalcond[8]=(((r20*x12059))+(((-1.0)*x12061))+(((-1.0)*r21*x12050*x12057))+(((-1.0)*cj3*r22*x12065))+x12060+(((-1.0)*x12063*x12070))+(((-1.0)*r21*x12055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12071=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r20))+((gconst34*r21)))),-1);
if(!x12071.valid){
continue;
}
CheckValue<IkReal> x12072 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst35*r11))+((gconst34*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12071.value)))+(x12072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12073=IKsin(j4);
IkReal x12074=IKcos(j4);
IkReal x12075=(sj1*sj2);
IkReal x12076=(cj1*cj2);
IkReal x12077=(gconst35*r01);
IkReal x12078=(gconst34*r10);
IkReal x12079=(gconst34*sj3);
IkReal x12080=((1.0)*r11);
IkReal x12081=(cj3*gconst35);
IkReal x12082=(gconst34*r00);
IkReal x12083=(gconst35*sj3);
IkReal x12084=(cj1*sj2);
IkReal x12085=(cj2*sj1);
IkReal x12086=(gconst35*r11);
IkReal x12087=(gconst34*r20);
IkReal x12088=(gconst35*r21);
IkReal x12089=((1.0)*x12073);
IkReal x12090=(sj3*x12073);
IkReal x12091=(sj3*x12074);
IkReal x12092=((1.0)*cj3*gconst34);
IkReal x12093=(x12075+x12076);
IkReal x12094=((1.0)*cj3*x12074);
evalcond[0]=((((-1.0)*x12088*x12089))+(((-1.0)*x12087*x12089))+((r22*x12074)));
evalcond[1]=((((-1.0)*gconst35*x12073*x12080))+(((-1.0)*x12078*x12089))+((r12*x12074)));
evalcond[2]=((-1.0)+(((-1.0)*x12077*x12089))+(((-1.0)*x12082*x12089))+((r02*x12074)));
evalcond[3]=(((r00*x12081))+((x12077*x12091))+((r02*x12090))+(((-1.0)*r01*x12092))+((r00*x12074*x12079)));
evalcond[4]=((((-1.0)*cj3*r02*x12089))+((r00*x12083))+(((-1.0)*r01*x12079))+(((-1.0)*x12077*x12094))+(((-1.0)*x12082*x12094)));
evalcond[5]=(((r20*x12081))+((r22*x12090))+(((-1.0)*r21*x12092))+x12093+((r20*x12074*x12079))+((r21*x12074*x12083)));
evalcond[6]=((((-1.0)*cj3*gconst34*x12080))+((r12*x12090))+(((-1.0)*x12084))+x12085+((r10*x12081))+((x12078*x12091))+((r11*x12074*x12083)));
evalcond[7]=((((-1.0)*x12078*x12094))+x12093+((r10*x12083))+(((-1.0)*cj3*r12*x12089))+(((-1.0)*x12074*x12080*x12081))+(((-1.0)*x12079*x12080)));
evalcond[8]=((((-1.0)*r21*x12079))+((r20*x12083))+(((-1.0)*x12087*x12094))+(((-1.0)*x12085))+(((-1.0)*cj3*r22*x12089))+x12084+(((-1.0)*r21*x12074*x12081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12095=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*r11))+((gconst35*r10)))),-1);
if(!x12095.valid){
continue;
}
CheckValue<IkReal> x12096 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst34*r20))+((gconst35*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12095.value)))+(x12096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12097=IKsin(j4);
IkReal x12098=IKcos(j4);
IkReal x12099=(sj1*sj2);
IkReal x12100=(cj1*cj2);
IkReal x12101=(gconst35*r01);
IkReal x12102=(gconst34*r10);
IkReal x12103=(gconst34*sj3);
IkReal x12104=((1.0)*r11);
IkReal x12105=(cj3*gconst35);
IkReal x12106=(gconst34*r00);
IkReal x12107=(gconst35*sj3);
IkReal x12108=(cj1*sj2);
IkReal x12109=(cj2*sj1);
IkReal x12110=(gconst35*r11);
IkReal x12111=(gconst34*r20);
IkReal x12112=(gconst35*r21);
IkReal x12113=((1.0)*x12097);
IkReal x12114=(sj3*x12097);
IkReal x12115=(sj3*x12098);
IkReal x12116=((1.0)*cj3*gconst34);
IkReal x12117=(x12100+x12099);
IkReal x12118=((1.0)*cj3*x12098);
evalcond[0]=(((r22*x12098))+(((-1.0)*x12112*x12113))+(((-1.0)*x12111*x12113)));
evalcond[1]=(((r12*x12098))+(((-1.0)*gconst35*x12097*x12104))+(((-1.0)*x12102*x12113)));
evalcond[2]=((-1.0)+(((-1.0)*x12101*x12113))+(((-1.0)*x12106*x12113))+((r02*x12098)));
evalcond[3]=(((r02*x12114))+(((-1.0)*r01*x12116))+((r00*x12105))+((x12101*x12115))+((r00*x12098*x12103)));
evalcond[4]=((((-1.0)*x12101*x12118))+(((-1.0)*x12106*x12118))+(((-1.0)*r01*x12103))+((r00*x12107))+(((-1.0)*cj3*r02*x12113)));
evalcond[5]=(((r20*x12098*x12103))+(((-1.0)*r21*x12116))+((r20*x12105))+x12117+((r22*x12114))+((r21*x12098*x12107)));
evalcond[6]=(((r10*x12105))+((r11*x12098*x12107))+(((-1.0)*cj3*gconst34*x12104))+x12109+((x12102*x12115))+((r12*x12114))+(((-1.0)*x12108)));
evalcond[7]=(((r10*x12107))+(((-1.0)*cj3*r12*x12113))+(((-1.0)*x12103*x12104))+(((-1.0)*x12102*x12118))+x12117+(((-1.0)*x12098*x12104*x12105)));
evalcond[8]=(((r20*x12107))+x12108+(((-1.0)*x12111*x12118))+(((-1.0)*r21*x12098*x12105))+(((-1.0)*cj3*r22*x12113))+(((-1.0)*r21*x12103))+(((-1.0)*x12109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12121 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12121)==0){
continue;
}
IkReal x12119=pow(x12121,-0.5);
IkReal x12120=((-1.0)*x12119);
CheckValue<IkReal> x12122 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x12122.valid){
continue;
}
IkReal gconst36=((-1.0)*(x12122.value));
IkReal gconst37=(r10*x12120);
IkReal gconst38=(r11*x12120);
CheckValue<IkReal> x12123 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x12123.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x12123.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12127 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x12127.valid){
continue;
}
IkReal x12124=((-1.0)*(x12127.value));
IkReal x12125=x12119;
IkReal x12126=((-1.0)*x12125);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x12124;
IkReal gconst36=x12124;
IkReal gconst37=(r10*x12126);
IkReal gconst38=(r11*x12126);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12128=gconst38*gconst38;
IkReal x12129=gconst37*gconst37;
IkReal x12130=(cj3*r21);
IkReal x12131=(r20*sj3);
IkReal x12132=(cj3*r20);
IkReal x12133=(r00*sj3);
IkReal x12134=(gconst37*gconst38*r00);
IkReal x12135=((1.0)*gconst37*r01*sj3);
CheckValue<IkReal> x12136 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12135))+((gconst38*r22*x12133)))),IkReal((((x12131*x12134))+(((-1.0)*r01*x12129*x12131))+(((-1.0)*gconst38*r21*x12135))+((r21*x12128*x12133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12136.valid){
continue;
}
CheckValue<IkReal> x12137=IKPowWithIntegerCheck(IKsign((((r01*x12128*x12130))+((r00*x12129*x12132))+((gconst37*gconst38*r01*x12132))+((cj3*r02*r22))+((x12130*x12134)))),-1);
if(!x12137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12136.value)+(((1.5707963267949)*(x12137.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12138=IKsin(j4);
IkReal x12139=IKcos(j4);
IkReal x12140=(sj1*sj2);
IkReal x12141=(cj1*cj2);
IkReal x12142=(gconst38*r11);
IkReal x12143=(cj3*gconst38);
IkReal x12144=(gconst37*sj3);
IkReal x12145=(cj2*sj1);
IkReal x12146=(gconst38*sj3);
IkReal x12147=((1.0)*r01);
IkReal x12148=(cj1*sj2);
IkReal x12149=((1.0)*cj3*gconst37);
IkReal x12150=(r00*x12139);
IkReal x12151=(r20*x12139);
IkReal x12152=((1.0)*x12138);
IkReal x12153=(sj3*x12138);
IkReal x12154=(r10*x12139);
IkReal x12155=((1.0)*x12139);
IkReal x12156=(x12141+x12140);
evalcond[0]=(((r22*x12139))+(((-1.0)*gconst37*r20*x12152))+(((-1.0)*gconst38*r21*x12152)));
evalcond[1]=((((-1.0)*x12142*x12152))+((r12*x12139))+(((-1.0)*gconst37*r10*x12152)));
evalcond[2]=((-1.0)+(((-1.0)*gconst37*r00*x12152))+((r02*x12139))+(((-1.0)*gconst38*x12138*x12147)));
evalcond[3]=((((-1.0)*cj3*gconst37*x12147))+((r01*x12139*x12146))+((r02*x12153))+((r00*x12143))+((x12144*x12150)));
evalcond[4]=((((-1.0)*x12144*x12147))+(((-1.0)*x12139*x12143*x12147))+(((-1.0)*cj3*r02*x12152))+((r00*x12146))+(((-1.0)*x12149*x12150)));
evalcond[5]=(((r22*x12153))+((r21*x12139*x12146))+x12156+((r20*x12143))+(((-1.0)*r21*x12149))+((x12144*x12151)));
evalcond[6]=(((sj3*x12139*x12142))+((r10*x12143))+(((-1.0)*x12148))+((r12*x12153))+(((-1.0)*r11*x12149))+x12145+((x12144*x12154)));
evalcond[7]=((((-1.0)*cj3*r12*x12152))+(((-1.0)*cj3*x12142*x12155))+((r10*x12146))+(((-1.0)*r11*x12144))+x12156+(((-1.0)*x12149*x12154)));
evalcond[8]=((((-1.0)*r21*x12144))+(((-1.0)*x12145))+x12148+((r20*x12146))+(((-1.0)*cj3*r22*x12152))+(((-1.0)*x12149*x12151))+(((-1.0)*r21*x12143*x12155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12157=IKPowWithIntegerCheck(IKsign((((gconst37*r21))+(((-1.0)*gconst38*r20)))),-1);
if(!x12157.valid){
continue;
}
CheckValue<IkReal> x12158 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst37*r10))+((gconst38*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12157.value)))+(x12158.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12159=IKsin(j4);
IkReal x12160=IKcos(j4);
IkReal x12161=(sj1*sj2);
IkReal x12162=(cj1*cj2);
IkReal x12163=(gconst38*r11);
IkReal x12164=(cj3*gconst38);
IkReal x12165=(gconst37*sj3);
IkReal x12166=(cj2*sj1);
IkReal x12167=(gconst38*sj3);
IkReal x12168=((1.0)*r01);
IkReal x12169=(cj1*sj2);
IkReal x12170=((1.0)*cj3*gconst37);
IkReal x12171=(r00*x12160);
IkReal x12172=(r20*x12160);
IkReal x12173=((1.0)*x12159);
IkReal x12174=(sj3*x12159);
IkReal x12175=(r10*x12160);
IkReal x12176=((1.0)*x12160);
IkReal x12177=(x12162+x12161);
evalcond[0]=((((-1.0)*gconst38*r21*x12173))+((r22*x12160))+(((-1.0)*gconst37*r20*x12173)));
evalcond[1]=((((-1.0)*x12163*x12173))+(((-1.0)*gconst37*r10*x12173))+((r12*x12160)));
evalcond[2]=((-1.0)+((r02*x12160))+(((-1.0)*gconst38*x12159*x12168))+(((-1.0)*gconst37*r00*x12173)));
evalcond[3]=((((-1.0)*cj3*gconst37*x12168))+((r01*x12160*x12167))+((r00*x12164))+((x12165*x12171))+((r02*x12174)));
evalcond[4]=((((-1.0)*x12160*x12164*x12168))+(((-1.0)*x12170*x12171))+(((-1.0)*x12165*x12168))+((r00*x12167))+(((-1.0)*cj3*r02*x12173)));
evalcond[5]=(((r20*x12164))+x12177+((x12165*x12172))+(((-1.0)*r21*x12170))+((r22*x12174))+((r21*x12160*x12167)));
evalcond[6]=((((-1.0)*x12169))+((r10*x12164))+x12166+((x12165*x12175))+((r12*x12174))+(((-1.0)*r11*x12170))+((sj3*x12160*x12163)));
evalcond[7]=((((-1.0)*x12170*x12175))+((r10*x12167))+(((-1.0)*cj3*x12163*x12176))+x12177+(((-1.0)*cj3*r12*x12173))+(((-1.0)*r11*x12165)));
evalcond[8]=((((-1.0)*x12170*x12172))+(((-1.0)*x12166))+((r20*x12167))+x12169+(((-1.0)*cj3*r22*x12173))+(((-1.0)*r21*x12165))+(((-1.0)*r21*x12164*x12176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12180 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12180)==0){
continue;
}
IkReal x12178=pow(x12180,-0.5);
IkReal x12179=((1.0)*x12178);
CheckValue<IkReal> x12181 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x12181.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x12181.value))));
IkReal gconst40=(r10*x12179);
IkReal gconst41=(r11*x12179);
CheckValue<IkReal> x12182 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x12182.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x12182.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12186 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x12186.valid){
continue;
}
IkReal x12183=((1.0)*(x12186.value));
IkReal x12184=x12178;
IkReal x12185=((1.0)*x12184);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12183)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12183)));
IkReal gconst40=(r10*x12185);
IkReal gconst41=(r11*x12185);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12190 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x12190.valid){
continue;
}
IkReal x12187=((1.0)*(x12190.value));
IkReal x12188=x12178;
IkReal x12189=((1.0)*x12188);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12187)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12187)));
IkReal gconst40=(r10*x12189);
IkReal gconst41=(r11*x12189);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12194 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x12194.valid){
continue;
}
IkReal x12191=((1.0)*(x12194.value));
IkReal x12192=x12178;
IkReal x12193=((1.0)*x12192);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x12191)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12191)));
IkReal gconst40=(r10*x12193);
IkReal gconst41=(r11*x12193);
IkReal x12195=((1.0)*sj3);
CheckValue<IkReal> x12202=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12202.valid){
continue;
}
IkReal x12196=x12202.value;
IkReal x12197=(r20*x12196);
IkReal x12198=(r21*x12196);
IkReal x12199=(r00*x12196);
IkReal x12200=(r10*r11*x12196);
IkReal x12201=(r01*x12195*x12196);
j4eval[0]=IKsign(((((-1.0)*r01*r10*r11*x12195*x12197))+(((-1.0)*r00*x12195*x12197*(r10*r10)))+(((-1.0)*r02*r22*x12195))+(((-1.0)*r00*r10*r11*x12195*x12198))+(((-1.0)*r01*x12195*x12198*(r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12203=gconst40*gconst40;
IkReal x12204=gconst41*gconst41;
IkReal x12205=((1.0)*r22);
IkReal x12206=(gconst41*r21);
IkReal x12207=(cj3*r00);
IkReal x12208=(cj3*gconst40*r01);
IkReal x12209=((1.0)*r00*sj3);
IkReal x12210=(r20*x12203);
IkReal x12211=((1.0)*r01*sj3);
IkReal x12212=(gconst40*gconst41*r20);
IkReal x12213=(r21*x12204);
CheckValue<IkReal> x12214 = IKatan2WithCheck(IkReal((((gconst41*r22*x12207))+(((-1.0)*x12205*x12208)))),IkReal(((((-1.0)*cj3*r01*x12210))+((x12207*x12213))+((x12207*x12212))+(((-1.0)*x12206*x12208)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12214.valid){
continue;
}
CheckValue<IkReal> x12215=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst40*x12206*x12209))+(((-1.0)*x12211*x12213))+(((-1.0)*x12211*x12212))+(((-1.0)*r02*sj3*x12205))+(((-1.0)*x12209*x12210)))),-1);
if(!x12215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12214.value)+(((1.5707963267949)*(x12215.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12216=IKsin(j4);
IkReal x12217=IKcos(j4);
IkReal x12218=(sj1*sj2);
IkReal x12219=(cj1*cj2);
IkReal x12220=(gconst41*r21);
IkReal x12221=(gconst41*r01);
IkReal x12222=(gconst41*sj3);
IkReal x12223=(cj2*sj1);
IkReal x12224=(cj3*gconst41);
IkReal x12225=(cj1*sj2);
IkReal x12226=(gconst40*r00);
IkReal x12227=(gconst40*r20);
IkReal x12228=(gconst40*sj3);
IkReal x12229=(gconst41*r11);
IkReal x12230=((1.0)*x12216);
IkReal x12231=((1.0)*cj3*gconst40);
IkReal x12232=(r10*x12217);
IkReal x12233=(sj3*x12217);
IkReal x12234=(sj3*x12216);
IkReal x12235=((1.0)*x12217);
IkReal x12236=(x12219+x12218);
evalcond[0]=(((r22*x12217))+(((-1.0)*x12220*x12230))+(((-1.0)*x12227*x12230)));
evalcond[1]=(((r12*x12217))+(((-1.0)*x12229*x12230))+(((-1.0)*gconst40*r10*x12230)));
evalcond[2]=((-1.0)+((r02*x12217))+(((-1.0)*x12221*x12230))+(((-1.0)*x12226*x12230)));
evalcond[3]=(((x12221*x12233))+(((-1.0)*r01*x12231))+((r02*x12234))+((x12226*x12233))+((r00*x12224)));
evalcond[4]=((((-1.0)*cj3*r02*x12230))+(((-1.0)*cj3*x12226*x12235))+((r00*x12222))+(((-1.0)*cj3*x12221*x12235))+(((-1.0)*r01*x12228)));
evalcond[5]=((((-1.0)*r21*x12231))+x12236+((x12220*x12233))+((x12227*x12233))+((r22*x12234))+((r20*x12224)));
evalcond[6]=(((r12*x12234))+x12223+((x12228*x12232))+((r10*x12224))+((r11*x12217*x12222))+(((-1.0)*x12225))+(((-1.0)*r11*x12231)));
evalcond[7]=((((-1.0)*r11*x12224*x12235))+(((-1.0)*r11*x12228))+x12236+((r10*x12222))+(((-1.0)*cj3*r12*x12230))+(((-1.0)*x12231*x12232)));
evalcond[8]=((((-1.0)*cj3*x12220*x12235))+(((-1.0)*cj3*r22*x12230))+x12225+(((-1.0)*r21*x12228))+(((-1.0)*cj3*x12227*x12235))+((r20*x12222))+(((-1.0)*x12223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12237=IKPowWithIntegerCheck(IKsign((((gconst40*r21))+(((-1.0)*gconst41*r20)))),-1);
if(!x12237.valid){
continue;
}
CheckValue<IkReal> x12238 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst40*r10))+((gconst41*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12237.value)))+(x12238.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12239=IKsin(j4);
IkReal x12240=IKcos(j4);
IkReal x12241=(sj1*sj2);
IkReal x12242=(cj1*cj2);
IkReal x12243=(gconst41*r21);
IkReal x12244=(gconst41*r01);
IkReal x12245=(gconst41*sj3);
IkReal x12246=(cj2*sj1);
IkReal x12247=(cj3*gconst41);
IkReal x12248=(cj1*sj2);
IkReal x12249=(gconst40*r00);
IkReal x12250=(gconst40*r20);
IkReal x12251=(gconst40*sj3);
IkReal x12252=(gconst41*r11);
IkReal x12253=((1.0)*x12239);
IkReal x12254=((1.0)*cj3*gconst40);
IkReal x12255=(r10*x12240);
IkReal x12256=(sj3*x12240);
IkReal x12257=(sj3*x12239);
IkReal x12258=((1.0)*x12240);
IkReal x12259=(x12242+x12241);
evalcond[0]=((((-1.0)*x12243*x12253))+(((-1.0)*x12250*x12253))+((r22*x12240)));
evalcond[1]=((((-1.0)*gconst40*r10*x12253))+((r12*x12240))+(((-1.0)*x12252*x12253)));
evalcond[2]=((-1.0)+(((-1.0)*x12249*x12253))+(((-1.0)*x12244*x12253))+((r02*x12240)));
evalcond[3]=(((x12244*x12256))+((r00*x12247))+((x12249*x12256))+(((-1.0)*r01*x12254))+((r02*x12257)));
evalcond[4]=((((-1.0)*cj3*x12244*x12258))+(((-1.0)*cj3*r02*x12253))+((r00*x12245))+(((-1.0)*r01*x12251))+(((-1.0)*cj3*x12249*x12258)));
evalcond[5]=(((r22*x12257))+(((-1.0)*r21*x12254))+x12259+((r20*x12247))+((x12250*x12256))+((x12243*x12256)));
evalcond[6]=(((r11*x12240*x12245))+(((-1.0)*r11*x12254))+((r12*x12257))+x12246+((r10*x12247))+((x12251*x12255))+(((-1.0)*x12248)));
evalcond[7]=((((-1.0)*r11*x12247*x12258))+x12259+((r10*x12245))+(((-1.0)*x12254*x12255))+(((-1.0)*cj3*r12*x12253))+(((-1.0)*r11*x12251)));
evalcond[8]=((((-1.0)*r21*x12251))+(((-1.0)*cj3*x12250*x12258))+x12248+((r20*x12245))+(((-1.0)*x12246))+(((-1.0)*cj3*r22*x12253))+(((-1.0)*cj3*x12243*x12258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12260=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst40*r11))+((gconst41*r10)))),-1);
if(!x12260.valid){
continue;
}
CheckValue<IkReal> x12261 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst41*r21))+((gconst40*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12260.value)))+(x12261.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12262=IKsin(j4);
IkReal x12263=IKcos(j4);
IkReal x12264=(sj1*sj2);
IkReal x12265=(cj1*cj2);
IkReal x12266=(gconst41*r21);
IkReal x12267=(gconst41*r01);
IkReal x12268=(gconst41*sj3);
IkReal x12269=(cj2*sj1);
IkReal x12270=(cj3*gconst41);
IkReal x12271=(cj1*sj2);
IkReal x12272=(gconst40*r00);
IkReal x12273=(gconst40*r20);
IkReal x12274=(gconst40*sj3);
IkReal x12275=(gconst41*r11);
IkReal x12276=((1.0)*x12262);
IkReal x12277=((1.0)*cj3*gconst40);
IkReal x12278=(r10*x12263);
IkReal x12279=(sj3*x12263);
IkReal x12280=(sj3*x12262);
IkReal x12281=((1.0)*x12263);
IkReal x12282=(x12264+x12265);
evalcond[0]=((((-1.0)*x12273*x12276))+(((-1.0)*x12266*x12276))+((r22*x12263)));
evalcond[1]=(((r12*x12263))+(((-1.0)*gconst40*r10*x12276))+(((-1.0)*x12275*x12276)));
evalcond[2]=((-1.0)+(((-1.0)*x12272*x12276))+(((-1.0)*x12267*x12276))+((r02*x12263)));
evalcond[3]=(((r02*x12280))+((x12272*x12279))+((x12267*x12279))+(((-1.0)*r01*x12277))+((r00*x12270)));
evalcond[4]=((((-1.0)*cj3*r02*x12276))+((r00*x12268))+(((-1.0)*cj3*x12267*x12281))+(((-1.0)*cj3*x12272*x12281))+(((-1.0)*r01*x12274)));
evalcond[5]=(((r20*x12270))+((r22*x12280))+x12282+((x12273*x12279))+((x12266*x12279))+(((-1.0)*r21*x12277)));
evalcond[6]=((((-1.0)*x12271))+x12269+((r11*x12263*x12268))+((r12*x12280))+((r10*x12270))+(((-1.0)*r11*x12277))+((x12274*x12278)));
evalcond[7]=(((r10*x12268))+x12282+(((-1.0)*r11*x12270*x12281))+(((-1.0)*x12277*x12278))+(((-1.0)*cj3*r12*x12276))+(((-1.0)*r11*x12274)));
evalcond[8]=(x12271+(((-1.0)*cj3*r22*x12276))+(((-1.0)*x12269))+((r20*x12268))+(((-1.0)*cj3*x12266*x12281))+(((-1.0)*r21*x12274))+(((-1.0)*cj3*x12273*x12281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12283=((-1.0)*py);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12283);
rxp0_2=(py*r00);
rxp1_0=(r21*x12283);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12284=(r00*sj5);
IkReal x12285=(cj5*r01);
j4eval[0]=((((-1.0)*x12284))+(((-1.0)*x12285)));
j4eval[1]=(((sj3*x12285))+((sj3*x12284)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12286=((-1.0)*py);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12286);
rxp0_2=(py*r00);
rxp1_0=(r21*x12286);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj5*r01*sj3))+((r00*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12287=((-1.0)*py);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12287);
rxp0_2=(py*r00);
rxp1_0=(r21*x12287);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((cj5*r01*sj3))+((r00*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12288=IKPowWithIntegerCheck(r12,-1);
if(!x12288.valid){
continue;
}
CheckValue<IkReal> x12289=IKPowWithIntegerCheck(sj3,-1);
if(!x12289.valid){
continue;
}
CheckValue<IkReal> x12290=IKPowWithIntegerCheck((((cj5*r01*sj3))+((r00*sj3*sj5))),-1);
if(!x12290.valid){
continue;
}
if( IKabs(((x12288.value)*(x12289.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12290.value)*((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12288.value)*(x12289.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))))))+IKsqr(((x12290.value)*((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12288.value)*(x12289.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))))), ((x12290.value)*((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12291=IKsin(j4);
IkReal x12292=IKcos(j4);
IkReal x12293=(sj1*sj2);
IkReal x12294=(cj1*cj2);
IkReal x12295=(r20*sj5);
IkReal x12296=(cj5*r01);
IkReal x12297=((1.0)*sj5);
IkReal x12298=(cj5*r21);
IkReal x12299=(cj2*sj1);
IkReal x12300=(cj1*sj2);
IkReal x12301=(cj3*cj5);
IkReal x12302=(cj5*sj3);
IkReal x12303=(sj3*x12292);
IkReal x12304=((1.0)*x12291);
IkReal x12305=(cj3*x12292);
IkReal x12306=(x12293+x12294);
evalcond[0]=(r12*x12292);
evalcond[1]=((((-1.0)*x12300))+x12299+((r12*sj3*x12291)));
evalcond[2]=(x12306+(((-1.0)*cj3*r12*x12304)));
evalcond[3]=((((-1.0)*x12295*x12304))+(((-1.0)*x12298*x12304)));
evalcond[4]=((-1.0)+(((-1.0)*x12296*x12304))+(((-1.0)*r00*x12291*x12297)));
evalcond[5]=(((x12296*x12303))+((r00*x12301))+(((-1.0)*cj3*r01*x12297))+((r00*sj5*x12303)));
evalcond[6]=((((-1.0)*x12296*x12305))+(((-1.0)*r01*sj3*x12297))+((r00*x12302))+(((-1.0)*r00*x12297*x12305)));
evalcond[7]=(x12306+((x12295*x12303))+((r20*x12301))+((x12298*x12303))+(((-1.0)*cj3*r21*x12297)));
evalcond[8]=(x12300+(((-1.0)*r21*sj3*x12297))+((r20*x12302))+(((-1.0)*x12295*x12305))+(((-1.0)*x12299))+(((-1.0)*x12298*x12305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12307=IKPowWithIntegerCheck(cj3,-1);
if(!x12307.valid){
continue;
}
CheckValue<IkReal> x12308=IKPowWithIntegerCheck(r12,-1);
if(!x12308.valid){
continue;
}
CheckValue<IkReal> x12309=IKPowWithIntegerCheck((((cj5*r01*sj3))+((r00*sj3*sj5))),-1);
if(!x12309.valid){
continue;
}
if( IKabs(((x12307.value)*(x12308.value)*((((sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12309.value)*((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12307.value)*(x12308.value)*((((sj1*sj2))+((cj1*cj2))))))+IKsqr(((x12309.value)*((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12307.value)*(x12308.value)*((((sj1*sj2))+((cj1*cj2))))), ((x12309.value)*((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12310=IKsin(j4);
IkReal x12311=IKcos(j4);
IkReal x12312=(sj1*sj2);
IkReal x12313=(cj1*cj2);
IkReal x12314=(r20*sj5);
IkReal x12315=(cj5*r01);
IkReal x12316=((1.0)*sj5);
IkReal x12317=(cj5*r21);
IkReal x12318=(cj2*sj1);
IkReal x12319=(cj1*sj2);
IkReal x12320=(cj3*cj5);
IkReal x12321=(cj5*sj3);
IkReal x12322=(sj3*x12311);
IkReal x12323=((1.0)*x12310);
IkReal x12324=(cj3*x12311);
IkReal x12325=(x12312+x12313);
evalcond[0]=(r12*x12311);
evalcond[1]=(((r12*sj3*x12310))+x12318+(((-1.0)*x12319)));
evalcond[2]=((((-1.0)*cj3*r12*x12323))+x12325);
evalcond[3]=((((-1.0)*x12314*x12323))+(((-1.0)*x12317*x12323)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x12310*x12316))+(((-1.0)*x12315*x12323)));
evalcond[5]=(((r00*sj5*x12322))+((r00*x12320))+((x12315*x12322))+(((-1.0)*cj3*r01*x12316)));
evalcond[6]=(((r00*x12321))+(((-1.0)*r01*sj3*x12316))+(((-1.0)*x12315*x12324))+(((-1.0)*r00*x12316*x12324)));
evalcond[7]=(((x12314*x12322))+(((-1.0)*cj3*r21*x12316))+x12325+((r20*x12320))+((x12317*x12322)));
evalcond[8]=((((-1.0)*r21*sj3*x12316))+x12319+((r20*x12321))+(((-1.0)*x12317*x12324))+(((-1.0)*x12318))+(((-1.0)*x12314*x12324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12326=(cj5*r01);
IkReal x12327=(r00*sj5);
CheckValue<IkReal> x12328=IKPowWithIntegerCheck(((((-1.0)*x12327))+(((-1.0)*x12326))),-1);
if(!x12328.valid){
continue;
}
CheckValue<IkReal> x12329=IKPowWithIntegerCheck((((sj3*x12326))+((sj3*x12327))),-1);
if(!x12329.valid){
continue;
}
if( IKabs(x12328.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12329.value)*((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12328.value)+IKsqr(((x12329.value)*((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12328.value, ((x12329.value)*((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12330=IKsin(j4);
IkReal x12331=IKcos(j4);
IkReal x12332=(sj1*sj2);
IkReal x12333=(cj1*cj2);
IkReal x12334=(r20*sj5);
IkReal x12335=(cj5*r01);
IkReal x12336=((1.0)*sj5);
IkReal x12337=(cj5*r21);
IkReal x12338=(cj2*sj1);
IkReal x12339=(cj1*sj2);
IkReal x12340=(cj3*cj5);
IkReal x12341=(cj5*sj3);
IkReal x12342=(sj3*x12331);
IkReal x12343=((1.0)*x12330);
IkReal x12344=(cj3*x12331);
IkReal x12345=(x12332+x12333);
evalcond[0]=(r12*x12331);
evalcond[1]=(x12338+((r12*sj3*x12330))+(((-1.0)*x12339)));
evalcond[2]=((((-1.0)*cj3*r12*x12343))+x12345);
evalcond[3]=((((-1.0)*x12337*x12343))+(((-1.0)*x12334*x12343)));
evalcond[4]=((-1.0)+(((-1.0)*x12335*x12343))+(((-1.0)*r00*x12330*x12336)));
evalcond[5]=(((x12335*x12342))+((r00*sj5*x12342))+((r00*x12340))+(((-1.0)*cj3*r01*x12336)));
evalcond[6]=((((-1.0)*r00*x12336*x12344))+((r00*x12341))+(((-1.0)*x12335*x12344))+(((-1.0)*r01*sj3*x12336)));
evalcond[7]=(((x12337*x12342))+((r20*x12340))+x12345+((x12334*x12342))+(((-1.0)*cj3*r21*x12336)));
evalcond[8]=((((-1.0)*x12337*x12344))+(((-1.0)*x12334*x12344))+((r20*x12341))+x12339+(((-1.0)*r21*sj3*x12336))+(((-1.0)*x12338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12346=cj5*cj5;
IkReal x12347=(r00*sj3);
IkReal x12348=((1.0)*r22);
IkReal x12349=(cj3*r01);
IkReal x12350=((1.0)*r20);
IkReal x12351=(r01*sj3);
IkReal x12352=(cj5*sj5);
IkReal x12353=(cj3*r00);
IkReal x12354=(r20*x12346);
IkReal x12355=(r21*x12346);
IkReal x12356=((1.0)*r21*x12352);
CheckValue<IkReal> x12357=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12347*x12350))+(((-1.0)*x12347*x12356))+(((-1.0)*x12351*x12355))+(((-1.0)*x12350*x12351*x12352))+((x12347*x12354))+(((-1.0)*r02*sj3*x12348)))),-1);
if(!x12357.valid){
continue;
}
CheckValue<IkReal> x12358 = IKatan2WithCheck(IkReal((((cj5*r22*x12353))+(((-1.0)*sj5*x12348*x12349)))),IkReal(((((-1.0)*x12349*x12350))+(((-1.0)*x12349*x12356))+((r20*x12352*x12353))+((x12353*x12355))+((x12349*x12354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12357.value)))+(x12358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12359=IKsin(j4);
IkReal x12360=IKcos(j4);
IkReal x12361=(sj1*sj2);
IkReal x12362=(cj1*cj2);
IkReal x12363=(r20*sj3);
IkReal x12364=(cj1*sj2);
IkReal x12365=((1.0)*sj5);
IkReal x12366=(cj3*r01);
IkReal x12367=(cj3*r10);
IkReal x12368=((1.0)*cj3);
IkReal x12369=(cj2*sj1);
IkReal x12370=(cj3*cj5);
IkReal x12371=(cj5*sj3);
IkReal x12372=(sj5*x12360);
IkReal x12373=(r12*x12359);
IkReal x12374=(r22*x12359);
IkReal x12375=(r02*x12359);
IkReal x12376=(cj5*x12360);
IkReal x12377=(x12361+x12362);
IkReal x12378=((1.0)*cj5*x12359);
IkReal x12379=(x12360*x12371);
evalcond[0]=((((-1.0)*r21*x12378))+((r22*x12360))+(((-1.0)*r20*x12359*x12365)));
evalcond[1]=((((-1.0)*r11*x12378))+(((-1.0)*r10*x12359*x12365))+((r12*x12360)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x12378))+(((-1.0)*r00*x12359*x12365))+((r02*x12360)));
evalcond[3]=((((-1.0)*x12365*x12366))+((sj3*x12375))+((r00*sj3*x12372))+((r01*x12379))+((r00*x12370)));
evalcond[4]=((((-1.0)*cj3*r00*x12360*x12365))+(((-1.0)*x12368*x12375))+(((-1.0)*x12366*x12376))+(((-1.0)*r01*sj3*x12365))+((r00*x12371)));
evalcond[5]=(x12377+((r21*x12379))+((sj3*x12374))+(((-1.0)*cj3*r21*x12365))+((x12363*x12372))+((r20*x12370)));
evalcond[6]=(((r11*x12379))+((cj5*x12367))+x12369+(((-1.0)*cj3*r11*x12365))+((sj3*x12373))+((r10*sj3*x12372))+(((-1.0)*x12364)));
evalcond[7]=((((-1.0)*x12360*x12365*x12367))+(((-1.0)*r11*x12368*x12376))+(((-1.0)*x12368*x12373))+((r10*x12371))+x12377+(((-1.0)*r11*sj3*x12365)));
evalcond[8]=(((cj5*x12363))+(((-1.0)*x12368*x12374))+x12364+(((-1.0)*r21*sj3*x12365))+(((-1.0)*x12369))+(((-1.0)*r21*x12368*x12376))+(((-1.0)*cj3*r20*x12360*x12365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12380 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12380.valid){
continue;
}
CheckValue<IkReal> x12381=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x12381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12380.value)+(((1.5707963267949)*(x12381.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12382=IKsin(j4);
IkReal x12383=IKcos(j4);
IkReal x12384=(sj1*sj2);
IkReal x12385=(cj1*cj2);
IkReal x12386=(r20*sj3);
IkReal x12387=(cj1*sj2);
IkReal x12388=((1.0)*sj5);
IkReal x12389=(cj3*r01);
IkReal x12390=(cj3*r10);
IkReal x12391=((1.0)*cj3);
IkReal x12392=(cj2*sj1);
IkReal x12393=(cj3*cj5);
IkReal x12394=(cj5*sj3);
IkReal x12395=(sj5*x12383);
IkReal x12396=(r12*x12382);
IkReal x12397=(r22*x12382);
IkReal x12398=(r02*x12382);
IkReal x12399=(cj5*x12383);
IkReal x12400=(x12385+x12384);
IkReal x12401=((1.0)*cj5*x12382);
IkReal x12402=(x12383*x12394);
evalcond[0]=((((-1.0)*r20*x12382*x12388))+(((-1.0)*r21*x12401))+((r22*x12383)));
evalcond[1]=((((-1.0)*r10*x12382*x12388))+((r12*x12383))+(((-1.0)*r11*x12401)));
evalcond[2]=((-1.0)+((r02*x12383))+(((-1.0)*r01*x12401))+(((-1.0)*r00*x12382*x12388)));
evalcond[3]=(((r00*sj3*x12395))+((r00*x12393))+(((-1.0)*x12388*x12389))+((sj3*x12398))+((r01*x12402)));
evalcond[4]=((((-1.0)*r01*sj3*x12388))+(((-1.0)*cj3*r00*x12383*x12388))+(((-1.0)*x12389*x12399))+((r00*x12394))+(((-1.0)*x12391*x12398)));
evalcond[5]=((((-1.0)*cj3*r21*x12388))+((r20*x12393))+((x12386*x12395))+((r21*x12402))+((sj3*x12397))+x12400);
evalcond[6]=((((-1.0)*cj3*r11*x12388))+x12392+((r10*sj3*x12395))+(((-1.0)*x12387))+((cj5*x12390))+((sj3*x12396))+((r11*x12402)));
evalcond[7]=(((r10*x12394))+(((-1.0)*r11*x12391*x12399))+x12400+(((-1.0)*x12383*x12388*x12390))+(((-1.0)*r11*sj3*x12388))+(((-1.0)*x12391*x12396)));
evalcond[8]=(x12387+(((-1.0)*cj3*r20*x12383*x12388))+((cj5*x12386))+(((-1.0)*x12392))+(((-1.0)*r21*x12391*x12399))+(((-1.0)*r21*sj3*x12388))+(((-1.0)*x12391*x12397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12403 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12403.valid){
continue;
}
CheckValue<IkReal> x12404=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x12404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12403.value)+(((1.5707963267949)*(x12404.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12405=IKsin(j4);
IkReal x12406=IKcos(j4);
IkReal x12407=(sj1*sj2);
IkReal x12408=(cj1*cj2);
IkReal x12409=(r20*sj3);
IkReal x12410=(cj1*sj2);
IkReal x12411=((1.0)*sj5);
IkReal x12412=(cj3*r01);
IkReal x12413=(cj3*r10);
IkReal x12414=((1.0)*cj3);
IkReal x12415=(cj2*sj1);
IkReal x12416=(cj3*cj5);
IkReal x12417=(cj5*sj3);
IkReal x12418=(sj5*x12406);
IkReal x12419=(r12*x12405);
IkReal x12420=(r22*x12405);
IkReal x12421=(r02*x12405);
IkReal x12422=(cj5*x12406);
IkReal x12423=(x12408+x12407);
IkReal x12424=((1.0)*cj5*x12405);
IkReal x12425=(x12406*x12417);
evalcond[0]=(((r22*x12406))+(((-1.0)*r20*x12405*x12411))+(((-1.0)*r21*x12424)));
evalcond[1]=((((-1.0)*r11*x12424))+(((-1.0)*r10*x12405*x12411))+((r12*x12406)));
evalcond[2]=((-1.0)+((r02*x12406))+(((-1.0)*r01*x12424))+(((-1.0)*r00*x12405*x12411)));
evalcond[3]=(((r00*sj3*x12418))+(((-1.0)*x12411*x12412))+((r00*x12416))+((r01*x12425))+((sj3*x12421)));
evalcond[4]=((((-1.0)*r01*sj3*x12411))+(((-1.0)*x12414*x12421))+((r00*x12417))+(((-1.0)*cj3*r00*x12406*x12411))+(((-1.0)*x12412*x12422)));
evalcond[5]=(((r21*x12425))+((r20*x12416))+((x12409*x12418))+(((-1.0)*cj3*r21*x12411))+x12423+((sj3*x12420)));
evalcond[6]=(((sj3*x12419))+(((-1.0)*x12410))+((cj5*x12413))+((r11*x12425))+((r10*sj3*x12418))+x12415+(((-1.0)*cj3*r11*x12411)));
evalcond[7]=(((r10*x12417))+(((-1.0)*r11*x12414*x12422))+(((-1.0)*x12406*x12411*x12413))+x12423+(((-1.0)*r11*sj3*x12411))+(((-1.0)*x12414*x12419)));
evalcond[8]=((((-1.0)*x12414*x12420))+(((-1.0)*r21*x12414*x12422))+(((-1.0)*r21*sj3*x12411))+(((-1.0)*x12415))+x12410+((cj5*x12409))+(((-1.0)*cj3*r20*x12406*x12411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12427 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12427)==0){
continue;
}
IkReal x12426=pow(x12427,-0.5);
CheckValue<IkReal> x12428 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x12428.valid){
continue;
}
IkReal gconst12=((-1.0)*(x12428.value));
IkReal gconst13=(r10*x12426);
IkReal gconst14=(r11*x12426);
CheckValue<IkReal> x12429 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x12429.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12429.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x12432 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x12432.valid){
continue;
}
IkReal x12430=((-1.0)*(x12432.value));
IkReal x12431=x12426;
sj5=gconst13;
cj5=gconst14;
j5=x12430;
IkReal gconst12=x12430;
IkReal gconst13=(r10*x12431);
IkReal gconst14=(r11*x12431);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12433=((1.0)*sj0);
CheckValue<IkReal> x12434 = IKatan2WithCheck(IkReal((((cj0*r12))+(((-1.0)*r02*x12433)))),IkReal(((((-1.0)*gconst14*r01*x12433))+(((-1.0)*gconst13*r00*x12433))+((cj0*gconst14*r11))+((cj0*gconst13*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12434.valid){
continue;
}
CheckValue<IkReal> x12435=IKPowWithIntegerCheck(IKsign((((gconst14*r20))+(((-1.0)*gconst13*r21)))),-1);
if(!x12435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12434.value)+(((1.5707963267949)*(x12435.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12436=IKsin(j4);
IkReal x12437=IKcos(j4);
IkReal x12438=((1.0)*gconst13);
IkReal x12439=(cj3*r20);
IkReal x12440=(r01*sj3);
IkReal x12441=(cj2*sj0);
IkReal x12442=((1.0)*cj3);
IkReal x12443=(sj1*sj2);
IkReal x12444=(cj3*r00);
IkReal x12445=(gconst14*sj3);
IkReal x12446=(cj1*sj2);
IkReal x12447=(cj3*r10);
IkReal x12448=(sj3*x12437);
IkReal x12449=(r22*x12436);
IkReal x12450=(gconst14*x12437);
IkReal x12451=(r12*x12436);
IkReal x12452=((1.0)*cj0*cj2);
IkReal x12453=(r02*x12436);
IkReal x12454=((1.0)*gconst14*x12436);
evalcond[0]=(((r22*x12437))+(((-1.0)*r20*x12436*x12438))+(((-1.0)*r21*x12454)));
evalcond[1]=(cj0+(((-1.0)*r00*x12436*x12438))+((r02*x12437))+(((-1.0)*r01*x12454)));
evalcond[2]=((((-1.0)*r11*x12454))+sj0+(((-1.0)*r10*x12436*x12438))+((r12*x12437)));
evalcond[3]=(((gconst13*r20*x12448))+((gconst14*x12439))+(((-1.0)*cj3*r21*x12438))+((cj1*cj2))+((r21*x12437*x12445))+((sj3*x12449))+x12443);
evalcond[4]=((((-1.0)*cj3*r01*x12438))+((sj1*x12441))+((sj3*x12453))+((gconst14*x12444))+(((-1.0)*sj0*x12446))+((x12440*x12450))+((gconst13*r00*x12448)));
evalcond[5]=(((cj0*x12446))+((sj3*x12451))+((gconst14*x12447))+((gconst13*r10*x12448))+(((-1.0)*sj1*x12452))+((r11*x12437*x12445))+(((-1.0)*cj3*r11*x12438)));
evalcond[6]=((((-1.0)*r21*x12442*x12450))+(((-1.0)*r21*sj3*x12438))+(((-1.0)*cj2*sj1))+(((-1.0)*x12437*x12438*x12439))+x12446+((r20*x12445))+(((-1.0)*x12442*x12449)));
evalcond[7]=(((r00*x12445))+((sj0*x12443))+(((-1.0)*x12442*x12453))+(((-1.0)*r01*x12442*x12450))+(((-1.0)*x12438*x12440))+((cj1*x12441))+(((-1.0)*x12437*x12438*x12444)));
evalcond[8]=((((-1.0)*r11*x12442*x12450))+(((-1.0)*cj0*x12443))+(((-1.0)*r11*sj3*x12438))+(((-1.0)*x12442*x12451))+((r10*x12445))+(((-1.0)*cj1*x12452))+(((-1.0)*x12437*x12438*x12447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12455=IKPowWithIntegerCheck(IKsign((((gconst14*r00))+(((-1.0)*gconst13*r01)))),-1);
if(!x12455.valid){
continue;
}
CheckValue<IkReal> x12456 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst13*r20*sj0))+((gconst14*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12455.value)))+(x12456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12457=IKsin(j4);
IkReal x12458=IKcos(j4);
IkReal x12459=((1.0)*gconst13);
IkReal x12460=(cj3*r20);
IkReal x12461=(r01*sj3);
IkReal x12462=(cj2*sj0);
IkReal x12463=((1.0)*cj3);
IkReal x12464=(sj1*sj2);
IkReal x12465=(cj3*r00);
IkReal x12466=(gconst14*sj3);
IkReal x12467=(cj1*sj2);
IkReal x12468=(cj3*r10);
IkReal x12469=(sj3*x12458);
IkReal x12470=(r22*x12457);
IkReal x12471=(gconst14*x12458);
IkReal x12472=(r12*x12457);
IkReal x12473=((1.0)*cj0*cj2);
IkReal x12474=(r02*x12457);
IkReal x12475=((1.0)*gconst14*x12457);
evalcond[0]=(((r22*x12458))+(((-1.0)*r21*x12475))+(((-1.0)*r20*x12457*x12459)));
evalcond[1]=(((r02*x12458))+cj0+(((-1.0)*r00*x12457*x12459))+(((-1.0)*r01*x12475)));
evalcond[2]=((((-1.0)*r11*x12475))+sj0+(((-1.0)*r10*x12457*x12459))+((r12*x12458)));
evalcond[3]=(((r21*x12458*x12466))+((sj3*x12470))+(((-1.0)*cj3*r21*x12459))+((gconst14*x12460))+((gconst13*r20*x12469))+((cj1*cj2))+x12464);
evalcond[4]=(((gconst13*r00*x12469))+((sj3*x12474))+(((-1.0)*sj0*x12467))+((x12461*x12471))+((gconst14*x12465))+(((-1.0)*cj3*r01*x12459))+((sj1*x12462)));
evalcond[5]=(((r11*x12458*x12466))+((sj3*x12472))+((cj0*x12467))+((gconst13*r10*x12469))+(((-1.0)*cj3*r11*x12459))+((gconst14*x12468))+(((-1.0)*sj1*x12473)));
evalcond[6]=((((-1.0)*r21*sj3*x12459))+(((-1.0)*x12463*x12470))+(((-1.0)*cj2*sj1))+((r20*x12466))+(((-1.0)*x12458*x12459*x12460))+x12467+(((-1.0)*r21*x12463*x12471)));
evalcond[7]=(((r00*x12466))+(((-1.0)*x12463*x12474))+(((-1.0)*x12459*x12461))+(((-1.0)*x12458*x12459*x12465))+((sj0*x12464))+((cj1*x12462))+(((-1.0)*r01*x12463*x12471)));
evalcond[8]=((((-1.0)*cj0*x12464))+(((-1.0)*x12463*x12472))+(((-1.0)*r11*x12463*x12471))+(((-1.0)*x12458*x12459*x12468))+(((-1.0)*r11*sj3*x12459))+(((-1.0)*cj1*x12473))+((r10*x12466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12478 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12478)==0){
continue;
}
IkReal x12476=pow(x12478,-0.5);
IkReal x12477=((-1.0)*x12476);
CheckValue<IkReal> x12479 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x12479.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x12479.value))));
IkReal gconst16=(r10*x12477);
IkReal gconst17=(r11*x12477);
CheckValue<IkReal> x12480 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x12480.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12480.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x12484 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x12484.valid){
continue;
}
IkReal x12481=((1.0)*(x12484.value));
IkReal x12482=x12476;
IkReal x12483=((-1.0)*x12482);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12481)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12481)));
IkReal gconst16=(r10*x12483);
IkReal gconst17=(r11*x12483);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x12488 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x12488.valid){
continue;
}
IkReal x12485=((1.0)*(x12488.value));
IkReal x12486=x12476;
IkReal x12487=((-1.0)*x12486);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12485)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12485)));
IkReal gconst16=(r10*x12487);
IkReal gconst17=(r11*x12487);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12492 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x12492.valid){
continue;
}
IkReal x12489=((1.0)*(x12492.value));
IkReal x12490=x12476;
IkReal x12491=((-1.0)*x12490);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12489)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12489)));
IkReal gconst16=(r10*x12491);
IkReal gconst17=(r11*x12491);
IkReal x12493=r12*r12;
IkReal x12494=(r02*sj0);
IkReal x12495=((1.0)*x12493);
CheckValue<IkReal> x12499=IKPowWithIntegerCheck(((-1.0)+x12493),-1);
if(!x12499.valid){
continue;
}
IkReal x12496=x12499.value;
if((((1.0)+(((-1.0)*x12495)))) < -0.00001)
continue;
IkReal x12497=IKsqrt(((1.0)+(((-1.0)*x12495))));
IkReal x12498=(cj0*x12496*x12497);
j4eval[0]=((IKabs((((r12*x12494*x12496*x12497))+x12498+(((-1.0)*x12495*x12498)))))+(IKabs((((cj0*r12))+(((-1.0)*x12494))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12503 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x12503.valid){
continue;
}
IkReal x12500=((1.0)*(x12503.value));
IkReal x12501=x12476;
IkReal x12502=((-1.0)*x12501);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12500)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12500)));
IkReal gconst16=(r10*x12502);
IkReal gconst17=(r11*x12502);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12507 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x12507.valid){
continue;
}
IkReal x12504=((1.0)*(x12507.value));
IkReal x12505=x12476;
IkReal x12506=((-1.0)*x12505);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12504)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12504)));
IkReal gconst16=(r10*x12506);
IkReal gconst17=(r11*x12506);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12511 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x12511.valid){
continue;
}
IkReal x12508=((1.0)*(x12511.value));
IkReal x12509=x12476;
IkReal x12510=((-1.0)*x12509);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12508)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12508)));
IkReal gconst16=(r10*x12510);
IkReal gconst17=(r11*x12510);
IkReal x12512=((1.0)*sj3);
CheckValue<IkReal> x12519=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12519.valid){
continue;
}
IkReal x12513=x12519.value;
IkReal x12514=(r20*x12513);
IkReal x12515=(r21*x12513);
IkReal x12516=(r00*x12513);
IkReal x12517=(r10*r11*x12513);
IkReal x12518=(r01*x12512*x12513);
j4eval[0]=IKsign(((((-1.0)*r01*r10*r11*x12512*x12514))+(((-1.0)*r00*x12512*x12514*(r10*r10)))+(((-1.0)*r00*r10*r11*x12512*x12515))+(((-1.0)*r01*x12512*x12515*(r11*r11)))+(((-1.0)*r02*r22*x12512))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12520=gconst17*gconst17;
IkReal x12521=gconst16*gconst16;
IkReal x12522=(r00*r20);
IkReal x12523=((1.0)*sj3);
IkReal x12524=(r01*r21);
IkReal x12525=(gconst17*r00);
IkReal x12526=(cj3*gconst16*gconst17);
IkReal x12527=((1.0)*cj3*r01);
CheckValue<IkReal> x12528=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r21*x12523*x12525))+(((-1.0)*x12521*x12522*x12523))+(((-1.0)*r02*r22*x12523))+(((-1.0)*x12520*x12523*x12524))+(((-1.0)*gconst16*gconst17*r01*r20*x12523)))),-1);
if(!x12528.valid){
continue;
}
CheckValue<IkReal> x12529 = IKatan2WithCheck(IkReal(((((-1.0)*gconst16*r22*x12527))+((cj3*r22*x12525)))),IkReal((((x12522*x12526))+(((-1.0)*r20*x12521*x12527))+((cj3*r00*r21*x12520))+(((-1.0)*x12524*x12526)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12528.value)))+(x12529.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12530=IKsin(j4);
IkReal x12531=IKcos(j4);
IkReal x12532=(sj1*sj2);
IkReal x12533=(cj1*cj2);
IkReal x12534=(gconst16*r10);
IkReal x12535=(gconst17*r11);
IkReal x12536=(gconst17*r01);
IkReal x12537=(gconst16*sj3);
IkReal x12538=((1.0)*r21);
IkReal x12539=(gconst17*r20);
IkReal x12540=((1.0)*cj3);
IkReal x12541=(cj1*sj2);
IkReal x12542=(gconst16*r00);
IkReal x12543=(cj2*sj1);
IkReal x12544=(gconst17*r00);
IkReal x12545=(gconst17*r10);
IkReal x12546=(gconst17*r21);
IkReal x12547=(gconst16*r20);
IkReal x12548=(r12*x12530);
IkReal x12549=(r22*x12530);
IkReal x12550=((1.0)*x12530);
IkReal x12551=(sj3*x12531);
IkReal x12552=(r02*x12530);
IkReal x12553=(x12532+x12533);
IkReal x12554=(x12531*x12540);
evalcond[0]=((((-1.0)*x12547*x12550))+(((-1.0)*gconst17*x12530*x12538))+((r22*x12531)));
evalcond[1]=((((-1.0)*x12535*x12550))+(((-1.0)*x12534*x12550))+((r12*x12531)));
evalcond[2]=((-1.0)+(((-1.0)*x12542*x12550))+(((-1.0)*x12536*x12550))+((r02*x12531)));
evalcond[3]=(((x12536*x12551))+((r00*x12531*x12537))+((cj3*x12544))+(((-1.0)*gconst16*r01*x12540))+((sj3*x12552)));
evalcond[4]=((((-1.0)*x12542*x12554))+(((-1.0)*x12536*x12554))+(((-1.0)*x12540*x12552))+((sj3*x12544))+(((-1.0)*r01*x12537)));
evalcond[5]=(((x12546*x12551))+((cj3*x12539))+((sj3*x12549))+x12553+((r20*x12531*x12537))+(((-1.0)*cj3*gconst16*x12538)));
evalcond[6]=((((-1.0)*x12541))+(((-1.0)*gconst16*r11*x12540))+((x12535*x12551))+((cj3*x12545))+((x12534*x12551))+((sj3*x12548))+x12543);
evalcond[7]=((((-1.0)*x12535*x12554))+(((-1.0)*r11*x12537))+(((-1.0)*x12534*x12554))+((sj3*x12545))+(((-1.0)*x12540*x12548))+x12553);
evalcond[8]=((((-1.0)*x12543))+(((-1.0)*x12547*x12554))+(((-1.0)*x12537*x12538))+(((-1.0)*x12540*x12549))+(((-1.0)*cj3*gconst17*x12531*x12538))+x12541+((sj3*x12539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12555 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst17*r11))+((gconst16*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12555.valid){
continue;
}
CheckValue<IkReal> x12556=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r20))+((gconst16*r21)))),-1);
if(!x12556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12555.value)+(((1.5707963267949)*(x12556.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12557=IKsin(j4);
IkReal x12558=IKcos(j4);
IkReal x12559=(sj1*sj2);
IkReal x12560=(cj1*cj2);
IkReal x12561=(gconst16*r10);
IkReal x12562=(gconst17*r11);
IkReal x12563=(gconst17*r01);
IkReal x12564=(gconst16*sj3);
IkReal x12565=((1.0)*r21);
IkReal x12566=(gconst17*r20);
IkReal x12567=((1.0)*cj3);
IkReal x12568=(cj1*sj2);
IkReal x12569=(gconst16*r00);
IkReal x12570=(cj2*sj1);
IkReal x12571=(gconst17*r00);
IkReal x12572=(gconst17*r10);
IkReal x12573=(gconst17*r21);
IkReal x12574=(gconst16*r20);
IkReal x12575=(r12*x12557);
IkReal x12576=(r22*x12557);
IkReal x12577=((1.0)*x12557);
IkReal x12578=(sj3*x12558);
IkReal x12579=(r02*x12557);
IkReal x12580=(x12559+x12560);
IkReal x12581=(x12558*x12567);
evalcond[0]=((((-1.0)*x12574*x12577))+((r22*x12558))+(((-1.0)*gconst17*x12557*x12565)));
evalcond[1]=(((r12*x12558))+(((-1.0)*x12562*x12577))+(((-1.0)*x12561*x12577)));
evalcond[2]=((-1.0)+(((-1.0)*x12563*x12577))+(((-1.0)*x12569*x12577))+((r02*x12558)));
evalcond[3]=(((x12563*x12578))+((sj3*x12579))+((r00*x12558*x12564))+(((-1.0)*gconst16*r01*x12567))+((cj3*x12571)));
evalcond[4]=(((sj3*x12571))+(((-1.0)*x12569*x12581))+(((-1.0)*x12567*x12579))+(((-1.0)*x12563*x12581))+(((-1.0)*r01*x12564)));
evalcond[5]=(((cj3*x12566))+((sj3*x12576))+(((-1.0)*cj3*gconst16*x12565))+((r20*x12558*x12564))+((x12573*x12578))+x12580);
evalcond[6]=(((sj3*x12575))+(((-1.0)*gconst16*r11*x12567))+(((-1.0)*x12568))+((x12562*x12578))+x12570+((x12561*x12578))+((cj3*x12572)));
evalcond[7]=(((sj3*x12572))+(((-1.0)*x12562*x12581))+(((-1.0)*x12561*x12581))+(((-1.0)*x12567*x12575))+x12580+(((-1.0)*r11*x12564)));
evalcond[8]=((((-1.0)*x12564*x12565))+(((-1.0)*cj3*gconst17*x12558*x12565))+(((-1.0)*x12574*x12581))+(((-1.0)*x12567*x12576))+(((-1.0)*x12570))+x12568+((sj3*x12566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12582 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst17*r21))+((gconst16*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12582.valid){
continue;
}
CheckValue<IkReal> x12583=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r11))+((gconst17*r10)))),-1);
if(!x12583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12582.value)+(((1.5707963267949)*(x12583.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12584=IKsin(j4);
IkReal x12585=IKcos(j4);
IkReal x12586=(sj1*sj2);
IkReal x12587=(cj1*cj2);
IkReal x12588=(gconst16*r10);
IkReal x12589=(gconst17*r11);
IkReal x12590=(gconst17*r01);
IkReal x12591=(gconst16*sj3);
IkReal x12592=((1.0)*r21);
IkReal x12593=(gconst17*r20);
IkReal x12594=((1.0)*cj3);
IkReal x12595=(cj1*sj2);
IkReal x12596=(gconst16*r00);
IkReal x12597=(cj2*sj1);
IkReal x12598=(gconst17*r00);
IkReal x12599=(gconst17*r10);
IkReal x12600=(gconst17*r21);
IkReal x12601=(gconst16*r20);
IkReal x12602=(r12*x12584);
IkReal x12603=(r22*x12584);
IkReal x12604=((1.0)*x12584);
IkReal x12605=(sj3*x12585);
IkReal x12606=(r02*x12584);
IkReal x12607=(x12587+x12586);
IkReal x12608=(x12585*x12594);
evalcond[0]=((((-1.0)*x12601*x12604))+((r22*x12585))+(((-1.0)*gconst17*x12584*x12592)));
evalcond[1]=(((r12*x12585))+(((-1.0)*x12588*x12604))+(((-1.0)*x12589*x12604)));
evalcond[2]=((-1.0)+(((-1.0)*x12590*x12604))+((r02*x12585))+(((-1.0)*x12596*x12604)));
evalcond[3]=(((cj3*x12598))+((x12590*x12605))+(((-1.0)*gconst16*r01*x12594))+((sj3*x12606))+((r00*x12585*x12591)));
evalcond[4]=((((-1.0)*x12590*x12608))+(((-1.0)*x12594*x12606))+((sj3*x12598))+(((-1.0)*r01*x12591))+(((-1.0)*x12596*x12608)));
evalcond[5]=(((x12600*x12605))+(((-1.0)*cj3*gconst16*x12592))+((cj3*x12593))+((r20*x12585*x12591))+x12607+((sj3*x12603)));
evalcond[6]=(((cj3*x12599))+((x12588*x12605))+(((-1.0)*gconst16*r11*x12594))+x12597+(((-1.0)*x12595))+((sj3*x12602))+((x12589*x12605)));
evalcond[7]=((((-1.0)*r11*x12591))+(((-1.0)*x12594*x12602))+((sj3*x12599))+(((-1.0)*x12588*x12608))+x12607+(((-1.0)*x12589*x12608)));
evalcond[8]=((((-1.0)*x12591*x12592))+(((-1.0)*cj3*gconst17*x12585*x12592))+(((-1.0)*x12601*x12608))+(((-1.0)*x12594*x12603))+((sj3*x12593))+x12595+(((-1.0)*x12597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12609=((-1.0)*r10);
CheckValue<IkReal> x12612 = IKatan2WithCheck(IkReal(x12609),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x12612.valid){
continue;
}
IkReal x12610=((1.0)*(x12612.value));
IkReal x12611=x12476;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12610)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12610)));
IkReal gconst16=(x12609*x12611);
IkReal gconst17=((-1.0)*r11*x12611);
IkReal x12613=r12*r12;
IkReal x12614=(r02*sj0);
IkReal x12615=((1.0)*x12613);
CheckValue<IkReal> x12619=IKPowWithIntegerCheck(((-1.0)+x12613),-1);
if(!x12619.valid){
continue;
}
IkReal x12616=x12619.value;
if((((1.0)+(((-1.0)*x12615)))) < -0.00001)
continue;
IkReal x12617=IKsqrt(((1.0)+(((-1.0)*x12615))));
IkReal x12618=(cj0*x12616*x12617);
j4eval[0]=((IKabs(((((-1.0)*x12614))+((cj0*r12)))))+(IKabs((((r12*x12614*x12616*x12617))+(((-1.0)*x12615*x12618))+x12618))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12620=((1.0)*r02);
IkReal x12621=(cj2*sj1);
IkReal x12622=((1.0)*cj3);
IkReal x12623=(gconst16*r20);
IkReal x12624=(gconst17*r21);
IkReal x12625=(cj1*sj2);
IkReal x12626=(cj3*r01);
IkReal x12627=(cj3*r00);
IkReal x12628=(cj0*cj3);
IkReal x12629=(gconst16*r21*sj3);
IkReal x12630=(gconst17*r20*sj3);
CheckValue<IkReal> x12631=IKPowWithIntegerCheck((((gconst17*x12624*x12626))+((gconst16*x12623*x12627))+((gconst17*x12623*x12626))+((gconst16*x12624*x12627))),-1);
if(!x12631.valid){
continue;
}
CheckValue<IkReal> x12632=IKPowWithIntegerCheck(((((-1.0)*x12622*x12623))+(((-1.0)*x12622*x12624))),-1);
if(!x12632.valid){
continue;
}
if( IKabs(((x12631.value)*((((r02*x12625))+(((-1.0)*x12620*x12621))+(((-1.0)*x12620*x12629))+((r02*x12630))+((x12623*x12628))+((x12624*x12628)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12632.value)*(((((-1.0)*x12630))+(((-1.0)*x12625))+x12621+x12629)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12631.value)*((((r02*x12625))+(((-1.0)*x12620*x12621))+(((-1.0)*x12620*x12629))+((r02*x12630))+((x12623*x12628))+((x12624*x12628))))))+IKsqr(((x12632.value)*(((((-1.0)*x12630))+(((-1.0)*x12625))+x12621+x12629))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12631.value)*((((r02*x12625))+(((-1.0)*x12620*x12621))+(((-1.0)*x12620*x12629))+((r02*x12630))+((x12623*x12628))+((x12624*x12628))))), ((x12632.value)*(((((-1.0)*x12630))+(((-1.0)*x12625))+x12621+x12629))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12633=IKsin(j4);
IkReal x12634=IKcos(j4);
IkReal x12635=(gconst16*r10);
IkReal x12636=(cj2*sj0);
IkReal x12637=(gconst17*r01);
IkReal x12638=(sj1*sj2);
IkReal x12639=(gconst16*sj3);
IkReal x12640=((1.0)*r21);
IkReal x12641=(gconst17*r20);
IkReal x12642=((1.0)*r11);
IkReal x12643=((1.0)*gconst16);
IkReal x12644=(gconst17*r11);
IkReal x12645=(gconst17*r00);
IkReal x12646=(cj3*gconst16);
IkReal x12647=((1.0)*cj3);
IkReal x12648=(gconst17*r10);
IkReal x12649=(gconst17*r21);
IkReal x12650=(cj1*sj2);
IkReal x12651=((1.0)*cj0*cj2);
IkReal x12652=(r12*x12633);
IkReal x12653=(sj3*x12634);
IkReal x12654=(r02*x12633);
IkReal x12655=(gconst17*x12633);
IkReal x12656=((1.0)*x12633);
IkReal x12657=(x12634*x12647);
evalcond[0]=((((-1.0)*x12640*x12655))+(((-1.0)*r20*x12633*x12643)));
evalcond[1]=(cj0+(((-1.0)*r00*x12633*x12643))+(((-1.0)*x12637*x12656))+((r02*x12634)));
evalcond[2]=(((r12*x12634))+(((-1.0)*x12642*x12655))+sj0+(((-1.0)*x12635*x12656)));
evalcond[3]=(((r20*x12634*x12639))+((x12649*x12653))+(((-1.0)*x12640*x12646))+((cj3*x12641))+x12638+((cj1*cj2)));
evalcond[4]=((((-1.0)*x12639*x12640))+((sj3*x12641))+(((-1.0)*cj2*sj1))+(((-1.0)*cj3*r20*x12634*x12643))+x12650+(((-1.0)*cj3*gconst17*x12634*x12640)));
evalcond[5]=(((x12637*x12653))+((r00*x12634*x12639))+((cj3*x12645))+((sj1*x12636))+((sj3*x12654))+(((-1.0)*cj3*r01*x12643))+(((-1.0)*sj0*x12650)));
evalcond[6]=(((x12635*x12653))+((x12644*x12653))+(((-1.0)*x12642*x12646))+((cj3*x12648))+((sj3*x12652))+(((-1.0)*sj1*x12651))+((cj0*x12650)));
evalcond[7]=((((-1.0)*x12647*x12654))+(((-1.0)*r01*x12639))+(((-1.0)*cj3*r00*x12634*x12643))+((sj3*x12645))+(((-1.0)*x12637*x12657))+((sj0*x12638))+((cj1*x12636)));
evalcond[8]=((((-1.0)*x12647*x12652))+(((-1.0)*x12639*x12642))+(((-1.0)*cj1*x12651))+((sj3*x12648))+(((-1.0)*x12635*x12657))+(((-1.0)*cj0*x12638))+(((-1.0)*cj3*gconst17*x12634*x12642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12658=((1.0)*sj0);
CheckValue<IkReal> x12659 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x12658))+((cj0*r12)))),IkReal(((((-1.0)*gconst17*r01*x12658))+((cj0*gconst16*r10))+((cj0*gconst17*r11))+(((-1.0)*gconst16*r00*x12658)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12659.valid){
continue;
}
CheckValue<IkReal> x12660=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r21))+((gconst17*r20)))),-1);
if(!x12660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12659.value)+(((1.5707963267949)*(x12660.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12661=IKsin(j4);
IkReal x12662=IKcos(j4);
IkReal x12663=(gconst16*r10);
IkReal x12664=(cj2*sj0);
IkReal x12665=(gconst17*r01);
IkReal x12666=(sj1*sj2);
IkReal x12667=(gconst16*sj3);
IkReal x12668=((1.0)*r21);
IkReal x12669=(gconst17*r20);
IkReal x12670=((1.0)*r11);
IkReal x12671=((1.0)*gconst16);
IkReal x12672=(gconst17*r11);
IkReal x12673=(gconst17*r00);
IkReal x12674=(cj3*gconst16);
IkReal x12675=((1.0)*cj3);
IkReal x12676=(gconst17*r10);
IkReal x12677=(gconst17*r21);
IkReal x12678=(cj1*sj2);
IkReal x12679=((1.0)*cj0*cj2);
IkReal x12680=(r12*x12661);
IkReal x12681=(sj3*x12662);
IkReal x12682=(r02*x12661);
IkReal x12683=(gconst17*x12661);
IkReal x12684=((1.0)*x12661);
IkReal x12685=(x12662*x12675);
evalcond[0]=((((-1.0)*r20*x12661*x12671))+(((-1.0)*x12668*x12683)));
evalcond[1]=(cj0+(((-1.0)*x12665*x12684))+((r02*x12662))+(((-1.0)*r00*x12661*x12671)));
evalcond[2]=((((-1.0)*x12663*x12684))+sj0+((r12*x12662))+(((-1.0)*x12670*x12683)));
evalcond[3]=(((cj3*x12669))+x12666+((cj1*cj2))+((x12677*x12681))+(((-1.0)*x12668*x12674))+((r20*x12662*x12667)));
evalcond[4]=((((-1.0)*x12667*x12668))+(((-1.0)*cj2*sj1))+(((-1.0)*cj3*r20*x12662*x12671))+x12678+(((-1.0)*cj3*gconst17*x12662*x12668))+((sj3*x12669)));
evalcond[5]=(((sj1*x12664))+((sj3*x12682))+((cj3*x12673))+((r00*x12662*x12667))+(((-1.0)*cj3*r01*x12671))+((x12665*x12681))+(((-1.0)*sj0*x12678)));
evalcond[6]=(((sj3*x12680))+((cj3*x12676))+((x12672*x12681))+(((-1.0)*x12670*x12674))+((x12663*x12681))+((cj0*x12678))+(((-1.0)*sj1*x12679)));
evalcond[7]=(((sj0*x12666))+(((-1.0)*x12665*x12685))+((cj1*x12664))+(((-1.0)*cj3*r00*x12662*x12671))+(((-1.0)*x12675*x12682))+(((-1.0)*r01*x12667))+((sj3*x12673)));
evalcond[8]=((((-1.0)*cj1*x12679))+(((-1.0)*x12663*x12685))+(((-1.0)*x12667*x12670))+(((-1.0)*x12675*x12680))+(((-1.0)*cj0*x12666))+((sj3*x12676))+(((-1.0)*cj3*gconst17*x12662*x12670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12686=((1.0)*sj0);
CheckValue<IkReal> x12687 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x12686))+((cj0*r12)))),IkReal(((((-1.0)*gconst17*r01*x12686))+((cj0*gconst16*r10))+((cj0*gconst17*r11))+(((-1.0)*gconst16*r00*x12686)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12687.valid){
continue;
}
CheckValue<IkReal> x12688=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r21))+((gconst17*r20)))),-1);
if(!x12688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12687.value)+(((1.5707963267949)*(x12688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12689=IKsin(j4);
IkReal x12690=IKcos(j4);
IkReal x12691=(gconst16*r10);
IkReal x12692=(cj2*sj0);
IkReal x12693=(gconst17*r01);
IkReal x12694=(sj1*sj2);
IkReal x12695=(gconst16*sj3);
IkReal x12696=((1.0)*r21);
IkReal x12697=(cj3*gconst17);
IkReal x12698=((1.0)*r11);
IkReal x12699=((1.0)*cj3);
IkReal x12700=(gconst17*r11);
IkReal x12701=(gconst16*r00);
IkReal x12702=(cj3*gconst16);
IkReal x12703=(gconst17*sj3);
IkReal x12704=(gconst17*r21);
IkReal x12705=(cj1*sj2);
IkReal x12706=(gconst16*r20);
IkReal x12707=((1.0)*cj0*cj2);
IkReal x12708=(r12*x12689);
IkReal x12709=(r22*x12689);
IkReal x12710=((1.0)*x12689);
IkReal x12711=(sj3*x12690);
IkReal x12712=(r02*x12689);
IkReal x12713=(gconst17*x12689);
IkReal x12714=(x12690*x12699);
evalcond[0]=((((-1.0)*x12706*x12710))+((r22*x12690))+(((-1.0)*x12696*x12713)));
evalcond[1]=((((-1.0)*x12701*x12710))+((r02*x12690))+cj0+(((-1.0)*x12693*x12710)));
evalcond[2]=(sj0+(((-1.0)*x12698*x12713))+((r12*x12690))+(((-1.0)*x12691*x12710)));
evalcond[3]=(((sj3*x12709))+((r20*x12690*x12695))+((r21*x12690*x12703))+(((-1.0)*x12696*x12702))+x12694+((cj1*cj2))+((r20*x12697)));
evalcond[4]=(((r00*x12697))+((sj3*x12712))+((x12693*x12711))+((sj1*x12692))+(((-1.0)*sj0*x12705))+(((-1.0)*gconst16*r01*x12699))+((r00*x12690*x12695)));
evalcond[5]=(((x12700*x12711))+((sj3*x12708))+(((-1.0)*x12698*x12702))+(((-1.0)*sj1*x12707))+((r10*x12697))+((x12691*x12711))+((cj0*x12705)));
evalcond[6]=((((-1.0)*x12706*x12714))+(((-1.0)*cj2*sj1))+((r20*x12703))+x12705+(((-1.0)*x12690*x12696*x12697))+(((-1.0)*x12699*x12709))+(((-1.0)*x12695*x12696)));
evalcond[7]=((((-1.0)*x12701*x12714))+((sj0*x12694))+((cj1*x12692))+((r00*x12703))+(((-1.0)*x12693*x12714))+(((-1.0)*x12699*x12712))+(((-1.0)*r01*x12695)));
evalcond[8]=((((-1.0)*cj0*x12694))+((r10*x12703))+(((-1.0)*x12690*x12697*x12698))+(((-1.0)*cj1*x12707))+(((-1.0)*x12699*x12708))+(((-1.0)*x12695*x12698))+(((-1.0)*x12691*x12714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12715 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst17*r21*sj0))+((gconst16*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12715.valid){
continue;
}
CheckValue<IkReal> x12716=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r01))+((gconst17*r00)))),-1);
if(!x12716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12715.value)+(((1.5707963267949)*(x12716.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12717=IKsin(j4);
IkReal x12718=IKcos(j4);
IkReal x12719=(gconst16*r10);
IkReal x12720=(cj2*sj0);
IkReal x12721=(gconst17*r01);
IkReal x12722=(sj1*sj2);
IkReal x12723=(gconst16*sj3);
IkReal x12724=((1.0)*r21);
IkReal x12725=(cj3*gconst17);
IkReal x12726=((1.0)*r11);
IkReal x12727=((1.0)*cj3);
IkReal x12728=(gconst17*r11);
IkReal x12729=(gconst16*r00);
IkReal x12730=(cj3*gconst16);
IkReal x12731=(gconst17*sj3);
IkReal x12732=(gconst17*r21);
IkReal x12733=(cj1*sj2);
IkReal x12734=(gconst16*r20);
IkReal x12735=((1.0)*cj0*cj2);
IkReal x12736=(r12*x12717);
IkReal x12737=(r22*x12717);
IkReal x12738=((1.0)*x12717);
IkReal x12739=(sj3*x12718);
IkReal x12740=(r02*x12717);
IkReal x12741=(gconst17*x12717);
IkReal x12742=(x12718*x12727);
evalcond[0]=(((r22*x12718))+(((-1.0)*x12724*x12741))+(((-1.0)*x12734*x12738)));
evalcond[1]=(cj0+(((-1.0)*x12729*x12738))+((r02*x12718))+(((-1.0)*x12721*x12738)));
evalcond[2]=(sj0+((r12*x12718))+(((-1.0)*x12719*x12738))+(((-1.0)*x12726*x12741)));
evalcond[3]=(((r20*x12725))+((r21*x12718*x12731))+((r20*x12718*x12723))+x12722+(((-1.0)*x12724*x12730))+((cj1*cj2))+((sj3*x12737)));
evalcond[4]=(((x12721*x12739))+((r00*x12718*x12723))+((sj3*x12740))+(((-1.0)*sj0*x12733))+((r00*x12725))+((sj1*x12720))+(((-1.0)*gconst16*r01*x12727)));
evalcond[5]=((((-1.0)*sj1*x12735))+((x12728*x12739))+((x12719*x12739))+((r10*x12725))+(((-1.0)*x12726*x12730))+((sj3*x12736))+((cj0*x12733)));
evalcond[6]=((((-1.0)*x12727*x12737))+(((-1.0)*x12718*x12724*x12725))+(((-1.0)*x12723*x12724))+(((-1.0)*cj2*sj1))+((r20*x12731))+x12733+(((-1.0)*x12734*x12742)));
evalcond[7]=((((-1.0)*x12729*x12742))+(((-1.0)*r01*x12723))+((cj1*x12720))+(((-1.0)*x12727*x12740))+((r00*x12731))+(((-1.0)*x12721*x12742))+((sj0*x12722)));
evalcond[8]=((((-1.0)*x12727*x12736))+(((-1.0)*x12723*x12726))+(((-1.0)*x12719*x12742))+(((-1.0)*cj0*x12722))+((r10*x12731))+(((-1.0)*cj1*x12735))+(((-1.0)*x12718*x12725*x12726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12743=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r10))+((gconst16*r11)))),-1);
if(!x12743.valid){
continue;
}
CheckValue<IkReal> x12744 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst16*r20))+((cj0*gconst17*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12743.value)))+(x12744.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12745=IKsin(j4);
IkReal x12746=IKcos(j4);
IkReal x12747=(gconst16*r10);
IkReal x12748=(cj2*sj0);
IkReal x12749=(gconst17*r01);
IkReal x12750=(sj1*sj2);
IkReal x12751=(gconst16*sj3);
IkReal x12752=((1.0)*r21);
IkReal x12753=(cj3*gconst17);
IkReal x12754=((1.0)*r11);
IkReal x12755=((1.0)*cj3);
IkReal x12756=(gconst17*r11);
IkReal x12757=(gconst16*r00);
IkReal x12758=(cj3*gconst16);
IkReal x12759=(gconst17*sj3);
IkReal x12760=(gconst17*r21);
IkReal x12761=(cj1*sj2);
IkReal x12762=(gconst16*r20);
IkReal x12763=((1.0)*cj0*cj2);
IkReal x12764=(r12*x12745);
IkReal x12765=(r22*x12745);
IkReal x12766=((1.0)*x12745);
IkReal x12767=(sj3*x12746);
IkReal x12768=(r02*x12745);
IkReal x12769=(gconst17*x12745);
IkReal x12770=(x12746*x12755);
evalcond[0]=((((-1.0)*x12762*x12766))+((r22*x12746))+(((-1.0)*x12752*x12769)));
evalcond[1]=(cj0+(((-1.0)*x12757*x12766))+((r02*x12746))+(((-1.0)*x12749*x12766)));
evalcond[2]=(sj0+(((-1.0)*x12747*x12766))+(((-1.0)*x12754*x12769))+((r12*x12746)));
evalcond[3]=(((sj3*x12765))+(((-1.0)*x12752*x12758))+((r20*x12746*x12751))+x12750+((r20*x12753))+((cj1*cj2))+((r21*x12746*x12759)));
evalcond[4]=(((sj3*x12768))+(((-1.0)*sj0*x12761))+((sj1*x12748))+((r00*x12753))+((r00*x12746*x12751))+((x12749*x12767))+(((-1.0)*gconst16*r01*x12755)));
evalcond[5]=(((x12756*x12767))+((sj3*x12764))+((cj0*x12761))+(((-1.0)*sj1*x12763))+(((-1.0)*x12754*x12758))+((x12747*x12767))+((r10*x12753)));
evalcond[6]=((((-1.0)*x12762*x12770))+(((-1.0)*cj2*sj1))+(((-1.0)*x12746*x12752*x12753))+(((-1.0)*x12755*x12765))+x12761+((r20*x12759))+(((-1.0)*x12751*x12752)));
evalcond[7]=((((-1.0)*x12749*x12770))+((sj0*x12750))+(((-1.0)*x12755*x12768))+(((-1.0)*r01*x12751))+((cj1*x12748))+((r00*x12759))+(((-1.0)*x12757*x12770)));
evalcond[8]=((((-1.0)*cj0*x12750))+(((-1.0)*x12747*x12770))+(((-1.0)*x12755*x12764))+(((-1.0)*x12746*x12753*x12754))+((r10*x12759))+(((-1.0)*x12751*x12754))+(((-1.0)*cj1*x12763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12771=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x12771;
j4eval[1]=IKsign(x12771);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12772=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x12772;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x12772);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12773=cj5*cj5;
IkReal x12774=((1.0)*sj3);
IkReal x12775=(cj5*sj5);
IkReal x12776=(r10*r20);
IkReal x12777=((((-1.0)*r11*r21*x12773*x12774))+(((-1.0)*x12774*x12776))+((sj3*x12773*x12776))+(((-1.0)*r10*r21*x12774*x12775))+(((-1.0)*r11*r20*x12774*x12775))+(((-1.0)*r12*r22*x12774)));
j4eval[0]=x12777;
j4eval[1]=IKsign(x12777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x12778=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x12778;
j4eval[1]=IKsign(x12778);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x12779=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x12779;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x12779);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x12780=cj5*cj5;
IkReal x12781=r10*r10;
IkReal x12782=(cj5*r11);
IkReal x12783=(r10*sj5);
IkReal x12784=((((-1.0)*(r12*r12)))+((x12780*x12781))+(((-1.0)*x12780*(r11*r11)))+(((-1.0)*x12781))+(((-2.0)*x12782*x12783)));
j4eval[0]=x12784;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x12783))+(((-1.0)*x12782))))));
j4eval[2]=IKsign(x12784);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12785=cj5*cj5;
IkReal x12786=r10*r10;
IkReal x12787=(cj5*r11);
IkReal x12788=(r10*sj5);
CheckValue<IkReal> x12789 = IKatan2WithCheck(IkReal(((((-1.0)*x12787))+(((-1.0)*x12788)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12789.valid){
continue;
}
CheckValue<IkReal> x12790=IKPowWithIntegerCheck(IKsign((((x12785*x12786))+(((-1.0)*(r12*r12)))+(((-1.0)*x12785*(r11*r11)))+(((-2.0)*x12787*x12788))+(((-1.0)*x12786)))),-1);
if(!x12790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12789.value)+(((1.5707963267949)*(x12790.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12791=IKsin(j4);
IkReal x12792=IKcos(j4);
IkReal x12793=(r00*sj5);
IkReal x12794=(cj5*r01);
IkReal x12795=(r20*sj5);
IkReal x12796=(cj5*r21);
IkReal x12797=(cj5*r11);
IkReal x12798=(r10*sj5);
IkReal x12799=((1.0)*x12791);
IkReal x12800=((1.0)*x12792);
evalcond[0]=(((r22*x12792))+(((-1.0)*x12796*x12799))+(((-1.0)*x12795*x12799)));
evalcond[1]=((((-1.0)*x12794*x12799))+((r02*x12792))+(((-1.0)*x12793*x12799)));
evalcond[2]=((1.0)+((r12*x12792))+(((-1.0)*x12798*x12799))+(((-1.0)*x12797*x12799)));
evalcond[3]=((((-1.0)*r12*x12799))+(((-1.0)*x12797*x12800))+(((-1.0)*x12798*x12800)));
evalcond[4]=((((-1.0)*x12794*x12800))+((sj1*sj2))+(((-1.0)*x12793*x12800))+(((-1.0)*r02*x12799))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x12796*x12800))+(((-1.0)*r22*x12799))+(((-1.0)*x12795*x12800))+((cj1*sj2))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12801 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12801.valid){
continue;
}
CheckValue<IkReal> x12802=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x12802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12801.value)+(((1.5707963267949)*(x12802.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12803=IKsin(j4);
IkReal x12804=IKcos(j4);
IkReal x12805=(r00*sj5);
IkReal x12806=(cj5*r01);
IkReal x12807=(r20*sj5);
IkReal x12808=(cj5*r21);
IkReal x12809=(cj5*r11);
IkReal x12810=(r10*sj5);
IkReal x12811=((1.0)*x12803);
IkReal x12812=((1.0)*x12804);
evalcond[0]=((((-1.0)*x12807*x12811))+(((-1.0)*x12808*x12811))+((r22*x12804)));
evalcond[1]=(((r02*x12804))+(((-1.0)*x12805*x12811))+(((-1.0)*x12806*x12811)));
evalcond[2]=((1.0)+(((-1.0)*x12809*x12811))+(((-1.0)*x12810*x12811))+((r12*x12804)));
evalcond[3]=((((-1.0)*x12809*x12812))+(((-1.0)*x12810*x12812))+(((-1.0)*r12*x12811)));
evalcond[4]=((((-1.0)*r02*x12811))+((sj1*sj2))+(((-1.0)*x12805*x12812))+((cj1*cj2))+(((-1.0)*x12806*x12812)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x12811))+(((-1.0)*x12807*x12812))+(((-1.0)*x12808*x12812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12813=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x12813.valid){
continue;
}
CheckValue<IkReal> x12814 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12813.value)))+(x12814.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12815=IKsin(j4);
IkReal x12816=IKcos(j4);
IkReal x12817=(r00*sj5);
IkReal x12818=(cj5*r01);
IkReal x12819=(r20*sj5);
IkReal x12820=(cj5*r21);
IkReal x12821=(cj5*r11);
IkReal x12822=(r10*sj5);
IkReal x12823=((1.0)*x12815);
IkReal x12824=((1.0)*x12816);
evalcond[0]=((((-1.0)*x12820*x12823))+(((-1.0)*x12819*x12823))+((r22*x12816)));
evalcond[1]=(((r02*x12816))+(((-1.0)*x12817*x12823))+(((-1.0)*x12818*x12823)));
evalcond[2]=((1.0)+(((-1.0)*x12822*x12823))+((r12*x12816))+(((-1.0)*x12821*x12823)));
evalcond[3]=((((-1.0)*x12822*x12824))+(((-1.0)*r12*x12823))+(((-1.0)*x12821*x12824)));
evalcond[4]=((((-1.0)*r02*x12823))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*x12817*x12824))+(((-1.0)*x12818*x12824)));
evalcond[5]=((((-1.0)*r22*x12823))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x12820*x12824))+(((-1.0)*x12819*x12824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12825=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x12825;
j4eval[1]=IKsign(x12825);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12826=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x12826;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x12826);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12827=cj5*cj5;
IkReal x12828=r10*r10;
IkReal x12829=(cj5*r11);
IkReal x12830=(r10*sj5);
IkReal x12831=((r12*r12)+x12828+(((2.0)*x12829*x12830))+((x12827*(r11*r11)))+(((-1.0)*x12827*x12828)));
j4eval[0]=x12831;
j4eval[1]=IKsign(x12831);
j4eval[2]=((IKabs(r12))+(IKabs((x12829+x12830))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12832=cj5*cj5;
IkReal x12833=r10*r10;
IkReal x12834=(r10*sj5);
IkReal x12835=(cj5*r11);
CheckValue<IkReal> x12836=IKPowWithIntegerCheck(IKsign(((r12*r12)+x12833+(((-1.0)*x12832*x12833))+(((2.0)*x12834*x12835))+((x12832*(r11*r11))))),-1);
if(!x12836.valid){
continue;
}
CheckValue<IkReal> x12837 = IKatan2WithCheck(IkReal((x12835+x12834)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12836.value)))+(x12837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12838=IKcos(j4);
IkReal x12839=IKsin(j4);
IkReal x12840=(r00*sj5);
IkReal x12841=(cj5*r01);
IkReal x12842=(r20*sj5);
IkReal x12843=(cj5*r21);
IkReal x12844=(cj5*r11);
IkReal x12845=(r10*sj5);
IkReal x12846=((1.0)*x12839);
evalcond[0]=(((r12*x12839))+((x12838*x12845))+((x12838*x12844)));
evalcond[1]=(((r22*x12838))+(((-1.0)*x12843*x12846))+(((-1.0)*x12842*x12846)));
evalcond[2]=((((-1.0)*x12840*x12846))+(((-1.0)*x12841*x12846))+((r02*x12838)));
evalcond[3]=((1.0)+((r12*x12838))+(((-1.0)*x12845*x12846))+(((-1.0)*x12844*x12846)));
evalcond[4]=(((sj1*sj2))+((x12838*x12841))+((x12838*x12840))+((r02*x12839))+((cj1*cj2)));
evalcond[5]=(((r22*x12839))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x12838*x12843))+((x12838*x12842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12847 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12847.valid){
continue;
}
CheckValue<IkReal> x12848=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x12848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12847.value)+(((1.5707963267949)*(x12848.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12849=IKcos(j4);
IkReal x12850=IKsin(j4);
IkReal x12851=(r00*sj5);
IkReal x12852=(cj5*r01);
IkReal x12853=(r20*sj5);
IkReal x12854=(cj5*r21);
IkReal x12855=(cj5*r11);
IkReal x12856=(r10*sj5);
IkReal x12857=((1.0)*x12850);
evalcond[0]=(((x12849*x12855))+((x12849*x12856))+((r12*x12850)));
evalcond[1]=((((-1.0)*x12854*x12857))+(((-1.0)*x12853*x12857))+((r22*x12849)));
evalcond[2]=((((-1.0)*x12851*x12857))+(((-1.0)*x12852*x12857))+((r02*x12849)));
evalcond[3]=((1.0)+(((-1.0)*x12856*x12857))+(((-1.0)*x12855*x12857))+((r12*x12849)));
evalcond[4]=(((sj1*sj2))+((x12849*x12851))+((x12849*x12852))+((r02*x12850))+((cj1*cj2)));
evalcond[5]=(((r22*x12850))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x12849*x12854))+((x12849*x12853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12858=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x12858.valid){
continue;
}
CheckValue<IkReal> x12859 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12858.value)))+(x12859.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12860=IKcos(j4);
IkReal x12861=IKsin(j4);
IkReal x12862=(r00*sj5);
IkReal x12863=(cj5*r01);
IkReal x12864=(r20*sj5);
IkReal x12865=(cj5*r21);
IkReal x12866=(cj5*r11);
IkReal x12867=(r10*sj5);
IkReal x12868=((1.0)*x12861);
evalcond[0]=(((r12*x12861))+((x12860*x12866))+((x12860*x12867)));
evalcond[1]=((((-1.0)*x12865*x12868))+(((-1.0)*x12864*x12868))+((r22*x12860)));
evalcond[2]=((((-1.0)*x12863*x12868))+(((-1.0)*x12862*x12868))+((r02*x12860)));
evalcond[3]=((1.0)+((r12*x12860))+(((-1.0)*x12867*x12868))+(((-1.0)*x12866*x12868)));
evalcond[4]=(((sj1*sj2))+((cj1*cj2))+((x12860*x12862))+((x12860*x12863))+((r02*x12861)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((r22*x12861))+((x12860*x12864))+((x12860*x12865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12870 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12870)==0){
continue;
}
IkReal x12869=pow(x12870,-0.5);
CheckValue<IkReal> x12871 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x12871.valid){
continue;
}
IkReal gconst42=((-1.0)*(x12871.value));
IkReal gconst43=(r20*x12869);
IkReal gconst44=(r21*x12869);
CheckValue<IkReal> x12872 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x12872.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12872.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12875 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x12875.valid){
continue;
}
IkReal x12873=((-1.0)*(x12875.value));
IkReal x12874=x12869;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst43;
cj5=gconst44;
j5=x12873;
IkReal gconst42=x12873;
IkReal gconst43=(r20*x12874);
IkReal gconst44=(r21*x12874);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12876=gconst44*gconst44;
IkReal x12877=gconst43*gconst43;
IkReal x12878=(r00*r10);
IkReal x12879=(r01*r11);
IkReal x12880=(r00*r11);
IkReal x12881=(r10*sj3);
IkReal x12882=((1.0)*sj3);
IkReal x12883=(gconst43*gconst44*sj3);
IkReal x12884=(cj3*gconst43*gconst44);
CheckValue<IkReal> x12885 = IKatan2WithCheck(IkReal(((((-1.0)*gconst43*r02*r11*x12882))+((gconst44*r02*x12881)))),IkReal(((((-1.0)*x12877*x12880*x12882))+((r01*x12876*x12881))+((x12878*x12883))+(((-1.0)*gconst43*gconst44*x12879*x12882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12885.valid){
continue;
}
CheckValue<IkReal> x12886=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((x12880*x12884))+((cj3*x12876*x12879))+((cj3*x12877*x12878))+((r01*r10*x12884)))),-1);
if(!x12886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12885.value)+(((1.5707963267949)*(x12886.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12887=IKsin(j4);
IkReal x12888=IKcos(j4);
IkReal x12889=(sj1*sj2);
IkReal x12890=(cj1*cj2);
IkReal x12891=(gconst44*sj3);
IkReal x12892=(cj3*gconst44);
IkReal x12893=(cj2*sj1);
IkReal x12894=((1.0)*cj3);
IkReal x12895=(cj1*sj2);
IkReal x12896=(gconst43*r01);
IkReal x12897=(gconst43*r11);
IkReal x12898=((1.0)*sj3);
IkReal x12899=(r21*x12888);
IkReal x12900=((1.0)*gconst43*r21);
IkReal x12901=(sj3*x12887);
IkReal x12902=(r01*x12888);
IkReal x12903=(gconst43*x12888);
IkReal x12904=((1.0)*x12887);
IkReal x12905=(r11*x12888);
IkReal x12906=(x12890+x12889);
evalcond[0]=((((-1.0)*gconst43*r20*x12904))+((r22*x12888))+(((-1.0)*gconst44*r21*x12904)));
evalcond[1]=((((-1.0)*gconst44*r01*x12904))+(((-1.0)*gconst43*r00*x12904))+((r02*x12888)));
evalcond[2]=((1.0)+(((-1.0)*gconst43*r10*x12904))+(((-1.0)*gconst44*r11*x12904))+((r12*x12888)));
evalcond[3]=(((x12891*x12905))+((r10*sj3*x12903))+(((-1.0)*x12894*x12897))+((r10*x12892))+((r12*x12901)));
evalcond[4]=((((-1.0)*x12892*x12905))+(((-1.0)*r12*x12887*x12894))+((r10*x12891))+(((-1.0)*r10*x12894*x12903))+(((-1.0)*x12897*x12898)));
evalcond[5]=(x12906+(((-1.0)*gconst43*r21*x12894))+((r20*sj3*x12903))+((r20*x12892))+((r22*x12901))+((x12891*x12899)));
evalcond[6]=((((-1.0)*x12895))+((x12891*x12902))+x12893+((r00*x12892))+((r02*x12901))+((r00*sj3*x12903))+(((-1.0)*x12894*x12896)));
evalcond[7]=(x12906+(((-1.0)*r00*x12894*x12903))+((r00*x12891))+(((-1.0)*x12896*x12898))+(((-1.0)*x12892*x12902))+(((-1.0)*r02*x12887*x12894)));
evalcond[8]=((((-1.0)*x12893))+(((-1.0)*gconst43*r21*x12898))+(((-1.0)*r22*x12887*x12894))+x12895+(((-1.0)*x12892*x12899))+((r20*x12891))+(((-1.0)*r20*x12894*x12903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12907=IKPowWithIntegerCheck(IKsign((((gconst44*r00))+(((-1.0)*gconst43*r01)))),-1);
if(!x12907.valid){
continue;
}
CheckValue<IkReal> x12908 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst43*r20))+((gconst44*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12907.value)))+(x12908.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12909=IKsin(j4);
IkReal x12910=IKcos(j4);
IkReal x12911=(sj1*sj2);
IkReal x12912=(cj1*cj2);
IkReal x12913=(gconst44*sj3);
IkReal x12914=(cj3*gconst44);
IkReal x12915=(cj2*sj1);
IkReal x12916=((1.0)*cj3);
IkReal x12917=(cj1*sj2);
IkReal x12918=(gconst43*r01);
IkReal x12919=(gconst43*r11);
IkReal x12920=((1.0)*sj3);
IkReal x12921=(r21*x12910);
IkReal x12922=((1.0)*gconst43*r21);
IkReal x12923=(sj3*x12909);
IkReal x12924=(r01*x12910);
IkReal x12925=(gconst43*x12910);
IkReal x12926=((1.0)*x12909);
IkReal x12927=(r11*x12910);
IkReal x12928=(x12912+x12911);
evalcond[0]=((((-1.0)*gconst43*r20*x12926))+((r22*x12910))+(((-1.0)*gconst44*r21*x12926)));
evalcond[1]=((((-1.0)*gconst44*r01*x12926))+((r02*x12910))+(((-1.0)*gconst43*r00*x12926)));
evalcond[2]=((1.0)+(((-1.0)*gconst43*r10*x12926))+((r12*x12910))+(((-1.0)*gconst44*r11*x12926)));
evalcond[3]=(((x12913*x12927))+(((-1.0)*x12916*x12919))+((r10*x12914))+((r12*x12923))+((r10*sj3*x12925)));
evalcond[4]=((((-1.0)*x12919*x12920))+(((-1.0)*r12*x12909*x12916))+(((-1.0)*r10*x12916*x12925))+(((-1.0)*x12914*x12927))+((r10*x12913)));
evalcond[5]=(x12928+((x12913*x12921))+(((-1.0)*gconst43*r21*x12916))+((r20*sj3*x12925))+((r20*x12914))+((r22*x12923)));
evalcond[6]=(x12915+((r00*x12914))+((x12913*x12924))+(((-1.0)*x12917))+((r02*x12923))+(((-1.0)*x12916*x12918))+((r00*sj3*x12925)));
evalcond[7]=(x12928+(((-1.0)*x12918*x12920))+((r00*x12913))+(((-1.0)*r00*x12916*x12925))+(((-1.0)*r02*x12909*x12916))+(((-1.0)*x12914*x12924)));
evalcond[8]=(x12917+(((-1.0)*r20*x12916*x12925))+(((-1.0)*gconst43*r21*x12920))+(((-1.0)*r22*x12909*x12916))+(((-1.0)*x12915))+(((-1.0)*x12914*x12921))+((r20*x12913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12931 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12931)==0){
continue;
}
IkReal x12929=pow(x12931,-0.5);
IkReal x12930=((-1.0)*x12929);
CheckValue<IkReal> x12932 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x12932.valid){
continue;
}
IkReal gconst45=((3.14159265358979)+(((-1.0)*(x12932.value))));
IkReal gconst46=(r20*x12930);
IkReal gconst47=(r21*x12930);
CheckValue<IkReal> x12933 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x12933.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12933.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12937 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x12937.valid){
continue;
}
IkReal x12934=((1.0)*(x12937.value));
IkReal x12935=x12929;
IkReal x12936=((-1.0)*x12935);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst46;
cj5=gconst47;
j5=((3.14159265)+(((-1.0)*x12934)));
IkReal gconst45=((3.14159265358979)+(((-1.0)*x12934)));
IkReal gconst46=(r20*x12936);
IkReal gconst47=(r21*x12936);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x12941 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x12941.valid){
continue;
}
IkReal x12938=((1.0)*(x12941.value));
IkReal x12939=x12929;
IkReal x12940=((-1.0)*x12939);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst46;
cj5=gconst47;
j5=((3.14159265)+(((-1.0)*x12938)));
IkReal gconst45=((3.14159265358979)+(((-1.0)*x12938)));
IkReal gconst46=(r20*x12940);
IkReal gconst47=(r21*x12940);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x12945 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x12945.valid){
continue;
}
IkReal x12942=((1.0)*(x12945.value));
IkReal x12943=x12929;
IkReal x12944=((-1.0)*x12943);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst46;
cj5=gconst47;
j5=((3.14159265)+(((-1.0)*x12942)));
IkReal gconst45=((3.14159265358979)+(((-1.0)*x12942)));
IkReal gconst46=(r20*x12944);
IkReal gconst47=(r21*x12944);
IkReal x12946=((1.0)*sj3);
IkReal x12947=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x12951=IKPowWithIntegerCheck(x12947,-1);
if(!x12951.valid){
continue;
}
IkReal x12948=x12951.value;
IkReal x12949=(r10*x12948);
IkReal x12950=(r11*x12948);
j4eval[0]=IKsign(((((-1.0)*r20*x12946*x12949*(r21*r21)))+(((-1.0)*x12946*x12949*(r20*r20*r20)))+(((-1.0)*x12946*x12950*(r21*r21*r21)))+(((-1.0)*r12*r22*x12946))+(((-1.0)*r21*x12946*x12950*(r20*r20)))));
j4eval[1]=cj3;
j4eval[2]=r02;
j4eval[3]=x12947;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12952=gconst47*gconst47;
IkReal x12953=gconst46*gconst46;
IkReal x12954=(cj3*r21);
IkReal x12955=((1.0)*r22);
IkReal x12956=((1.0)*r11);
IkReal x12957=(cj3*r20);
IkReal x12958=(gconst46*gconst47);
IkReal x12959=(r21*sj3);
IkReal x12960=((1.0)*r10);
IkReal x12961=(r20*sj3);
CheckValue<IkReal> x12962=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12952*x12956*x12959))+(((-1.0)*r12*sj3*x12955))+(((-1.0)*x12956*x12958*x12961))+(((-1.0)*x12953*x12960*x12961))+(((-1.0)*x12958*x12959*x12960)))),-1);
if(!x12962.valid){
continue;
}
CheckValue<IkReal> x12963 = IKatan2WithCheck(IkReal((((cj3*gconst47*r10*r22))+(((-1.0)*cj3*gconst46*r11*x12955)))),IkReal(((((-1.0)*x12953*x12956*x12957))+((r10*x12957*x12958))+((r10*x12952*x12954))+(((-1.0)*x12954*x12956*x12958)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12962.value)))+(x12963.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12964=IKsin(j4);
IkReal x12965=IKcos(j4);
IkReal x12966=(sj1*sj2);
IkReal x12967=(cj1*cj2);
IkReal x12968=((1.0)*r11);
IkReal x12969=(cj3*r20);
IkReal x12970=(gconst47*sj3);
IkReal x12971=((1.0)*gconst46);
IkReal x12972=(cj3*r01);
IkReal x12973=(cj1*sj2);
IkReal x12974=(cj2*sj1);
IkReal x12975=(cj3*r10);
IkReal x12976=(gconst46*sj3);
IkReal x12977=(cj3*gconst47);
IkReal x12978=(gconst47*x12964);
IkReal x12979=(r21*x12965);
IkReal x12980=(sj3*x12964);
IkReal x12981=(r00*x12965);
IkReal x12982=(gconst47*x12965);
IkReal x12983=(x12967+x12966);
IkReal x12984=((1.0)*cj3*x12964);
evalcond[0]=((((-1.0)*r21*x12978))+(((-1.0)*r20*x12964*x12971))+((r22*x12965)));
evalcond[1]=((((-1.0)*r00*x12964*x12971))+((r02*x12965))+(((-1.0)*r01*x12978)));
evalcond[2]=((1.0)+(((-1.0)*r10*x12964*x12971))+(((-1.0)*x12968*x12978))+((r12*x12965)));
evalcond[3]=(((r10*x12965*x12976))+(((-1.0)*cj3*gconst46*x12968))+((gconst47*x12975))+((r12*x12980))+((r11*x12965*x12970)));
evalcond[4]=((((-1.0)*x12965*x12971*x12975))+(((-1.0)*x12965*x12968*x12977))+(((-1.0)*r12*x12984))+(((-1.0)*x12968*x12976))+((r10*x12970)));
evalcond[5]=(x12983+((r22*x12980))+((x12970*x12979))+((gconst47*x12969))+((r20*x12965*x12976))+(((-1.0)*cj3*r21*x12971)));
evalcond[6]=(x12974+((r00*x12977))+(((-1.0)*x12973))+(((-1.0)*x12971*x12972))+((r01*x12965*x12970))+((x12976*x12981))+((r02*x12980)));
evalcond[7]=(x12983+(((-1.0)*x12972*x12982))+((r00*x12970))+(((-1.0)*r01*sj3*x12971))+(((-1.0)*r02*x12984))+(((-1.0)*cj3*x12971*x12981)));
evalcond[8]=(x12973+(((-1.0)*r22*x12984))+((r20*x12970))+(((-1.0)*x12974))+(((-1.0)*x12977*x12979))+(((-1.0)*r21*sj3*x12971))+(((-1.0)*x12965*x12969*x12971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12985=IKPowWithIntegerCheck(IKsign((((gconst46*r21))+(((-1.0)*gconst47*r20)))),-1);
if(!x12985.valid){
continue;
}
CheckValue<IkReal> x12986 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst47*r01))+((gconst46*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12985.value)))+(x12986.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12987=IKsin(j4);
IkReal x12988=IKcos(j4);
IkReal x12989=(sj1*sj2);
IkReal x12990=(cj1*cj2);
IkReal x12991=((1.0)*r11);
IkReal x12992=(cj3*r20);
IkReal x12993=(gconst47*sj3);
IkReal x12994=((1.0)*gconst46);
IkReal x12995=(cj3*r01);
IkReal x12996=(cj1*sj2);
IkReal x12997=(cj2*sj1);
IkReal x12998=(cj3*r10);
IkReal x12999=(gconst46*sj3);
IkReal x13000=(cj3*gconst47);
IkReal x13001=(gconst47*x12987);
IkReal x13002=(r21*x12988);
IkReal x13003=(sj3*x12987);
IkReal x13004=(r00*x12988);
IkReal x13005=(gconst47*x12988);
IkReal x13006=(x12989+x12990);
IkReal x13007=((1.0)*cj3*x12987);
evalcond[0]=((((-1.0)*r20*x12987*x12994))+((r22*x12988))+(((-1.0)*r21*x13001)));
evalcond[1]=((((-1.0)*r00*x12987*x12994))+(((-1.0)*r01*x13001))+((r02*x12988)));
evalcond[2]=((1.0)+(((-1.0)*r10*x12987*x12994))+((r12*x12988))+(((-1.0)*x12991*x13001)));
evalcond[3]=(((gconst47*x12998))+((r12*x13003))+((r11*x12988*x12993))+((r10*x12988*x12999))+(((-1.0)*cj3*gconst46*x12991)));
evalcond[4]=((((-1.0)*x12988*x12991*x13000))+((r10*x12993))+(((-1.0)*r12*x13007))+(((-1.0)*x12991*x12999))+(((-1.0)*x12988*x12994*x12998)));
evalcond[5]=((((-1.0)*cj3*r21*x12994))+((x12993*x13002))+((gconst47*x12992))+((r20*x12988*x12999))+x13006+((r22*x13003)));
evalcond[6]=(((r00*x13000))+x12997+(((-1.0)*x12994*x12995))+((r01*x12988*x12993))+((r02*x13003))+((x12999*x13004))+(((-1.0)*x12996)));
evalcond[7]=((((-1.0)*cj3*x12994*x13004))+((r00*x12993))+x13006+(((-1.0)*r02*x13007))+(((-1.0)*x12995*x13005))+(((-1.0)*r01*sj3*x12994)));
evalcond[8]=(x12996+(((-1.0)*r21*sj3*x12994))+(((-1.0)*r22*x13007))+(((-1.0)*x12988*x12992*x12994))+((r20*x12993))+(((-1.0)*x13000*x13002))+(((-1.0)*x12997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13008 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst46*r20))+((gconst47*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13008.valid){
continue;
}
CheckValue<IkReal> x13009=IKPowWithIntegerCheck(IKsign((((gconst47*r00))+(((-1.0)*gconst46*r01)))),-1);
if(!x13009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13008.value)+(((1.5707963267949)*(x13009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13010=IKsin(j4);
IkReal x13011=IKcos(j4);
IkReal x13012=(sj1*sj2);
IkReal x13013=(cj1*cj2);
IkReal x13014=((1.0)*r11);
IkReal x13015=(cj3*r20);
IkReal x13016=(gconst47*sj3);
IkReal x13017=((1.0)*gconst46);
IkReal x13018=(cj3*r01);
IkReal x13019=(cj1*sj2);
IkReal x13020=(cj2*sj1);
IkReal x13021=(cj3*r10);
IkReal x13022=(gconst46*sj3);
IkReal x13023=(cj3*gconst47);
IkReal x13024=(gconst47*x13010);
IkReal x13025=(r21*x13011);
IkReal x13026=(sj3*x13010);
IkReal x13027=(r00*x13011);
IkReal x13028=(gconst47*x13011);
IkReal x13029=(x13012+x13013);
IkReal x13030=((1.0)*cj3*x13010);
evalcond[0]=(((r22*x13011))+(((-1.0)*r21*x13024))+(((-1.0)*r20*x13010*x13017)));
evalcond[1]=((((-1.0)*r00*x13010*x13017))+((r02*x13011))+(((-1.0)*r01*x13024)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13010*x13017))+(((-1.0)*x13014*x13024))+((r12*x13011)));
evalcond[3]=((((-1.0)*cj3*gconst46*x13014))+((r11*x13011*x13016))+((r10*x13011*x13022))+((r12*x13026))+((gconst47*x13021)));
evalcond[4]=((((-1.0)*x13011*x13014*x13023))+(((-1.0)*r12*x13030))+(((-1.0)*x13014*x13022))+(((-1.0)*x13011*x13017*x13021))+((r10*x13016)));
evalcond[5]=(((gconst47*x13015))+((x13016*x13025))+(((-1.0)*cj3*r21*x13017))+x13029+((r22*x13026))+((r20*x13011*x13022)));
evalcond[6]=(((r00*x13023))+((r02*x13026))+((x13022*x13027))+(((-1.0)*x13019))+x13020+(((-1.0)*x13017*x13018))+((r01*x13011*x13016)));
evalcond[7]=(((r00*x13016))+(((-1.0)*r02*x13030))+(((-1.0)*r01*sj3*x13017))+x13029+(((-1.0)*cj3*x13017*x13027))+(((-1.0)*x13018*x13028)));
evalcond[8]=(((r20*x13016))+(((-1.0)*r21*sj3*x13017))+(((-1.0)*r22*x13030))+(((-1.0)*x13020))+x13019+(((-1.0)*x13011*x13015*x13017))+(((-1.0)*x13023*x13025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13031=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13031);
rxp1_1=(px*r21);
rxp1_2=(r11*x13031);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13032=(r10*sj5);
IkReal x13033=(cj5*r11);
j4eval[0]=((((-1.0)*x13032))+(((-1.0)*x13033)));
j4eval[1]=(((sj3*x13033))+((sj3*x13032)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13034=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13034);
rxp1_1=(px*r21);
rxp1_2=(r11*x13034);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj5*r11*sj3))+((r10*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13035=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13035);
rxp1_1=(px*r21);
rxp1_2=(r11*x13035);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((cj5*r11*sj3))+((r10*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13036=IKPowWithIntegerCheck(r02,-1);
if(!x13036.valid){
continue;
}
CheckValue<IkReal> x13037=IKPowWithIntegerCheck(sj3,-1);
if(!x13037.valid){
continue;
}
CheckValue<IkReal> x13038=IKPowWithIntegerCheck((((cj5*r11*sj3))+((r10*sj3*sj5))),-1);
if(!x13038.valid){
continue;
}
if( IKabs(((x13036.value)*(x13037.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13038.value)*((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13036.value)*(x13037.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))))))+IKsqr(((x13038.value)*((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13036.value)*(x13037.value)*((((cj1*sj2))+(((-1.0)*cj2*sj1))))), ((x13038.value)*((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13039=IKsin(j4);
IkReal x13040=IKcos(j4);
IkReal x13041=(sj1*sj2);
IkReal x13042=(cj1*cj2);
IkReal x13043=(r20*sj5);
IkReal x13044=(cj3*r10);
IkReal x13045=(cj5*r11);
IkReal x13046=(cj5*r21);
IkReal x13047=(cj2*sj1);
IkReal x13048=(cj1*sj2);
IkReal x13049=(cj5*r20);
IkReal x13050=(r10*sj5);
IkReal x13051=(sj3*x13040);
IkReal x13052=((1.0)*x13039);
IkReal x13053=((1.0)*x13040);
IkReal x13054=((1.0)*r21*sj5);
IkReal x13055=((1.0)*r11*sj5);
IkReal x13056=(x13042+x13041);
evalcond[0]=(r02*x13040);
evalcond[1]=((((-1.0)*x13048))+x13047+((r02*sj3*x13039)));
evalcond[2]=((((-1.0)*cj3*r02*x13052))+x13056);
evalcond[3]=((((-1.0)*x13046*x13052))+(((-1.0)*x13043*x13052)));
evalcond[4]=((1.0)+(((-1.0)*x13045*x13052))+(((-1.0)*x13050*x13052)));
evalcond[5]=(((cj5*x13044))+((x13045*x13051))+(((-1.0)*cj3*x13055))+((x13050*x13051)));
evalcond[6]=(((cj5*r10*sj3))+(((-1.0)*sj5*x13044*x13053))+(((-1.0)*cj3*x13045*x13053))+(((-1.0)*sj3*x13055)));
evalcond[7]=(((x13046*x13051))+((x13043*x13051))+(((-1.0)*cj3*x13054))+((cj3*x13049))+x13056);
evalcond[8]=((((-1.0)*x13047))+x13048+((sj3*x13049))+(((-1.0)*cj3*x13046*x13053))+(((-1.0)*cj3*x13043*x13053))+(((-1.0)*sj3*x13054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13057=IKPowWithIntegerCheck(cj3,-1);
if(!x13057.valid){
continue;
}
CheckValue<IkReal> x13058=IKPowWithIntegerCheck(r02,-1);
if(!x13058.valid){
continue;
}
CheckValue<IkReal> x13059=IKPowWithIntegerCheck((((cj5*r11*sj3))+((r10*sj3*sj5))),-1);
if(!x13059.valid){
continue;
}
if( IKabs(((x13057.value)*(x13058.value)*((((sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13059.value)*((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13057.value)*(x13058.value)*((((sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13059.value)*((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13057.value)*(x13058.value)*((((sj1*sj2))+((cj1*cj2))))), ((x13059.value)*((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13060=IKsin(j4);
IkReal x13061=IKcos(j4);
IkReal x13062=(sj1*sj2);
IkReal x13063=(cj1*cj2);
IkReal x13064=(r20*sj5);
IkReal x13065=(cj3*r10);
IkReal x13066=(cj5*r11);
IkReal x13067=(cj5*r21);
IkReal x13068=(cj2*sj1);
IkReal x13069=(cj1*sj2);
IkReal x13070=(cj5*r20);
IkReal x13071=(r10*sj5);
IkReal x13072=(sj3*x13061);
IkReal x13073=((1.0)*x13060);
IkReal x13074=((1.0)*x13061);
IkReal x13075=((1.0)*r21*sj5);
IkReal x13076=((1.0)*r11*sj5);
IkReal x13077=(x13063+x13062);
evalcond[0]=(r02*x13061);
evalcond[1]=((((-1.0)*x13069))+x13068+((r02*sj3*x13060)));
evalcond[2]=(x13077+(((-1.0)*cj3*r02*x13073)));
evalcond[3]=((((-1.0)*x13064*x13073))+(((-1.0)*x13067*x13073)));
evalcond[4]=((1.0)+(((-1.0)*x13066*x13073))+(((-1.0)*x13071*x13073)));
evalcond[5]=(((x13066*x13072))+((cj5*x13065))+((x13071*x13072))+(((-1.0)*cj3*x13076)));
evalcond[6]=((((-1.0)*cj3*x13066*x13074))+((cj5*r10*sj3))+(((-1.0)*sj3*x13076))+(((-1.0)*sj5*x13065*x13074)));
evalcond[7]=(((x13064*x13072))+((x13067*x13072))+x13077+(((-1.0)*cj3*x13075))+((cj3*x13070)));
evalcond[8]=((((-1.0)*cj3*x13067*x13074))+(((-1.0)*x13068))+(((-1.0)*cj3*x13064*x13074))+(((-1.0)*sj3*x13075))+x13069+((sj3*x13070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13078=((1.0)*cj5);
IkReal x13079=(r10*sj5);
CheckValue<IkReal> x13080=IKPowWithIntegerCheck(((((-1.0)*r11*x13078))+(((-1.0)*x13079))),-1);
if(!x13080.valid){
continue;
}
CheckValue<IkReal> x13081=IKPowWithIntegerCheck((((cj5*r11*sj3))+((sj3*x13079))),-1);
if(!x13081.valid){
continue;
}
if( IKabs(((-1.0)*(x13080.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13081.value)*((((cj3*r11*sj5))+(((-1.0)*cj3*r10*x13078)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13080.value)))+IKsqr(((x13081.value)*((((cj3*r11*sj5))+(((-1.0)*cj3*r10*x13078))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13080.value)), ((x13081.value)*((((cj3*r11*sj5))+(((-1.0)*cj3*r10*x13078))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13082=IKsin(j4);
IkReal x13083=IKcos(j4);
IkReal x13084=(sj1*sj2);
IkReal x13085=(cj1*cj2);
IkReal x13086=(r20*sj5);
IkReal x13087=(cj3*r10);
IkReal x13088=(cj5*r11);
IkReal x13089=(cj5*r21);
IkReal x13090=(cj2*sj1);
IkReal x13091=(cj1*sj2);
IkReal x13092=(cj5*r20);
IkReal x13093=(r10*sj5);
IkReal x13094=(sj3*x13083);
IkReal x13095=((1.0)*x13082);
IkReal x13096=((1.0)*x13083);
IkReal x13097=((1.0)*r21*sj5);
IkReal x13098=((1.0)*r11*sj5);
IkReal x13099=(x13085+x13084);
evalcond[0]=(r02*x13083);
evalcond[1]=(((r02*sj3*x13082))+x13090+(((-1.0)*x13091)));
evalcond[2]=((((-1.0)*cj3*r02*x13095))+x13099);
evalcond[3]=((((-1.0)*x13086*x13095))+(((-1.0)*x13089*x13095)));
evalcond[4]=((1.0)+(((-1.0)*x13088*x13095))+(((-1.0)*x13093*x13095)));
evalcond[5]=((((-1.0)*cj3*x13098))+((x13088*x13094))+((x13093*x13094))+((cj5*x13087)));
evalcond[6]=((((-1.0)*cj3*x13088*x13096))+(((-1.0)*sj5*x13087*x13096))+((cj5*r10*sj3))+(((-1.0)*sj3*x13098)));
evalcond[7]=((((-1.0)*cj3*x13097))+((cj3*x13092))+((x13089*x13094))+((x13086*x13094))+x13099);
evalcond[8]=((((-1.0)*cj3*x13089*x13096))+((sj3*x13092))+x13091+(((-1.0)*cj3*x13086*x13096))+(((-1.0)*x13090))+(((-1.0)*sj3*x13097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13100=cj5*cj5;
IkReal x13101=((1.0)*sj3);
IkReal x13102=(cj3*r20);
IkReal x13103=(cj5*r10);
IkReal x13104=(cj3*r22);
IkReal x13105=(r10*r20);
IkReal x13106=(cj3*r21);
IkReal x13107=((1.0)*r11);
IkReal x13108=(r11*x13100);
IkReal x13109=(cj5*r11*sj5);
CheckValue<IkReal> x13110=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13101*x13105))+(((-1.0)*r21*sj5*x13101*x13103))+(((-1.0)*r21*x13101*x13108))+((sj3*x13100*x13105))+(((-1.0)*r12*r22*x13101))+(((-1.0)*r20*x13101*x13109)))),-1);
if(!x13110.valid){
continue;
}
CheckValue<IkReal> x13111 = IKatan2WithCheck(IkReal((((x13103*x13104))+(((-1.0)*sj5*x13104*x13107)))),IkReal((((r10*x13100*x13106))+((x13102*x13108))+(((-1.0)*x13102*x13107))+(((-1.0)*cj5*sj5*x13106*x13107))+((sj5*x13102*x13103)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13110.value)))+(x13111.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13112=IKsin(j4);
IkReal x13113=IKcos(j4);
IkReal x13114=(sj1*sj2);
IkReal x13115=(cj1*cj2);
IkReal x13116=(r20*sj5);
IkReal x13117=(cj1*sj2);
IkReal x13118=((1.0)*sj5);
IkReal x13119=(cj3*r01);
IkReal x13120=(cj3*r10);
IkReal x13121=(cj5*r01);
IkReal x13122=(cj5*r11);
IkReal x13123=(cj5*r21);
IkReal x13124=(cj2*sj1);
IkReal x13125=(cj3*cj5);
IkReal x13126=(cj5*sj3);
IkReal x13127=(sj3*x13113);
IkReal x13128=((1.0)*x13112);
IkReal x13129=(sj3*x13112);
IkReal x13130=(cj3*x13113);
IkReal x13131=(x13115+x13114);
evalcond[0]=(((r22*x13113))+(((-1.0)*x13123*x13128))+(((-1.0)*x13116*x13128)));
evalcond[1]=(((r02*x13113))+(((-1.0)*x13121*x13128))+(((-1.0)*r00*x13112*x13118)));
evalcond[2]=((1.0)+((r12*x13113))+(((-1.0)*x13122*x13128))+(((-1.0)*r10*x13112*x13118)));
evalcond[3]=(((r10*sj5*x13127))+((x13122*x13127))+((cj5*x13120))+((r12*x13129))+(((-1.0)*cj3*r11*x13118)));
evalcond[4]=(((r10*x13126))+(((-1.0)*r11*sj3*x13118))+(((-1.0)*x13113*x13118*x13120))+(((-1.0)*x13122*x13130))+(((-1.0)*cj3*r12*x13128)));
evalcond[5]=(((x13116*x13127))+((r20*x13125))+(((-1.0)*cj3*r21*x13118))+((x13123*x13127))+((r22*x13129))+x13131);
evalcond[6]=(((r00*x13125))+((x13121*x13127))+(((-1.0)*x13117))+((r00*sj5*x13127))+((r02*x13129))+x13124+(((-1.0)*x13118*x13119)));
evalcond[7]=((((-1.0)*r01*sj3*x13118))+((r00*x13126))+(((-1.0)*cj3*r02*x13128))+(((-1.0)*r00*x13118*x13130))+(((-1.0)*cj5*x13113*x13119))+x13131);
evalcond[8]=((((-1.0)*x13123*x13130))+(((-1.0)*cj3*r22*x13128))+((r20*x13126))+(((-1.0)*x13116*x13130))+(((-1.0)*r21*sj3*x13118))+x13117+(((-1.0)*x13124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13132 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13132.valid){
continue;
}
CheckValue<IkReal> x13133=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x13133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13132.value)+(((1.5707963267949)*(x13133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13134=IKsin(j4);
IkReal x13135=IKcos(j4);
IkReal x13136=(sj1*sj2);
IkReal x13137=(cj1*cj2);
IkReal x13138=(r20*sj5);
IkReal x13139=(cj1*sj2);
IkReal x13140=((1.0)*sj5);
IkReal x13141=(cj3*r01);
IkReal x13142=(cj3*r10);
IkReal x13143=(cj5*r01);
IkReal x13144=(cj5*r11);
IkReal x13145=(cj5*r21);
IkReal x13146=(cj2*sj1);
IkReal x13147=(cj3*cj5);
IkReal x13148=(cj5*sj3);
IkReal x13149=(sj3*x13135);
IkReal x13150=((1.0)*x13134);
IkReal x13151=(sj3*x13134);
IkReal x13152=(cj3*x13135);
IkReal x13153=(x13137+x13136);
evalcond[0]=((((-1.0)*x13138*x13150))+(((-1.0)*x13145*x13150))+((r22*x13135)));
evalcond[1]=((((-1.0)*r00*x13134*x13140))+(((-1.0)*x13143*x13150))+((r02*x13135)));
evalcond[2]=((1.0)+(((-1.0)*x13144*x13150))+((r12*x13135))+(((-1.0)*r10*x13134*x13140)));
evalcond[3]=(((r10*sj5*x13149))+((x13144*x13149))+((r12*x13151))+(((-1.0)*cj3*r11*x13140))+((cj5*x13142)));
evalcond[4]=((((-1.0)*x13135*x13140*x13142))+(((-1.0)*x13144*x13152))+(((-1.0)*cj3*r12*x13150))+((r10*x13148))+(((-1.0)*r11*sj3*x13140)));
evalcond[5]=(((x13138*x13149))+((r20*x13147))+((x13145*x13149))+x13153+(((-1.0)*cj3*r21*x13140))+((r22*x13151)));
evalcond[6]=(((r02*x13151))+(((-1.0)*x13140*x13141))+((x13143*x13149))+((r00*sj5*x13149))+x13146+((r00*x13147))+(((-1.0)*x13139)));
evalcond[7]=((((-1.0)*r00*x13140*x13152))+(((-1.0)*r01*sj3*x13140))+(((-1.0)*cj3*r02*x13150))+x13153+((r00*x13148))+(((-1.0)*cj5*x13135*x13141)));
evalcond[8]=((((-1.0)*x13145*x13152))+(((-1.0)*x13138*x13152))+(((-1.0)*cj3*r22*x13150))+((r20*x13148))+x13139+(((-1.0)*x13146))+(((-1.0)*r21*sj3*x13140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13154=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x13154.valid){
continue;
}
CheckValue<IkReal> x13155 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13154.value)))+(x13155.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13156=IKsin(j4);
IkReal x13157=IKcos(j4);
IkReal x13158=(sj1*sj2);
IkReal x13159=(cj1*cj2);
IkReal x13160=(r20*sj5);
IkReal x13161=(cj1*sj2);
IkReal x13162=((1.0)*sj5);
IkReal x13163=(cj3*r01);
IkReal x13164=(cj3*r10);
IkReal x13165=(cj5*r01);
IkReal x13166=(cj5*r11);
IkReal x13167=(cj5*r21);
IkReal x13168=(cj2*sj1);
IkReal x13169=(cj3*cj5);
IkReal x13170=(cj5*sj3);
IkReal x13171=(sj3*x13157);
IkReal x13172=((1.0)*x13156);
IkReal x13173=(sj3*x13156);
IkReal x13174=(cj3*x13157);
IkReal x13175=(x13159+x13158);
evalcond[0]=((((-1.0)*x13160*x13172))+(((-1.0)*x13167*x13172))+((r22*x13157)));
evalcond[1]=(((r02*x13157))+(((-1.0)*x13165*x13172))+(((-1.0)*r00*x13156*x13162)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13156*x13162))+(((-1.0)*x13166*x13172))+((r12*x13157)));
evalcond[3]=(((r10*sj5*x13171))+(((-1.0)*cj3*r11*x13162))+((r12*x13173))+((cj5*x13164))+((x13166*x13171)));
evalcond[4]=((((-1.0)*r11*sj3*x13162))+(((-1.0)*x13166*x13174))+(((-1.0)*x13157*x13162*x13164))+((r10*x13170))+(((-1.0)*cj3*r12*x13172)));
evalcond[5]=((((-1.0)*cj3*r21*x13162))+((r20*x13169))+((r22*x13173))+((x13160*x13171))+((x13167*x13171))+x13175);
evalcond[6]=(((r00*x13169))+((x13165*x13171))+(((-1.0)*x13162*x13163))+((r02*x13173))+((r00*sj5*x13171))+(((-1.0)*x13161))+x13168);
evalcond[7]=((((-1.0)*r00*x13162*x13174))+((r00*x13170))+(((-1.0)*cj3*r02*x13172))+(((-1.0)*cj5*x13157*x13163))+(((-1.0)*r01*sj3*x13162))+x13175);
evalcond[8]=(((r20*x13170))+(((-1.0)*r21*sj3*x13162))+(((-1.0)*x13160*x13174))+(((-1.0)*cj3*r22*x13172))+(((-1.0)*x13168))+x13161+(((-1.0)*x13167*x13174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x13176=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x13176;
j4eval[1]=IKsign(x13176);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x13177=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x13177;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x13177);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x13178=cj5*cj5;
IkReal x13179=((1.0)*sj3);
IkReal x13180=(cj5*sj5);
IkReal x13181=(r10*r20);
IkReal x13182=((((-1.0)*r10*r21*x13179*x13180))+(((-1.0)*x13179*x13181))+(((-1.0)*r11*r21*x13178*x13179))+((sj3*x13178*x13181))+(((-1.0)*r11*r20*x13179*x13180))+(((-1.0)*r12*r22*x13179)));
j4eval[0]=x13182;
j4eval[1]=IKsign(x13182);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13183=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x13183;
j4eval[1]=IKsign(x13183);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13184=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x13184;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x13184);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13185=cj5*cj5;
IkReal x13186=r10*r10;
IkReal x13187=(cj5*r11);
IkReal x13188=(r10*sj5);
IkReal x13189=((r12*r12)+(((-1.0)*x13185*x13186))+((x13185*(r11*r11)))+x13186+(((2.0)*x13187*x13188)));
j4eval[0]=x13189;
j4eval[1]=IKsign(x13189);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x13188))+(((-1.0)*x13187))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13190=cj5*cj5;
IkReal x13191=r10*r10;
IkReal x13192=(cj5*r11);
IkReal x13193=(r10*sj5);
CheckValue<IkReal> x13194=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x13190*(r11*r11)))+x13191+(((-1.0)*x13190*x13191))+(((2.0)*x13192*x13193)))),-1);
if(!x13194.valid){
continue;
}
CheckValue<IkReal> x13195 = IKatan2WithCheck(IkReal(((((-1.0)*x13193))+(((-1.0)*x13192)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13194.value)))+(x13195.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13196=IKsin(j4);
IkReal x13197=IKcos(j4);
IkReal x13198=(r00*sj5);
IkReal x13199=(cj5*r01);
IkReal x13200=(r20*sj5);
IkReal x13201=((1.0)*sj1);
IkReal x13202=(cj5*r21);
IkReal x13203=(cj5*r11);
IkReal x13204=(r10*sj5);
IkReal x13205=((1.0)*x13196);
IkReal x13206=((1.0)*x13197);
evalcond[0]=((((-1.0)*x13202*x13205))+(((-1.0)*x13200*x13205))+((r22*x13197)));
evalcond[1]=((((-1.0)*x13198*x13205))+((r02*x13197))+(((-1.0)*x13199*x13205)));
evalcond[2]=((-1.0)+((r12*x13197))+(((-1.0)*x13203*x13205))+(((-1.0)*x13204*x13205)));
evalcond[3]=((((-1.0)*r12*x13205))+(((-1.0)*x13203*x13206))+(((-1.0)*x13204*x13206)));
evalcond[4]=((((-1.0)*x13202*x13206))+((cj1*sj2))+(((-1.0)*x13200*x13206))+(((-1.0)*cj2*x13201))+(((-1.0)*r22*x13205)));
evalcond[5]=((((-1.0)*sj2*x13201))+(((-1.0)*x13198*x13206))+(((-1.0)*x13199*x13206))+(((-1.0)*r02*x13205))+(((-1.0)*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13207 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13207.valid){
continue;
}
CheckValue<IkReal> x13208=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x13208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13207.value)+(((1.5707963267949)*(x13208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13209=IKsin(j4);
IkReal x13210=IKcos(j4);
IkReal x13211=(r00*sj5);
IkReal x13212=(cj5*r01);
IkReal x13213=(r20*sj5);
IkReal x13214=((1.0)*sj1);
IkReal x13215=(cj5*r21);
IkReal x13216=(cj5*r11);
IkReal x13217=(r10*sj5);
IkReal x13218=((1.0)*x13209);
IkReal x13219=((1.0)*x13210);
evalcond[0]=((((-1.0)*x13213*x13218))+(((-1.0)*x13215*x13218))+((r22*x13210)));
evalcond[1]=((((-1.0)*x13211*x13218))+((r02*x13210))+(((-1.0)*x13212*x13218)));
evalcond[2]=((-1.0)+(((-1.0)*x13216*x13218))+((r12*x13210))+(((-1.0)*x13217*x13218)));
evalcond[3]=((((-1.0)*x13216*x13219))+(((-1.0)*r12*x13218))+(((-1.0)*x13217*x13219)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*x13213*x13219))+(((-1.0)*x13215*x13219))+(((-1.0)*r22*x13218))+(((-1.0)*cj2*x13214)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*sj2*x13214))+(((-1.0)*x13211*x13219))+(((-1.0)*r02*x13218))+(((-1.0)*x13212*x13219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13220 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13220.valid){
continue;
}
CheckValue<IkReal> x13221=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x13221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13220.value)+(((1.5707963267949)*(x13221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13222=IKsin(j4);
IkReal x13223=IKcos(j4);
IkReal x13224=(r00*sj5);
IkReal x13225=(cj5*r01);
IkReal x13226=(r20*sj5);
IkReal x13227=((1.0)*sj1);
IkReal x13228=(cj5*r21);
IkReal x13229=(cj5*r11);
IkReal x13230=(r10*sj5);
IkReal x13231=((1.0)*x13222);
IkReal x13232=((1.0)*x13223);
evalcond[0]=((((-1.0)*x13228*x13231))+(((-1.0)*x13226*x13231))+((r22*x13223)));
evalcond[1]=(((r02*x13223))+(((-1.0)*x13225*x13231))+(((-1.0)*x13224*x13231)));
evalcond[2]=((-1.0)+(((-1.0)*x13229*x13231))+((r12*x13223))+(((-1.0)*x13230*x13231)));
evalcond[3]=((((-1.0)*x13229*x13232))+(((-1.0)*r12*x13231))+(((-1.0)*x13230*x13232)));
evalcond[4]=((((-1.0)*x13228*x13232))+(((-1.0)*x13226*x13232))+((cj1*sj2))+(((-1.0)*cj2*x13227))+(((-1.0)*r22*x13231)));
evalcond[5]=((((-1.0)*x13225*x13232))+(((-1.0)*cj1*cj2))+(((-1.0)*r02*x13231))+(((-1.0)*sj2*x13227))+(((-1.0)*x13224*x13232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13233=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x13233;
j4eval[1]=IKsign(x13233);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13234=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x13234;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x13234);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13235=(cj2*sj1);
IkReal x13236=(cj1*sj2);
IkReal x13237=(r10*sj5);
IkReal x13238=((1.0)*cj5);
IkReal x13239=(((r01*sj5))+(((-1.0)*r00*x13238)));
j4eval[0]=x13239;
j4eval[1]=IKsign(x13239);
j4eval[2]=((IKabs((((x13236*x13237))+(((-1.0)*x13235*x13237))+((cj5*r11*x13236))+(((-1.0)*r11*x13235*x13238)))))+(IKabs((((r12*x13235))+(((-1.0)*r12*x13236))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13240=(cj2*sj1);
IkReal x13241=(cj1*sj2);
IkReal x13242=(cj5*r11);
IkReal x13243=(r10*sj5);
CheckValue<IkReal> x13244=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x13244.valid){
continue;
}
CheckValue<IkReal> x13245 = IKatan2WithCheck(IkReal((((x13241*x13242))+((x13241*x13243))+(((-1.0)*x13240*x13242))+(((-1.0)*x13240*x13243)))),IkReal(((((-1.0)*r12*x13241))+((r12*x13240)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13244.value)))+(x13245.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13246=IKcos(j4);
IkReal x13247=IKsin(j4);
IkReal x13248=(r00*sj5);
IkReal x13249=(cj5*r01);
IkReal x13250=((1.0)*cj2);
IkReal x13251=(r20*sj5);
IkReal x13252=(cj5*r21);
IkReal x13253=(cj5*r11);
IkReal x13254=(r10*sj5);
IkReal x13255=((1.0)*x13247);
evalcond[0]=(((x13246*x13254))+((x13246*x13253))+((r12*x13247)));
evalcond[1]=(((r22*x13246))+(((-1.0)*x13251*x13255))+(((-1.0)*x13252*x13255)));
evalcond[2]=(((r02*x13246))+(((-1.0)*x13248*x13255))+(((-1.0)*x13249*x13255)));
evalcond[3]=((-1.0)+(((-1.0)*x13254*x13255))+((r12*x13246))+(((-1.0)*x13253*x13255)));
evalcond[4]=(((x13246*x13252))+((x13246*x13251))+((cj1*sj2))+((r22*x13247))+(((-1.0)*sj1*x13250)));
evalcond[5]=(((x13246*x13249))+((x13246*x13248))+((r02*x13247))+(((-1.0)*sj1*sj2))+(((-1.0)*cj1*x13250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13256 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13256.valid){
continue;
}
CheckValue<IkReal> x13257=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x13257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13256.value)+(((1.5707963267949)*(x13257.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13258=IKcos(j4);
IkReal x13259=IKsin(j4);
IkReal x13260=(r00*sj5);
IkReal x13261=(cj5*r01);
IkReal x13262=((1.0)*cj2);
IkReal x13263=(r20*sj5);
IkReal x13264=(cj5*r21);
IkReal x13265=(cj5*r11);
IkReal x13266=(r10*sj5);
IkReal x13267=((1.0)*x13259);
evalcond[0]=(((x13258*x13266))+((x13258*x13265))+((r12*x13259)));
evalcond[1]=(((r22*x13258))+(((-1.0)*x13263*x13267))+(((-1.0)*x13264*x13267)));
evalcond[2]=(((r02*x13258))+(((-1.0)*x13261*x13267))+(((-1.0)*x13260*x13267)));
evalcond[3]=((-1.0)+(((-1.0)*x13265*x13267))+(((-1.0)*x13266*x13267))+((r12*x13258)));
evalcond[4]=(((x13258*x13264))+((x13258*x13263))+((cj1*sj2))+(((-1.0)*sj1*x13262))+((r22*x13259)));
evalcond[5]=(((x13258*x13260))+((x13258*x13261))+((r02*x13259))+(((-1.0)*cj1*x13262))+(((-1.0)*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13268 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13268.valid){
continue;
}
CheckValue<IkReal> x13269=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x13269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13268.value)+(((1.5707963267949)*(x13269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13270=IKcos(j4);
IkReal x13271=IKsin(j4);
IkReal x13272=(r00*sj5);
IkReal x13273=(cj5*r01);
IkReal x13274=((1.0)*cj2);
IkReal x13275=(r20*sj5);
IkReal x13276=(cj5*r21);
IkReal x13277=(cj5*r11);
IkReal x13278=(r10*sj5);
IkReal x13279=((1.0)*x13271);
evalcond[0]=(((r12*x13271))+((x13270*x13278))+((x13270*x13277)));
evalcond[1]=((((-1.0)*x13275*x13279))+(((-1.0)*x13276*x13279))+((r22*x13270)));
evalcond[2]=((((-1.0)*x13273*x13279))+((r02*x13270))+(((-1.0)*x13272*x13279)));
evalcond[3]=((-1.0)+(((-1.0)*x13278*x13279))+((r12*x13270))+(((-1.0)*x13277*x13279)));
evalcond[4]=((((-1.0)*sj1*x13274))+((cj1*sj2))+((x13270*x13275))+((x13270*x13276))+((r22*x13271)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*cj1*x13274))+((r02*x13271))+((x13270*x13273))+((x13270*x13272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13281 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13281)==0){
continue;
}
IkReal x13280=pow(x13281,-0.5);
CheckValue<IkReal> x13282 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x13282.valid){
continue;
}
IkReal gconst60=((-1.0)*(x13282.value));
IkReal gconst61=(r00*x13280);
IkReal gconst62=(r01*x13280);
CheckValue<IkReal> x13283 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x13283.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13283.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13286 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x13286.valid){
continue;
}
IkReal x13284=((-1.0)*(x13286.value));
IkReal x13285=x13280;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x13284;
IkReal gconst60=x13284;
IkReal gconst61=(r00*x13285);
IkReal gconst62=(r01*x13285);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13287=gconst62*gconst62;
IkReal x13288=gconst61*gconst61;
IkReal x13289=(r20*sj3);
IkReal x13290=((1.0)*r11);
IkReal x13291=(cj3*r21);
IkReal x13292=(gconst62*r10);
IkReal x13293=(r22*sj3);
IkReal x13294=(cj3*r20);
IkReal x13295=(gconst61*gconst62);
IkReal x13296=(r21*sj3);
CheckValue<IkReal> x13297=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((gconst61*x13291*x13292))+((r11*x13287*x13291))+((r10*x13288*x13294))+((r11*x13294*x13295)))),-1);
if(!x13297.valid){
continue;
}
CheckValue<IkReal> x13298 = IKatan2WithCheck(IkReal(((((-1.0)*gconst61*x13290*x13293))+((x13292*x13293)))),IkReal((((gconst61*x13289*x13292))+((r10*x13287*x13296))+(((-1.0)*x13288*x13289*x13290))+(((-1.0)*x13290*x13295*x13296)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13297.value)))+(x13298.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13299=IKsin(j4);
IkReal x13300=IKcos(j4);
IkReal x13301=(cj1*sj2);
IkReal x13302=(gconst62*r20);
IkReal x13303=((1.0)*gconst61);
IkReal x13304=(sj1*sj2);
IkReal x13305=(r21*sj3);
IkReal x13306=((1.0)*cj2);
IkReal x13307=(gconst62*r10);
IkReal x13308=(r01*sj3);
IkReal x13309=((1.0)*gconst62);
IkReal x13310=(r11*sj3);
IkReal x13311=(gconst62*r00);
IkReal x13312=(sj1*x13306);
IkReal x13313=(cj3*x13300);
IkReal x13314=(sj3*x13299);
IkReal x13315=(r21*x13309);
IkReal x13316=(gconst62*x13300);
IkReal x13317=((1.0)*cj3*x13299);
IkReal x13318=(gconst61*sj3*x13300);
evalcond[0]=((((-1.0)*r20*x13299*x13303))+((r22*x13300))+(((-1.0)*x13299*x13315)));
evalcond[1]=((((-1.0)*r01*x13299*x13309))+((r02*x13300))+(((-1.0)*r00*x13299*x13303)));
evalcond[2]=((-1.0)+((r12*x13300))+(((-1.0)*r11*x13299*x13309))+(((-1.0)*r10*x13299*x13303)));
evalcond[3]=(((r10*x13318))+((x13310*x13316))+((cj3*x13307))+(((-1.0)*cj3*r11*x13303))+((r12*x13314)));
evalcond[4]=((((-1.0)*r10*x13303*x13313))+(((-1.0)*r11*x13309*x13313))+((sj3*x13307))+(((-1.0)*x13303*x13310))+(((-1.0)*r12*x13317)));
evalcond[5]=((((-1.0)*cj3*r21*x13303))+((x13305*x13316))+((r20*x13318))+((cj3*x13302))+((cj1*cj2))+((r22*x13314))+x13304);
evalcond[6]=(((x13308*x13316))+((r00*x13318))+(((-1.0)*cj3*r01*x13303))+((cj3*x13311))+(((-1.0)*x13312))+x13301+((r02*x13314)));
evalcond[7]=((((-1.0)*x13313*x13315))+((sj3*x13302))+(((-1.0)*r20*x13303*x13313))+(((-1.0)*x13312))+(((-1.0)*x13303*x13305))+x13301+(((-1.0)*r22*x13317)));
evalcond[8]=((((-1.0)*r00*x13303*x13313))+(((-1.0)*r01*x13309*x13313))+(((-1.0)*cj1*x13306))+(((-1.0)*r02*x13317))+((sj3*x13311))+(((-1.0)*x13303*x13308))+(((-1.0)*x13304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13319 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst61*r00))+((gconst62*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13319.valid){
continue;
}
CheckValue<IkReal> x13320=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r21))+((gconst62*r20)))),-1);
if(!x13320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13319.value)+(((1.5707963267949)*(x13320.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13321=IKsin(j4);
IkReal x13322=IKcos(j4);
IkReal x13323=(cj1*sj2);
IkReal x13324=(gconst62*r20);
IkReal x13325=((1.0)*gconst61);
IkReal x13326=(sj1*sj2);
IkReal x13327=(r21*sj3);
IkReal x13328=((1.0)*cj2);
IkReal x13329=(gconst62*r10);
IkReal x13330=(r01*sj3);
IkReal x13331=((1.0)*gconst62);
IkReal x13332=(r11*sj3);
IkReal x13333=(gconst62*r00);
IkReal x13334=(sj1*x13328);
IkReal x13335=(cj3*x13322);
IkReal x13336=(sj3*x13321);
IkReal x13337=(r21*x13331);
IkReal x13338=(gconst62*x13322);
IkReal x13339=((1.0)*cj3*x13321);
IkReal x13340=(gconst61*sj3*x13322);
evalcond[0]=((((-1.0)*x13321*x13337))+(((-1.0)*r20*x13321*x13325))+((r22*x13322)));
evalcond[1]=(((r02*x13322))+(((-1.0)*r01*x13321*x13331))+(((-1.0)*r00*x13321*x13325)));
evalcond[2]=((-1.0)+((r12*x13322))+(((-1.0)*r11*x13321*x13331))+(((-1.0)*r10*x13321*x13325)));
evalcond[3]=(((cj3*x13329))+((x13332*x13338))+((r10*x13340))+(((-1.0)*cj3*r11*x13325))+((r12*x13336)));
evalcond[4]=((((-1.0)*r11*x13331*x13335))+(((-1.0)*r12*x13339))+(((-1.0)*x13325*x13332))+((sj3*x13329))+(((-1.0)*r10*x13325*x13335)));
evalcond[5]=(((r22*x13336))+((cj3*x13324))+(((-1.0)*cj3*r21*x13325))+((cj1*cj2))+((r20*x13340))+x13326+((x13327*x13338)));
evalcond[6]=((((-1.0)*x13334))+((cj3*x13333))+((r02*x13336))+(((-1.0)*cj3*r01*x13325))+((r00*x13340))+x13323+((x13330*x13338)));
evalcond[7]=((((-1.0)*x13334))+(((-1.0)*r20*x13325*x13335))+(((-1.0)*r22*x13339))+((sj3*x13324))+(((-1.0)*x13325*x13327))+(((-1.0)*x13335*x13337))+x13323);
evalcond[8]=((((-1.0)*x13326))+(((-1.0)*x13325*x13330))+((sj3*x13333))+(((-1.0)*r00*x13325*x13335))+(((-1.0)*cj1*x13328))+(((-1.0)*r01*x13331*x13335))+(((-1.0)*r02*x13339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13341=((-1.0)*r00);
IkReal x13343 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13343)==0){
continue;
}
IkReal x13342=pow(x13343,-0.5);
CheckValue<IkReal> x13344 = IKatan2WithCheck(IkReal(x13341),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x13344.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x13344.value))));
IkReal gconst64=(x13341*x13342);
IkReal gconst65=((-1.0)*r01*x13342);
CheckValue<IkReal> x13345 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x13345.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13345.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x13346=((-1.0)*r00);
CheckValue<IkReal> x13349 = IKatan2WithCheck(IkReal(x13346),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x13349.valid){
continue;
}
IkReal x13347=((1.0)*(x13349.value));
IkReal x13348=x13342;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x13347)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x13347)));
IkReal gconst64=(x13346*x13348);
IkReal gconst65=((-1.0)*r01*x13348);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13350=((-1.0)*r00);
CheckValue<IkReal> x13353 = IKatan2WithCheck(IkReal(x13350),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x13353.valid){
continue;
}
IkReal x13351=((1.0)*(x13353.value));
IkReal x13352=x13342;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x13351)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x13351)));
IkReal gconst64=(x13350*x13352);
IkReal gconst65=((-1.0)*r01*x13352);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13354=((-1.0)*r00);
CheckValue<IkReal> x13357 = IKatan2WithCheck(IkReal(x13354),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x13357.valid){
continue;
}
IkReal x13355=((1.0)*(x13357.value));
IkReal x13356=x13342;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x13355)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x13355)));
IkReal gconst64=(x13354*x13356);
IkReal gconst65=((-1.0)*r01*x13356);
IkReal x13358=((1.0)*sj3);
CheckValue<IkReal> x13365=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13365.valid){
continue;
}
IkReal x13359=x13365.value;
IkReal x13360=(r10*x13359);
IkReal x13361=(r21*x13359);
IkReal x13362=(r20*x13359);
IkReal x13363=(r11*x13359);
IkReal x13364=(r00*r01*x13359);
j4eval[0]=IKsign(((((-1.0)*r00*r01*r11*x13358*x13362))+(((-1.0)*r12*r22*x13358))+(((-1.0)*r00*r01*r21*x13358*x13360))+(((-1.0)*r11*x13358*x13361*(r01*r01)))+(((-1.0)*r20*x13358*x13360*(r00*r00)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13366=gconst65*gconst65;
IkReal x13367=gconst64*gconst64;
IkReal x13368=((1.0)*sj3);
IkReal x13369=(cj3*r10);
IkReal x13370=(gconst64*gconst65);
IkReal x13371=(r21*x13366);
IkReal x13372=(r20*x13367);
IkReal x13373=((1.0)*cj3*r11);
CheckValue<IkReal> x13374=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*r20*x13368*x13370))+(((-1.0)*r12*r22*x13368))+(((-1.0)*r10*r21*x13368*x13370))+(((-1.0)*r11*x13368*x13371))+(((-1.0)*r10*x13368*x13372)))),-1);
if(!x13374.valid){
continue;
}
CheckValue<IkReal> x13375 = IKatan2WithCheck(IkReal((((gconst65*r22*x13369))+(((-1.0)*gconst64*r22*x13373)))),IkReal(((((-1.0)*r21*x13370*x13373))+((x13369*x13371))+(((-1.0)*x13372*x13373))+((r20*x13369*x13370)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13374.value)))+(x13375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13376=IKsin(j4);
IkReal x13377=IKcos(j4);
IkReal x13378=(cj1*sj2);
IkReal x13379=(cj3*gconst65);
IkReal x13380=(gconst64*r20);
IkReal x13381=(gconst65*sj3);
IkReal x13382=(sj1*sj2);
IkReal x13383=(cj3*gconst64);
IkReal x13384=((1.0)*cj2);
IkReal x13385=(gconst64*sj3);
IkReal x13386=((1.0)*r01);
IkReal x13387=((1.0)*r21);
IkReal x13388=((1.0)*r11);
IkReal x13389=(sj1*x13384);
IkReal x13390=((1.0)*x13377);
IkReal x13391=((1.0)*x13376);
IkReal x13392=(sj3*x13376);
evalcond[0]=((((-1.0)*x13380*x13391))+((r22*x13377))+(((-1.0)*gconst65*x13376*x13387)));
evalcond[1]=(((r02*x13377))+(((-1.0)*gconst64*r00*x13391))+(((-1.0)*gconst65*x13376*x13386)));
evalcond[2]=((-1.0)+((r12*x13377))+(((-1.0)*gconst64*r10*x13391))+(((-1.0)*gconst65*x13376*x13388)));
evalcond[3]=(((r10*x13379))+((r10*x13377*x13385))+((r12*x13392))+(((-1.0)*x13383*x13388))+((r11*x13377*x13381)));
evalcond[4]=(((r10*x13381))+(((-1.0)*r10*x13383*x13390))+(((-1.0)*x13385*x13388))+(((-1.0)*cj3*r12*x13391))+(((-1.0)*x13377*x13379*x13388)));
evalcond[5]=(((r21*x13377*x13381))+((r20*x13379))+(((-1.0)*x13383*x13387))+((r22*x13392))+((cj1*cj2))+((sj3*x13377*x13380))+x13382);
evalcond[6]=(((r00*x13379))+((r01*x13377*x13381))+(((-1.0)*x13383*x13386))+(((-1.0)*x13389))+((r00*x13377*x13385))+((r02*x13392))+x13378);
evalcond[7]=((((-1.0)*cj3*r22*x13391))+((r20*x13381))+(((-1.0)*x13385*x13387))+(((-1.0)*x13377*x13379*x13387))+(((-1.0)*x13389))+x13378+(((-1.0)*cj3*x13380*x13390)));
evalcond[8]=((((-1.0)*x13382))+(((-1.0)*r00*x13383*x13390))+(((-1.0)*x13385*x13386))+(((-1.0)*x13377*x13379*x13386))+((r00*x13381))+(((-1.0)*cj1*x13384))+(((-1.0)*cj3*r02*x13391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13393 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst64*r00))+((gconst65*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13393.valid){
continue;
}
CheckValue<IkReal> x13394=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r21))+((gconst65*r20)))),-1);
if(!x13394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13393.value)+(((1.5707963267949)*(x13394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13395=IKsin(j4);
IkReal x13396=IKcos(j4);
IkReal x13397=(cj1*sj2);
IkReal x13398=(cj3*gconst65);
IkReal x13399=(gconst64*r20);
IkReal x13400=(gconst65*sj3);
IkReal x13401=(sj1*sj2);
IkReal x13402=(cj3*gconst64);
IkReal x13403=((1.0)*cj2);
IkReal x13404=(gconst64*sj3);
IkReal x13405=((1.0)*r01);
IkReal x13406=((1.0)*r21);
IkReal x13407=((1.0)*r11);
IkReal x13408=(sj1*x13403);
IkReal x13409=((1.0)*x13396);
IkReal x13410=((1.0)*x13395);
IkReal x13411=(sj3*x13395);
evalcond[0]=((((-1.0)*x13399*x13410))+((r22*x13396))+(((-1.0)*gconst65*x13395*x13406)));
evalcond[1]=((((-1.0)*gconst64*r00*x13410))+((r02*x13396))+(((-1.0)*gconst65*x13395*x13405)));
evalcond[2]=((-1.0)+((r12*x13396))+(((-1.0)*gconst64*r10*x13410))+(((-1.0)*gconst65*x13395*x13407)));
evalcond[3]=(((r10*x13396*x13404))+((r10*x13398))+(((-1.0)*x13402*x13407))+((r11*x13396*x13400))+((r12*x13411)));
evalcond[4]=(((r10*x13400))+(((-1.0)*x13396*x13398*x13407))+(((-1.0)*cj3*r12*x13410))+(((-1.0)*r10*x13402*x13409))+(((-1.0)*x13404*x13407)));
evalcond[5]=(x13401+((r22*x13411))+((r20*x13398))+(((-1.0)*x13402*x13406))+((cj1*cj2))+((sj3*x13396*x13399))+((r21*x13396*x13400)));
evalcond[6]=(((r02*x13411))+((r01*x13396*x13400))+((r00*x13396*x13404))+((r00*x13398))+(((-1.0)*x13408))+(((-1.0)*x13402*x13405))+x13397);
evalcond[7]=((((-1.0)*x13396*x13398*x13406))+(((-1.0)*x13408))+(((-1.0)*cj3*r22*x13410))+(((-1.0)*cj3*x13399*x13409))+((r20*x13400))+(((-1.0)*x13404*x13406))+x13397);
evalcond[8]=(((r00*x13400))+(((-1.0)*cj1*x13403))+(((-1.0)*cj3*r02*x13410))+(((-1.0)*x13396*x13398*x13405))+(((-1.0)*r00*x13402*x13409))+(((-1.0)*x13401))+(((-1.0)*x13404*x13405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13412 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst64*r20))+((gconst65*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13412.valid){
continue;
}
CheckValue<IkReal> x13413=IKPowWithIntegerCheck(IKsign((((gconst64*r01))+(((-1.0)*gconst65*r00)))),-1);
if(!x13413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13412.value)+(((1.5707963267949)*(x13413.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13414=IKsin(j4);
IkReal x13415=IKcos(j4);
IkReal x13416=(cj1*sj2);
IkReal x13417=(cj3*gconst65);
IkReal x13418=(gconst64*r20);
IkReal x13419=(gconst65*sj3);
IkReal x13420=(sj1*sj2);
IkReal x13421=(cj3*gconst64);
IkReal x13422=((1.0)*cj2);
IkReal x13423=(gconst64*sj3);
IkReal x13424=((1.0)*r01);
IkReal x13425=((1.0)*r21);
IkReal x13426=((1.0)*r11);
IkReal x13427=(sj1*x13422);
IkReal x13428=((1.0)*x13415);
IkReal x13429=((1.0)*x13414);
IkReal x13430=(sj3*x13414);
evalcond[0]=(((r22*x13415))+(((-1.0)*gconst65*x13414*x13425))+(((-1.0)*x13418*x13429)));
evalcond[1]=(((r02*x13415))+(((-1.0)*gconst64*r00*x13429))+(((-1.0)*gconst65*x13414*x13424)));
evalcond[2]=((-1.0)+(((-1.0)*gconst64*r10*x13429))+(((-1.0)*gconst65*x13414*x13426))+((r12*x13415)));
evalcond[3]=((((-1.0)*x13421*x13426))+((r11*x13415*x13419))+((r12*x13430))+((r10*x13417))+((r10*x13415*x13423)));
evalcond[4]=((((-1.0)*x13423*x13426))+(((-1.0)*cj3*r12*x13429))+(((-1.0)*r10*x13421*x13428))+((r10*x13419))+(((-1.0)*x13415*x13417*x13426)));
evalcond[5]=(x13420+(((-1.0)*x13421*x13425))+((r22*x13430))+((r21*x13415*x13419))+((r20*x13417))+((cj1*cj2))+((sj3*x13415*x13418)));
evalcond[6]=(x13416+((r01*x13415*x13419))+(((-1.0)*x13421*x13424))+((r02*x13430))+(((-1.0)*x13427))+((r00*x13417))+((r00*x13415*x13423)));
evalcond[7]=(x13416+(((-1.0)*cj3*r22*x13429))+(((-1.0)*x13423*x13425))+((r20*x13419))+(((-1.0)*x13427))+(((-1.0)*cj3*x13418*x13428))+(((-1.0)*x13415*x13417*x13425)));
evalcond[8]=((((-1.0)*x13423*x13424))+(((-1.0)*x13420))+(((-1.0)*cj3*r02*x13429))+((r00*x13419))+(((-1.0)*r00*x13421*x13428))+(((-1.0)*x13415*x13417*x13424))+(((-1.0)*cj1*x13422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13431=((-1.0)*px);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13431);
rxp1_1=(px*r21);
rxp1_2=(r11*x13431);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13432=(r10*sj5);
IkReal x13433=(cj5*r11);
j4eval[0]=((((-1.0)*x13433))+(((-1.0)*x13432)));
j4eval[1]=(((sj3*x13432))+((sj3*x13433)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13434=((-1.0)*px);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13434);
rxp1_1=(px*r21);
rxp1_2=(r11*x13434);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13435=((1.0)*r10*sj5);
IkReal x13436=((1.0)*cj5*r11);
j4eval[0]=((((-1.0)*x13436))+(((-1.0)*x13435)));
j4eval[1]=((((-1.0)*cj3*x13435))+(((-1.0)*cj3*x13436)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13437=((-1.0)*px);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13437);
rxp1_1=(px*r21);
rxp1_2=(r11*x13437);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((cj5*r11*sj3))+((r10*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13438=IKPowWithIntegerCheck(r02,-1);
if(!x13438.valid){
continue;
}
CheckValue<IkReal> x13439=IKPowWithIntegerCheck(sj3,-1);
if(!x13439.valid){
continue;
}
CheckValue<IkReal> x13440=IKPowWithIntegerCheck((((cj5*r11*sj3))+((r10*sj3*sj5))),-1);
if(!x13440.valid){
continue;
}
if( IKabs(((x13438.value)*(x13439.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13440.value)*((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13438.value)*(x13439.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13440.value)*((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13438.value)*(x13439.value)*((((cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13440.value)*((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13441=IKsin(j4);
IkReal x13442=IKcos(j4);
IkReal x13443=(cj1*sj2);
IkReal x13444=(r20*sj5);
IkReal x13445=(cj3*r10);
IkReal x13446=(sj1*sj2);
IkReal x13447=(cj5*r11);
IkReal x13448=(cj5*r21);
IkReal x13449=((1.0)*cj2);
IkReal x13450=(cj5*r20);
IkReal x13451=(r10*sj5);
IkReal x13452=(sj1*x13449);
IkReal x13453=(sj3*x13442);
IkReal x13454=((1.0)*x13441);
IkReal x13455=((1.0)*x13442);
IkReal x13456=((1.0)*r21*sj5);
IkReal x13457=((1.0)*r11*sj5);
evalcond[0]=(r02*x13442);
evalcond[1]=(x13443+((r02*sj3*x13441))+(((-1.0)*x13452)));
evalcond[2]=((((-1.0)*x13448*x13454))+(((-1.0)*x13444*x13454)));
evalcond[3]=((-1.0)+(((-1.0)*x13447*x13454))+(((-1.0)*x13451*x13454)));
evalcond[4]=((((-1.0)*cj3*r02*x13454))+(((-1.0)*cj1*x13449))+(((-1.0)*x13446)));
evalcond[5]=((((-1.0)*cj3*x13457))+((x13451*x13453))+((x13447*x13453))+((cj5*x13445)));
evalcond[6]=((((-1.0)*sj5*x13445*x13455))+((cj5*r10*sj3))+(((-1.0)*cj3*x13447*x13455))+(((-1.0)*sj3*x13457)));
evalcond[7]=(x13446+(((-1.0)*cj3*x13456))+((x13444*x13453))+((cj1*cj2))+((x13448*x13453))+((cj3*x13450)));
evalcond[8]=(x13443+(((-1.0)*cj3*x13444*x13455))+((sj3*x13450))+(((-1.0)*x13452))+(((-1.0)*sj3*x13456))+(((-1.0)*cj3*x13448*x13455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13458=((1.0)*r10);
IkReal x13459=((1.0)*cj5*r11);
CheckValue<IkReal> x13460=IKPowWithIntegerCheck(((((-1.0)*sj5*x13458))+(((-1.0)*x13459))),-1);
if(!x13460.valid){
continue;
}
CheckValue<IkReal> x13461=IKPowWithIntegerCheck(((((-1.0)*cj3*x13459))+(((-1.0)*cj3*sj5*x13458))),-1);
if(!x13461.valid){
continue;
}
if( IKabs(x13460.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13461.value)*((((r11*sj3*sj5))+(((-1.0)*cj5*sj3*x13458)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13460.value)+IKsqr(((x13461.value)*((((r11*sj3*sj5))+(((-1.0)*cj5*sj3*x13458))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13460.value, ((x13461.value)*((((r11*sj3*sj5))+(((-1.0)*cj5*sj3*x13458))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13462=IKsin(j4);
IkReal x13463=IKcos(j4);
IkReal x13464=(cj1*sj2);
IkReal x13465=(r20*sj5);
IkReal x13466=(cj3*r10);
IkReal x13467=(sj1*sj2);
IkReal x13468=(cj5*r11);
IkReal x13469=(cj5*r21);
IkReal x13470=((1.0)*cj2);
IkReal x13471=(cj5*r20);
IkReal x13472=(r10*sj5);
IkReal x13473=(sj1*x13470);
IkReal x13474=(sj3*x13463);
IkReal x13475=((1.0)*x13462);
IkReal x13476=((1.0)*x13463);
IkReal x13477=((1.0)*r21*sj5);
IkReal x13478=((1.0)*r11*sj5);
evalcond[0]=(r02*x13463);
evalcond[1]=(x13464+(((-1.0)*x13473))+((r02*sj3*x13462)));
evalcond[2]=((((-1.0)*x13465*x13475))+(((-1.0)*x13469*x13475)));
evalcond[3]=((-1.0)+(((-1.0)*x13472*x13475))+(((-1.0)*x13468*x13475)));
evalcond[4]=((((-1.0)*cj1*x13470))+(((-1.0)*x13467))+(((-1.0)*cj3*r02*x13475)));
evalcond[5]=(((x13472*x13474))+((x13468*x13474))+((cj5*x13466))+(((-1.0)*cj3*x13478)));
evalcond[6]=((((-1.0)*sj5*x13466*x13476))+((cj5*r10*sj3))+(((-1.0)*sj3*x13478))+(((-1.0)*cj3*x13468*x13476)));
evalcond[7]=(x13467+((x13469*x13474))+((x13465*x13474))+((cj1*cj2))+((cj3*x13471))+(((-1.0)*cj3*x13477)));
evalcond[8]=(((sj3*x13471))+x13464+(((-1.0)*cj3*x13465*x13476))+(((-1.0)*sj3*x13477))+(((-1.0)*x13473))+(((-1.0)*cj3*x13469*x13476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13479=((1.0)*cj5);
IkReal x13480=(r10*sj5);
CheckValue<IkReal> x13481=IKPowWithIntegerCheck(((((-1.0)*x13480))+(((-1.0)*r11*x13479))),-1);
if(!x13481.valid){
continue;
}
CheckValue<IkReal> x13482=IKPowWithIntegerCheck((((cj5*r11*sj3))+((sj3*x13480))),-1);
if(!x13482.valid){
continue;
}
if( IKabs(x13481.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13482.value)*((((cj3*r11*sj5))+(((-1.0)*cj3*r10*x13479)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13481.value)+IKsqr(((x13482.value)*((((cj3*r11*sj5))+(((-1.0)*cj3*r10*x13479))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13481.value, ((x13482.value)*((((cj3*r11*sj5))+(((-1.0)*cj3*r10*x13479))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13483=IKsin(j4);
IkReal x13484=IKcos(j4);
IkReal x13485=(cj1*sj2);
IkReal x13486=(r20*sj5);
IkReal x13487=(cj3*r10);
IkReal x13488=(sj1*sj2);
IkReal x13489=(cj5*r11);
IkReal x13490=(cj5*r21);
IkReal x13491=((1.0)*cj2);
IkReal x13492=(cj5*r20);
IkReal x13493=(r10*sj5);
IkReal x13494=(sj1*x13491);
IkReal x13495=(sj3*x13484);
IkReal x13496=((1.0)*x13483);
IkReal x13497=((1.0)*x13484);
IkReal x13498=((1.0)*r21*sj5);
IkReal x13499=((1.0)*r11*sj5);
evalcond[0]=(r02*x13484);
evalcond[1]=(x13485+((r02*sj3*x13483))+(((-1.0)*x13494)));
evalcond[2]=((((-1.0)*x13490*x13496))+(((-1.0)*x13486*x13496)));
evalcond[3]=((-1.0)+(((-1.0)*x13489*x13496))+(((-1.0)*x13493*x13496)));
evalcond[4]=((((-1.0)*x13488))+(((-1.0)*cj3*r02*x13496))+(((-1.0)*cj1*x13491)));
evalcond[5]=((((-1.0)*cj3*x13499))+((x13493*x13495))+((x13489*x13495))+((cj5*x13487)));
evalcond[6]=((((-1.0)*sj3*x13499))+((cj5*r10*sj3))+(((-1.0)*cj3*x13489*x13497))+(((-1.0)*sj5*x13487*x13497)));
evalcond[7]=(x13488+((x13486*x13495))+((x13490*x13495))+((cj3*x13492))+(((-1.0)*cj3*x13498))+((cj1*cj2)));
evalcond[8]=(x13485+(((-1.0)*sj3*x13498))+(((-1.0)*cj3*x13490*x13497))+(((-1.0)*cj3*x13486*x13497))+((sj3*x13492))+(((-1.0)*x13494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13500=cj5*cj5;
IkReal x13501=((1.0)*sj3);
IkReal x13502=(cj3*r20);
IkReal x13503=(cj5*r10);
IkReal x13504=(cj3*r22);
IkReal x13505=(r10*r20);
IkReal x13506=(cj3*r21);
IkReal x13507=((1.0)*r11);
IkReal x13508=(r11*x13500);
IkReal x13509=(cj5*r11*sj5);
CheckValue<IkReal> x13510 = IKatan2WithCheck(IkReal((((x13503*x13504))+(((-1.0)*sj5*x13504*x13507)))),IkReal((((sj5*x13502*x13503))+(((-1.0)*cj5*sj5*x13506*x13507))+(((-1.0)*x13502*x13507))+((r10*x13500*x13506))+((x13502*x13508)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13510.valid){
continue;
}
CheckValue<IkReal> x13511=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13501*x13509))+(((-1.0)*r12*r22*x13501))+(((-1.0)*x13501*x13505))+(((-1.0)*r21*x13501*x13508))+((sj3*x13500*x13505))+(((-1.0)*r21*sj5*x13501*x13503)))),-1);
if(!x13511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13510.value)+(((1.5707963267949)*(x13511.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13512=IKsin(j4);
IkReal x13513=IKcos(j4);
IkReal x13514=(cj1*sj2);
IkReal x13515=(r20*sj5);
IkReal x13516=((1.0)*sj5);
IkReal x13517=(cj3*r01);
IkReal x13518=(cj3*r10);
IkReal x13519=(sj1*sj2);
IkReal x13520=(cj5*r01);
IkReal x13521=(cj5*r11);
IkReal x13522=((1.0)*cj2);
IkReal x13523=(cj5*r21);
IkReal x13524=(cj3*cj5);
IkReal x13525=(cj5*sj3);
IkReal x13526=(sj1*x13522);
IkReal x13527=(sj3*x13513);
IkReal x13528=((1.0)*x13512);
IkReal x13529=(sj3*x13512);
IkReal x13530=(cj3*x13513);
evalcond[0]=((((-1.0)*x13515*x13528))+((r22*x13513))+(((-1.0)*x13523*x13528)));
evalcond[1]=(((r02*x13513))+(((-1.0)*x13520*x13528))+(((-1.0)*r00*x13512*x13516)));
evalcond[2]=((-1.0)+(((-1.0)*x13521*x13528))+(((-1.0)*r10*x13512*x13516))+((r12*x13513)));
evalcond[3]=(((cj5*x13518))+((x13521*x13527))+(((-1.0)*cj3*r11*x13516))+((r10*sj5*x13527))+((r12*x13529)));
evalcond[4]=((((-1.0)*cj3*r12*x13528))+(((-1.0)*x13521*x13530))+(((-1.0)*x13513*x13516*x13518))+(((-1.0)*r11*sj3*x13516))+((r10*x13525)));
evalcond[5]=(x13519+((r20*x13524))+((r22*x13529))+((x13523*x13527))+((x13515*x13527))+(((-1.0)*cj3*r21*x13516))+((cj1*cj2)));
evalcond[6]=(x13514+((x13520*x13527))+((r02*x13529))+((r00*sj5*x13527))+(((-1.0)*x13516*x13517))+(((-1.0)*x13526))+((r00*x13524)));
evalcond[7]=(x13514+((r20*x13525))+(((-1.0)*x13515*x13530))+(((-1.0)*x13523*x13530))+(((-1.0)*r21*sj3*x13516))+(((-1.0)*x13526))+(((-1.0)*cj3*r22*x13528)));
evalcond[8]=((((-1.0)*r00*x13516*x13530))+(((-1.0)*cj5*x13513*x13517))+(((-1.0)*cj3*r02*x13528))+(((-1.0)*x13519))+(((-1.0)*cj1*x13522))+(((-1.0)*r01*sj3*x13516))+((r00*x13525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13531 = IKatan2WithCheck(IkReal(r02),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13531.valid){
continue;
}
CheckValue<IkReal> x13532=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x13532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13531.value)+(((1.5707963267949)*(x13532.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13533=IKsin(j4);
IkReal x13534=IKcos(j4);
IkReal x13535=(cj1*sj2);
IkReal x13536=(r20*sj5);
IkReal x13537=((1.0)*sj5);
IkReal x13538=(cj3*r01);
IkReal x13539=(cj3*r10);
IkReal x13540=(sj1*sj2);
IkReal x13541=(cj5*r01);
IkReal x13542=(cj5*r11);
IkReal x13543=((1.0)*cj2);
IkReal x13544=(cj5*r21);
IkReal x13545=(cj3*cj5);
IkReal x13546=(cj5*sj3);
IkReal x13547=(sj1*x13543);
IkReal x13548=(sj3*x13534);
IkReal x13549=((1.0)*x13533);
IkReal x13550=(sj3*x13533);
IkReal x13551=(cj3*x13534);
evalcond[0]=((((-1.0)*x13544*x13549))+(((-1.0)*x13536*x13549))+((r22*x13534)));
evalcond[1]=((((-1.0)*r00*x13533*x13537))+((r02*x13534))+(((-1.0)*x13541*x13549)));
evalcond[2]=((-1.0)+((r12*x13534))+(((-1.0)*x13542*x13549))+(((-1.0)*r10*x13533*x13537)));
evalcond[3]=(((r12*x13550))+((cj5*x13539))+((r10*sj5*x13548))+((x13542*x13548))+(((-1.0)*cj3*r11*x13537)));
evalcond[4]=((((-1.0)*x13534*x13537*x13539))+((r10*x13546))+(((-1.0)*cj3*r12*x13549))+(((-1.0)*r11*sj3*x13537))+(((-1.0)*x13542*x13551)));
evalcond[5]=(x13540+((r22*x13550))+(((-1.0)*cj3*r21*x13537))+((x13544*x13548))+((r20*x13545))+((cj1*cj2))+((x13536*x13548)));
evalcond[6]=(x13535+(((-1.0)*x13547))+((r00*x13545))+(((-1.0)*x13537*x13538))+((x13541*x13548))+((r00*sj5*x13548))+((r02*x13550)));
evalcond[7]=((((-1.0)*x13536*x13551))+x13535+(((-1.0)*x13547))+(((-1.0)*x13544*x13551))+(((-1.0)*r21*sj3*x13537))+((r20*x13546))+(((-1.0)*cj3*r22*x13549)));
evalcond[8]=((((-1.0)*cj3*r02*x13549))+(((-1.0)*r00*x13537*x13551))+((r00*x13546))+(((-1.0)*r01*sj3*x13537))+(((-1.0)*cj1*x13543))+(((-1.0)*x13540))+(((-1.0)*cj5*x13534*x13538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13552 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r21))+((r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13552.valid){
continue;
}
CheckValue<IkReal> x13553=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x13553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13552.value)+(((1.5707963267949)*(x13553.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13554=IKsin(j4);
IkReal x13555=IKcos(j4);
IkReal x13556=(cj1*sj2);
IkReal x13557=(r20*sj5);
IkReal x13558=((1.0)*sj5);
IkReal x13559=(cj3*r01);
IkReal x13560=(cj3*r10);
IkReal x13561=(sj1*sj2);
IkReal x13562=(cj5*r01);
IkReal x13563=(cj5*r11);
IkReal x13564=((1.0)*cj2);
IkReal x13565=(cj5*r21);
IkReal x13566=(cj3*cj5);
IkReal x13567=(cj5*sj3);
IkReal x13568=(sj1*x13564);
IkReal x13569=(sj3*x13555);
IkReal x13570=((1.0)*x13554);
IkReal x13571=(sj3*x13554);
IkReal x13572=(cj3*x13555);
evalcond[0]=(((r22*x13555))+(((-1.0)*x13557*x13570))+(((-1.0)*x13565*x13570)));
evalcond[1]=((((-1.0)*x13562*x13570))+(((-1.0)*r00*x13554*x13558))+((r02*x13555)));
evalcond[2]=((-1.0)+(((-1.0)*x13563*x13570))+((r12*x13555))+(((-1.0)*r10*x13554*x13558)));
evalcond[3]=(((r12*x13571))+((r10*sj5*x13569))+((x13563*x13569))+((cj5*x13560))+(((-1.0)*cj3*r11*x13558)));
evalcond[4]=(((r10*x13567))+(((-1.0)*r11*sj3*x13558))+(((-1.0)*x13555*x13558*x13560))+(((-1.0)*x13563*x13572))+(((-1.0)*cj3*r12*x13570)));
evalcond[5]=(((x13557*x13569))+x13561+((x13565*x13569))+((r20*x13566))+((cj1*cj2))+((r22*x13571))+(((-1.0)*cj3*r21*x13558)));
evalcond[6]=(x13556+((r00*x13566))+((r00*sj5*x13569))+((x13562*x13569))+(((-1.0)*x13558*x13559))+((r02*x13571))+(((-1.0)*x13568)));
evalcond[7]=(x13556+(((-1.0)*x13565*x13572))+(((-1.0)*x13557*x13572))+((r20*x13567))+(((-1.0)*r21*sj3*x13558))+(((-1.0)*x13568))+(((-1.0)*cj3*r22*x13570)));
evalcond[8]=(((r00*x13567))+(((-1.0)*r01*sj3*x13558))+(((-1.0)*r00*x13558*x13572))+(((-1.0)*cj1*x13564))+(((-1.0)*cj5*x13555*x13559))+(((-1.0)*x13561))+(((-1.0)*cj3*r02*x13570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13573=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13573);
rxp0_2=(py*r00);
rxp1_0=(r21*x13573);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13574=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13574);
rxp0_2=(py*r00);
rxp1_0=(r21*x13574);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[1]=(((r20*sj3*sj5))+((cj5*r21*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13575=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13575);
rxp0_2=(py*r00);
rxp1_0=(r21*x13575);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13576=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13576);
rxp0_2=(py*r00);
rxp1_0=(r21*x13576);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13577=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13577);
rxp0_2=(py*r00);
rxp1_0=(r21*x13577);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13578=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13578);
rxp0_2=(py*r00);
rxp1_0=(r21*x13578);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13581=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x13581.valid){
continue;
}
IkReal x13579=x13581.value;
IkReal x13580=((1.0)*sj0*x13579);
cj4array[0]=((((-1.0)*cj1*cj2*x13580))+(((-1.0)*sj1*sj2*x13580)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13582=IKsin(j4);
IkReal x13583=IKcos(j4);
IkReal x13584=(r20*sj5);
IkReal x13585=((1.0)*cj5*r21);
IkReal x13586=((1.0)*x13582);
evalcond[0]=((-1.0)*r12*x13582);
evalcond[1]=(sj0+((r12*x13583)));
evalcond[2]=((((-1.0)*x13584*x13586))+(((-1.0)*x13582*x13585)));
evalcond[3]=((((-1.0)*r00*sj5*x13586))+(((-1.0)*cj5*r01*x13586)));
evalcond[4]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x13583*x13584))+(((-1.0)*x13583*x13585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13588=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x13588.valid){
continue;
}
IkReal x13587=x13588.value;
cj4array[0]=(((cj2*sj1*x13587))+(((-1.0)*cj1*sj2*x13587)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13589=IKsin(j4);
IkReal x13590=IKcos(j4);
IkReal x13591=((1.0)*cj5);
IkReal x13592=((1.0)*r00*sj5);
evalcond[0]=((-1.0)*r12*x13589);
evalcond[1]=(sj0+((r12*x13590)));
evalcond[2]=((((-1.0)*r20*sj5*x13589))+(((-1.0)*r21*x13589*x13591)));
evalcond[3]=((((-1.0)*r01*x13589*x13591))+(((-1.0)*x13589*x13592)));
evalcond[4]=(((cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r01*x13590*x13591))+(((-1.0)*x13590*x13592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13593=IKPowWithIntegerCheck(r12,-1);
if(!x13593.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x13593.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13594=IKsin(j4);
IkReal x13595=IKcos(j4);
IkReal x13596=(r00*sj5);
IkReal x13597=(r20*sj5);
IkReal x13598=((1.0)*x13594);
IkReal x13599=((1.0)*x13595);
IkReal x13600=(cj5*x13599);
evalcond[0]=((-1.0)*r12*x13594);
evalcond[1]=((((-1.0)*x13597*x13598))+(((-1.0)*cj5*r21*x13598)));
evalcond[2]=((((-1.0)*x13596*x13598))+(((-1.0)*cj5*r01*x13598)));
evalcond[3]=((((-1.0)*r21*x13600))+(((-1.0)*x13597*x13599))+((cj1*sj2))+(((-1.0)*cj2*sj1)));
evalcond[4]=((((-1.0)*x13596*x13599))+((cj1*cj2*sj0))+(((-1.0)*r01*x13600))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13601=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13601);
rxp0_2=(py*r00);
rxp1_0=(r21*x13601);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13602=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13602);
rxp0_2=(py*r00);
rxp1_0=(r21*x13602);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13603=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13603);
rxp0_2=(py*r00);
rxp1_0=(r21*x13603);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((r00*sj5))+((cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13606=IKPowWithIntegerCheck((((r00*sj5))+((cj5*r01))),-1);
if(!x13606.valid){
continue;
}
IkReal x13604=x13606.value;
IkReal x13605=((1.0)*sj0*x13604);
cj4array[0]=((((-1.0)*cj1*cj2*x13605))+(((-1.0)*sj1*sj2*x13605)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13607=IKsin(j4);
IkReal x13608=IKcos(j4);
IkReal x13609=(cj5*r21);
IkReal x13610=(r20*sj5);
IkReal x13611=((1.0)*x13607);
evalcond[0]=(r12*x13607);
evalcond[1]=(sj0+((r12*x13608)));
evalcond[2]=((((-1.0)*x13609*x13611))+(((-1.0)*x13610*x13611)));
evalcond[3]=((((-1.0)*cj5*r01*x13611))+(((-1.0)*r00*sj5*x13611)));
evalcond[4]=(((x13608*x13610))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((x13608*x13609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13613=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x13613.valid){
continue;
}
IkReal x13612=x13613.value;
cj4array[0]=(((cj2*sj1*x13612))+(((-1.0)*cj1*sj2*x13612)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13614=IKsin(j4);
IkReal x13615=IKcos(j4);
IkReal x13616=(r00*sj5);
IkReal x13617=(cj5*r01);
IkReal x13618=((1.0)*x13614);
evalcond[0]=(r12*x13614);
evalcond[1]=(sj0+((r12*x13615)));
evalcond[2]=((((-1.0)*r20*sj5*x13618))+(((-1.0)*cj5*r21*x13618)));
evalcond[3]=((((-1.0)*x13616*x13618))+(((-1.0)*x13617*x13618)));
evalcond[4]=(((cj1*cj2*sj0))+((x13615*x13616))+((x13615*x13617))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13619=IKPowWithIntegerCheck(r12,-1);
if(!x13619.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x13619.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13620=IKsin(j4);
IkReal x13621=IKcos(j4);
IkReal x13622=(cj5*r21);
IkReal x13623=(r00*sj5);
IkReal x13624=(cj5*r01);
IkReal x13625=(r20*sj5);
IkReal x13626=((1.0)*x13620);
evalcond[0]=(r12*x13620);
evalcond[1]=((((-1.0)*x13622*x13626))+(((-1.0)*x13625*x13626)));
evalcond[2]=((((-1.0)*x13623*x13626))+(((-1.0)*x13624*x13626)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*cj2*sj1))+((x13621*x13622))+((x13621*x13625)));
evalcond[4]=(((cj1*cj2*sj0))+((x13621*x13624))+((x13621*x13623))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13627=((-1.0)*r00);
CheckValue<IkReal> x13628 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13627),IKFAST_ATAN2_MAGTHRESH);
if(!x13628.valid){
continue;
}
IkReal gconst66=((-1.0)*(x13628.value));
IkReal gconst67=r01;
IkReal gconst68=x13627;
CheckValue<IkReal> x13629 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13629.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13629.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13630=((-1.0)*r00);
IkReal x13631=((-1.0)*py);
CheckValue<IkReal> x13633 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13630),IKFAST_ATAN2_MAGTHRESH);
if(!x13633.valid){
continue;
}
IkReal x13632=((-1.0)*(x13633.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13631);
rxp0_2=(py*r00);
rxp1_0=(r21*x13631);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x13632;
IkReal gconst66=x13632;
IkReal gconst67=r01;
IkReal gconst68=x13630;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13634=((-1.0)*r00);
IkReal x13635=((-1.0)*py);
CheckValue<IkReal> x13637 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13634),IKFAST_ATAN2_MAGTHRESH);
if(!x13637.valid){
continue;
}
IkReal x13636=((-1.0)*(x13637.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13635);
rxp0_2=(py*r00);
rxp1_0=(r21*x13635);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x13636;
IkReal gconst66=x13636;
IkReal gconst67=r01;
IkReal gconst68=x13634;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13638=((-1.0)*r00);
IkReal x13639=((-1.0)*py);
CheckValue<IkReal> x13641 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13638),IKFAST_ATAN2_MAGTHRESH);
if(!x13641.valid){
continue;
}
IkReal x13640=((-1.0)*(x13641.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13639);
rxp0_2=(py*r00);
rxp1_0=(r21*x13639);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x13640;
IkReal gconst66=x13640;
IkReal gconst67=r01;
IkReal gconst68=x13638;
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r00*r21*sj3))+((r01*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13642=((1.0)*cj1);
CheckValue<IkReal> x13643=IKPowWithIntegerCheck(r12,-1);
if(!x13643.valid){
continue;
}
CheckValue<IkReal> x13644=IKPowWithIntegerCheck(sj3,-1);
if(!x13644.valid){
continue;
}
CheckValue<IkReal> x13645=IKPowWithIntegerCheck((((gconst67*r20*sj3))+((gconst68*r21*sj3))),-1);
if(!x13645.valid){
continue;
}
if( IKabs(((x13643.value)*(x13644.value)*(((((-1.0)*cj0*sj2*x13642))+((cj0*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13645.value)*((((cj3*gconst67*r21))+(((-1.0)*sj1*sj2))+(((-1.0)*cj2*x13642))+(((-1.0)*cj3*gconst68*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13643.value)*(x13644.value)*(((((-1.0)*cj0*sj2*x13642))+((cj0*cj2*sj1))))))+IKsqr(((x13645.value)*((((cj3*gconst67*r21))+(((-1.0)*sj1*sj2))+(((-1.0)*cj2*x13642))+(((-1.0)*cj3*gconst68*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13643.value)*(x13644.value)*(((((-1.0)*cj0*sj2*x13642))+((cj0*cj2*sj1))))), ((x13645.value)*((((cj3*gconst67*r21))+(((-1.0)*sj1*sj2))+(((-1.0)*cj2*x13642))+(((-1.0)*cj3*gconst68*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13646=IKsin(j4);
IkReal x13647=IKcos(j4);
IkReal x13648=((1.0)*cj2);
IkReal x13649=(cj0*cj1);
IkReal x13650=(cj2*sj0);
IkReal x13651=((1.0)*gconst67);
IkReal x13652=(sj1*sj2);
IkReal x13653=((1.0)*gconst68);
IkReal x13654=(r00*sj3);
IkReal x13655=(cj3*r01);
IkReal x13656=(gconst68*sj3);
IkReal x13657=(cj3*r00);
IkReal x13658=(cj1*sj2);
IkReal x13659=(cj3*r20);
IkReal x13660=(r21*x13647);
IkReal x13661=(gconst67*x13647);
IkReal x13662=(r12*x13646);
evalcond[0]=(sj0+((r12*x13647)));
evalcond[1]=((((-1.0)*r20*x13646*x13651))+(((-1.0)*r21*x13646*x13653)));
evalcond[2]=((((-1.0)*r00*x13646*x13651))+cj0+(((-1.0)*r01*x13646*x13653)));
evalcond[3]=(((sj2*x13649))+((sj3*x13662))+(((-1.0)*cj0*sj1*x13648)));
evalcond[4]=((((-1.0)*x13648*x13649))+(((-1.0)*cj0*x13652))+(((-1.0)*cj3*x13662)));
evalcond[5]=(x13652+((r20*sj3*x13661))+((x13656*x13660))+((gconst68*x13659))+((cj1*cj2))+(((-1.0)*cj3*r21*x13651)));
evalcond[6]=(((r20*x13656))+x13658+(((-1.0)*sj1*x13648))+(((-1.0)*x13647*x13651*x13659))+(((-1.0)*cj3*x13653*x13660))+(((-1.0)*r21*sj3*x13651)));
evalcond[7]=(((x13654*x13661))+((sj1*x13650))+((gconst68*x13657))+(((-1.0)*x13651*x13655))+((r01*x13647*x13656))+(((-1.0)*sj0*x13658)));
evalcond[8]=((((-1.0)*x13647*x13651*x13657))+(((-1.0)*x13647*x13653*x13655))+((sj0*x13652))+((gconst68*x13654))+(((-1.0)*r01*sj3*x13651))+((cj1*x13650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13665=IKPowWithIntegerCheck(r12,-1);
if(!x13665.valid){
continue;
}
IkReal x13663=x13665.value;
IkReal x13664=((1.0)*cj0);
CheckValue<IkReal> x13666=IKPowWithIntegerCheck(cj3,-1);
if(!x13666.valid){
continue;
}
if( IKabs((x13663*(x13666.value)*(((((-1.0)*sj1*sj2*x13664))+(((-1.0)*cj1*cj2*x13664)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x13663)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x13663*(x13666.value)*(((((-1.0)*sj1*sj2*x13664))+(((-1.0)*cj1*cj2*x13664))))))+IKsqr(((-1.0)*sj0*x13663))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x13663*(x13666.value)*(((((-1.0)*sj1*sj2*x13664))+(((-1.0)*cj1*cj2*x13664))))), ((-1.0)*sj0*x13663));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13667=IKsin(j4);
IkReal x13668=IKcos(j4);
IkReal x13669=((1.0)*cj2);
IkReal x13670=(cj0*cj1);
IkReal x13671=(cj2*sj0);
IkReal x13672=((1.0)*gconst67);
IkReal x13673=(sj1*sj2);
IkReal x13674=((1.0)*gconst68);
IkReal x13675=(r00*sj3);
IkReal x13676=(cj3*r01);
IkReal x13677=(gconst68*sj3);
IkReal x13678=(cj3*r00);
IkReal x13679=(cj1*sj2);
IkReal x13680=(cj3*r20);
IkReal x13681=(r21*x13668);
IkReal x13682=(gconst67*x13668);
IkReal x13683=(r12*x13667);
evalcond[0]=(sj0+((r12*x13668)));
evalcond[1]=((((-1.0)*r21*x13667*x13674))+(((-1.0)*r20*x13667*x13672)));
evalcond[2]=(cj0+(((-1.0)*r01*x13667*x13674))+(((-1.0)*r00*x13667*x13672)));
evalcond[3]=(((sj2*x13670))+((sj3*x13683))+(((-1.0)*cj0*sj1*x13669)));
evalcond[4]=((((-1.0)*x13669*x13670))+(((-1.0)*cj3*x13683))+(((-1.0)*cj0*x13673)));
evalcond[5]=((((-1.0)*cj3*r21*x13672))+x13673+((gconst68*x13680))+((cj1*cj2))+((x13677*x13681))+((r20*sj3*x13682)));
evalcond[6]=(x13679+(((-1.0)*sj1*x13669))+(((-1.0)*r21*sj3*x13672))+(((-1.0)*x13668*x13672*x13680))+((r20*x13677))+(((-1.0)*cj3*x13674*x13681)));
evalcond[7]=(((gconst68*x13678))+(((-1.0)*x13672*x13676))+(((-1.0)*sj0*x13679))+((x13675*x13682))+((sj1*x13671))+((r01*x13668*x13677)));
evalcond[8]=(((gconst68*x13675))+(((-1.0)*r01*sj3*x13672))+((cj1*x13671))+(((-1.0)*x13668*x13674*x13676))+((sj0*x13673))+(((-1.0)*x13668*x13672*x13678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13685=IKPowWithIntegerCheck(r12,-1);
if(!x13685.valid){
continue;
}
IkReal x13684=x13685.value;
CheckValue<IkReal> x13686=IKPowWithIntegerCheck(sj3,-1);
if(!x13686.valid){
continue;
}
if( IKabs((x13684*(x13686.value)*(((((-1.0)*cj0*cj1*sj2))+((cj0*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x13684)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x13684*(x13686.value)*(((((-1.0)*cj0*cj1*sj2))+((cj0*cj2*sj1))))))+IKsqr(((-1.0)*sj0*x13684))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x13684*(x13686.value)*(((((-1.0)*cj0*cj1*sj2))+((cj0*cj2*sj1))))), ((-1.0)*sj0*x13684));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13687=IKsin(j4);
IkReal x13688=IKcos(j4);
IkReal x13689=((1.0)*cj2);
IkReal x13690=(cj0*cj1);
IkReal x13691=(cj2*sj0);
IkReal x13692=((1.0)*gconst67);
IkReal x13693=(sj1*sj2);
IkReal x13694=((1.0)*gconst68);
IkReal x13695=(r00*sj3);
IkReal x13696=(cj3*r01);
IkReal x13697=(gconst68*sj3);
IkReal x13698=(cj3*r00);
IkReal x13699=(cj1*sj2);
IkReal x13700=(cj3*r20);
IkReal x13701=(r21*x13688);
IkReal x13702=(gconst67*x13688);
IkReal x13703=(r12*x13687);
evalcond[0]=(sj0+((r12*x13688)));
evalcond[1]=((((-1.0)*r21*x13687*x13694))+(((-1.0)*r20*x13687*x13692)));
evalcond[2]=((((-1.0)*r01*x13687*x13694))+cj0+(((-1.0)*r00*x13687*x13692)));
evalcond[3]=((((-1.0)*cj0*sj1*x13689))+((sj3*x13703))+((sj2*x13690)));
evalcond[4]=((((-1.0)*x13689*x13690))+(((-1.0)*cj0*x13693))+(((-1.0)*cj3*x13703)));
evalcond[5]=(((r20*sj3*x13702))+x13693+((x13697*x13701))+((gconst68*x13700))+((cj1*cj2))+(((-1.0)*cj3*r21*x13692)));
evalcond[6]=((((-1.0)*sj1*x13689))+x13699+(((-1.0)*r21*sj3*x13692))+(((-1.0)*cj3*x13694*x13701))+((r20*x13697))+(((-1.0)*x13688*x13692*x13700)));
evalcond[7]=(((r01*x13688*x13697))+((sj1*x13691))+((x13695*x13702))+(((-1.0)*sj0*x13699))+(((-1.0)*x13692*x13696))+((gconst68*x13698)));
evalcond[8]=((((-1.0)*r01*sj3*x13692))+((sj0*x13693))+(((-1.0)*x13688*x13694*x13696))+((cj1*x13691))+((gconst68*x13695))+(((-1.0)*x13688*x13692*x13698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13704=((-1.0)*r01);
CheckValue<IkReal> x13705 = IKatan2WithCheck(IkReal(x13704),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13705.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x13705.value))));
IkReal gconst70=x13704;
IkReal gconst71=((1.0)*r00);
CheckValue<IkReal> x13706 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13706.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13706.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13707=((-1.0)*r01);
IkReal x13708=((-1.0)*py);
CheckValue<IkReal> x13710 = IKatan2WithCheck(IkReal(x13707),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13710.valid){
continue;
}
IkReal x13709=((1.0)*(x13710.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13708);
rxp0_2=(py*r00);
rxp1_0=(r21*x13708);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x13709)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x13709)));
IkReal gconst70=x13707;
IkReal gconst71=((1.0)*r00);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13711=((-1.0)*r01);
IkReal x13712=((-1.0)*py);
CheckValue<IkReal> x13714 = IKatan2WithCheck(IkReal(x13711),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13714.valid){
continue;
}
IkReal x13713=((1.0)*(x13714.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13712);
rxp0_2=(py*r00);
rxp1_0=(r21*x13712);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x13713)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x13713)));
IkReal gconst70=x13711;
IkReal gconst71=((1.0)*r00);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13715=((-1.0)*r01);
IkReal x13716=((-1.0)*py);
CheckValue<IkReal> x13718 = IKatan2WithCheck(IkReal(x13715),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13718.valid){
continue;
}
IkReal x13717=((1.0)*(x13718.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13716);
rxp0_2=(py*r00);
rxp1_0=(r21*x13716);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x13717)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x13717)));
IkReal gconst70=x13715;
IkReal gconst71=((1.0)*r00);
IkReal x13719=((1.0)*sj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((r00*r21*x13719))+(((-1.0)*r01*r20*x13719)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13720=((1.0)*cj1);
CheckValue<IkReal> x13721=IKPowWithIntegerCheck(r12,-1);
if(!x13721.valid){
continue;
}
CheckValue<IkReal> x13722=IKPowWithIntegerCheck(sj3,-1);
if(!x13722.valid){
continue;
}
CheckValue<IkReal> x13723=IKPowWithIntegerCheck((((gconst71*r21*sj3))+((gconst70*r20*sj3))),-1);
if(!x13723.valid){
continue;
}
if( IKabs(((x13721.value)*(x13722.value)*(((((-1.0)*cj0*sj2*x13720))+((cj0*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13723.value)*(((((-1.0)*cj2*x13720))+(((-1.0)*sj1*sj2))+((cj3*gconst70*r21))+(((-1.0)*cj3*gconst71*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13721.value)*(x13722.value)*(((((-1.0)*cj0*sj2*x13720))+((cj0*cj2*sj1))))))+IKsqr(((x13723.value)*(((((-1.0)*cj2*x13720))+(((-1.0)*sj1*sj2))+((cj3*gconst70*r21))+(((-1.0)*cj3*gconst71*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13721.value)*(x13722.value)*(((((-1.0)*cj0*sj2*x13720))+((cj0*cj2*sj1))))), ((x13723.value)*(((((-1.0)*cj2*x13720))+(((-1.0)*sj1*sj2))+((cj3*gconst70*r21))+(((-1.0)*cj3*gconst71*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13724=IKsin(j4);
IkReal x13725=IKcos(j4);
IkReal x13726=((1.0)*cj2);
IkReal x13727=(cj0*cj1);
IkReal x13728=(cj2*sj0);
IkReal x13729=(sj1*sj2);
IkReal x13730=(gconst70*sj3);
IkReal x13731=((1.0)*r21);
IkReal x13732=((1.0)*gconst70);
IkReal x13733=(gconst71*r00);
IkReal x13734=(gconst71*sj3);
IkReal x13735=(cj1*sj2);
IkReal x13736=((1.0)*gconst71*r01);
IkReal x13737=(cj3*x13725);
IkReal x13738=(r12*x13724);
evalcond[0]=(sj0+((r12*x13725)));
evalcond[1]=((((-1.0)*gconst71*x13724*x13731))+(((-1.0)*r20*x13724*x13732)));
evalcond[2]=((((-1.0)*x13724*x13736))+cj0+(((-1.0)*r00*x13724*x13732)));
evalcond[3]=(((sj2*x13727))+((sj3*x13738))+(((-1.0)*cj0*sj1*x13726)));
evalcond[4]=((((-1.0)*cj0*x13729))+(((-1.0)*x13726*x13727))+(((-1.0)*cj3*x13738)));
evalcond[5]=((((-1.0)*cj3*gconst70*x13731))+x13729+((r20*x13725*x13730))+((r21*x13725*x13734))+((cj1*cj2))+((cj3*gconst71*r20)));
evalcond[6]=(x13735+(((-1.0)*r20*x13732*x13737))+(((-1.0)*x13730*x13731))+(((-1.0)*sj1*x13726))+((r20*x13734))+(((-1.0)*gconst71*x13731*x13737)));
evalcond[7]=(((sj1*x13728))+(((-1.0)*cj3*r01*x13732))+((r00*x13725*x13730))+(((-1.0)*sj0*x13735))+((r01*x13725*x13734))+((cj3*x13733)));
evalcond[8]=((((-1.0)*r01*x13730))+((sj0*x13729))+(((-1.0)*x13736*x13737))+(((-1.0)*r00*x13732*x13737))+((sj3*x13733))+((cj1*x13728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13741=IKPowWithIntegerCheck(r12,-1);
if(!x13741.valid){
continue;
}
IkReal x13739=x13741.value;
IkReal x13740=((1.0)*cj0);
CheckValue<IkReal> x13742=IKPowWithIntegerCheck(cj3,-1);
if(!x13742.valid){
continue;
}
if( IKabs((x13739*(x13742.value)*(((((-1.0)*sj1*sj2*x13740))+(((-1.0)*cj1*cj2*x13740)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x13739)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x13739*(x13742.value)*(((((-1.0)*sj1*sj2*x13740))+(((-1.0)*cj1*cj2*x13740))))))+IKsqr(((-1.0)*sj0*x13739))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x13739*(x13742.value)*(((((-1.0)*sj1*sj2*x13740))+(((-1.0)*cj1*cj2*x13740))))), ((-1.0)*sj0*x13739));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13743=IKsin(j4);
IkReal x13744=IKcos(j4);
IkReal x13745=((1.0)*cj2);
IkReal x13746=(cj0*cj1);
IkReal x13747=(cj2*sj0);
IkReal x13748=(sj1*sj2);
IkReal x13749=(gconst70*sj3);
IkReal x13750=((1.0)*r21);
IkReal x13751=((1.0)*gconst70);
IkReal x13752=(gconst71*r00);
IkReal x13753=(gconst71*sj3);
IkReal x13754=(cj1*sj2);
IkReal x13755=((1.0)*gconst71*r01);
IkReal x13756=(cj3*x13744);
IkReal x13757=(r12*x13743);
evalcond[0]=(sj0+((r12*x13744)));
evalcond[1]=((((-1.0)*gconst71*x13743*x13750))+(((-1.0)*r20*x13743*x13751)));
evalcond[2]=(cj0+(((-1.0)*x13743*x13755))+(((-1.0)*r00*x13743*x13751)));
evalcond[3]=(((sj3*x13757))+(((-1.0)*cj0*sj1*x13745))+((sj2*x13746)));
evalcond[4]=((((-1.0)*cj0*x13748))+(((-1.0)*x13745*x13746))+(((-1.0)*cj3*x13757)));
evalcond[5]=(x13748+(((-1.0)*cj3*gconst70*x13750))+((r21*x13744*x13753))+((cj1*cj2))+((r20*x13744*x13749))+((cj3*gconst71*r20)));
evalcond[6]=(x13754+(((-1.0)*sj1*x13745))+((r20*x13753))+(((-1.0)*gconst71*x13750*x13756))+(((-1.0)*r20*x13751*x13756))+(((-1.0)*x13749*x13750)));
evalcond[7]=((((-1.0)*cj3*r01*x13751))+((r00*x13744*x13749))+((sj1*x13747))+((r01*x13744*x13753))+((cj3*x13752))+(((-1.0)*sj0*x13754)));
evalcond[8]=((((-1.0)*x13755*x13756))+((sj3*x13752))+((sj0*x13748))+((cj1*x13747))+(((-1.0)*r01*x13749))+(((-1.0)*r00*x13751*x13756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13759=IKPowWithIntegerCheck(r12,-1);
if(!x13759.valid){
continue;
}
IkReal x13758=x13759.value;
CheckValue<IkReal> x13760=IKPowWithIntegerCheck(sj3,-1);
if(!x13760.valid){
continue;
}
if( IKabs((x13758*(x13760.value)*(((((-1.0)*cj0*cj1*sj2))+((cj0*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x13758)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x13758*(x13760.value)*(((((-1.0)*cj0*cj1*sj2))+((cj0*cj2*sj1))))))+IKsqr(((-1.0)*sj0*x13758))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x13758*(x13760.value)*(((((-1.0)*cj0*cj1*sj2))+((cj0*cj2*sj1))))), ((-1.0)*sj0*x13758));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13761=IKsin(j4);
IkReal x13762=IKcos(j4);
IkReal x13763=((1.0)*cj2);
IkReal x13764=(cj0*cj1);
IkReal x13765=(cj2*sj0);
IkReal x13766=(sj1*sj2);
IkReal x13767=(gconst70*sj3);
IkReal x13768=((1.0)*r21);
IkReal x13769=((1.0)*gconst70);
IkReal x13770=(gconst71*r00);
IkReal x13771=(gconst71*sj3);
IkReal x13772=(cj1*sj2);
IkReal x13773=((1.0)*gconst71*r01);
IkReal x13774=(cj3*x13762);
IkReal x13775=(r12*x13761);
evalcond[0]=(sj0+((r12*x13762)));
evalcond[1]=((((-1.0)*gconst71*x13761*x13768))+(((-1.0)*r20*x13761*x13769)));
evalcond[2]=((((-1.0)*r00*x13761*x13769))+cj0+(((-1.0)*x13761*x13773)));
evalcond[3]=((((-1.0)*cj0*sj1*x13763))+((sj2*x13764))+((sj3*x13775)));
evalcond[4]=((((-1.0)*cj0*x13766))+(((-1.0)*x13763*x13764))+(((-1.0)*cj3*x13775)));
evalcond[5]=(x13766+(((-1.0)*cj3*gconst70*x13768))+((r21*x13762*x13771))+((r20*x13762*x13767))+((cj1*cj2))+((cj3*gconst71*r20)));
evalcond[6]=(x13772+(((-1.0)*sj1*x13763))+((r20*x13771))+(((-1.0)*r20*x13769*x13774))+(((-1.0)*gconst71*x13768*x13774))+(((-1.0)*x13767*x13768)));
evalcond[7]=(((r01*x13762*x13771))+((r00*x13762*x13767))+((cj3*x13770))+(((-1.0)*sj0*x13772))+(((-1.0)*cj3*r01*x13769))+((sj1*x13765)));
evalcond[8]=((((-1.0)*r00*x13769*x13774))+(((-1.0)*r01*x13767))+(((-1.0)*x13773*x13774))+((cj1*x13765))+((sj3*x13770))+((sj0*x13766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13777=IKPowWithIntegerCheck(r12,-1);
if(!x13777.valid){
continue;
}
IkReal x13776=x13777.value;
CheckValue<IkReal> x13778=IKPowWithIntegerCheck(sj3,-1);
if(!x13778.valid){
continue;
}
if( IKabs((x13776*(x13778.value)*(((((-1.0)*cj0*cj1*sj2))+((cj0*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x13776)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x13776*(x13778.value)*(((((-1.0)*cj0*cj1*sj2))+((cj0*cj2*sj1))))))+IKsqr(((-1.0)*sj0*x13776))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x13776*(x13778.value)*(((((-1.0)*cj0*cj1*sj2))+((cj0*cj2*sj1))))), ((-1.0)*sj0*x13776));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13779=IKsin(j4);
IkReal x13780=IKcos(j4);
IkReal x13781=(r20*sj3);
IkReal x13782=((1.0)*sj5);
IkReal x13783=(cj3*r01);
IkReal x13784=(cj1*cj2);
IkReal x13785=((1.0)*cj0);
IkReal x13786=(cj2*sj1);
IkReal x13787=(sj1*sj2);
IkReal x13788=((1.0)*cj3);
IkReal x13789=(cj3*cj5);
IkReal x13790=(r00*sj3);
IkReal x13791=(cj1*sj2);
IkReal x13792=(sj5*x13780);
IkReal x13793=(r12*x13779);
IkReal x13794=(cj5*x13780);
IkReal x13795=((1.0)*cj5*x13779);
IkReal x13796=(sj3*x13794);
evalcond[0]=(sj0+((r12*x13780)));
evalcond[1]=((((-1.0)*r21*x13795))+(((-1.0)*r20*x13779*x13782)));
evalcond[2]=(cj0+(((-1.0)*r00*x13779*x13782))+(((-1.0)*r01*x13795)));
evalcond[3]=(((cj0*x13791))+(((-1.0)*x13785*x13786))+((sj3*x13793)));
evalcond[4]=((((-1.0)*x13784*x13785))+(((-1.0)*x13785*x13787))+(((-1.0)*x13788*x13793)));
evalcond[5]=(x13784+x13787+((r21*x13796))+(((-1.0)*cj3*r21*x13782))+((r20*x13789))+((x13781*x13792)));
evalcond[6]=(x13791+((cj5*x13781))+(((-1.0)*x13786))+(((-1.0)*r21*sj3*x13782))+(((-1.0)*cj3*r20*x13780*x13782))+(((-1.0)*r21*x13788*x13794)));
evalcond[7]=(((x13790*x13792))+((r01*x13796))+((r00*x13789))+(((-1.0)*x13782*x13783))+((sj0*x13786))+(((-1.0)*sj0*x13791)));
evalcond[8]=((((-1.0)*r01*sj3*x13782))+((cj5*x13790))+(((-1.0)*x13783*x13794))+((sj0*x13784))+((sj0*x13787))+(((-1.0)*cj3*r00*x13780*x13782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13797=((1.0)*cj5);
CheckValue<IkReal> x13798=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13797))),-1);
if(!x13798.valid){
continue;
}
CheckValue<IkReal> x13799=IKPowWithIntegerCheck((((r20*sj3*sj5))+((cj5*r21*sj3))),-1);
if(!x13799.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x13798.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13799.value)*((((cj3*r21*sj5))+(((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))+(((-1.0)*cj3*r20*x13797)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x13798.value)))+IKsqr(((x13799.value)*((((cj3*r21*sj5))+(((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))+(((-1.0)*cj3*r20*x13797))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x13798.value)), ((x13799.value)*((((cj3*r21*sj5))+(((-1.0)*sj1*sj2))+(((-1.0)*cj1*cj2))+(((-1.0)*cj3*r20*x13797))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13800=IKsin(j4);
IkReal x13801=IKcos(j4);
IkReal x13802=(r20*sj3);
IkReal x13803=((1.0)*sj5);
IkReal x13804=(cj3*r01);
IkReal x13805=(cj1*cj2);
IkReal x13806=((1.0)*cj0);
IkReal x13807=(cj2*sj1);
IkReal x13808=(sj1*sj2);
IkReal x13809=((1.0)*cj3);
IkReal x13810=(cj3*cj5);
IkReal x13811=(r00*sj3);
IkReal x13812=(cj1*sj2);
IkReal x13813=(sj5*x13801);
IkReal x13814=(r12*x13800);
IkReal x13815=(cj5*x13801);
IkReal x13816=((1.0)*cj5*x13800);
IkReal x13817=(sj3*x13815);
evalcond[0]=(((r12*x13801))+sj0);
evalcond[1]=((((-1.0)*r21*x13816))+(((-1.0)*r20*x13800*x13803)));
evalcond[2]=(cj0+(((-1.0)*r00*x13800*x13803))+(((-1.0)*r01*x13816)));
evalcond[3]=((((-1.0)*x13806*x13807))+((cj0*x13812))+((sj3*x13814)));
evalcond[4]=((((-1.0)*x13805*x13806))+(((-1.0)*x13806*x13808))+(((-1.0)*x13809*x13814)));
evalcond[5]=(x13808+x13805+((r21*x13817))+(((-1.0)*cj3*r21*x13803))+((x13802*x13813))+((r20*x13810)));
evalcond[6]=(x13812+(((-1.0)*x13807))+(((-1.0)*cj3*r20*x13801*x13803))+((cj5*x13802))+(((-1.0)*r21*sj3*x13803))+(((-1.0)*r21*x13809*x13815)));
evalcond[7]=(((x13811*x13813))+(((-1.0)*sj0*x13812))+((r00*x13810))+((r01*x13817))+((sj0*x13807))+(((-1.0)*x13803*x13804)));
evalcond[8]=(((cj5*x13811))+(((-1.0)*x13804*x13815))+(((-1.0)*cj3*r00*x13801*x13803))+(((-1.0)*r01*sj3*x13803))+((sj0*x13805))+((sj0*x13808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13818=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x13818.valid){
continue;
}
CheckValue<IkReal> x13819=IKPowWithIntegerCheck(r12,-1);
if(!x13819.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x13818.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x13819.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x13818.value)))+IKsqr(((-1.0)*sj0*(x13819.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x13818.value)), ((-1.0)*sj0*(x13819.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13820=IKsin(j4);
IkReal x13821=IKcos(j4);
IkReal x13822=(r20*sj3);
IkReal x13823=((1.0)*sj5);
IkReal x13824=(cj3*r01);
IkReal x13825=(cj1*cj2);
IkReal x13826=((1.0)*cj0);
IkReal x13827=(cj2*sj1);
IkReal x13828=(sj1*sj2);
IkReal x13829=((1.0)*cj3);
IkReal x13830=(cj3*cj5);
IkReal x13831=(r00*sj3);
IkReal x13832=(cj1*sj2);
IkReal x13833=(sj5*x13821);
IkReal x13834=(r12*x13820);
IkReal x13835=(cj5*x13821);
IkReal x13836=((1.0)*cj5*x13820);
IkReal x13837=(sj3*x13835);
evalcond[0]=(sj0+((r12*x13821)));
evalcond[1]=((((-1.0)*r20*x13820*x13823))+(((-1.0)*r21*x13836)));
evalcond[2]=((((-1.0)*r00*x13820*x13823))+cj0+(((-1.0)*r01*x13836)));
evalcond[3]=(((cj0*x13832))+((sj3*x13834))+(((-1.0)*x13826*x13827)));
evalcond[4]=((((-1.0)*x13825*x13826))+(((-1.0)*x13829*x13834))+(((-1.0)*x13826*x13828)));
evalcond[5]=(x13828+x13825+((x13822*x13833))+((r21*x13837))+(((-1.0)*cj3*r21*x13823))+((r20*x13830)));
evalcond[6]=((((-1.0)*cj3*r20*x13821*x13823))+x13832+((cj5*x13822))+(((-1.0)*r21*x13829*x13835))+(((-1.0)*x13827))+(((-1.0)*r21*sj3*x13823)));
evalcond[7]=(((sj0*x13827))+((r01*x13837))+(((-1.0)*sj0*x13832))+(((-1.0)*x13823*x13824))+((x13831*x13833))+((r00*x13830)));
evalcond[8]=(((sj0*x13828))+((sj0*x13825))+(((-1.0)*x13824*x13835))+((cj5*x13831))+(((-1.0)*r01*sj3*x13823))+(((-1.0)*cj3*r00*x13821*x13823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13838=((1.0)*sj0);
CheckValue<IkReal> x13839 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x13838))+((cj0*r12)))),IkReal(((((-1.0)*cj5*r01*x13838))+((cj0*cj5*r11))+(((-1.0)*r00*sj5*x13838))+((cj0*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13839.valid){
continue;
}
CheckValue<IkReal> x13840=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x13840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13839.value)+(((1.5707963267949)*(x13840.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13841=IKsin(j4);
IkReal x13842=IKcos(j4);
IkReal x13843=(r20*sj5);
IkReal x13844=((1.0)*sj5);
IkReal x13845=(cj3*r01);
IkReal x13846=(cj2*sj0);
IkReal x13847=(cj3*r10);
IkReal x13848=(sj1*sj2);
IkReal x13849=(cj5*r01);
IkReal x13850=(cj5*r11);
IkReal x13851=(cj5*r21);
IkReal x13852=(cj3*cj5);
IkReal x13853=(cj5*sj3);
IkReal x13854=((1.0)*cj0);
IkReal x13855=(cj1*cj2);
IkReal x13856=(cj1*sj2);
IkReal x13857=(sj3*x13842);
IkReal x13858=((1.0)*x13841);
IkReal x13859=(sj3*x13841);
IkReal x13860=(cj3*x13842);
IkReal x13861=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*x13851*x13858))+((r22*x13842))+(((-1.0)*x13843*x13858)));
evalcond[1]=(cj0+(((-1.0)*r00*x13841*x13844))+((r02*x13842))+(((-1.0)*x13849*x13858)));
evalcond[2]=(sj0+((r12*x13842))+(((-1.0)*x13850*x13858))+(((-1.0)*r10*x13841*x13844)));
evalcond[3]=(((r22*x13859))+x13848+x13855+((x13851*x13857))+((r20*x13852))+(((-1.0)*cj3*r21*x13844))+((x13843*x13857)));
evalcond[4]=(((x13849*x13857))+((r00*x13852))+((sj1*x13846))+(((-1.0)*sj0*x13856))+(((-1.0)*x13844*x13845))+((r00*sj5*x13857))+((r02*x13859)));
evalcond[5]=(((cj0*x13856))+((r12*x13859))+(((-1.0)*cj2*sj1*x13854))+((cj5*x13847))+(((-1.0)*cj3*r11*x13844))+((r10*sj5*x13857))+((x13850*x13857)));
evalcond[6]=((((-1.0)*cj3*r22*x13858))+x13856+(((-1.0)*x13851*x13860))+((r20*x13853))+(((-1.0)*r21*sj3*x13844))+(((-1.0)*x13861))+(((-1.0)*x13843*x13860)));
evalcond[7]=(((sj0*x13848))+((r00*x13853))+(((-1.0)*cj5*x13842*x13845))+(((-1.0)*r00*x13844*x13860))+((cj1*x13846))+(((-1.0)*r01*sj3*x13844))+(((-1.0)*cj3*r02*x13858)));
evalcond[8]=((((-1.0)*x13848*x13854))+(((-1.0)*cj3*r12*x13858))+(((-1.0)*r11*sj3*x13844))+(((-1.0)*x13850*x13860))+(((-1.0)*x13842*x13844*x13847))+((r10*x13853))+(((-1.0)*x13854*x13855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13862=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x13862.valid){
continue;
}
CheckValue<IkReal> x13863 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13862.value)))+(x13863.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13864=IKsin(j4);
IkReal x13865=IKcos(j4);
IkReal x13866=(r20*sj5);
IkReal x13867=((1.0)*sj5);
IkReal x13868=(cj3*r01);
IkReal x13869=(cj2*sj0);
IkReal x13870=(cj3*r10);
IkReal x13871=(sj1*sj2);
IkReal x13872=(cj5*r01);
IkReal x13873=(cj5*r11);
IkReal x13874=(cj5*r21);
IkReal x13875=(cj3*cj5);
IkReal x13876=(cj5*sj3);
IkReal x13877=((1.0)*cj0);
IkReal x13878=(cj1*cj2);
IkReal x13879=(cj1*sj2);
IkReal x13880=(sj3*x13865);
IkReal x13881=((1.0)*x13864);
IkReal x13882=(sj3*x13864);
IkReal x13883=(cj3*x13865);
IkReal x13884=((1.0)*cj2*sj1);
evalcond[0]=(((r22*x13865))+(((-1.0)*x13874*x13881))+(((-1.0)*x13866*x13881)));
evalcond[1]=(cj0+((r02*x13865))+(((-1.0)*r00*x13864*x13867))+(((-1.0)*x13872*x13881)));
evalcond[2]=((((-1.0)*x13873*x13881))+sj0+(((-1.0)*r10*x13864*x13867))+((r12*x13865)));
evalcond[3]=(x13878+x13871+((r20*x13875))+((x13866*x13880))+(((-1.0)*cj3*r21*x13867))+((x13874*x13880))+((r22*x13882)));
evalcond[4]=(((x13872*x13880))+((sj1*x13869))+(((-1.0)*x13867*x13868))+((r02*x13882))+((r00*x13875))+((r00*sj5*x13880))+(((-1.0)*sj0*x13879)));
evalcond[5]=((((-1.0)*cj2*sj1*x13877))+((r10*sj5*x13880))+(((-1.0)*cj3*r11*x13867))+((cj0*x13879))+((cj5*x13870))+((r12*x13882))+((x13873*x13880)));
evalcond[6]=((((-1.0)*x13866*x13883))+x13879+((r20*x13876))+(((-1.0)*cj3*r22*x13881))+(((-1.0)*r21*sj3*x13867))+(((-1.0)*x13874*x13883))+(((-1.0)*x13884)));
evalcond[7]=((((-1.0)*cj5*x13865*x13868))+(((-1.0)*r00*x13867*x13883))+(((-1.0)*r01*sj3*x13867))+((r00*x13876))+(((-1.0)*cj3*r02*x13881))+((cj1*x13869))+((sj0*x13871)));
evalcond[8]=((((-1.0)*x13865*x13867*x13870))+(((-1.0)*x13871*x13877))+(((-1.0)*cj3*r12*x13881))+(((-1.0)*x13873*x13883))+(((-1.0)*r11*sj3*x13867))+(((-1.0)*x13877*x13878))+((r10*x13876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13885 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13885.valid){
continue;
}
CheckValue<IkReal> x13886=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x13886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13885.value)+(((1.5707963267949)*(x13886.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13887=IKsin(j4);
IkReal x13888=IKcos(j4);
IkReal x13889=(r20*sj5);
IkReal x13890=((1.0)*sj5);
IkReal x13891=(cj3*r01);
IkReal x13892=(cj2*sj0);
IkReal x13893=(cj3*r10);
IkReal x13894=(sj1*sj2);
IkReal x13895=(cj5*r01);
IkReal x13896=(cj5*r11);
IkReal x13897=(cj5*r21);
IkReal x13898=(cj3*cj5);
IkReal x13899=(cj5*sj3);
IkReal x13900=((1.0)*cj0);
IkReal x13901=(cj1*cj2);
IkReal x13902=(cj1*sj2);
IkReal x13903=(sj3*x13888);
IkReal x13904=((1.0)*x13887);
IkReal x13905=(sj3*x13887);
IkReal x13906=(cj3*x13888);
IkReal x13907=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*x13889*x13904))+(((-1.0)*x13897*x13904))+((r22*x13888)));
evalcond[1]=(cj0+((r02*x13888))+(((-1.0)*r00*x13887*x13890))+(((-1.0)*x13895*x13904)));
evalcond[2]=(sj0+(((-1.0)*x13896*x13904))+((r12*x13888))+(((-1.0)*r10*x13887*x13890)));
evalcond[3]=((((-1.0)*cj3*r21*x13890))+((r22*x13905))+((x13889*x13903))+x13894+x13901+((r20*x13898))+((x13897*x13903)));
evalcond[4]=(((r02*x13905))+((x13895*x13903))+((sj1*x13892))+(((-1.0)*sj0*x13902))+((r00*x13898))+(((-1.0)*x13890*x13891))+((r00*sj5*x13903)));
evalcond[5]=(((cj0*x13902))+(((-1.0)*cj2*sj1*x13900))+(((-1.0)*cj3*r11*x13890))+((r12*x13905))+((x13896*x13903))+((cj5*x13893))+((r10*sj5*x13903)));
evalcond[6]=((((-1.0)*r21*sj3*x13890))+(((-1.0)*cj3*r22*x13904))+x13902+((r20*x13899))+(((-1.0)*x13889*x13906))+(((-1.0)*x13897*x13906))+(((-1.0)*x13907)));
evalcond[7]=((((-1.0)*r01*sj3*x13890))+(((-1.0)*cj5*x13888*x13891))+((sj0*x13894))+((cj1*x13892))+(((-1.0)*r00*x13890*x13906))+(((-1.0)*cj3*r02*x13904))+((r00*x13899)));
evalcond[8]=((((-1.0)*x13894*x13900))+(((-1.0)*cj3*r12*x13904))+(((-1.0)*x13896*x13906))+((r10*x13899))+(((-1.0)*x13888*x13890*x13893))+(((-1.0)*r11*sj3*x13890))+(((-1.0)*x13900*x13901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13908=r20*r20;
IkReal x13909=cj5*cj5;
IkReal x13910=r21*r21;
IkReal x13911=(cj5*sj5);
IkReal x13912=((1.0)*sj3);
IkReal x13913=(cj1*sj2);
IkReal x13914=(r20*sj5);
IkReal x13915=(cj5*r21);
IkReal x13916=(cj3*x13909);
IkReal x13917=(r20*r21*sj3);
IkReal x13918=((1.0)*cj2*sj1);
CheckValue<IkReal> x13919 = IKatan2WithCheck(IkReal((((r22*x13913))+((cj5*r20*r22*sj3))+(((-1.0)*r21*r22*sj5*x13912))+(((-1.0)*r22*x13918)))),IkReal(((((-1.0)*x13914*x13918))+(((2.0)*x13909*x13917))+(((-1.0)*x13910*x13911*x13912))+(((-1.0)*x13915*x13918))+((x13913*x13915))+((x13913*x13914))+((sj3*x13908*x13911))+(((-1.0)*r20*r21*x13912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13919.valid){
continue;
}
CheckValue<IkReal> x13920=IKPowWithIntegerCheck(IKsign((((x13910*x13916))+((cj3*(r22*r22)))+((cj3*x13908))+(((-1.0)*x13908*x13916))+(((2.0)*cj3*r20*r21*x13911)))),-1);
if(!x13920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13919.value)+(((1.5707963267949)*(x13920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x13921=IKsin(j4);
IkReal x13922=IKcos(j4);
IkReal x13923=((1.0)*r21);
IkReal x13924=(sj3*sj5);
IkReal x13925=(cj5*sj3);
IkReal x13926=((1.0)*cj3);
IkReal x13927=(cj3*cj5);
IkReal x13928=(r20*x13922);
IkReal x13929=(r22*x13921);
evalcond[0]=((((-1.0)*r20*sj5*x13921))+(((-1.0)*cj5*x13921*x13923))+((r22*x13922)));
evalcond[1]=(((r21*x13922*x13925))+((r20*x13927))+((sj3*x13929))+((sj1*sj2))+((cj1*cj2))+(((-1.0)*cj3*sj5*x13923))+((x13924*x13928)));
evalcond[2]=((((-1.0)*x13926*x13929))+((r20*x13925))+((cj1*sj2))+(((-1.0)*cj2*sj1))+(((-1.0)*x13923*x13924))+(((-1.0)*x13922*x13923*x13927))+(((-1.0)*sj5*x13926*x13928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13930=(sj4*sj5);
IkReal x13931=(cj5*sj4);
IkReal x13932=((1.0)*cj4);
if( IKabs((((r11*x13931))+(((-1.0)*r12*x13932))+((r10*x13930)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x13930))+((r01*x13931))+(((-1.0)*r02*x13932)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x13931))+(((-1.0)*r12*x13932))+((r10*x13930))))+IKsqr((((r00*x13930))+((r01*x13931))+(((-1.0)*r02*x13932))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x13931))+(((-1.0)*r12*x13932))+((r10*x13930))), (((r00*x13930))+((r01*x13931))+(((-1.0)*r02*x13932))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13933=IKsin(j0);
IkReal x13934=IKcos(j0);
IkReal x13935=((1.0)*cj3);
IkReal x13936=(r01*sj5);
IkReal x13937=(r02*sj4);
IkReal x13938=(sj3*sj5);
IkReal x13939=((1.0)*r11);
IkReal x13940=(cj5*r10);
IkReal x13941=(cj4*cj5);
IkReal x13942=(cj4*r00);
IkReal x13943=(r10*sj5);
IkReal x13944=((1.0)*sj2);
IkReal x13945=((1.0)*sj4);
IkReal x13946=(r12*sj4);
IkReal x13947=(r11*sj5);
IkReal x13948=(cj5*r00);
IkReal x13949=((0.452)*cj2);
IkReal x13950=((0.452)*sj2);
IkReal x13951=((1.0)*cj2);
IkReal x13952=(cj1*x13933);
IkReal x13953=(sj1*x13934);
IkReal x13954=(sj1*x13933);
IkReal x13955=(cj1*x13934);
evalcond[0]=((((-1.0)*cj5*r01*x13945))+x13934+(((-1.0)*r00*sj5*x13945))+((cj4*r02)));
evalcond[1]=(x13933+(((-1.0)*x13943*x13945))+(((-1.0)*cj5*sj4*x13939))+((cj4*r12)));
evalcond[2]=((((-0.1135)*x13948))+(((0.1135)*x13936))+(((0.452)*x13954))+(((0.1054)*x13934))+(((-1.0)*px))+(((-1.0)*x13950*x13952))+((x13949*x13954)));
evalcond[3]=((((-0.1135)*x13940))+(((-1.0)*x13949*x13953))+(((0.1054)*x13933))+(((-1.0)*py))+((x13950*x13955))+(((-0.452)*x13953))+(((0.1135)*x13947)));
evalcond[4]=(((cj3*x13948))+((sj3*x13937))+((cj2*x13954))+(((-1.0)*x13935*x13936))+(((-1.0)*x13944*x13952))+((r01*sj3*x13941))+((x13938*x13942)));
evalcond[5]=((((-1.0)*x13935*x13947))+((cj3*x13940))+((sj3*x13946))+((cj4*r10*x13938))+((r11*sj3*x13941))+(((-1.0)*x13951*x13953))+((sj2*x13955)));
evalcond[6]=(((cj2*x13952))+(((-1.0)*x13935*x13937))+(((-1.0)*sj3*x13936))+(((-1.0)*r01*x13935*x13941))+((sj3*x13948))+(((-1.0)*sj5*x13935*x13942))+((sj2*x13954)));
evalcond[7]=((((-1.0)*x13935*x13946))+(((-1.0)*cj4*x13935*x13943))+(((-1.0)*x13944*x13953))+(((-1.0)*x13938*x13939))+((sj3*x13940))+(((-1.0)*r11*x13935*x13941))+(((-1.0)*x13951*x13955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13956=cj5*cj5;
IkReal x13957=r20*r20;
IkReal x13958=r21*r21;
IkReal x13959=((1.0)*sj3);
IkReal x13960=(sj1*sj2);
IkReal x13961=(cj5*r21);
IkReal x13962=(cj3*sj5);
IkReal x13963=((1.0)*r21);
IkReal x13964=(cj3*r20);
IkReal x13965=(r20*sj5);
IkReal x13966=(cj1*cj2);
CheckValue<IkReal> x13967 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13962*x13963))+((cj5*r22*x13964))+((r22*x13960))+((r22*x13966)))),IkReal((((cj5*x13957*x13962))+((x13961*x13966))+((x13960*x13961))+((x13960*x13965))+(((-1.0)*x13963*x13964))+((x13965*x13966))+(((-1.0)*cj5*x13958*x13962))+(((2.0)*r21*x13956*x13964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13967.valid){
continue;
}
CheckValue<IkReal> x13968=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13957*x13959))+(((-2.0)*sj3*x13961*x13965))+((sj3*x13956*x13957))+(((-1.0)*x13959*(r22*r22)))+(((-1.0)*x13956*x13958*x13959)))),-1);
if(!x13968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13967.value)+(((1.5707963267949)*(x13968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x13969=IKsin(j4);
IkReal x13970=IKcos(j4);
IkReal x13971=((1.0)*r21);
IkReal x13972=(sj3*sj5);
IkReal x13973=(cj5*sj3);
IkReal x13974=((1.0)*cj3);
IkReal x13975=(cj3*cj5);
IkReal x13976=(r20*x13970);
IkReal x13977=(r22*x13969);
evalcond[0]=((((-1.0)*cj5*x13969*x13971))+(((-1.0)*r20*sj5*x13969))+((r22*x13970)));
evalcond[1]=(((sj1*sj2))+((sj3*x13977))+((r20*x13975))+((x13972*x13976))+((r21*x13970*x13973))+((cj1*cj2))+(((-1.0)*cj3*sj5*x13971)));
evalcond[2]=((((-1.0)*x13971*x13972))+(((-1.0)*x13970*x13971*x13975))+((cj1*sj2))+(((-1.0)*cj2*sj1))+((r20*x13973))+(((-1.0)*sj5*x13974*x13976))+(((-1.0)*x13974*x13977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13978=(sj4*sj5);
IkReal x13979=(cj5*sj4);
IkReal x13980=((1.0)*cj4);
if( IKabs((((r10*x13978))+((r11*x13979))+(((-1.0)*r12*x13980)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x13980))+((r00*x13978))+((r01*x13979)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x13978))+((r11*x13979))+(((-1.0)*r12*x13980))))+IKsqr(((((-1.0)*r02*x13980))+((r00*x13978))+((r01*x13979))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x13978))+((r11*x13979))+(((-1.0)*r12*x13980))), ((((-1.0)*r02*x13980))+((r00*x13978))+((r01*x13979))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13981=IKsin(j0);
IkReal x13982=IKcos(j0);
IkReal x13983=((1.0)*cj3);
IkReal x13984=(r01*sj5);
IkReal x13985=(r02*sj4);
IkReal x13986=(sj3*sj5);
IkReal x13987=((1.0)*r11);
IkReal x13988=(cj5*r10);
IkReal x13989=(cj4*cj5);
IkReal x13990=(cj4*r00);
IkReal x13991=(r10*sj5);
IkReal x13992=((1.0)*sj2);
IkReal x13993=((1.0)*sj4);
IkReal x13994=(r12*sj4);
IkReal x13995=(r11*sj5);
IkReal x13996=(cj5*r00);
IkReal x13997=((0.452)*cj2);
IkReal x13998=((0.452)*sj2);
IkReal x13999=((1.0)*cj2);
IkReal x14000=(cj1*x13981);
IkReal x14001=(sj1*x13982);
IkReal x14002=(sj1*x13981);
IkReal x14003=(cj1*x13982);
evalcond[0]=(x13982+(((-1.0)*cj5*r01*x13993))+(((-1.0)*r00*sj5*x13993))+((cj4*r02)));
evalcond[1]=((((-1.0)*cj5*sj4*x13987))+x13981+(((-1.0)*x13991*x13993))+((cj4*r12)));
evalcond[2]=((((0.1135)*x13984))+(((-0.1135)*x13996))+(((-1.0)*x13998*x14000))+(((-1.0)*px))+((x13997*x14002))+(((0.1054)*x13982))+(((0.452)*x14002)));
evalcond[3]=((((0.1135)*x13995))+(((-0.452)*x14001))+((x13998*x14003))+(((-1.0)*py))+(((0.1054)*x13981))+(((-1.0)*x13997*x14001))+(((-0.1135)*x13988)));
evalcond[4]=(((sj3*x13985))+((cj3*x13996))+((x13986*x13990))+(((-1.0)*x13992*x14000))+(((-1.0)*x13983*x13984))+((cj2*x14002))+((r01*sj3*x13989)));
evalcond[5]=((((-1.0)*x13983*x13995))+((cj4*r10*x13986))+((r11*sj3*x13989))+((cj3*x13988))+((sj2*x14003))+(((-1.0)*x13999*x14001))+((sj3*x13994)));
evalcond[6]=((((-1.0)*sj5*x13983*x13990))+((sj2*x14002))+(((-1.0)*r01*x13983*x13989))+((sj3*x13996))+(((-1.0)*x13983*x13985))+((cj2*x14000))+(((-1.0)*sj3*x13984)));
evalcond[7]=(((sj3*x13988))+(((-1.0)*x13983*x13994))+(((-1.0)*cj4*x13983*x13991))+(((-1.0)*x13986*x13987))+(((-1.0)*x13999*x14003))+(((-1.0)*x13992*x14001))+(((-1.0)*r11*x13983*x13989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - avena (dcccfd9f85c8746da5673c5c2c31c5f6)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
} // namespace ik_avena
